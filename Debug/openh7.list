
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000215a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a10  08021848  08021848  00031848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00016e2a  08024258  08024258  00034258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000034c  0803b084  0803b084  0004b084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0803b3d0  0803b3d0  0004b3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000028  0803b3d8  0803b3d8  0004b3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000001c  0803b400  0803b400  0004b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0803b41c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dfc  20000314  0803b730  00050314  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007110  0803b730  00057110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050314  2**0
                  CONTENTS, READONLY
 12 .debug_info   000e5b4e  00000000  00000000  00050342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00016439  00000000  00000000  00135e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005388  00000000  00000000  0014c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004cf8  00000000  00000000  00151658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000514eb  00000000  00000000  00156350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000684c3  00000000  00000000  001a783b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001d556b  00000000  00000000  0020fcfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  003e5269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016f28  00000000  00000000  003e5338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000314 	.word	0x20000314
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802182c 	.word	0x0802182c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000318 	.word	0x20000318
 80002dc:	0802182c 	.word	0x0802182c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ba:	4a31      	ldr	r2, [pc, #196]	; (8000780 <MX_ADC1_Init+0xec>)
 80006bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_ADC1_Init+0xe8>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <MX_ADC1_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ADC1_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_ADC1_Init+0xe8>)
 8000718:	f004 fca6 	bl	8005068 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000722:	f002 ff6f 	bl	8003604 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_ADC1_Init+0xe8>)
 8000732:	f006 fd4b 	bl	80071cc <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800073c:	f002 ff62 	bl	8003604 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_ADC1_Init+0xf0>)
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_ADC1_Init+0xe8>)
 8000764:	f005 fbb8 	bl	8005ed8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800076e:	f002 ff49 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000330 	.word	0x20000330
 8000780:	40022000 	.word	0x40022000
 8000784:	0c900008 	.word	0x0c900008

08000788 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_ADC3_Init+0x108>)
 80007b4:	4a37      	ldr	r2, [pc, #220]	; (8000894 <MX_ADC3_Init+0x10c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_ADC3_Init+0x108>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC3_Init+0x108>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC3_Init+0x108>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_ADC3_Init+0x108>)
 80007da:	2201      	movs	r2, #1
 80007dc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC3_Init+0x108>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC3_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC3_Init+0x108>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC3_Init+0x108>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_ADC3_Init+0x108>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC3_Init+0x108>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC3_Init+0x108>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000810:	481f      	ldr	r0, [pc, #124]	; (8000890 <MX_ADC3_Init+0x108>)
 8000812:	f004 fc29 	bl	8005068 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 800081c:	f002 fef2 	bl	8003604 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_ADC3_Init+0x110>)
 8000822:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000824:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_ADC3_Init+0x114>)
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 800082e:	2301      	movs	r3, #1
 8000830:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 15896;
 8000834:	f643 6318 	movw	r3, #15896	; 0x3e18
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 10881;
 800083a:	f642 2381 	movw	r3, #10881	; 0x2a81
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_ADC3_Init+0x108>)
 8000848:	f005 fe96 	bl	8006578 <HAL_ADC_AnalogWDGConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000852:	f002 fed7 	bl	8003604 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_ADC3_Init+0x114>)
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2306      	movs	r3, #6
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800085e:	2307      	movs	r3, #7
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000862:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC3_Init+0x108>)
 800087a:	f005 fb2d 	bl	8005ed8 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000884:	f002 febe 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3738      	adds	r7, #56	; 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000394 	.word	0x20000394
 8000894:	58026000 	.word	0x58026000
 8000898:	7dc00000 	.word	0x7dc00000
 800089c:	cb840000 	.word	0xcb840000

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a26      	ldr	r2, [pc, #152]	; (8000958 <HAL_ADC_MspInit+0xb8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12a      	bne.n	8000918 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c8:	4a24      	ldr	r2, [pc, #144]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <HAL_ADC_MspInit+0xc0>)
 8000912:	f007 f815 	bl	8007940 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000916:	e01b      	b.n	8000950 <HAL_ADC_MspInit+0xb0>
  else if(adcHandle->Instance==ADC3)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a11      	ldr	r2, [pc, #68]	; (8000964 <HAL_ADC_MspInit+0xc4>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d116      	bne.n	8000950 <HAL_ADC_MspInit+0xb0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_ADC_MspInit+0xbc>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <HAL_ADC_MspInit+0xbc>)
 800092a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_ADC_MspInit+0xbc>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2105      	movs	r1, #5
 8000944:	207f      	movs	r0, #127	; 0x7f
 8000946:	f006 fdd7 	bl	80074f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800094a:	207f      	movs	r0, #127	; 0x7f
 800094c:	f006 fdee 	bl	800752c <HAL_NVIC_EnableIRQ>
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40022000 	.word	0x40022000
 800095c:	58024400 	.word	0x58024400
 8000960:	58020000 	.word	0x58020000
 8000964:	58026000 	.word	0x58026000

08000968 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_CRC_Init+0x3c>)
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <MX_CRC_Init+0x40>)
 8000970:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_CRC_Init+0x3c>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_CRC_Init+0x3c>)
 800098c:	2201      	movs	r2, #1
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000992:	f006 fdd9 	bl	8007548 <HAL_CRC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800099c:	f002 fe32 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200003f8 	.word	0x200003f8
 80009a8:	58024c00 	.word	0x58024c00

080009ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_CRC_MspInit+0x3c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10e      	bne.n	80009dc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	58024c00 	.word	0x58024c00
 80009ec:	58024400 	.word	0x58024400

080009f0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <MX_DMA2D_Init+0x70>)
 80009f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a38:	f006 fe70 	bl	800771c <HAL_DMA2D_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a42:	f002 fddf 	bl	8003604 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a46:	2101      	movs	r1, #1
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a4a:	f006 fecb 	bl	80077e4 <HAL_DMA2D_ConfigLayer>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000a54:	f002 fdd6 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000041c 	.word	0x2000041c
 8000a60:	52001000 	.word	0x52001000

08000a64 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_DMA2D_MspInit+0x3c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10e      	bne.n	8000a94 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	52001000 	.word	0x52001000
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of InfusionQ */
  InfusionQHandle = osMessageQueueNew (16, sizeof(Infusion_paramT), &InfusionQ_attributes);
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <MX_FREERTOS_Init+0xe8>)
 8000aae:	211c      	movs	r1, #28
 8000ab0:	2010      	movs	r0, #16
 8000ab2:	f011 f9f9 	bl	8011ea8 <osMessageQueueNew>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a36      	ldr	r2, [pc, #216]	; (8000b94 <MX_FREERTOS_Init+0xec>)
 8000aba:	6013      	str	r3, [r2, #0]

  /* creation of VolumeQ */
  VolumeQHandle = osMessageQueueNew (8, sizeof(float), &VolumeQ_attributes);
 8000abc:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <MX_FREERTOS_Init+0xf0>)
 8000abe:	2104      	movs	r1, #4
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f011 f9f1 	bl	8011ea8 <osMessageQueueNew>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <MX_FREERTOS_Init+0xf4>)
 8000aca:	6013      	str	r3, [r2, #0]

  /* creation of FlowRateQ */
  FlowRateQHandle = osMessageQueueNew (8, sizeof(float), &FlowRateQ_attributes);
 8000acc:	4a34      	ldr	r2, [pc, #208]	; (8000ba0 <MX_FREERTOS_Init+0xf8>)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	2008      	movs	r0, #8
 8000ad2:	f011 f9e9 	bl	8011ea8 <osMessageQueueNew>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <MX_FREERTOS_Init+0xfc>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* creation of TimeQ */
  TimeQHandle = osMessageQueueNew (8, sizeof(float), &TimeQ_attributes);
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_FREERTOS_Init+0x100>)
 8000ade:	2104      	movs	r1, #4
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f011 f9e1 	bl	8011ea8 <osMessageQueueNew>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a30      	ldr	r2, [pc, #192]	; (8000bac <MX_FREERTOS_Init+0x104>)
 8000aea:	6013      	str	r3, [r2, #0]

  /* creation of LastStepQ */
  LastStepQHandle = osMessageQueueNew (2, sizeof(uint16_t), &LastStepQ_attributes);
 8000aec:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <MX_FREERTOS_Init+0x108>)
 8000aee:	2102      	movs	r1, #2
 8000af0:	2002      	movs	r0, #2
 8000af2:	f011 f9d9 	bl	8011ea8 <osMessageQueueNew>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <MX_FREERTOS_Init+0x10c>)
 8000afa:	6013      	str	r3, [r2, #0]

  /* creation of RadiusQ */
  RadiusQHandle = osMessageQueueNew (2, sizeof(uint8_t), &RadiusQ_attributes);
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <MX_FREERTOS_Init+0x110>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	2002      	movs	r0, #2
 8000b02:	f011 f9d1 	bl	8011ea8 <osMessageQueueNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <MX_FREERTOS_Init+0x114>)
 8000b0a:	6013      	str	r3, [r2, #0]

  /* creation of VolumeLeftQ */
  VolumeLeftQHandle = osMessageQueueNew (8, sizeof(float), &VolumeLeftQ_attributes);
 8000b0c:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <MX_FREERTOS_Init+0x118>)
 8000b0e:	2104      	movs	r1, #4
 8000b10:	2008      	movs	r0, #8
 8000b12:	f011 f9c9 	bl	8011ea8 <osMessageQueueNew>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <MX_FREERTOS_Init+0x11c>)
 8000b1a:	6013      	str	r3, [r2, #0]

  /* creation of ModeQ */
  ModeQHandle = osMessageQueueNew (8, sizeof(uint8_t), &ModeQ_attributes);
 8000b1c:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <MX_FREERTOS_Init+0x120>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2008      	movs	r0, #8
 8000b22:	f011 f9c1 	bl	8011ea8 <osMessageQueueNew>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <MX_FREERTOS_Init+0x124>)
 8000b2a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of battery_manage */
  battery_manageHandle = osThreadNew(StartBatteryManage, NULL, &battery_manage_attributes);
 8000b2c:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <MX_FREERTOS_Init+0x128>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4828      	ldr	r0, [pc, #160]	; (8000bd4 <MX_FREERTOS_Init+0x12c>)
 8000b32:	f010 ffec 	bl	8011b0e <osThreadNew>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <MX_FREERTOS_Init+0x130>)
 8000b3a:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <MX_FREERTOS_Init+0x134>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <MX_FREERTOS_Init+0x138>)
 8000b42:	f010 ffe4 	bl	8011b0e <osThreadNew>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <MX_FREERTOS_Init+0x13c>)
 8000b4a:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <MX_FREERTOS_Init+0x140>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <MX_FREERTOS_Init+0x144>)
 8000b52:	f010 ffdc 	bl	8011b0e <osThreadNew>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <MX_FREERTOS_Init+0x148>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 8000b5c:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <MX_FREERTOS_Init+0x14c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_FREERTOS_Init+0x150>)
 8000b62:	f010 ffd4 	bl	8011b0e <osThreadNew>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a24      	ldr	r2, [pc, #144]	; (8000bfc <MX_FREERTOS_Init+0x154>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 8000b6c:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <MX_FREERTOS_Init+0x158>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <MX_FREERTOS_Init+0x15c>)
 8000b72:	f010 ffcc 	bl	8011b0e <osThreadNew>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_FREERTOS_Init+0x160>)
 8000b7a:	6013      	str	r3, [r2, #0]

  /* creation of DataStorage */
  DataStorageHandle = osThreadNew(StartDataStorage, NULL, &DataStorage_attributes);
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <MX_FREERTOS_Init+0x164>)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4823      	ldr	r0, [pc, #140]	; (8000c10 <MX_FREERTOS_Init+0x168>)
 8000b82:	f010 ffc4 	bl	8011b0e <osThreadNew>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <MX_FREERTOS_Init+0x16c>)
 8000b8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08022028 	.word	0x08022028
 8000b94:	2000049c 	.word	0x2000049c
 8000b98:	08022040 	.word	0x08022040
 8000b9c:	200004a0 	.word	0x200004a0
 8000ba0:	08022058 	.word	0x08022058
 8000ba4:	200004a4 	.word	0x200004a4
 8000ba8:	08022070 	.word	0x08022070
 8000bac:	200004a8 	.word	0x200004a8
 8000bb0:	08022088 	.word	0x08022088
 8000bb4:	200004ac 	.word	0x200004ac
 8000bb8:	080220a0 	.word	0x080220a0
 8000bbc:	200004b0 	.word	0x200004b0
 8000bc0:	080220b8 	.word	0x080220b8
 8000bc4:	200004b4 	.word	0x200004b4
 8000bc8:	080220d0 	.word	0x080220d0
 8000bcc:	200004b8 	.word	0x200004b8
 8000bd0:	08021f50 	.word	0x08021f50
 8000bd4:	08000c19 	.word	0x08000c19
 8000bd8:	20000484 	.word	0x20000484
 8000bdc:	08021f74 	.word	0x08021f74
 8000be0:	08000c2d 	.word	0x08000c2d
 8000be4:	20000488 	.word	0x20000488
 8000be8:	08021f98 	.word	0x08021f98
 8000bec:	08000d71 	.word	0x08000d71
 8000bf0:	2000048c 	.word	0x2000048c
 8000bf4:	08021fbc 	.word	0x08021fbc
 8000bf8:	08000f45 	.word	0x08000f45
 8000bfc:	20000490 	.word	0x20000490
 8000c00:	08021fe0 	.word	0x08021fe0
 8000c04:	08001075 	.word	0x08001075
 8000c08:	20000494 	.word	0x20000494
 8000c0c:	08022004 	.word	0x08022004
 8000c10:	080012a1 	.word	0x080012a1
 8000c14:	20000498 	.word	0x20000498

08000c18 <StartBatteryManage>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBatteryManage */
void StartBatteryManage(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryManage */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8000c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c24:	f011 f805 	bl	8011c32 <osDelay>
 8000c28:	e7fa      	b.n	8000c20 <StartBatteryManage+0x8>
	...

08000c2c <Stepper_motor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */

	// drv8825 structure initialization
	//drv8825_init(&drv, Dir_G_GPIO_Port, Dir_G_Pin,En_G_GPIO_Port, En_G_Pin, &htim2, TIM_CHANNEL_1);
	float Flowrate=0, radius = 7;
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <Stepper_motor+0x12c>)
 8000c3c:	61fb      	str	r3, [r7, #28]
	float volume_to_inject=0;
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
	int timeneeded = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
	uint8_t mode=0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	72fb      	strb	r3, [r7, #11]
	uint16_t laststep;
	/* Infinite loop */
	for (;;) {
		osMessageQueueGet(FlowRateQHandle, &Flowrate, 10U, 100);
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <Stepper_motor+0x130>)
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	f107 0110 	add.w	r1, r7, #16
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	220a      	movs	r2, #10
 8000c58:	f011 f9fa 	bl	8012050 <osMessageQueueGet>
		osMessageQueueGet(VolumeQHandle, &volume_to_inject, 10U,100);
 8000c5c:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <Stepper_motor+0x134>)
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	f107 010c 	add.w	r1, r7, #12
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	220a      	movs	r2, #10
 8000c68:	f011 f9f2 	bl	8012050 <osMessageQueueGet>
		if ( Flowrate!=0 && volume_to_inject!=0 &&(osMessageQueueGet(ModeQHandle, &mode, 10U, 100U)==osOK && mode==1)){
 8000c6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	d05d      	beq.n	8000d36 <Stepper_motor+0x10a>
 8000c7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	d056      	beq.n	8000d36 <Stepper_motor+0x10a>
 8000c88:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <Stepper_motor+0x138>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	f107 010b 	add.w	r1, r7, #11
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	220a      	movs	r2, #10
 8000c94:	f011 f9dc 	bl	8012050 <osMessageQueueGet>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d14b      	bne.n	8000d36 <Stepper_motor+0x10a>
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d148      	bne.n	8000d36 <Stepper_motor+0x10a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET );
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	482f      	ldr	r0, [pc, #188]	; (8000d68 <Stepper_motor+0x13c>)
 8000caa:	f007 f811 	bl	8007cd0 <HAL_GPIO_WritePin>
			timeneeded = Time_Needed(Flowrate, volume_to_inject);
 8000cae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cb6:	eef0 0a47 	vmov.f32	s1, s14
 8000cba:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbe:	f002 fb83 	bl	80033c8 <Time_Needed>
 8000cc2:	eef0 7a40 	vmov.f32	s15, s0
 8000cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cca:	ee17 3a90 	vmov	r3, s15
 8000cce:	61bb      	str	r3, [r7, #24]
			//timeneeded = volume_to_inject/(Flowrate/3600);

			laststep = timeneeded * (L6474_GetCurrentSpeed(0) / 16); //1/16 microstep
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 ff8b 	bl	8001bec <L6474_GetCurrentSpeed>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	fb12 f303 	smulbb	r3, r2, r3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	813b      	strh	r3, [r7, #8]
			osMessageQueuePut(LastStepQHandle, &laststep, 1, 100);
 8000ce8:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <Stepper_motor+0x140>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	f107 0108 	add.w	r1, r7, #8
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f011 f94c 	bl	8011f90 <osMessageQueuePut>
			SyringeMove(Flowrate, radius);
 8000cf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d04:	edc7 7a00 	vstr	s15, [r7]
 8000d08:	783b      	ldrb	r3, [r7, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d12:	f002 fb79 	bl	8003408 <SyringeMove>
			float a =(L6474_GetCurrentSpeed(0) / 16)*200;
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 ff68 	bl	8001bec <L6474_GetCurrentSpeed>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	23c8      	movs	r3, #200	; 0xc8
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	ee07 3a90 	vmov	s15, r3
 8000d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d32:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// ***** 0 => StopMode , 8=> PauseMode *******
		if((mode==0 || mode == 8)){
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <Stepper_motor+0x116>
 8000d3c:	7afb      	ldrb	r3, [r7, #11]
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d106      	bne.n	8000d50 <Stepper_motor+0x124>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET );
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <Stepper_motor+0x13c>)
 8000d48:	f006 ffc2 	bl	8007cd0 <HAL_GPIO_WritePin>
		 SyringeStop();
 8000d4c:	f002 fba2 	bl	8003494 <SyringeStop>
		 }
		osDelay(10);
 8000d50:	200a      	movs	r0, #10
 8000d52:	f010 ff6e 	bl	8011c32 <osDelay>
		osMessageQueueGet(FlowRateQHandle, &Flowrate, 10U, 100);
 8000d56:	e779      	b.n	8000c4c <Stepper_motor+0x20>
 8000d58:	40e00000 	.word	0x40e00000
 8000d5c:	200004a4 	.word	0x200004a4
 8000d60:	200004a0 	.word	0x200004a0
 8000d64:	200004b8 	.word	0x200004b8
 8000d68:	58020400 	.word	0x58020400
 8000d6c:	200004ac 	.word	0x200004ac

08000d70 <Cloud_Connectivity>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0ae      	sub	sp, #184	; 0xb8
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET); // UART clock
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4865      	ldr	r0, [pc, #404]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000d80:	f006 ffa6 	bl	8007cd0 <HAL_GPIO_WritePin>
	float Flowrate = 0, Timeleft = 0, Volumeleft = 0;
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char flowbuff[10], timebuff[10], volumebuff[10];

	/********** UNIQUE ID ***********/
	uint32_t (*unique_id_1) = (uint32_t*) (0x1FF1E800); // BASE address (reference manual stm32h743)
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	; (8000f18 <Cloud_Connectivity+0x1a8>)
 8000d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t (*unique_id_2) = (uint32_t*) (0x1FF1E804); // BASE address + 0x04 offset
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <Cloud_Connectivity+0x1ac>)
 8000da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint32_t (*unique_id_3) = (uint32_t*) (0x1FF1E808); // BASE address + 0x08 offset
 8000da8:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <Cloud_Connectivity+0x1b0>)
 8000daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char Id[85];
	int n = sprintf(Id, "%lu%lu%lu", *unique_id_1, *unique_id_2, *unique_id_3);
 8000dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f107 000c 	add.w	r0, r7, #12
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4956      	ldr	r1, [pc, #344]	; (8000f24 <Cloud_Connectivity+0x1b4>)
 8000dca:	f01e fe1d 	bl	801fa08 <siprintf>
 8000dce:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	484e      	ldr	r0, [pc, #312]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000dda:	f006 ff79 	bl	8007cd0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, Id, n, 100);
 8000dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f107 010c 	add.w	r1, r7, #12
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	484f      	ldr	r0, [pc, #316]	; (8000f28 <Cloud_Connectivity+0x1b8>)
 8000dec:	f00e fbba 	bl	800f564 <HAL_UART_Transmit>
	//osDelay(10);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df6:	4847      	ldr	r0, [pc, #284]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000df8:	f006 ff6a 	bl	8007cd0 <HAL_GPIO_WritePin>
	/* Infinite loop */
	// ***** f==> flowrate t==> timeleft v==>volumeleft *****
	for (;;) {
		if (osMessageQueueGet(FlowRateQHandle, &Flowrate, 1U, 100U) == osOK) {
 8000dfc:	4b4b      	ldr	r3, [pc, #300]	; (8000f2c <Cloud_Connectivity+0x1bc>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000e04:	2364      	movs	r3, #100	; 0x64
 8000e06:	2201      	movs	r2, #1
 8000e08:	f011 f922 	bl	8012050 <osMessageQueueGet>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d121      	bne.n	8000e56 <Cloud_Connectivity+0xe6>
			int nflow = sprintf((uint8_t*) flowbuff, "f%.3f", Flowrate);
 8000e12:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000e16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e1a:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000e1e:	ec53 2b17 	vmov	r2, r3, d7
 8000e22:	4943      	ldr	r1, [pc, #268]	; (8000f30 <Cloud_Connectivity+0x1c0>)
 8000e24:	f01e fdf0 	bl	801fa08 <siprintf>
 8000e28:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e32:	4838      	ldr	r0, [pc, #224]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000e34:	f006 ff4c 	bl	8007cd0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, (uint8_t*) flowbuff, nflow, 10);
 8000e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000e42:	230a      	movs	r3, #10
 8000e44:	4838      	ldr	r0, [pc, #224]	; (8000f28 <Cloud_Connectivity+0x1b8>)
 8000e46:	f00e fb8d 	bl	800f564 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	4830      	ldr	r0, [pc, #192]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000e52:	f006 ff3d 	bl	8007cd0 <HAL_GPIO_WritePin>
		}
		if (osMessageQueueGet(TimeQHandle, &Timeleft, 1U, 100U) == osOK) {
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <Cloud_Connectivity+0x1c4>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	2201      	movs	r2, #1
 8000e62:	f011 f8f5 	bl	8012050 <osMessageQueueGet>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d121      	bne.n	8000eb0 <Cloud_Connectivity+0x140>
			int ntime = sprintf((uint8_t*) timebuff, "t%f", Timeleft);
 8000e6c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000e70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e74:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000e78:	ec53 2b17 	vmov	r2, r3, d7
 8000e7c:	492e      	ldr	r1, [pc, #184]	; (8000f38 <Cloud_Connectivity+0x1c8>)
 8000e7e:	f01e fdc3 	bl	801fa08 <siprintf>
 8000e82:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	4821      	ldr	r0, [pc, #132]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000e8e:	f006 ff1f 	bl	8007cd0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, (uint8_t*) timebuff, ntime, 10);
 8000e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	4822      	ldr	r0, [pc, #136]	; (8000f28 <Cloud_Connectivity+0x1b8>)
 8000ea0:	f00e fb60 	bl	800f564 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eaa:	481a      	ldr	r0, [pc, #104]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000eac:	f006 ff10 	bl	8007cd0 <HAL_GPIO_WritePin>
		}
		if (osMessageQueueGet(VolumeLeftQHandle, &Volumeleft, 1U, 100U)
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <Cloud_Connectivity+0x1cc>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000eb8:	2364      	movs	r3, #100	; 0x64
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f011 f8c8 	bl	8012050 <osMessageQueueGet>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d121      	bne.n	8000f0a <Cloud_Connectivity+0x19a>
				== osOK) {
			int nvol = sprintf((uint8_t*) volumebuff, "v%.3f", Volumeleft);
 8000ec6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000eca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ece:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000ed2:	ec53 2b17 	vmov	r2, r3, d7
 8000ed6:	491a      	ldr	r1, [pc, #104]	; (8000f40 <Cloud_Connectivity+0x1d0>)
 8000ed8:	f01e fd96 	bl	801fa08 <siprintf>
 8000edc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000ee8:	f006 fef2 	bl	8007cd0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, (uint8_t*) volumebuff, nvol, 10);
 8000eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <Cloud_Connectivity+0x1b8>)
 8000efa:	f00e fb33 	bl	800f564 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <Cloud_Connectivity+0x1a4>)
 8000f06:	f006 fee3 	bl	8007cd0 <HAL_GPIO_WritePin>
		}
		osDelay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f010 fe91 	bl	8011c32 <osDelay>
		if (osMessageQueueGet(FlowRateQHandle, &Flowrate, 1U, 100U) == osOK) {
 8000f10:	e774      	b.n	8000dfc <Cloud_Connectivity+0x8c>
 8000f12:	bf00      	nop
 8000f14:	58020800 	.word	0x58020800
 8000f18:	1ff1e800 	.word	0x1ff1e800
 8000f1c:	1ff1e804 	.word	0x1ff1e804
 8000f20:	1ff1e808 	.word	0x1ff1e808
 8000f24:	080218d8 	.word	0x080218d8
 8000f28:	200008c8 	.word	0x200008c8
 8000f2c:	200004a4 	.word	0x200004a4
 8000f30:	080218e4 	.word	0x080218e4
 8000f34:	200004a8 	.word	0x200004a8
 8000f38:	080218ec 	.word	0x080218ec
 8000f3c:	200004b4 	.word	0x200004b4
 8000f40:	080218f0 	.word	0x080218f0

08000f44 <Sensors_measurements>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensors_measurements */
	float volumeleft = 0, timeleft = 0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
	uint16_t laststep = 0, traveled_steps = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	827b      	strh	r3, [r7, #18]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	83fb      	strh	r3, [r7, #30]
	float Flowrate = 0, volume_to_inject = 0;
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
	HAL_ADC_Start_IT(&hadc3);
 8000f6c:	483a      	ldr	r0, [pc, #232]	; (8001058 <Sensors_measurements+0x114>)
 8000f6e:	f004 fbdb 	bl	8005728 <HAL_ADC_Start_IT>
	/* Infinite loop */
	for (;;) {
		osMessageQueueGet(FlowRateQHandle, &Flowrate, 5U,100);
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <Sensors_measurements+0x118>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f107 010c 	add.w	r1, r7, #12
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	f011 f867 	bl	8012050 <osMessageQueueGet>
		osMessageQueueGet(VolumeQHandle, &volume_to_inject, 5U,100);
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <Sensors_measurements+0x11c>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	f107 0108 	add.w	r1, r7, #8
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f011 f85f 	bl	8012050 <osMessageQueueGet>
		osMessageQueueGet(LastStepQHandle, &laststep, 1U, 100);
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <Sensors_measurements+0x120>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f107 0112 	add.w	r1, r7, #18
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f011 f857 	bl	8012050 <osMessageQueueGet>
		if (Flowrate != 0 && volume_to_inject != 0  && laststep != 0) {
 8000fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d04e      	beq.n	800104e <Sensors_measurements+0x10a>
 8000fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	d047      	beq.n	800104e <Sensors_measurements+0x10a>
 8000fbe:	8a7b      	ldrh	r3, [r7, #18]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d044      	beq.n	800104e <Sensors_measurements+0x10a>
			traveled_steps = position();
 8000fc4:	f002 fa96 	bl	80034f4 <position>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	83fb      	strh	r3, [r7, #30]
			volumeleft = calculate_volume_left(traveled_steps, Flowrate,volume_to_inject); //mm^3
 8000fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd4:	8bfb      	ldrh	r3, [r7, #30]
 8000fd6:	eef0 0a47 	vmov.f32	s1, s14
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fac8 	bl	8003574 <calculate_volume_left>
 8000fe4:	eef0 7a40 	vmov.f32	s15, s0
 8000fe8:	edc7 7a06 	vstr	s15, [r7, #24]
			timeleft = volumeleft / Flowrate; // seconds
 8000fec:	edd7 6a06 	vldr	s13, [r7, #24]
 8000ff0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff8:	edc7 7a05 	vstr	s15, [r7, #20]
			osMessageQueuePut(VolumeLeftQHandle, &volumeleft, 1, 100);
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <Sensors_measurements+0x124>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	f107 0118 	add.w	r1, r7, #24
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	2201      	movs	r2, #1
 8001008:	f010 ffc2 	bl	8011f90 <osMessageQueuePut>
			osMessageQueuePut(TimeQHandle, &timeleft, 1, 100);
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <Sensors_measurements+0x128>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0114 	add.w	r1, r7, #20
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2201      	movs	r2, #1
 8001018:	f010 ffba 	bl	8011f90 <osMessageQueuePut>
			//volumeleft=-1;
			if (traveled_steps >= laststep || volumeleft <= 0 || timeleft <= 0)
 800101c:	8a7b      	ldrh	r3, [r7, #18]
 800101e:	8bfa      	ldrh	r2, [r7, #30]
 8001020:	429a      	cmp	r2, r3
 8001022:	d20d      	bcs.n	8001040 <Sensors_measurements+0xfc>
 8001024:	edd7 7a06 	vldr	s15, [r7, #24]
 8001028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d906      	bls.n	8001040 <Sensors_measurements+0xfc>
 8001032:	edd7 7a05 	vldr	s15, [r7, #20]
 8001036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d806      	bhi.n	800104e <Sensors_measurements+0x10a>
				osMessageQueuePut(ModeQHandle, 0, 10U, 100U); // ***** 0 => StopMode , 8=> PauseMode ******
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <Sensors_measurements+0x12c>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	220a      	movs	r2, #10
 8001048:	2100      	movs	r1, #0
 800104a:	f010 ffa1 	bl	8011f90 <osMessageQueuePut>
		}

		osDelay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f010 fdef 	bl	8011c32 <osDelay>
		osMessageQueueGet(FlowRateQHandle, &Flowrate, 5U,100);
 8001054:	e78d      	b.n	8000f72 <Sensors_measurements+0x2e>
 8001056:	bf00      	nop
 8001058:	20000394 	.word	0x20000394
 800105c:	200004a4 	.word	0x200004a4
 8001060:	200004a0 	.word	0x200004a0
 8001064:	200004ac 	.word	0x200004ac
 8001068:	200004b4 	.word	0x200004b4
 800106c:	200004a8 	.word	0x200004a8
 8001070:	200004b8 	.word	0x200004b8

08001074 <Interface>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b098      	sub	sp, #96	; 0x60
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
	Infusion_paramT msgPerfusionParameters;
	char check[10];
	msgPerfusionParameters.Mode=0;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	int num;
	/* Infinite loop */
	for (;;) {
		// ***** 0 => StopMode , 8=> PauseMode *******
		HAL_UART_Receive(&huart3, (uint8_t*) check, sizeof(check), 100);
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	220a      	movs	r2, #10
 800108a:	487c      	ldr	r0, [pc, #496]	; (800127c <Interface+0x208>)
 800108c:	f00e fb00 	bl	800f690 <HAL_UART_Receive>
		num =atoi(check);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4618      	mov	r0, r3
 8001096:	f01d fc1d 	bl	801e8d4 <atoi>
 800109a:	6378      	str	r0, [r7, #52]	; 0x34
			switch(num){
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	3b01      	subs	r3, #1
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	f200 80d2 	bhi.w	800124a <Interface+0x1d6>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <Interface+0x38>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010d1 	.word	0x080010d1
 80010b0:	080010f9 	.word	0x080010f9
 80010b4:	08001121 	.word	0x08001121
 80010b8:	08001149 	.word	0x08001149
 80010bc:	08001171 	.word	0x08001171
 80010c0:	0800119b 	.word	0x0800119b
 80010c4:	080011c5 	.word	0x080011c5
 80010c8:	080011ef 	.word	0x080011ef
 80010cc:	0800121d 	.word	0x0800121d
			case 1 :
				msgPerfusionParameters.Flowrate=50*1000;
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <Interface+0x20c>)
 80010d2:	61bb      	str	r3, [r7, #24]
				for(int i= 0; i<3;i++){
 80010d4:	2300      	movs	r3, #0
 80010d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010d8:	e00a      	b.n	80010f0 <Interface+0x7c>
				osMessageQueuePut(FlowRateQHandle, &msgPerfusionParameters.Flowrate, 10U,100);
 80010da:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <Interface+0x210>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f107 0118 	add.w	r1, r7, #24
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	220a      	movs	r2, #10
 80010e6:	f010 ff53 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 80010ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ec:	3301      	adds	r3, #1
 80010ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	ddf1      	ble.n	80010da <Interface+0x66>
				}
				break;
 80010f6:	e0bc      	b.n	8001272 <Interface+0x1fe>
			case 2 :
				msgPerfusionParameters.Flowrate=3000*1000;
 80010f8:	4b63      	ldr	r3, [pc, #396]	; (8001288 <Interface+0x214>)
 80010fa:	61bb      	str	r3, [r7, #24]
				for(int i= 0; i<3;i++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8001100:	e00a      	b.n	8001118 <Interface+0xa4>
				osMessageQueuePut(FlowRateQHandle, &msgPerfusionParameters.Flowrate, 10U,100);
 8001102:	4b60      	ldr	r3, [pc, #384]	; (8001284 <Interface+0x210>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f107 0118 	add.w	r1, r7, #24
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	220a      	movs	r2, #10
 800110e:	f010 ff3f 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 8001112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001114:	3301      	adds	r3, #1
 8001116:	65bb      	str	r3, [r7, #88]	; 0x58
 8001118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800111a:	2b02      	cmp	r3, #2
 800111c:	ddf1      	ble.n	8001102 <Interface+0x8e>
				}
				break;
 800111e:	e0a8      	b.n	8001272 <Interface+0x1fe>
			case 3 :
				msgPerfusionParameters.Flowrate=100*1000;
 8001120:	4b5a      	ldr	r3, [pc, #360]	; (800128c <Interface+0x218>)
 8001122:	61bb      	str	r3, [r7, #24]
				for(int i= 0; i<3;i++){
 8001124:	2300      	movs	r3, #0
 8001126:	657b      	str	r3, [r7, #84]	; 0x54
 8001128:	e00a      	b.n	8001140 <Interface+0xcc>
				osMessageQueuePut(FlowRateQHandle, &msgPerfusionParameters.Flowrate, 10U,100);
 800112a:	4b56      	ldr	r3, [pc, #344]	; (8001284 <Interface+0x210>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	f107 0118 	add.w	r1, r7, #24
 8001132:	2364      	movs	r3, #100	; 0x64
 8001134:	220a      	movs	r2, #10
 8001136:	f010 ff2b 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 800113a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800113c:	3301      	adds	r3, #1
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
 8001140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001142:	2b02      	cmp	r3, #2
 8001144:	ddf1      	ble.n	800112a <Interface+0xb6>
				}
				break;
 8001146:	e094      	b.n	8001272 <Interface+0x1fe>
			case 4 :
				msgPerfusionParameters.Flowrate=6000*1000;
 8001148:	4b51      	ldr	r3, [pc, #324]	; (8001290 <Interface+0x21c>)
 800114a:	61bb      	str	r3, [r7, #24]
				for(int i= 0; i<3;i++){
 800114c:	2300      	movs	r3, #0
 800114e:	653b      	str	r3, [r7, #80]	; 0x50
 8001150:	e00a      	b.n	8001168 <Interface+0xf4>
				osMessageQueuePut(FlowRateQHandle, &msgPerfusionParameters.Flowrate, 10U,100);
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <Interface+0x210>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f107 0118 	add.w	r1, r7, #24
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	220a      	movs	r2, #10
 800115e:	f010 ff17 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 8001162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001164:	3301      	adds	r3, #1
 8001166:	653b      	str	r3, [r7, #80]	; 0x50
 8001168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800116a:	2b02      	cmp	r3, #2
 800116c:	ddf1      	ble.n	8001152 <Interface+0xde>
				}
				break;
 800116e:	e080      	b.n	8001272 <Interface+0x1fe>
			case 5 :
				msgPerfusionParameters.InfousionVolume=10*1000;
 8001170:	4b48      	ldr	r3, [pc, #288]	; (8001294 <Interface+0x220>)
 8001172:	61fb      	str	r3, [r7, #28]
				for(int i= 0; i<3;i++){
 8001174:	2300      	movs	r3, #0
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001178:	e00b      	b.n	8001192 <Interface+0x11e>
				osMessageQueuePut(VolumeQHandle, &msgPerfusionParameters.InfousionVolume, 10U,100);
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <Interface+0x224>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	1d19      	adds	r1, r3, #4
 8001184:	2364      	movs	r3, #100	; 0x64
 8001186:	220a      	movs	r2, #10
 8001188:	f010 ff02 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 800118c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800118e:	3301      	adds	r3, #1
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001194:	2b02      	cmp	r3, #2
 8001196:	ddf0      	ble.n	800117a <Interface+0x106>
				}
				break;
 8001198:	e06b      	b.n	8001272 <Interface+0x1fe>
			case 6 :
				msgPerfusionParameters.InfousionVolume=50*1000;
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <Interface+0x20c>)
 800119c:	61fb      	str	r3, [r7, #28]
				for(int i= 0; i<3;i++){
 800119e:	2300      	movs	r3, #0
 80011a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80011a2:	e00b      	b.n	80011bc <Interface+0x148>
				osMessageQueuePut(VolumeQHandle, &msgPerfusionParameters.InfousionVolume, 10U,100);
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <Interface+0x224>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	1d19      	adds	r1, r3, #4
 80011ae:	2364      	movs	r3, #100	; 0x64
 80011b0:	220a      	movs	r2, #10
 80011b2:	f010 feed 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 80011b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011b8:	3301      	adds	r3, #1
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80011bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011be:	2b02      	cmp	r3, #2
 80011c0:	ddf0      	ble.n	80011a4 <Interface+0x130>
				}
				break;
 80011c2:	e056      	b.n	8001272 <Interface+0x1fe>
			case 7 :
				msgPerfusionParameters.InfousionVolume=100*1000;
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <Interface+0x218>)
 80011c6:	61fb      	str	r3, [r7, #28]
				for(int i= 0; i<3;i++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
 80011cc:	e00b      	b.n	80011e6 <Interface+0x172>
				osMessageQueuePut(VolumeQHandle, &msgPerfusionParameters.InfousionVolume, 10U,100);
 80011ce:	4b32      	ldr	r3, [pc, #200]	; (8001298 <Interface+0x224>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	1d19      	adds	r1, r3, #4
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	220a      	movs	r2, #10
 80011dc:	f010 fed8 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 80011e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e2:	3301      	adds	r3, #1
 80011e4:	647b      	str	r3, [r7, #68]	; 0x44
 80011e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	ddf0      	ble.n	80011ce <Interface+0x15a>
				}
				break;
 80011ec:	e041      	b.n	8001272 <Interface+0x1fe>
			case 8 :
				msgPerfusionParameters.Mode=1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				for(int i= 0; i<3;i++){
 80011f4:	2300      	movs	r3, #0
 80011f6:	643b      	str	r3, [r7, #64]	; 0x40
 80011f8:	e00c      	b.n	8001214 <Interface+0x1a0>
				osMessageQueuePut(ModeQHandle, &msgPerfusionParameters.Mode, 10U,100U);
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <Interface+0x228>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	f103 0110 	add.w	r1, r3, #16
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	220a      	movs	r2, #10
 800120a:	f010 fec1 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 800120e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001210:	3301      	adds	r3, #1
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
 8001214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001216:	2b02      	cmp	r3, #2
 8001218:	ddef      	ble.n	80011fa <Interface+0x186>
				}
				break;
 800121a:	e02a      	b.n	8001272 <Interface+0x1fe>
			case 9 :
				msgPerfusionParameters.Mode=0;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				for(int i= 0; i<3;i++){
 8001222:	2300      	movs	r3, #0
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001226:	e00c      	b.n	8001242 <Interface+0x1ce>
				osMessageQueuePut(ModeQHandle, &msgPerfusionParameters.Mode, 10U,100U);
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <Interface+0x228>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	f103 0110 	add.w	r1, r3, #16
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	220a      	movs	r2, #10
 8001238:	f010 feaa 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 800123c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800123e:	3301      	adds	r3, #1
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001244:	2b02      	cmp	r3, #2
 8001246:	ddef      	ble.n	8001228 <Interface+0x1b4>
				}
				break;
 8001248:	e013      	b.n	8001272 <Interface+0x1fe>
			default :
				for(int i= 0; i<3;i++){
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
 800124e:	e00c      	b.n	800126a <Interface+0x1f6>
				osMessageQueuePut(ModeQHandle, &msgPerfusionParameters.Mode, 10U,100U);
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <Interface+0x228>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	f103 0110 	add.w	r1, r3, #16
 800125c:	2364      	movs	r3, #100	; 0x64
 800125e:	220a      	movs	r2, #10
 8001260:	f010 fe96 	bl	8011f90 <osMessageQueuePut>
				for(int i= 0; i<3;i++){
 8001264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001266:	3301      	adds	r3, #1
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
 800126a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126c:	2b02      	cmp	r3, #2
 800126e:	ddef      	ble.n	8001250 <Interface+0x1dc>
				}
				break;
 8001270:	bf00      	nop
			}
		/*if(osMessageQueueGet(InfusionQHandle,&msgPerfusionParameters,10U,100)==osOK && msgPerfusionParameters.Mode!=0
		 &&  msgPerfusionParameters.Mode!=8  ){
		 msgPerfusionParameters.Flowrate = msgPerfusionParameters.Flowrate*1000; // cm^3/h ==> mm^3/h*/

		osDelay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f010 fcdd 	bl	8011c32 <osDelay>
	for (;;) {
 8001278:	e703      	b.n	8001082 <Interface+0xe>
 800127a:	bf00      	nop
 800127c:	200008c8 	.word	0x200008c8
 8001280:	47435000 	.word	0x47435000
 8001284:	200004a4 	.word	0x200004a4
 8001288:	4a371b00 	.word	0x4a371b00
 800128c:	47c35000 	.word	0x47c35000
 8001290:	4ab71b00 	.word	0x4ab71b00
 8001294:	461c4000 	.word	0x461c4000
 8001298:	200004a0 	.word	0x200004a0
 800129c:	200004b8 	.word	0x200004b8

080012a0 <StartDataStorage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDataStorage */
void StartDataStorage(void *argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80012ac:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80012b0:	6018      	str	r0, [r3, #0]
	//Infusion_paramT msgPerfusionParameters;
	//char check[10] ;
	//HAL_UART_Receive_IT(&huart3,(uint8_t*) check, sizeof(check));
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	uint8_t wtext[50] = ""; /* File write buffer */
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80012b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80012bc:	222e      	movs	r2, #46	; 0x2e
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f01d fc5f 	bl	801eb84 <memset>
		 }
		 }
		 }
		 }
		 f_mount(&SDFatFS, (TCHAR const*)NULL, 0);*/
		osDelay(1000);
 80012c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ca:	f010 fcb2 	bl	8011c32 <osDelay>
 80012ce:	e7fa      	b.n	80012c6 <StartDataStorage+0x26>

080012d0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e6:	4b7d      	ldr	r3, [pc, #500]	; (80014dc <MX_GPIO_Init+0x20c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a7b      	ldr	r2, [pc, #492]	; (80014dc <MX_GPIO_Init+0x20c>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b79      	ldr	r3, [pc, #484]	; (80014dc <MX_GPIO_Init+0x20c>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	623b      	str	r3, [r7, #32]
 8001302:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001304:	4b75      	ldr	r3, [pc, #468]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a74      	ldr	r2, [pc, #464]	; (80014dc <MX_GPIO_Init+0x20c>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b71      	ldr	r3, [pc, #452]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b6e      	ldr	r3, [pc, #440]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a6c      	ldr	r2, [pc, #432]	; (80014dc <MX_GPIO_Init+0x20c>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001340:	4b66      	ldr	r3, [pc, #408]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a65      	ldr	r2, [pc, #404]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001348:	f043 0320 	orr.w	r3, r3, #32
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b62      	ldr	r3, [pc, #392]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b57      	ldr	r3, [pc, #348]	; (80014dc <MX_GPIO_Init+0x20c>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a56      	ldr	r2, [pc, #344]	; (80014dc <MX_GPIO_Init+0x20c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <MX_GPIO_Init+0x20c>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <MX_GPIO_Init+0x20c>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	4b48      	ldr	r3, [pc, #288]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	4a47      	ldr	r2, [pc, #284]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d6:	4b41      	ldr	r3, [pc, #260]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	4a3f      	ldr	r2, [pc, #252]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <MX_GPIO_Init+0x20c>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 7184 	mov.w	r1, #264	; 0x108
 80013fa:	4839      	ldr	r0, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x210>)
 80013fc:	f006 fc68 	bl	8007cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_Clock_GPIO_Port, UART_Clock_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001406:	4837      	ldr	r0, [pc, #220]	; (80014e4 <MX_GPIO_Init+0x214>)
 8001408:	f006 fc62 	bl	8007cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LED2_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8001412:	4835      	ldr	r0, [pc, #212]	; (80014e8 <MX_GPIO_Init+0x218>)
 8001414:	f006 fc5c 	bl	8007cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin;
 8001418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(STBY_RST_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	482b      	ldr	r0, [pc, #172]	; (80014e0 <MX_GPIO_Init+0x210>)
 8001432:	f006 fa85 	bl	8007940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4826      	ldr	r0, [pc, #152]	; (80014e4 <MX_GPIO_Init+0x214>)
 800144c:	f006 fa78 	bl	8007940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART_Clock_Pin;
 8001450:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UART_Clock_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	481e      	ldr	r0, [pc, #120]	; (80014e4 <MX_GPIO_Init+0x214>)
 800146a:	f006 fa69 	bl	8007940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800146e:	2310      	movs	r3, #16
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001472:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	2301      	movs	r3, #1
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	481a      	ldr	r0, [pc, #104]	; (80014ec <MX_GPIO_Init+0x21c>)
 8001484:	f006 fa5c 	bl	8007940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|LED2_Pin;
 8001488:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_GPIO_Init+0x218>)
 80014a2:	f006 fa4d 	bl	8007940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a6:	2308      	movs	r3, #8
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014b2:	2301      	movs	r3, #1
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <MX_GPIO_Init+0x210>)
 80014be:	f006 fa3f 	bl	8007940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	200a      	movs	r0, #10
 80014c8:	f006 f816 	bl	80074f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014cc:	200a      	movs	r0, #10
 80014ce:	f006 f82d 	bl	800752c <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	; 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58022000 	.word	0x58022000
 80014e4:	58020800 	.word	0x58020800
 80014e8:	58020400 	.word	0x58020400
 80014ec:	58021c00 	.word	0x58021c00

080014f0 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 80014f6:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <MX_I2C1_SMBUS_Init+0x80>)
 80014f8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <MX_I2C1_SMBUS_Init+0x84>)
 80014fe:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001508:	2202      	movs	r2, #2
 800150a:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 800150e:	2201      	movs	r2, #1
 8001510:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001532:	2200      	movs	r2, #0
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001538:	2200      	movs	r2, #0
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 800153e:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001546:	f00b fe8d 	bl	800d264 <HAL_SMBUS_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001550:	f002 f858 	bl	8003604 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_I2C1_SMBUS_Init+0x7c>)
 8001558:	f00b ff3c 	bl	800d3d4 <HAL_SMBUS_ConfigDigitalFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8001562:	f002 f84f 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200004bc 	.word	0x200004bc
 8001570:	40005400 	.word	0x40005400
 8001574:	10c0ecff 	.word	0x10c0ecff

08001578 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0b8      	sub	sp, #224	; 0xe0
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	22bc      	movs	r2, #188	; 0xbc
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f01d faf3 	bl	801eb84 <memset>
  if(smbusHandle->Instance==I2C1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a25      	ldr	r2, [pc, #148]	; (8001638 <HAL_SMBUS_MspInit+0xc0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d142      	bne.n	800162e <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015a8:	2308      	movs	r3, #8
 80015aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 f86a 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 80015c2:	f002 f81f 	bl	8003604 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_SMBUS_MspInit+0xc4>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_SMBUS_MspInit+0xc4>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_SMBUS_MspInit+0xc4>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ec:	2312      	movs	r3, #18
 80015ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fe:	2304      	movs	r3, #4
 8001600:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <HAL_SMBUS_MspInit+0xc8>)
 800160c:	f006 f998 	bl	8007940 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_SMBUS_MspInit+0xc4>)
 8001612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_SMBUS_MspInit+0xc4>)
 8001618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_SMBUS_MspInit+0xc4>)
 8001622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800162e:	bf00      	nop
 8001630:	37e0      	adds	r7, #224	; 0xe0
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40005400 	.word	0x40005400
 800163c:	58024400 	.word	0x58024400
 8001640:	58020400 	.word	0x58020400

08001644 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <L6474_AttachFlagInterrupt+0x1c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2000050c 	.word	0x2000050c

08001664 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	21a8      	movs	r1, #168	; 0xa8
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fe26 	bl	80022c4 <L6474_SendCommand>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	21b8      	movs	r1, #184	; 0xb8
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fe18 	bl	80022c4 <L6474_SendCommand>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <L6474_CmdGetParam+0x1d4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80016bc:	2300      	movs	r3, #0
 80016be:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80016c0:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <L6474_CmdGetParam+0x1d8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80016c6:	7cbb      	ldrb	r3, [r7, #18]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e02b      	b.n	800172e <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80016d6:	4a68      	ldr	r2, [pc, #416]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4413      	add	r3, r2
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80016e0:	4a65      	ldr	r2, [pc, #404]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4413      	add	r3, r2
 80016e6:	3303      	adds	r3, #3
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80016ec:	4a62      	ldr	r2, [pc, #392]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	4413      	add	r3, r2
 80016f2:	3306      	adds	r3, #6
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80016f8:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	4413      	add	r3, r2
 80016fe:	3309      	adds	r3, #9
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8001704:	4a5d      	ldr	r2, [pc, #372]	; (800187c <L6474_CmdGetParam+0x1e0>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	4413      	add	r3, r2
 800170a:	3303      	adds	r3, #3
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8001710:	4a5a      	ldr	r2, [pc, #360]	; (800187c <L6474_CmdGetParam+0x1e0>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4413      	add	r3, r2
 8001716:	3306      	adds	r3, #6
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 800171c:	4a57      	ldr	r2, [pc, #348]	; (800187c <L6474_CmdGetParam+0x1e0>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	4413      	add	r3, r2
 8001722:	3309      	adds	r3, #9
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <L6474_CmdGetParam+0x1d4>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4293      	cmp	r3, r2
 800173a:	d3cc      	bcc.n	80016d6 <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	2b18      	cmp	r3, #24
 8001742:	d84d      	bhi.n	80017e0 <L6474_CmdGetParam+0x144>
 8001744:	a201      	add	r2, pc, #4	; (adr r2, 800174c <L6474_CmdGetParam+0xb0>)
 8001746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174a:	bf00      	nop
 800174c:	080017b1 	.word	0x080017b1
 8001750:	080017c7 	.word	0x080017c7
 8001754:	080017b1 	.word	0x080017b1
 8001758:	080017e1 	.word	0x080017e1
 800175c:	080017e1 	.word	0x080017e1
 8001760:	080017e1 	.word	0x080017e1
 8001764:	080017e1 	.word	0x080017e1
 8001768:	080017e1 	.word	0x080017e1
 800176c:	080017e1 	.word	0x080017e1
 8001770:	080017e1 	.word	0x080017e1
 8001774:	080017e1 	.word	0x080017e1
 8001778:	080017e1 	.word	0x080017e1
 800177c:	080017e1 	.word	0x080017e1
 8001780:	080017e1 	.word	0x080017e1
 8001784:	080017e1 	.word	0x080017e1
 8001788:	080017e1 	.word	0x080017e1
 800178c:	080017e1 	.word	0x080017e1
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017e1 	.word	0x080017e1
 8001798:	080017e1 	.word	0x080017e1
 800179c:	080017e1 	.word	0x080017e1
 80017a0:	080017e1 	.word	0x080017e1
 80017a4:	080017e1 	.word	0x080017e1
 80017a8:	080017c7 	.word	0x080017c7
 80017ac:	080017c7 	.word	0x080017c7
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	7c7b      	ldrb	r3, [r7, #17]
 80017b6:	f042 0220 	orr.w	r2, r2, #32
 80017ba:	b2d1      	uxtb	r1, r2
 80017bc:	4a2e      	ldr	r2, [pc, #184]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 80017be:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 80017c0:	2303      	movs	r3, #3
 80017c2:	74fb      	strb	r3, [r7, #19]
        break;
 80017c4:	e018      	b.n	80017f8 <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	7c7b      	ldrb	r3, [r7, #17]
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	b2d1      	uxtb	r1, r2
 80017d2:	4a29      	ldr	r2, [pc, #164]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 80017d4:	4413      	add	r3, r2
 80017d6:	460a      	mov	r2, r1
 80017d8:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 80017da:	2302      	movs	r3, #2
 80017dc:	74fb      	strb	r3, [r7, #19]
        break;
 80017de:	e00b      	b.n	80017f8 <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	7c7b      	ldrb	r3, [r7, #17]
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	b2d1      	uxtb	r1, r2
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 80017ee:	4413      	add	r3, r2
 80017f0:	460a      	mov	r2, r1
 80017f2:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80017f8:	f002 fdff 	bl	80043fa <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <L6474_CmdGetParam+0x1d8>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	f47f af5a 	bne.w	80016c0 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800180c:	7cfb      	ldrb	r3, [r7, #19]
 800180e:	f1c3 0303 	rsb	r3, r3, #3
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e011      	b.n	800183a <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <L6474_CmdGetParam+0x1dc>)
 8001820:	1898      	adds	r0, r3, r2
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <L6474_CmdGetParam+0x1e0>)
 800182c:	4413      	add	r3, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f001 f90a 	bl	8002a48 <L6474_WriteBytes>
       i++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d9ea      	bls.n	8001816 <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001840:	7c7b      	ldrb	r3, [r7, #17]
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <L6474_CmdGetParam+0x1e0>)
 8001844:	4413      	add	r3, r2
 8001846:	78db      	ldrb	r3, [r3, #3]
 8001848:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 800184a:	7c7a      	ldrb	r2, [r7, #17]
 800184c:	490b      	ldr	r1, [pc, #44]	; (800187c <L6474_CmdGetParam+0x1e0>)
 800184e:	440a      	add	r2, r1
 8001850:	7992      	ldrb	r2, [r2, #6]
 8001852:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001854:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8001856:	7c7a      	ldrb	r2, [r7, #17]
 8001858:	4908      	ldr	r1, [pc, #32]	; (800187c <L6474_CmdGetParam+0x1e0>)
 800185a:	440a      	add	r2, r1
 800185c:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001862:	f002 fdd3 	bl	800440c <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000514 	.word	0x20000514
 8001874:	20000530 	.word	0x20000530
 8001878:	20000518 	.word	0x20000518
 800187c:	20000524 	.word	0x20000524

08001880 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800188a:	4b3c      	ldr	r3, [pc, #240]	; (800197c <L6474_CmdGetStatus+0xfc>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	3b01      	subs	r3, #1
 8001898:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 800189a:	2300      	movs	r3, #0
 800189c:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <L6474_CmdGetStatus+0x100>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80018aa:	f002 fdaf 	bl	800440c <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e01f      	b.n	80018f8 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 80018b8:	4a32      	ldr	r2, [pc, #200]	; (8001984 <L6474_CmdGetStatus+0x104>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <L6474_CmdGetStatus+0x104>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	3303      	adds	r3, #3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 80018ce:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <L6474_CmdGetStatus+0x104>)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	3306      	adds	r3, #6
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 80018da:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <L6474_CmdGetStatus+0x108>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	3303      	adds	r3, #3
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 80018e6:	4a28      	ldr	r2, [pc, #160]	; (8001988 <L6474_CmdGetStatus+0x108>)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	3306      	adds	r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b20      	ldr	r3, [pc, #128]	; (800197c <L6474_CmdGetStatus+0xfc>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4293      	cmp	r3, r2
 8001904:	d3d8      	bcc.n	80018b8 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 8001906:	7abb      	ldrb	r3, [r7, #10]
 8001908:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <L6474_CmdGetStatus+0x104>)
 800190a:	21d0      	movs	r1, #208	; 0xd0
 800190c:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800190e:	f002 fd74 	bl	80043fa <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001912:	2301      	movs	r3, #1
 8001914:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <L6474_CmdGetStatus+0x100>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1be      	bne.n	800189e <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e011      	b.n	800194a <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <L6474_CmdGetStatus+0x104>)
 8001930:	1898      	adds	r0, r3, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <L6474_CmdGetStatus+0x108>)
 800193c:	4413      	add	r3, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f001 f882 	bl	8002a48 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d9ea      	bls.n	8001926 <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001950:	7abb      	ldrb	r3, [r7, #10]
 8001952:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <L6474_CmdGetStatus+0x108>)
 8001954:	4413      	add	r3, r2
 8001956:	78db      	ldrb	r3, [r3, #3]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	7abb      	ldrb	r3, [r7, #10]
 800195e:	490a      	ldr	r1, [pc, #40]	; (8001988 <L6474_CmdGetStatus+0x108>)
 8001960:	440b      	add	r3, r1
 8001962:	799b      	ldrb	r3, [r3, #6]
 8001964:	b21b      	sxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b21b      	sxth	r3, r3
 800196a:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800196c:	f002 fd4e 	bl	800440c <L6474_Board_EnableIrq>
  
  return (status);
 8001970:	893b      	ldrh	r3, [r7, #8]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000514 	.word	0x20000514
 8001980:	20000530 	.word	0x20000530
 8001984:	20000518 	.word	0x20000518
 8001988:	20000524 	.word	0x20000524

0800198c <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800199e:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <L6474_CmdSetParam+0x1b8>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80019ae:	2300      	movs	r3, #0
 80019b0:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <L6474_CmdSetParam+0x1bc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80019be:	f002 fd25 	bl	800440c <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e019      	b.n	8001a00 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80019cc:	4a5f      	ldr	r2, [pc, #380]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4413      	add	r3, r2
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80019d6:	4a5d      	ldr	r2, [pc, #372]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	4413      	add	r3, r2
 80019dc:	3303      	adds	r3, #3
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80019e2:	4a5a      	ldr	r2, [pc, #360]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4413      	add	r3, r2
 80019e8:	3306      	adds	r3, #6
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80019ee:	4a57      	ldr	r2, [pc, #348]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4413      	add	r3, r2
 80019f4:	3309      	adds	r3, #9
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <L6474_CmdSetParam+0x1b8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d3de      	bcc.n	80019cc <L6474_CmdSetParam+0x40>
    }
    switch (param)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	2b17      	cmp	r3, #23
 8001a14:	d85c      	bhi.n	8001ad0 <L6474_CmdSetParam+0x144>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <L6474_CmdSetParam+0x90>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a7d 	.word	0x08001a7d
 8001a20:	08001aad 	.word	0x08001aad
 8001a24:	08001a7d 	.word	0x08001a7d
 8001a28:	08001ad1 	.word	0x08001ad1
 8001a2c:	08001ad1 	.word	0x08001ad1
 8001a30:	08001ad1 	.word	0x08001ad1
 8001a34:	08001ad1 	.word	0x08001ad1
 8001a38:	08001ad1 	.word	0x08001ad1
 8001a3c:	08001ad1 	.word	0x08001ad1
 8001a40:	08001ad1 	.word	0x08001ad1
 8001a44:	08001ad1 	.word	0x08001ad1
 8001a48:	08001ad1 	.word	0x08001ad1
 8001a4c:	08001ad1 	.word	0x08001ad1
 8001a50:	08001ad1 	.word	0x08001ad1
 8001a54:	08001ad1 	.word	0x08001ad1
 8001a58:	08001ad1 	.word	0x08001ad1
 8001a5c:	08001ad1 	.word	0x08001ad1
 8001a60:	08001ad1 	.word	0x08001ad1
 8001a64:	08001ad1 	.word	0x08001ad1
 8001a68:	08001ad1 	.word	0x08001ad1
 8001a6c:	08001ad1 	.word	0x08001ad1
 8001a70:	08001ad1 	.word	0x08001ad1
 8001a74:	08001ad1 	.word	0x08001ad1
 8001a78:	08001aad 	.word	0x08001aad
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001a7c:	7c7b      	ldrb	r3, [r7, #17]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	b2d1      	uxtb	r1, r2
 8001a82:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001a84:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0c1a      	lsrs	r2, r3, #16
 8001a8a:	7c7b      	ldrb	r3, [r7, #17]
 8001a8c:	b2d1      	uxtb	r1, r2
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001a90:	4413      	add	r3, r2
 8001a92:	460a      	mov	r2, r1
 8001a94:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0a1a      	lsrs	r2, r3, #8
 8001a9a:	7c7b      	ldrb	r3, [r7, #17]
 8001a9c:	b2d1      	uxtb	r1, r2
 8001a9e:	4a2b      	ldr	r2, [pc, #172]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	460a      	mov	r2, r1
 8001aa4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	74fb      	strb	r3, [r7, #19]
        break;
 8001aaa:	e01a      	b.n	8001ae2 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 8001aac:	7c7b      	ldrb	r3, [r7, #17]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	b2d1      	uxtb	r1, r2
 8001ab2:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	460a      	mov	r2, r1
 8001ab8:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0a1a      	lsrs	r2, r3, #8
 8001abe:	7c7b      	ldrb	r3, [r7, #17]
 8001ac0:	b2d1      	uxtb	r1, r2
 8001ac2:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 8001aca:	2302      	movs	r3, #2
 8001acc:	74fb      	strb	r3, [r7, #19]
        break;
 8001ace:	e008      	b.n	8001ae2 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 8001ad0:	7c7b      	ldrb	r3, [r7, #17]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	b2d1      	uxtb	r1, r2
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	460a      	mov	r2, r1
 8001adc:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001ae2:	7c7b      	ldrb	r3, [r7, #17]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	b2d1      	uxtb	r1, r2
 8001ae8:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001aea:	4413      	add	r3, r2
 8001aec:	460a      	mov	r2, r1
 8001aee:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001af0:	f002 fc83 	bl	80043fa <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <L6474_CmdSetParam+0x1bc>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f47f af57 	bne.w	80019b2 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	f1c3 0303 	rsb	r3, r3, #3
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e011      	b.n	8001b32 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <L6474_CmdSetParam+0x1c0>)
 8001b18:	1898      	adds	r0, r3, r2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <L6474_CmdSetParam+0x1c4>)
 8001b24:	4413      	add	r3, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f000 ff8e 	bl	8002a48 <L6474_WriteBytes>
       i++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d9ea      	bls.n	8001b0e <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001b38:	f002 fc68 	bl	800440c <L6474_Board_EnableIrq>
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000514 	.word	0x20000514
 8001b48:	20000530 	.word	0x20000530
 8001b4c:	20000518 	.word	0x20000518
 8001b50:	20000524 	.word	0x20000524

08001b54 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <L6474_Init+0x94>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fc5c 	bl	8004420 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001b68:	f002 fe56 	bl	8004818 <L6474_Board_SpiInit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001b72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b76:	f000 fb8f 	bl	8002298 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <L6474_Init+0x94>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fd75 	bl	8004670 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <L6474_Init+0x94>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fdef 	bl	8004770 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001b92:	2001      	movs	r0, #1
 8001b94:	f002 fc26 	bl	80043e4 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <L6474_Init+0x94>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fc83 	bl	80024b0 <L6474_SetDeviceParamsToPredefinedValues>
 8001baa:	e006      	b.n	8001bba <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <L6474_Init+0x94>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fbd7 	bl	8002368 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <L6474_Init+0x94>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fd4f 	bl	8001664 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <L6474_Init+0x94>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe57 	bl	8001880 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <L6474_Init+0x94>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <L6474_Init+0x94>)
 8001bdc:	801a      	strh	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000532 	.word	0x20000532

08001bec <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <L6474_GetCurrentSpeed+0x2c>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3320      	adds	r3, #32
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000534 	.word	0x20000534

08001c1c <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8001c26:	79fa      	ldrb	r2, [r7, #7]
 8001c28:	4920      	ldr	r1, [pc, #128]	; (8001cac <L6474_HardStop+0x90>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3325      	adds	r3, #37	; 0x25
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12d      	bne.n	8001c9a <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fd6b 	bl	800471c <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	4918      	ldr	r1, [pc, #96]	; (8001cac <L6474_HardStop+0x90>)
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	3324      	adds	r3, #36	; 0x24
 8001c56:	2208      	movs	r2, #8
 8001c58:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	4913      	ldr	r1, [pc, #76]	; (8001cac <L6474_HardStop+0x90>)
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	3322      	adds	r3, #34	; 0x22
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <L6474_HardStop+0x90>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3314      	adds	r3, #20
 8001c7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c82:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	4909      	ldr	r1, [pc, #36]	; (8001cac <L6474_HardStop+0x90>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3320      	adds	r3, #32
 8001c94:	2200      	movs	r2, #0
 8001c96:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001c98:	e003      	b.n	8001ca2 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f807 	bl	8001cb0 <L6474_HizStop>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000534 	.word	0x20000534

08001cb0 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fd2d 	bl	800471c <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fccd 	bl	8001664 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001cca:	79fa      	ldrb	r2, [r7, #7]
 8001ccc:	4915      	ldr	r1, [pc, #84]	; (8001d24 <L6474_HizStop+0x74>)
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3324      	adds	r3, #36	; 0x24
 8001cda:	2208      	movs	r2, #8
 8001cdc:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001cde:	79fa      	ldrb	r2, [r7, #7]
 8001ce0:	4910      	ldr	r1, [pc, #64]	; (8001d24 <L6474_HizStop+0x74>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	3322      	adds	r3, #34	; 0x22
 8001cee:	2203      	movs	r2, #3
 8001cf0:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	490b      	ldr	r1, [pc, #44]	; (8001d24 <L6474_HizStop+0x74>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3314      	adds	r3, #20
 8001d02:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d06:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001d08:	79fa      	ldrb	r2, [r7, #7]
 8001d0a:	4906      	ldr	r1, [pc, #24]	; (8001d24 <L6474_HizStop+0x74>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	3320      	adds	r3, #32
 8001d18:	2200      	movs	r2, #0
 8001d1a:	801a      	strh	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000534 	.word	0x20000534

08001d28 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	4913      	ldr	r1, [pc, #76]	; (8001d88 <L6474_Run+0x60>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3324      	adds	r3, #36	; 0x24
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d003      	beq.n	8001d58 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff62 	bl	8001c1c <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001d58:	79ba      	ldrb	r2, [r7, #6]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f962 	bl	8002028 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <L6474_Run+0x60>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3322      	adds	r3, #34	; 0x22
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fdac 	bl	80028d8 <L6474_StartMovement>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000534 	.word	0x20000534

08001d8c <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	460a      	mov	r2, r1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d816      	bhi.n	8001dd0 <L6474_SelectStepMode+0x44>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <L6474_SelectStepMode+0x1c>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dbf 	.word	0x08001dbf
 8001db0:	08001dc5 	.word	0x08001dc5
 8001db4:	08001dcb 	.word	0x08001dcb
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001db8:	2308      	movs	r3, #8
 8001dba:	73fb      	strb	r3, [r7, #15]
      break;
 8001dbc:	e00b      	b.n	8001dd6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001dbe:	2309      	movs	r3, #9
 8001dc0:	73fb      	strb	r3, [r7, #15]
      break;    
 8001dc2:	e008      	b.n	8001dd6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	73fb      	strb	r3, [r7, #15]
      break;        
 8001dc8:	e005      	b.n	8001dd6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001dca:	230b      	movs	r3, #11
 8001dcc:	73fb      	strb	r3, [r7, #15]
      break;       
 8001dce:	e002      	b.n	8001dd6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001dd0:	230c      	movs	r3, #12
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;       
 8001dd4:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff69 	bl	8001cb0 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2116      	movs	r1, #22
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fc5a 	bl	800169c <L6474_CmdGetParam>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f023 0307 	bic.w	r3, r3, #7
 8001df0:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001df2:	7bba      	ldrb	r2, [r7, #14]
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2116      	movs	r1, #22
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fdc3 	bl	800198c <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fdbd 	bl	800198c <L6474_CmdSetParam>
  
  return (1);
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d508      	bpl.n	8001e50 <L6474_SetAnalogValue+0x34>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d005      	beq.n	8001e50 <L6474_SetAnalogValue+0x34>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d002      	beq.n	8001e50 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	74fb      	strb	r3, [r7, #19]
 8001e4e:	e0d9      	b.n	8002004 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	2b12      	cmp	r3, #18
 8001e56:	f200 80ca 	bhi.w	8001fee <L6474_SetAnalogValue+0x1d2>
 8001e5a:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <L6474_SetAnalogValue+0x44>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001f13 	.word	0x08001f13
 8001e64:	08001ead 	.word	0x08001ead
 8001e68:	08001f13 	.word	0x08001f13
 8001e6c:	08001fef 	.word	0x08001fef
 8001e70:	08001fef 	.word	0x08001fef
 8001e74:	08001fef 	.word	0x08001fef
 8001e78:	08001fef 	.word	0x08001fef
 8001e7c:	08001fef 	.word	0x08001fef
 8001e80:	08001f7d 	.word	0x08001f7d
 8001e84:	08001fef 	.word	0x08001fef
 8001e88:	08001fef 	.word	0x08001fef
 8001e8c:	08001fef 	.word	0x08001fef
 8001e90:	08001fef 	.word	0x08001fef
 8001e94:	08001fef 	.word	0x08001fef
 8001e98:	08001fc9 	.word	0x08001fc9
 8001e9c:	08001fc9 	.word	0x08001fc9
 8001ea0:	08001fef 	.word	0x08001fef
 8001ea4:	08001fef 	.word	0x08001fef
 8001ea8:	08001fa3 	.word	0x08001fa3
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb8:	d021      	beq.n	8001efe <L6474_SetAnalogValue+0xe2>
 8001eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ebe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002010 <L6474_SetAnalogValue+0x1f4>
 8001ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	dc15      	bgt.n	8001ef8 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001ecc:	2116      	movs	r1, #22
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fbe4 	bl	800169c <L6474_CmdGetParam>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	2201      	movs	r2, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001eea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d502      	bpl.n	8001efe <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001efc:	e079      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001efe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f06:	ee17 3a90 	vmov	r3, s15
 8001f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0e:	617b      	str	r3, [r7, #20]
        break;
 8001f10:	e06f      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f16:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002014 <L6474_SetAnalogValue+0x1f8>
 8001f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	db27      	blt.n	8001f74 <L6474_SetAnalogValue+0x158>
 8001f24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f28:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002018 <L6474_SetAnalogValue+0x1fc>
 8001f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	d81e      	bhi.n	8001f74 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f42:	db09      	blt.n	8001f58 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4c:	ee17 3a90 	vmov	r3, s15
 8001f50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f54:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001f56:	e010      	b.n	8001f7a <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001f58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f5c:	eef1 7a67 	vneg.f32	s15, s15
 8001f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f64:	ee17 3a90 	vmov	r3, s15
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001f72:	e002      	b.n	8001f7a <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001f78:	e03b      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
 8001f7a:	e03a      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f80:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800201c <L6474_SetAnalogValue+0x200>
 8001f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	dd02      	ble.n	8001f94 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001f92:	e02e      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001f94:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f98:	f000 fd14 	bl	80029c4 <L6474_Tval_Current_to_Par>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	617b      	str	r3, [r7, #20]
        break;
 8001fa0:	e027      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002020 <L6474_SetAnalogValue+0x204>
 8001faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	dd02      	ble.n	8001fba <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001fb8:	e01b      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001fba:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fbe:	f000 fcdd 	bl	800297c <L6474_Ocd_Th_to_Par>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	617b      	str	r3, [r7, #20]
        break;
 8001fc6:	e014      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fcc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002024 <L6474_SetAnalogValue+0x208>
 8001fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	dd02      	ble.n	8001fe0 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001fde:	e008      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001fe0:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fe4:	f000 fd12 	bl	8002a0c <L6474_Tmin_Time_to_Par>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]
        break;    
 8001fec:	e001      	b.n	8001ff2 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fcc4 	bl	800198c <L6474_CmdSetParam>
    }
  }
  return result;
 8002004:	7cfb      	ldrb	r3, [r7, #19]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	43ff8000 	.word	0x43ff8000
 8002014:	ca000000 	.word	0xca000000
 8002018:	49fffff8 	.word	0x49fffff8
 800201c:	457a0000 	.word	0x457a0000
 8002020:	45bb8000 	.word	0x45bb8000
 8002024:	42800000 	.word	0x42800000

08002028 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	490f      	ldr	r1, [pc, #60]	; (8002078 <L6474_SetDirection+0x50>)
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	3324      	adds	r3, #36	; 0x24
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b08      	cmp	r3, #8
 800204e:	d10f      	bne.n	8002070 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	4909      	ldr	r1, [pc, #36]	; (8002078 <L6474_SetDirection+0x50>)
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	3323      	adds	r3, #35	; 0x23
 8002060:	79ba      	ldrb	r2, [r7, #6]
 8002062:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fba4 	bl	80047b8 <L6474_Board_SetDirectionGpio>
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000534 	.word	0x20000534

0800207c <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d807      	bhi.n	800209c <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <L6474_SetNbDevices+0x30>)
 800208e:	2200      	movs	r2, #0
 8002090:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <L6474_SetNbDevices+0x34>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 800209c:	2300      	movs	r3, #0
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000532 	.word	0x20000532
 80020b0:	20000514 	.word	0x20000514

080020b4 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	460a      	mov	r2, r1
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	4613      	mov	r3, r2
 80020c2:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d935      	bls.n	800213a <L6474_SetMaxSpeed+0x86>
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d830      	bhi.n	800213a <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 80020d8:	79fa      	ldrb	r2, [r7, #7]
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <L6474_SetMaxSpeed+0x94>)
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	331e      	adds	r3, #30
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 80020ec:	88ba      	ldrh	r2, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d323      	bcc.n	800213a <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	4914      	ldr	r1, [pc, #80]	; (8002148 <L6474_SetMaxSpeed+0x94>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	3324      	adds	r3, #36	; 0x24
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8002106:	2b08      	cmp	r3, #8
 8002108:	d00b      	beq.n	8002122 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <L6474_SetMaxSpeed+0x94>)
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	3322      	adds	r3, #34	; 0x22
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	4908      	ldr	r1, [pc, #32]	; (8002148 <L6474_SetMaxSpeed+0x94>)
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	331c      	adds	r3, #28
 8002132:	88ba      	ldrh	r2, [r7, #4]
 8002134:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000534 	.word	0x20000534

0800214c <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	460a      	mov	r2, r1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4613      	mov	r3, r2
 800215a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d935      	bls.n	80021d2 <L6474_SetMinSpeed+0x86>
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	f242 7210 	movw	r2, #10000	; 0x2710
 800216c:	4293      	cmp	r3, r2
 800216e:	d830      	bhi.n	80021d2 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002170:	79fa      	ldrb	r2, [r7, #7]
 8002172:	491b      	ldr	r1, [pc, #108]	; (80021e0 <L6474_SetMinSpeed+0x94>)
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	331c      	adds	r3, #28
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8002184:	88ba      	ldrh	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d823      	bhi.n	80021d2 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800218a:	79fa      	ldrb	r2, [r7, #7]
 800218c:	4914      	ldr	r1, [pc, #80]	; (80021e0 <L6474_SetMinSpeed+0x94>)
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	3324      	adds	r3, #36	; 0x24
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d00b      	beq.n	80021ba <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80021a2:	79fa      	ldrb	r2, [r7, #7]
 80021a4:	490e      	ldr	r1, [pc, #56]	; (80021e0 <L6474_SetMinSpeed+0x94>)
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	3322      	adds	r3, #34	; 0x22
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 80021ba:	79fa      	ldrb	r2, [r7, #7]
 80021bc:	4908      	ldr	r1, [pc, #32]	; (80021e0 <L6474_SetMinSpeed+0x94>)
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	331e      	adds	r3, #30
 80021ca:	88ba      	ldrh	r2, [r7, #4]
 80021cc:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}                 
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000534 	.word	0x20000534

080021e4 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 80021f4:	79fa      	ldrb	r2, [r7, #7]
 80021f6:	4907      	ldr	r1, [pc, #28]	; (8002214 <L6474_SetStopMode+0x30>)
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	3325      	adds	r3, #37	; 0x25
 8002204:	79ba      	ldrb	r2, [r7, #6]
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	20000534 	.word	0x20000534

08002218 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	460a      	mov	r2, r1
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	4613      	mov	r3, r2
 8002226:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8002228:	88bb      	ldrh	r3, [r7, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d801      	bhi.n	8002232 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 800222e:	2302      	movs	r3, #2
 8002230:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	f242 7210 	movw	r2, #10000	; 0x2710
 8002238:	4293      	cmp	r3, r2
 800223a:	d902      	bls.n	8002242 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 800223c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002240:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 8002242:	79fa      	ldrb	r2, [r7, #7]
 8002244:	4913      	ldr	r1, [pc, #76]	; (8002294 <L6474_ApplySpeed+0x7c>)
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3320      	adds	r3, #32
 8002252:	88ba      	ldrh	r2, [r7, #4]
 8002254:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d010      	beq.n	800227e <L6474_ApplySpeed+0x66>
 800225c:	2b02      	cmp	r3, #2
 800225e:	dc13      	bgt.n	8002288 <L6474_ApplySpeed+0x70>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <L6474_ApplySpeed+0x52>
 8002264:	2b01      	cmp	r3, #1
 8002266:	d005      	beq.n	8002274 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8002268:	e00e      	b.n	8002288 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800226a:	88bb      	ldrh	r3, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	f002 f98d 	bl	800458c <L6474_Board_Pwm1SetFreq>
      break;
 8002272:	e00a      	b.n	800228a <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	f002 f9ae 	bl	80045d8 <L6474_Board_Pwm2SetFreq>
      break;
 800227c:	e005      	b.n	800228a <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 800227e:	88bb      	ldrh	r3, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 f9cf 	bl	8004624 <L6474_Board_Pwm3SetFreq>
      break;
 8002286:	e000      	b.n	800228a <L6474_ApplySpeed+0x72>
      break; //ignore error
 8002288:	bf00      	nop
  }
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000534 	.word	0x20000534

08002298 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <L6474_ErrorHandler+0x28>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <L6474_ErrorHandler+0x28>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	4610      	mov	r0, r2
 80022b2:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 80022b4:	e000      	b.n	80022b8 <L6474_ErrorHandler+0x20>
    while(1)
 80022b6:	e7fe      	b.n	80022b6 <L6474_ErrorHandler+0x1e>
}
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000510 	.word	0x20000510

080022c4 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80022d4:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <L6474_SendCommand+0x90>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80022e4:	2300      	movs	r3, #0
 80022e6:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <L6474_SendCommand+0x94>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80022ee:	7afb      	ldrb	r3, [r7, #11]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80022f4:	f002 f88a 	bl	800440c <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e008      	b.n	8002314 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <L6474_SendCommand+0x98>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	3309      	adds	r3, #9
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3301      	adds	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <L6474_SendCommand+0x90>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4293      	cmp	r3, r2
 8002320:	d3ef      	bcc.n	8002302 <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 8002322:	7abb      	ldrb	r3, [r7, #10]
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <L6474_SendCommand+0x98>)
 8002326:	4413      	add	r3, r2
 8002328:	79ba      	ldrb	r2, [r7, #6]
 800232a:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800232c:	f002 f865 	bl	80043fa <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8002330:	2301      	movs	r3, #1
 8002332:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <L6474_SendCommand+0x94>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1d4      	bne.n	80022e8 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <L6474_SendCommand+0x9c>)
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <L6474_SendCommand+0xa0>)
 8002342:	f000 fb81 	bl	8002a48 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8002346:	f002 f861 	bl	800440c <L6474_Board_EnableIrq>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000514 	.word	0x20000514
 8002358:	20000530 	.word	0x20000530
 800235c:	20000518 	.word	0x20000518
 8002360:	2000052d 	.word	0x2000052d
 8002364:	20000521 	.word	0x20000521

08002368 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002374:	79fa      	ldrb	r2, [r7, #7]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	8818      	ldrh	r0, [r3, #0]
 800237a:	494c      	ldr	r1, [pc, #304]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	3318      	adds	r3, #24
 8002388:	4602      	mov	r2, r0
 800238a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	8858      	ldrh	r0, [r3, #2]
 8002392:	4946      	ldr	r1, [pc, #280]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	331a      	adds	r3, #26
 80023a0:	4602      	mov	r2, r0
 80023a2:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 80023a4:	79fa      	ldrb	r2, [r7, #7]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	8898      	ldrh	r0, [r3, #4]
 80023aa:	4940      	ldr	r1, [pc, #256]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	331c      	adds	r3, #28
 80023b8:	4602      	mov	r2, r0
 80023ba:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 80023bc:	79fa      	ldrb	r2, [r7, #7]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	88d8      	ldrh	r0, [r3, #6]
 80023c2:	493a      	ldr	r1, [pc, #232]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	331e      	adds	r3, #30
 80023d0:	4602      	mov	r2, r0
 80023d2:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	4935      	ldr	r1, [pc, #212]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	4930      	ldr	r1, [pc, #192]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	3304      	adds	r3, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80023fa:	79fa      	ldrb	r2, [r7, #7]
 80023fc:	492b      	ldr	r1, [pc, #172]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3308      	adds	r3, #8
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	4926      	ldr	r1, [pc, #152]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	330c      	adds	r3, #12
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002422:	79fa      	ldrb	r2, [r7, #7]
 8002424:	4921      	ldr	r1, [pc, #132]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	3310      	adds	r3, #16
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002436:	79fa      	ldrb	r2, [r7, #7]
 8002438:	491c      	ldr	r1, [pc, #112]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	3314      	adds	r3, #20
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 800244a:	79fa      	ldrb	r2, [r7, #7]
 800244c:	4917      	ldr	r1, [pc, #92]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3320      	adds	r3, #32
 800245a:	2200      	movs	r2, #0
 800245c:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	4912      	ldr	r1, [pc, #72]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	3322      	adds	r3, #34	; 0x22
 800246e:	2203      	movs	r2, #3
 8002470:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002472:	79fa      	ldrb	r2, [r7, #7]
 8002474:	490d      	ldr	r1, [pc, #52]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	3323      	adds	r3, #35	; 0x23
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	4908      	ldr	r1, [pc, #32]	; (80024ac <L6474_SetDeviceParamsToGivenValues+0x144>)
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	3324      	adds	r3, #36	; 0x24
 8002496:	2208      	movs	r2, #8
 8002498:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f8a2 	bl	80025e8 <L6474_SetRegisterToGivenValues>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000534 	.word	0x20000534

080024b0 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 80024ba:	79fa      	ldrb	r2, [r7, #7]
 80024bc:	4949      	ldr	r1, [pc, #292]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3318      	adds	r3, #24
 80024ca:	2201      	movs	r2, #1
 80024cc:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 80024ce:	79fa      	ldrb	r2, [r7, #7]
 80024d0:	4944      	ldr	r1, [pc, #272]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	331a      	adds	r3, #26
 80024de:	2201      	movs	r2, #1
 80024e0:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 80024e2:	79fa      	ldrb	r2, [r7, #7]
 80024e4:	493f      	ldr	r1, [pc, #252]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	331c      	adds	r3, #28
 80024f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024f6:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 80024f8:	79fa      	ldrb	r2, [r7, #7]
 80024fa:	493a      	ldr	r1, [pc, #232]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	331e      	adds	r3, #30
 8002508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800250c:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	4934      	ldr	r1, [pc, #208]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	4930      	ldr	r1, [pc, #192]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3304      	adds	r3, #4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	492b      	ldr	r1, [pc, #172]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	3308      	adds	r3, #8
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002548:	79fa      	ldrb	r2, [r7, #7]
 800254a:	4926      	ldr	r1, [pc, #152]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	330c      	adds	r3, #12
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 800255c:	79fa      	ldrb	r2, [r7, #7]
 800255e:	4921      	ldr	r1, [pc, #132]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	3310      	adds	r3, #16
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002570:	79fa      	ldrb	r2, [r7, #7]
 8002572:	491c      	ldr	r1, [pc, #112]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3314      	adds	r3, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002584:	79fa      	ldrb	r2, [r7, #7]
 8002586:	4917      	ldr	r1, [pc, #92]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	3320      	adds	r3, #32
 8002594:	2200      	movs	r2, #0
 8002596:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002598:	79fa      	ldrb	r2, [r7, #7]
 800259a:	4912      	ldr	r1, [pc, #72]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3322      	adds	r3, #34	; 0x22
 80025a8:	2203      	movs	r2, #3
 80025aa:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 80025ac:	79fa      	ldrb	r2, [r7, #7]
 80025ae:	490d      	ldr	r1, [pc, #52]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3323      	adds	r3, #35	; 0x23
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3324      	adds	r3, #36	; 0x24
 80025d0:	2208      	movs	r2, #8
 80025d2:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f882 	bl	80026e0 <L6474_SetRegisterToPredefinedValues>

}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000534 	.word	0x20000534

080025e8 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2101      	movs	r1, #1
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f9c6 	bl	800198c <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2200      	movs	r2, #0
 8002604:	2102      	movs	r1, #2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f9c0 	bl	800198c <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2200      	movs	r2, #0
 8002610:	2103      	movs	r1, #3
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f9ba 	bl	800198c <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	edd3 7a02 	vldr	s15, [r3, #8]
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	eeb0 0a67 	vmov.f32	s0, s15
 8002624:	2109      	movs	r1, #9
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fbf8 	bl	8001e1c <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8002634:	4313      	orrs	r3, r2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	210e      	movs	r1, #14
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f9a4 	bl	800198c <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	edd3 7a06 	vldr	s15, [r3, #24]
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	eeb0 0a67 	vmov.f32	s0, s15
 8002650:	210f      	movs	r1, #15
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fbe2 	bl	8001e1c <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	edd3 7a07 	vldr	s15, [r3, #28]
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	eeb0 0a67 	vmov.f32	s0, s15
 8002664:	2110      	movs	r1, #16
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fbd8 	bl	8001e1c <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	eeb0 0a67 	vmov.f32	s0, s15
 8002678:	2113      	movs	r1, #19
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fbce 	bl	8001e1c <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002688:	4313      	orrs	r3, r2
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	2116      	movs	r1, #22
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f97a 	bl	800198c <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	2117      	movs	r1, #23
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff f973 	bl	800198c <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	7c5b      	ldrb	r3, [r3, #17]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 80026c2:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 80026c8:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 80026ca:	461a      	mov	r2, r3
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2118      	movs	r1, #24
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f95b 	bl	800198c <L6474_CmdSetParam>
  
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2101      	movs	r1, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f94b 	bl	800198c <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f945 	bl	800198c <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2200      	movs	r2, #0
 8002706:	2103      	movs	r1, #3
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f93f 	bl	800198c <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b02      	cmp	r3, #2
 8002712:	f000 8094 	beq.w	800283e <L6474_SetRegisterToPredefinedValues+0x15e>
 8002716:	2b02      	cmp	r3, #2
 8002718:	f300 80d7 	bgt.w	80028ca <L6474_SetRegisterToPredefinedValues+0x1ea>
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <L6474_SetRegisterToPredefinedValues+0x46>
 8002720:	2b01      	cmp	r3, #1
 8002722:	d046      	beq.n	80027b2 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 8002724:	e0d1      	b.n	80028ca <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8002726:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80028d4 <L6474_SetRegisterToPredefinedValues+0x1f4>
 800272a:	f000 f94b 	bl	80029c4 <L6474_Tval_Current_to_Par>
 800272e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002730:	461a      	mov	r2, r3
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2109      	movs	r1, #9
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f928 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	2235      	movs	r2, #53	; 0x35
 8002740:	210e      	movs	r1, #14
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f922 	bl	800198c <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002748:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800274c:	f000 f95e 	bl	8002a0c <L6474_Tmin_Time_to_Par>
 8002750:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002752:	461a      	mov	r2, r3
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	210f      	movs	r1, #15
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff f917 	bl	800198c <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 800275e:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002762:	f000 f953 	bl	8002a0c <L6474_Tmin_Time_to_Par>
 8002766:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	2110      	movs	r1, #16
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f90c 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2201      	movs	r2, #1
 8002778:	2113      	movs	r1, #19
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f906 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2288      	movs	r2, #136	; 0x88
 8002784:	2116      	movs	r1, #22
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f900 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	22cf      	movs	r2, #207	; 0xcf
 8002790:	2117      	movs	r1, #23
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f8fa 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800279e:	2118      	movs	r1, #24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff f8f3 	bl	800198c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fd1a 	bl	80021e4 <L6474_SetStopMode>
      break;
 80027b0:	e08b      	b.n	80028ca <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 80027b2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80028d4 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80027b6:	f000 f905 	bl	80029c4 <L6474_Tval_Current_to_Par>
 80027ba:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2109      	movs	r1, #9
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f8e2 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2235      	movs	r2, #53	; 0x35
 80027cc:	210e      	movs	r1, #14
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f8dc 	bl	800198c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 80027d4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80027d8:	f000 f918 	bl	8002a0c <L6474_Tmin_Time_to_Par>
 80027dc:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027de:	461a      	mov	r2, r3
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	210f      	movs	r1, #15
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f8d1 	bl	800198c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 80027ea:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80027ee:	f000 f90d 	bl	8002a0c <L6474_Tmin_Time_to_Par>
 80027f2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027f4:	461a      	mov	r2, r3
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2110      	movs	r1, #16
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f8c6 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2201      	movs	r2, #1
 8002804:	2113      	movs	r1, #19
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f8c0 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	228c      	movs	r2, #140	; 0x8c
 8002810:	2116      	movs	r1, #22
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f8ba 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	22cf      	movs	r2, #207	; 0xcf
 800281c:	2117      	movs	r1, #23
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f8b4 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800282a:	2118      	movs	r1, #24
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff f8ad 	bl	800198c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fcd4 	bl	80021e4 <L6474_SetStopMode>
      break;
 800283c:	e045      	b.n	80028ca <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 800283e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80028d4 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002842:	f000 f8bf 	bl	80029c4 <L6474_Tval_Current_to_Par>
 8002846:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002848:	461a      	mov	r2, r3
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2109      	movs	r1, #9
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f89c 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2235      	movs	r2, #53	; 0x35
 8002858:	210e      	movs	r1, #14
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f896 	bl	800198c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002860:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002864:	f000 f8d2 	bl	8002a0c <L6474_Tmin_Time_to_Par>
 8002868:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800286a:	461a      	mov	r2, r3
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	210f      	movs	r1, #15
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f88b 	bl	800198c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002876:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800287a:	f000 f8c7 	bl	8002a0c <L6474_Tmin_Time_to_Par>
 800287e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002880:	461a      	mov	r2, r3
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2110      	movs	r1, #16
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f880 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2201      	movs	r2, #1
 8002890:	2113      	movs	r1, #19
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f87a 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	228c      	movs	r2, #140	; 0x8c
 800289c:	2116      	movs	r1, #22
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f874 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	22cf      	movs	r2, #207	; 0xcf
 80028a8:	2117      	movs	r1, #23
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff f86e 	bl	800198c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80028b6:	2118      	movs	r1, #24
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f867 	bl	800198c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fc8e 	bl	80021e4 <L6474_SetStopMode>
      break;
 80028c8:	bf00      	nop
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	437a0000 	.word	0x437a0000

080028d8 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fecb 	bl	8001680 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	4922      	ldr	r1, [pc, #136]	; (8002978 <L6474_StartMovement+0xa0>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	3308      	adds	r3, #8
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002900:	79fa      	ldrb	r2, [r7, #7]
 8002902:	491d      	ldr	r1, [pc, #116]	; (8002978 <L6474_StartMovement+0xa0>)
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3324      	adds	r3, #36	; 0x24
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e009      	b.n	800292a <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 8002916:	79fa      	ldrb	r2, [r7, #7]
 8002918:	4917      	ldr	r1, [pc, #92]	; (8002978 <L6474_StartMovement+0xa0>)
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	3324      	adds	r3, #36	; 0x24
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4912      	ldr	r1, [pc, #72]	; (8002978 <L6474_StartMovement+0xa0>)
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800293c:	79fa      	ldrb	r2, [r7, #7]
 800293e:	490e      	ldr	r1, [pc, #56]	; (8002978 <L6474_StartMovement+0xa0>)
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	330c      	adds	r3, #12
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002950:	79fa      	ldrb	r2, [r7, #7]
 8002952:	4909      	ldr	r1, [pc, #36]	; (8002978 <L6474_StartMovement+0xa0>)
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	331e      	adds	r3, #30
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29a      	uxth	r2, r3
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fc55 	bl	8002218 <L6474_ApplySpeed>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000534 	.word	0x20000534

0800297c <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002986:	edd7 7a01 	vldr	s15, [r7, #4]
 800298a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029bc <L6474_Ocd_Th_to_Par+0x40>
 800298e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002992:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80029c0 <L6474_Ocd_Th_to_Par+0x44>
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800299e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a6:	edc7 7a00 	vstr	s15, [r7]
 80029aa:	783b      	ldrb	r3, [r7, #0]
 80029ac:	b2db      	uxtb	r3, r3
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	43bb8000 	.word	0x43bb8000
 80029c0:	3b2eb80f 	.word	0x3b2eb80f

080029c4 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 80029ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80029d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002a04 <L6474_Tval_Current_to_Par+0x40>
 80029d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029da:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002a08 <L6474_Tval_Current_to_Par+0x44>
 80029de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ee:	edc7 7a00 	vstr	s15, [r7]
 80029f2:	783b      	ldrb	r3, [r7, #0]
 80029f4:	b2db      	uxtb	r3, r3
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	41fa0000 	.word	0x41fa0000
 8002a08:	3d03126f 	.word	0x3d03126f

08002a0c <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 8002a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a32:	edc7 7a00 	vstr	s15, [r7]
 8002a36:	783b      	ldrb	r3, [r7, #0]
 8002a38:	b2db      	uxtb	r3, r3
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <L6474_WriteBytes+0x40>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f001 ff15 	bl	800488c <L6474_Board_SpiWriteBytes>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002a68:	f248 0001 	movw	r0, #32769	; 0x8001
 8002a6c:	f7ff fc14 	bl	8002298 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <L6474_WriteBytes+0x44>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <L6474_WriteBytes+0x48>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
  }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000514 	.word	0x20000514
 8002a8c:	20000531 	.word	0x20000531
 8002a90:	20000530 	.word	0x20000530

08002a94 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	2234      	movs	r2, #52	; 0x34
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f01c f86f 	bl	801eb84 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002aa8:	4a3a      	ldr	r2, [pc, #232]	; (8002b94 <MX_LTDC_Init+0x100>)
 8002aaa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002aac:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002abe:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 8002ac4:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002ac6:	2227      	movs	r2, #39	; 0x27
 8002ac8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8002aca:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002acc:	2208      	movs	r2, #8
 8002ace:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002ad2:	222a      	movs	r2, #42	; 0x2a
 8002ad4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002ad8:	220b      	movs	r2, #11
 8002ada:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8002adc:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002ade:	f240 220a 	movw	r2, #522	; 0x20a
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002ae6:	f240 121b 	movw	r2, #283	; 0x11b
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002aee:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002af4:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002af6:	f240 121d 	movw	r2, #285	; 0x11d
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002b14:	481e      	ldr	r0, [pc, #120]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002b16:	f005 f933 	bl	8007d80 <HAL_LTDC_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002b20:	f000 fd70 	bl	8003604 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002b28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b2c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002b32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002b36:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002b3c:	23ff      	movs	r3, #255	; 0xff
 8002b3e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b48:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002b52:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002b58:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2200      	movs	r2, #0
 8002b74:	4619      	mov	r1, r3
 8002b76:	4806      	ldr	r0, [pc, #24]	; (8002b90 <MX_LTDC_Init+0xfc>)
 8002b78:	f005 fa8a 	bl	8008090 <HAL_LTDC_ConfigLayer>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8002b82:	f000 fd3f 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002b86:	bf00      	nop
 8002b88:	3738      	adds	r7, #56	; 0x38
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200005ac 	.word	0x200005ac
 8002b94:	50001000 	.word	0x50001000

08002b98 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0c0      	sub	sp, #256	; 0x100
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bb4:	22bc      	movs	r2, #188	; 0xbc
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f01b ffe3 	bl	801eb84 <memset>
  if(ltdcHandle->Instance==LTDC)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4acf      	ldr	r2, [pc, #828]	; (8002f00 <HAL_LTDC_MspInit+0x368>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	f040 8196 	bne.w	8002ef6 <HAL_LTDC_MspInit+0x35e>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002bca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8002bd4:	2312      	movs	r3, #18
 8002bd6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002be4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002be8:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bee:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8002bf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002bf4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f006 fd48 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 8002c06:	f000 fcfd 	bl	8003604 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c0a:	4bbe      	ldr	r3, [pc, #760]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c10:	4abc      	ldr	r2, [pc, #752]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002c1a:	4bba      	ldr	r3, [pc, #744]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c28:	4bb6      	ldr	r3, [pc, #728]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2e:	4ab5      	ldr	r2, [pc, #724]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c30:	f043 0310 	orr.w	r3, r3, #16
 8002c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c38:	4bb2      	ldr	r3, [pc, #712]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c46:	4baf      	ldr	r3, [pc, #700]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4c:	4aad      	ldr	r2, [pc, #692]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c56:	4bab      	ldr	r3, [pc, #684]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c64:	4ba7      	ldr	r3, [pc, #668]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6a:	4aa6      	ldr	r2, [pc, #664]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c6c:	f043 0320 	orr.w	r3, r3, #32
 8002c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c74:	4ba3      	ldr	r3, [pc, #652]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c82:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c88:	4a9e      	ldr	r2, [pc, #632]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c92:	4b9c      	ldr	r3, [pc, #624]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ca0:	4b98      	ldr	r3, [pc, #608]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	4a97      	ldr	r2, [pc, #604]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb0:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	4a8f      	ldr	r2, [pc, #572]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cce:	4b8d      	ldr	r3, [pc, #564]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	4b89      	ldr	r3, [pc, #548]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce2:	4a88      	ldr	r2, [pc, #544]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cec:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cfa:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d00:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d0a:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d18:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1e:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d28:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_LTDC_MspInit+0x36c>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002d36:	2370      	movs	r3, #112	; 0x70
 8002d38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d4e:	230e      	movs	r3, #14
 8002d50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d58:	4619      	mov	r1, r3
 8002d5a:	486b      	ldr	r0, [pc, #428]	; (8002f08 <HAL_LTDC_MspInit+0x370>)
 8002d5c:	f004 fdf0 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8002d60:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8002d64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d7a:	230e      	movs	r3, #14
 8002d7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d84:	4619      	mov	r1, r3
 8002d86:	4861      	ldr	r0, [pc, #388]	; (8002f0c <HAL_LTDC_MspInit+0x374>)
 8002d88:	f004 fdda 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002da6:	230e      	movs	r3, #14
 8002da8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002db0:	4619      	mov	r1, r3
 8002db2:	4857      	ldr	r0, [pc, #348]	; (8002f10 <HAL_LTDC_MspInit+0x378>)
 8002db4:	f004 fdc4 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dd0:	230e      	movs	r3, #14
 8002dd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002dda:	4619      	mov	r1, r3
 8002ddc:	484d      	ldr	r0, [pc, #308]	; (8002f14 <HAL_LTDC_MspInit+0x37c>)
 8002dde:	f004 fdaf 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8002de2:	f24a 330c 	movw	r3, #41740	; 0xa30c
 8002de6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dfc:	230e      	movs	r3, #14
 8002dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e02:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e06:	4619      	mov	r1, r3
 8002e08:	4843      	ldr	r0, [pc, #268]	; (8002f18 <HAL_LTDC_MspInit+0x380>)
 8002e0a:	f004 fd99 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002e0e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002e12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e28:	230e      	movs	r3, #14
 8002e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e32:	4619      	mov	r1, r3
 8002e34:	4839      	ldr	r0, [pc, #228]	; (8002f1c <HAL_LTDC_MspInit+0x384>)
 8002e36:	f004 fd83 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e52:	2309      	movs	r3, #9
 8002e54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4830      	ldr	r0, [pc, #192]	; (8002f20 <HAL_LTDC_MspInit+0x388>)
 8002e60:	f004 fd6e 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002e64:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002e68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e7e:	230e      	movs	r3, #14
 8002e80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4826      	ldr	r0, [pc, #152]	; (8002f24 <HAL_LTDC_MspInit+0x38c>)
 8002e8c:	f004 fd58 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e90:	2340      	movs	r3, #64	; 0x40
 8002e92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ea8:	230e      	movs	r3, #14
 8002eaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	481c      	ldr	r0, [pc, #112]	; (8002f28 <HAL_LTDC_MspInit+0x390>)
 8002eb6:	f004 fd43 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ebe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ed4:	2309      	movs	r3, #9
 8002ed6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4810      	ldr	r0, [pc, #64]	; (8002f24 <HAL_LTDC_MspInit+0x38c>)
 8002ee2:	f004 fd2d 	bl	8007940 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2105      	movs	r1, #5
 8002eea:	2058      	movs	r0, #88	; 0x58
 8002eec:	f004 fb04 	bl	80074f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ef0:	2058      	movs	r0, #88	; 0x58
 8002ef2:	f004 fb1b 	bl	800752c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	50001000 	.word	0x50001000
 8002f04:	58024400 	.word	0x58024400
 8002f08:	58021000 	.word	0x58021000
 8002f0c:	58022000 	.word	0x58022000
 8002f10:	58021400 	.word	0x58021400
 8002f14:	58020800 	.word	0x58020800
 8002f18:	58021c00 	.word	0x58021c00
 8002f1c:	58020000 	.word	0x58020000
 8002f20:	58020400 	.word	0x58020400
 8002f24:	58021800 	.word	0x58021800
 8002f28:	58020c00 	.word	0x58020c00

08002f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002f32:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <main+0x144>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11b      	bne.n	8002f76 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f3e:	f3bf 8f4f 	dsb	sy
}
 8002f42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f44:	f3bf 8f6f 	isb	sy
}
 8002f48:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002f4a:	4b49      	ldr	r3, [pc, #292]	; (8003070 <main+0x144>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002f52:	f3bf 8f4f 	dsb	sy
}
 8002f56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f58:	f3bf 8f6f 	isb	sy
}
 8002f5c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002f5e:	4b44      	ldr	r3, [pc, #272]	; (8003070 <main+0x144>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	4a43      	ldr	r2, [pc, #268]	; (8003070 <main+0x144>)
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f6a:	f3bf 8f4f 	dsb	sy
}
 8002f6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f70:	f3bf 8f6f 	isb	sy
}
 8002f74:	e000      	b.n	8002f78 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002f76:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002f78:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <main+0x144>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d138      	bne.n	8002ff6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002f84:	4b3a      	ldr	r3, [pc, #232]	; (8003070 <main+0x144>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002f8c:	f3bf 8f4f 	dsb	sy
}
 8002f90:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <main+0x144>)
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f98:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	0b5b      	lsrs	r3, r3, #13
 8002f9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002fa2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	08db      	lsrs	r3, r3, #3
 8002fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fac:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002fb6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002fbc:	492c      	ldr	r1, [pc, #176]	; (8003070 <main+0x144>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1e5a      	subs	r2, r3, #1
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ef      	bne.n	8002fae <main+0x82>
    } while(sets-- != 0U);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1e5a      	subs	r2, r3, #1
 8002fd2:	60ba      	str	r2, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e5      	bne.n	8002fa4 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8002fd8:	f3bf 8f4f 	dsb	sy
}
 8002fdc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <main+0x144>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4a23      	ldr	r2, [pc, #140]	; (8003070 <main+0x144>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fea:	f3bf 8f4f 	dsb	sy
}
 8002fee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ff0:	f3bf 8f6f 	isb	sy
}
 8002ff4:	e000      	b.n	8002ff8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002ff6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff8:	f001 fcae 	bl	8004958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffc:	f000 f83e 	bl	800307c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003000:	f000 f8c0 	bl	8003184 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003004:	f7fe f964 	bl	80012d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8003008:	f000 fce6 	bl	80039d8 <MX_SPI2_Init>
  MX_ADC3_Init();
 800300c:	f7fd fbbc 	bl	8000788 <MX_ADC3_Init>
  MX_I2C1_SMBUS_Init();
 8003010:	f7fe fa6e 	bl	80014f0 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 8003014:	f7fd fcec 	bl	80009f0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8003018:	f7ff fd3c 	bl	8002a94 <MX_LTDC_Init>
  MX_CRC_Init();
 800301c:	f7fd fca4 	bl	8000968 <MX_CRC_Init>
  MX_TIM2_Init();
 8003020:	f001 f856 	bl	80040d0 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 8003024:	f000 faf4 	bl	8003610 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8003028:	f001 f92a 	bl	8004280 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800302c:	f7fd fb32 	bl	8000694 <MX_ADC1_Init>
  MX_SDMMC1_SD_Init();
 8003030:	f000 fbd0 	bl	80037d4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8003034:	f00e f9ea 	bl	801140c <MX_FATFS_Init>
  MX_SPI1_Init();
 8003038:	f000 fc7e 	bl	8003938 <MX_SPI1_Init>
  //MX_TouchGFX_Init();
  /* USER CODE BEGIN 2 */
  L6474_SetNbDevices(1);
 800303c:	2001      	movs	r0, #1
 800303e:	f7ff f81d 	bl	800207c <L6474_SetNbDevices>
  L6474_Init(NULL);
 8003042:	2000      	movs	r0, #0
 8003044:	f7fe fd86 	bl	8001b54 <L6474_Init>
  L6474_SelectStepMode(0, STEP_MODE_1_16);
 8003048:	2104      	movs	r1, #4
 800304a:	2000      	movs	r0, #0
 800304c:	f7fe fe9e 	bl	8001d8c <L6474_SelectStepMode>
  L6474_AttachFlagInterrupt(MyFlagInterruptHandler);
 8003050:	4808      	ldr	r0, [pc, #32]	; (8003074 <main+0x148>)
 8003052:	f7fe faf7 	bl	8001644 <L6474_AttachFlagInterrupt>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET );
 8003056:	2201      	movs	r2, #1
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	4807      	ldr	r0, [pc, #28]	; (8003078 <main+0x14c>)
 800305c:	f004 fe38 	bl	8007cd0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003060:	f00e fcd4 	bl	8011a0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003064:	f7fd fd20 	bl	8000aa8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003068:	f00e fd16 	bl	8011a98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800306c:	e7fe      	b.n	800306c <main+0x140>
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00
 8003074:	080031e1 	.word	0x080031e1
 8003078:	58020400 	.word	0x58020400

0800307c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b09c      	sub	sp, #112	; 0x70
 8003080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003086:	224c      	movs	r2, #76	; 0x4c
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f01b fd7a 	bl	801eb84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	2220      	movs	r2, #32
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f01b fd74 	bl	801eb84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800309c:	2002      	movs	r0, #2
 800309e:	f005 fa07 	bl	80084b0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a2:	2300      	movs	r3, #0
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <SystemClock_Config+0xfc>)
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	4a33      	ldr	r2, [pc, #204]	; (8003178 <SystemClock_Config+0xfc>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <SystemClock_Config+0xfc>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4b2f      	ldr	r3, [pc, #188]	; (800317c <SystemClock_Config+0x100>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a2e      	ldr	r2, [pc, #184]	; (800317c <SystemClock_Config+0x100>)
 80030c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b2c      	ldr	r3, [pc, #176]	; (800317c <SystemClock_Config+0x100>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030d4:	bf00      	nop
 80030d6:	4b29      	ldr	r3, [pc, #164]	; (800317c <SystemClock_Config+0x100>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e2:	d1f8      	bne.n	80030d6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80030e4:	4b26      	ldr	r3, [pc, #152]	; (8003180 <SystemClock_Config+0x104>)
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	f023 0303 	bic.w	r3, r3, #3
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <SystemClock_Config+0x104>)
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030fe:	2302      	movs	r3, #2
 8003100:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003102:	2302      	movs	r3, #2
 8003104:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800310a:	2364      	movs	r3, #100	; 0x64
 800310c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800310e:	2302      	movs	r3, #2
 8003110:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003112:	2304      	movs	r3, #4
 8003114:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003116:	2302      	movs	r3, #2
 8003118:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800311a:	230c      	movs	r3, #12
 800311c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800311e:	2300      	movs	r3, #0
 8003120:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312a:	4618      	mov	r0, r3
 800312c:	f005 fab4 	bl	8008698 <HAL_RCC_OscConfig>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003136:	f000 fa65 	bl	8003604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800313a:	233f      	movs	r3, #63	; 0x3f
 800313c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800313e:	2303      	movs	r3, #3
 8003140:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003146:	2308      	movs	r3, #8
 8003148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800314a:	2340      	movs	r3, #64	; 0x40
 800314c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800314e:	2340      	movs	r3, #64	; 0x40
 8003150:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003156:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003158:	2340      	movs	r3, #64	; 0x40
 800315a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	2102      	movs	r1, #2
 8003160:	4618      	mov	r0, r3
 8003162:	f005 fec7 	bl	8008ef4 <HAL_RCC_ClockConfig>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800316c:	f000 fa4a 	bl	8003604 <Error_Handler>
  }
}
 8003170:	bf00      	nop
 8003172:	3770      	adds	r7, #112	; 0x70
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	58000400 	.word	0x58000400
 800317c:	58024800 	.word	0x58024800
 8003180:	58024400 	.word	0x58024400

08003184 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0b0      	sub	sp, #192	; 0xc0
 8003188:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	22bc      	movs	r2, #188	; 0xbc
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f01b fcf7 	bl	801eb84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003196:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800319a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800319c:	2301      	movs	r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80031a0:	2312      	movs	r3, #18
 80031a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80031a4:	2302      	movs	r3, #2
 80031a6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80031a8:	2302      	movs	r3, #2
 80031aa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80031b4:	2320      	movs	r3, #32
 80031b6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80031b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f006 fa62 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80031d2:	f000 fa17 	bl	8003604 <Error_Handler>
  }
}
 80031d6:	bf00      	nop
 80031d8:	37c0      	adds	r7, #192	; 0xc0
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
//stepper driver interrupt
void MyFlagInterruptHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = L6474_CmdGetStatus(0);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7fe fb4a 	bl	8001880 <L6474_CmdGetStatus>
 80031ec:	4603      	mov	r3, r0
 80031ee:	80fb      	strh	r3, [r7, #6]

  /* Check HIZ flag: if set, power brigdes are disabled */
  if ((statusRegister & L6474_STATUS_HIZ) == L6474_STATUS_HIZ)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <MyFlagInterruptHandler+0x2a>
  {
    // HIZ state
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	4837      	ldr	r0, [pc, #220]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 80031fe:	f004 fd80 	bl	8007d02 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 8003202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003206:	f001 fc03 	bl	8004a10 <HAL_Delay>

    // Action to be customized
  }

  /* Check direction bit */
  if ((statusRegister & L6474_STATUS_DIR) == L6474_STATUS_DIR)
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <MyFlagInterruptHandler+0x46>
  {
    // Forward direction is set
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	4831      	ldr	r0, [pc, #196]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 8003218:	f004 fd73 	bl	8007d02 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800321c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003220:	f001 fbf6 	bl	8004a10 <HAL_Delay>
 8003224:	e007      	b.n	8003236 <MyFlagInterruptHandler+0x56>
    // Action to be customized
  }
  else
  {
    // Backward direction is set
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	482c      	ldr	r0, [pc, #176]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 800322a:	f004 fd6a 	bl	8007d02 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 800322e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003232:	f001 fbed 	bl	8004a10 <HAL_Delay>
  }

  /* Check NOTPERF_CMD flag: if set, the command received by SPI can't be performed */
  /* This often occures when a command is sent to the L6474 */
  /* while it is in HIZ state */
  if ((statusRegister & L6474_STATUS_NOTPERF_CMD) == L6474_STATUS_NOTPERF_CMD)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <MyFlagInterruptHandler+0x70>
  {
      // Command received by SPI can't be performed
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	4826      	ldr	r0, [pc, #152]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 8003244:	f004 fd5d 	bl	8007d02 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800324c:	f001 fbe0 	bl	8004a10 <HAL_Delay>
     // Action to be customized
  }

  /* Check WRONG_CMD flag: if set, the command does not exist */
  if ((statusRegister & L6474_STATUS_WRONG_CMD) == L6474_STATUS_WRONG_CMD)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <MyFlagInterruptHandler+0x8a>
  {
     //command received by SPI does not exist
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	481f      	ldr	r0, [pc, #124]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 800325e:	f004 fd50 	bl	8007d02 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003266:	f001 fbd3 	bl	8004a10 <HAL_Delay>
     // Action to be customized
  }

  /* Check UVLO flag: if not set, there is an undervoltage lock-out */
  if ((statusRegister & L6474_STATUS_UVLO) == 0)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <MyFlagInterruptHandler+0xa4>
  {
     //undervoltage lock-out
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	4819      	ldr	r0, [pc, #100]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 8003278:	f004 fd43 	bl	8007d02 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800327c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003280:	f001 fbc6 	bl	8004a10 <HAL_Delay>
     // Action to be customized
  }

  /* Check TH_WRN flag: if not set, the thermal warning threshold is reached */
  if ((statusRegister & L6474_STATUS_TH_WRN) == 0)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <MyFlagInterruptHandler+0xbe>
  {
    //thermal warning threshold is reached
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	4812      	ldr	r0, [pc, #72]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 8003292:	f004 fd36 	bl	8007d02 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 8003296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800329a:	f001 fbb9 	bl	8004a10 <HAL_Delay>
    // Action to be customized
  }

  /* Check TH_SHD flag: if not set, the thermal shut down threshold is reached */
  if ((statusRegister & L6474_STATUS_TH_SD) == 0)
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <MyFlagInterruptHandler+0xd8>
  {
    //thermal shut down threshold is reached
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	480c      	ldr	r0, [pc, #48]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 80032ac:	f004 fd29 	bl	8007d02 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80032b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032b4:	f001 fbac 	bl	8004a10 <HAL_Delay>
    // Action to be customized

  }

  /* Check OCD  flag: if not set, there is an overcurrent detection */
  if ((statusRegister & L6474_STATUS_OCD) == 0)
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <MyFlagInterruptHandler+0xf2>
  {
    //overcurrent detection
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	4805      	ldr	r0, [pc, #20]	; (80032dc <MyFlagInterruptHandler+0xfc>)
 80032c6:	f004 fd1c 	bl	8007d02 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80032ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ce:	f001 fb9f 	bl	8004a10 <HAL_Delay>
    // Action to be customized
  }

}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	58020400 	.word	0x58020400

080032e0 <HAL_ADC_LevelOutOfWindowCallback>:
// cpu temp interrupt
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	// do something in case of analog watchdog interrupts
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80032e8:	2201      	movs	r2, #1
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	4804      	ldr	r0, [pc, #16]	; (8003300 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 80032ee:	f004 fcef 	bl	8007cd0 <HAL_GPIO_WritePin>
	HAL_ADC_Stop_IT(hadc);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f002 fb58 	bl	80059a8 <HAL_ADC_Stop_IT>
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58020400 	.word	0x58020400
 8003304:	00000000 	.word	0x00000000

08003308 <Screws_Speed_From_FlowRate>:

// returns the speed of Screws (mm/s) needed for a given flow_rate (mm^3/h) and syringe radius(mm)
float Screws_Speed_From_FlowRate(float flow_rate , float radius ){
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003312:	edc7 0a00 	vstr	s1, [r7]
	float section = radius*radius*3.14159;
 8003316:	edd7 7a00 	vldr	s15, [r7]
 800331a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800331e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003322:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003360 <Screws_Speed_From_FlowRate+0x58>
 8003326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800332a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800332e:	edc7 7a03 	vstr	s15, [r7, #12]
	flow_rate = flow_rate/3600;
 8003332:	ed97 7a01 	vldr	s14, [r7, #4]
 8003336:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003368 <Screws_Speed_From_FlowRate+0x60>
 800333a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800333e:	edc7 7a01 	vstr	s15, [r7, #4]
	return flow_rate/section;
 8003342:	ed97 7a01 	vldr	s14, [r7, #4]
 8003346:	edd7 7a03 	vldr	s15, [r7, #12]
 800334a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800334e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	f01b866e 	.word	0xf01b866e
 8003364:	400921f9 	.word	0x400921f9
 8003368:	45610000 	.word	0x45610000

0800336c <Shaft_speed>:
// returns the speed of Screws needed for a given fluid volume(mm^3) , time(seconds) and radius
float Screws_Speed_From_Time_And_Volume(float time , float volume,uint8_t radius){
	return Screws_Speed_From_FlowRate(volume/time,radius) ;
}
// returns the shaft speed needed (rps) to drive the screws
float Shaft_speed (float screwspeed){
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	ed87 0a01 	vstr	s0, [r7, #4]
	return screwspeed / (SCREWSTEP);
 8003376:	edd7 7a01 	vldr	s15, [r7, #4]
 800337a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800337e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003382:	eef0 7a66 	vmov.f32	s15, s13
}
 8003386:	eeb0 0a67 	vmov.f32	s0, s15
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <Motor_Speed>:
// returns the motor speed needed (rps) to drive the shaft
float Motor_Speed(float shaftspeed){
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	ed87 0a01 	vstr	s0, [r7, #4]

	return (DSHAFT*shaftspeed)/DMOTOR;
 800339e:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80033c4 <Motor_Speed+0x30>
 80033a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80033ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80033b6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	420c0000 	.word	0x420c0000

080033c8 <Time_Needed>:
//return number of seconds to finish the injection
float Time_Needed(float flow_rate, float volume_to_inject){
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80033d2:	edc7 0a00 	vstr	s1, [r7]
	flow_rate = flow_rate/3600;
 80033d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80033da:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003404 <Time_Needed+0x3c>
 80033de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033e2:	edc7 7a01 	vstr	s15, [r7, #4]
	return (volume_to_inject/flow_rate);
 80033e6:	ed97 7a00 	vldr	s14, [r7]
 80033ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80033f6:	eeb0 0a67 	vmov.f32	s0, s15
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	45610000 	.word	0x45610000

08003408 <SyringeMove>:

void SyringeMove(float FlowRate , uint8_t radius){
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003412:	4603      	mov	r3, r0
 8003414:	70fb      	strb	r3, [r7, #3]
	float screwspeed , motorspeed,shaftspeed;
	int pps;
	screwspeed = Screws_Speed_From_FlowRate(FlowRate,radius);
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003420:	eef0 0a67 	vmov.f32	s1, s15
 8003424:	ed97 0a01 	vldr	s0, [r7, #4]
 8003428:	f7ff ff6e 	bl	8003308 <Screws_Speed_From_FlowRate>
 800342c:	ed87 0a05 	vstr	s0, [r7, #20]
	shaftspeed =Shaft_speed(screwspeed);
 8003430:	ed97 0a05 	vldr	s0, [r7, #20]
 8003434:	f7ff ff9a 	bl	800336c <Shaft_speed>
 8003438:	ed87 0a04 	vstr	s0, [r7, #16]
	motorspeed = Motor_Speed(shaftspeed);
 800343c:	ed97 0a04 	vldr	s0, [r7, #16]
 8003440:	f7ff ffa8 	bl	8003394 <Motor_Speed>
 8003444:	ed87 0a03 	vstr	s0, [r7, #12]
	pps=motorspeed*200*16; // 1/16 microstep
 8003448:	edd7 7a03 	vldr	s15, [r7, #12]
 800344c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003490 <SyringeMove+0x88>
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800345c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003460:	ee17 3a90 	vmov	r3, s15
 8003464:	60bb      	str	r3, [r7, #8]
	L6474_SetMaxSpeed(0,pps);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	b29b      	uxth	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	2000      	movs	r0, #0
 800346e:	f7fe fe21 	bl	80020b4 <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, pps);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	b29b      	uxth	r3, r3
 8003476:	4619      	mov	r1, r3
 8003478:	2000      	movs	r0, #0
 800347a:	f7fe fe67 	bl	800214c <L6474_SetMinSpeed>
	L6474_Run(0, BACKWARD);
 800347e:	2100      	movs	r1, #0
 8003480:	2000      	movs	r0, #0
 8003482:	f7fe fc51 	bl	8001d28 <L6474_Run>
	/*drv8825_setSpeedRPM(drv8825, motorspeed*60);
	drv8825_setEn(drv8825, EN_START);*/
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	43480000 	.word	0x43480000

08003494 <SyringeStop>:
void SyringeStop(){
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
		//drv8825_setEn(drv8825, EN_STOP);
	L6474_HardStop(0);
 8003498:	2000      	movs	r0, #0
 800349a:	f7fe fbbf 	bl	8001c1c <L6474_HardStop>
	L6474_HizStop(0);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fe fc06 	bl	8001cb0 <L6474_HizStop>
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <map>:

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80034a8:	b490      	push	{r4, r7}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	80fb      	strh	r3, [r7, #6]
 80034ba:	4603      	mov	r3, r0
 80034bc:	80bb      	strh	r3, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]
 80034c2:	4613      	mov	r3, r2
 80034c4:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	88bb      	ldrh	r3, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	8a39      	ldrh	r1, [r7, #16]
 80034ce:	883a      	ldrh	r2, [r7, #0]
 80034d0:	1a8a      	subs	r2, r1, r2
 80034d2:	fb03 f202 	mul.w	r2, r3, r2
 80034d6:	8879      	ldrh	r1, [r7, #2]
 80034d8:	88bb      	ldrh	r3, [r7, #4]
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	883b      	ldrh	r3, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	b29b      	uxth	r3, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc90      	pop	{r4, r7}
 80034f0:	4770      	bx	lr
	...

080034f4 <position>:
uint16_t position(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af02      	add	r7, sp, #8
	uint16_t readValue,traveled_steps,count=0 ;
 80034fa:	2300      	movs	r3, #0
 80034fc:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 80034fe:	481b      	ldr	r0, [pc, #108]	; (800356c <position+0x78>)
 8003500:	f001 ff54 	bl	80053ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003504:	2164      	movs	r1, #100	; 0x64
 8003506:	4819      	ldr	r0, [pc, #100]	; (800356c <position+0x78>)
 8003508:	f002 f81a 	bl	8005540 <HAL_ADC_PollForConversion>
	readValue = HAL_ADC_GetValue(&hadc1);
 800350c:	4817      	ldr	r0, [pc, #92]	; (800356c <position+0x78>)
 800350e:	f002 fa87 	bl	8005a20 <HAL_ADC_GetValue>
 8003512:	4603      	mov	r3, r0
 8003514:	80bb      	strh	r3, [r7, #4]
	traveled_steps=map(readValue, 0, 65535,0 ,2000)+(count*2000); // 10tours * 200steps
 8003516:	88b8      	ldrh	r0, [r7, #4]
 8003518:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003524:	2100      	movs	r1, #0
 8003526:	f7ff ffbf 	bl	80034a8 <map>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	4619      	mov	r1, r3
 8003532:	0149      	lsls	r1, r1, #5
 8003534:	1ac9      	subs	r1, r1, r3
 8003536:	0089      	lsls	r1, r1, #2
 8003538:	440b      	add	r3, r1
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	b29b      	uxth	r3, r3
 800353e:	4413      	add	r3, r2
 8003540:	807b      	strh	r3, [r7, #2]
	if(traveled_steps%2000==0)
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <position+0x7c>)
 8003546:	fba2 1203 	umull	r1, r2, r2, r3
 800354a:	09d2      	lsrs	r2, r2, #7
 800354c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003550:	fb01 f202 	mul.w	r2, r1, r2
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <position+0x6e>
		count++;
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	3301      	adds	r3, #1
 8003560:	80fb      	strh	r3, [r7, #6]
	return traveled_steps;
 8003562:	887b      	ldrh	r3, [r7, #2]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000330 	.word	0x20000330
 8003570:	10624dd3 	.word	0x10624dd3

08003574 <calculate_volume_left>:
float calculate_volume_left(uint16_t traveled_steps ,float flowrate ,float volume_to_inject ){
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003580:	edc7 0a01 	vstr	s1, [r7, #4]
 8003584:	81fb      	strh	r3, [r7, #14]
	float injectedVolume , speed =(L6474_GetCurrentSpeed(0)/16);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fe fb30 	bl	8001bec <L6474_GetCurrentSpeed>
 800358c:	4603      	mov	r3, r0
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	b29b      	uxth	r3, r3
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359a:	edc7 7a05 	vstr	s15, [r7, #20]
	injectedVolume = (traveled_steps / speed)*(flowrate/3600);
 800359e:	89fb      	ldrh	r3, [r7, #14]
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80035a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80035ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80035b4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80035dc <calculate_volume_left+0x68>
 80035b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c0:	edc7 7a04 	vstr	s15, [r7, #16]
	return (volume_to_inject-injectedVolume);
 80035c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80035c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80035cc:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80035d0:	eeb0 0a67 	vmov.f32	s0, s15
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	45610000 	.word	0x45610000

080035e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035f2:	f001 f9ed 	bl	80049d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40000400 	.word	0x40000400

08003604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003608:	b672      	cpsid	i
}
 800360a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800360c:	e7fe      	b.n	800360c <Error_Handler+0x8>
	...

08003610 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <MX_QUADSPI_Init+0x50>)
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <MX_QUADSPI_Init+0x54>)
 8003618:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <MX_QUADSPI_Init+0x50>)
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <MX_QUADSPI_Init+0x50>)
 8003622:	2201      	movs	r2, #1
 8003624:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <MX_QUADSPI_Init+0x50>)
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <MX_QUADSPI_Init+0x50>)
 800362e:	2201      	movs	r2, #1
 8003630:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <MX_QUADSPI_Init+0x50>)
 8003634:	2200      	movs	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <MX_QUADSPI_Init+0x50>)
 800363a:	2200      	movs	r2, #0
 800363c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <MX_QUADSPI_Init+0x50>)
 8003640:	2200      	movs	r2, #0
 8003642:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <MX_QUADSPI_Init+0x50>)
 8003646:	2200      	movs	r2, #0
 8003648:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800364a:	4805      	ldr	r0, [pc, #20]	; (8003660 <MX_QUADSPI_Init+0x50>)
 800364c:	f004 ff6a 	bl	8008524 <HAL_QSPI_Init>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8003656:	f7ff ffd5 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000654 	.word	0x20000654
 8003664:	52005000 	.word	0x52005000

08003668 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b0ba      	sub	sp, #232	; 0xe8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003680:	f107 0318 	add.w	r3, r7, #24
 8003684:	22bc      	movs	r2, #188	; 0xbc
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f01b fa7b 	bl	801eb84 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <HAL_QSPI_MspInit+0x15c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f040 8091 	bne.w	80037bc <HAL_QSPI_MspInit+0x154>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800369a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a4:	f107 0318 	add.w	r3, r7, #24
 80036a8:	4618      	mov	r0, r3
 80036aa:	f005 fff1 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80036b4:	f7ff ffa6 	bl	8003604 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80036b8:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80036be:	4a42      	ldr	r2, [pc, #264]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036d6:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036dc:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036de:	f043 0320 	orr.w	r3, r3, #32
 80036e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e6:	4b38      	ldr	r3, [pc, #224]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036fa:	4a33      	ldr	r2, [pc, #204]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003704:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_QSPI_MspInit+0x160>)
 8003706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003712:	23c0      	movs	r3, #192	; 0xc0
 8003714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800372a:	2309      	movs	r3, #9
 800372c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003730:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003734:	4619      	mov	r1, r3
 8003736:	4825      	ldr	r0, [pc, #148]	; (80037cc <HAL_QSPI_MspInit+0x164>)
 8003738:	f004 f902 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800373c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003756:	230a      	movs	r3, #10
 8003758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800375c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003760:	4619      	mov	r1, r3
 8003762:	481a      	ldr	r0, [pc, #104]	; (80037cc <HAL_QSPI_MspInit+0x164>)
 8003764:	f004 f8ec 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003768:	2304      	movs	r3, #4
 800376a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003780:	2309      	movs	r3, #9
 8003782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003786:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800378a:	4619      	mov	r1, r3
 800378c:	4810      	ldr	r0, [pc, #64]	; (80037d0 <HAL_QSPI_MspInit+0x168>)
 800378e:	f004 f8d7 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003792:	2340      	movs	r3, #64	; 0x40
 8003794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80037aa:	230a      	movs	r3, #10
 80037ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4806      	ldr	r0, [pc, #24]	; (80037d0 <HAL_QSPI_MspInit+0x168>)
 80037b8:	f004 f8c2 	bl	8007940 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80037bc:	bf00      	nop
 80037be:	37e8      	adds	r7, #232	; 0xe8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	52005000 	.word	0x52005000
 80037c8:	58024400 	.word	0x58024400
 80037cc:	58021400 	.word	0x58021400
 80037d0:	58020400 	.word	0x58020400

080037d4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <MX_SDMMC1_SD_Init+0x34>)
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <MX_SDMMC1_SD_Init+0x38>)
 80037dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <MX_SDMMC1_SD_Init+0x34>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <MX_SDMMC1_SD_Init+0x34>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <MX_SDMMC1_SD_Init+0x34>)
 80037ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037f0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <MX_SDMMC1_SD_Init+0x34>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <MX_SDMMC1_SD_Init+0x34>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
 // hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	200006a0 	.word	0x200006a0
 800380c:	52007000 	.word	0x52007000

08003810 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b0ba      	sub	sp, #232	; 0xe8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003828:	f107 0318 	add.w	r3, r7, #24
 800382c:	22bc      	movs	r2, #188	; 0xbc
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f01b f9a7 	bl	801eb84 <memset>
  if(sdHandle->Instance==SDMMC1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3b      	ldr	r2, [pc, #236]	; (8003928 <HAL_SD_MspInit+0x118>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d16e      	bne.n	800391e <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003844:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003846:	2300      	movs	r3, #0
 8003848:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800384a:	f107 0318 	add.w	r3, r7, #24
 800384e:	4618      	mov	r0, r3
 8003850:	f005 ff1e 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800385a:	f7ff fed3 	bl	8003604 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800385e:	4b33      	ldr	r3, [pc, #204]	; (800392c <HAL_SD_MspInit+0x11c>)
 8003860:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <HAL_SD_MspInit+0x11c>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_SD_MspInit+0x11c>)
 8003870:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_SD_MspInit+0x11c>)
 800387e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003882:	4a2a      	ldr	r2, [pc, #168]	; (800392c <HAL_SD_MspInit+0x11c>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <HAL_SD_MspInit+0x11c>)
 800388e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_SD_MspInit+0x11c>)
 800389c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_SD_MspInit+0x11c>)
 80038a2:	f043 0308 	orr.w	r3, r3, #8
 80038a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_SD_MspInit+0x11c>)
 80038ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80038b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80038bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038cc:	2303      	movs	r3, #3
 80038ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80038d2:	230c      	movs	r3, #12
 80038d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038dc:	4619      	mov	r1, r3
 80038de:	4814      	ldr	r0, [pc, #80]	; (8003930 <HAL_SD_MspInit+0x120>)
 80038e0:	f004 f82e 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038e4:	2304      	movs	r3, #4
 80038e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f6:	2303      	movs	r3, #3
 80038f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80038fc:	230c      	movs	r3, #12
 80038fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003902:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003906:	4619      	mov	r1, r3
 8003908:	480a      	ldr	r0, [pc, #40]	; (8003934 <HAL_SD_MspInit+0x124>)
 800390a:	f004 f819 	bl	8007940 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	2105      	movs	r1, #5
 8003912:	2031      	movs	r0, #49	; 0x31
 8003914:	f003 fdf0 	bl	80074f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003918:	2031      	movs	r0, #49	; 0x31
 800391a:	f003 fe07 	bl	800752c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800391e:	bf00      	nop
 8003920:	37e8      	adds	r7, #232	; 0xe8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	52007000 	.word	0x52007000
 800392c:	58024400 	.word	0x58024400
 8003930:	58020800 	.word	0x58020800
 8003934:	58020c00 	.word	0x58020c00

08003938 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <MX_SPI1_Init+0x98>)
 800393e:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <MX_SPI1_Init+0x9c>)
 8003940:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8003942:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <MX_SPI1_Init+0x98>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003950:	2207      	movs	r2, #7
 8003952:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <MX_SPI1_Init+0x98>)
 800395c:	2200      	movs	r2, #0
 800395e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003962:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003966:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <MX_SPI1_Init+0x98>)
 800396a:	2200      	movs	r2, #0
 800396c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003970:	2200      	movs	r2, #0
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <MX_SPI1_Init+0x98>)
 800397c:	2200      	movs	r2, #0
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003982:	2200      	movs	r2, #0
 8003984:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003988:	2200      	movs	r2, #0
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <MX_SPI1_Init+0x98>)
 800398e:	2200      	movs	r2, #0
 8003990:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <MX_SPI1_Init+0x98>)
 8003994:	2200      	movs	r2, #0
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <MX_SPI1_Init+0x98>)
 800399a:	2200      	movs	r2, #0
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <MX_SPI1_Init+0x98>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <MX_SPI1_Init+0x98>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <MX_SPI1_Init+0x98>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <MX_SPI1_Init+0x98>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <MX_SPI1_Init+0x98>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039bc:	4804      	ldr	r0, [pc, #16]	; (80039d0 <MX_SPI1_Init+0x98>)
 80039be:	f009 fd51 	bl	800d464 <HAL_SPI_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 80039c8:	f7ff fe1c 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000071c 	.word	0x2000071c
 80039d4:	40013000 	.word	0x40013000

080039d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <MX_SPI2_Init+0xa4>)
 80039de:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <MX_SPI2_Init+0xa8>)
 80039e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <MX_SPI2_Init+0xa4>)
 80039e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80039e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <MX_SPI2_Init+0xa4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <MX_SPI2_Init+0xa4>)
 80039f2:	221f      	movs	r2, #31
 80039f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f6:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <MX_SPI2_Init+0xa4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <MX_SPI2_Init+0xa4>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a30:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a3e:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003a4a:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a68:	4804      	ldr	r0, [pc, #16]	; (8003a7c <MX_SPI2_Init+0xa4>)
 8003a6a:	f009 fcfb 	bl	800d464 <HAL_SPI_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003a74:	f7ff fdc6 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200007a4 	.word	0x200007a4
 8003a80:	40003800 	.word	0x40003800

08003a84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0bc      	sub	sp, #240	; 0xf0
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a9c:	f107 0320 	add.w	r3, r7, #32
 8003aa0:	22bc      	movs	r2, #188	; 0xbc
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f01b f86d 	bl	801eb84 <memset>
  if(spiHandle->Instance==SPI1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <HAL_SPI_MspInit+0x1e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	f040 808c 	bne.w	8003bce <HAL_SPI_MspInit+0x14a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ac0:	f107 0320 	add.w	r3, r7, #32
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f005 fde3 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003ad0:	f7ff fd98 	bl	8003604 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ad4:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ada:	4a64      	ldr	r2, [pc, #400]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ae0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ae4:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af8:	4a5c      	ldr	r2, [pc, #368]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b02:	4b5a      	ldr	r3, [pc, #360]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b10:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b16:	4a55      	ldr	r2, [pc, #340]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b20:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2e:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b34:	4a4d      	ldr	r2, [pc, #308]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b3e:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b64:	2305      	movs	r3, #5
 8003b66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b6e:	4619      	mov	r1, r3
 8003b70:	483f      	ldr	r0, [pc, #252]	; (8003c70 <HAL_SPI_MspInit+0x1ec>)
 8003b72:	f003 fee5 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b90:	2305      	movs	r3, #5
 8003b92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b96:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4835      	ldr	r0, [pc, #212]	; (8003c74 <HAL_SPI_MspInit+0x1f0>)
 8003b9e:	f003 fecf 	bl	8007940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bba:	2305      	movs	r3, #5
 8003bbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	482c      	ldr	r0, [pc, #176]	; (8003c78 <HAL_SPI_MspInit+0x1f4>)
 8003bc8:	f003 feba 	bl	8007940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003bcc:	e047      	b.n	8003c5e <HAL_SPI_MspInit+0x1da>
  else if(spiHandle->Instance==SPI2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <HAL_SPI_MspInit+0x1f8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d142      	bne.n	8003c5e <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bdc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003be2:	f107 0320 	add.w	r3, r7, #32
 8003be6:	4618      	mov	r0, r3
 8003be8:	f005 fd52 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_SPI_MspInit+0x172>
      Error_Handler();
 8003bf2:	f7ff fd07 	bl	8003604 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c1a:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_SPI_MspInit+0x1e8>)
 8003c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003c32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c4c:	2305      	movs	r3, #5
 8003c4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c52:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c56:	4619      	mov	r1, r3
 8003c58:	4807      	ldr	r0, [pc, #28]	; (8003c78 <HAL_SPI_MspInit+0x1f4>)
 8003c5a:	f003 fe71 	bl	8007940 <HAL_GPIO_Init>
}
 8003c5e:	bf00      	nop
 8003c60:	37f0      	adds	r7, #240	; 0xf0
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40013000 	.word	0x40013000
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	58020000 	.word	0x58020000
 8003c74:	58021800 	.word	0x58021800
 8003c78:	58020400 	.word	0x58020400
 8003c7c:	40003800 	.word	0x40003800

08003c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_MspInit+0x38>)
 8003c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <HAL_MspInit+0x38>)
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_MspInit+0x38>)
 8003c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	210f      	movs	r1, #15
 8003ca8:	f06f 0001 	mvn.w	r0, #1
 8003cac:	f003 fc24 	bl	80074f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58024400 	.word	0x58024400

08003cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b090      	sub	sp, #64	; 0x40
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	d827      	bhi.n	8003d1a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	201d      	movs	r0, #29
 8003cd0:	f003 fc12 	bl	80074f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003cd4:	201d      	movs	r0, #29
 8003cd6:	f003 fc29 	bl	800752c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003cda:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_InitTick+0xc4>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003ce0:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_InitTick+0xc8>)
 8003ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ce6:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <HAL_InitTick+0xc8>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cf0:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_InitTick+0xc8>)
 8003cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cfe:	f107 0210 	add.w	r2, r7, #16
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f005 fc7f 	bl	800960c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_InitTick+0x6a>
 8003d18:	e001      	b.n	8003d1e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e02b      	b.n	8003d76 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d1e:	f005 fc49 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 8003d22:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003d24:	e004      	b.n	8003d30 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d26:	f005 fc45 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <HAL_InitTick+0xcc>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	0c9b      	lsrs	r3, r3, #18
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_InitTick+0xd0>)
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_InitTick+0xd4>)
 8003d42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_InitTick+0xd0>)
 8003d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d4a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <HAL_InitTick+0xd0>)
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_InitTick+0xd0>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_InitTick+0xd0>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003d5e:	480b      	ldr	r0, [pc, #44]	; (8003d8c <HAL_InitTick+0xd0>)
 8003d60:	f00a f85b 	bl	800de1a <HAL_TIM_Base_Init>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003d6a:	4808      	ldr	r0, [pc, #32]	; (8003d8c <HAL_InitTick+0xd0>)
 8003d6c:	f00a f8ac 	bl	800dec8 <HAL_TIM_Base_Start_IT>
 8003d70:	4603      	mov	r3, r0
 8003d72:	e000      	b.n	8003d76 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3740      	adds	r7, #64	; 0x40
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000008 	.word	0x20000008
 8003d84:	58024400 	.word	0x58024400
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	2000082c 	.word	0x2000082c
 8003d90:	40000400 	.word	0x40000400

08003d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d98:	e7fe      	b.n	8003d98 <NMI_Handler+0x4>

08003d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <HardFault_Handler+0x4>

08003da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da4:	e7fe      	b.n	8003da4 <MemManage_Handler+0x4>

08003da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003daa:	e7fe      	b.n	8003daa <BusFault_Handler+0x4>

08003dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db0:	e7fe      	b.n	8003db0 <UsageFault_Handler+0x4>

08003db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db2:	b480      	push	{r7}
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003dc4:	2010      	movs	r0, #16
 8003dc6:	f003 ffb6 	bl	8007d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <TIM2_IRQHandler+0x10>)
 8003dd6:	f00a fb41 	bl	800e45c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2000087c 	.word	0x2000087c

08003de4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <TIM3_IRQHandler+0x10>)
 8003dea:	f00a fb37 	bl	800e45c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	2000082c 	.word	0x2000082c

08003df8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <SDMMC1_IRQHandler+0x10>)
 8003dfe:	f008 f83d 	bl	800be7c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	200006a0 	.word	0x200006a0

08003e0c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <LTDC_IRQHandler+0x10>)
 8003e12:	f004 f885 	bl	8007f20 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200005ac 	.word	0x200005ac

08003e20 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <ADC3_IRQHandler+0x10>)
 8003e26:	f001 fe09 	bl	8005a3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000394 	.word	0x20000394

08003e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
	return 1;
 8003e38:	2301      	movs	r3, #1
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <_kill>:

int _kill(int pid, int sig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e4e:	f01a fd45 	bl	801e8dc <__errno>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2216      	movs	r2, #22
 8003e56:	601a      	str	r2, [r3, #0]
	return -1;
 8003e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_exit>:

void _exit (int status)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffe7 	bl	8003e44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e76:	e7fe      	b.n	8003e76 <_exit+0x12>

08003e78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e00a      	b.n	8003ea0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e8a:	f3af 8000 	nop.w
 8003e8e:	4601      	mov	r1, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	60ba      	str	r2, [r7, #8]
 8003e96:	b2ca      	uxtb	r2, r1
 8003e98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	dbf0      	blt.n	8003e8a <_read+0x12>
	}

return len;
 8003ea8:	687b      	ldr	r3, [r7, #4]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e009      	b.n	8003ed8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	60ba      	str	r2, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	dbf1      	blt.n	8003ec4 <_write+0x12>
	}
	return len;
 8003ee0:	687b      	ldr	r3, [r7, #4]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <_close>:

int _close(int file)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f12:	605a      	str	r2, [r3, #4]
	return 0;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_isatty>:

int _isatty(int file)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
	return 1;
 8003f2a:	2301      	movs	r3, #1
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
	return 0;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <_sbrk+0x5c>)
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <_sbrk+0x60>)
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <_sbrk+0x64>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <_sbrk+0x64>)
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <_sbrk+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <_sbrk+0x64>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d207      	bcs.n	8003f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f84:	f01a fcaa 	bl	801e8dc <__errno>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f92:	e009      	b.n	8003fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <_sbrk+0x64>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <_sbrk+0x64>)
 8003fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20020000 	.word	0x20020000
 8003fb4:	00000400 	.word	0x00000400
 8003fb8:	20000878 	.word	0x20000878
 8003fbc:	20007110 	.word	0x20007110

08003fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fc4:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <SystemInit+0xe4>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	4a36      	ldr	r2, [pc, #216]	; (80040a4 <SystemInit+0xe4>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fd4:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <SystemInit+0xe8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2b06      	cmp	r3, #6
 8003fde:	d807      	bhi.n	8003ff0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <SystemInit+0xe8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 030f 	bic.w	r3, r3, #15
 8003fe8:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <SystemInit+0xe8>)
 8003fea:	f043 0307 	orr.w	r3, r3, #7
 8003fee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <SystemInit+0xec>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <SystemInit+0xec>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <SystemInit+0xec>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <SystemInit+0xec>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4929      	ldr	r1, [pc, #164]	; (80040ac <SystemInit+0xec>)
 8004008:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <SystemInit+0xf0>)
 800400a:	4013      	ands	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800400e:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <SystemInit+0xe8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <SystemInit+0xe8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 030f 	bic.w	r3, r3, #15
 8004022:	4a21      	ldr	r2, [pc, #132]	; (80040a8 <SystemInit+0xe8>)
 8004024:	f043 0307 	orr.w	r3, r3, #7
 8004028:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <SystemInit+0xec>)
 800402c:	2200      	movs	r2, #0
 800402e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <SystemInit+0xec>)
 8004032:	2200      	movs	r2, #0
 8004034:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <SystemInit+0xec>)
 8004038:	2200      	movs	r2, #0
 800403a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <SystemInit+0xec>)
 800403e:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <SystemInit+0xf4>)
 8004040:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <SystemInit+0xec>)
 8004044:	4a1c      	ldr	r2, [pc, #112]	; (80040b8 <SystemInit+0xf8>)
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <SystemInit+0xec>)
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <SystemInit+0xfc>)
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <SystemInit+0xec>)
 8004050:	2200      	movs	r2, #0
 8004052:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <SystemInit+0xec>)
 8004056:	4a19      	ldr	r2, [pc, #100]	; (80040bc <SystemInit+0xfc>)
 8004058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <SystemInit+0xec>)
 800405c:	2200      	movs	r2, #0
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <SystemInit+0xec>)
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <SystemInit+0xfc>)
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <SystemInit+0xec>)
 8004068:	2200      	movs	r2, #0
 800406a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <SystemInit+0xec>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <SystemInit+0xec>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004076:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <SystemInit+0xec>)
 800407a:	2200      	movs	r2, #0
 800407c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <SystemInit+0x100>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <SystemInit+0x104>)
 8004084:	4013      	ands	r3, r2
 8004086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408a:	d202      	bcs.n	8004092 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <SystemInit+0x108>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <SystemInit+0x10c>)
 8004094:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004098:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000ed00 	.word	0xe000ed00
 80040a8:	52002000 	.word	0x52002000
 80040ac:	58024400 	.word	0x58024400
 80040b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80040b4:	02020200 	.word	0x02020200
 80040b8:	01ff0000 	.word	0x01ff0000
 80040bc:	01010280 	.word	0x01010280
 80040c0:	5c001000 	.word	0x5c001000
 80040c4:	ffff0000 	.word	0xffff0000
 80040c8:	51008108 	.word	0x51008108
 80040cc:	52004000 	.word	0x52004000

080040d0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08e      	sub	sp, #56	; 0x38
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e4:	f107 031c 	add.w	r3, r7, #28
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040f0:	463b      	mov	r3, r7
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	615a      	str	r2, [r3, #20]
 8004100:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004102:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <MX_TIM2_Init+0xec>)
 8004104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 800410a:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <MX_TIM2_Init+0xec>)
 800410c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <MX_TIM2_Init+0xec>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10240;
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <MX_TIM2_Init+0xec>)
 800411a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800411e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <MX_TIM2_Init+0xec>)
 8004122:	2200      	movs	r2, #0
 8004124:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <MX_TIM2_Init+0xec>)
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800412c:	4823      	ldr	r0, [pc, #140]	; (80041bc <MX_TIM2_Init+0xec>)
 800412e:	f009 fe74 	bl	800de1a <HAL_TIM_Base_Init>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8004138:	f7ff fa64 	bl	8003604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800413c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004146:	4619      	mov	r1, r3
 8004148:	481c      	ldr	r0, [pc, #112]	; (80041bc <MX_TIM2_Init+0xec>)
 800414a:	f00a fbbb 	bl	800e8c4 <HAL_TIM_ConfigClockSource>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8004154:	f7ff fa56 	bl	8003604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004158:	4818      	ldr	r0, [pc, #96]	; (80041bc <MX_TIM2_Init+0xec>)
 800415a:	f009 ff2d 	bl	800dfb8 <HAL_TIM_PWM_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004164:	f7ff fa4e 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004170:	f107 031c 	add.w	r3, r7, #28
 8004174:	4619      	mov	r1, r3
 8004176:	4811      	ldr	r0, [pc, #68]	; (80041bc <MX_TIM2_Init+0xec>)
 8004178:	f00b f8f8 	bl	800f36c <HAL_TIMEx_MasterConfigSynchronization>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8004182:	f7ff fa3f 	bl	8003604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004186:	2360      	movs	r3, #96	; 0x60
 8004188:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004196:	463b      	mov	r3, r7
 8004198:	2200      	movs	r2, #0
 800419a:	4619      	mov	r1, r3
 800419c:	4807      	ldr	r0, [pc, #28]	; (80041bc <MX_TIM2_Init+0xec>)
 800419e:	f00a fa7d 	bl	800e69c <HAL_TIM_PWM_ConfigChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80041a8:	f7ff fa2c 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80041ac:	4803      	ldr	r0, [pc, #12]	; (80041bc <MX_TIM2_Init+0xec>)
 80041ae:	f000 f82d 	bl	800420c <HAL_TIM_MspPostInit>

}
 80041b2:	bf00      	nop
 80041b4:	3738      	adds	r7, #56	; 0x38
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	2000087c 	.word	0x2000087c

080041c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d116      	bne.n	8004200 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <HAL_TIM_Base_MspInit+0x48>)
 80041d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <HAL_TIM_Base_MspInit+0x48>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_TIM_Base_MspInit+0x48>)
 80041e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80041f0:	2200      	movs	r2, #0
 80041f2:	2105      	movs	r1, #5
 80041f4:	201c      	movs	r0, #28
 80041f6:	f003 f97f 	bl	80074f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041fa:	201c      	movs	r0, #28
 80041fc:	f003 f996 	bl	800752c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	58024400 	.word	0x58024400

0800420c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d11f      	bne.n	800426e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800422e:	4b12      	ldr	r3, [pc, #72]	; (8004278 <HAL_TIM_MspPostInit+0x6c>)
 8004230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_TIM_MspPostInit+0x6c>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_TIM_MspPostInit+0x6c>)
 8004240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800424c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	4619      	mov	r1, r3
 8004268:	4804      	ldr	r0, [pc, #16]	; (800427c <HAL_TIM_MspPostInit+0x70>)
 800426a:	f003 fb69 	bl	8007940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800426e:	bf00      	nop
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	58020000 	.word	0x58020000

08004280 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <MX_USART3_UART_Init+0x90>)
 8004286:	4a23      	ldr	r2, [pc, #140]	; (8004314 <MX_USART3_UART_Init+0x94>)
 8004288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <MX_USART3_UART_Init+0x90>)
 800428c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <MX_USART3_UART_Init+0x90>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <MX_USART3_UART_Init+0x90>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800429e:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042a4:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042a6:	220c      	movs	r2, #12
 80042a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042be:	2200      	movs	r2, #0
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042c8:	4811      	ldr	r0, [pc, #68]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042ca:	f00b f8fb 	bl	800f4c4 <HAL_UART_Init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80042d4:	f7ff f996 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042d8:	2100      	movs	r1, #0
 80042da:	480d      	ldr	r0, [pc, #52]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042dc:	f00c fa02 	bl	80106e4 <HAL_UARTEx_SetTxFifoThreshold>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80042e6:	f7ff f98d 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042ea:	2100      	movs	r1, #0
 80042ec:	4808      	ldr	r0, [pc, #32]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042ee:	f00c fa37 	bl	8010760 <HAL_UARTEx_SetRxFifoThreshold>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80042f8:	f7ff f984 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80042fc:	4804      	ldr	r0, [pc, #16]	; (8004310 <MX_USART3_UART_Init+0x90>)
 80042fe:	f00c f9b8 	bl	8010672 <HAL_UARTEx_DisableFifoMode>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004308:	f7ff f97c 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	200008c8 	.word	0x200008c8
 8004314:	40004800 	.word	0x40004800

08004318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b0b8      	sub	sp, #224	; 0xe0
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004330:	f107 0310 	add.w	r3, r7, #16
 8004334:	22bc      	movs	r2, #188	; 0xbc
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f01a fc23 	bl	801eb84 <memset>
  if(uartHandle->Instance==USART3)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <HAL_UART_MspInit+0xc0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d142      	bne.n	80043ce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004348:	2302      	movs	r3, #2
 800434a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004352:	f107 0310 	add.w	r3, r7, #16
 8004356:	4618      	mov	r0, r3
 8004358:	f005 f99a 	bl	8009690 <HAL_RCCEx_PeriphCLKConfig>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004362:	f7ff f94f 	bl	8003604 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_UART_MspInit+0xc4>)
 8004368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_UART_MspInit+0xc4>)
 800436e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004376:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_UART_MspInit+0xc4>)
 8004378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800437c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <HAL_UART_MspInit+0xc4>)
 8004386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438a:	4a14      	ldr	r2, [pc, #80]	; (80043dc <HAL_UART_MspInit+0xc4>)
 800438c:	f043 0308 	orr.w	r3, r3, #8
 8004390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_UART_MspInit+0xc4>)
 8004396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	2302      	movs	r3, #2
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043bc:	2307      	movs	r3, #7
 80043be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80043c6:	4619      	mov	r1, r3
 80043c8:	4805      	ldr	r0, [pc, #20]	; (80043e0 <HAL_UART_MspInit+0xc8>)
 80043ca:	f003 fab9 	bl	8007940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80043ce:	bf00      	nop
 80043d0:	37e0      	adds	r7, #224	; 0xe0
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40004800 	.word	0x40004800
 80043dc:	58024400 	.word	0x58024400
 80043e0:	58020c00 	.word	0x58020c00

080043e4 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fb0f 	bl	8004a10 <HAL_Delay>
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043fe:	b672      	cpsid	i
}
 8004400:	bf00      	nop
  __disable_irq();
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8004410:	b662      	cpsie	i
}
 8004412:	bf00      	nop
  __enable_irq();
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d16a      	bne.n	8004506 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8004430:	4b52      	ldr	r3, [pc, #328]	; (800457c <L6474_Board_GpioInit+0x15c>)
 8004432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004436:	4a51      	ldr	r2, [pc, #324]	; (800457c <L6474_Board_GpioInit+0x15c>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004440:	4b4e      	ldr	r3, [pc, #312]	; (800457c <L6474_Board_GpioInit+0x15c>)
 8004442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 800444e:	4b4b      	ldr	r3, [pc, #300]	; (800457c <L6474_Board_GpioInit+0x15c>)
 8004450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004454:	4a49      	ldr	r2, [pc, #292]	; (800457c <L6474_Board_GpioInit+0x15c>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800445e:	4b47      	ldr	r3, [pc, #284]	; (800457c <L6474_Board_GpioInit+0x15c>)
 8004460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 800446c:	4b43      	ldr	r3, [pc, #268]	; (800457c <L6474_Board_GpioInit+0x15c>)
 800446e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004472:	4a42      	ldr	r2, [pc, #264]	; (800457c <L6474_Board_GpioInit+0x15c>)
 8004474:	f043 0302 	orr.w	r3, r3, #2
 8004478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <L6474_Board_GpioInit+0x15c>)
 800447e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 800448a:	2310      	movs	r3, #16
 800448c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800448e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004494:	2301      	movs	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004498:	2301      	movs	r3, #1
 800449a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	4619      	mov	r1, r3
 80044a2:	4837      	ldr	r0, [pc, #220]	; (8004580 <L6474_Board_GpioInit+0x160>)
 80044a4:	f003 fa4c 	bl	8007940 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 80044a8:	2200      	movs	r2, #0
 80044aa:	2105      	movs	r1, #5
 80044ac:	200a      	movs	r0, #10
 80044ae:	f003 f823 	bl	80074f8 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 80044b2:	200a      	movs	r0, #10
 80044b4:	f003 f83a 	bl	800752c <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 80044b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044be:	2301      	movs	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80044c6:	2301      	movs	r3, #1
 80044c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 80044ca:	f107 0314 	add.w	r3, r7, #20
 80044ce:	4619      	mov	r1, r3
 80044d0:	482c      	ldr	r0, [pc, #176]	; (8004584 <L6474_Board_GpioInit+0x164>)
 80044d2:	f003 fa35 	bl	8007940 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80044d6:	2201      	movs	r2, #1
 80044d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044dc:	4829      	ldr	r0, [pc, #164]	; (8004584 <L6474_Board_GpioInit+0x164>)
 80044de:	f003 fbf7 	bl	8007cd0 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 80044e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e8:	2301      	movs	r3, #1
 80044ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80044f0:	2301      	movs	r3, #1
 80044f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	4619      	mov	r1, r3
 80044fa:	4823      	ldr	r0, [pc, #140]	; (8004588 <L6474_Board_GpioInit+0x168>)
 80044fc:	f003 fa20 	bl	8007940 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8004500:	2000      	movs	r0, #0
 8004502:	f000 f947 	bl	8004794 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d024      	beq.n	8004556 <L6474_Board_GpioInit+0x136>
 800450c:	2b02      	cmp	r3, #2
 800450e:	dc31      	bgt.n	8004574 <L6474_Board_GpioInit+0x154>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <L6474_Board_GpioInit+0xfa>
 8004514:	2b01      	cmp	r3, #1
 8004516:	d00f      	beq.n	8004538 <L6474_Board_GpioInit+0x118>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8004518:	e02c      	b.n	8004574 <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 800451a:	2308      	movs	r3, #8
 800451c:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004526:	2301      	movs	r3, #1
 8004528:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4619      	mov	r1, r3
 8004530:	4815      	ldr	r0, [pc, #84]	; (8004588 <L6474_Board_GpioInit+0x168>)
 8004532:	f003 fa05 	bl	8007940 <HAL_GPIO_Init>
      break;
 8004536:	e01d      	b.n	8004574 <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8004538:	2320      	movs	r3, #32
 800453a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453c:	2301      	movs	r3, #1
 800453e:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004544:	2301      	movs	r3, #1
 8004546:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	480d      	ldr	r0, [pc, #52]	; (8004584 <L6474_Board_GpioInit+0x164>)
 8004550:	f003 f9f6 	bl	8007940 <HAL_GPIO_Init>
      break;
 8004554:	e00e      	b.n	8004574 <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 8004556:	2310      	movs	r3, #16
 8004558:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800455a:	2301      	movs	r3, #1
 800455c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004562:	2301      	movs	r3, #1
 8004564:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	4619      	mov	r1, r3
 800456c:	4805      	ldr	r0, [pc, #20]	; (8004584 <L6474_Board_GpioInit+0x164>)
 800456e:	f003 f9e7 	bl	8007940 <HAL_GPIO_Init>
        break;
 8004572:	bf00      	nop
}
 8004574:	bf00      	nop
 8004576:	3728      	adds	r7, #40	; 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	58024400 	.word	0x58024400
 8004580:	58021c00 	.word	0x58021c00
 8004584:	58020400 	.word	0x58020400
 8004588:	58022000 	.word	0x58022000

0800458c <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004596:	f004 fe63 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 800459a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	029b      	lsls	r3, r3, #10
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80045b2:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	0852      	lsrs	r2, r2, #1
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 80045c2:	2100      	movs	r1, #0
 80045c4:	4803      	ldr	r0, [pc, #12]	; (80045d4 <L6474_Board_Pwm1SetFreq+0x48>)
 80045c6:	f009 fdef 	bl	800e1a8 <HAL_TIM_PWM_Start_IT>
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200009e0 	.word	0x200009e0

080045d8 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80045e2:	f004 fe3d 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 80045e6:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	029b      	lsls	r3, r3, #10
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <L6474_Board_Pwm2SetFreq+0x48>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80045fe:	4a08      	ldr	r2, [pc, #32]	; (8004620 <L6474_Board_Pwm2SetFreq+0x48>)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <L6474_Board_Pwm2SetFreq+0x48>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 800460e:	2104      	movs	r1, #4
 8004610:	4803      	ldr	r0, [pc, #12]	; (8004620 <L6474_Board_Pwm2SetFreq+0x48>)
 8004612:	f009 fdc9 	bl	800e1a8 <HAL_TIM_PWM_Start_IT>
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000a2c 	.word	0x20000a2c

08004624 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800462e:	f004 fe17 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 8004632:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	02db      	lsls	r3, r3, #11
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <L6474_Board_Pwm3SetFreq+0x48>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	62da      	str	r2, [r3, #44]	; 0x2c
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <L6474_Board_Pwm3SetFreq+0x48>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <L6474_Board_Pwm3SetFreq+0x48>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	0852      	lsrs	r2, r2, #1
 8004658:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 800465a:	2108      	movs	r1, #8
 800465c:	4803      	ldr	r0, [pc, #12]	; (800466c <L6474_Board_Pwm3SetFreq+0x48>)
 800465e:	f009 fda3 	bl	800e1a8 <HAL_TIM_PWM_Start_IT>
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000a78 	.word	0x20000a78

08004670 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	; 0x38
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d00a      	beq.n	8004696 <L6474_Board_PwmInit+0x26>
 8004680:	2b02      	cmp	r3, #2
 8004682:	d011      	beq.n	80046a8 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <L6474_Board_PwmInit+0x9c>)
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800468e:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8004690:	2300      	movs	r3, #0
 8004692:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8004694:	e010      	b.n	80046b8 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <L6474_Board_PwmInit+0xa0>)
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046a0:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 80046a2:	2304      	movs	r3, #4
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046a6:	e007      	b.n	80046b8 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <L6474_Board_PwmInit+0xa4>)
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <L6474_Board_PwmInit+0xa8>)
 80046b0:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 80046b2:	2308      	movs	r3, #8
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046b6:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80046be:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	2200      	movs	r2, #0
 80046c4:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c8:	2200      	movs	r2, #0
 80046ca:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 80046cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046ce:	f009 fc73 	bl	800dfb8 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046d2:	2360      	movs	r3, #96	; 0x60
 80046d4:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e8:	4619      	mov	r1, r3
 80046ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046ec:	f009 ffd6 	bl	800e69c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 80046f8:	f107 0308 	add.w	r3, r7, #8
 80046fc:	4619      	mov	r1, r3
 80046fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004700:	f00a fe34 	bl	800f36c <HAL_TIMEx_MasterConfigSynchronization>
}
 8004704:	bf00      	nop
 8004706:	3738      	adds	r7, #56	; 0x38
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	200009e0 	.word	0x200009e0
 8004710:	20000a2c 	.word	0x20000a2c
 8004714:	20000a78 	.word	0x20000a78
 8004718:	40000800 	.word	0x40000800

0800471c <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d010      	beq.n	800474e <L6474_Board_PwmStop+0x32>
 800472c:	2b02      	cmp	r3, #2
 800472e:	dc13      	bgt.n	8004758 <L6474_Board_PwmStop+0x3c>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <L6474_Board_PwmStop+0x1e>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d005      	beq.n	8004744 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8004738:	e00e      	b.n	8004758 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800473a:	2100      	movs	r1, #0
 800473c:	4809      	ldr	r0, [pc, #36]	; (8004764 <L6474_Board_PwmStop+0x48>)
 800473e:	f009 fc9d 	bl	800e07c <HAL_TIM_PWM_Stop>
      break;
 8004742:	e00a      	b.n	800475a <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8004744:	2104      	movs	r1, #4
 8004746:	4808      	ldr	r0, [pc, #32]	; (8004768 <L6474_Board_PwmStop+0x4c>)
 8004748:	f009 fc98 	bl	800e07c <HAL_TIM_PWM_Stop>
      break;
 800474c:	e005      	b.n	800475a <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 800474e:	2108      	movs	r1, #8
 8004750:	4806      	ldr	r0, [pc, #24]	; (800476c <L6474_Board_PwmStop+0x50>)
 8004752:	f009 fc93 	bl	800e07c <HAL_TIM_PWM_Stop>
      break;
 8004756:	e000      	b.n	800475a <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8004758:	bf00      	nop
  }
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	200009e0 	.word	0x200009e0
 8004768:	20000a2c 	.word	0x20000a2c
 800476c:	20000a78 	.word	0x20000a78

08004770 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_SET);
 800477a:	2201      	movs	r2, #1
 800477c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004780:	4803      	ldr	r0, [pc, #12]	; (8004790 <L6474_Board_ReleaseReset+0x20>)
 8004782:	f003 faa5 	bl	8007cd0 <HAL_GPIO_WritePin>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	58022000 	.word	0x58022000

08004794 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 800479e:	2200      	movs	r2, #0
 80047a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047a4:	4803      	ldr	r0, [pc, #12]	; (80047b4 <L6474_Board_Reset+0x20>)
 80047a6:	f003 fa93 	bl	8007cd0 <HAL_GPIO_WritePin>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	58022000 	.word	0x58022000

080047b8 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	460a      	mov	r2, r1
 80047c2:	71fb      	strb	r3, [r7, #7]
 80047c4:	4613      	mov	r3, r2
 80047c6:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d006      	beq.n	80047dc <L6474_Board_SetDirectionGpio+0x24>
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	dc19      	bgt.n	8004806 <L6474_Board_SetDirectionGpio+0x4e>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <L6474_Board_SetDirectionGpio+0x40>
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d007      	beq.n	80047ea <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 80047da:	e014      	b.n	8004806 <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 80047dc:	79bb      	ldrb	r3, [r7, #6]
 80047de:	461a      	mov	r2, r3
 80047e0:	2110      	movs	r1, #16
 80047e2:	480b      	ldr	r0, [pc, #44]	; (8004810 <L6474_Board_SetDirectionGpio+0x58>)
 80047e4:	f003 fa74 	bl	8007cd0 <HAL_GPIO_WritePin>
      break;
 80047e8:	e00d      	b.n	8004806 <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 80047ea:	79bb      	ldrb	r3, [r7, #6]
 80047ec:	461a      	mov	r2, r3
 80047ee:	2120      	movs	r1, #32
 80047f0:	4807      	ldr	r0, [pc, #28]	; (8004810 <L6474_Board_SetDirectionGpio+0x58>)
 80047f2:	f003 fa6d 	bl	8007cd0 <HAL_GPIO_WritePin>
      break;
 80047f6:	e006      	b.n	8004806 <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 80047f8:	79bb      	ldrb	r3, [r7, #6]
 80047fa:	461a      	mov	r2, r3
 80047fc:	2108      	movs	r1, #8
 80047fe:	4805      	ldr	r0, [pc, #20]	; (8004814 <L6474_Board_SetDirectionGpio+0x5c>)
 8004800:	f003 fa66 	bl	8007cd0 <HAL_GPIO_WritePin>
      break;
 8004804:	bf00      	nop
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	58020400 	.word	0x58020400
 8004814:	58022000 	.word	0x58022000

08004818 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800481e:	4b19      	ldr	r3, [pc, #100]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <L6474_Board_SpiInit+0x70>)
 8004822:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800482a:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800482c:	4b15      	ldr	r3, [pc, #84]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004838:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 800483c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004840:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004844:	2200      	movs	r2, #0
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 800484a:	2207      	movs	r2, #7
 800484c:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004850:	2207      	movs	r2, #7
 8004852:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004856:	2200      	movs	r2, #0
 8004858:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800485a:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 800485c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004860:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004864:	2200      	movs	r2, #0
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 800486a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800486e:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8004870:	4804      	ldr	r0, [pc, #16]	; (8004884 <L6474_Board_SpiInit+0x6c>)
 8004872:	f008 fdf7 	bl	800d464 <HAL_SPI_Init>
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 800487a:	79fb      	ldrb	r3, [r7, #7]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000958 	.word	0x20000958
 8004888:	40003800 	.word	0x40003800

0800488c <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 800489a:	2200      	movs	r2, #0
 800489c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048a0:	4816      	ldr	r0, [pc, #88]	; (80048fc <L6474_Board_SpiWriteBytes+0x70>)
 80048a2:	f003 fa15 	bl	8007cd0 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	e016      	b.n	80048da <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 80048ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2301      	movs	r3, #1
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	4811      	ldr	r0, [pc, #68]	; (8004900 <L6474_Board_SpiWriteBytes+0x74>)
 80048ba:	f008 fed9 	bl	800d670 <HAL_SPI_TransmitReceive>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3301      	adds	r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3e4      	bcc.n	80048ac <L6474_Board_SpiWriteBytes+0x20>
 80048e2:	e000      	b.n	80048e6 <L6474_Board_SpiWriteBytes+0x5a>
      break;
 80048e4:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80048e6:	2201      	movs	r2, #1
 80048e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ec:	4803      	ldr	r0, [pc, #12]	; (80048fc <L6474_Board_SpiWriteBytes+0x70>)
 80048ee:	f003 f9ef 	bl	8007cd0 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	58020400 	.word	0x58020400
 8004900:	20000958 	.word	0x20000958

08004904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800493c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004908:	f7ff fb5a 	bl	8003fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800490c:	480c      	ldr	r0, [pc, #48]	; (8004940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800490e:	490d      	ldr	r1, [pc, #52]	; (8004944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004910:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004914:	e002      	b.n	800491c <LoopCopyDataInit>

08004916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800491a:	3304      	adds	r3, #4

0800491c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800491c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800491e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004920:	d3f9      	bcc.n	8004916 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004924:	4c0a      	ldr	r4, [pc, #40]	; (8004950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004928:	e001      	b.n	800492e <LoopFillZerobss>

0800492a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800492a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800492c:	3204      	adds	r2, #4

0800492e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800492e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004930:	d3fb      	bcc.n	800492a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004932:	f01a f8e1 	bl	801eaf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004936:	f7fe faf9 	bl	8002f2c <main>
  bx  lr
 800493a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800493c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004944:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8004948:	0803b41c 	.word	0x0803b41c
  ldr r2, =_sbss
 800494c:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8004950:	20007110 	.word	0x20007110

08004954 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004954:	e7fe      	b.n	8004954 <ADC_IRQHandler>
	...

08004958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800495e:	2003      	movs	r0, #3
 8004960:	f002 fdbf 	bl	80074e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004964:	f004 fc7c 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_Init+0x68>)
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	4913      	ldr	r1, [pc, #76]	; (80049c4 <HAL_Init+0x6c>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_Init+0x68>)
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	4a0e      	ldr	r2, [pc, #56]	; (80049c4 <HAL_Init+0x6c>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
 8004998:	4a0b      	ldr	r2, [pc, #44]	; (80049c8 <HAL_Init+0x70>)
 800499a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800499c:	4a0b      	ldr	r2, [pc, #44]	; (80049cc <HAL_Init+0x74>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049a2:	2000      	movs	r0, #0
 80049a4:	f7ff f98a 	bl	8003cbc <HAL_InitTick>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e002      	b.n	80049b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80049b2:	f7ff f965 	bl	8003c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	58024400 	.word	0x58024400
 80049c4:	080220e8 	.word	0x080220e8
 80049c8:	20000004 	.word	0x20000004
 80049cc:	20000000 	.word	0x20000000

080049d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_IncTick+0x20>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_IncTick+0x24>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4413      	add	r3, r2
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <HAL_IncTick+0x24>)
 80049e2:	6013      	str	r3, [r2, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	2000000c 	.word	0x2000000c
 80049f4:	20000ac4 	.word	0x20000ac4

080049f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return uwTick;
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <HAL_GetTick+0x14>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000ac4 	.word	0x20000ac4

08004a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a18:	f7ff ffee 	bl	80049f8 <HAL_GetTick>
 8004a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d005      	beq.n	8004a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_Delay+0x44>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a36:	bf00      	nop
 8004a38:	f7ff ffde 	bl	80049f8 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d8f7      	bhi.n	8004a38 <HAL_Delay+0x28>
  {
  }
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <HAL_GetREVID+0x14>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0c1b      	lsrs	r3, r3, #16
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	5c001000 	.word	0x5c001000

08004a70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	609a      	str	r2, [r3, #8]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3360      	adds	r3, #96	; 0x60
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	431a      	orrs	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	611a      	str	r2, [r3, #16]
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3360      	adds	r3, #96	; 0x60
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	601a      	str	r2, [r3, #0]
  }
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3330      	adds	r3, #48	; 0x30
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	4413      	add	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	211f      	movs	r1, #31
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	401a      	ands	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	f003 011f 	and.w	r1, r3, #31
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	431a      	orrs	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3314      	adds	r3, #20
 8004c34:	461a      	mov	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	0e5b      	lsrs	r3, r3, #25
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	4413      	add	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	0d1b      	lsrs	r3, r3, #20
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2107      	movs	r1, #7
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	401a      	ands	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	0d1b      	lsrs	r3, r3, #20
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	fa01 f303 	lsl.w	r3, r1, r3
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f003 0318 	and.w	r3, r3, #24
 8004c9e:	4908      	ldr	r1, [pc, #32]	; (8004cc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ca0:	40d9      	lsrs	r1, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	400b      	ands	r3, r1
 8004ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	000fffff 	.word	0x000fffff

08004cc4 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	0d1b      	lsrs	r3, r3, #20
 8004cda:	f003 0103 	and.w	r1, r3, #3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f003 0201 	and.w	r2, r3, #1
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4403      	add	r3, r0
 8004cf2:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	401a      	ands	r2, r3
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	400b      	ands	r3, r1
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	7dcfffff 	.word	0x7dcfffff

08004d20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6093      	str	r3, [r2, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	5fffffc0 	.word	0x5fffffc0

08004d7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d90:	d101      	bne.n	8004d96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	6fffffc0 	.word	0x6fffffc0

08004dcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de0:	d101      	bne.n	8004de6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <LL_ADC_Enable+0x24>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	f043 0201 	orr.w	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	7fffffc0 	.word	0x7fffffc0

08004e1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <LL_ADC_Disable+0x24>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	f043 0202 	orr.w	r2, r3, #2
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	7fffffc0 	.word	0x7fffffc0

08004e44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <LL_ADC_IsEnabled+0x18>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <LL_ADC_IsEnabled+0x1a>
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d101      	bne.n	8004e82 <LL_ADC_IsDisableOngoing+0x18>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <LL_ADC_IsDisableOngoing+0x1a>
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <LL_ADC_REG_StartConversion+0x24>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	f043 0204 	orr.w	r2, r3, #4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	7fffffc0 	.word	0x7fffffc0

08004eb8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <LL_ADC_REG_StopConversion+0x24>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	f043 0210 	orr.w	r2, r3, #16
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	7fffffc0 	.word	0x7fffffc0

08004ee0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d101      	bne.n	8004ef8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <LL_ADC_INJ_StopConversion+0x24>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	7fffffc0 	.word	0x7fffffc0

08004f30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d101      	bne.n	8004f48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2280      	movs	r2, #128	; 0x80
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	605a      	str	r2, [r3, #4]
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	605a      	str	r2, [r3, #4]
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	605a      	str	r2, [r3, #4]
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	605a      	str	r2, [r3, #4]
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005074:	2300      	movs	r3, #0
 8005076:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e18f      	b.n	80053a2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7fb fc05 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fe67 	bl	8004d7c <LL_ADC_IsDeepPowerDownEnabled>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d004      	beq.n	80050be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fe4d 	bl	8004d58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fe82 	bl	8004dcc <LL_ADC_IsInternalRegulatorEnabled>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d114      	bne.n	80050f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fe66 	bl	8004da4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050d8:	4b87      	ldr	r3, [pc, #540]	; (80052f8 <HAL_ADC_Init+0x290>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	4a87      	ldr	r2, [pc, #540]	; (80052fc <HAL_ADC_Init+0x294>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	099b      	lsrs	r3, r3, #6
 80050e6:	3301      	adds	r3, #1
 80050e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050ea:	e002      	b.n	80050f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f9      	bne.n	80050ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fe65 	bl	8004dcc <LL_ADC_IsInternalRegulatorEnabled>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f043 0210 	orr.w	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fed9 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 800512e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8129 	bne.w	8005390 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 8125 	bne.w	8005390 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800514e:	f043 0202 	orr.w	r2, r3, #2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fe72 	bl	8004e44 <LL_ADC_IsEnabled>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d136      	bne.n	80051d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a65      	ldr	r2, [pc, #404]	; (8005300 <HAL_ADC_Init+0x298>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_ADC_Init+0x112>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a63      	ldr	r2, [pc, #396]	; (8005304 <HAL_ADC_Init+0x29c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10e      	bne.n	8005198 <HAL_ADC_Init+0x130>
 800517a:	4861      	ldr	r0, [pc, #388]	; (8005300 <HAL_ADC_Init+0x298>)
 800517c:	f7ff fe62 	bl	8004e44 <LL_ADC_IsEnabled>
 8005180:	4604      	mov	r4, r0
 8005182:	4860      	ldr	r0, [pc, #384]	; (8005304 <HAL_ADC_Init+0x29c>)
 8005184:	f7ff fe5e 	bl	8004e44 <LL_ADC_IsEnabled>
 8005188:	4603      	mov	r3, r0
 800518a:	4323      	orrs	r3, r4
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e008      	b.n	80051aa <HAL_ADC_Init+0x142>
 8005198:	485b      	ldr	r0, [pc, #364]	; (8005308 <HAL_ADC_Init+0x2a0>)
 800519a:	f7ff fe53 	bl	8004e44 <LL_ADC_IsEnabled>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d012      	beq.n	80051d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a53      	ldr	r2, [pc, #332]	; (8005300 <HAL_ADC_Init+0x298>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_ADC_Init+0x15a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a51      	ldr	r2, [pc, #324]	; (8005304 <HAL_ADC_Init+0x29c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_ADC_Init+0x15e>
 80051c2:	4a52      	ldr	r2, [pc, #328]	; (800530c <HAL_ADC_Init+0x2a4>)
 80051c4:	e000      	b.n	80051c8 <HAL_ADC_Init+0x160>
 80051c6:	4a52      	ldr	r2, [pc, #328]	; (8005310 <HAL_ADC_Init+0x2a8>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7ff fc4e 	bl	8004a70 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80051d4:	f7ff fc40 	bl	8004a58 <HAL_GetREVID>
 80051d8:	4603      	mov	r3, r0
 80051da:	f241 0203 	movw	r2, #4099	; 0x1003
 80051de:	4293      	cmp	r3, r2
 80051e0:	d914      	bls.n	800520c <HAL_ADC_Init+0x1a4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d110      	bne.n	800520c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7d5b      	ldrb	r3, [r3, #21]
 80051ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80051fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	7f1b      	ldrb	r3, [r3, #28]
 8005200:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005202:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005204:	f043 030c 	orr.w	r3, r3, #12
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e00d      	b.n	8005228 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	7d5b      	ldrb	r3, [r3, #21]
 8005210:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005216:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800521c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	7f1b      	ldrb	r3, [r3, #28]
 8005222:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	7f1b      	ldrb	r3, [r3, #28]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d106      	bne.n	800523e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	3b01      	subs	r3, #1
 8005236:	045b      	lsls	r3, r3, #17
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	4b2c      	ldr	r3, [pc, #176]	; (8005314 <HAL_ADC_Init+0x2ac>)
 8005262:	4013      	ands	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	430b      	orrs	r3, r1
 800526c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fe34 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 8005278:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fe56 	bl	8004f30 <LL_ADC_INJ_IsConversionOngoing>
 8005284:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d15f      	bne.n	800534c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d15c      	bne.n	800534c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	7d1b      	ldrb	r3, [r3, #20]
 8005296:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <HAL_ADC_Init+0x2b0>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	69b9      	ldr	r1, [r7, #24]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d130      	bne.n	8005320 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	4b14      	ldr	r3, [pc, #80]	; (800531c <HAL_ADC_Init+0x2b4>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052d2:	3a01      	subs	r2, #1
 80052d4:	0411      	lsls	r1, r2, #16
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052da:	4311      	orrs	r1, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80052e0:	4311      	orrs	r1, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052e6:	430a      	orrs	r2, r1
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	611a      	str	r2, [r3, #16]
 80052f4:	e01c      	b.n	8005330 <HAL_ADC_Init+0x2c8>
 80052f6:	bf00      	nop
 80052f8:	20000000 	.word	0x20000000
 80052fc:	053e2d63 	.word	0x053e2d63
 8005300:	40022000 	.word	0x40022000
 8005304:	40022100 	.word	0x40022100
 8005308:	58026000 	.word	0x58026000
 800530c:	40022300 	.word	0x40022300
 8005310:	58026300 	.word	0x58026300
 8005314:	fff0c003 	.word	0xfff0c003
 8005318:	ffffbffc 	.word	0xffffbffc
 800531c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f001 fdde 	bl	8006f08 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10c      	bne.n	800536e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f023 010f 	bic.w	r1, r3, #15
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	1e5a      	subs	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
 800536c:	e007      	b.n	800537e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 020f 	bic.w	r2, r2, #15
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	f043 0201 	orr.w	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
 800538e:	e007      	b.n	80053a0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0210 	orr.w	r2, r3, #16
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80053a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3724      	adds	r7, #36	; 0x24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd90      	pop	{r4, r7, pc}
 80053aa:	bf00      	nop

080053ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5c      	ldr	r2, [pc, #368]	; (800552c <HAL_ADC_Start+0x180>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_ADC_Start+0x1c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a5b      	ldr	r2, [pc, #364]	; (8005530 <HAL_ADC_Start+0x184>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <HAL_ADC_Start+0x20>
 80053c8:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <HAL_ADC_Start+0x188>)
 80053ca:	e000      	b.n	80053ce <HAL_ADC_Start+0x22>
 80053cc:	4b5a      	ldr	r3, [pc, #360]	; (8005538 <HAL_ADC_Start+0x18c>)
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fca6 	bl	8004d20 <LL_ADC_GetMultimode>
 80053d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fd80 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 809a 	bne.w	800551c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_ADC_Start+0x4a>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e095      	b.n	8005522 <HAL_ADC_Start+0x176>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 fc98 	bl	8006d34 <ADC_Enable>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 8081 	bne.w	8005512 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005414:	4b49      	ldr	r3, [pc, #292]	; (800553c <HAL_ADC_Start+0x190>)
 8005416:	4013      	ands	r3, r2
 8005418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a42      	ldr	r2, [pc, #264]	; (8005530 <HAL_ADC_Start+0x184>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d002      	beq.n	8005430 <HAL_ADC_Start+0x84>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	e000      	b.n	8005432 <HAL_ADC_Start+0x86>
 8005430:	4b3e      	ldr	r3, [pc, #248]	; (800552c <HAL_ADC_Start+0x180>)
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	4293      	cmp	r3, r2
 8005438:	d002      	beq.n	8005440 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d106      	bne.n	8005468 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	f023 0206 	bic.w	r2, r3, #6
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	659a      	str	r2, [r3, #88]	; 0x58
 8005466:	e002      	b.n	800546e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	221c      	movs	r2, #28
 8005474:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2b      	ldr	r2, [pc, #172]	; (8005530 <HAL_ADC_Start+0x184>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d002      	beq.n	800548e <HAL_ADC_Start+0xe2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	e000      	b.n	8005490 <HAL_ADC_Start+0xe4>
 800548e:	4b27      	ldr	r3, [pc, #156]	; (800552c <HAL_ADC_Start+0x180>)
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	4293      	cmp	r3, r2
 8005496:	d008      	beq.n	80054aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b05      	cmp	r3, #5
 80054a2:	d002      	beq.n	80054aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d114      	bne.n	80054d4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fcdf 	bl	8004e90 <LL_ADC_REG_StartConversion>
 80054d2:	e025      	b.n	8005520 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a12      	ldr	r2, [pc, #72]	; (8005530 <HAL_ADC_Start+0x184>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d002      	beq.n	80054f0 <HAL_ADC_Start+0x144>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	e000      	b.n	80054f2 <HAL_ADC_Start+0x146>
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <HAL_ADC_Start+0x180>)
 80054f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00f      	beq.n	8005520 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
 8005510:	e006      	b.n	8005520 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800551a:	e001      	b.n	8005520 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800551c:	2302      	movs	r3, #2
 800551e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40022000 	.word	0x40022000
 8005530:	40022100 	.word	0x40022100
 8005534:	40022300 	.word	0x40022300
 8005538:	58026300 	.word	0x58026300
 800553c:	fffff0fe 	.word	0xfffff0fe

08005540 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a72      	ldr	r2, [pc, #456]	; (8005718 <HAL_ADC_PollForConversion+0x1d8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_ADC_PollForConversion+0x1e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a70      	ldr	r2, [pc, #448]	; (800571c <HAL_ADC_PollForConversion+0x1dc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d101      	bne.n	8005562 <HAL_ADC_PollForConversion+0x22>
 800555e:	4b70      	ldr	r3, [pc, #448]	; (8005720 <HAL_ADC_PollForConversion+0x1e0>)
 8005560:	e000      	b.n	8005564 <HAL_ADC_PollForConversion+0x24>
 8005562:	4b70      	ldr	r3, [pc, #448]	; (8005724 <HAL_ADC_PollForConversion+0x1e4>)
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff fbdb 	bl	8004d20 <LL_ADC_GetMultimode>
 800556a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d102      	bne.n	800557a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005574:	2308      	movs	r3, #8
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	e037      	b.n	80055ea <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b05      	cmp	r3, #5
 8005584:	d002      	beq.n	800558c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b09      	cmp	r3, #9
 800558a:	d111      	bne.n	80055b0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e0b1      	b.n	800570e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80055aa:	2304      	movs	r3, #4
 80055ac:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80055ae:	e01c      	b.n	80055ea <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a58      	ldr	r2, [pc, #352]	; (8005718 <HAL_ADC_PollForConversion+0x1d8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <HAL_ADC_PollForConversion+0x84>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a57      	ldr	r2, [pc, #348]	; (800571c <HAL_ADC_PollForConversion+0x1dc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <HAL_ADC_PollForConversion+0x88>
 80055c4:	4b56      	ldr	r3, [pc, #344]	; (8005720 <HAL_ADC_PollForConversion+0x1e0>)
 80055c6:	e000      	b.n	80055ca <HAL_ADC_PollForConversion+0x8a>
 80055c8:	4b56      	ldr	r3, [pc, #344]	; (8005724 <HAL_ADC_PollForConversion+0x1e4>)
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fbb6 	bl	8004d3c <LL_ADC_GetMultiDMATransfer>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e093      	b.n	800570e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80055e6:	2304      	movs	r3, #4
 80055e8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80055ea:	f7ff fa05 	bl	80049f8 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80055f0:	e021      	b.n	8005636 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d01d      	beq.n	8005636 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80055fa:	f7ff f9fd 	bl	80049f8 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <HAL_ADC_PollForConversion+0xd0>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d112      	bne.n	8005636 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	f043 0204 	orr.w	r2, r3, #4
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e06b      	b.n	800570e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0d6      	beq.n	80055f2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fa93 	bl	8004b80 <LL_ADC_REG_IsTriggerSourceSWStart>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01c      	beq.n	800569a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7d5b      	ldrb	r3, [r3, #21]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d118      	bne.n	800569a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b08      	cmp	r3, #8
 8005674:	d111      	bne.n	800569a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f043 0201 	orr.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1f      	ldr	r2, [pc, #124]	; (800571c <HAL_ADC_PollForConversion+0x1dc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d002      	beq.n	80056aa <HAL_ADC_PollForConversion+0x16a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	e000      	b.n	80056ac <HAL_ADC_PollForConversion+0x16c>
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <HAL_ADC_PollForConversion+0x1d8>)
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d008      	beq.n	80056c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d002      	beq.n	80056c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b09      	cmp	r3, #9
 80056c4:	d104      	bne.n	80056d0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e00c      	b.n	80056ea <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a11      	ldr	r2, [pc, #68]	; (800571c <HAL_ADC_PollForConversion+0x1dc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d002      	beq.n	80056e0 <HAL_ADC_PollForConversion+0x1a0>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	e000      	b.n	80056e2 <HAL_ADC_PollForConversion+0x1a2>
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <HAL_ADC_PollForConversion+0x1d8>)
 80056e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d104      	bne.n	80056fa <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2208      	movs	r2, #8
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e008      	b.n	800570c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	220c      	movs	r2, #12
 800570a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40022000 	.word	0x40022000
 800571c:	40022100 	.word	0x40022100
 8005720:	40022300 	.word	0x40022300
 8005724:	58026300 	.word	0x58026300

08005728 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a90      	ldr	r2, [pc, #576]	; (8005978 <HAL_ADC_Start_IT+0x250>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <HAL_ADC_Start_IT+0x1c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a8f      	ldr	r2, [pc, #572]	; (800597c <HAL_ADC_Start_IT+0x254>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d101      	bne.n	8005748 <HAL_ADC_Start_IT+0x20>
 8005744:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <HAL_ADC_Start_IT+0x258>)
 8005746:	e000      	b.n	800574a <HAL_ADC_Start_IT+0x22>
 8005748:	4b8e      	ldr	r3, [pc, #568]	; (8005984 <HAL_ADC_Start_IT+0x25c>)
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff fae8 	bl	8004d20 <LL_ADC_GetMultimode>
 8005750:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fbc2 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8119 	bne.w	8005996 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_ADC_Start_IT+0x4a>
 800576e:	2302      	movs	r3, #2
 8005770:	e116      	b.n	80059a0 <HAL_ADC_Start_IT+0x278>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fada 	bl	8006d34 <ADC_Enable>
 8005780:	4603      	mov	r3, r0
 8005782:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 8100 	bne.w	800598c <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005790:	4b7d      	ldr	r3, [pc, #500]	; (8005988 <HAL_ADC_Start_IT+0x260>)
 8005792:	4013      	ands	r3, r2
 8005794:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a76      	ldr	r2, [pc, #472]	; (800597c <HAL_ADC_Start_IT+0x254>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d002      	beq.n	80057ac <HAL_ADC_Start_IT+0x84>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	e000      	b.n	80057ae <HAL_ADC_Start_IT+0x86>
 80057ac:	4b72      	ldr	r3, [pc, #456]	; (8005978 <HAL_ADC_Start_IT+0x250>)
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d002      	beq.n	80057bc <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f023 0206 	bic.w	r2, r3, #6
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	659a      	str	r2, [r3, #88]	; 0x58
 80057e0:	e002      	b.n	80057e8 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	221c      	movs	r2, #28
 80057ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 021c 	bic.w	r2, r2, #28
 8005806:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b08      	cmp	r3, #8
 800580e:	d108      	bne.n	8005822 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0208 	orr.w	r2, r2, #8
 800581e:	605a      	str	r2, [r3, #4]
          break;
 8005820:	e008      	b.n	8005834 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0204 	orr.w	r2, r2, #4
 8005830:	605a      	str	r2, [r3, #4]
          break;
 8005832:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	2b00      	cmp	r3, #0
 800583a:	d107      	bne.n	800584c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0210 	orr.w	r2, r2, #16
 800584a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a4a      	ldr	r2, [pc, #296]	; (800597c <HAL_ADC_Start_IT+0x254>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d002      	beq.n	800585c <HAL_ADC_Start_IT+0x134>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	e000      	b.n	800585e <HAL_ADC_Start_IT+0x136>
 800585c:	4b46      	ldr	r3, [pc, #280]	; (8005978 <HAL_ADC_Start_IT+0x250>)
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	4293      	cmp	r3, r2
 8005864:	d008      	beq.n	8005878 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b05      	cmp	r3, #5
 8005870:	d002      	beq.n	8005878 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b09      	cmp	r3, #9
 8005876:	d13b      	bne.n	80058f0 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02d      	beq.n	80058e2 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800588e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b08      	cmp	r3, #8
 800589c:	d110      	bne.n	80058c0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0220 	bic.w	r2, r2, #32
 80058ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058bc:	605a      	str	r2, [r3, #4]
              break;
 80058be:	e011      	b.n	80058e4 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0220 	orr.w	r2, r2, #32
 80058de:	605a      	str	r2, [r3, #4]
              break;
 80058e0:	e000      	b.n	80058e4 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80058e2:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fad1 	bl	8004e90 <LL_ADC_REG_StartConversion>
 80058ee:	e056      	b.n	800599e <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1e      	ldr	r2, [pc, #120]	; (800597c <HAL_ADC_Start_IT+0x254>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d002      	beq.n	800590c <HAL_ADC_Start_IT+0x1e4>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	e000      	b.n	800590e <HAL_ADC_Start_IT+0x1e6>
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <HAL_ADC_Start_IT+0x250>)
 800590e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d03f      	beq.n	800599c <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005924:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d110      	bne.n	8005956 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0220 	bic.w	r2, r2, #32
 8005942:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005952:	605a      	str	r2, [r3, #4]
              break;
 8005954:	e023      	b.n	800599e <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005964:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0220 	orr.w	r2, r2, #32
 8005974:	605a      	str	r2, [r3, #4]
              break;
 8005976:	e012      	b.n	800599e <HAL_ADC_Start_IT+0x276>
 8005978:	40022000 	.word	0x40022000
 800597c:	40022100 	.word	0x40022100
 8005980:	40022300 	.word	0x40022300
 8005984:	58026300 	.word	0x58026300
 8005988:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005994:	e003      	b.n	800599e <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005996:	2302      	movs	r3, #2
 8005998:	75fb      	strb	r3, [r7, #23]
 800599a:	e000      	b.n	800599e <HAL_ADC_Start_IT+0x276>
        }
 800599c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_ADC_Stop_IT+0x16>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e029      	b.n	8005a12 <HAL_ADC_Stop_IT+0x6a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80059c6:	2103      	movs	r1, #3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f8f7 	bl	8006bbc <ADC_ConversionStop>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d117      	bne.n	8005a08 <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 021c 	bic.w	r2, r2, #28
 80059e6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fa2d 	bl	8006e48 <ADC_Disable>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <HAL_ADC_Stop_IT+0x74>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	f043 0201 	orr.w	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	ffffeefe 	.word	0xffffeefe

08005a20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005a44:	2300      	movs	r3, #0
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a87      	ldr	r2, [pc, #540]	; (8005c7c <HAL_ADC_IRQHandler+0x240>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_ADC_IRQHandler+0x30>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a86      	ldr	r2, [pc, #536]	; (8005c80 <HAL_ADC_IRQHandler+0x244>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_IRQHandler+0x34>
 8005a6c:	4b85      	ldr	r3, [pc, #532]	; (8005c84 <HAL_ADC_IRQHandler+0x248>)
 8005a6e:	e000      	b.n	8005a72 <HAL_ADC_IRQHandler+0x36>
 8005a70:	4b85      	ldr	r3, [pc, #532]	; (8005c88 <HAL_ADC_IRQHandler+0x24c>)
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff f954 	bl	8004d20 <LL_ADC_GetMultimode>
 8005a78:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d017      	beq.n	8005ab4 <HAL_ADC_IRQHandler+0x78>
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d012      	beq.n	8005ab4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 fb86 	bl	80071b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <HAL_ADC_IRQHandler+0x8c>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8083 	beq.w	8005bda <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d07d      	beq.n	8005bda <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d105      	bne.n	8005af6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff f840 	bl	8004b80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d062      	beq.n	8005bcc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5d      	ldr	r2, [pc, #372]	; (8005c80 <HAL_ADC_IRQHandler+0x244>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d002      	beq.n	8005b16 <HAL_ADC_IRQHandler+0xda>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	e000      	b.n	8005b18 <HAL_ADC_IRQHandler+0xdc>
 8005b16:	4b59      	ldr	r3, [pc, #356]	; (8005c7c <HAL_ADC_IRQHandler+0x240>)
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d008      	beq.n	8005b32 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d002      	beq.n	8005b32 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	d104      	bne.n	8005b3c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	e00c      	b.n	8005b56 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a4f      	ldr	r2, [pc, #316]	; (8005c80 <HAL_ADC_IRQHandler+0x244>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d002      	beq.n	8005b4c <HAL_ADC_IRQHandler+0x110>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	e000      	b.n	8005b4e <HAL_ADC_IRQHandler+0x112>
 8005b4c:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <HAL_ADC_IRQHandler+0x240>)
 8005b4e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d135      	bne.n	8005bcc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d12e      	bne.n	8005bcc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff f9b4 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11a      	bne.n	8005bb4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 020c 	bic.w	r2, r2, #12
 8005b8c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d112      	bne.n	8005bcc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f043 0201 	orr.w	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8005bb2:	e00b      	b.n	8005bcc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	f043 0210 	orr.w	r2, r3, #16
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	f043 0201 	orr.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f96f 	bl	8005eb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	220c      	movs	r2, #12
 8005bd8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <HAL_ADC_IRQHandler+0x1b2>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80a0 	beq.w	8005d3a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 809a 	beq.w	8005d3a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe ffeb 	bl	8004bfe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005c28:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe ffa6 	bl	8004b80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c34:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <HAL_ADC_IRQHandler+0x244>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d002      	beq.n	8005c46 <HAL_ADC_IRQHandler+0x20a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	e000      	b.n	8005c48 <HAL_ADC_IRQHandler+0x20c>
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <HAL_ADC_IRQHandler+0x240>)
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d008      	beq.n	8005c62 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b06      	cmp	r3, #6
 8005c5a:	d002      	beq.n	8005c62 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b07      	cmp	r3, #7
 8005c60:	d104      	bne.n	8005c6c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	e014      	b.n	8005c96 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <HAL_ADC_IRQHandler+0x244>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00a      	beq.n	8005c8c <HAL_ADC_IRQHandler+0x250>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	e008      	b.n	8005c8e <HAL_ADC_IRQHandler+0x252>
 8005c7c:	40022000 	.word	0x40022000
 8005c80:	40022100 	.word	0x40022100
 8005c84:	40022300 	.word	0x40022300
 8005c88:	58026300 	.word	0x58026300
 8005c8c:	4b84      	ldr	r3, [pc, #528]	; (8005ea0 <HAL_ADC_IRQHandler+0x464>)
 8005c8e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d047      	beq.n	8005d2c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <HAL_ADC_IRQHandler+0x27a>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d03f      	beq.n	8005d2c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d13a      	bne.n	8005d2c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d133      	bne.n	8005d2c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d12e      	bne.n	8005d2c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff f92c 	bl	8004f30 <LL_ADC_INJ_IsConversionOngoing>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11a      	bne.n	8005d14 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d112      	bne.n	8005d2c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54
 8005d12:	e00b      	b.n	8005d2c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d18:	f043 0210 	orr.w	r2, r3, #16
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	f043 0201 	orr.w	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 fa1b 	bl	8007168 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2260      	movs	r2, #96	; 0x60
 8005d38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d011      	beq.n	8005d68 <HAL_ADC_IRQHandler+0x32c>
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fd fac0 	bl	80032e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d012      	beq.n	8005d98 <HAL_ADC_IRQHandler+0x35c>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00d      	beq.n	8005d98 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fa01 	bl	8007190 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d012      	beq.n	8005dc8 <HAL_ADC_IRQHandler+0x38c>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 f9f3 	bl	80071a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d043      	beq.n	8005e5a <HAL_ADC_IRQHandler+0x41e>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d03e      	beq.n	8005e5a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005de4:	2301      	movs	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
 8005de8:	e021      	b.n	8005e2e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d015      	beq.n	8005e1c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2a      	ldr	r2, [pc, #168]	; (8005ea0 <HAL_ADC_IRQHandler+0x464>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_ADC_IRQHandler+0x3c8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <HAL_ADC_IRQHandler+0x468>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_ADC_IRQHandler+0x3cc>
 8005e04:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <HAL_ADC_IRQHandler+0x46c>)
 8005e06:	e000      	b.n	8005e0a <HAL_ADC_IRQHandler+0x3ce>
 8005e08:	4b28      	ldr	r3, [pc, #160]	; (8005eac <HAL_ADC_IRQHandler+0x470>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe ff96 	bl	8004d3c <LL_ADC_GetMultiDMATransfer>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005e16:	2301      	movs	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	e008      	b.n	8005e2e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10e      	bne.n	8005e52 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	f043 0202 	orr.w	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f839 	bl	8005ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2210      	movs	r2, #16
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d018      	beq.n	8005e96 <HAL_ADC_IRQHandler+0x45a>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d013      	beq.n	8005e96 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	f043 0208 	orr.w	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e8e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 f973 	bl	800717c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005e96:	bf00      	nop
 8005e98:	3728      	adds	r7, #40	; 0x28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40022000 	.word	0x40022000
 8005ea4:	40022100 	.word	0x40022100
 8005ea8:	40022300 	.word	0x40022300
 8005eac:	58026300 	.word	0x58026300

08005eb0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b0a1      	sub	sp, #132	; 0x84
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4a9d      	ldr	r2, [pc, #628]	; (8006168 <HAL_ADC_ConfigChannel+0x290>)
 8005ef2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x2a>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e321      	b.n	8006546 <HAL_ADC_ConfigChannel+0x66e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe ffe6 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 8306 	bne.w	8006528 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <HAL_ADC_ConfigChannel+0x62>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	0e9b      	lsrs	r3, r3, #26
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2201      	movs	r2, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	e016      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x90>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f4a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005f52:	2320      	movs	r3, #32
 8005f54:	e003      	b.n	8005f5e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f58:	fab3 f383 	clz	r3, r3
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2201      	movs	r2, #1
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	69d1      	ldr	r1, [r2, #28]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	430b      	orrs	r3, r1
 8005f74:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f7fe fe0f 	bl	8004ba6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe ffa7 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 8005f92:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe ffc9 	bl	8004f30 <LL_ADC_INJ_IsConversionOngoing>
 8005f9e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 80b3 	bne.w	800610e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 80af 	bne.w	800610e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f7fe fe31 	bl	8004c24 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005fc2:	4b6a      	ldr	r3, [pc, #424]	; (800616c <HAL_ADC_ConfigChannel+0x294>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fce:	d10b      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x110>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	e01d      	b.n	8006024 <HAL_ADC_ConfigChannel+0x14c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <HAL_ADC_ConfigChannel+0x136>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	089b      	lsrs	r3, r3, #2
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	e00a      	b.n	8006024 <HAL_ADC_ConfigChannel+0x14c>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	089b      	lsrs	r3, r3, #2
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b04      	cmp	r3, #4
 800602c:	d027      	beq.n	800607e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6919      	ldr	r1, [r3, #16]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800603c:	f7fe fd4c 	bl	8004ad8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	6919      	ldr	r1, [r3, #16]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	7e5b      	ldrb	r3, [r3, #25]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d102      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x17e>
 8006050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006054:	e000      	b.n	8006058 <HAL_ADC_ConfigChannel+0x180>
 8006056:	2300      	movs	r3, #0
 8006058:	461a      	mov	r2, r3
 800605a:	f7fe fd76 	bl	8004b4a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6919      	ldr	r1, [r3, #16]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	7e1b      	ldrb	r3, [r3, #24]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d102      	bne.n	8006074 <HAL_ADC_ConfigChannel+0x19c>
 800606e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006072:	e000      	b.n	8006076 <HAL_ADC_ConfigChannel+0x19e>
 8006074:	2300      	movs	r3, #0
 8006076:	461a      	mov	r2, r3
 8006078:	f7fe fd4e 	bl	8004b18 <LL_ADC_SetDataRightShift>
 800607c:	e047      	b.n	800610e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	069b      	lsls	r3, r3, #26
 800608e:	429a      	cmp	r2, r3
 8006090:	d107      	bne.n	80060a2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	069b      	lsls	r3, r3, #26
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d107      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060c4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	069b      	lsls	r3, r3, #26
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d107      	bne.n	80060ea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060e8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	069b      	lsls	r3, r3, #26
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d107      	bne.n	800610e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800610c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fe96 	bl	8004e44 <LL_ADC_IsEnabled>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	f040 820d 	bne.w	800653a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	6819      	ldr	r1, [r3, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	461a      	mov	r2, r3
 800612e:	f7fe fda5 	bl	8004c7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4a0c      	ldr	r2, [pc, #48]	; (8006168 <HAL_ADC_ConfigChannel+0x290>)
 8006138:	4293      	cmp	r3, r2
 800613a:	f040 8133 	bne.w	80063a4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800614a:	2b00      	cmp	r3, #0
 800614c:	d110      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x298>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	0e9b      	lsrs	r3, r3, #26
 8006154:	3301      	adds	r3, #1
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	2b09      	cmp	r3, #9
 800615c:	bf94      	ite	ls
 800615e:	2301      	movls	r3, #1
 8006160:	2300      	movhi	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	e01e      	b.n	80061a4 <HAL_ADC_ConfigChannel+0x2cc>
 8006166:	bf00      	nop
 8006168:	47ff0000 	.word	0x47ff0000
 800616c:	5c001000 	.word	0x5c001000
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800617e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006180:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006188:	2320      	movs	r3, #32
 800618a:	e003      	b.n	8006194 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800618c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800618e:	fab3 f383 	clz	r3, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	3301      	adds	r3, #1
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2b09      	cmp	r3, #9
 800619c:	bf94      	ite	ls
 800619e:	2301      	movls	r3, #1
 80061a0:	2300      	movhi	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d079      	beq.n	800629c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <HAL_ADC_ConfigChannel+0x2ec>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	0e9b      	lsrs	r3, r3, #26
 80061ba:	3301      	adds	r3, #1
 80061bc:	069b      	lsls	r3, r3, #26
 80061be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061c2:	e015      	b.n	80061f0 <HAL_ADC_ConfigChannel+0x318>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80061d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80061dc:	2320      	movs	r3, #32
 80061de:	e003      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80061e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	3301      	adds	r3, #1
 80061ea:	069b      	lsls	r3, r3, #26
 80061ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d109      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x338>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	3301      	adds	r3, #1
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	e017      	b.n	8006240 <HAL_ADC_ConfigChannel+0x368>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006218:	fa93 f3a3 	rbit	r3, r3
 800621c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800621e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006220:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006228:	2320      	movs	r3, #32
 800622a:	e003      	b.n	8006234 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800622c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622e:	fab3 f383 	clz	r3, r3
 8006232:	b2db      	uxtb	r3, r3
 8006234:	3301      	adds	r3, #1
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	ea42 0103 	orr.w	r1, r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <HAL_ADC_ConfigChannel+0x38e>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	0e9b      	lsrs	r3, r3, #26
 8006256:	3301      	adds	r3, #1
 8006258:	f003 021f 	and.w	r2, r3, #31
 800625c:	4613      	mov	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	4413      	add	r3, r2
 8006262:	051b      	lsls	r3, r3, #20
 8006264:	e018      	b.n	8006298 <HAL_ADC_ConfigChannel+0x3c0>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	fa93 f3a3 	rbit	r3, r3
 8006272:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800627e:	2320      	movs	r3, #32
 8006280:	e003      	b.n	800628a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	fab3 f383 	clz	r3, r3
 8006288:	b2db      	uxtb	r3, r3
 800628a:	3301      	adds	r3, #1
 800628c:	f003 021f 	and.w	r2, r3, #31
 8006290:	4613      	mov	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006298:	430b      	orrs	r3, r1
 800629a:	e07e      	b.n	800639a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d107      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x3e0>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	0e9b      	lsrs	r3, r3, #26
 80062ae:	3301      	adds	r3, #1
 80062b0:	069b      	lsls	r3, r3, #26
 80062b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062b6:	e015      	b.n	80062e4 <HAL_ADC_ConfigChannel+0x40c>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	fa93 f3a3 	rbit	r3, r3
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80062d0:	2320      	movs	r3, #32
 80062d2:	e003      	b.n	80062dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	3301      	adds	r3, #1
 80062de:	069b      	lsls	r3, r3, #26
 80062e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x42c>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	0e9b      	lsrs	r3, r3, #26
 80062f6:	3301      	adds	r3, #1
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006302:	e017      	b.n	8006334 <HAL_ADC_ConfigChannel+0x45c>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	fa93 f3a3 	rbit	r3, r3
 8006310:	61bb      	str	r3, [r7, #24]
  return result;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800631c:	2320      	movs	r3, #32
 800631e:	e003      	b.n	8006328 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	fab3 f383 	clz	r3, r3
 8006326:	b2db      	uxtb	r3, r3
 8006328:	3301      	adds	r3, #1
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2101      	movs	r1, #1
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	ea42 0103 	orr.w	r1, r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10d      	bne.n	8006360 <HAL_ADC_ConfigChannel+0x488>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	0e9b      	lsrs	r3, r3, #26
 800634a:	3301      	adds	r3, #1
 800634c:	f003 021f 	and.w	r2, r3, #31
 8006350:	4613      	mov	r3, r2
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	4413      	add	r3, r2
 8006356:	3b1e      	subs	r3, #30
 8006358:	051b      	lsls	r3, r3, #20
 800635a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800635e:	e01b      	b.n	8006398 <HAL_ADC_ConfigChannel+0x4c0>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	fa93 f3a3 	rbit	r3, r3
 800636c:	60fb      	str	r3, [r7, #12]
  return result;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006378:	2320      	movs	r3, #32
 800637a:	e003      	b.n	8006384 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	fab3 f383 	clz	r3, r3
 8006382:	b2db      	uxtb	r3, r3
 8006384:	3301      	adds	r3, #1
 8006386:	f003 021f 	and.w	r2, r3, #31
 800638a:	4613      	mov	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4413      	add	r3, r2
 8006390:	3b1e      	subs	r3, #30
 8006392:	051b      	lsls	r3, r3, #20
 8006394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006398:	430b      	orrs	r3, r1
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	6892      	ldr	r2, [r2, #8]
 800639e:	4619      	mov	r1, r3
 80063a0:	f7fe fc40 	bl	8004c24 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f280 80c6 	bge.w	800653a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a67      	ldr	r2, [pc, #412]	; (8006550 <HAL_ADC_ConfigChannel+0x678>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_ADC_ConfigChannel+0x4ea>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a65      	ldr	r2, [pc, #404]	; (8006554 <HAL_ADC_ConfigChannel+0x67c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d101      	bne.n	80063c6 <HAL_ADC_ConfigChannel+0x4ee>
 80063c2:	4b65      	ldr	r3, [pc, #404]	; (8006558 <HAL_ADC_ConfigChannel+0x680>)
 80063c4:	e000      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x4f0>
 80063c6:	4b65      	ldr	r3, [pc, #404]	; (800655c <HAL_ADC_ConfigChannel+0x684>)
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fb77 	bl	8004abc <LL_ADC_GetCommonPathInternalCh>
 80063ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5e      	ldr	r2, [pc, #376]	; (8006550 <HAL_ADC_ConfigChannel+0x678>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_ADC_ConfigChannel+0x50c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_ADC_ConfigChannel+0x67c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10e      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x52a>
 80063e4:	485a      	ldr	r0, [pc, #360]	; (8006550 <HAL_ADC_ConfigChannel+0x678>)
 80063e6:	f7fe fd2d 	bl	8004e44 <LL_ADC_IsEnabled>
 80063ea:	4604      	mov	r4, r0
 80063ec:	4859      	ldr	r0, [pc, #356]	; (8006554 <HAL_ADC_ConfigChannel+0x67c>)
 80063ee:	f7fe fd29 	bl	8004e44 <LL_ADC_IsEnabled>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4323      	orrs	r3, r4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bf0c      	ite	eq
 80063fa:	2301      	moveq	r3, #1
 80063fc:	2300      	movne	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	e008      	b.n	8006414 <HAL_ADC_ConfigChannel+0x53c>
 8006402:	4857      	ldr	r0, [pc, #348]	; (8006560 <HAL_ADC_ConfigChannel+0x688>)
 8006404:	f7fe fd1e 	bl	8004e44 <LL_ADC_IsEnabled>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d07d      	beq.n	8006514 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a51      	ldr	r2, [pc, #324]	; (8006564 <HAL_ADC_ConfigChannel+0x68c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d130      	bne.n	8006484 <HAL_ADC_ConfigChannel+0x5ac>
 8006422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d12b      	bne.n	8006484 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a4b      	ldr	r2, [pc, #300]	; (8006560 <HAL_ADC_ConfigChannel+0x688>)
 8006432:	4293      	cmp	r3, r2
 8006434:	f040 8081 	bne.w	800653a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a44      	ldr	r2, [pc, #272]	; (8006550 <HAL_ADC_ConfigChannel+0x678>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_ADC_ConfigChannel+0x574>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a43      	ldr	r2, [pc, #268]	; (8006554 <HAL_ADC_ConfigChannel+0x67c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d101      	bne.n	8006450 <HAL_ADC_ConfigChannel+0x578>
 800644c:	4a42      	ldr	r2, [pc, #264]	; (8006558 <HAL_ADC_ConfigChannel+0x680>)
 800644e:	e000      	b.n	8006452 <HAL_ADC_ConfigChannel+0x57a>
 8006450:	4a42      	ldr	r2, [pc, #264]	; (800655c <HAL_ADC_ConfigChannel+0x684>)
 8006452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006458:	4619      	mov	r1, r3
 800645a:	4610      	mov	r0, r2
 800645c:	f7fe fb1b 	bl	8004a96 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006460:	4b41      	ldr	r3, [pc, #260]	; (8006568 <HAL_ADC_ConfigChannel+0x690>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	099b      	lsrs	r3, r3, #6
 8006466:	4a41      	ldr	r2, [pc, #260]	; (800656c <HAL_ADC_ConfigChannel+0x694>)
 8006468:	fba2 2303 	umull	r2, r3, r2, r3
 800646c:	099b      	lsrs	r3, r3, #6
 800646e:	3301      	adds	r3, #1
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006474:	e002      	b.n	800647c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	3b01      	subs	r3, #1
 800647a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f9      	bne.n	8006476 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006482:	e05a      	b.n	800653a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a39      	ldr	r2, [pc, #228]	; (8006570 <HAL_ADC_ConfigChannel+0x698>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d11e      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x5f4>
 800648e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d119      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a30      	ldr	r2, [pc, #192]	; (8006560 <HAL_ADC_ConfigChannel+0x688>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d14b      	bne.n	800653a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <HAL_ADC_ConfigChannel+0x678>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_ADC_ConfigChannel+0x5de>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <HAL_ADC_ConfigChannel+0x67c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <HAL_ADC_ConfigChannel+0x5e2>
 80064b6:	4a28      	ldr	r2, [pc, #160]	; (8006558 <HAL_ADC_ConfigChannel+0x680>)
 80064b8:	e000      	b.n	80064bc <HAL_ADC_ConfigChannel+0x5e4>
 80064ba:	4a28      	ldr	r2, [pc, #160]	; (800655c <HAL_ADC_ConfigChannel+0x684>)
 80064bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe fae6 	bl	8004a96 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064ca:	e036      	b.n	800653a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a28      	ldr	r2, [pc, #160]	; (8006574 <HAL_ADC_ConfigChannel+0x69c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d131      	bne.n	800653a <HAL_ADC_ConfigChannel+0x662>
 80064d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d12c      	bne.n	800653a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1e      	ldr	r2, [pc, #120]	; (8006560 <HAL_ADC_ConfigChannel+0x688>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d127      	bne.n	800653a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_ADC_ConfigChannel+0x678>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_ADC_ConfigChannel+0x626>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a16      	ldr	r2, [pc, #88]	; (8006554 <HAL_ADC_ConfigChannel+0x67c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d101      	bne.n	8006502 <HAL_ADC_ConfigChannel+0x62a>
 80064fe:	4a16      	ldr	r2, [pc, #88]	; (8006558 <HAL_ADC_ConfigChannel+0x680>)
 8006500:	e000      	b.n	8006504 <HAL_ADC_ConfigChannel+0x62c>
 8006502:	4a16      	ldr	r2, [pc, #88]	; (800655c <HAL_ADC_ConfigChannel+0x684>)
 8006504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f7fe fac2 	bl	8004a96 <LL_ADC_SetCommonPathInternalCh>
 8006512:	e012      	b.n	800653a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006526:	e008      	b.n	800653a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	f043 0220 	orr.w	r2, r3, #32
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006542:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006546:	4618      	mov	r0, r3
 8006548:	3784      	adds	r7, #132	; 0x84
 800654a:	46bd      	mov	sp, r7
 800654c:	bd90      	pop	{r4, r7, pc}
 800654e:	bf00      	nop
 8006550:	40022000 	.word	0x40022000
 8006554:	40022100 	.word	0x40022100
 8006558:	40022300 	.word	0x40022300
 800655c:	58026300 	.word	0x58026300
 8006560:	58026000 	.word	0x58026000
 8006564:	cb840000 	.word	0xcb840000
 8006568:	20000000 	.word	0x20000000
 800656c:	053e2d63 	.word	0x053e2d63
 8006570:	c7520000 	.word	0xc7520000
 8006574:	cfb80000 	.word	0xcfb80000

08006578 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b094      	sub	sp, #80	; 0x50
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006590:	d003      	beq.n	800659a <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006596:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_ADC_AnalogWDGConfig+0x30>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e304      	b.n	8006bb2 <HAL_ADC_AnalogWDGConfig+0x63a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fc93 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 80065ba:	64b8      	str	r0, [r7, #72]	; 0x48
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fcb5 	bl	8004f30 <LL_ADC_INJ_IsConversionOngoing>
 80065c6:	6478      	str	r0, [r7, #68]	; 0x44
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 82e2 	bne.w	8006b94 <HAL_ADC_AnalogWDGConfig+0x61c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 82de 	bne.w	8006b94 <HAL_ADC_AnalogWDGConfig+0x61c>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a9b      	ldr	r2, [pc, #620]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	f040 80fa 	bne.w	80067d8 <HAL_ADC_AnalogWDGConfig+0x260>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80065ec:	d034      	beq.n	8006658 <HAL_ADC_AnalogWDGConfig+0xe0>
 80065ee:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80065f2:	d856      	bhi.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x12a>
 80065f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065f8:	d04b      	beq.n	8006692 <HAL_ADC_AnalogWDGConfig+0x11a>
 80065fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065fe:	d850      	bhi.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006600:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006604:	d01b      	beq.n	800663e <HAL_ADC_AnalogWDGConfig+0xc6>
 8006606:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800660a:	d84a      	bhi.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x12a>
 800660c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006610:	d037      	beq.n	8006682 <HAL_ADC_AnalogWDGConfig+0x10a>
 8006612:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006616:	d844      	bhi.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800661c:	d029      	beq.n	8006672 <HAL_ADC_AnalogWDGConfig+0xfa>
 800661e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006622:	d13e      	bne.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006630:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006634:	461a      	mov	r2, r3
 8006636:	4985      	ldr	r1, [pc, #532]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006638:	f7fe fb44 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800663c:	e039      	b.n	80066b2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800664a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800664e:	461a      	mov	r2, r3
 8006650:	497e      	ldr	r1, [pc, #504]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006652:	f7fe fb37 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006656:	e02c      	b.n	80066b2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006664:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006668:	461a      	mov	r2, r3
 800666a:	4978      	ldr	r1, [pc, #480]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800666c:	f7fe fb2a 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006670:	e01f      	b.n	80066b2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a76      	ldr	r2, [pc, #472]	; (8006850 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8006678:	4974      	ldr	r1, [pc, #464]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fb22 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006680:	e017      	b.n	80066b2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a73      	ldr	r2, [pc, #460]	; (8006854 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8006688:	4970      	ldr	r1, [pc, #448]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fb1a 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006690:	e00f      	b.n	80066b2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a70      	ldr	r2, [pc, #448]	; (8006858 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8006698:	496c      	ldr	r1, [pc, #432]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fb12 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80066a0:	e007      	b.n	80066b2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2200      	movs	r2, #0
 80066a8:	4968      	ldr	r1, [pc, #416]	; (800684c <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fb0a 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80066b0:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80066b2:	4b6a      	ldr	r3, [pc, #424]	; (800685c <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066be:	d10b      	bne.n	80066d8 <HAL_ADC_AnalogWDGConfig+0x160>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	089b      	lsrs	r3, r3, #2
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	e01d      	b.n	8006714 <HAL_ADC_AnalogWDGConfig+0x19c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <HAL_ADC_AnalogWDGConfig+0x186>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	089b      	lsrs	r3, r3, #2
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	e00a      	b.n	8006714 <HAL_ADC_AnalogWDGConfig+0x19c>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	089b      	lsrs	r3, r3, #2
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006716:	4b51      	ldr	r3, [pc, #324]	; (800685c <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800671e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006722:	d10b      	bne.n	800673c <HAL_ADC_AnalogWDGConfig+0x1c4>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	e01d      	b.n	8006778 <HAL_ADC_AnalogWDGConfig+0x200>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <HAL_ADC_AnalogWDGConfig+0x1ea>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	089b      	lsrs	r3, r3, #2
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	e00a      	b.n	8006778 <HAL_ADC_AnalogWDGConfig+0x200>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695a      	ldr	r2, [r3, #20]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	089b      	lsrs	r3, r3, #2
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	fa02 f303 	lsl.w	r3, r2, r3
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }
#else
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800678a:	430a      	orrs	r2, r1
 800678c:	621a      	str	r2, [r3, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800679e:	430a      	orrs	r2, r1
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fbcf 	bl	8004f56 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	7b1b      	ldrb	r3, [r3, #12]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d105      	bne.n	80067cc <HAL_ADC_AnalogWDGConfig+0x254>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fbef 	bl	8004fa8 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067ca:	e1ec      	b.n	8006ba6 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fc19 	bl	8005008 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067d6:	e1e6      	b.n	8006ba6 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80067e0:	d020      	beq.n	8006824 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80067e2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80067e6:	f200 80f3 	bhi.w	80069d0 <HAL_ADC_AnalogWDGConfig+0x458>
 80067ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067ee:	f000 808a 	beq.w	8006906 <HAL_ADC_AnalogWDGConfig+0x38e>
 80067f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067f6:	f200 80eb 	bhi.w	80069d0 <HAL_ADC_AnalogWDGConfig+0x458>
 80067fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80067fe:	d011      	beq.n	8006824 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8006800:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006804:	f200 80e4 	bhi.w	80069d0 <HAL_ADC_AnalogWDGConfig+0x458>
 8006808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800680c:	d07b      	beq.n	8006906 <HAL_ADC_AnalogWDGConfig+0x38e>
 800680e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006812:	f200 80dd 	bhi.w	80069d0 <HAL_ADC_AnalogWDGConfig+0x458>
 8006816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800681a:	d074      	beq.n	8006906 <HAL_ADC_AnalogWDGConfig+0x38e>
 800681c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006820:	f040 80d6 	bne.w	80069d0 <HAL_ADC_AnalogWDGConfig+0x458>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a0d      	ldr	r2, [pc, #52]	; (8006860 <HAL_ADC_AnalogWDGConfig+0x2e8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d13b      	bne.n	80068a6 <HAL_ADC_AnalogWDGConfig+0x32e>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006836:	2b00      	cmp	r3, #0
 8006838:	d114      	bne.n	8006864 <HAL_ADC_AnalogWDGConfig+0x2ec>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	0e9b      	lsrs	r3, r3, #26
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2201      	movs	r2, #1
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	e022      	b.n	8006892 <HAL_ADC_AnalogWDGConfig+0x31a>
 800684c:	7dc00000 	.word	0x7dc00000
 8006850:	008fffff 	.word	0x008fffff
 8006854:	010fffff 	.word	0x010fffff
 8006858:	018fffff 	.word	0x018fffff
 800685c:	5c001000 	.word	0x5c001000
 8006860:	001fffff 	.word	0x001fffff
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	fa93 f3a3 	rbit	r3, r3
 8006870:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_ADC_AnalogWDGConfig+0x308>
    return 32U;
 800687c:	2320      	movs	r3, #32
 800687e:	e003      	b.n	8006888 <HAL_ADC_AnalogWDGConfig+0x310>
  return __builtin_clz(value);
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	fab3 f383 	clz	r3, r3
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	2201      	movs	r2, #1
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	430b      	orrs	r3, r1
 80068a0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80068a4:	e09d      	b.n	80069e2 <HAL_ADC_AnalogWDGConfig+0x46a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d108      	bne.n	80068c4 <HAL_ADC_AnalogWDGConfig+0x34c>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	0e9b      	lsrs	r3, r3, #26
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2201      	movs	r2, #1
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	e016      	b.n	80068f2 <HAL_ADC_AnalogWDGConfig+0x37a>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	fa93 f3a3 	rbit	r3, r3
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_ADC_AnalogWDGConfig+0x368>
    return 32U;
 80068dc:	2320      	movs	r3, #32
 80068de:	e003      	b.n	80068e8 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	fab3 f383 	clz	r3, r3
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	2201      	movs	r2, #1
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	430b      	orrs	r3, r1
 8006900:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8006904:	e06d      	b.n	80069e2 <HAL_ADC_AnalogWDGConfig+0x46a>
          else
          {
#endif  /*ADC_VER_V5_V90*/
            /* Update AWD by bitfield to keep the possibility to monitor        */
            /* several channels by successive calls of this function.           */
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4aa0      	ldr	r2, [pc, #640]	; (8006b8c <HAL_ADC_AnalogWDGConfig+0x614>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d12f      	bne.n	8006970 <HAL_ADC_AnalogWDGConfig+0x3f8>
            {
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006918:	2b00      	cmp	r3, #0
 800691a:	d108      	bne.n	800692e <HAL_ADC_AnalogWDGConfig+0x3b6>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	0e9b      	lsrs	r3, r3, #26
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	2201      	movs	r2, #1
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	e016      	b.n	800695c <HAL_ADC_AnalogWDGConfig+0x3e4>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	fa93 f3a3 	rbit	r3, r3
 800693a:	61bb      	str	r3, [r7, #24]
  return result;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_ADC_AnalogWDGConfig+0x3d2>
    return 32U;
 8006946:	2320      	movs	r3, #32
 8006948:	e003      	b.n	8006952 <HAL_ADC_AnalogWDGConfig+0x3da>
  return __builtin_clz(value);
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	fab3 f383 	clz	r3, r3
 8006950:	b2db      	uxtb	r3, r3
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2201      	movs	r2, #1
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	430b      	orrs	r3, r1
 800696a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 800696e:	e038      	b.n	80069e2 <HAL_ADC_AnalogWDGConfig+0x46a>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006978:	2b00      	cmp	r3, #0
 800697a:	d108      	bne.n	800698e <HAL_ADC_AnalogWDGConfig+0x416>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	0e9b      	lsrs	r3, r3, #26
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2201      	movs	r2, #1
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	e016      	b.n	80069bc <HAL_ADC_AnalogWDGConfig+0x444>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	fa93 f3a3 	rbit	r3, r3
 800699a:	60fb      	str	r3, [r7, #12]
  return result;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_ADC_AnalogWDGConfig+0x432>
    return 32U;
 80069a6:	2320      	movs	r3, #32
 80069a8:	e003      	b.n	80069b2 <HAL_ADC_AnalogWDGConfig+0x43a>
  return __builtin_clz(value);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	fab3 f383 	clz	r3, r3
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2201      	movs	r2, #1
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	430b      	orrs	r3, r1
 80069ca:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80069ce:	e008      	b.n	80069e2 <HAL_ADC_AnalogWDGConfig+0x46a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2200      	movs	r2, #0
 80069da:	4619      	mov	r1, r3
 80069dc:	f7fe f972 	bl	8004cc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80069e0:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80069e2:	4b6b      	ldr	r3, [pc, #428]	; (8006b90 <HAL_ADC_AnalogWDGConfig+0x618>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ee:	d10b      	bne.n	8006a08 <HAL_ADC_AnalogWDGConfig+0x490>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	e01d      	b.n	8006a44 <HAL_ADC_AnalogWDGConfig+0x4cc>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <HAL_ADC_AnalogWDGConfig+0x4b6>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	e00a      	b.n	8006a44 <HAL_ADC_AnalogWDGConfig+0x4cc>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006a46:	4b52      	ldr	r3, [pc, #328]	; (8006b90 <HAL_ADC_AnalogWDGConfig+0x618>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a52:	d10b      	bne.n	8006a6c <HAL_ADC_AnalogWDGConfig+0x4f4>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	e01d      	b.n	8006aa8 <HAL_ADC_AnalogWDGConfig+0x530>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_ADC_AnalogWDGConfig+0x51a>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	695a      	ldr	r2, [r3, #20]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	089b      	lsrs	r3, r3, #2
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	e00a      	b.n	8006aa8 <HAL_ADC_AnalogWDGConfig+0x530>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
        }
      }
#else
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <HAL_ADC_AnalogWDGConfig+0x614>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d118      	bne.n	8006ae6 <HAL_ADC_AnalogWDGConfig+0x56e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006abc:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ad4:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8006ae4:	e017      	b.n	8006b16 <HAL_ADC_AnalogWDGConfig+0x59e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006aee:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006af8:	430a      	orrs	r2, r1
 8006afa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006b06:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b10:	430a      	orrs	r2, r1
 8006b12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1c      	ldr	r2, [pc, #112]	; (8006b8c <HAL_ADC_AnalogWDGConfig+0x614>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d11a      	bne.n	8006b56 <HAL_ADC_AnalogWDGConfig+0x5de>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe fa1d 	bl	8004f70 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	7b1b      	ldrb	r3, [r3, #12]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d105      	bne.n	8006b4a <HAL_ADC_AnalogWDGConfig+0x5d2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe fa40 	bl	8004fc8 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b48:	e02d      	b.n	8006ba6 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fa6a 	bl	8005028 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b54:	e027      	b.n	8006ba6 <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fa10 	bl	8004f8c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	7b1b      	ldrb	r3, [r3, #12]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d105      	bne.n	8006b80 <HAL_ADC_AnalogWDGConfig+0x608>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe fa35 	bl	8004fe8 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b7e:	e012      	b.n	8006ba6 <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe fa5f 	bl	8005048 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b8a:	e00c      	b.n	8006ba6 <HAL_ADC_AnalogWDGConfig+0x62e>
 8006b8c:	001fffff 	.word	0x001fffff
 8006b90:	5c001000 	.word	0x5c001000
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006bae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3750      	adds	r7, #80	; 0x50
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe f984 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 8006bd8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe f9a6 	bl	8004f30 <LL_ADC_INJ_IsConversionOngoing>
 8006be4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d103      	bne.n	8006bf4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8098 	beq.w	8006d24 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d02a      	beq.n	8006c58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7d5b      	ldrb	r3, [r3, #21]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d126      	bne.n	8006c58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7d1b      	ldrb	r3, [r3, #20]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d122      	bne.n	8006c58 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006c12:	2301      	movs	r3, #1
 8006c14:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006c16:	e014      	b.n	8006c42 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4a45      	ldr	r2, [pc, #276]	; (8006d30 <ADC_ConversionStop+0x174>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d90d      	bls.n	8006c3c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c24:	f043 0210 	orr.w	r2, r3, #16
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c30:	f043 0201 	orr.w	r2, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e074      	b.n	8006d26 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4c:	2b40      	cmp	r3, #64	; 0x40
 8006c4e:	d1e3      	bne.n	8006c18 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2240      	movs	r2, #64	; 0x40
 8006c56:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d014      	beq.n	8006c88 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe f93c 	bl	8004ee0 <LL_ADC_REG_IsConversionOngoing>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe f8f9 	bl	8004e6a <LL_ADC_IsDisableOngoing>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe f918 	bl	8004eb8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d014      	beq.n	8006cb8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe f94c 	bl	8004f30 <LL_ADC_INJ_IsConversionOngoing>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe f8e1 	bl	8004e6a <LL_ADC_IsDisableOngoing>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe f928 	bl	8004f08 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d005      	beq.n	8006cca <ADC_ConversionStop+0x10e>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d105      	bne.n	8006cd0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006cc4:	230c      	movs	r3, #12
 8006cc6:	617b      	str	r3, [r7, #20]
        break;
 8006cc8:	e005      	b.n	8006cd6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006cca:	2308      	movs	r3, #8
 8006ccc:	617b      	str	r3, [r7, #20]
        break;
 8006cce:	e002      	b.n	8006cd6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	617b      	str	r3, [r7, #20]
        break;
 8006cd4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006cd6:	f7fd fe8f 	bl	80049f8 <HAL_GetTick>
 8006cda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006cdc:	e01b      	b.n	8006d16 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006cde:	f7fd fe8b 	bl	80049f8 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	d914      	bls.n	8006d16 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00d      	beq.n	8006d16 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfe:	f043 0210 	orr.w	r2, r3, #16
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	f043 0201 	orr.w	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e007      	b.n	8006d26 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1dc      	bne.n	8006cde <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	000cdbff 	.word	0x000cdbff

08006d34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe f87f 	bl	8004e44 <LL_ADC_IsEnabled>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d16e      	bne.n	8006e2a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	4b38      	ldr	r3, [pc, #224]	; (8006e34 <ADC_Enable+0x100>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	f043 0210 	orr.w	r2, r3, #16
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	f043 0201 	orr.w	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e05a      	b.n	8006e2c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe f83a 	bl	8004df4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006d80:	f7fd fe3a 	bl	80049f8 <HAL_GetTick>
 8006d84:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <ADC_Enable+0x104>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <ADC_Enable+0x66>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a29      	ldr	r2, [pc, #164]	; (8006e3c <ADC_Enable+0x108>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d101      	bne.n	8006d9e <ADC_Enable+0x6a>
 8006d9a:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <ADC_Enable+0x10c>)
 8006d9c:	e000      	b.n	8006da0 <ADC_Enable+0x6c>
 8006d9e:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <ADC_Enable+0x110>)
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fd ffbd 	bl	8004d20 <LL_ADC_GetMultimode>
 8006da6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a23      	ldr	r2, [pc, #140]	; (8006e3c <ADC_Enable+0x108>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d002      	beq.n	8006db8 <ADC_Enable+0x84>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	e000      	b.n	8006dba <ADC_Enable+0x86>
 8006db8:	4b1f      	ldr	r3, [pc, #124]	; (8006e38 <ADC_Enable+0x104>)
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d02c      	beq.n	8006e1c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d130      	bne.n	8006e2a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dc8:	e028      	b.n	8006e1c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe f838 	bl	8004e44 <LL_ADC_IsEnabled>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d104      	bne.n	8006de4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe f808 	bl	8004df4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006de4:	f7fd fe08 	bl	80049f8 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d914      	bls.n	8006e1c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d00d      	beq.n	8006e1c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e04:	f043 0210 	orr.w	r2, r3, #16
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	f043 0201 	orr.w	r2, r3, #1
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e007      	b.n	8006e2c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d1cf      	bne.n	8006dca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	8000003f 	.word	0x8000003f
 8006e38:	40022000 	.word	0x40022000
 8006e3c:	40022100 	.word	0x40022100
 8006e40:	40022300 	.word	0x40022300
 8006e44:	58026300 	.word	0x58026300

08006e48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe f808 	bl	8004e6a <LL_ADC_IsDisableOngoing>
 8006e5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fd ffef 	bl	8004e44 <LL_ADC_IsEnabled>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d047      	beq.n	8006efc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d144      	bne.n	8006efc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 030d 	and.w	r3, r3, #13
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d10c      	bne.n	8006e9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fd ffc9 	bl	8004e1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2203      	movs	r2, #3
 8006e90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e92:	f7fd fdb1 	bl	80049f8 <HAL_GetTick>
 8006e96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006e98:	e029      	b.n	8006eee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f043 0210 	orr.w	r2, r3, #16
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eaa:	f043 0201 	orr.w	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e023      	b.n	8006efe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006eb6:	f7fd fd9f 	bl	80049f8 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d914      	bls.n	8006eee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed6:	f043 0210 	orr.w	r2, r3, #16
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee2:	f043 0201 	orr.w	r2, r3, #1
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e007      	b.n	8006efe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1dc      	bne.n	8006eb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a79      	ldr	r2, [pc, #484]	; (80070fc <ADC_ConfigureBoostMode+0x1f4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <ADC_ConfigureBoostMode+0x1c>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a78      	ldr	r2, [pc, #480]	; (8007100 <ADC_ConfigureBoostMode+0x1f8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d109      	bne.n	8006f38 <ADC_ConfigureBoostMode+0x30>
 8006f24:	4b77      	ldr	r3, [pc, #476]	; (8007104 <ADC_ConfigureBoostMode+0x1fc>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	bf14      	ite	ne
 8006f30:	2301      	movne	r3, #1
 8006f32:	2300      	moveq	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	e008      	b.n	8006f4a <ADC_ConfigureBoostMode+0x42>
 8006f38:	4b73      	ldr	r3, [pc, #460]	; (8007108 <ADC_ConfigureBoostMode+0x200>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bf14      	ite	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2300      	moveq	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01c      	beq.n	8006f88 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006f4e:	f002 fb01 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 8006f52:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f5c:	d010      	beq.n	8006f80 <ADC_ConfigureBoostMode+0x78>
 8006f5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f62:	d871      	bhi.n	8007048 <ADC_ConfigureBoostMode+0x140>
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f68:	d002      	beq.n	8006f70 <ADC_ConfigureBoostMode+0x68>
 8006f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f6e:	d16b      	bne.n	8007048 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	60fb      	str	r3, [r7, #12]
        break;
 8006f7e:	e066      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	60fb      	str	r3, [r7, #12]
        break;
 8006f86:	e062      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006f88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006f8c:	f003 fac6 	bl	800a51c <HAL_RCCEx_GetPeriphCLKFreq>
 8006f90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006f9a:	d051      	beq.n	8007040 <ADC_ConfigureBoostMode+0x138>
 8006f9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006fa0:	d854      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006fa2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006fa6:	d047      	beq.n	8007038 <ADC_ConfigureBoostMode+0x130>
 8006fa8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006fac:	d84e      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006fae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006fb2:	d03d      	beq.n	8007030 <ADC_ConfigureBoostMode+0x128>
 8006fb4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006fb8:	d848      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006fba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fbe:	d033      	beq.n	8007028 <ADC_ConfigureBoostMode+0x120>
 8006fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fc4:	d842      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006fc6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006fca:	d029      	beq.n	8007020 <ADC_ConfigureBoostMode+0x118>
 8006fcc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006fd0:	d83c      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006fd2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006fd6:	d01a      	beq.n	800700e <ADC_ConfigureBoostMode+0x106>
 8006fd8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006fdc:	d836      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006fde:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006fe2:	d014      	beq.n	800700e <ADC_ConfigureBoostMode+0x106>
 8006fe4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006fe8:	d830      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fee:	d00e      	beq.n	800700e <ADC_ConfigureBoostMode+0x106>
 8006ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff4:	d82a      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8006ff6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ffa:	d008      	beq.n	800700e <ADC_ConfigureBoostMode+0x106>
 8006ffc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007000:	d824      	bhi.n	800704c <ADC_ConfigureBoostMode+0x144>
 8007002:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007006:	d002      	beq.n	800700e <ADC_ConfigureBoostMode+0x106>
 8007008:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800700c:	d11e      	bne.n	800704c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	0c9b      	lsrs	r3, r3, #18
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	fbb2 f3f3 	udiv	r3, r2, r3
 800701c:	60fb      	str	r3, [r7, #12]
        break;
 800701e:	e016      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	091b      	lsrs	r3, r3, #4
 8007024:	60fb      	str	r3, [r7, #12]
        break;
 8007026:	e012      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	60fb      	str	r3, [r7, #12]
        break;
 800702e:	e00e      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	099b      	lsrs	r3, r3, #6
 8007034:	60fb      	str	r3, [r7, #12]
        break;
 8007036:	e00a      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	09db      	lsrs	r3, r3, #7
 800703c:	60fb      	str	r3, [r7, #12]
        break;
 800703e:	e006      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	60fb      	str	r3, [r7, #12]
        break;
 8007046:	e002      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
        break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800704c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800704e:	f7fd fd03 	bl	8004a58 <HAL_GetREVID>
 8007052:	4603      	mov	r3, r0
 8007054:	f241 0203 	movw	r2, #4099	; 0x1003
 8007058:	4293      	cmp	r3, r2
 800705a:	d815      	bhi.n	8007088 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a2b      	ldr	r2, [pc, #172]	; (800710c <ADC_ConfigureBoostMode+0x204>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d908      	bls.n	8007076 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007072:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007074:	e03e      	b.n	80070f4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007084:	609a      	str	r2, [r3, #8]
}
 8007086:	e035      	b.n	80070f4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <ADC_ConfigureBoostMode+0x208>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d808      	bhi.n	80070a8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070a4:	609a      	str	r2, [r3, #8]
}
 80070a6:	e025      	b.n	80070f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <ADC_ConfigureBoostMode+0x20c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d80a      	bhi.n	80070c6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	e016      	b.n	80070f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a13      	ldr	r2, [pc, #76]	; (8007118 <ADC_ConfigureBoostMode+0x210>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d80a      	bhi.n	80070e4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e0:	609a      	str	r2, [r3, #8]
}
 80070e2:	e007      	b.n	80070f4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80070f2:	609a      	str	r2, [r3, #8]
}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40022000 	.word	0x40022000
 8007100:	40022100 	.word	0x40022100
 8007104:	40022300 	.word	0x40022300
 8007108:	58026300 	.word	0x58026300
 800710c:	01312d00 	.word	0x01312d00
 8007110:	005f5e10 	.word	0x005f5e10
 8007114:	00bebc20 	.word	0x00bebc20
 8007118:	017d7840 	.word	0x017d7840

0800711c <LL_ADC_IsEnabled>:
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <LL_ADC_IsEnabled+0x18>
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <LL_ADC_IsEnabled+0x1a>
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <LL_ADC_REG_IsConversionOngoing>:
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b04      	cmp	r3, #4
 8007154:	d101      	bne.n	800715a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b09f      	sub	sp, #124	; 0x7c
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e0be      	b.n	8007368 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80071f2:	2300      	movs	r3, #0
 80071f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80071f6:	2300      	movs	r3, #0
 80071f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a5c      	ldr	r2, [pc, #368]	; (8007370 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d102      	bne.n	800720a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007204:	4b5b      	ldr	r3, [pc, #364]	; (8007374 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	e001      	b.n	800720e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800720a:	2300      	movs	r3, #0
 800720c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	f043 0220 	orr.w	r2, r3, #32
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e09d      	b.n	8007368 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff ff87 	bl	8007142 <LL_ADC_REG_IsConversionOngoing>
 8007234:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff ff81 	bl	8007142 <LL_ADC_REG_IsConversionOngoing>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d17f      	bne.n	8007346 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007248:	2b00      	cmp	r3, #0
 800724a:	d17c      	bne.n	8007346 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a47      	ldr	r2, [pc, #284]	; (8007370 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a46      	ldr	r2, [pc, #280]	; (8007374 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d101      	bne.n	8007264 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007260:	4b45      	ldr	r3, [pc, #276]	; (8007378 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007262:	e000      	b.n	8007266 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007264:	4b45      	ldr	r3, [pc, #276]	; (800737c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007266:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d039      	beq.n	80072e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	431a      	orrs	r2, r3
 800727e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007280:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a3a      	ldr	r2, [pc, #232]	; (8007370 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d004      	beq.n	8007296 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a38      	ldr	r2, [pc, #224]	; (8007374 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d10e      	bne.n	80072b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007296:	4836      	ldr	r0, [pc, #216]	; (8007370 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007298:	f7ff ff40 	bl	800711c <LL_ADC_IsEnabled>
 800729c:	4604      	mov	r4, r0
 800729e:	4835      	ldr	r0, [pc, #212]	; (8007374 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80072a0:	f7ff ff3c 	bl	800711c <LL_ADC_IsEnabled>
 80072a4:	4603      	mov	r3, r0
 80072a6:	4323      	orrs	r3, r4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	e008      	b.n	80072c6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80072b4:	4832      	ldr	r0, [pc, #200]	; (8007380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80072b6:	f7ff ff31 	bl	800711c <LL_ADC_IsEnabled>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bf0c      	ite	eq
 80072c0:	2301      	moveq	r3, #1
 80072c2:	2300      	movne	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d047      	beq.n	800735a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80072ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	4b2d      	ldr	r3, [pc, #180]	; (8007384 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	6811      	ldr	r1, [r2, #0]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	6892      	ldr	r2, [r2, #8]
 80072da:	430a      	orrs	r2, r1
 80072dc:	431a      	orrs	r2, r3
 80072de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80072e2:	e03a      	b.n	800735a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80072e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a1e      	ldr	r2, [pc, #120]	; (8007370 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10e      	bne.n	8007322 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007304:	481a      	ldr	r0, [pc, #104]	; (8007370 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007306:	f7ff ff09 	bl	800711c <LL_ADC_IsEnabled>
 800730a:	4604      	mov	r4, r0
 800730c:	4819      	ldr	r0, [pc, #100]	; (8007374 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800730e:	f7ff ff05 	bl	800711c <LL_ADC_IsEnabled>
 8007312:	4603      	mov	r3, r0
 8007314:	4323      	orrs	r3, r4
 8007316:	2b00      	cmp	r3, #0
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	e008      	b.n	8007334 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007322:	4817      	ldr	r0, [pc, #92]	; (8007380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007324:	f7ff fefa 	bl	800711c <LL_ADC_IsEnabled>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	bf0c      	ite	eq
 800732e:	2301      	moveq	r3, #1
 8007330:	2300      	movne	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d010      	beq.n	800735a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800733e:	4013      	ands	r3, r2
 8007340:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007342:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007344:	e009      	b.n	800735a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	f043 0220 	orr.w	r2, r3, #32
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007358:	e000      	b.n	800735c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800735a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007364:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007368:	4618      	mov	r0, r3
 800736a:	377c      	adds	r7, #124	; 0x7c
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}
 8007370:	40022000 	.word	0x40022000
 8007374:	40022100 	.word	0x40022100
 8007378:	40022300 	.word	0x40022300
 800737c:	58026300 	.word	0x58026300
 8007380:	58026000 	.word	0x58026000
 8007384:	fffff0e0 	.word	0xfffff0e0

08007388 <__NVIC_SetPriorityGrouping>:
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007398:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <__NVIC_SetPriorityGrouping+0x40>)
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073a4:	4013      	ands	r3, r2
 80073a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80073b0:	4b06      	ldr	r3, [pc, #24]	; (80073cc <__NVIC_SetPriorityGrouping+0x44>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073b6:	4a04      	ldr	r2, [pc, #16]	; (80073c8 <__NVIC_SetPriorityGrouping+0x40>)
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	60d3      	str	r3, [r2, #12]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	e000ed00 	.word	0xe000ed00
 80073cc:	05fa0000 	.word	0x05fa0000

080073d0 <__NVIC_GetPriorityGrouping>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <__NVIC_GetPriorityGrouping+0x18>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	0a1b      	lsrs	r3, r3, #8
 80073da:	f003 0307 	and.w	r3, r3, #7
}
 80073de:	4618      	mov	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	e000ed00 	.word	0xe000ed00

080073ec <__NVIC_EnableIRQ>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	db0b      	blt.n	8007416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	f003 021f 	and.w	r2, r3, #31
 8007404:	4907      	ldr	r1, [pc, #28]	; (8007424 <__NVIC_EnableIRQ+0x38>)
 8007406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	2001      	movs	r0, #1
 800740e:	fa00 f202 	lsl.w	r2, r0, r2
 8007412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	e000e100 	.word	0xe000e100

08007428 <__NVIC_SetPriority>:
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007438:	2b00      	cmp	r3, #0
 800743a:	db0a      	blt.n	8007452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	490c      	ldr	r1, [pc, #48]	; (8007474 <__NVIC_SetPriority+0x4c>)
 8007442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007446:	0112      	lsls	r2, r2, #4
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	440b      	add	r3, r1
 800744c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007450:	e00a      	b.n	8007468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	b2da      	uxtb	r2, r3
 8007456:	4908      	ldr	r1, [pc, #32]	; (8007478 <__NVIC_SetPriority+0x50>)
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	3b04      	subs	r3, #4
 8007460:	0112      	lsls	r2, r2, #4
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	440b      	add	r3, r1
 8007466:	761a      	strb	r2, [r3, #24]
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	e000e100 	.word	0xe000e100
 8007478:	e000ed00 	.word	0xe000ed00

0800747c <NVIC_EncodePriority>:
{
 800747c:	b480      	push	{r7}
 800747e:	b089      	sub	sp, #36	; 0x24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f1c3 0307 	rsb	r3, r3, #7
 8007496:	2b04      	cmp	r3, #4
 8007498:	bf28      	it	cs
 800749a:	2304      	movcs	r3, #4
 800749c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	3304      	adds	r3, #4
 80074a2:	2b06      	cmp	r3, #6
 80074a4:	d902      	bls.n	80074ac <NVIC_EncodePriority+0x30>
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	3b03      	subs	r3, #3
 80074aa:	e000      	b.n	80074ae <NVIC_EncodePriority+0x32>
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074b0:	f04f 32ff 	mov.w	r2, #4294967295
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43da      	mvns	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	401a      	ands	r2, r3
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074c4:	f04f 31ff 	mov.w	r1, #4294967295
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	fa01 f303 	lsl.w	r3, r1, r3
 80074ce:	43d9      	mvns	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074d4:	4313      	orrs	r3, r2
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3724      	adds	r7, #36	; 0x24
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff ff4c 	bl	8007388 <__NVIC_SetPriorityGrouping>
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007506:	f7ff ff63 	bl	80073d0 <__NVIC_GetPriorityGrouping>
 800750a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	6978      	ldr	r0, [r7, #20]
 8007512:	f7ff ffb3 	bl	800747c <NVIC_EncodePriority>
 8007516:	4602      	mov	r2, r0
 8007518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ff82 	bl	8007428 <__NVIC_SetPriority>
}
 8007524:	bf00      	nop
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff ff56 	bl	80073ec <__NVIC_EnableIRQ>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e054      	b.n	8007604 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7f5b      	ldrb	r3, [r3, #29]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7f9 fa1e 	bl	80009ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10c      	bne.n	8007598 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a22      	ldr	r2, [pc, #136]	; (800760c <HAL_CRC_Init+0xc4>)
 8007584:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0218 	bic.w	r2, r2, #24
 8007594:	609a      	str	r2, [r3, #8]
 8007596:	e00c      	b.n	80075b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6899      	ldr	r1, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	461a      	mov	r2, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f834 	bl	8007610 <HAL_CRCEx_Polynomial_Set>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e028      	b.n	8007604 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	795b      	ldrb	r3, [r3, #5]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d105      	bne.n	80075c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f04f 32ff 	mov.w	r2, #4294967295
 80075c2:	611a      	str	r2, [r3, #16]
 80075c4:	e004      	b.n	80075d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6912      	ldr	r2, [r2, #16]
 80075ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699a      	ldr	r2, [r3, #24]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	04c11db7 	.word	0x04c11db7

08007610 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007620:	231f      	movs	r3, #31
 8007622:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007624:	bf00      	nop
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	613a      	str	r2, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <HAL_CRCEx_Polynomial_Set+0x34>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0f0      	beq.n	8007626 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b18      	cmp	r3, #24
 8007648:	d846      	bhi.n	80076d8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <HAL_CRCEx_Polynomial_Set+0x40>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	080076df 	.word	0x080076df
 8007654:	080076d9 	.word	0x080076d9
 8007658:	080076d9 	.word	0x080076d9
 800765c:	080076d9 	.word	0x080076d9
 8007660:	080076d9 	.word	0x080076d9
 8007664:	080076d9 	.word	0x080076d9
 8007668:	080076d9 	.word	0x080076d9
 800766c:	080076d9 	.word	0x080076d9
 8007670:	080076cd 	.word	0x080076cd
 8007674:	080076d9 	.word	0x080076d9
 8007678:	080076d9 	.word	0x080076d9
 800767c:	080076d9 	.word	0x080076d9
 8007680:	080076d9 	.word	0x080076d9
 8007684:	080076d9 	.word	0x080076d9
 8007688:	080076d9 	.word	0x080076d9
 800768c:	080076d9 	.word	0x080076d9
 8007690:	080076c1 	.word	0x080076c1
 8007694:	080076d9 	.word	0x080076d9
 8007698:	080076d9 	.word	0x080076d9
 800769c:	080076d9 	.word	0x080076d9
 80076a0:	080076d9 	.word	0x080076d9
 80076a4:	080076d9 	.word	0x080076d9
 80076a8:	080076d9 	.word	0x080076d9
 80076ac:	080076d9 	.word	0x080076d9
 80076b0:	080076b5 	.word	0x080076b5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b06      	cmp	r3, #6
 80076b8:	d913      	bls.n	80076e2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076be:	e010      	b.n	80076e2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b07      	cmp	r3, #7
 80076c4:	d90f      	bls.n	80076e6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076ca:	e00c      	b.n	80076e6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b0f      	cmp	r3, #15
 80076d0:	d90b      	bls.n	80076ea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076d6:	e008      	b.n	80076ea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
      break;
 80076dc:	e006      	b.n	80076ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076de:	bf00      	nop
 80076e0:	e004      	b.n	80076ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076e2:	bf00      	nop
 80076e4:	e002      	b.n	80076ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076ea:	bf00      	nop
  }
  if (status == HAL_OK)
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f023 0118 	bic.w	r1, r3, #24
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	430a      	orrs	r2, r1
 800770c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800770e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e04f      	b.n	80077ce <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7f9 f98e 	bl	8000a64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b20      	ldr	r3, [pc, #128]	; (80077d8 <HAL_DMA2D_Init+0xbc>)
 8007758:	4013      	ands	r3, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6851      	ldr	r1, [r2, #4]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	69d2      	ldr	r2, [r2, #28]
 8007762:	4311      	orrs	r1, r2
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	430b      	orrs	r3, r1
 800776a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007772:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <HAL_DMA2D_Init+0xc0>)
 8007774:	4013      	ands	r3, r2
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6891      	ldr	r1, [r2, #8]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6992      	ldr	r2, [r2, #24]
 800777e:	4311      	orrs	r1, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	430b      	orrs	r3, r1
 8007786:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <HAL_DMA2D_Init+0xc4>)
 8007790:	4013      	ands	r3, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68d1      	ldr	r1, [r2, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	430b      	orrs	r3, r1
 800779c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	051a      	lsls	r2, r3, #20
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	055b      	lsls	r3, r3, #21
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	fff8ffbf 	.word	0xfff8ffbf
 80077dc:	fffffef8 	.word	0xfffffef8
 80077e0:	ffff0000 	.word	0xffff0000

080077e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_DMA2D_ConfigLayer+0x24>
 8007804:	2302      	movs	r3, #2
 8007806:	e092      	b.n	800792e <HAL_DMA2D_ConfigLayer+0x14a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	4613      	mov	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	3328      	adds	r3, #40	; 0x28
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4413      	add	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	041b      	lsls	r3, r3, #16
 8007834:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800783c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007848:	4b3c      	ldr	r3, [pc, #240]	; (800793c <HAL_DMA2D_ConfigLayer+0x158>)
 800784a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b0a      	cmp	r3, #10
 8007852:	d003      	beq.n	800785c <HAL_DMA2D_ConfigLayer+0x78>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b09      	cmp	r3, #9
 800785a:	d107      	bne.n	800786c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	e005      	b.n	8007878 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	061b      	lsls	r3, r3, #24
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d120      	bne.n	80078c0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	43db      	mvns	r3, r3
 8007888:	ea02 0103 	and.w	r1, r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	430a      	orrs	r2, r1
 8007894:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b0a      	cmp	r3, #10
 80078a6:	d003      	beq.n	80078b0 <HAL_DMA2D_ConfigLayer+0xcc>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	d135      	bne.n	800791c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80078bc:	629a      	str	r2, [r3, #40]	; 0x28
 80078be:	e02d      	b.n	800791c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b0b      	cmp	r3, #11
 80078c6:	d109      	bne.n	80078dc <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	049b      	lsls	r3, r3, #18
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80078da:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69da      	ldr	r2, [r3, #28]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	ea02 0103 	and.w	r1, r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b0a      	cmp	r3, #10
 8007904:	d003      	beq.n	800790e <HAL_DMA2D_ConfigLayer+0x12a>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b09      	cmp	r3, #9
 800790c:	d106      	bne.n	800791c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800791a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	ff33000f 	.word	0xff33000f

08007940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	; 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800794e:	4b89      	ldr	r3, [pc, #548]	; (8007b74 <HAL_GPIO_Init+0x234>)
 8007950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007952:	e194      	b.n	8007c7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	2101      	movs	r1, #1
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	fa01 f303 	lsl.w	r3, r1, r3
 8007960:	4013      	ands	r3, r2
 8007962:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8186 	beq.w	8007c78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	2b01      	cmp	r3, #1
 8007976:	d005      	beq.n	8007984 <HAL_GPIO_Init+0x44>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f003 0303 	and.w	r3, r3, #3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d130      	bne.n	80079e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	2203      	movs	r2, #3
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	43db      	mvns	r3, r3
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4013      	ands	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079ba:	2201      	movs	r2, #1
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	43db      	mvns	r3, r3
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	4013      	ands	r3, r2
 80079c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	f003 0201 	and.w	r2, r3, #1
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	4313      	orrs	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d017      	beq.n	8007a22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	2203      	movs	r2, #3
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	43db      	mvns	r3, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	4013      	ands	r3, r2
 8007a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d123      	bne.n	8007a76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	08da      	lsrs	r2, r3, #3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3208      	adds	r2, #8
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	220f      	movs	r2, #15
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	08da      	lsrs	r2, r3, #3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3208      	adds	r2, #8
 8007a70:	69b9      	ldr	r1, [r7, #24]
 8007a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	2203      	movs	r2, #3
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43db      	mvns	r3, r3
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f003 0203 	and.w	r2, r3, #3
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80e0 	beq.w	8007c78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ab8:	4b2f      	ldr	r3, [pc, #188]	; (8007b78 <HAL_GPIO_Init+0x238>)
 8007aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007abe:	4a2e      	ldr	r2, [pc, #184]	; (8007b78 <HAL_GPIO_Init+0x238>)
 8007ac0:	f043 0302 	orr.w	r3, r3, #2
 8007ac4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ac8:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <HAL_GPIO_Init+0x238>)
 8007aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ad6:	4a29      	ldr	r2, [pc, #164]	; (8007b7c <HAL_GPIO_Init+0x23c>)
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	089b      	lsrs	r3, r3, #2
 8007adc:	3302      	adds	r3, #2
 8007ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	220f      	movs	r2, #15
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a20      	ldr	r2, [pc, #128]	; (8007b80 <HAL_GPIO_Init+0x240>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d052      	beq.n	8007ba8 <HAL_GPIO_Init+0x268>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <HAL_GPIO_Init+0x244>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d031      	beq.n	8007b6e <HAL_GPIO_Init+0x22e>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <HAL_GPIO_Init+0x248>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d02b      	beq.n	8007b6a <HAL_GPIO_Init+0x22a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <HAL_GPIO_Init+0x24c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d025      	beq.n	8007b66 <HAL_GPIO_Init+0x226>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1c      	ldr	r2, [pc, #112]	; (8007b90 <HAL_GPIO_Init+0x250>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01f      	beq.n	8007b62 <HAL_GPIO_Init+0x222>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1b      	ldr	r2, [pc, #108]	; (8007b94 <HAL_GPIO_Init+0x254>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d019      	beq.n	8007b5e <HAL_GPIO_Init+0x21e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1a      	ldr	r2, [pc, #104]	; (8007b98 <HAL_GPIO_Init+0x258>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d013      	beq.n	8007b5a <HAL_GPIO_Init+0x21a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a19      	ldr	r2, [pc, #100]	; (8007b9c <HAL_GPIO_Init+0x25c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00d      	beq.n	8007b56 <HAL_GPIO_Init+0x216>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a18      	ldr	r2, [pc, #96]	; (8007ba0 <HAL_GPIO_Init+0x260>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d007      	beq.n	8007b52 <HAL_GPIO_Init+0x212>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a17      	ldr	r2, [pc, #92]	; (8007ba4 <HAL_GPIO_Init+0x264>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d101      	bne.n	8007b4e <HAL_GPIO_Init+0x20e>
 8007b4a:	2309      	movs	r3, #9
 8007b4c:	e02d      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b4e:	230a      	movs	r3, #10
 8007b50:	e02b      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b52:	2308      	movs	r3, #8
 8007b54:	e029      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b56:	2307      	movs	r3, #7
 8007b58:	e027      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b5a:	2306      	movs	r3, #6
 8007b5c:	e025      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b5e:	2305      	movs	r3, #5
 8007b60:	e023      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b62:	2304      	movs	r3, #4
 8007b64:	e021      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b66:	2303      	movs	r3, #3
 8007b68:	e01f      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e01d      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e01b      	b.n	8007baa <HAL_GPIO_Init+0x26a>
 8007b72:	bf00      	nop
 8007b74:	58000080 	.word	0x58000080
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	58000400 	.word	0x58000400
 8007b80:	58020000 	.word	0x58020000
 8007b84:	58020400 	.word	0x58020400
 8007b88:	58020800 	.word	0x58020800
 8007b8c:	58020c00 	.word	0x58020c00
 8007b90:	58021000 	.word	0x58021000
 8007b94:	58021400 	.word	0x58021400
 8007b98:	58021800 	.word	0x58021800
 8007b9c:	58021c00 	.word	0x58021c00
 8007ba0:	58022000 	.word	0x58022000
 8007ba4:	58022400 	.word	0x58022400
 8007ba8:	2300      	movs	r3, #0
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	f002 0203 	and.w	r2, r2, #3
 8007bb0:	0092      	lsls	r2, r2, #2
 8007bb2:	4093      	lsls	r3, r2
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bba:	4938      	ldr	r1, [pc, #224]	; (8007c9c <HAL_GPIO_Init+0x35c>)
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	089b      	lsrs	r3, r3, #2
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	43db      	mvns	r3, r3
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	4013      	ands	r3, r2
 8007c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	4013      	ands	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	43db      	mvns	r3, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f47f ae63 	bne.w	8007954 <HAL_GPIO_Init+0x14>
  }
}
 8007c8e:	bf00      	nop
 8007c90:	bf00      	nop
 8007c92:	3724      	adds	r7, #36	; 0x24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	58000400 	.word	0x58000400

08007ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	887b      	ldrh	r3, [r7, #2]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	73fb      	strb	r3, [r7, #15]
 8007cbc:	e001      	b.n	8007cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	807b      	strh	r3, [r7, #2]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ce0:	787b      	ldrb	r3, [r7, #1]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ce6:	887a      	ldrh	r2, [r7, #2]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007cec:	e003      	b.n	8007cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007cee:	887b      	ldrh	r3, [r7, #2]
 8007cf0:	041a      	lsls	r2, r3, #16
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	619a      	str	r2, [r3, #24]
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d14:	887a      	ldrh	r2, [r7, #2]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	041a      	lsls	r2, r3, #16
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	43d9      	mvns	r1, r3
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	400b      	ands	r3, r1
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	619a      	str	r2, [r3, #24]
}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d48:	88fb      	ldrh	r3, [r7, #6]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 f804 	bl	8007d6a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	4603      	mov	r3, r0
 8007d72:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e0bf      	b.n	8007f12 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fa fef6 	bl	8002b98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007dc2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6999      	ldr	r1, [r3, #24]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dd8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6899      	ldr	r1, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b4a      	ldr	r3, [pc, #296]	; (8007f1c <HAL_LTDC_Init+0x19c>)
 8007df4:	400b      	ands	r3, r1
 8007df6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	041b      	lsls	r3, r3, #16
 8007dfe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6899      	ldr	r1, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68d9      	ldr	r1, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	4b3e      	ldr	r3, [pc, #248]	; (8007f1c <HAL_LTDC_Init+0x19c>)
 8007e22:	400b      	ands	r3, r1
 8007e24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	041b      	lsls	r3, r3, #16
 8007e2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68d9      	ldr	r1, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1a      	ldr	r2, [r3, #32]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6919      	ldr	r1, [r3, #16]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b33      	ldr	r3, [pc, #204]	; (8007f1c <HAL_LTDC_Init+0x19c>)
 8007e50:	400b      	ands	r3, r1
 8007e52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	041b      	lsls	r3, r3, #16
 8007e5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6919      	ldr	r1, [r3, #16]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6959      	ldr	r1, [r3, #20]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	4b27      	ldr	r3, [pc, #156]	; (8007f1c <HAL_LTDC_Init+0x19c>)
 8007e7e:	400b      	ands	r3, r1
 8007e80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6959      	ldr	r1, [r3, #20]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007eb0:	041b      	lsls	r3, r3, #16
 8007eb2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0206 	orr.w	r2, r2, #6
 8007eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	f000f800 	.word	0xf000f800

08007f20 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d023      	beq.n	8007f8a <HAL_LTDC_IRQHandler+0x6a>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01e      	beq.n	8007f8a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0204 	bic.w	r2, r2, #4
 8007f5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2204      	movs	r2, #4
 8007f62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f6a:	f043 0201 	orr.w	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2204      	movs	r2, #4
 8007f78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f86f 	bl	8008068 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d023      	beq.n	8007fdc <HAL_LTDC_IRQHandler+0xbc>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01e      	beq.n	8007fdc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0202 	bic.w	r2, r2, #2
 8007fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fbc:	f043 0202 	orr.w	r2, r3, #2
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2204      	movs	r2, #4
 8007fca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f846 	bl	8008068 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01b      	beq.n	800801e <HAL_LTDC_IRQHandler+0xfe>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d016      	beq.n	800801e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0201 	bic.w	r2, r2, #1
 8007ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2201      	movs	r2, #1
 8008006:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f010 ff1b 	bl	8018e54 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f003 0308 	and.w	r3, r3, #8
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01b      	beq.n	8008060 <HAL_LTDC_IRQHandler+0x140>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d016      	beq.n	8008060 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0208 	bic.w	r2, r2, #8
 8008040:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2208      	movs	r2, #8
 8008048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f80e 	bl	800807c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008090:	b5b0      	push	{r4, r5, r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_LTDC_ConfigLayer+0x1a>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e02c      	b.n	8008104 <HAL_LTDC_ConfigLayer+0x74>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2134      	movs	r1, #52	; 0x34
 80080c0:	fb01 f303 	mul.w	r3, r1, r3
 80080c4:	4413      	add	r3, r2
 80080c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	4614      	mov	r4, r2
 80080ce:	461d      	mov	r5, r3
 80080d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	68b9      	ldr	r1, [r7, #8]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f849 	bl	800817c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2201      	movs	r2, #1
 80080f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bdb0      	pop	{r4, r5, r7, pc}

0800810c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_LTDC_ProgramLineEvent+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e023      	b.n	800816c <HAL_LTDC_ProgramLineEvent+0x60>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8008144:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	50001000 	.word	0x50001000

0800817c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800817c:	b480      	push	{r7}
 800817e:	b089      	sub	sp, #36	; 0x24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008198:	4413      	add	r3, r2
 800819a:	041b      	lsls	r3, r3, #16
 800819c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	01db      	lsls	r3, r3, #7
 80081a8:	4413      	add	r3, r2
 80081aa:	3384      	adds	r3, #132	; 0x84
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	4611      	mov	r1, r2
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	01d2      	lsls	r2, r2, #7
 80081b8:	440a      	add	r2, r1
 80081ba:	3284      	adds	r2, #132	; 0x84
 80081bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80081c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081d2:	4413      	add	r3, r2
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4619      	mov	r1, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	01db      	lsls	r3, r3, #7
 80081e0:	440b      	add	r3, r1
 80081e2:	3384      	adds	r3, #132	; 0x84
 80081e4:	4619      	mov	r1, r3
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081fa:	4413      	add	r3, r2
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	01db      	lsls	r3, r3, #7
 800820a:	4413      	add	r3, r2
 800820c:	3384      	adds	r3, #132	; 0x84
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	6812      	ldr	r2, [r2, #0]
 8008214:	4611      	mov	r1, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	01d2      	lsls	r2, r2, #7
 800821a:	440a      	add	r2, r1
 800821c:	3284      	adds	r2, #132	; 0x84
 800821e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008222:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008232:	4413      	add	r3, r2
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4619      	mov	r1, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	01db      	lsls	r3, r3, #7
 8008240:	440b      	add	r3, r1
 8008242:	3384      	adds	r3, #132	; 0x84
 8008244:	4619      	mov	r1, r3
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4313      	orrs	r3, r2
 800824a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	461a      	mov	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	01db      	lsls	r3, r3, #7
 8008256:	4413      	add	r3, r2
 8008258:	3384      	adds	r3, #132	; 0x84
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	4611      	mov	r1, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	01d2      	lsls	r2, r2, #7
 8008266:	440a      	add	r2, r1
 8008268:	3284      	adds	r2, #132	; 0x84
 800826a:	f023 0307 	bic.w	r3, r3, #7
 800826e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	01db      	lsls	r3, r3, #7
 800827a:	4413      	add	r3, r2
 800827c:	3384      	adds	r3, #132	; 0x84
 800827e:	461a      	mov	r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008296:	041b      	lsls	r3, r3, #16
 8008298:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	061b      	lsls	r3, r3, #24
 80082a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	01db      	lsls	r3, r3, #7
 80082ac:	4413      	add	r3, r2
 80082ae:	3384      	adds	r3, #132	; 0x84
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	01db      	lsls	r3, r3, #7
 80082bc:	4413      	add	r3, r2
 80082be:	3384      	adds	r3, #132	; 0x84
 80082c0:	461a      	mov	r2, r3
 80082c2:	2300      	movs	r3, #0
 80082c4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082cc:	461a      	mov	r2, r3
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	431a      	orrs	r2, r3
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	431a      	orrs	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4619      	mov	r1, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	01db      	lsls	r3, r3, #7
 80082e0:	440b      	add	r3, r1
 80082e2:	3384      	adds	r3, #132	; 0x84
 80082e4:	4619      	mov	r1, r3
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	01db      	lsls	r3, r3, #7
 80082f6:	4413      	add	r3, r2
 80082f8:	3384      	adds	r3, #132	; 0x84
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	6812      	ldr	r2, [r2, #0]
 8008300:	4611      	mov	r1, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	01d2      	lsls	r2, r2, #7
 8008306:	440a      	add	r2, r1
 8008308:	3284      	adds	r2, #132	; 0x84
 800830a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800830e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	01db      	lsls	r3, r3, #7
 800831a:	4413      	add	r3, r2
 800831c:	3384      	adds	r3, #132	; 0x84
 800831e:	461a      	mov	r2, r3
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	01db      	lsls	r3, r3, #7
 8008330:	4413      	add	r3, r2
 8008332:	3384      	adds	r3, #132	; 0x84
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	01db      	lsls	r3, r3, #7
 8008340:	440b      	add	r3, r1
 8008342:	3384      	adds	r3, #132	; 0x84
 8008344:	4619      	mov	r1, r3
 8008346:	4b58      	ldr	r3, [pc, #352]	; (80084a8 <LTDC_SetConfig+0x32c>)
 8008348:	4013      	ands	r3, r2
 800834a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	6809      	ldr	r1, [r1, #0]
 8008358:	4608      	mov	r0, r1
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	01c9      	lsls	r1, r1, #7
 800835e:	4401      	add	r1, r0
 8008360:	3184      	adds	r1, #132	; 0x84
 8008362:	4313      	orrs	r3, r2
 8008364:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	01db      	lsls	r3, r3, #7
 8008370:	4413      	add	r3, r2
 8008372:	3384      	adds	r3, #132	; 0x84
 8008374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	01db      	lsls	r3, r3, #7
 8008380:	4413      	add	r3, r2
 8008382:	3384      	adds	r3, #132	; 0x84
 8008384:	461a      	mov	r2, r3
 8008386:	2300      	movs	r3, #0
 8008388:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	01db      	lsls	r3, r3, #7
 8008394:	4413      	add	r3, r2
 8008396:	3384      	adds	r3, #132	; 0x84
 8008398:	461a      	mov	r2, r3
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80083a8:	2304      	movs	r3, #4
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	e01b      	b.n	80083e6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d102      	bne.n	80083bc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80083b6:	2303      	movs	r3, #3
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	e014      	b.n	80083e6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d00b      	beq.n	80083dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d007      	beq.n	80083dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d003      	beq.n	80083dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80083d8:	2b07      	cmp	r3, #7
 80083da:	d102      	bne.n	80083e2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80083dc:	2302      	movs	r3, #2
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	e001      	b.n	80083e6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80083e2:	2301      	movs	r3, #1
 80083e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	01db      	lsls	r3, r3, #7
 80083f0:	4413      	add	r3, r2
 80083f2:	3384      	adds	r3, #132	; 0x84
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	6812      	ldr	r2, [r2, #0]
 80083fa:	4611      	mov	r1, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	01d2      	lsls	r2, r2, #7
 8008400:	440a      	add	r2, r1
 8008402:	3284      	adds	r2, #132	; 0x84
 8008404:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008408:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	041a      	lsls	r2, r3, #16
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6859      	ldr	r1, [r3, #4]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	1acb      	subs	r3, r1, r3
 8008420:	69f9      	ldr	r1, [r7, #28]
 8008422:	fb01 f303 	mul.w	r3, r1, r3
 8008426:	3307      	adds	r3, #7
 8008428:	68f9      	ldr	r1, [r7, #12]
 800842a:	6809      	ldr	r1, [r1, #0]
 800842c:	4608      	mov	r0, r1
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	01c9      	lsls	r1, r1, #7
 8008432:	4401      	add	r1, r0
 8008434:	3184      	adds	r1, #132	; 0x84
 8008436:	4313      	orrs	r3, r2
 8008438:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	01db      	lsls	r3, r3, #7
 8008444:	4413      	add	r3, r2
 8008446:	3384      	adds	r3, #132	; 0x84
 8008448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4619      	mov	r1, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	01db      	lsls	r3, r3, #7
 8008454:	440b      	add	r3, r1
 8008456:	3384      	adds	r3, #132	; 0x84
 8008458:	4619      	mov	r1, r3
 800845a:	4b14      	ldr	r3, [pc, #80]	; (80084ac <LTDC_SetConfig+0x330>)
 800845c:	4013      	ands	r3, r2
 800845e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	01db      	lsls	r3, r3, #7
 800846a:	4413      	add	r3, r2
 800846c:	3384      	adds	r3, #132	; 0x84
 800846e:	461a      	mov	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	01db      	lsls	r3, r3, #7
 8008480:	4413      	add	r3, r2
 8008482:	3384      	adds	r3, #132	; 0x84
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	6812      	ldr	r2, [r2, #0]
 800848a:	4611      	mov	r1, r2
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	01d2      	lsls	r2, r2, #7
 8008490:	440a      	add	r2, r1
 8008492:	3284      	adds	r2, #132	; 0x84
 8008494:	f043 0301 	orr.w	r3, r3, #1
 8008498:	6013      	str	r3, [r2, #0]
}
 800849a:	bf00      	nop
 800849c:	3724      	adds	r7, #36	; 0x24
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	fffff8f8 	.word	0xfffff8f8
 80084ac:	fffff800 	.word	0xfffff800

080084b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80084b8:	4b19      	ldr	r3, [pc, #100]	; (8008520 <HAL_PWREx_ConfigSupply+0x70>)
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d00a      	beq.n	80084da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80084c4:	4b16      	ldr	r3, [pc, #88]	; (8008520 <HAL_PWREx_ConfigSupply+0x70>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d001      	beq.n	80084d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e01f      	b.n	8008516 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e01d      	b.n	8008516 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084da:	4b11      	ldr	r3, [pc, #68]	; (8008520 <HAL_PWREx_ConfigSupply+0x70>)
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f023 0207 	bic.w	r2, r3, #7
 80084e2:	490f      	ldr	r1, [pc, #60]	; (8008520 <HAL_PWREx_ConfigSupply+0x70>)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084ea:	f7fc fa85 	bl	80049f8 <HAL_GetTick>
 80084ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084f0:	e009      	b.n	8008506 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084f2:	f7fc fa81 	bl	80049f8 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008500:	d901      	bls.n	8008506 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e007      	b.n	8008516 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008506:	4b06      	ldr	r3, [pc, #24]	; (8008520 <HAL_PWREx_ConfigSupply+0x70>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800850e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008512:	d1ee      	bne.n	80084f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	58024800 	.word	0x58024800

08008524 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af02      	add	r7, sp, #8
 800852a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800852c:	f7fc fa64 	bl	80049f8 <HAL_GetTick>
 8008530:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e05f      	b.n	80085fc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d107      	bne.n	8008558 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7fb f88d 	bl	8003668 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800854e:	f241 3188 	movw	r1, #5000	; 0x1388
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f85a 	bl	800860c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	3b01      	subs	r3, #1
 8008568:	021a      	lsls	r2, r3, #8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	2120      	movs	r1, #32
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f852 	bl	8008628 <QSPI_WaitFlagStateUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d135      	bne.n	80085fa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <HAL_QSPI_Init+0xe0>)
 8008596:	4013      	ands	r3, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6852      	ldr	r2, [r2, #4]
 800859c:	0611      	lsls	r1, r2, #24
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	68d2      	ldr	r2, [r2, #12]
 80085a2:	4311      	orrs	r1, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	69d2      	ldr	r2, [r2, #28]
 80085a8:	4311      	orrs	r1, r2
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6a12      	ldr	r2, [r2, #32]
 80085ae:	4311      	orrs	r1, r2
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	430b      	orrs	r3, r1
 80085b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <HAL_QSPI_Init+0xe4>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6912      	ldr	r2, [r2, #16]
 80085c6:	0411      	lsls	r1, r2, #16
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6952      	ldr	r2, [r2, #20]
 80085cc:	4311      	orrs	r1, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6992      	ldr	r2, [r2, #24]
 80085d2:	4311      	orrs	r1, r2
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	430b      	orrs	r3, r1
 80085da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80085fa:	7afb      	ldrb	r3, [r7, #11]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	00ffff2f 	.word	0x00ffff2f
 8008608:	ffe0f8fe 	.word	0xffe0f8fe

0800860c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008638:	e01a      	b.n	8008670 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d016      	beq.n	8008670 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008642:	f7fc f9d9 	bl	80049f8 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10b      	bne.n	8008670 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2204      	movs	r2, #4
 800865c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008664:	f043 0201 	orr.w	r2, r3, #1
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e00e      	b.n	800868e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	429a      	cmp	r2, r3
 800868a:	d1d6      	bne.n	800863a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08c      	sub	sp, #48	; 0x30
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	f000 bc1d 	b.w	8008ee6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8087 	beq.w	80087c8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ba:	4b99      	ldr	r3, [pc, #612]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086c4:	4b96      	ldr	r3, [pc, #600]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d007      	beq.n	80086e0 <HAL_RCC_OscConfig+0x48>
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	2b18      	cmp	r3, #24
 80086d4:	d110      	bne.n	80086f8 <HAL_RCC_OscConfig+0x60>
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d10b      	bne.n	80086f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e0:	4b8f      	ldr	r3, [pc, #572]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d06c      	beq.n	80087c6 <HAL_RCC_OscConfig+0x12e>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d168      	bne.n	80087c6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e3f6      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008700:	d106      	bne.n	8008710 <HAL_RCC_OscConfig+0x78>
 8008702:	4b87      	ldr	r3, [pc, #540]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a86      	ldr	r2, [pc, #536]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	e02e      	b.n	800876e <HAL_RCC_OscConfig+0xd6>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10c      	bne.n	8008732 <HAL_RCC_OscConfig+0x9a>
 8008718:	4b81      	ldr	r3, [pc, #516]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a80      	ldr	r2, [pc, #512]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800871e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	4b7e      	ldr	r3, [pc, #504]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a7d      	ldr	r2, [pc, #500]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800872a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	e01d      	b.n	800876e <HAL_RCC_OscConfig+0xd6>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800873a:	d10c      	bne.n	8008756 <HAL_RCC_OscConfig+0xbe>
 800873c:	4b78      	ldr	r3, [pc, #480]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a77      	ldr	r2, [pc, #476]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	4b75      	ldr	r3, [pc, #468]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a74      	ldr	r2, [pc, #464]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800874e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	e00b      	b.n	800876e <HAL_RCC_OscConfig+0xd6>
 8008756:	4b72      	ldr	r3, [pc, #456]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a71      	ldr	r2, [pc, #452]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800875c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	4b6f      	ldr	r3, [pc, #444]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a6e      	ldr	r2, [pc, #440]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800876c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d013      	beq.n	800879e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008776:	f7fc f93f 	bl	80049f8 <HAL_GetTick>
 800877a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800877e:	f7fc f93b 	bl	80049f8 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b64      	cmp	r3, #100	; 0x64
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e3aa      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008790:	4b63      	ldr	r3, [pc, #396]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0f0      	beq.n	800877e <HAL_RCC_OscConfig+0xe6>
 800879c:	e014      	b.n	80087c8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879e:	f7fc f92b 	bl	80049f8 <HAL_GetTick>
 80087a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087a6:	f7fc f927 	bl	80049f8 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b64      	cmp	r3, #100	; 0x64
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e396      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087b8:	4b59      	ldr	r3, [pc, #356]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f0      	bne.n	80087a6 <HAL_RCC_OscConfig+0x10e>
 80087c4:	e000      	b.n	80087c8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80cb 	beq.w	800896c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087d6:	4b52      	ldr	r3, [pc, #328]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087e0:	4b4f      	ldr	r3, [pc, #316]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <HAL_RCC_OscConfig+0x164>
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	2b18      	cmp	r3, #24
 80087f0:	d156      	bne.n	80088a0 <HAL_RCC_OscConfig+0x208>
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d151      	bne.n	80088a0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087fc:	4b48      	ldr	r3, [pc, #288]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <HAL_RCC_OscConfig+0x17c>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e368      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008814:	4b42      	ldr	r3, [pc, #264]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f023 0219 	bic.w	r2, r3, #25
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	493f      	ldr	r1, [pc, #252]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008822:	4313      	orrs	r3, r2
 8008824:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008826:	f7fc f8e7 	bl	80049f8 <HAL_GetTick>
 800882a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800882c:	e008      	b.n	8008840 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800882e:	f7fc f8e3 	bl	80049f8 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e352      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008840:	4b37      	ldr	r3, [pc, #220]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0f0      	beq.n	800882e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800884c:	f7fc f904 	bl	8004a58 <HAL_GetREVID>
 8008850:	4603      	mov	r3, r0
 8008852:	f241 0203 	movw	r2, #4099	; 0x1003
 8008856:	4293      	cmp	r3, r2
 8008858:	d817      	bhi.n	800888a <HAL_RCC_OscConfig+0x1f2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d108      	bne.n	8008874 <HAL_RCC_OscConfig+0x1dc>
 8008862:	4b2f      	ldr	r3, [pc, #188]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800886a:	4a2d      	ldr	r2, [pc, #180]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800886c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008870:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008872:	e07b      	b.n	800896c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008874:	4b2a      	ldr	r3, [pc, #168]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	031b      	lsls	r3, r3, #12
 8008882:	4927      	ldr	r1, [pc, #156]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008884:	4313      	orrs	r3, r2
 8008886:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008888:	e070      	b.n	800896c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888a:	4b25      	ldr	r3, [pc, #148]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	061b      	lsls	r3, r3, #24
 8008898:	4921      	ldr	r1, [pc, #132]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800889a:	4313      	orrs	r3, r2
 800889c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800889e:	e065      	b.n	800896c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d048      	beq.n	800893a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f023 0219 	bic.w	r2, r3, #25
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	491a      	ldr	r1, [pc, #104]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ba:	f7fc f89d 	bl	80049f8 <HAL_GetTick>
 80088be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088c2:	f7fc f899 	bl	80049f8 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e308      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088d4:	4b12      	ldr	r3, [pc, #72]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f0      	beq.n	80088c2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088e0:	f7fc f8ba 	bl	8004a58 <HAL_GetREVID>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d81a      	bhi.n	8008924 <HAL_RCC_OscConfig+0x28c>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d108      	bne.n	8008908 <HAL_RCC_OscConfig+0x270>
 80088f6:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088fe:	4a08      	ldr	r2, [pc, #32]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008904:	6053      	str	r3, [r2, #4]
 8008906:	e031      	b.n	800896c <HAL_RCC_OscConfig+0x2d4>
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	4902      	ldr	r1, [pc, #8]	; (8008920 <HAL_RCC_OscConfig+0x288>)
 8008918:	4313      	orrs	r3, r2
 800891a:	604b      	str	r3, [r1, #4]
 800891c:	e026      	b.n	800896c <HAL_RCC_OscConfig+0x2d4>
 800891e:	bf00      	nop
 8008920:	58024400 	.word	0x58024400
 8008924:	4b9a      	ldr	r3, [pc, #616]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	061b      	lsls	r3, r3, #24
 8008932:	4997      	ldr	r1, [pc, #604]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008934:	4313      	orrs	r3, r2
 8008936:	604b      	str	r3, [r1, #4]
 8008938:	e018      	b.n	800896c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800893a:	4b95      	ldr	r3, [pc, #596]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a94      	ldr	r2, [pc, #592]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008946:	f7fc f857 	bl	80049f8 <HAL_GetTick>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800894e:	f7fc f853 	bl	80049f8 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e2c2      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008960:	4b8b      	ldr	r3, [pc, #556]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f0      	bne.n	800894e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80a9 	beq.w	8008acc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800897a:	4b85      	ldr	r3, [pc, #532]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008982:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008984:	4b82      	ldr	r3, [pc, #520]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008988:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d007      	beq.n	80089a0 <HAL_RCC_OscConfig+0x308>
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b18      	cmp	r3, #24
 8008994:	d13a      	bne.n	8008a0c <HAL_RCC_OscConfig+0x374>
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d135      	bne.n	8008a0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089a0:	4b7b      	ldr	r3, [pc, #492]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <HAL_RCC_OscConfig+0x320>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	2b80      	cmp	r3, #128	; 0x80
 80089b2:	d001      	beq.n	80089b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e296      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089b8:	f7fc f84e 	bl	8004a58 <HAL_GetREVID>
 80089bc:	4603      	mov	r3, r0
 80089be:	f241 0203 	movw	r2, #4099	; 0x1003
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d817      	bhi.n	80089f6 <HAL_RCC_OscConfig+0x35e>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	d108      	bne.n	80089e0 <HAL_RCC_OscConfig+0x348>
 80089ce:	4b70      	ldr	r3, [pc, #448]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089d6:	4a6e      	ldr	r2, [pc, #440]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 80089d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089de:	e075      	b.n	8008acc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089e0:	4b6b      	ldr	r3, [pc, #428]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	069b      	lsls	r3, r3, #26
 80089ee:	4968      	ldr	r1, [pc, #416]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089f4:	e06a      	b.n	8008acc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089f6:	4b66      	ldr	r3, [pc, #408]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	061b      	lsls	r3, r3, #24
 8008a04:	4962      	ldr	r1, [pc, #392]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a0a:	e05f      	b.n	8008acc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d042      	beq.n	8008a9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a14:	4b5e      	ldr	r3, [pc, #376]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a5d      	ldr	r2, [pc, #372]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a20:	f7fb ffea 	bl	80049f8 <HAL_GetTick>
 8008a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a28:	f7fb ffe6 	bl	80049f8 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e255      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a3a:	4b55      	ldr	r3, [pc, #340]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f0      	beq.n	8008a28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a46:	f7fc f807 	bl	8004a58 <HAL_GetREVID>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d817      	bhi.n	8008a84 <HAL_RCC_OscConfig+0x3ec>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d108      	bne.n	8008a6e <HAL_RCC_OscConfig+0x3d6>
 8008a5c:	4b4c      	ldr	r3, [pc, #304]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a64:	4a4a      	ldr	r2, [pc, #296]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a6a:	6053      	str	r3, [r2, #4]
 8008a6c:	e02e      	b.n	8008acc <HAL_RCC_OscConfig+0x434>
 8008a6e:	4b48      	ldr	r3, [pc, #288]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	069b      	lsls	r3, r3, #26
 8008a7c:	4944      	ldr	r1, [pc, #272]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	604b      	str	r3, [r1, #4]
 8008a82:	e023      	b.n	8008acc <HAL_RCC_OscConfig+0x434>
 8008a84:	4b42      	ldr	r3, [pc, #264]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	061b      	lsls	r3, r3, #24
 8008a92:	493f      	ldr	r1, [pc, #252]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60cb      	str	r3, [r1, #12]
 8008a98:	e018      	b.n	8008acc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a9a:	4b3d      	ldr	r3, [pc, #244]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a3c      	ldr	r2, [pc, #240]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa6:	f7fb ffa7 	bl	80049f8 <HAL_GetTick>
 8008aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008aac:	e008      	b.n	8008ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008aae:	f7fb ffa3 	bl	80049f8 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e212      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ac0:	4b33      	ldr	r3, [pc, #204]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1f0      	bne.n	8008aae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0308 	and.w	r3, r3, #8
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d036      	beq.n	8008b46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d019      	beq.n	8008b14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ae0:	4b2b      	ldr	r3, [pc, #172]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae4:	4a2a      	ldr	r2, [pc, #168]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aec:	f7fb ff84 	bl	80049f8 <HAL_GetTick>
 8008af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008af4:	f7fb ff80 	bl	80049f8 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e1ef      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b06:	4b22      	ldr	r3, [pc, #136]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCC_OscConfig+0x45c>
 8008b12:	e018      	b.n	8008b46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b14:	4b1e      	ldr	r3, [pc, #120]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b18:	4a1d      	ldr	r2, [pc, #116]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008b1a:	f023 0301 	bic.w	r3, r3, #1
 8008b1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b20:	f7fb ff6a 	bl	80049f8 <HAL_GetTick>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b28:	f7fb ff66 	bl	80049f8 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e1d5      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d039      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d01c      	beq.n	8008b94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b5a:	4b0d      	ldr	r3, [pc, #52]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a0c      	ldr	r2, [pc, #48]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b66:	f7fb ff47 	bl	80049f8 <HAL_GetTick>
 8008b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b6c:	e008      	b.n	8008b80 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008b6e:	f7fb ff43 	bl	80049f8 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d901      	bls.n	8008b80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e1b2      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b80:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <HAL_RCC_OscConfig+0x4f8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0f0      	beq.n	8008b6e <HAL_RCC_OscConfig+0x4d6>
 8008b8c:	e01b      	b.n	8008bc6 <HAL_RCC_OscConfig+0x52e>
 8008b8e:	bf00      	nop
 8008b90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b94:	4b9b      	ldr	r3, [pc, #620]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a9a      	ldr	r2, [pc, #616]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ba0:	f7fb ff2a 	bl	80049f8 <HAL_GetTick>
 8008ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ba6:	e008      	b.n	8008bba <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ba8:	f7fb ff26 	bl	80049f8 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e195      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bba:	4b92      	ldr	r3, [pc, #584]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1f0      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8081 	beq.w	8008cd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008bd4:	4b8c      	ldr	r3, [pc, #560]	; (8008e08 <HAL_RCC_OscConfig+0x770>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a8b      	ldr	r2, [pc, #556]	; (8008e08 <HAL_RCC_OscConfig+0x770>)
 8008bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008be0:	f7fb ff0a 	bl	80049f8 <HAL_GetTick>
 8008be4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008be8:	f7fb ff06 	bl	80049f8 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b64      	cmp	r3, #100	; 0x64
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e175      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bfa:	4b83      	ldr	r3, [pc, #524]	; (8008e08 <HAL_RCC_OscConfig+0x770>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0f0      	beq.n	8008be8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d106      	bne.n	8008c1c <HAL_RCC_OscConfig+0x584>
 8008c0e:	4b7d      	ldr	r3, [pc, #500]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c12:	4a7c      	ldr	r2, [pc, #496]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c14:	f043 0301 	orr.w	r3, r3, #1
 8008c18:	6713      	str	r3, [r2, #112]	; 0x70
 8008c1a:	e02d      	b.n	8008c78 <HAL_RCC_OscConfig+0x5e0>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10c      	bne.n	8008c3e <HAL_RCC_OscConfig+0x5a6>
 8008c24:	4b77      	ldr	r3, [pc, #476]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c28:	4a76      	ldr	r2, [pc, #472]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c2a:	f023 0301 	bic.w	r3, r3, #1
 8008c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c30:	4b74      	ldr	r3, [pc, #464]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c34:	4a73      	ldr	r2, [pc, #460]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c36:	f023 0304 	bic.w	r3, r3, #4
 8008c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c3c:	e01c      	b.n	8008c78 <HAL_RCC_OscConfig+0x5e0>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	2b05      	cmp	r3, #5
 8008c44:	d10c      	bne.n	8008c60 <HAL_RCC_OscConfig+0x5c8>
 8008c46:	4b6f      	ldr	r3, [pc, #444]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4a:	4a6e      	ldr	r2, [pc, #440]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c4c:	f043 0304 	orr.w	r3, r3, #4
 8008c50:	6713      	str	r3, [r2, #112]	; 0x70
 8008c52:	4b6c      	ldr	r3, [pc, #432]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c56:	4a6b      	ldr	r2, [pc, #428]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c58:	f043 0301 	orr.w	r3, r3, #1
 8008c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c5e:	e00b      	b.n	8008c78 <HAL_RCC_OscConfig+0x5e0>
 8008c60:	4b68      	ldr	r3, [pc, #416]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c64:	4a67      	ldr	r2, [pc, #412]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c66:	f023 0301 	bic.w	r3, r3, #1
 8008c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c6c:	4b65      	ldr	r3, [pc, #404]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c70:	4a64      	ldr	r2, [pc, #400]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008c72:	f023 0304 	bic.w	r3, r3, #4
 8008c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d015      	beq.n	8008cac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c80:	f7fb feba 	bl	80049f8 <HAL_GetTick>
 8008c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c86:	e00a      	b.n	8008c9e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c88:	f7fb feb6 	bl	80049f8 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e123      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c9e:	4b59      	ldr	r3, [pc, #356]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0ee      	beq.n	8008c88 <HAL_RCC_OscConfig+0x5f0>
 8008caa:	e014      	b.n	8008cd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cac:	f7fb fea4 	bl	80049f8 <HAL_GetTick>
 8008cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cb2:	e00a      	b.n	8008cca <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cb4:	f7fb fea0 	bl	80049f8 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e10d      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cca:	4b4e      	ldr	r3, [pc, #312]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1ee      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8102 	beq.w	8008ee4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ce0:	4b48      	ldr	r3, [pc, #288]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ce8:	2b18      	cmp	r3, #24
 8008cea:	f000 80bd 	beq.w	8008e68 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	f040 809e 	bne.w	8008e34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cf8:	4b42      	ldr	r3, [pc, #264]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a41      	ldr	r2, [pc, #260]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d04:	f7fb fe78 	bl	80049f8 <HAL_GetTick>
 8008d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d0a:	e008      	b.n	8008d1e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d0c:	f7fb fe74 	bl	80049f8 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d901      	bls.n	8008d1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e0e3      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d1e:	4b39      	ldr	r3, [pc, #228]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1f0      	bne.n	8008d0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d2a:	4b36      	ldr	r3, [pc, #216]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d2e:	4b37      	ldr	r3, [pc, #220]	; (8008e0c <HAL_RCC_OscConfig+0x774>)
 8008d30:	4013      	ands	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d3a:	0112      	lsls	r2, r2, #4
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	4931      	ldr	r1, [pc, #196]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	628b      	str	r3, [r1, #40]	; 0x28
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d52:	3b01      	subs	r3, #1
 8008d54:	025b      	lsls	r3, r3, #9
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	041b      	lsls	r3, r3, #16
 8008d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	061b      	lsls	r3, r3, #24
 8008d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d74:	4923      	ldr	r1, [pc, #140]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008d7a:	4b22      	ldr	r3, [pc, #136]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a21      	ldr	r2, [pc, #132]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d86:	4b1f      	ldr	r3, [pc, #124]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8a:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <HAL_RCC_OscConfig+0x778>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d92:	00d2      	lsls	r2, r2, #3
 8008d94:	491b      	ldr	r1, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d9a:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	f023 020c 	bic.w	r2, r3, #12
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	4917      	ldr	r1, [pc, #92]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008dac:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	f023 0202 	bic.w	r2, r3, #2
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	4912      	ldr	r1, [pc, #72]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	4a10      	ldr	r2, [pc, #64]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dca:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	4a0d      	ldr	r2, [pc, #52]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	4a0a      	ldr	r2, [pc, #40]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008de2:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	4a07      	ldr	r2, [pc, #28]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008de8:	f043 0301 	orr.w	r3, r3, #1
 8008dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <HAL_RCC_OscConfig+0x76c>)
 8008df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfa:	f7fb fdfd 	bl	80049f8 <HAL_GetTick>
 8008dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e00:	e011      	b.n	8008e26 <HAL_RCC_OscConfig+0x78e>
 8008e02:	bf00      	nop
 8008e04:	58024400 	.word	0x58024400
 8008e08:	58024800 	.word	0x58024800
 8008e0c:	fffffc0c 	.word	0xfffffc0c
 8008e10:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e14:	f7fb fdf0 	bl	80049f8 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d901      	bls.n	8008e26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e05f      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e26:	4b32      	ldr	r3, [pc, #200]	; (8008ef0 <HAL_RCC_OscConfig+0x858>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0f0      	beq.n	8008e14 <HAL_RCC_OscConfig+0x77c>
 8008e32:	e057      	b.n	8008ee4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e34:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <HAL_RCC_OscConfig+0x858>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2d      	ldr	r2, [pc, #180]	; (8008ef0 <HAL_RCC_OscConfig+0x858>)
 8008e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e40:	f7fb fdda 	bl	80049f8 <HAL_GetTick>
 8008e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e48:	f7fb fdd6 	bl	80049f8 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e045      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e5a:	4b25      	ldr	r3, [pc, #148]	; (8008ef0 <HAL_RCC_OscConfig+0x858>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f0      	bne.n	8008e48 <HAL_RCC_OscConfig+0x7b0>
 8008e66:	e03d      	b.n	8008ee4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e68:	4b21      	ldr	r3, [pc, #132]	; (8008ef0 <HAL_RCC_OscConfig+0x858>)
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e6e:	4b20      	ldr	r3, [pc, #128]	; (8008ef0 <HAL_RCC_OscConfig+0x858>)
 8008e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e72:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d031      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f003 0203 	and.w	r2, r3, #3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d12a      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	091b      	lsrs	r3, r3, #4
 8008e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d122      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d11a      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	0a5b      	lsrs	r3, r3, #9
 8008eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d111      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	0c1b      	lsrs	r3, r3, #16
 8008ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d108      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	0e1b      	lsrs	r3, r3, #24
 8008ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eda:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d001      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e000      	b.n	8008ee6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3730      	adds	r7, #48	; 0x30
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	58024400 	.word	0x58024400

08008ef4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e19c      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f08:	4b8a      	ldr	r3, [pc, #552]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d910      	bls.n	8008f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f16:	4b87      	ldr	r3, [pc, #540]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f023 020f 	bic.w	r2, r3, #15
 8008f1e:	4985      	ldr	r1, [pc, #532]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f26:	4b83      	ldr	r3, [pc, #524]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d001      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e184      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d010      	beq.n	8008f66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	4b7b      	ldr	r3, [pc, #492]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d908      	bls.n	8008f66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f54:	4b78      	ldr	r3, [pc, #480]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	4975      	ldr	r1, [pc, #468]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d010      	beq.n	8008f94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	4b70      	ldr	r3, [pc, #448]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d908      	bls.n	8008f94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f82:	4b6d      	ldr	r3, [pc, #436]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	496a      	ldr	r1, [pc, #424]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d010      	beq.n	8008fc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	4b64      	ldr	r3, [pc, #400]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d908      	bls.n	8008fc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fb0:	4b61      	ldr	r3, [pc, #388]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	495e      	ldr	r1, [pc, #376]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d010      	beq.n	8008ff0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69da      	ldr	r2, [r3, #28]
 8008fd2:	4b59      	ldr	r3, [pc, #356]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d908      	bls.n	8008ff0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008fde:	4b56      	ldr	r3, [pc, #344]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	4953      	ldr	r1, [pc, #332]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d010      	beq.n	800901e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	4b4d      	ldr	r3, [pc, #308]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	429a      	cmp	r2, r3
 800900a:	d908      	bls.n	800901e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800900c:	4b4a      	ldr	r3, [pc, #296]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f023 020f 	bic.w	r2, r3, #15
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	4947      	ldr	r1, [pc, #284]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 800901a:	4313      	orrs	r3, r2
 800901c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d055      	beq.n	80090d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800902a:	4b43      	ldr	r3, [pc, #268]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	4940      	ldr	r1, [pc, #256]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009038:	4313      	orrs	r3, r2
 800903a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d107      	bne.n	8009054 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009044:	4b3c      	ldr	r3, [pc, #240]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d121      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e0f6      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b03      	cmp	r3, #3
 800905a:	d107      	bne.n	800906c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800905c:	4b36      	ldr	r3, [pc, #216]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d115      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e0ea      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d107      	bne.n	8009084 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009074:	4b30      	ldr	r3, [pc, #192]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e0de      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009084:	4b2c      	ldr	r3, [pc, #176]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0d6      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009094:	4b28      	ldr	r3, [pc, #160]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	f023 0207 	bic.w	r2, r3, #7
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	4925      	ldr	r1, [pc, #148]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a6:	f7fb fca7 	bl	80049f8 <HAL_GetTick>
 80090aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ac:	e00a      	b.n	80090c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ae:	f7fb fca3 	bl	80049f8 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090bc:	4293      	cmp	r3, r2
 80090be:	d901      	bls.n	80090c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e0be      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c4:	4b1c      	ldr	r3, [pc, #112]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d1eb      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d010      	beq.n	8009104 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d208      	bcs.n	8009104 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f2:	4b11      	ldr	r3, [pc, #68]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	f023 020f 	bic.w	r2, r3, #15
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	490e      	ldr	r1, [pc, #56]	; (8009138 <HAL_RCC_ClockConfig+0x244>)
 8009100:	4313      	orrs	r3, r2
 8009102:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009104:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d214      	bcs.n	800913c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009112:	4b08      	ldr	r3, [pc, #32]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f023 020f 	bic.w	r2, r3, #15
 800911a:	4906      	ldr	r1, [pc, #24]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	4313      	orrs	r3, r2
 8009120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009122:	4b04      	ldr	r3, [pc, #16]	; (8009134 <HAL_RCC_ClockConfig+0x240>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d005      	beq.n	800913c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e086      	b.n	8009242 <HAL_RCC_ClockConfig+0x34e>
 8009134:	52002000 	.word	0x52002000
 8009138:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d010      	beq.n	800916a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	4b3f      	ldr	r3, [pc, #252]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009154:	429a      	cmp	r2, r3
 8009156:	d208      	bcs.n	800916a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009158:	4b3c      	ldr	r3, [pc, #240]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	4939      	ldr	r1, [pc, #228]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 8009166:	4313      	orrs	r3, r2
 8009168:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d010      	beq.n	8009198 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695a      	ldr	r2, [r3, #20]
 800917a:	4b34      	ldr	r3, [pc, #208]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009182:	429a      	cmp	r2, r3
 8009184:	d208      	bcs.n	8009198 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009186:	4b31      	ldr	r3, [pc, #196]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	492e      	ldr	r1, [pc, #184]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 8009194:	4313      	orrs	r3, r2
 8009196:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0310 	and.w	r3, r3, #16
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d010      	beq.n	80091c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699a      	ldr	r2, [r3, #24]
 80091a8:	4b28      	ldr	r3, [pc, #160]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d208      	bcs.n	80091c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091b4:	4b25      	ldr	r3, [pc, #148]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	4922      	ldr	r1, [pc, #136]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d010      	beq.n	80091f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	69da      	ldr	r2, [r3, #28]
 80091d6:	4b1d      	ldr	r3, [pc, #116]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091de:	429a      	cmp	r2, r3
 80091e0:	d208      	bcs.n	80091f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80091e2:	4b1a      	ldr	r3, [pc, #104]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	4917      	ldr	r1, [pc, #92]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80091f4:	f000 f834 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 80091f8:	4602      	mov	r2, r0
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	4912      	ldr	r1, [pc, #72]	; (8009250 <HAL_RCC_ClockConfig+0x35c>)
 8009206:	5ccb      	ldrb	r3, [r1, r3]
 8009208:	f003 031f 	and.w	r3, r3, #31
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
 8009210:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009212:	4b0e      	ldr	r3, [pc, #56]	; (800924c <HAL_RCC_ClockConfig+0x358>)
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	4a0d      	ldr	r2, [pc, #52]	; (8009250 <HAL_RCC_ClockConfig+0x35c>)
 800921c:	5cd3      	ldrb	r3, [r2, r3]
 800921e:	f003 031f 	and.w	r3, r3, #31
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	4a0a      	ldr	r2, [pc, #40]	; (8009254 <HAL_RCC_ClockConfig+0x360>)
 800922a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <HAL_RCC_ClockConfig+0x364>)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009232:	4b0a      	ldr	r3, [pc, #40]	; (800925c <HAL_RCC_ClockConfig+0x368>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4618      	mov	r0, r3
 8009238:	f7fa fd40 	bl	8003cbc <HAL_InitTick>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	080220e8 	.word	0x080220e8
 8009254:	20000004 	.word	0x20000004
 8009258:	20000000 	.word	0x20000000
 800925c:	20000008 	.word	0x20000008

08009260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009260:	b480      	push	{r7}
 8009262:	b089      	sub	sp, #36	; 0x24
 8009264:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009266:	4bb3      	ldr	r3, [pc, #716]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800926e:	2b18      	cmp	r3, #24
 8009270:	f200 8155 	bhi.w	800951e <HAL_RCC_GetSysClockFreq+0x2be>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	080092e1 	.word	0x080092e1
 8009280:	0800951f 	.word	0x0800951f
 8009284:	0800951f 	.word	0x0800951f
 8009288:	0800951f 	.word	0x0800951f
 800928c:	0800951f 	.word	0x0800951f
 8009290:	0800951f 	.word	0x0800951f
 8009294:	0800951f 	.word	0x0800951f
 8009298:	0800951f 	.word	0x0800951f
 800929c:	08009307 	.word	0x08009307
 80092a0:	0800951f 	.word	0x0800951f
 80092a4:	0800951f 	.word	0x0800951f
 80092a8:	0800951f 	.word	0x0800951f
 80092ac:	0800951f 	.word	0x0800951f
 80092b0:	0800951f 	.word	0x0800951f
 80092b4:	0800951f 	.word	0x0800951f
 80092b8:	0800951f 	.word	0x0800951f
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	0800951f 	.word	0x0800951f
 80092c4:	0800951f 	.word	0x0800951f
 80092c8:	0800951f 	.word	0x0800951f
 80092cc:	0800951f 	.word	0x0800951f
 80092d0:	0800951f 	.word	0x0800951f
 80092d4:	0800951f 	.word	0x0800951f
 80092d8:	0800951f 	.word	0x0800951f
 80092dc:	08009313 	.word	0x08009313
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092e0:	4b94      	ldr	r3, [pc, #592]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092ec:	4b91      	ldr	r3, [pc, #580]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	08db      	lsrs	r3, r3, #3
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	4a90      	ldr	r2, [pc, #576]	; (8009538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
 80092fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80092fe:	e111      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009300:	4b8d      	ldr	r3, [pc, #564]	; (8009538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009302:	61bb      	str	r3, [r7, #24]
    break;
 8009304:	e10e      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009306:	4b8d      	ldr	r3, [pc, #564]	; (800953c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009308:	61bb      	str	r3, [r7, #24]
    break;
 800930a:	e10b      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800930c:	4b8c      	ldr	r3, [pc, #560]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800930e:	61bb      	str	r3, [r7, #24]
    break;
 8009310:	e108      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009312:	4b88      	ldr	r3, [pc, #544]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800931c:	4b85      	ldr	r3, [pc, #532]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009320:	091b      	lsrs	r3, r3, #4
 8009322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009326:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009328:	4b82      	ldr	r3, [pc, #520]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009332:	4b80      	ldr	r3, [pc, #512]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	08db      	lsrs	r3, r3, #3
 8009338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 80e1 	beq.w	8009518 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b02      	cmp	r3, #2
 800935a:	f000 8083 	beq.w	8009464 <HAL_RCC_GetSysClockFreq+0x204>
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b02      	cmp	r3, #2
 8009362:	f200 80a1 	bhi.w	80094a8 <HAL_RCC_GetSysClockFreq+0x248>
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0x114>
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d056      	beq.n	8009420 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009372:	e099      	b.n	80094a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009374:	4b6f      	ldr	r3, [pc, #444]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d02d      	beq.n	80093dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009380:	4b6c      	ldr	r3, [pc, #432]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	4a6b      	ldr	r2, [pc, #428]	; (8009538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800938c:	fa22 f303 	lsr.w	r3, r2, r3
 8009390:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093aa:	4b62      	ldr	r3, [pc, #392]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80093be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80093da:	e087      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009548 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b51      	ldr	r3, [pc, #324]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009402:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800941e:	e065      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800954c <HAL_RCC_GetSysClockFreq+0x2ec>
 800942e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009432:	4b40      	ldr	r3, [pc, #256]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a02 	vldr	s12, [r7, #8]
 8009446:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009462:	e043      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	4b2f      	ldr	r3, [pc, #188]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009486:	ed97 6a02 	vldr	s12, [r7, #8]
 800948a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800948e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094a6:	e021      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800954c <HAL_RCC_GetSysClockFreq+0x2ec>
 80094b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ba:	4b1e      	ldr	r3, [pc, #120]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094ec:	4b11      	ldr	r3, [pc, #68]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f0:	0a5b      	lsrs	r3, r3, #9
 80094f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f6:	3301      	adds	r3, #1
 80094f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	ee07 3a90 	vmov	s15, r3
 8009500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009504:	edd7 6a07 	vldr	s13, [r7, #28]
 8009508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800950c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009510:	ee17 3a90 	vmov	r3, s15
 8009514:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009516:	e005      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	61bb      	str	r3, [r7, #24]
    break;
 800951c:	e002      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800951e:	4b07      	ldr	r3, [pc, #28]	; (800953c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009520:	61bb      	str	r3, [r7, #24]
    break;
 8009522:	bf00      	nop
  }

  return sysclockfreq;
 8009524:	69bb      	ldr	r3, [r7, #24]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3724      	adds	r7, #36	; 0x24
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	58024400 	.word	0x58024400
 8009538:	03d09000 	.word	0x03d09000
 800953c:	003d0900 	.word	0x003d0900
 8009540:	007a1200 	.word	0x007a1200
 8009544:	46000000 	.word	0x46000000
 8009548:	4c742400 	.word	0x4c742400
 800954c:	4a742400 	.word	0x4a742400
 8009550:	4af42400 	.word	0x4af42400

08009554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800955a:	f7ff fe81 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 800955e:	4602      	mov	r2, r0
 8009560:	4b10      	ldr	r3, [pc, #64]	; (80095a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	0a1b      	lsrs	r3, r3, #8
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	490f      	ldr	r1, [pc, #60]	; (80095a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800956c:	5ccb      	ldrb	r3, [r1, r3]
 800956e:	f003 031f 	and.w	r3, r3, #31
 8009572:	fa22 f303 	lsr.w	r3, r2, r3
 8009576:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f003 030f 	and.w	r3, r3, #15
 8009580:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009582:	5cd3      	ldrb	r3, [r2, r3]
 8009584:	f003 031f 	and.w	r3, r3, #31
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	fa22 f303 	lsr.w	r3, r2, r3
 800958e:	4a07      	ldr	r2, [pc, #28]	; (80095ac <HAL_RCC_GetHCLKFreq+0x58>)
 8009590:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009592:	4a07      	ldr	r2, [pc, #28]	; (80095b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009598:	4b04      	ldr	r3, [pc, #16]	; (80095ac <HAL_RCC_GetHCLKFreq+0x58>)
 800959a:	681b      	ldr	r3, [r3, #0]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	58024400 	.word	0x58024400
 80095a8:	080220e8 	.word	0x080220e8
 80095ac:	20000004 	.word	0x20000004
 80095b0:	20000000 	.word	0x20000000

080095b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095b8:	f7ff ffcc 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 80095bc:	4602      	mov	r2, r0
 80095be:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	091b      	lsrs	r3, r3, #4
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	4904      	ldr	r1, [pc, #16]	; (80095dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80095ca:	5ccb      	ldrb	r3, [r1, r3]
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	58024400 	.word	0x58024400
 80095dc:	080220e8 	.word	0x080220e8

080095e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095e4:	f7ff ffb6 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 80095e8:	4602      	mov	r2, r0
 80095ea:	4b06      	ldr	r3, [pc, #24]	; (8009604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	4904      	ldr	r1, [pc, #16]	; (8009608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80095f6:	5ccb      	ldrb	r3, [r1, r3]
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009600:	4618      	mov	r0, r3
 8009602:	bd80      	pop	{r7, pc}
 8009604:	58024400 	.word	0x58024400
 8009608:	080220e8 	.word	0x080220e8

0800960c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	223f      	movs	r2, #63	; 0x3f
 800961a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800961c:	4b1a      	ldr	r3, [pc, #104]	; (8009688 <HAL_RCC_GetClockConfig+0x7c>)
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f003 0207 	and.w	r2, r3, #7
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009628:	4b17      	ldr	r3, [pc, #92]	; (8009688 <HAL_RCC_GetClockConfig+0x7c>)
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009634:	4b14      	ldr	r3, [pc, #80]	; (8009688 <HAL_RCC_GetClockConfig+0x7c>)
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	f003 020f 	and.w	r2, r3, #15
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009640:	4b11      	ldr	r3, [pc, #68]	; (8009688 <HAL_RCC_GetClockConfig+0x7c>)
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800964c:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <HAL_RCC_GetClockConfig+0x7c>)
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009658:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <HAL_RCC_GetClockConfig+0x7c>)
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009664:	4b08      	ldr	r3, [pc, #32]	; (8009688 <HAL_RCC_GetClockConfig+0x7c>)
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009670:	4b06      	ldr	r3, [pc, #24]	; (800968c <HAL_RCC_GetClockConfig+0x80>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 020f 	and.w	r2, r3, #15
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	601a      	str	r2, [r3, #0]
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	58024400 	.word	0x58024400
 800968c:	52002000 	.word	0x52002000

08009690 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009698:	2300      	movs	r3, #0
 800969a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800969c:	2300      	movs	r3, #0
 800969e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d03f      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096b4:	d02a      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80096b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096ba:	d824      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096c0:	d018      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096c6:	d81e      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d003      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80096cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096d0:	d007      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80096d2:	e018      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d4:	4ba3      	ldr	r3, [pc, #652]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	4aa2      	ldr	r2, [pc, #648]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096e0:	e015      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3304      	adds	r3, #4
 80096e6:	2102      	movs	r1, #2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f001 fff9 	bl	800b6e0 <RCCEx_PLL2_Config>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096f2:	e00c      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3324      	adds	r3, #36	; 0x24
 80096f8:	2102      	movs	r1, #2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f002 f8a2 	bl	800b844 <RCCEx_PLL3_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009704:	e003      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	75fb      	strb	r3, [r7, #23]
      break;
 800970a:	e000      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800970c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009714:	4b93      	ldr	r3, [pc, #588]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009720:	4990      	ldr	r1, [pc, #576]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009722:	4313      	orrs	r3, r2
 8009724:	650b      	str	r3, [r1, #80]	; 0x50
 8009726:	e001      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
 800972a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009734:	2b00      	cmp	r3, #0
 8009736:	d03d      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973c:	2b04      	cmp	r3, #4
 800973e:	d826      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	0800975d 	.word	0x0800975d
 800974c:	0800976b 	.word	0x0800976b
 8009750:	0800977d 	.word	0x0800977d
 8009754:	08009795 	.word	0x08009795
 8009758:	08009795 	.word	0x08009795
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975c:	4b81      	ldr	r3, [pc, #516]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a80      	ldr	r2, [pc, #512]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009768:	e015      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3304      	adds	r3, #4
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f001 ffb5 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009776:	4603      	mov	r3, r0
 8009778:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800977a:	e00c      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3324      	adds	r3, #36	; 0x24
 8009780:	2100      	movs	r1, #0
 8009782:	4618      	mov	r0, r3
 8009784:	f002 f85e 	bl	800b844 <RCCEx_PLL3_Config>
 8009788:	4603      	mov	r3, r0
 800978a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800978c:	e003      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
      break;
 8009792:	e000      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d109      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800979c:	4b71      	ldr	r3, [pc, #452]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800979e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a0:	f023 0207 	bic.w	r2, r3, #7
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a8:	496e      	ldr	r1, [pc, #440]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	650b      	str	r3, [r1, #80]	; 0x50
 80097ae:	e001      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d042      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c8:	d02b      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80097ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ce:	d825      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097d0:	2bc0      	cmp	r3, #192	; 0xc0
 80097d2:	d028      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80097d4:	2bc0      	cmp	r3, #192	; 0xc0
 80097d6:	d821      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097d8:	2b80      	cmp	r3, #128	; 0x80
 80097da:	d016      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80097dc:	2b80      	cmp	r3, #128	; 0x80
 80097de:	d81d      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80097e4:	2b40      	cmp	r3, #64	; 0x40
 80097e6:	d007      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80097e8:	e018      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ea:	4b5e      	ldr	r3, [pc, #376]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ee:	4a5d      	ldr	r2, [pc, #372]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80097f6:	e017      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3304      	adds	r3, #4
 80097fc:	2100      	movs	r1, #0
 80097fe:	4618      	mov	r0, r3
 8009800:	f001 ff6e 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009804:	4603      	mov	r3, r0
 8009806:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009808:	e00e      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3324      	adds	r3, #36	; 0x24
 800980e:	2100      	movs	r1, #0
 8009810:	4618      	mov	r0, r3
 8009812:	f002 f817 	bl	800b844 <RCCEx_PLL3_Config>
 8009816:	4603      	mov	r3, r0
 8009818:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800981a:	e005      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	75fb      	strb	r3, [r7, #23]
      break;
 8009820:	e002      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009822:	bf00      	nop
 8009824:	e000      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d109      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800982e:	4b4d      	ldr	r3, [pc, #308]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009832:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800983a:	494a      	ldr	r1, [pc, #296]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800983c:	4313      	orrs	r3, r2
 800983e:	650b      	str	r3, [r1, #80]	; 0x50
 8009840:	e001      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800984e:	2b00      	cmp	r3, #0
 8009850:	d049      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800985c:	d030      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800985e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009862:	d82a      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009864:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009868:	d02c      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800986a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800986e:	d824      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009874:	d018      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800987a:	d81e      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009884:	d007      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009886:	e018      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009888:	4b36      	ldr	r3, [pc, #216]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	4a35      	ldr	r2, [pc, #212]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800988e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009894:	e017      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3304      	adds	r3, #4
 800989a:	2100      	movs	r1, #0
 800989c:	4618      	mov	r0, r3
 800989e:	f001 ff1f 	bl	800b6e0 <RCCEx_PLL2_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098a6:	e00e      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 ffc8 	bl	800b844 <RCCEx_PLL3_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098b8:	e005      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	75fb      	strb	r3, [r7, #23]
      break;
 80098be:	e002      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098c0:	bf00      	nop
 80098c2:	e000      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098cc:	4b25      	ldr	r3, [pc, #148]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098da:	4922      	ldr	r1, [pc, #136]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	658b      	str	r3, [r1, #88]	; 0x58
 80098e0:	e001      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d04b      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098fc:	d030      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80098fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009902:	d82a      	bhi.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009904:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009908:	d02e      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800990a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800990e:	d824      	bhi.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009914:	d018      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800991a:	d81e      	bhi.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009924:	d007      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009926:	e018      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009928:	4b0e      	ldr	r3, [pc, #56]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800992a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992c:	4a0d      	ldr	r2, [pc, #52]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800992e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009934:	e019      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3304      	adds	r3, #4
 800993a:	2100      	movs	r1, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f001 fecf 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009946:	e010      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3324      	adds	r3, #36	; 0x24
 800994c:	2100      	movs	r1, #0
 800994e:	4618      	mov	r0, r3
 8009950:	f001 ff78 	bl	800b844 <RCCEx_PLL3_Config>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009958:	e007      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	75fb      	strb	r3, [r7, #23]
      break;
 800995e:	e004      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009960:	bf00      	nop
 8009962:	e002      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009964:	58024400 	.word	0x58024400
      break;
 8009968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009970:	4b99      	ldr	r3, [pc, #612]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009974:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800997e:	4996      	ldr	r1, [pc, #600]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009980:	4313      	orrs	r3, r2
 8009982:	658b      	str	r3, [r1, #88]	; 0x58
 8009984:	e001      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d032      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800999a:	2b30      	cmp	r3, #48	; 0x30
 800999c:	d01c      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800999e:	2b30      	cmp	r3, #48	; 0x30
 80099a0:	d817      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	d00c      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d813      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d016      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80099ae:	2b10      	cmp	r3, #16
 80099b0:	d10f      	bne.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b2:	4b89      	ldr	r3, [pc, #548]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b6:	4a88      	ldr	r2, [pc, #544]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099be:	e00e      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	2102      	movs	r1, #2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 fe8a 	bl	800b6e0 <RCCEx_PLL2_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099d0:	e005      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	75fb      	strb	r3, [r7, #23]
      break;
 80099d6:	e002      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099d8:	bf00      	nop
 80099da:	e000      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d109      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099e4:	4b7c      	ldr	r3, [pc, #496]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f0:	4979      	ldr	r1, [pc, #484]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099f6:	e001      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d047      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a10:	d030      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a16:	d82a      	bhi.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a1c:	d02c      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009a1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a22:	d824      	bhi.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a28:	d018      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2e:	d81e      	bhi.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a38:	d007      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009a3a:	e018      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3c:	4b66      	ldr	r3, [pc, #408]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	4a65      	ldr	r2, [pc, #404]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a48:	e017      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4618      	mov	r0, r3
 8009a52:	f001 fe45 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009a56:	4603      	mov	r3, r0
 8009a58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a5a:	e00e      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3324      	adds	r3, #36	; 0x24
 8009a60:	2100      	movs	r1, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 feee 	bl	800b844 <RCCEx_PLL3_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a6c:	e005      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	75fb      	strb	r3, [r7, #23]
      break;
 8009a72:	e002      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a74:	bf00      	nop
 8009a76:	e000      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d109      	bne.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a80:	4b55      	ldr	r3, [pc, #340]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a8c:	4952      	ldr	r1, [pc, #328]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	650b      	str	r3, [r1, #80]	; 0x50
 8009a92:	e001      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a94:	7dfb      	ldrb	r3, [r7, #23]
 8009a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d049      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aac:	d02e      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ab2:	d828      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ab8:	d02a      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009aba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009abe:	d822      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ac4:	d026      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009aca:	d81c      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad0:	d010      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad6:	d816      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01d      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae0:	d111      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 fdf9 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009aee:	4603      	mov	r3, r0
 8009af0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009af2:	e012      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3324      	adds	r3, #36	; 0x24
 8009af8:	2101      	movs	r1, #1
 8009afa:	4618      	mov	r0, r3
 8009afc:	f001 fea2 	bl	800b844 <RCCEx_PLL3_Config>
 8009b00:	4603      	mov	r3, r0
 8009b02:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b04:	e009      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0a:	e006      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b0c:	bf00      	nop
 8009b0e:	e004      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b10:	bf00      	nop
 8009b12:	e002      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b14:	bf00      	nop
 8009b16:	e000      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d109      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b20:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b2c:	492a      	ldr	r1, [pc, #168]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	650b      	str	r3, [r1, #80]	; 0x50
 8009b32:	e001      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
 8009b36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d04d      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b4e:	d02e      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b54:	d828      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5a:	d02a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b60:	d822      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b66:	d026      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009b68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b6c:	d81c      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b72:	d010      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b78:	d816      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d01d      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b82:	d111      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3304      	adds	r3, #4
 8009b88:	2101      	movs	r1, #1
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 fda8 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009b90:	4603      	mov	r3, r0
 8009b92:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b94:	e012      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3324      	adds	r3, #36	; 0x24
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 fe51 	bl	800b844 <RCCEx_PLL3_Config>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ba6:	e009      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]
      break;
 8009bac:	e006      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bae:	bf00      	nop
 8009bb0:	e004      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bb2:	bf00      	nop
 8009bb4:	e002      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bb6:	bf00      	nop
 8009bb8:	e000      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10c      	bne.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bc2:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bd0:	4901      	ldr	r1, [pc, #4]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	658b      	str	r3, [r1, #88]	; 0x58
 8009bd6:	e003      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d02f      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bf4:	d00e      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bfa:	d814      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d015      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c04:	d10f      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c06:	4baf      	ldr	r3, [pc, #700]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	4aae      	ldr	r2, [pc, #696]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c12:	e00c      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3304      	adds	r3, #4
 8009c18:	2101      	movs	r1, #1
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 fd60 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009c20:	4603      	mov	r3, r0
 8009c22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c24:	e003      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	75fb      	strb	r3, [r7, #23]
      break;
 8009c2a:	e000      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d109      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c34:	4ba3      	ldr	r3, [pc, #652]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c40:	49a0      	ldr	r1, [pc, #640]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	650b      	str	r3, [r1, #80]	; 0x50
 8009c46:	e001      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d032      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d81b      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009c9f 	.word	0x08009c9f
 8009c6c:	08009c79 	.word	0x08009c79
 8009c70:	08009c87 	.word	0x08009c87
 8009c74:	08009c9f 	.word	0x08009c9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c78:	4b92      	ldr	r3, [pc, #584]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	4a91      	ldr	r2, [pc, #580]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c84:	e00c      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	2102      	movs	r1, #2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 fd27 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009c92:	4603      	mov	r3, r0
 8009c94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c96:	e003      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c9c:	e000      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ca6:	4b87      	ldr	r3, [pc, #540]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009caa:	f023 0203 	bic.w	r2, r3, #3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb2:	4984      	ldr	r1, [pc, #528]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cb8:	e001      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 8086 	beq.w	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ccc:	4b7e      	ldr	r3, [pc, #504]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a7d      	ldr	r2, [pc, #500]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cd8:	f7fa fe8e 	bl	80049f8 <HAL_GetTick>
 8009cdc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cde:	e009      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ce0:	f7fa fe8a 	bl	80049f8 <HAL_GetTick>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	2b64      	cmp	r3, #100	; 0x64
 8009cec:	d902      	bls.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	75fb      	strb	r3, [r7, #23]
        break;
 8009cf2:	e005      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cf4:	4b74      	ldr	r3, [pc, #464]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0ef      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d166      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d06:	4b6f      	ldr	r3, [pc, #444]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d10:	4053      	eors	r3, r2
 8009d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d013      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d1a:	4b6a      	ldr	r3, [pc, #424]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d24:	4b67      	ldr	r3, [pc, #412]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d28:	4a66      	ldr	r2, [pc, #408]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d30:	4b64      	ldr	r3, [pc, #400]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	4a63      	ldr	r2, [pc, #396]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d3c:	4a61      	ldr	r2, [pc, #388]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4c:	d115      	bne.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d4e:	f7fa fe53 	bl	80049f8 <HAL_GetTick>
 8009d52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d54:	e00b      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d56:	f7fa fe4f 	bl	80049f8 <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d902      	bls.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	75fb      	strb	r3, [r7, #23]
            break;
 8009d6c:	e005      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d6e:	4b55      	ldr	r3, [pc, #340]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0ed      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d126      	bne.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d8e:	d10d      	bne.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009d90:	4b4c      	ldr	r3, [pc, #304]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d9e:	0919      	lsrs	r1, r3, #4
 8009da0:	4b4a      	ldr	r3, [pc, #296]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009da2:	400b      	ands	r3, r1
 8009da4:	4947      	ldr	r1, [pc, #284]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	610b      	str	r3, [r1, #16]
 8009daa:	e005      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009dac:	4b45      	ldr	r3, [pc, #276]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	4a44      	ldr	r2, [pc, #272]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009db2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009db6:	6113      	str	r3, [r2, #16]
 8009db8:	4b42      	ldr	r3, [pc, #264]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dc6:	493f      	ldr	r1, [pc, #252]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	670b      	str	r3, [r1, #112]	; 0x70
 8009dcc:	e004      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	75bb      	strb	r3, [r7, #22]
 8009dd2:	e001      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 8085 	beq.w	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dea:	2b28      	cmp	r3, #40	; 0x28
 8009dec:	d866      	bhi.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009dee:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009ed1 	.word	0x08009ed1
 8009df8:	08009ebd 	.word	0x08009ebd
 8009dfc:	08009ebd 	.word	0x08009ebd
 8009e00:	08009ebd 	.word	0x08009ebd
 8009e04:	08009ebd 	.word	0x08009ebd
 8009e08:	08009ebd 	.word	0x08009ebd
 8009e0c:	08009ebd 	.word	0x08009ebd
 8009e10:	08009ebd 	.word	0x08009ebd
 8009e14:	08009e99 	.word	0x08009e99
 8009e18:	08009ebd 	.word	0x08009ebd
 8009e1c:	08009ebd 	.word	0x08009ebd
 8009e20:	08009ebd 	.word	0x08009ebd
 8009e24:	08009ebd 	.word	0x08009ebd
 8009e28:	08009ebd 	.word	0x08009ebd
 8009e2c:	08009ebd 	.word	0x08009ebd
 8009e30:	08009ebd 	.word	0x08009ebd
 8009e34:	08009eab 	.word	0x08009eab
 8009e38:	08009ebd 	.word	0x08009ebd
 8009e3c:	08009ebd 	.word	0x08009ebd
 8009e40:	08009ebd 	.word	0x08009ebd
 8009e44:	08009ebd 	.word	0x08009ebd
 8009e48:	08009ebd 	.word	0x08009ebd
 8009e4c:	08009ebd 	.word	0x08009ebd
 8009e50:	08009ebd 	.word	0x08009ebd
 8009e54:	08009ed1 	.word	0x08009ed1
 8009e58:	08009ebd 	.word	0x08009ebd
 8009e5c:	08009ebd 	.word	0x08009ebd
 8009e60:	08009ebd 	.word	0x08009ebd
 8009e64:	08009ebd 	.word	0x08009ebd
 8009e68:	08009ebd 	.word	0x08009ebd
 8009e6c:	08009ebd 	.word	0x08009ebd
 8009e70:	08009ebd 	.word	0x08009ebd
 8009e74:	08009ed1 	.word	0x08009ed1
 8009e78:	08009ebd 	.word	0x08009ebd
 8009e7c:	08009ebd 	.word	0x08009ebd
 8009e80:	08009ebd 	.word	0x08009ebd
 8009e84:	08009ebd 	.word	0x08009ebd
 8009e88:	08009ebd 	.word	0x08009ebd
 8009e8c:	08009ebd 	.word	0x08009ebd
 8009e90:	08009ebd 	.word	0x08009ebd
 8009e94:	08009ed1 	.word	0x08009ed1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 fc1e 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ea8:	e013      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3324      	adds	r3, #36	; 0x24
 8009eae:	2101      	movs	r1, #1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 fcc7 	bl	800b844 <RCCEx_PLL3_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009eba:	e00a      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec0:	e007      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009ec2:	bf00      	nop
 8009ec4:	58024400 	.word	0x58024400
 8009ec8:	58024800 	.word	0x58024800
 8009ecc:	00ffffcf 	.word	0x00ffffcf
      break;
 8009ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d109      	bne.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ed8:	4b96      	ldr	r3, [pc, #600]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009edc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ee4:	4993      	ldr	r1, [pc, #588]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	654b      	str	r3, [r1, #84]	; 0x54
 8009eea:	e001      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d038      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f00:	2b05      	cmp	r3, #5
 8009f02:	d821      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009f04:	a201      	add	r2, pc, #4	; (adr r2, 8009f0c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0a:	bf00      	nop
 8009f0c:	08009f4f 	.word	0x08009f4f
 8009f10:	08009f25 	.word	0x08009f25
 8009f14:	08009f37 	.word	0x08009f37
 8009f18:	08009f4f 	.word	0x08009f4f
 8009f1c:	08009f4f 	.word	0x08009f4f
 8009f20:	08009f4f 	.word	0x08009f4f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	2101      	movs	r1, #1
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 fbd8 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f34:	e00c      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3324      	adds	r3, #36	; 0x24
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 fc81 	bl	800b844 <RCCEx_PLL3_Config>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f46:	e003      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4c:	e000      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f56:	4b77      	ldr	r3, [pc, #476]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5a:	f023 0207 	bic.w	r2, r3, #7
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f62:	4974      	ldr	r1, [pc, #464]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	654b      	str	r3, [r1, #84]	; 0x54
 8009f68:	e001      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d03a      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f80:	2b05      	cmp	r3, #5
 8009f82:	d821      	bhi.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009f84:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8a:	bf00      	nop
 8009f8c:	08009fcf 	.word	0x08009fcf
 8009f90:	08009fa5 	.word	0x08009fa5
 8009f94:	08009fb7 	.word	0x08009fb7
 8009f98:	08009fcf 	.word	0x08009fcf
 8009f9c:	08009fcf 	.word	0x08009fcf
 8009fa0:	08009fcf 	.word	0x08009fcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	2101      	movs	r1, #1
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 fb98 	bl	800b6e0 <RCCEx_PLL2_Config>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fb4:	e00c      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3324      	adds	r3, #36	; 0x24
 8009fba:	2101      	movs	r1, #1
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f001 fc41 	bl	800b844 <RCCEx_PLL3_Config>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fc6:	e003      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	75fb      	strb	r3, [r7, #23]
      break;
 8009fcc:	e000      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10a      	bne.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fd6:	4b57      	ldr	r3, [pc, #348]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fda:	f023 0207 	bic.w	r2, r3, #7
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe4:	4953      	ldr	r1, [pc, #332]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	658b      	str	r3, [r1, #88]	; 0x58
 8009fea:	e001      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d04b      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a006:	d02e      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a00c:	d828      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a012:	d02a      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a018:	d822      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a01a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a01e:	d026      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a020:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a024:	d81c      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a02a:	d010      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a030:	d816      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01d      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a03a:	d111      	bne.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3304      	adds	r3, #4
 800a040:	2100      	movs	r1, #0
 800a042:	4618      	mov	r0, r3
 800a044:	f001 fb4c 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a048:	4603      	mov	r3, r0
 800a04a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a04c:	e012      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3324      	adds	r3, #36	; 0x24
 800a052:	2102      	movs	r1, #2
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fbf5 	bl	800b844 <RCCEx_PLL3_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a05e:	e009      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	75fb      	strb	r3, [r7, #23]
      break;
 800a064:	e006      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a066:	bf00      	nop
 800a068:	e004      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a06a:	bf00      	nop
 800a06c:	e002      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a06e:	bf00      	nop
 800a070:	e000      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a072:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a07a:	4b2e      	ldr	r3, [pc, #184]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a088:	492a      	ldr	r1, [pc, #168]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	654b      	str	r3, [r1, #84]	; 0x54
 800a08e:	e001      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d04d      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0aa:	d02e      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a0ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0b0:	d828      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b6:	d02a      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0bc:	d822      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0c2:	d026      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a0c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0c8:	d81c      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ce:	d010      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0d4:	d816      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01d      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0de:	d111      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 fafa 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0f0:	e012      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3324      	adds	r3, #36	; 0x24
 800a0f6:	2102      	movs	r1, #2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fba3 	bl	800b844 <RCCEx_PLL3_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a102:	e009      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	75fb      	strb	r3, [r7, #23]
      break;
 800a108:	e006      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a10a:	bf00      	nop
 800a10c:	e004      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a10e:	bf00      	nop
 800a110:	e002      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a112:	bf00      	nop
 800a114:	e000      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a116:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10c      	bne.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a122:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a12c:	4901      	ldr	r1, [pc, #4]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	658b      	str	r3, [r1, #88]	; 0x58
 800a132:	e003      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a144:	2b00      	cmp	r3, #0
 800a146:	d04b      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a14e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a152:	d02e      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a154:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a158:	d828      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a15a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a15e:	d02a      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a164:	d822      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a166:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a16a:	d026      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a16c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a170:	d81c      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a176:	d010      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a17c:	d816      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d01d      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a186:	d111      	bne.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3304      	adds	r3, #4
 800a18c:	2100      	movs	r1, #0
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 faa6 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a198:	e012      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3324      	adds	r3, #36	; 0x24
 800a19e:	2102      	movs	r1, #2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 fb4f 	bl	800b844 <RCCEx_PLL3_Config>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1aa:	e009      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b0:	e006      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1b2:	bf00      	nop
 800a1b4:	e004      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1b6:	bf00      	nop
 800a1b8:	e002      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e000      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10a      	bne.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1c6:	4b9d      	ldr	r3, [pc, #628]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1d4:	4999      	ldr	r1, [pc, #612]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	658b      	str	r3, [r1, #88]	; 0x58
 800a1da:	e001      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0308 	and.w	r3, r3, #8
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d01a      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f6:	d10a      	bne.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3324      	adds	r3, #36	; 0x24
 800a1fc:	2102      	movs	r1, #2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 fb20 	bl	800b844 <RCCEx_PLL3_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a20e:	4b8b      	ldr	r3, [pc, #556]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a21c:	4987      	ldr	r1, [pc, #540]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0310 	and.w	r3, r3, #16
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d01a      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a238:	d10a      	bne.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3324      	adds	r3, #36	; 0x24
 800a23e:	2102      	movs	r1, #2
 800a240:	4618      	mov	r0, r3
 800a242:	f001 faff 	bl	800b844 <RCCEx_PLL3_Config>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a250:	4b7a      	ldr	r3, [pc, #488]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a25e:	4977      	ldr	r1, [pc, #476]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a260:	4313      	orrs	r3, r2
 800a262:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d034      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a27a:	d01d      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a27c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a280:	d817      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a28a:	d009      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a28c:	e011      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3304      	adds	r3, #4
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f001 fa23 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a29e:	e00c      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3324      	adds	r3, #36	; 0x24
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 facc 	bl	800b844 <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2b0:	e003      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b6:	e000      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a2b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10a      	bne.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2c0:	4b5e      	ldr	r3, [pc, #376]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2ce:	495b      	ldr	r1, [pc, #364]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	658b      	str	r3, [r1, #88]	; 0x58
 800a2d4:	e001      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d033      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2f0:	d01c      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a2f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2f6:	d816      	bhi.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a2f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2fc:	d003      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a2fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a302:	d007      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a304:	e00f      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a306:	4b4d      	ldr	r3, [pc, #308]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	4a4c      	ldr	r2, [pc, #304]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a30c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a312:	e00c      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3324      	adds	r3, #36	; 0x24
 800a318:	2101      	movs	r1, #1
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 fa92 	bl	800b844 <RCCEx_PLL3_Config>
 800a320:	4603      	mov	r3, r0
 800a322:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a324:	e003      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]
      break;
 800a32a:	e000      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a32c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a334:	4b41      	ldr	r3, [pc, #260]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a338:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a342:	493e      	ldr	r1, [pc, #248]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a344:	4313      	orrs	r3, r2
 800a346:	654b      	str	r3, [r1, #84]	; 0x54
 800a348:	e001      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d029      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a366:	d007      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a368:	e00f      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a36a:	4b34      	ldr	r3, [pc, #208]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36e:	4a33      	ldr	r2, [pc, #204]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a374:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a376:	e00b      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3304      	adds	r3, #4
 800a37c:	2102      	movs	r1, #2
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 f9ae 	bl	800b6e0 <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a388:	e002      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]
      break;
 800a38e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d109      	bne.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a396:	4b29      	ldr	r3, [pc, #164]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a2:	4926      	ldr	r1, [pc, #152]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3a8:	e001      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3324      	adds	r3, #36	; 0x24
 800a3be:	2102      	movs	r1, #2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 fa3f 	bl	800b844 <RCCEx_PLL3_Config>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d033      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3e4:	d017      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a3e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3ea:	d811      	bhi.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f0:	d013      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f6:	d80b      	bhi.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d010      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a3fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a400:	d106      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a402:	4b0e      	ldr	r3, [pc, #56]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a406:	4a0d      	ldr	r2, [pc, #52]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a40c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a40e:	e007      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]
      break;
 800a414:	e004      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a416:	bf00      	nop
 800a418:	e002      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a41a:	bf00      	nop
 800a41c:	e000      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a41e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10c      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a426:	4b05      	ldr	r3, [pc, #20]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a432:	4902      	ldr	r1, [pc, #8]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a434:	4313      	orrs	r3, r2
 800a436:	654b      	str	r3, [r1, #84]	; 0x54
 800a438:	e004      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a43a:	bf00      	nop
 800a43c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d008      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a450:	4b31      	ldr	r3, [pc, #196]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a454:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45c:	492e      	ldr	r1, [pc, #184]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d009      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a46e:	4b2a      	ldr	r3, [pc, #168]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a47c:	4926      	ldr	r1, [pc, #152]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d008      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a48e:	4b22      	ldr	r3, [pc, #136]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a492:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a49a:	491f      	ldr	r1, [pc, #124]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00d      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4ac:	4b1a      	ldr	r3, [pc, #104]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	4a19      	ldr	r2, [pc, #100]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4b6:	6113      	str	r3, [r2, #16]
 800a4b8:	4b17      	ldr	r3, [pc, #92]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4c2:	4915      	ldr	r1, [pc, #84]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da08      	bge.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4d0:	4b11      	ldr	r3, [pc, #68]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4dc:	490e      	ldr	r1, [pc, #56]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d009      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4ee:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fc:	4906      	ldr	r1, [pc, #24]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a502:	7dbb      	ldrb	r3, [r7, #22]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	e000      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	58024400 	.word	0x58024400

0800a51c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b090      	sub	sp, #64	; 0x40
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52a:	f040 8095 	bne.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a52e:	4b97      	ldr	r3, [pc, #604]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	f200 8088 	bhi.w	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a55d 	.word	0x0800a55d
 800a54c:	0800a585 	.word	0x0800a585
 800a550:	0800a5ad 	.word	0x0800a5ad
 800a554:	0800a649 	.word	0x0800a649
 800a558:	0800a5d5 	.word	0x0800a5d5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a55c:	4b8b      	ldr	r3, [pc, #556]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a568:	d108      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a56a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 ff64 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a578:	f000 bc94 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a580:	f000 bc90 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a584:	4b81      	ldr	r3, [pc, #516]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a58c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a590:	d108      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a592:	f107 0318 	add.w	r3, r7, #24
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fca8 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5a0:	f000 bc80 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a8:	f000 bc7c 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ac:	4b77      	ldr	r3, [pc, #476]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b8:	d108      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fde8 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5c8:	f000 bc6c 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d0:	f000 bc68 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5d4:	4b6d      	ldr	r3, [pc, #436]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5de:	4b6b      	ldr	r3, [pc, #428]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	d10c      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5f0:	4b66      	ldr	r3, [pc, #408]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	08db      	lsrs	r3, r3, #3
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	4a65      	ldr	r2, [pc, #404]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a602:	e01f      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a604:	4b61      	ldr	r3, [pc, #388]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a610:	d106      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a618:	d102      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a61a:	4b5e      	ldr	r3, [pc, #376]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a61e:	e011      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a620:	4b5a      	ldr	r3, [pc, #360]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a62c:	d106      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a634:	d102      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a636:	4b58      	ldr	r3, [pc, #352]	; (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63a:	e003      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a640:	f000 bc30 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a644:	f000 bc2e 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a648:	4b54      	ldr	r3, [pc, #336]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a64c:	f000 bc2a 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a654:	f000 bc26 	b.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a65e:	f040 809f 	bne.w	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a662:	4b4a      	ldr	r3, [pc, #296]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a666:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a66a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a672:	d04d      	beq.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a67a:	f200 8084 	bhi.w	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	2bc0      	cmp	r3, #192	; 0xc0
 800a682:	d07d      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2bc0      	cmp	r3, #192	; 0xc0
 800a688:	d87d      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b80      	cmp	r3, #128	; 0x80
 800a68e:	d02d      	beq.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d877      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	2b40      	cmp	r3, #64	; 0x40
 800a6a0:	d012      	beq.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6a2:	e070      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6a4:	4b39      	ldr	r3, [pc, #228]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6b0:	d107      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fec0 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6c0:	e3f0      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6c6:	e3ed      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6c8:	4b30      	ldr	r3, [pc, #192]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6d4:	d107      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d6:	f107 0318 	add.w	r3, r7, #24
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fc06 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6e4:	e3de      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6ea:	e3db      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6ec:	4b27      	ldr	r3, [pc, #156]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f8:	d107      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fa:	f107 030c 	add.w	r3, r7, #12
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fd48 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a708:	e3cc      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a70e:	e3c9      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a710:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a718:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a71a:	4b1c      	ldr	r3, [pc, #112]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b04      	cmp	r3, #4
 800a724:	d10c      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d109      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a72c:	4b17      	ldr	r3, [pc, #92]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	08db      	lsrs	r3, r3, #3
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	4a16      	ldr	r2, [pc, #88]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a73e:	e01e      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a740:	4b12      	ldr	r3, [pc, #72]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a74c:	d106      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a754:	d102      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a756:	4b0f      	ldr	r3, [pc, #60]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a75a:	e010      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a75c:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a768:	d106      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a770:	d102      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a772:	4b09      	ldr	r3, [pc, #36]	; (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a776:	e002      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a77c:	e392      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a77e:	e391      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a780:	4b06      	ldr	r3, [pc, #24]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a784:	e38e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a78a:	e38b      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a78c:	58024400 	.word	0x58024400
 800a790:	03d09000 	.word	0x03d09000
 800a794:	003d0900 	.word	0x003d0900
 800a798:	007a1200 	.word	0x007a1200
 800a79c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a6:	f040 809c 	bne.w	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a7aa:	4b9d      	ldr	r3, [pc, #628]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a7b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7ba:	d054      	beq.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7c2:	f200 808b 	bhi.w	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7cc:	f000 8083 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7d6:	f200 8081 	bhi.w	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7e0:	d02f      	beq.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7e8:	d878      	bhi.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d004      	beq.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f6:	d012      	beq.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a7f8:	e070      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7fa:	4b89      	ldr	r3, [pc, #548]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a806:	d107      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 fe15 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a816:	e345      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a818:	2300      	movs	r3, #0
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a81c:	e342      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a81e:	4b80      	ldr	r3, [pc, #512]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a82a:	d107      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a82c:	f107 0318 	add.w	r3, r7, #24
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fb5b 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a83a:	e333      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a840:	e330      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a842:	4b77      	ldr	r3, [pc, #476]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a84a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a84e:	d107      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a850:	f107 030c 	add.w	r3, r7, #12
 800a854:	4618      	mov	r0, r3
 800a856:	f000 fc9d 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a85e:	e321      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a864:	e31e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a866:	4b6e      	ldr	r3, [pc, #440]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a86a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a86e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a870:	4b6b      	ldr	r3, [pc, #428]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d10c      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d109      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a882:	4b67      	ldr	r3, [pc, #412]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	08db      	lsrs	r3, r3, #3
 800a888:	f003 0303 	and.w	r3, r3, #3
 800a88c:	4a65      	ldr	r2, [pc, #404]	; (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a88e:	fa22 f303 	lsr.w	r3, r2, r3
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a894:	e01e      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a896:	4b62      	ldr	r3, [pc, #392]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a2:	d106      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8aa:	d102      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8ac:	4b5e      	ldr	r3, [pc, #376]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b0:	e010      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8b2:	4b5b      	ldr	r3, [pc, #364]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8be:	d106      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8c6:	d102      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8c8:	4b58      	ldr	r3, [pc, #352]	; (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8cc:	e002      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8d2:	e2e7      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8d4:	e2e6      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8d6:	4b56      	ldr	r3, [pc, #344]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8da:	e2e3      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8e0:	e2e0      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8e8:	f040 80a7 	bne.w	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a8f4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8fc:	d055      	beq.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a904:	f200 8096 	bhi.w	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a90e:	f000 8084 	beq.w	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a918:	f200 808c 	bhi.w	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a922:	d030      	beq.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a92a:	f200 8083 	bhi.w	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	2b00      	cmp	r3, #0
 800a932:	d004      	beq.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a93a:	d012      	beq.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a93c:	e07a      	b.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a93e:	4b38      	ldr	r3, [pc, #224]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a94a:	d107      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a94c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fd73 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a95a:	e2a3      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a960:	e2a0      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a962:	4b2f      	ldr	r3, [pc, #188]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a96a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a96e:	d107      	bne.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a970:	f107 0318 	add.w	r3, r7, #24
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fab9 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a97e:	e291      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a984:	e28e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a986:	4b26      	ldr	r3, [pc, #152]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a98e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a992:	d107      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fbfb 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9a2:	e27f      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a8:	e27c      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9aa:	4b1d      	ldr	r3, [pc, #116]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9b4:	4b1a      	ldr	r3, [pc, #104]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d10c      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d109      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9c6:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	08db      	lsrs	r3, r3, #3
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	4a14      	ldr	r2, [pc, #80]	; (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9d8:	e01e      	b.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9e6:	d106      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ee:	d102      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a9f0:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f4:	e010      	b.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9f6:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa02:	d106      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa0a:	d102      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa0c:	4b07      	ldr	r3, [pc, #28]	; (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa10:	e002      	b.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa16:	e245      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa18:	e244      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa1e:	e241      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa20:	58024400 	.word	0x58024400
 800aa24:	03d09000 	.word	0x03d09000
 800aa28:	003d0900 	.word	0x003d0900
 800aa2c:	007a1200 	.word	0x007a1200
 800aa30:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa38:	e234      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa40:	f040 809c 	bne.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aa44:	4b9b      	ldr	r3, [pc, #620]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa48:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa54:	d054      	beq.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa5c:	f200 808b 	bhi.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa66:	f000 8083 	beq.w	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa70:	f200 8081 	bhi.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa7a:	d02f      	beq.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa82:	d878      	bhi.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d004      	beq.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa90:	d012      	beq.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aa92:	e070      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa94:	4b87      	ldr	r3, [pc, #540]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa0:	d107      	bne.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 fcc8 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aab0:	e1f8      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aab6:	e1f5      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aab8:	4b7e      	ldr	r3, [pc, #504]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aac4:	d107      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac6:	f107 0318 	add.w	r3, r7, #24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fa0e 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aad4:	e1e6      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aada:	e1e3      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aadc:	4b75      	ldr	r3, [pc, #468]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae8:	d107      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaea:	f107 030c 	add.w	r3, r7, #12
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fb50 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaf8:	e1d4      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aafe:	e1d1      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab00:	4b6c      	ldr	r3, [pc, #432]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab08:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab0a:	4b6a      	ldr	r3, [pc, #424]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d10c      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d109      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab1c:	4b65      	ldr	r3, [pc, #404]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	08db      	lsrs	r3, r3, #3
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	4a64      	ldr	r2, [pc, #400]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab28:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab2e:	e01e      	b.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab30:	4b60      	ldr	r3, [pc, #384]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab3c:	d106      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ab3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab44:	d102      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab46:	4b5d      	ldr	r3, [pc, #372]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab4a:	e010      	b.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab4c:	4b59      	ldr	r3, [pc, #356]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab58:	d106      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab60:	d102      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab62:	4b57      	ldr	r3, [pc, #348]	; (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab66:	e002      	b.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab6c:	e19a      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab6e:	e199      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab70:	4b54      	ldr	r3, [pc, #336]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab74:	e196      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab7a:	e193      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab82:	d173      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ab84:	4b4b      	ldr	r3, [pc, #300]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab8c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab94:	d02f      	beq.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab9c:	d863      	bhi.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d004      	beq.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abaa:	d012      	beq.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800abac:	e05b      	b.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abae:	4b41      	ldr	r3, [pc, #260]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abba:	d107      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abbc:	f107 0318 	add.w	r3, r7, #24
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 f993 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abca:	e16b      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abd0:	e168      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abd2:	4b38      	ldr	r3, [pc, #224]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abde:	d107      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe0:	f107 030c 	add.w	r3, r7, #12
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 fad5 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abee:	e159      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf4:	e156      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abfe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac00:	4b2c      	ldr	r3, [pc, #176]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0304 	and.w	r3, r3, #4
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d10c      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac12:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	08db      	lsrs	r3, r3, #3
 800ac18:	f003 0303 	and.w	r3, r3, #3
 800ac1c:	4a26      	ldr	r2, [pc, #152]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ac1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac24:	e01e      	b.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac26:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac32:	d106      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac3a:	d102      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac3c:	4b1f      	ldr	r3, [pc, #124]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac40:	e010      	b.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac42:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac4e:	d106      	bne.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800ac50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac56:	d102      	bne.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac58:	4b19      	ldr	r3, [pc, #100]	; (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac5c:	e002      	b.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ac62:	e11f      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ac64:	e11e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac6a:	e11b      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac72:	d13e      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ac74:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8a:	d01d      	beq.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ac8c:	e02e      	b.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac8e:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac9a:	d107      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fbcb 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acaa:	e0fb      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb0:	e0f8      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
 800acb8:	03d09000 	.word	0x03d09000
 800acbc:	003d0900 	.word	0x003d0900
 800acc0:	007a1200 	.word	0x007a1200
 800acc4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acc8:	4b79      	ldr	r3, [pc, #484]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acd4:	d107      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd6:	f107 0318 	add.w	r3, r7, #24
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 f906 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ace4:	e0de      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acea:	e0db      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acf0:	e0d8      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf8:	f040 8085 	bne.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800acfc:	4b6c      	ldr	r3, [pc, #432]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad00:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad0c:	d06b      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad14:	d874      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1c:	d056      	beq.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad24:	d86c      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad2c:	d03b      	beq.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad34:	d864      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad3c:	d021      	beq.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad44:	d85c      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad52:	d004      	beq.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ad54:	e054      	b.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad56:	f000 f8b3 	bl	800aec0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad5a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ad5c:	e0a2      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad5e:	4b54      	ldr	r3, [pc, #336]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad6a:	d107      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad6c:	f107 0318 	add.w	r3, r7, #24
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 f8bb 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad7a:	e093      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad80:	e090      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad82:	4b4b      	ldr	r3, [pc, #300]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad8e:	d107      	bne.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad90:	f107 030c 	add.w	r3, r7, #12
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f9fd 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad9e:	e081      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada4:	e07e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ada6:	4b42      	ldr	r3, [pc, #264]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0304 	and.w	r3, r3, #4
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d109      	bne.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adb2:	4b3f      	ldr	r3, [pc, #252]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	08db      	lsrs	r3, r3, #3
 800adb8:	f003 0303 	and.w	r3, r3, #3
 800adbc:	4a3d      	ldr	r2, [pc, #244]	; (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800adbe:	fa22 f303 	lsr.w	r3, r2, r3
 800adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adc4:	e06e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adca:	e06b      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800adcc:	4b38      	ldr	r3, [pc, #224]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add8:	d102      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800addc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adde:	e061      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ade4:	e05e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ade6:	4b32      	ldr	r3, [pc, #200]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adf2:	d102      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800adf4:	4b31      	ldr	r3, [pc, #196]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800adf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adf8:	e054      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adfe:	e051      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae04:	e04e      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae0c:	d148      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ae0e:	4b28      	ldr	r3, [pc, #160]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae16:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae1e:	d02a      	beq.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae26:	d838      	bhi.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d004      	beq.n	800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae34:	d00d      	beq.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ae36:	e030      	b.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae38:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae44:	d102      	bne.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ae46:	4b1d      	ldr	r3, [pc, #116]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae4a:	e02b      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae50:	e028      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae52:	4b17      	ldr	r3, [pc, #92]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae5e:	d107      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 fae9 	bl	800b43c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae6e:	e019      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae74:	e016      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae76:	4b0e      	ldr	r3, [pc, #56]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae82:	d107      	bne.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae84:	f107 0318 	add.w	r3, r7, #24
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 f82f 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae92:	e007      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae98:	e004      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae9e:	e001      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3740      	adds	r7, #64	; 0x40
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	58024400 	.word	0x58024400
 800aeb4:	03d09000 	.word	0x03d09000
 800aeb8:	003d0900 	.word	0x003d0900
 800aebc:	007a1200 	.word	0x007a1200

0800aec0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aec4:	f7fe fb46 	bl	8009554 <HAL_RCC_GetHCLKFreq>
 800aec8:	4602      	mov	r2, r0
 800aeca:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	091b      	lsrs	r3, r3, #4
 800aed0:	f003 0307 	and.w	r3, r3, #7
 800aed4:	4904      	ldr	r1, [pc, #16]	; (800aee8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aed6:	5ccb      	ldrb	r3, [r1, r3]
 800aed8:	f003 031f 	and.w	r3, r3, #31
 800aedc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	58024400 	.word	0x58024400
 800aee8:	080220e8 	.word	0x080220e8

0800aeec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b089      	sub	sp, #36	; 0x24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aef4:	4ba1      	ldr	r3, [pc, #644]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aefe:	4b9f      	ldr	r3, [pc, #636]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af02:	0b1b      	lsrs	r3, r3, #12
 800af04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af0a:	4b9c      	ldr	r3, [pc, #624]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0e:	091b      	lsrs	r3, r3, #4
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af16:	4b99      	ldr	r3, [pc, #612]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1a:	08db      	lsrs	r3, r3, #3
 800af1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	fb02 f303 	mul.w	r3, r2, r3
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8111 	beq.w	800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	f000 8083 	beq.w	800b048 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b02      	cmp	r3, #2
 800af46:	f200 80a1 	bhi.w	800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d056      	beq.n	800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af56:	e099      	b.n	800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af58:	4b88      	ldr	r3, [pc, #544]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d02d      	beq.n	800afc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af64:	4b85      	ldr	r3, [pc, #532]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	08db      	lsrs	r3, r3, #3
 800af6a:	f003 0303 	and.w	r3, r3, #3
 800af6e:	4a84      	ldr	r2, [pc, #528]	; (800b180 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af70:	fa22 f303 	lsr.w	r3, r2, r3
 800af74:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8e:	4b7b      	ldr	r3, [pc, #492]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800afbe:	e087      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b188 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd2:	4b6a      	ldr	r3, [pc, #424]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b002:	e065      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b016:	4b59      	ldr	r3, [pc, #356]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b026:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b046:	e043      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05a:	4b48      	ldr	r3, [pc, #288]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b086:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b08a:	e021      	b.n	800b0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09e:	4b37      	ldr	r3, [pc, #220]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b0d0:	4b2a      	ldr	r3, [pc, #168]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	0a5b      	lsrs	r3, r3, #9
 800b0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f6:	ee17 2a90 	vmov	r2, s15
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b0fe:	4b1f      	ldr	r3, [pc, #124]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	0c1b      	lsrs	r3, r3, #16
 800b104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b114:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b118:	edd7 6a07 	vldr	s13, [r7, #28]
 800b11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b124:	ee17 2a90 	vmov	r2, s15
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b12c:	4b13      	ldr	r3, [pc, #76]	; (800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	0e1b      	lsrs	r3, r3, #24
 800b132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b142:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b146:	edd7 6a07 	vldr	s13, [r7, #28]
 800b14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b152:	ee17 2a90 	vmov	r2, s15
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b15a:	e008      	b.n	800b16e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	609a      	str	r2, [r3, #8]
}
 800b16e:	bf00      	nop
 800b170:	3724      	adds	r7, #36	; 0x24
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	58024400 	.word	0x58024400
 800b180:	03d09000 	.word	0x03d09000
 800b184:	46000000 	.word	0x46000000
 800b188:	4c742400 	.word	0x4c742400
 800b18c:	4a742400 	.word	0x4a742400
 800b190:	4af42400 	.word	0x4af42400

0800b194 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b194:	b480      	push	{r7}
 800b196:	b089      	sub	sp, #36	; 0x24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b19c:	4ba1      	ldr	r3, [pc, #644]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b1a6:	4b9f      	ldr	r3, [pc, #636]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1aa:	0d1b      	lsrs	r3, r3, #20
 800b1ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1b2:	4b9c      	ldr	r3, [pc, #624]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	0a1b      	lsrs	r3, r3, #8
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b1be:	4b99      	ldr	r3, [pc, #612]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c2:	08db      	lsrs	r3, r3, #3
 800b1c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	fb02 f303 	mul.w	r3, r2, r3
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 8111 	beq.w	800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	f000 8083 	beq.w	800b2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	f200 80a1 	bhi.w	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d056      	beq.n	800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b1fe:	e099      	b.n	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b200:	4b88      	ldr	r3, [pc, #544]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d02d      	beq.n	800b268 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b20c:	4b85      	ldr	r3, [pc, #532]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	08db      	lsrs	r3, r3, #3
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	4a84      	ldr	r2, [pc, #528]	; (800b428 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b236:	4b7b      	ldr	r3, [pc, #492]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b262:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b266:	e087      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b430 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27a:	4b6a      	ldr	r3, [pc, #424]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2aa:	e065      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2be:	4b59      	ldr	r3, [pc, #356]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ee:	e043      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b48      	ldr	r3, [pc, #288]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a03 	vldr	s12, [r7, #12]
 800b316:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b332:	e021      	b.n	800b378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b346:	4b37      	ldr	r3, [pc, #220]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b356:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b376:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b378:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	0a5b      	lsrs	r3, r3, #9
 800b37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b382:	ee07 3a90 	vmov	s15, r3
 800b386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b38e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b392:	edd7 6a07 	vldr	s13, [r7, #28]
 800b396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b39e:	ee17 2a90 	vmov	r2, s15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b0:	ee07 3a90 	vmov	s15, r3
 800b3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3cc:	ee17 2a90 	vmov	r2, s15
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b3d4:	4b13      	ldr	r3, [pc, #76]	; (800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d8:	0e1b      	lsrs	r3, r3, #24
 800b3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3de:	ee07 3a90 	vmov	s15, r3
 800b3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fa:	ee17 2a90 	vmov	r2, s15
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b402:	e008      	b.n	800b416 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	609a      	str	r2, [r3, #8]
}
 800b416:	bf00      	nop
 800b418:	3724      	adds	r7, #36	; 0x24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	03d09000 	.word	0x03d09000
 800b42c:	46000000 	.word	0x46000000
 800b430:	4c742400 	.word	0x4c742400
 800b434:	4a742400 	.word	0x4a742400
 800b438:	4af42400 	.word	0x4af42400

0800b43c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b089      	sub	sp, #36	; 0x24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b444:	4ba0      	ldr	r3, [pc, #640]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b44e:	4b9e      	ldr	r3, [pc, #632]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	091b      	lsrs	r3, r3, #4
 800b454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b458:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b45a:	4b9b      	ldr	r3, [pc, #620]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b464:	4b98      	ldr	r3, [pc, #608]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b468:	08db      	lsrs	r3, r3, #3
 800b46a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	fb02 f303 	mul.w	r3, r2, r3
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 8111 	beq.w	800b6aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	f000 8083 	beq.w	800b596 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2b02      	cmp	r3, #2
 800b494:	f200 80a1 	bhi.w	800b5da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d056      	beq.n	800b552 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b4a4:	e099      	b.n	800b5da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a6:	4b88      	ldr	r3, [pc, #544]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0320 	and.w	r3, r3, #32
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d02d      	beq.n	800b50e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4b2:	4b85      	ldr	r3, [pc, #532]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	08db      	lsrs	r3, r3, #3
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	4a83      	ldr	r2, [pc, #524]	; (800b6cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4be:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4dc:	4b7a      	ldr	r3, [pc, #488]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e4:	ee07 3a90 	vmov	s15, r3
 800b4e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b508:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b50c:	e087      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	ee07 3a90 	vmov	s15, r3
 800b514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b518:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b51c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b520:	4b69      	ldr	r3, [pc, #420]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b528:	ee07 3a90 	vmov	s15, r3
 800b52c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b530:	ed97 6a03 	vldr	s12, [r7, #12]
 800b534:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b550:	e065      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b564:	4b58      	ldr	r3, [pc, #352]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b574:	ed97 6a03 	vldr	s12, [r7, #12]
 800b578:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b590:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b594:	e043      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b5a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a8:	4b47      	ldr	r3, [pc, #284]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b0:	ee07 3a90 	vmov	s15, r3
 800b5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5d8:	e021      	b.n	800b61e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ec:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f4:	ee07 3a90 	vmov	s15, r3
 800b5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b600:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b618:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b61c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b61e:	4b2a      	ldr	r3, [pc, #168]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	0a5b      	lsrs	r3, r3, #9
 800b624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b628:	ee07 3a90 	vmov	s15, r3
 800b62c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b634:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b638:	edd7 6a07 	vldr	s13, [r7, #28]
 800b63c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b644:	ee17 2a90 	vmov	r2, s15
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b64c:	4b1e      	ldr	r3, [pc, #120]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	0c1b      	lsrs	r3, r3, #16
 800b652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b656:	ee07 3a90 	vmov	s15, r3
 800b65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b662:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b666:	edd7 6a07 	vldr	s13, [r7, #28]
 800b66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b66e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b672:	ee17 2a90 	vmov	r2, s15
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b67a:	4b13      	ldr	r3, [pc, #76]	; (800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	0e1b      	lsrs	r3, r3, #24
 800b680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b684:	ee07 3a90 	vmov	s15, r3
 800b688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b690:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b694:	edd7 6a07 	vldr	s13, [r7, #28]
 800b698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b69c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a0:	ee17 2a90 	vmov	r2, s15
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6a8:	e008      	b.n	800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	609a      	str	r2, [r3, #8]
}
 800b6bc:	bf00      	nop
 800b6be:	3724      	adds	r7, #36	; 0x24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	58024400 	.word	0x58024400
 800b6cc:	03d09000 	.word	0x03d09000
 800b6d0:	46000000 	.word	0x46000000
 800b6d4:	4c742400 	.word	0x4c742400
 800b6d8:	4a742400 	.word	0x4a742400
 800b6dc:	4af42400 	.word	0x4af42400

0800b6e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ee:	4b53      	ldr	r3, [pc, #332]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	f003 0303 	and.w	r3, r3, #3
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d101      	bne.n	800b6fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e099      	b.n	800b832 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6fe:	4b4f      	ldr	r3, [pc, #316]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a4e      	ldr	r2, [pc, #312]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b704:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b70a:	f7f9 f975 	bl	80049f8 <HAL_GetTick>
 800b70e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b710:	e008      	b.n	800b724 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b712:	f7f9 f971 	bl	80049f8 <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d901      	bls.n	800b724 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e086      	b.n	800b832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b724:	4b45      	ldr	r3, [pc, #276]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f0      	bne.n	800b712 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b730:	4b42      	ldr	r3, [pc, #264]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b734:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	031b      	lsls	r3, r3, #12
 800b73e:	493f      	ldr	r1, [pc, #252]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b740:	4313      	orrs	r3, r2
 800b742:	628b      	str	r3, [r1, #40]	; 0x28
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	3b01      	subs	r3, #1
 800b74a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	3b01      	subs	r3, #1
 800b754:	025b      	lsls	r3, r3, #9
 800b756:	b29b      	uxth	r3, r3
 800b758:	431a      	orrs	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	3b01      	subs	r3, #1
 800b760:	041b      	lsls	r3, r3, #16
 800b762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	061b      	lsls	r3, r3, #24
 800b770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b774:	4931      	ldr	r1, [pc, #196]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b776:	4313      	orrs	r3, r2
 800b778:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b77a:	4b30      	ldr	r3, [pc, #192]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	492d      	ldr	r1, [pc, #180]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b788:	4313      	orrs	r3, r2
 800b78a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b78c:	4b2b      	ldr	r3, [pc, #172]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	f023 0220 	bic.w	r2, r3, #32
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	4928      	ldr	r1, [pc, #160]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b79e:	4b27      	ldr	r3, [pc, #156]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a2:	4a26      	ldr	r2, [pc, #152]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7a4:	f023 0310 	bic.w	r3, r3, #16
 800b7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7aa:	4b24      	ldr	r3, [pc, #144]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ae:	4b24      	ldr	r3, [pc, #144]	; (800b840 <RCCEx_PLL2_Config+0x160>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	69d2      	ldr	r2, [r2, #28]
 800b7b6:	00d2      	lsls	r2, r2, #3
 800b7b8:	4920      	ldr	r1, [pc, #128]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7be:	4b1f      	ldr	r3, [pc, #124]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	4a1e      	ldr	r2, [pc, #120]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7c4:	f043 0310 	orr.w	r3, r3, #16
 800b7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d106      	bne.n	800b7de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7d0:	4b1a      	ldr	r3, [pc, #104]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	4a19      	ldr	r2, [pc, #100]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7dc:	e00f      	b.n	800b7fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d106      	bne.n	800b7f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7e4:	4b15      	ldr	r3, [pc, #84]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	4a14      	ldr	r2, [pc, #80]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7f0:	e005      	b.n	800b7fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7f2:	4b12      	ldr	r3, [pc, #72]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	4a11      	ldr	r2, [pc, #68]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b7f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a0e      	ldr	r2, [pc, #56]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b80a:	f7f9 f8f5 	bl	80049f8 <HAL_GetTick>
 800b80e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b810:	e008      	b.n	800b824 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b812:	f7f9 f8f1 	bl	80049f8 <HAL_GetTick>
 800b816:	4602      	mov	r2, r0
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d901      	bls.n	800b824 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b820:	2303      	movs	r3, #3
 800b822:	e006      	b.n	800b832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <RCCEx_PLL2_Config+0x15c>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0f0      	beq.n	800b812 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b830:	7bfb      	ldrb	r3, [r7, #15]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	58024400 	.word	0x58024400
 800b840:	ffff0007 	.word	0xffff0007

0800b844 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b852:	4b53      	ldr	r3, [pc, #332]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d101      	bne.n	800b862 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e099      	b.n	800b996 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b862:	4b4f      	ldr	r3, [pc, #316]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a4e      	ldr	r2, [pc, #312]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b86c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86e:	f7f9 f8c3 	bl	80049f8 <HAL_GetTick>
 800b872:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b874:	e008      	b.n	800b888 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b876:	f7f9 f8bf 	bl	80049f8 <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	2b02      	cmp	r3, #2
 800b882:	d901      	bls.n	800b888 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e086      	b.n	800b996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b888:	4b45      	ldr	r3, [pc, #276]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1f0      	bne.n	800b876 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b894:	4b42      	ldr	r3, [pc, #264]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b898:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	051b      	lsls	r3, r3, #20
 800b8a2:	493f      	ldr	r1, [pc, #252]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	628b      	str	r3, [r1, #40]	; 0x28
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	025b      	lsls	r3, r3, #9
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	041b      	lsls	r3, r3, #16
 800b8c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	061b      	lsls	r3, r3, #24
 800b8d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8d8:	4931      	ldr	r1, [pc, #196]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8de:	4b30      	ldr	r3, [pc, #192]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	492d      	ldr	r1, [pc, #180]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8f0:	4b2b      	ldr	r3, [pc, #172]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	4928      	ldr	r1, [pc, #160]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b902:	4b27      	ldr	r3, [pc, #156]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	4a26      	ldr	r2, [pc, #152]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b90c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b90e:	4b24      	ldr	r3, [pc, #144]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b912:	4b24      	ldr	r3, [pc, #144]	; (800b9a4 <RCCEx_PLL3_Config+0x160>)
 800b914:	4013      	ands	r3, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	69d2      	ldr	r2, [r2, #28]
 800b91a:	00d2      	lsls	r2, r2, #3
 800b91c:	4920      	ldr	r1, [pc, #128]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b922:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	4a1e      	ldr	r2, [pc, #120]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b92c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b934:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b938:	4a19      	ldr	r2, [pc, #100]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b93a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b93e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b940:	e00f      	b.n	800b962 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d106      	bne.n	800b956 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b948:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	4a14      	ldr	r2, [pc, #80]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b94e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b952:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b954:	e005      	b.n	800b962 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b956:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	4a11      	ldr	r2, [pc, #68]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b95c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b962:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a0e      	ldr	r2, [pc, #56]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b96c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b96e:	f7f9 f843 	bl	80049f8 <HAL_GetTick>
 800b972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b974:	e008      	b.n	800b988 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b976:	f7f9 f83f 	bl	80049f8 <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	2b02      	cmp	r3, #2
 800b982:	d901      	bls.n	800b988 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e006      	b.n	800b996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <RCCEx_PLL3_Config+0x15c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0f0      	beq.n	800b976 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	58024400 	.word	0x58024400
 800b9a4:	ffff0007 	.word	0xffff0007

0800b9a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	; 0x28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e075      	b.n	800baa6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d105      	bne.n	800b9d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7f7 ff1f 	bl	8003810 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f868 	bl	800bab0 <HAL_SD_InitCard>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e05d      	b.n	800baa6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b9ea:	f107 0308 	add.w	r3, r7, #8
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fda9 	bl	800c548 <HAL_SD_GetCardStatus>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e052      	b.n	800baa6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ba00:	7e3b      	ldrb	r3, [r7, #24]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ba06:	7e7b      	ldrb	r3, [r7, #25]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d10a      	bne.n	800ba2a <HAL_SD_Init+0x82>
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d102      	bne.n	800ba20 <HAL_SD_Init+0x78>
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d004      	beq.n	800ba2a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba26:	659a      	str	r2, [r3, #88]	; 0x58
 800ba28:	e00b      	b.n	800ba42 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d104      	bne.n	800ba3c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba38:	659a      	str	r2, [r3, #88]	; 0x58
 800ba3a:	e002      	b.n	800ba42 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fe67 	bl	800c71c <HAL_SD_ConfigWideBusOperation>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e026      	b.n	800baa6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800ba58:	f7f8 ffce 	bl	80049f8 <HAL_GetTick>
 800ba5c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ba5e:	e011      	b.n	800ba84 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba60:	f7f8 ffca 	bl	80049f8 <HAL_GetTick>
 800ba64:	4602      	mov	r2, r0
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d109      	bne.n	800ba84 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba76:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800ba80:	2303      	movs	r3, #3
 800ba82:	e010      	b.n	800baa6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 ff5b 	bl	800c940 <HAL_SD_GetCardState>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d1e7      	bne.n	800ba60 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3728      	adds	r7, #40	; 0x28
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
	...

0800bab0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bab0:	b590      	push	{r4, r7, lr}
 800bab2:	b08d      	sub	sp, #52	; 0x34
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800bab8:	2300      	movs	r3, #0
 800baba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800babc:	2300      	movs	r3, #0
 800babe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bac0:	2300      	movs	r3, #0
 800bac2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bac4:	2300      	movs	r3, #0
 800bac6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bac8:	2300      	movs	r3, #0
 800baca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bacc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bad0:	f7fe fd24 	bl	800a51c <HAL_RCCEx_GetPeriphCLKFreq>
 800bad4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d109      	bne.n	800baf0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800baea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e06a      	b.n	800bbc6 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	0a1b      	lsrs	r3, r3, #8
 800baf4:	4a36      	ldr	r2, [pc, #216]	; (800bbd0 <HAL_SD_InitCard+0x120>)
 800baf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bafa:	091b      	lsrs	r3, r3, #4
 800bafc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681c      	ldr	r4, [r3, #0]
 800bb02:	466a      	mov	r2, sp
 800bb04:	f107 0318 	add.w	r3, r7, #24
 800bb08:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb0c:	e882 0003 	stmia.w	r2, {r0, r1}
 800bb10:	f107 030c 	add.w	r3, r7, #12
 800bb14:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb16:	4620      	mov	r0, r4
 800bb18:	f004 feae 	bl	8010878 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f004 fef1 	bl	8010908 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bb32:	4a28      	ldr	r2, [pc, #160]	; (800bbd4 <HAL_SD_InitCard+0x124>)
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7f8 ff67 	bl	8004a10 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 ffea 	bl	800cb1c <SD_PowerON>
 800bb48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	e02e      	b.n	800bbc6 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 ff09 	bl	800c980 <SD_InitCard>
 800bb6e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00b      	beq.n	800bb8e <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	431a      	orrs	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e01b      	b.n	800bbc6 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb96:	4618      	mov	r0, r3
 800bb98:	f004 ff4c 	bl	8010a34 <SDMMC_CmdBlockLength>
 800bb9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00f      	beq.n	800bbc4 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a0b      	ldr	r2, [pc, #44]	; (800bbd8 <HAL_SD_InitCard+0x128>)
 800bbaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e000      	b.n	800bbc6 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	372c      	adds	r7, #44	; 0x2c
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd90      	pop	{r4, r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	014f8b59 	.word	0x014f8b59
 800bbd4:	00012110 	.word	0x00012110
 800bbd8:	1fe00fff 	.word	0x1fe00fff

0800bbdc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08c      	sub	sp, #48	; 0x30
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d107      	bne.n	800bc04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	e08d      	b.n	800bd20 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	f040 8086 	bne.w	800bd1e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bc18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d907      	bls.n	800bc36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e074      	b.n	800bd20 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2203      	movs	r2, #3
 800bc3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2200      	movs	r2, #0
 800bc44:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	025a      	lsls	r2, r3, #9
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d002      	beq.n	800bc62 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5e:	025b      	lsls	r3, r3, #9
 800bc60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc62:	f04f 33ff 	mov.w	r3, #4294967295
 800bc66:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	025b      	lsls	r3, r3, #9
 800bc6c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bc6e:	2390      	movs	r3, #144	; 0x90
 800bc70:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bc72:	2302      	movs	r3, #2
 800bc74:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f107 0210 	add.w	r2, r7, #16
 800bc86:	4611      	mov	r1, r2
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f004 fea7 	bl	80109dc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68da      	ldr	r2, [r3, #12]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc9c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d90a      	bls.n	800bcca <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2282      	movs	r2, #130	; 0x82
 800bcb8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f004 fefd 	bl	8010ac0 <SDMMC_CmdReadMultiBlock>
 800bcc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bcc8:	e009      	b.n	800bcde <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2281      	movs	r2, #129	; 0x81
 800bcce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f004 fecf 	bl	8010a7a <SDMMC_CmdReadSingleBlock>
 800bcdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d012      	beq.n	800bd0a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a0f      	ldr	r2, [pc, #60]	; (800bd28 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800bcea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e00a      	b.n	800bd20 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800bd18:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	e000      	b.n	800bd20 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800bd1e:	2302      	movs	r3, #2
  }
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3730      	adds	r7, #48	; 0x30
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	1fe00fff 	.word	0x1fe00fff

0800bd2c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08c      	sub	sp, #48	; 0x30
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d107      	bne.n	800bd54 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e08d      	b.n	800be70 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	f040 8086 	bne.w	800be6e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bd68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	441a      	add	r2, r3
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d907      	bls.n	800bd86 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e074      	b.n	800be70 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2203      	movs	r2, #3
 800bd8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2200      	movs	r2, #0
 800bd94:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	025a      	lsls	r2, r3, #9
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d002      	beq.n	800bdb2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdae:	025b      	lsls	r3, r3, #9
 800bdb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	025b      	lsls	r3, r3, #9
 800bdbc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bdbe:	2390      	movs	r3, #144	; 0x90
 800bdc0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f107 0210 	add.w	r2, r7, #16
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f004 fdff 	bl	80109dc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68da      	ldr	r2, [r3, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdec:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d90a      	bls.n	800be1a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	22a0      	movs	r2, #160	; 0xa0
 800be08:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be10:	4618      	mov	r0, r3
 800be12:	f004 fe9b 	bl	8010b4c <SDMMC_CmdWriteMultiBlock>
 800be16:	62f8      	str	r0, [r7, #44]	; 0x2c
 800be18:	e009      	b.n	800be2e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2290      	movs	r2, #144	; 0x90
 800be1e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be26:	4618      	mov	r0, r3
 800be28:	f004 fe6d 	bl	8010b06 <SDMMC_CmdWriteSingleBlock>
 800be2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800be2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be30:	2b00      	cmp	r3, #0
 800be32:	d012      	beq.n	800be5a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a0f      	ldr	r2, [pc, #60]	; (800be78 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800be3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	431a      	orrs	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e00a      	b.n	800be70 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800be68:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	e000      	b.n	800be70 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800be6e:	2302      	movs	r3, #2
  }
}
 800be70:	4618      	mov	r0, r3
 800be72:	3730      	adds	r7, #48	; 0x30
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	1fe00fff 	.word	0x1fe00fff

0800be7c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be94:	2b00      	cmp	r3, #0
 800be96:	d008      	beq.n	800beaa <HAL_SD_IRQHandler+0x2e>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f003 0308 	and.w	r3, r3, #8
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f001 f926 	bl	800d0f4 <SD_Read_IT>
 800bea8:	e19a      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 80ac 	beq.w	800c012 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bec2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	4b59      	ldr	r3, [pc, #356]	; (800c034 <HAL_SD_IRQHandler+0x1b8>)
 800bed0:	400b      	ands	r3, r1
 800bed2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bee2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68da      	ldr	r2, [r3, #12]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bef2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f003 0308 	and.w	r3, r3, #8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d038      	beq.n	800bf70 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f003 0302 	and.w	r3, r3, #2
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d104      	bne.n	800bf12 <HAL_SD_IRQHandler+0x96>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f003 0320 	and.w	r3, r3, #32
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d011      	beq.n	800bf36 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f004 fe3c 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800bf1c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d008      	beq.n	800bf36 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f95b 	bl	800c1ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a3f      	ldr	r2, [pc, #252]	; (800c038 <HAL_SD_IRQHandler+0x1bc>)
 800bf3c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d104      	bne.n	800bf60 <HAL_SD_IRQHandler+0xe4>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f003 0302 	and.w	r3, r3, #2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f005 fae7 	bl	8011534 <HAL_SD_RxCpltCallback>
 800bf66:	e13b      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f005 fad9 	bl	8011520 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bf6e:	e137      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 8132 	beq.w	800c1e0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2200      	movs	r2, #0
 800bf82:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2200      	movs	r2, #0
 800bf92:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d104      	bne.n	800bfa8 <HAL_SD_IRQHandler+0x12c>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f003 0320 	and.w	r3, r3, #32
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d011      	beq.n	800bfcc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f004 fdf1 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800bfb2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d008      	beq.n	800bfcc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f910 	bl	800c1ec <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f003 0310 	and.w	r3, r3, #16
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d104      	bne.n	800bfee <HAL_SD_IRQHandler+0x172>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f003 0320 	and.w	r3, r3, #32
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f005 fa96 	bl	8011520 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d105      	bne.n	800c00a <HAL_SD_IRQHandler+0x18e>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f003 0302 	and.w	r3, r3, #2
 800c004:	2b00      	cmp	r3, #0
 800c006:	f000 80eb 	beq.w	800c1e0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f005 fa92 	bl	8011534 <HAL_SD_RxCpltCallback>
}
 800c010:	e0e6      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00d      	beq.n	800c03c <HAL_SD_IRQHandler+0x1c0>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f003 0308 	and.w	r3, r3, #8
 800c026:	2b00      	cmp	r3, #0
 800c028:	d008      	beq.n	800c03c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f001 f8a8 	bl	800d180 <SD_Write_IT>
 800c030:	e0d6      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
 800c032:	bf00      	nop
 800c034:	ffff3ec5 	.word	0xffff3ec5
 800c038:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c042:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 809d 	beq.w	800c186 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d005      	beq.n	800c066 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05e:	f043 0202 	orr.w	r2, r3, #2
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06c:	f003 0308 	and.w	r3, r3, #8
 800c070:	2b00      	cmp	r3, #0
 800c072:	d005      	beq.n	800c080 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c078:	f043 0208 	orr.w	r2, r3, #8
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c086:	f003 0320 	and.w	r3, r3, #32
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d005      	beq.n	800c09a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c092:	f043 0220 	orr.w	r2, r3, #32
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a0:	f003 0310 	and.w	r3, r3, #16
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d005      	beq.n	800c0b4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ac:	f043 0210 	orr.w	r2, r3, #16
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a4b      	ldr	r2, [pc, #300]	; (800c1e8 <HAL_SD_IRQHandler+0x36c>)
 800c0ba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c0ca:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68da      	ldr	r2, [r3, #12]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0da:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c0fa:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4618      	mov	r0, r3
 800c102:	f004 fd47 	bl	8010b94 <SDMMC_CmdStopTransfer>
 800c106:	4602      	mov	r2, r0
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c10c:	431a      	orrs	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68da      	ldr	r2, [r3, #12]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c120:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c12a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f003 0308 	and.w	r3, r3, #8
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00a      	beq.n	800c14c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f851 	bl	800c1ec <HAL_SD_ErrorCallback>
}
 800c14a:	e049      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c152:	2b00      	cmp	r3, #0
 800c154:	d044      	beq.n	800c1e0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d040      	beq.n	800c1e0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c16c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f834 	bl	800c1ec <HAL_SD_ErrorCallback>
}
 800c184:	e02c      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c18c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d025      	beq.n	800c1e0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c19c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a4:	f003 0304 	and.w	r3, r3, #4
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10c      	bne.n	800c1c6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f003 0320 	and.w	r3, r3, #32
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d003      	beq.n	800c1be <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f001 f84a 	bl	800d250 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c1bc:	e010      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 f832 	bl	800d228 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c1c4:	e00c      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f003 0320 	and.w	r3, r3, #32
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d003      	beq.n	800c1d8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f001 f833 	bl	800d23c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c1d6:	e003      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f001 f81b 	bl	800d214 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c1de:	e7ff      	b.n	800c1e0 <HAL_SD_IRQHandler+0x364>
 800c1e0:	bf00      	nop
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	18000f3a 	.word	0x18000f3a

0800c1ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c20e:	0f9b      	lsrs	r3, r3, #30
 800c210:	b2da      	uxtb	r2, r3
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c21a:	0e9b      	lsrs	r3, r3, #26
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 030f 	and.w	r3, r3, #15
 800c222:	b2da      	uxtb	r2, r3
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c22c:	0e1b      	lsrs	r3, r3, #24
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	f003 0303 	and.w	r3, r3, #3
 800c234:	b2da      	uxtb	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c23e:	0c1b      	lsrs	r3, r3, #16
 800c240:	b2da      	uxtb	r2, r3
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c24a:	0a1b      	lsrs	r3, r3, #8
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c256:	b2da      	uxtb	r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c260:	0d1b      	lsrs	r3, r3, #20
 800c262:	b29a      	uxth	r2, r3
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c26c:	0c1b      	lsrs	r3, r3, #16
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 030f 	and.w	r3, r3, #15
 800c274:	b2da      	uxtb	r2, r3
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c27e:	0bdb      	lsrs	r3, r3, #15
 800c280:	b2db      	uxtb	r3, r3
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	b2da      	uxtb	r2, r3
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c290:	0b9b      	lsrs	r3, r3, #14
 800c292:	b2db      	uxtb	r3, r3
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2a2:	0b5b      	lsrs	r3, r3, #13
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2b4:	0b1b      	lsrs	r3, r3, #12
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d163      	bne.n	800c398 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2d4:	009a      	lsls	r2, r3, #2
 800c2d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c2da:	4013      	ands	r3, r2
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c2e0:	0f92      	lsrs	r2, r2, #30
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2ec:	0edb      	lsrs	r3, r3, #27
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	f003 0307 	and.w	r3, r3, #7
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2fe:	0e1b      	lsrs	r3, r3, #24
 800c300:	b2db      	uxtb	r3, r3
 800c302:	f003 0307 	and.w	r3, r3, #7
 800c306:	b2da      	uxtb	r2, r3
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c310:	0d5b      	lsrs	r3, r3, #21
 800c312:	b2db      	uxtb	r3, r3
 800c314:	f003 0307 	and.w	r3, r3, #7
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c322:	0c9b      	lsrs	r3, r3, #18
 800c324:	b2db      	uxtb	r3, r3
 800c326:	f003 0307 	and.w	r3, r3, #7
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c334:	0bdb      	lsrs	r3, r3, #15
 800c336:	b2db      	uxtb	r3, r3
 800c338:	f003 0307 	and.w	r3, r3, #7
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	7e1b      	ldrb	r3, [r3, #24]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	f003 0307 	and.w	r3, r3, #7
 800c356:	3302      	adds	r3, #2
 800c358:	2201      	movs	r2, #1
 800c35a:	fa02 f303 	lsl.w	r3, r2, r3
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c362:	fb03 f202 	mul.w	r2, r3, r2
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	7a1b      	ldrb	r3, [r3, #8]
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	f003 030f 	and.w	r3, r3, #15
 800c374:	2201      	movs	r2, #1
 800c376:	409a      	lsls	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c384:	0a52      	lsrs	r2, r2, #9
 800c386:	fb03 f202 	mul.w	r2, r3, r2
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c394:	655a      	str	r2, [r3, #84]	; 0x54
 800c396:	e031      	b.n	800c3fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d11d      	bne.n	800c3dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3a4:	041b      	lsls	r3, r3, #16
 800c3a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3ae:	0c1b      	lsrs	r3, r3, #16
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	029a      	lsls	r2, r3, #10
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	655a      	str	r2, [r3, #84]	; 0x54
 800c3da:	e00f      	b.n	800c3fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a58      	ldr	r2, [pc, #352]	; (800c544 <HAL_SD_GetCardCSD+0x344>)
 800c3e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e09d      	b.n	800c538 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c400:	0b9b      	lsrs	r3, r3, #14
 800c402:	b2db      	uxtb	r3, r3
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c412:	09db      	lsrs	r3, r3, #7
 800c414:	b2db      	uxtb	r3, r3
 800c416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c424:	b2db      	uxtb	r3, r3
 800c426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c434:	0fdb      	lsrs	r3, r3, #31
 800c436:	b2da      	uxtb	r2, r3
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c440:	0f5b      	lsrs	r3, r3, #29
 800c442:	b2db      	uxtb	r3, r3
 800c444:	f003 0303 	and.w	r3, r3, #3
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c452:	0e9b      	lsrs	r3, r3, #26
 800c454:	b2db      	uxtb	r3, r3
 800c456:	f003 0307 	and.w	r3, r3, #7
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c464:	0d9b      	lsrs	r3, r3, #22
 800c466:	b2db      	uxtb	r3, r3
 800c468:	f003 030f 	and.w	r3, r3, #15
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c476:	0d5b      	lsrs	r3, r3, #21
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c492:	0c1b      	lsrs	r3, r3, #16
 800c494:	b2db      	uxtb	r3, r3
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4a6:	0bdb      	lsrs	r3, r3, #15
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4ba:	0b9b      	lsrs	r3, r3, #14
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4ce:	0b5b      	lsrs	r3, r3, #13
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	f003 0301 	and.w	r3, r3, #1
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4e2:	0b1b      	lsrs	r3, r3, #12
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4f6:	0a9b      	lsrs	r3, r3, #10
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	f003 0303 	and.w	r3, r3, #3
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c50a:	0a1b      	lsrs	r3, r3, #8
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f003 0303 	and.w	r3, r3, #3
 800c512:	b2da      	uxtb	r2, r3
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c51e:	085b      	lsrs	r3, r3, #1
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c526:	b2da      	uxtb	r2, r3
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	1fe00fff 	.word	0x1fe00fff

0800c548 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b094      	sub	sp, #80	; 0x50
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b03      	cmp	r3, #3
 800c562:	d101      	bne.n	800c568 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	e0a7      	b.n	800c6b8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c568:	f107 0308 	add.w	r3, r7, #8
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fb62 	bl	800cc38 <SD_SendSDStatus>
 800c574:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d011      	beq.n	800c5a0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a4f      	ldr	r2, [pc, #316]	; (800c6c0 <HAL_SD_GetCardStatus+0x178>)
 800c582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58a:	431a      	orrs	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c59e:	e070      	b.n	800c682 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	099b      	lsrs	r3, r3, #6
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	f003 0303 	and.w	r3, r3, #3
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	095b      	lsrs	r3, r3, #5
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	0a1b      	lsrs	r3, r3, #8
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	0e1b      	lsrs	r3, r3, #24
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	061a      	lsls	r2, r3, #24
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	021b      	lsls	r3, r3, #8
 800c5e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5e6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	0a1b      	lsrs	r3, r3, #8
 800c5ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c5f0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	0e1b      	lsrs	r3, r3, #24
 800c5f6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	0d1b      	lsrs	r3, r3, #20
 800c612:	b2db      	uxtb	r3, r3
 800c614:	f003 030f 	and.w	r3, r3, #15
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	0c1b      	lsrs	r3, r3, #16
 800c622:	b29b      	uxth	r3, r3
 800c624:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c628:	b29a      	uxth	r2, r3
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	b29b      	uxth	r3, r3
 800c632:	4313      	orrs	r3, r2
 800c634:	b29a      	uxth	r2, r3
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	0a9b      	lsrs	r3, r3, #10
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c644:	b2da      	uxtb	r2, r3
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	0a1b      	lsrs	r3, r3, #8
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	f003 0303 	and.w	r3, r3, #3
 800c654:	b2da      	uxtb	r2, r3
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	091b      	lsrs	r3, r3, #4
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	b2da      	uxtb	r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	f003 030f 	and.w	r3, r3, #15
 800c672:	b2da      	uxtb	r2, r3
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	0e1b      	lsrs	r3, r3, #24
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c68a:	4618      	mov	r0, r3
 800c68c:	f004 f9d2 	bl	8010a34 <SDMMC_CmdBlockLength>
 800c690:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00d      	beq.n	800c6b4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a08      	ldr	r2, [pc, #32]	; (800c6c0 <HAL_SD_GetCardStatus+0x178>)
 800c69e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6a4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800c6b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3750      	adds	r7, #80	; 0x50
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	1fe00fff 	.word	0x1fe00fff

0800c6c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c71c:	b590      	push	{r4, r7, lr}
 800c71e:	b08d      	sub	sp, #52	; 0x34
 800c720:	af02      	add	r7, sp, #8
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800c726:	2300      	movs	r3, #0
 800c728:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2203      	movs	r2, #3
 800c734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d02e      	beq.n	800c79e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c746:	d106      	bne.n	800c756 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c74c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	635a      	str	r2, [r3, #52]	; 0x34
 800c754:	e029      	b.n	800c7aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c75c:	d10a      	bne.n	800c774 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fb62 	bl	800ce28 <SD_WideBus_Enable>
 800c764:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	431a      	orrs	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	635a      	str	r2, [r3, #52]	; 0x34
 800c772:	e01a      	b.n	800c7aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10a      	bne.n	800c790 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fb9f 	bl	800cebe <SD_WideBus_Disable>
 800c780:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	431a      	orrs	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	635a      	str	r2, [r3, #52]	; 0x34
 800c78e:	e00c      	b.n	800c7aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c794:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	635a      	str	r2, [r3, #52]	; 0x34
 800c79c:	e005      	b.n	800c7aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d007      	beq.n	800c7c2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a5e      	ldr	r2, [pc, #376]	; (800c930 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c7b8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7c0:	e094      	b.n	800c8ec <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c7c2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c7c6:	f7fd fea9 	bl	800a51c <HAL_RCCEx_GetPeriphCLKFreq>
 800c7ca:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800c7cc:	6a3b      	ldr	r3, [r7, #32]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 8083 	beq.w	800c8da <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	695a      	ldr	r2, [r3, #20]
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	4950      	ldr	r1, [pc, #320]	; (800c934 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c7f2:	fba1 1303 	umull	r1, r3, r1, r3
 800c7f6:	0e1b      	lsrs	r3, r3, #24
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d303      	bcc.n	800c804 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	695b      	ldr	r3, [r3, #20]
 800c800:	61bb      	str	r3, [r7, #24]
 800c802:	e05a      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c80c:	d103      	bne.n	800c816 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	e051      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c81e:	d126      	bne.n	800c86e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	695b      	ldr	r3, [r3, #20]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10e      	bne.n	800c846 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	4a43      	ldr	r2, [pc, #268]	; (800c938 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d906      	bls.n	800c83e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c830:	6a3b      	ldr	r3, [r7, #32]
 800c832:	4a40      	ldr	r2, [pc, #256]	; (800c934 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c834:	fba2 2303 	umull	r2, r3, r2, r3
 800c838:	0e5b      	lsrs	r3, r3, #25
 800c83a:	61bb      	str	r3, [r7, #24]
 800c83c:	e03d      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	61bb      	str	r3, [r7, #24]
 800c844:	e039      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	6a3a      	ldr	r2, [r7, #32]
 800c84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c852:	4a39      	ldr	r2, [pc, #228]	; (800c938 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d906      	bls.n	800c866 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	4a36      	ldr	r2, [pc, #216]	; (800c934 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c85c:	fba2 2303 	umull	r2, r3, r2, r3
 800c860:	0e5b      	lsrs	r3, r3, #25
 800c862:	61bb      	str	r3, [r7, #24]
 800c864:	e029      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	61bb      	str	r3, [r7, #24]
 800c86c:	e025      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10e      	bne.n	800c894 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c876:	6a3b      	ldr	r3, [r7, #32]
 800c878:	4a30      	ldr	r2, [pc, #192]	; (800c93c <HAL_SD_ConfigWideBusOperation+0x220>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d906      	bls.n	800c88c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c87e:	6a3b      	ldr	r3, [r7, #32]
 800c880:	4a2c      	ldr	r2, [pc, #176]	; (800c934 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c882:	fba2 2303 	umull	r2, r3, r2, r3
 800c886:	0e1b      	lsrs	r3, r3, #24
 800c888:	61bb      	str	r3, [r7, #24]
 800c88a:	e016      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	61bb      	str	r3, [r7, #24]
 800c892:	e012      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	695b      	ldr	r3, [r3, #20]
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	6a3a      	ldr	r2, [r7, #32]
 800c89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a0:	4a26      	ldr	r2, [pc, #152]	; (800c93c <HAL_SD_ConfigWideBusOperation+0x220>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d906      	bls.n	800c8b4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	4a22      	ldr	r2, [pc, #136]	; (800c934 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ae:	0e1b      	lsrs	r3, r3, #24
 800c8b0:	61bb      	str	r3, [r7, #24]
 800c8b2:	e002      	b.n	800c8ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681c      	ldr	r4, [r3, #0]
 800c8be:	466a      	mov	r2, sp
 800c8c0:	f107 0314 	add.w	r3, r7, #20
 800c8c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c8c8:	e882 0003 	stmia.w	r2, {r0, r1}
 800c8cc:	f107 0308 	add.w	r3, r7, #8
 800c8d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f003 ffd0 	bl	8010878 <SDMMC_Init>
 800c8d8:	e008      	b.n	800c8ec <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f004 f89d 	bl	8010a34 <SDMMC_CmdBlockLength>
 800c8fa:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00c      	beq.n	800c91c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a0a      	ldr	r2, [pc, #40]	; (800c930 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c908:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	431a      	orrs	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800c924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c928:	4618      	mov	r0, r3
 800c92a:	372c      	adds	r7, #44	; 0x2c
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd90      	pop	{r4, r7, pc}
 800c930:	1fe00fff 	.word	0x1fe00fff
 800c934:	55e63b89 	.word	0x55e63b89
 800c938:	02faf080 	.word	0x02faf080
 800c93c:	017d7840 	.word	0x017d7840

0800c940 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c94c:	f107 030c 	add.w	r3, r7, #12
 800c950:	4619      	mov	r1, r3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fa40 	bl	800cdd8 <SD_SendStatus>
 800c958:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	431a      	orrs	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	0a5b      	lsrs	r3, r3, #9
 800c970:	f003 030f 	and.w	r3, r3, #15
 800c974:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c976:	693b      	ldr	r3, [r7, #16]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b090      	sub	sp, #64	; 0x40
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c988:	2300      	movs	r3, #0
 800c98a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c98c:	f7f8 f834 	bl	80049f8 <HAL_GetTick>
 800c990:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4618      	mov	r0, r3
 800c998:	f003 ffc7 	bl	801092a <SDMMC_GetPowerState>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c9a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c9a6:	e0b5      	b.n	800cb14 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d02e      	beq.n	800ca0e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f004 fa12 	bl	8010dde <SDMMC_CmdSendCID>
 800c9ba:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <SD_InitCard+0x46>
    {
      return errorstate;
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	e0a6      	b.n	800cb14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f003 fff2 	bl	80109b6 <SDMMC_GetResponse>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2104      	movs	r1, #4
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f003 ffe9 	bl	80109b6 <SDMMC_GetResponse>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2108      	movs	r1, #8
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f003 ffe0 	bl	80109b6 <SDMMC_GetResponse>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	210c      	movs	r1, #12
 800ca02:	4618      	mov	r0, r3
 800ca04:	f003 ffd7 	bl	80109b6 <SDMMC_GetResponse>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d01d      	beq.n	800ca52 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ca16:	e019      	b.n	800ca4c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f107 020a 	add.w	r2, r7, #10
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f004 fa1a 	bl	8010e5c <SDMMC_CmdSetRelAdd>
 800ca28:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	e06f      	b.n	800cb14 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ca34:	f7f7 ffe0 	bl	80049f8 <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	f241 3287 	movw	r2, #4999	; 0x1387
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d902      	bls.n	800ca4c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ca46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca4a:	e063      	b.n	800cb14 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ca4c:	897b      	ldrh	r3, [r7, #10]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0e2      	beq.n	800ca18 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	d036      	beq.n	800cac8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ca5a:	897b      	ldrh	r3, [r7, #10]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca6a:	041b      	lsls	r3, r3, #16
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	4610      	mov	r0, r2
 800ca70:	f004 f9d4 	bl	8010e1c <SDMMC_CmdSendCSD>
 800ca74:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <SD_InitCard+0x100>
    {
      return errorstate;
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	e049      	b.n	800cb14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2100      	movs	r1, #0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f003 ff95 	bl	80109b6 <SDMMC_GetResponse>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2104      	movs	r1, #4
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f003 ff8c 	bl	80109b6 <SDMMC_GetResponse>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2108      	movs	r1, #8
 800caaa:	4618      	mov	r0, r3
 800caac:	f003 ff83 	bl	80109b6 <SDMMC_GetResponse>
 800cab0:	4602      	mov	r2, r0
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	210c      	movs	r1, #12
 800cabc:	4618      	mov	r0, r3
 800cabe:	f003 ff7a 	bl	80109b6 <SDMMC_GetResponse>
 800cac2:	4602      	mov	r2, r0
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2104      	movs	r1, #4
 800cace:	4618      	mov	r0, r3
 800cad0:	f003 ff71 	bl	80109b6 <SDMMC_GetResponse>
 800cad4:	4603      	mov	r3, r0
 800cad6:	0d1a      	lsrs	r2, r3, #20
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cadc:	f107 030c 	add.w	r3, r7, #12
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff fb8c 	bl	800c200 <HAL_SD_GetCardCSD>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d002      	beq.n	800caf4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800caee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caf2:	e00f      	b.n	800cb14 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafc:	041b      	lsls	r3, r3, #16
 800cafe:	4619      	mov	r1, r3
 800cb00:	4610      	mov	r0, r2
 800cb02:	f004 f883 	bl	8010c0c <SDMMC_CmdSelDesel>
 800cb06:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <SD_InitCard+0x192>
  {
    return errorstate;
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	e000      	b.n	800cb14 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3740      	adds	r7, #64	; 0x40
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb24:	2300      	movs	r3, #0
 800cb26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f004 f88c 	bl	8010c52 <SDMMC_CmdGoIdleState>
 800cb3a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d001      	beq.n	800cb46 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	e072      	b.n	800cc2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f004 f89f 	bl	8010c8e <SDMMC_CmdOperCond>
 800cb50:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb58:	d10d      	bne.n	800cb76 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f004 f874 	bl	8010c52 <SDMMC_CmdGoIdleState>
 800cb6a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d004      	beq.n	800cb7c <SD_PowerON+0x60>
    {
      return errorstate;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	e05a      	b.n	800cc2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d137      	bne.n	800cbf4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2100      	movs	r1, #0
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f004 f89f 	bl	8010cce <SDMMC_CmdAppCommand>
 800cb90:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d02d      	beq.n	800cbf4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb9c:	e046      	b.n	800cc2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2100      	movs	r1, #0
 800cba4:	4618      	mov	r0, r3
 800cba6:	f004 f892 	bl	8010cce <SDMMC_CmdAppCommand>
 800cbaa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d001      	beq.n	800cbb6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	e03a      	b.n	800cc2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	491e      	ldr	r1, [pc, #120]	; (800cc34 <SD_PowerON+0x118>)
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f004 f8a9 	bl	8010d14 <SDMMC_CmdAppOperCommand>
 800cbc2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d002      	beq.n	800cbd0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cbce:	e02d      	b.n	800cc2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f003 feed 	bl	80109b6 <SDMMC_GetResponse>
 800cbdc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	0fdb      	lsrs	r3, r3, #31
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d101      	bne.n	800cbea <SD_PowerON+0xce>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e000      	b.n	800cbec <SD_PowerON+0xd0>
 800cbea:	2300      	movs	r3, #0
 800cbec:	613b      	str	r3, [r7, #16]

    count++;
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d802      	bhi.n	800cc04 <SD_PowerON+0xe8>
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0cc      	beq.n	800cb9e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d902      	bls.n	800cc14 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc12:	e00b      	b.n	800cc2c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	c1100000 	.word	0xc1100000

0800cc38 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08c      	sub	sp, #48	; 0x30
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc42:	f7f7 fed9 	bl	80049f8 <HAL_GetTick>
 800cc46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2100      	movs	r1, #0
 800cc52:	4618      	mov	r0, r3
 800cc54:	f003 feaf 	bl	80109b6 <SDMMC_GetResponse>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc62:	d102      	bne.n	800cc6a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cc64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc68:	e0b0      	b.n	800cdcc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2140      	movs	r1, #64	; 0x40
 800cc70:	4618      	mov	r0, r3
 800cc72:	f003 fedf 	bl	8010a34 <SDMMC_CmdBlockLength>
 800cc76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc78:	6a3b      	ldr	r3, [r7, #32]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d005      	beq.n	800cc8a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	e0a0      	b.n	800cdcc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc92:	041b      	lsls	r3, r3, #16
 800cc94:	4619      	mov	r1, r3
 800cc96:	4610      	mov	r0, r2
 800cc98:	f004 f819 	bl	8010cce <SDMMC_CmdAppCommand>
 800cc9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d005      	beq.n	800ccb0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	e08d      	b.n	800cdcc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ccb6:	2340      	movs	r3, #64	; 0x40
 800ccb8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ccba:	2360      	movs	r3, #96	; 0x60
 800ccbc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f107 0208 	add.w	r2, r7, #8
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f003 fe81 	bl	80109dc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f004 f901 	bl	8010ee6 <SDMMC_CmdStatusRegister>
 800cce4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d02b      	beq.n	800cd44 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	e069      	b.n	800cdcc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d013      	beq.n	800cd2e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800cd06:	2300      	movs	r3, #0
 800cd08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd0a:	e00d      	b.n	800cd28 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f003 fddb 	bl	80108cc <SDMMC_ReadFIFO>
 800cd16:	4602      	mov	r2, r0
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	601a      	str	r2, [r3, #0]
        pData++;
 800cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1e:	3304      	adds	r3, #4
 800cd20:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	3301      	adds	r3, #1
 800cd26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2a:	2b07      	cmp	r3, #7
 800cd2c:	d9ee      	bls.n	800cd0c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd2e:	f7f7 fe63 	bl	80049f8 <HAL_GetTick>
 800cd32:	4602      	mov	r2, r0
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3c:	d102      	bne.n	800cd44 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cd3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd42:	e043      	b.n	800cdcc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d0d2      	beq.n	800ccf8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd58:	f003 0308 	and.w	r3, r3, #8
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cd60:	2308      	movs	r3, #8
 800cd62:	e033      	b.n	800cdcc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd72:	2302      	movs	r3, #2
 800cd74:	e02a      	b.n	800cdcc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7c:	f003 0320 	and.w	r3, r3, #32
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d017      	beq.n	800cdb4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cd84:	2320      	movs	r3, #32
 800cd86:	e021      	b.n	800cdcc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f003 fd9d 	bl	80108cc <SDMMC_ReadFIFO>
 800cd92:	4602      	mov	r2, r0
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	601a      	str	r2, [r3, #0]
    pData++;
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd9e:	f7f7 fe2b 	bl	80049f8 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdac:	d102      	bne.n	800cdb4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cdae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdb2:	e00b      	b.n	800cdcc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e2      	bne.n	800cd88 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a03      	ldr	r2, [pc, #12]	; (800cdd4 <SD_SendSDStatus+0x19c>)
 800cdc8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3730      	adds	r7, #48	; 0x30
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	18000f3a 	.word	0x18000f3a

0800cdd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cde8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cdec:	e018      	b.n	800ce20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf6:	041b      	lsls	r3, r3, #16
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	f004 f850 	bl	8010ea0 <SDMMC_CmdSendStatus>
 800ce00:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	e009      	b.n	800ce20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2100      	movs	r1, #0
 800ce12:	4618      	mov	r0, r3
 800ce14:	f003 fdcf 	bl	80109b6 <SDMMC_GetResponse>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ce30:	2300      	movs	r3, #0
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	2300      	movs	r3, #0
 800ce36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f003 fdb9 	bl	80109b6 <SDMMC_GetResponse>
 800ce44:	4603      	mov	r3, r0
 800ce46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce4e:	d102      	bne.n	800ce56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ce50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce54:	e02f      	b.n	800ceb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ce56:	f107 030c 	add.w	r3, r7, #12
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f879 	bl	800cf54 <SD_FindSCR>
 800ce62:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	e023      	b.n	800ceb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d01c      	beq.n	800ceb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce80:	041b      	lsls	r3, r3, #16
 800ce82:	4619      	mov	r1, r3
 800ce84:	4610      	mov	r0, r2
 800ce86:	f003 ff22 	bl	8010cce <SDMMC_CmdAppCommand>
 800ce8a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	e00f      	b.n	800ceb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2102      	movs	r1, #2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f003 ff59 	bl	8010d54 <SDMMC_CmdBusWidth>
 800cea2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	e003      	b.n	800ceb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e001      	b.n	800ceb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ceb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b086      	sub	sp, #24
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	2300      	movs	r3, #0
 800cecc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2100      	movs	r1, #0
 800ced4:	4618      	mov	r0, r3
 800ced6:	f003 fd6e 	bl	80109b6 <SDMMC_GetResponse>
 800ceda:	4603      	mov	r3, r0
 800cedc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cee4:	d102      	bne.n	800ceec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ceea:	e02f      	b.n	800cf4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ceec:	f107 030c 	add.w	r3, r7, #12
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f82e 	bl	800cf54 <SD_FindSCR>
 800cef8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	e023      	b.n	800cf4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d01c      	beq.n	800cf48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf16:	041b      	lsls	r3, r3, #16
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	f003 fed7 	bl	8010cce <SDMMC_CmdAppCommand>
 800cf20:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d001      	beq.n	800cf2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	e00f      	b.n	800cf4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2100      	movs	r1, #0
 800cf32:	4618      	mov	r0, r3
 800cf34:	f003 ff0e 	bl	8010d54 <SDMMC_CmdBusWidth>
 800cf38:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	e003      	b.n	800cf4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	e001      	b.n	800cf4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3718      	adds	r7, #24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08e      	sub	sp, #56	; 0x38
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf5e:	f7f7 fd4b 	bl	80049f8 <HAL_GetTick>
 800cf62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cf64:	2300      	movs	r3, #0
 800cf66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cf68:	2300      	movs	r3, #0
 800cf6a:	60bb      	str	r3, [r7, #8]
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2108      	movs	r1, #8
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f003 fd5a 	bl	8010a34 <SDMMC_CmdBlockLength>
 800cf80:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <SD_FindSCR+0x38>
  {
    return errorstate;
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	e0ad      	b.n	800d0e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf94:	041b      	lsls	r3, r3, #16
 800cf96:	4619      	mov	r1, r3
 800cf98:	4610      	mov	r0, r2
 800cf9a:	f003 fe98 	bl	8010cce <SDMMC_CmdAppCommand>
 800cf9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <SD_FindSCR+0x56>
  {
    return errorstate;
 800cfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa8:	e09e      	b.n	800d0e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfaa:	f04f 33ff 	mov.w	r3, #4294967295
 800cfae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cfb0:	2308      	movs	r3, #8
 800cfb2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cfb4:	2330      	movs	r3, #48	; 0x30
 800cfb6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cfb8:	2302      	movs	r3, #2
 800cfba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f107 0210 	add.w	r2, r7, #16
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f003 fd04 	bl	80109dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f003 fede 	bl	8010d9a <SDMMC_CmdSendSCR>
 800cfde:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d027      	beq.n	800d036 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe8:	e07e      	b.n	800d0e8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d113      	bne.n	800d020 <SD_FindSCR+0xcc>
 800cff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d110      	bne.n	800d020 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4618      	mov	r0, r3
 800d004:	f003 fc62 	bl	80108cc <SDMMC_ReadFIFO>
 800d008:	4603      	mov	r3, r0
 800d00a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4618      	mov	r0, r3
 800d012:	f003 fc5b 	bl	80108cc <SDMMC_ReadFIFO>
 800d016:	4603      	mov	r3, r0
 800d018:	60fb      	str	r3, [r7, #12]
      index++;
 800d01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01c:	3301      	adds	r3, #1
 800d01e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d020:	f7f7 fcea 	bl	80049f8 <HAL_GetTick>
 800d024:	4602      	mov	r2, r0
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02e:	d102      	bne.n	800d036 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d034:	e058      	b.n	800d0e8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d03c:	f240 532a 	movw	r3, #1322	; 0x52a
 800d040:	4013      	ands	r3, r2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d0d1      	beq.n	800cfea <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04c:	f003 0308 	and.w	r3, r3, #8
 800d050:	2b00      	cmp	r3, #0
 800d052:	d005      	beq.n	800d060 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2208      	movs	r2, #8
 800d05a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d05c:	2308      	movs	r3, #8
 800d05e:	e043      	b.n	800d0e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d005      	beq.n	800d07a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2202      	movs	r2, #2
 800d074:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d076:	2302      	movs	r3, #2
 800d078:	e036      	b.n	800d0e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d080:	f003 0320 	and.w	r3, r3, #32
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2220      	movs	r2, #32
 800d08e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d090:	2320      	movs	r3, #32
 800d092:	e029      	b.n	800d0e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a15      	ldr	r2, [pc, #84]	; (800d0f0 <SD_FindSCR+0x19c>)
 800d09a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	061a      	lsls	r2, r3, #24
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	021b      	lsls	r3, r3, #8
 800d0a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	0a1b      	lsrs	r3, r3, #8
 800d0ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d0b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	0e1b      	lsrs	r3, r3, #24
 800d0b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	601a      	str	r2, [r3, #0]
    scr++;
 800d0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	061a      	lsls	r2, r3, #24
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	021b      	lsls	r3, r3, #8
 800d0cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	0a1b      	lsrs	r3, r3, #8
 800d0d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d0da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	0e1b      	lsrs	r3, r3, #24
 800d0e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3738      	adds	r7, #56	; 0x38
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	18000f3a 	.word	0x18000f3a

0800d0f4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d100:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d106:	2b1f      	cmp	r3, #31
 800d108:	d936      	bls.n	800d178 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d10a:	2300      	movs	r3, #0
 800d10c:	617b      	str	r3, [r7, #20]
 800d10e:	e027      	b.n	800d160 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4618      	mov	r0, r3
 800d116:	f003 fbd9 	bl	80108cc <SDMMC_ReadFIFO>
 800d11a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	3301      	adds	r3, #1
 800d128:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	0a1b      	lsrs	r3, r3, #8
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	3301      	adds	r3, #1
 800d138:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	0c1b      	lsrs	r3, r3, #16
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	3301      	adds	r3, #1
 800d148:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	0e1b      	lsrs	r3, r3, #24
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	3301      	adds	r3, #1
 800d158:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	3301      	adds	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2b07      	cmp	r3, #7
 800d164:	d9d4      	bls.n	800d110 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d170:	f1a3 0220 	sub.w	r2, r3, #32
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800d178:	bf00      	nop
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	69db      	ldr	r3, [r3, #28]
 800d18c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a1b      	ldr	r3, [r3, #32]
 800d192:	2b1f      	cmp	r3, #31
 800d194:	d93a      	bls.n	800d20c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d196:	2300      	movs	r3, #0
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	e02b      	b.n	800d1f4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	021a      	lsls	r2, r3, #8
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	041a      	lsls	r2, r3, #16
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	061a      	lsls	r2, r3, #24
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f107 020c 	add.w	r2, r7, #12
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f003 fb7c 	bl	80108e6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b07      	cmp	r3, #7
 800d1f8:	d9d0      	bls.n	800d19c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	693a      	ldr	r2, [r7, #16]
 800d1fe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a1b      	ldr	r3, [r3, #32]
 800d204:	f1a3 0220 	sub.w	r2, r3, #32
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	621a      	str	r2, [r3, #32]
  }
}
 800d20c:	bf00      	nop
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d258:	bf00      	nop
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e0a8      	b.n	800d3c8 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d106      	bne.n	800d28c <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7f4 f976 	bl	8001578 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2202      	movs	r2, #2
 800d290:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f022 0201 	bic.w	r2, r2, #1
 800d2a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d2ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	695a      	ldr	r2, [r3, #20]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d2be:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	695a      	ldr	r2, [r3, #20]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800d2ce:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d2d8:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689a      	ldr	r2, [r3, #8]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d2e8:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d012      	beq.n	800d318 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d107      	bne.n	800d30a <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d306:	609a      	str	r2, [r3, #8]
 800d308:	e006      	b.n	800d318 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68da      	ldr	r2, [r3, #12]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d316:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d104      	bne.n	800d32a <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6859      	ldr	r1, [r3, #4]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	4b26      	ldr	r3, [pc, #152]	; (800d3d0 <HAL_SMBUS_Init+0x16c>)
 800d336:	430b      	orrs	r3, r1
 800d338:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	695a      	ldr	r2, [r3, #20]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	699b      	ldr	r3, [r3, #24]
 800d342:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	69db      	ldr	r3, [r3, #28]
 800d34a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	430a      	orrs	r2, r1
 800d352:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1a      	ldr	r2, [r3, #32]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800d362:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d368:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800d374:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800d376:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d380:	d110      	bne.n	800d3a4 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800d386:	2b00      	cmp	r3, #0
 800d388:	d004      	beq.n	800d394 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800d38e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d392:	d107      	bne.n	800d3a4 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d3a2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0201 	orr.w	r2, r2, #1
 800d3b2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	02008000 	.word	0x02008000

0800d3d4 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d137      	bne.n	800d456 <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d101      	bne.n	800d3f4 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800d3f0:	2302      	movs	r3, #2
 800d3f2:	e031      	b.n	800d458 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2202      	movs	r2, #2
 800d400:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f022 0201 	bic.w	r2, r2, #1
 800d410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	021b      	lsls	r3, r3, #8
 800d426:	68fa      	ldr	r2, [r7, #12]
 800d428:	4313      	orrs	r3, r2
 800d42a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f042 0201 	orr.w	r2, r2, #1
 800d442:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2201      	movs	r2, #1
 800d448:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	e000      	b.n	800d458 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800d456:	2302      	movs	r3, #2
  }
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3714      	adds	r7, #20
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d472:	2301      	movs	r3, #1
 800d474:	e0f1      	b.n	800d65a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a78      	ldr	r2, [pc, #480]	; (800d664 <HAL_SPI_Init+0x200>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d00f      	beq.n	800d4a6 <HAL_SPI_Init+0x42>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a77      	ldr	r2, [pc, #476]	; (800d668 <HAL_SPI_Init+0x204>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d00a      	beq.n	800d4a6 <HAL_SPI_Init+0x42>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a75      	ldr	r2, [pc, #468]	; (800d66c <HAL_SPI_Init+0x208>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d005      	beq.n	800d4a6 <HAL_SPI_Init+0x42>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	2b0f      	cmp	r3, #15
 800d4a0:	d901      	bls.n	800d4a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e0d9      	b.n	800d65a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fc9c 	bl	800dde4 <SPI_GetPacketSize>
 800d4ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a6c      	ldr	r2, [pc, #432]	; (800d664 <HAL_SPI_Init+0x200>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d00c      	beq.n	800d4d2 <HAL_SPI_Init+0x6e>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a6a      	ldr	r2, [pc, #424]	; (800d668 <HAL_SPI_Init+0x204>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d007      	beq.n	800d4d2 <HAL_SPI_Init+0x6e>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a69      	ldr	r2, [pc, #420]	; (800d66c <HAL_SPI_Init+0x208>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d002      	beq.n	800d4d2 <HAL_SPI_Init+0x6e>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2b08      	cmp	r3, #8
 800d4d0:	d811      	bhi.n	800d4f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d4d6:	4a63      	ldr	r2, [pc, #396]	; (800d664 <HAL_SPI_Init+0x200>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d009      	beq.n	800d4f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a61      	ldr	r2, [pc, #388]	; (800d668 <HAL_SPI_Init+0x204>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d004      	beq.n	800d4f0 <HAL_SPI_Init+0x8c>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a60      	ldr	r2, [pc, #384]	; (800d66c <HAL_SPI_Init+0x208>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d104      	bne.n	800d4fa <HAL_SPI_Init+0x96>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b10      	cmp	r3, #16
 800d4f4:	d901      	bls.n	800d4fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e0af      	b.n	800d65a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d106      	bne.n	800d514 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7f6 fab8 	bl	8003a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2202      	movs	r2, #2
 800d518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f022 0201 	bic.w	r2, r2, #1
 800d52a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d536:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d540:	d119      	bne.n	800d576 <HAL_SPI_Init+0x112>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d54a:	d103      	bne.n	800d554 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d550:	2b00      	cmp	r3, #0
 800d552:	d008      	beq.n	800d566 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10c      	bne.n	800d576 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d564:	d107      	bne.n	800d576 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d574:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	69da      	ldr	r2, [r3, #28]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57e:	431a      	orrs	r2, r3
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	431a      	orrs	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d588:	ea42 0103 	orr.w	r1, r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	68da      	ldr	r2, [r3, #12]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	430a      	orrs	r2, r1
 800d596:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a0:	431a      	orrs	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a6:	431a      	orrs	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	431a      	orrs	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	431a      	orrs	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5ca:	431a      	orrs	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	431a      	orrs	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5d6:	ea42 0103 	orr.w	r1, r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	430a      	orrs	r2, r1
 800d5e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d113      	bne.n	800d616 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d600:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d614:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f022 0201 	bic.w	r2, r2, #1
 800d624:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	40013000 	.word	0x40013000
 800d668:	40003800 	.word	0x40003800
 800d66c:	40003c00 	.word	0x40003c00

0800d670 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b08e      	sub	sp, #56	; 0x38
 800d674:	af02      	add	r7, sp, #8
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
 800d67c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3320      	adds	r3, #32
 800d68a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3330      	adds	r3, #48	; 0x30
 800d692:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d101      	bne.n	800d6a2 <HAL_SPI_TransmitReceive+0x32>
 800d69e:	2302      	movs	r3, #2
 800d6a0:	e2ce      	b.n	800dc40 <HAL_SPI_TransmitReceive+0x5d0>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6aa:	f7f7 f9a5 	bl	80049f8 <HAL_GetTick>
 800d6ae:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d6b0:	887b      	ldrh	r3, [r7, #2]
 800d6b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d6b4:	887b      	ldrh	r3, [r7, #2]
 800d6b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6be:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d6c6:	7efb      	ldrb	r3, [r7, #27]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d014      	beq.n	800d6f6 <HAL_SPI_TransmitReceive+0x86>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6d2:	d106      	bne.n	800d6e2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d102      	bne.n	800d6e2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d6dc:	7efb      	ldrb	r3, [r7, #27]
 800d6de:	2b04      	cmp	r3, #4
 800d6e0:	d009      	beq.n	800d6f6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800d6e2:	2302      	movs	r3, #2
 800d6e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d6f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6f4:	e2a4      	b.n	800dc40 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d005      	beq.n	800d708 <HAL_SPI_TransmitReceive+0x98>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <HAL_SPI_TransmitReceive+0x98>
 800d702:	887b      	ldrh	r3, [r7, #2]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d109      	bne.n	800d71c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d708:	2301      	movs	r3, #1
 800d70a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d716:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d71a:	e291      	b.n	800dc40 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b04      	cmp	r3, #4
 800d726:	d003      	beq.n	800d730 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2205      	movs	r2, #5
 800d72c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	887a      	ldrh	r2, [r7, #2]
 800d742:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	887a      	ldrh	r2, [r7, #2]
 800d74a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	887a      	ldrh	r2, [r7, #2]
 800d758:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	887a      	ldrh	r2, [r7, #2]
 800d760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	4b81      	ldr	r3, [pc, #516]	; (800d97c <HAL_SPI_TransmitReceive+0x30c>)
 800d778:	4013      	ands	r3, r2
 800d77a:	8879      	ldrh	r1, [r7, #2]
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	6812      	ldr	r2, [r2, #0]
 800d780:	430b      	orrs	r3, r1
 800d782:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f042 0201 	orr.w	r2, r2, #1
 800d792:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d79c:	d107      	bne.n	800d7ae <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	68db      	ldr	r3, [r3, #12]
 800d7b2:	2b0f      	cmp	r3, #15
 800d7b4:	d970      	bls.n	800d898 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d7b6:	e068      	b.n	800d88a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	f003 0302 	and.w	r3, r3, #2
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d11a      	bne.n	800d7fc <HAL_SPI_TransmitReceive+0x18c>
 800d7c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d017      	beq.n	800d7fc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6812      	ldr	r2, [r2, #0]
 800d7d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7dc:	1d1a      	adds	r2, r3, #4
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	695a      	ldr	r2, [r3, #20]
 800d802:	f248 0308 	movw	r3, #32776	; 0x8008
 800d806:	4013      	ands	r3, r2
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d01a      	beq.n	800d842 <HAL_SPI_TransmitReceive+0x1d2>
 800d80c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d017      	beq.n	800d842 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d81a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d81c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d822:	1d1a      	adds	r2, r3, #4
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d82e:	b29b      	uxth	r3, r3
 800d830:	3b01      	subs	r3, #1
 800d832:	b29a      	uxth	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d840:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d842:	f7f7 f8d9 	bl	80049f8 <HAL_GetTick>
 800d846:	4602      	mov	r2, r0
 800d848:	69fb      	ldr	r3, [r7, #28]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d84e:	429a      	cmp	r2, r3
 800d850:	d803      	bhi.n	800d85a <HAL_SPI_TransmitReceive+0x1ea>
 800d852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d858:	d102      	bne.n	800d860 <HAL_SPI_TransmitReceive+0x1f0>
 800d85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d114      	bne.n	800d88a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f000 f9f1 	bl	800dc48 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d886:	2303      	movs	r3, #3
 800d888:	e1da      	b.n	800dc40 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d88a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d193      	bne.n	800d7b8 <HAL_SPI_TransmitReceive+0x148>
 800d890:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d892:	2b00      	cmp	r3, #0
 800d894:	d190      	bne.n	800d7b8 <HAL_SPI_TransmitReceive+0x148>
 800d896:	e1ac      	b.n	800dbf2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	2b07      	cmp	r3, #7
 800d89e:	f240 81a0 	bls.w	800dbe2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d8a2:	e0a9      	b.n	800d9f8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	695b      	ldr	r3, [r3, #20]
 800d8aa:	f003 0302 	and.w	r3, r3, #2
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d139      	bne.n	800d926 <HAL_SPI_TransmitReceive+0x2b6>
 800d8b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d036      	beq.n	800d926 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d8b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d91c      	bls.n	800d8f8 <HAL_SPI_TransmitReceive+0x288>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d018      	beq.n	800d8f8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6812      	ldr	r2, [r2, #0]
 800d8d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	3b02      	subs	r3, #2
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d8f6:	e016      	b.n	800d926 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8fc:	881a      	ldrh	r2, [r3, #0]
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d906:	1c9a      	adds	r2, r3, #2
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d912:	b29b      	uxth	r3, r3
 800d914:	3b01      	subs	r3, #1
 800d916:	b29a      	uxth	r2, r3
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d924:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d03d      	beq.n	800d9b0 <HAL_SPI_TransmitReceive+0x340>
 800d934:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d03a      	beq.n	800d9b0 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	695b      	ldr	r3, [r3, #20]
 800d940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d01b      	beq.n	800d980 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d950:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d952:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d958:	1d1a      	adds	r2, r3, #4
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d964:	b29b      	uxth	r3, r3
 800d966:	3b02      	subs	r3, #2
 800d968:	b29a      	uxth	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d976:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d978:	e01a      	b.n	800d9b0 <HAL_SPI_TransmitReceive+0x340>
 800d97a:	bf00      	nop
 800d97c:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d984:	6a3a      	ldr	r2, [r7, #32]
 800d986:	8812      	ldrh	r2, [r2, #0]
 800d988:	b292      	uxth	r2, r2
 800d98a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d990:	1c9a      	adds	r2, r3, #2
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9b0:	f7f7 f822 	bl	80049f8 <HAL_GetTick>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d803      	bhi.n	800d9c8 <HAL_SPI_TransmitReceive+0x358>
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c6:	d102      	bne.n	800d9ce <HAL_SPI_TransmitReceive+0x35e>
 800d9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d114      	bne.n	800d9f8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 f93a 	bl	800dc48 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	e123      	b.n	800dc40 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d9f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f47f af52 	bne.w	800d8a4 <HAL_SPI_TransmitReceive+0x234>
 800da00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da02:	2b00      	cmp	r3, #0
 800da04:	f47f af4e 	bne.w	800d8a4 <HAL_SPI_TransmitReceive+0x234>
 800da08:	e0f3      	b.n	800dbf2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	f003 0302 	and.w	r3, r3, #2
 800da14:	2b02      	cmp	r3, #2
 800da16:	d15a      	bne.n	800dace <HAL_SPI_TransmitReceive+0x45e>
 800da18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d057      	beq.n	800dace <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800da1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da20:	2b03      	cmp	r3, #3
 800da22:	d91c      	bls.n	800da5e <HAL_SPI_TransmitReceive+0x3ee>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da28:	2b40      	cmp	r3, #64	; 0x40
 800da2a:	d918      	bls.n	800da5e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	6812      	ldr	r2, [r2, #0]
 800da36:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da3c:	1d1a      	adds	r2, r3, #4
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da48:	b29b      	uxth	r3, r3
 800da4a:	3b04      	subs	r3, #4
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800da5c:	e037      	b.n	800dace <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800da5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da60:	2b01      	cmp	r3, #1
 800da62:	d91b      	bls.n	800da9c <HAL_SPI_TransmitReceive+0x42c>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d017      	beq.n	800da9c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da70:	881a      	ldrh	r2, [r3, #0]
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da7a:	1c9a      	adds	r2, r3, #2
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da86:	b29b      	uxth	r3, r3
 800da88:	3b02      	subs	r3, #2
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800da9a:	e018      	b.n	800dace <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3320      	adds	r3, #32
 800daa6:	7812      	ldrb	r2, [r2, #0]
 800daa8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daae:	1c5a      	adds	r2, r3, #1
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800daba:	b29b      	uxth	r3, r3
 800dabc:	3b01      	subs	r3, #1
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dacc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	695b      	ldr	r3, [r3, #20]
 800dad4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d05e      	beq.n	800db9a <HAL_SPI_TransmitReceive+0x52a>
 800dadc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d05b      	beq.n	800db9a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	695b      	ldr	r3, [r3, #20]
 800dae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800daec:	2b00      	cmp	r3, #0
 800daee:	d018      	beq.n	800db22 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dafa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db00:	1d1a      	adds	r2, r3, #4
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3b04      	subs	r3, #4
 800db10:	b29a      	uxth	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800db20:	e03b      	b.n	800db9a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800db2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db30:	d918      	bls.n	800db64 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db36:	6a3a      	ldr	r2, [r7, #32]
 800db38:	8812      	ldrh	r2, [r2, #0]
 800db3a:	b292      	uxth	r2, r2
 800db3c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db42:	1c9a      	adds	r2, r3, #2
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db4e:	b29b      	uxth	r3, r3
 800db50:	3b02      	subs	r3, #2
 800db52:	b29a      	uxth	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db60:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800db62:	e01a      	b.n	800db9a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db70:	7812      	ldrb	r2, [r2, #0]
 800db72:	b2d2      	uxtb	r2, r2
 800db74:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db86:	b29b      	uxth	r3, r3
 800db88:	3b01      	subs	r3, #1
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db98:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db9a:	f7f6 ff2d 	bl	80049f8 <HAL_GetTick>
 800db9e:	4602      	mov	r2, r0
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d803      	bhi.n	800dbb2 <HAL_SPI_TransmitReceive+0x542>
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb0:	d102      	bne.n	800dbb8 <HAL_SPI_TransmitReceive+0x548>
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d114      	bne.n	800dbe2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f000 f845 	bl	800dc48 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800dbde:	2303      	movs	r3, #3
 800dbe0:	e02e      	b.n	800dc40 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dbe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f47f af10 	bne.w	800da0a <HAL_SPI_TransmitReceive+0x39a>
 800dbea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f47f af0c 	bne.w	800da0a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	2108      	movs	r1, #8
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f000 f8c3 	bl	800dd88 <SPI_WaitOnFlagUntilTimeout>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d007      	beq.n	800dc18 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc0e:	f043 0220 	orr.w	r2, r3, #32
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f000 f815 	bl	800dc48 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e001      	b.n	800dc40 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800dc3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3730      	adds	r7, #48	; 0x30
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	695b      	ldr	r3, [r3, #20]
 800dc56:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	699a      	ldr	r2, [r3, #24]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f042 0208 	orr.w	r2, r2, #8
 800dc66:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	699a      	ldr	r2, [r3, #24]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f042 0210 	orr.w	r2, r2, #16
 800dc76:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f022 0201 	bic.w	r2, r2, #1
 800dc86:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6919      	ldr	r1, [r3, #16]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	4b3c      	ldr	r3, [pc, #240]	; (800dd84 <SPI_CloseTransfer+0x13c>)
 800dc94:	400b      	ands	r3, r1
 800dc96:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	689a      	ldr	r2, [r3, #8]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800dca6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b04      	cmp	r3, #4
 800dcb2:	d014      	beq.n	800dcde <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f003 0320 	and.w	r3, r3, #32
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00f      	beq.n	800dcde <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	699a      	ldr	r2, [r3, #24]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f042 0220 	orr.w	r2, r2, #32
 800dcdc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d014      	beq.n	800dd14 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00f      	beq.n	800dd14 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcfa:	f043 0204 	orr.w	r2, r3, #4
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	699a      	ldr	r2, [r3, #24]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd12:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00f      	beq.n	800dd3e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd24:	f043 0201 	orr.w	r2, r3, #1
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	699a      	ldr	r2, [r3, #24]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd3c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d00f      	beq.n	800dd68 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd4e:	f043 0208 	orr.w	r2, r3, #8
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	699a      	ldr	r2, [r3, #24]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd66:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dd78:	bf00      	nop
 800dd7a:	3714      	adds	r7, #20
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr
 800dd84:	fffffc90 	.word	0xfffffc90

0800dd88 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	603b      	str	r3, [r7, #0]
 800dd94:	4613      	mov	r3, r2
 800dd96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dd98:	e010      	b.n	800ddbc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd9a:	f7f6 fe2d 	bl	80049f8 <HAL_GetTick>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	69ba      	ldr	r2, [r7, #24]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d803      	bhi.n	800ddb2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb0:	d102      	bne.n	800ddb8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	e00f      	b.n	800dddc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	695a      	ldr	r2, [r3, #20]
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	bf0c      	ite	eq
 800ddcc:	2301      	moveq	r3, #1
 800ddce:	2300      	movne	r3, #0
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d0df      	beq.n	800dd9a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf0:	095b      	lsrs	r3, r3, #5
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	3307      	adds	r3, #7
 800de02:	08db      	lsrs	r3, r3, #3
 800de04:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	fb02 f303 	mul.w	r3, r2, r3
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr

0800de1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b082      	sub	sp, #8
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e049      	b.n	800dec0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de32:	b2db      	uxtb	r3, r3
 800de34:	2b00      	cmp	r3, #0
 800de36:	d106      	bne.n	800de46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7f6 f9bd 	bl	80041c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2202      	movs	r2, #2
 800de4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	3304      	adds	r3, #4
 800de56:	4619      	mov	r1, r3
 800de58:	4610      	mov	r0, r2
 800de5a:	f000 fe53 	bl	800eb04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2201      	movs	r2, #1
 800de6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2201      	movs	r2, #1
 800de72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2201      	movs	r2, #1
 800de82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2201      	movs	r2, #1
 800de8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2201      	movs	r2, #1
 800de9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2201      	movs	r2, #1
 800deb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2201      	movs	r2, #1
 800deba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d001      	beq.n	800dee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	e054      	b.n	800df8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2202      	movs	r2, #2
 800dee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	68da      	ldr	r2, [r3, #12]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f042 0201 	orr.w	r2, r2, #1
 800def6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a26      	ldr	r2, [pc, #152]	; (800df98 <HAL_TIM_Base_Start_IT+0xd0>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d022      	beq.n	800df48 <HAL_TIM_Base_Start_IT+0x80>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df0a:	d01d      	beq.n	800df48 <HAL_TIM_Base_Start_IT+0x80>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a22      	ldr	r2, [pc, #136]	; (800df9c <HAL_TIM_Base_Start_IT+0xd4>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d018      	beq.n	800df48 <HAL_TIM_Base_Start_IT+0x80>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a21      	ldr	r2, [pc, #132]	; (800dfa0 <HAL_TIM_Base_Start_IT+0xd8>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d013      	beq.n	800df48 <HAL_TIM_Base_Start_IT+0x80>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a1f      	ldr	r2, [pc, #124]	; (800dfa4 <HAL_TIM_Base_Start_IT+0xdc>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d00e      	beq.n	800df48 <HAL_TIM_Base_Start_IT+0x80>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a1e      	ldr	r2, [pc, #120]	; (800dfa8 <HAL_TIM_Base_Start_IT+0xe0>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d009      	beq.n	800df48 <HAL_TIM_Base_Start_IT+0x80>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a1c      	ldr	r2, [pc, #112]	; (800dfac <HAL_TIM_Base_Start_IT+0xe4>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d004      	beq.n	800df48 <HAL_TIM_Base_Start_IT+0x80>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a1b      	ldr	r2, [pc, #108]	; (800dfb0 <HAL_TIM_Base_Start_IT+0xe8>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d115      	bne.n	800df74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	689a      	ldr	r2, [r3, #8]
 800df4e:	4b19      	ldr	r3, [pc, #100]	; (800dfb4 <HAL_TIM_Base_Start_IT+0xec>)
 800df50:	4013      	ands	r3, r2
 800df52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2b06      	cmp	r3, #6
 800df58:	d015      	beq.n	800df86 <HAL_TIM_Base_Start_IT+0xbe>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df60:	d011      	beq.n	800df86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f042 0201 	orr.w	r2, r2, #1
 800df70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df72:	e008      	b.n	800df86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f042 0201 	orr.w	r2, r2, #1
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	e000      	b.n	800df88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	40010000 	.word	0x40010000
 800df9c:	40000400 	.word	0x40000400
 800dfa0:	40000800 	.word	0x40000800
 800dfa4:	40000c00 	.word	0x40000c00
 800dfa8:	40010400 	.word	0x40010400
 800dfac:	40001800 	.word	0x40001800
 800dfb0:	40014000 	.word	0x40014000
 800dfb4:	00010007 	.word	0x00010007

0800dfb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e049      	b.n	800e05e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d106      	bne.n	800dfe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 f841 	bl	800e066 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2202      	movs	r2, #2
 800dfe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	3304      	adds	r3, #4
 800dff4:	4619      	mov	r1, r3
 800dff6:	4610      	mov	r0, r2
 800dff8:	f000 fd84 	bl	800eb04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e066:	b480      	push	{r7}
 800e068:	b083      	sub	sp, #12
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e06e:	bf00      	nop
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr
	...

0800e07c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2200      	movs	r2, #0
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	4618      	mov	r0, r3
 800e090:	f001 f946 	bl	800f320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a3e      	ldr	r2, [pc, #248]	; (800e194 <HAL_TIM_PWM_Stop+0x118>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d013      	beq.n	800e0c6 <HAL_TIM_PWM_Stop+0x4a>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a3d      	ldr	r2, [pc, #244]	; (800e198 <HAL_TIM_PWM_Stop+0x11c>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d00e      	beq.n	800e0c6 <HAL_TIM_PWM_Stop+0x4a>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a3b      	ldr	r2, [pc, #236]	; (800e19c <HAL_TIM_PWM_Stop+0x120>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d009      	beq.n	800e0c6 <HAL_TIM_PWM_Stop+0x4a>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a3a      	ldr	r2, [pc, #232]	; (800e1a0 <HAL_TIM_PWM_Stop+0x124>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d004      	beq.n	800e0c6 <HAL_TIM_PWM_Stop+0x4a>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a38      	ldr	r2, [pc, #224]	; (800e1a4 <HAL_TIM_PWM_Stop+0x128>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d101      	bne.n	800e0ca <HAL_TIM_PWM_Stop+0x4e>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e000      	b.n	800e0cc <HAL_TIM_PWM_Stop+0x50>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d017      	beq.n	800e100 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	6a1a      	ldr	r2, [r3, #32]
 800e0d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800e0da:	4013      	ands	r3, r2
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10f      	bne.n	800e100 <HAL_TIM_PWM_Stop+0x84>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6a1a      	ldr	r2, [r3, #32]
 800e0e6:	f240 4344 	movw	r3, #1092	; 0x444
 800e0ea:	4013      	ands	r3, r2
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d107      	bne.n	800e100 <HAL_TIM_PWM_Stop+0x84>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e0fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6a1a      	ldr	r2, [r3, #32]
 800e106:	f241 1311 	movw	r3, #4369	; 0x1111
 800e10a:	4013      	ands	r3, r2
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d10f      	bne.n	800e130 <HAL_TIM_PWM_Stop+0xb4>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6a1a      	ldr	r2, [r3, #32]
 800e116:	f240 4344 	movw	r3, #1092	; 0x444
 800e11a:	4013      	ands	r3, r2
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d107      	bne.n	800e130 <HAL_TIM_PWM_Stop+0xb4>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f022 0201 	bic.w	r2, r2, #1
 800e12e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d104      	bne.n	800e140 <HAL_TIM_PWM_Stop+0xc4>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e13e:	e023      	b.n	800e188 <HAL_TIM_PWM_Stop+0x10c>
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	2b04      	cmp	r3, #4
 800e144:	d104      	bne.n	800e150 <HAL_TIM_PWM_Stop+0xd4>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2201      	movs	r2, #1
 800e14a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e14e:	e01b      	b.n	800e188 <HAL_TIM_PWM_Stop+0x10c>
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	2b08      	cmp	r3, #8
 800e154:	d104      	bne.n	800e160 <HAL_TIM_PWM_Stop+0xe4>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e15e:	e013      	b.n	800e188 <HAL_TIM_PWM_Stop+0x10c>
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b0c      	cmp	r3, #12
 800e164:	d104      	bne.n	800e170 <HAL_TIM_PWM_Stop+0xf4>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e16e:	e00b      	b.n	800e188 <HAL_TIM_PWM_Stop+0x10c>
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2b10      	cmp	r3, #16
 800e174:	d104      	bne.n	800e180 <HAL_TIM_PWM_Stop+0x104>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e17e:	e003      	b.n	800e188 <HAL_TIM_PWM_Stop+0x10c>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	40010000 	.word	0x40010000
 800e198:	40010400 	.word	0x40010400
 800e19c:	40014000 	.word	0x40014000
 800e1a0:	40014400 	.word	0x40014400
 800e1a4:	40014800 	.word	0x40014800

0800e1a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d109      	bne.n	800e1d0 <HAL_TIM_PWM_Start_IT+0x28>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	bf14      	ite	ne
 800e1c8:	2301      	movne	r3, #1
 800e1ca:	2300      	moveq	r3, #0
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	e03c      	b.n	800e24a <HAL_TIM_PWM_Start_IT+0xa2>
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	2b04      	cmp	r3, #4
 800e1d4:	d109      	bne.n	800e1ea <HAL_TIM_PWM_Start_IT+0x42>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	bf14      	ite	ne
 800e1e2:	2301      	movne	r3, #1
 800e1e4:	2300      	moveq	r3, #0
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	e02f      	b.n	800e24a <HAL_TIM_PWM_Start_IT+0xa2>
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b08      	cmp	r3, #8
 800e1ee:	d109      	bne.n	800e204 <HAL_TIM_PWM_Start_IT+0x5c>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	bf14      	ite	ne
 800e1fc:	2301      	movne	r3, #1
 800e1fe:	2300      	moveq	r3, #0
 800e200:	b2db      	uxtb	r3, r3
 800e202:	e022      	b.n	800e24a <HAL_TIM_PWM_Start_IT+0xa2>
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2b0c      	cmp	r3, #12
 800e208:	d109      	bne.n	800e21e <HAL_TIM_PWM_Start_IT+0x76>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b01      	cmp	r3, #1
 800e214:	bf14      	ite	ne
 800e216:	2301      	movne	r3, #1
 800e218:	2300      	moveq	r3, #0
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	e015      	b.n	800e24a <HAL_TIM_PWM_Start_IT+0xa2>
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	2b10      	cmp	r3, #16
 800e222:	d109      	bne.n	800e238 <HAL_TIM_PWM_Start_IT+0x90>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	bf14      	ite	ne
 800e230:	2301      	movne	r3, #1
 800e232:	2300      	moveq	r3, #0
 800e234:	b2db      	uxtb	r3, r3
 800e236:	e008      	b.n	800e24a <HAL_TIM_PWM_Start_IT+0xa2>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b01      	cmp	r3, #1
 800e242:	bf14      	ite	ne
 800e244:	2301      	movne	r3, #1
 800e246:	2300      	moveq	r3, #0
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	e0ec      	b.n	800e42c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d104      	bne.n	800e262 <HAL_TIM_PWM_Start_IT+0xba>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2202      	movs	r2, #2
 800e25c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e260:	e023      	b.n	800e2aa <HAL_TIM_PWM_Start_IT+0x102>
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	2b04      	cmp	r3, #4
 800e266:	d104      	bne.n	800e272 <HAL_TIM_PWM_Start_IT+0xca>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2202      	movs	r2, #2
 800e26c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e270:	e01b      	b.n	800e2aa <HAL_TIM_PWM_Start_IT+0x102>
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	2b08      	cmp	r3, #8
 800e276:	d104      	bne.n	800e282 <HAL_TIM_PWM_Start_IT+0xda>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2202      	movs	r2, #2
 800e27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e280:	e013      	b.n	800e2aa <HAL_TIM_PWM_Start_IT+0x102>
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2b0c      	cmp	r3, #12
 800e286:	d104      	bne.n	800e292 <HAL_TIM_PWM_Start_IT+0xea>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2202      	movs	r2, #2
 800e28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e290:	e00b      	b.n	800e2aa <HAL_TIM_PWM_Start_IT+0x102>
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2b10      	cmp	r3, #16
 800e296:	d104      	bne.n	800e2a2 <HAL_TIM_PWM_Start_IT+0xfa>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2a0:	e003      	b.n	800e2aa <HAL_TIM_PWM_Start_IT+0x102>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	2b0c      	cmp	r3, #12
 800e2ae:	d841      	bhi.n	800e334 <HAL_TIM_PWM_Start_IT+0x18c>
 800e2b0:	a201      	add	r2, pc, #4	; (adr r2, 800e2b8 <HAL_TIM_PWM_Start_IT+0x110>)
 800e2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b6:	bf00      	nop
 800e2b8:	0800e2ed 	.word	0x0800e2ed
 800e2bc:	0800e335 	.word	0x0800e335
 800e2c0:	0800e335 	.word	0x0800e335
 800e2c4:	0800e335 	.word	0x0800e335
 800e2c8:	0800e2ff 	.word	0x0800e2ff
 800e2cc:	0800e335 	.word	0x0800e335
 800e2d0:	0800e335 	.word	0x0800e335
 800e2d4:	0800e335 	.word	0x0800e335
 800e2d8:	0800e311 	.word	0x0800e311
 800e2dc:	0800e335 	.word	0x0800e335
 800e2e0:	0800e335 	.word	0x0800e335
 800e2e4:	0800e335 	.word	0x0800e335
 800e2e8:	0800e323 	.word	0x0800e323
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68da      	ldr	r2, [r3, #12]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f042 0202 	orr.w	r2, r2, #2
 800e2fa:	60da      	str	r2, [r3, #12]
      break;
 800e2fc:	e01d      	b.n	800e33a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68da      	ldr	r2, [r3, #12]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f042 0204 	orr.w	r2, r2, #4
 800e30c:	60da      	str	r2, [r3, #12]
      break;
 800e30e:	e014      	b.n	800e33a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68da      	ldr	r2, [r3, #12]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f042 0208 	orr.w	r2, r2, #8
 800e31e:	60da      	str	r2, [r3, #12]
      break;
 800e320:	e00b      	b.n	800e33a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	68da      	ldr	r2, [r3, #12]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f042 0210 	orr.w	r2, r2, #16
 800e330:	60da      	str	r2, [r3, #12]
      break;
 800e332:	e002      	b.n	800e33a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	73fb      	strb	r3, [r7, #15]
      break;
 800e338:	bf00      	nop
  }

  if (status == HAL_OK)
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d174      	bne.n	800e42a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2201      	movs	r2, #1
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	4618      	mov	r0, r3
 800e34a:	f000 ffe9 	bl	800f320 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a38      	ldr	r2, [pc, #224]	; (800e434 <HAL_TIM_PWM_Start_IT+0x28c>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d013      	beq.n	800e380 <HAL_TIM_PWM_Start_IT+0x1d8>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a36      	ldr	r2, [pc, #216]	; (800e438 <HAL_TIM_PWM_Start_IT+0x290>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d00e      	beq.n	800e380 <HAL_TIM_PWM_Start_IT+0x1d8>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a35      	ldr	r2, [pc, #212]	; (800e43c <HAL_TIM_PWM_Start_IT+0x294>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d009      	beq.n	800e380 <HAL_TIM_PWM_Start_IT+0x1d8>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a33      	ldr	r2, [pc, #204]	; (800e440 <HAL_TIM_PWM_Start_IT+0x298>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d004      	beq.n	800e380 <HAL_TIM_PWM_Start_IT+0x1d8>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a32      	ldr	r2, [pc, #200]	; (800e444 <HAL_TIM_PWM_Start_IT+0x29c>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d101      	bne.n	800e384 <HAL_TIM_PWM_Start_IT+0x1dc>
 800e380:	2301      	movs	r3, #1
 800e382:	e000      	b.n	800e386 <HAL_TIM_PWM_Start_IT+0x1de>
 800e384:	2300      	movs	r3, #0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d007      	beq.n	800e39a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a25      	ldr	r2, [pc, #148]	; (800e434 <HAL_TIM_PWM_Start_IT+0x28c>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d022      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0x242>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3ac:	d01d      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0x242>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a25      	ldr	r2, [pc, #148]	; (800e448 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d018      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0x242>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a23      	ldr	r2, [pc, #140]	; (800e44c <HAL_TIM_PWM_Start_IT+0x2a4>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d013      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0x242>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a22      	ldr	r2, [pc, #136]	; (800e450 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d00e      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0x242>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a19      	ldr	r2, [pc, #100]	; (800e438 <HAL_TIM_PWM_Start_IT+0x290>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d009      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0x242>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a1e      	ldr	r2, [pc, #120]	; (800e454 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d004      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0x242>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a15      	ldr	r2, [pc, #84]	; (800e43c <HAL_TIM_PWM_Start_IT+0x294>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d115      	bne.n	800e416 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	689a      	ldr	r2, [r3, #8]
 800e3f0:	4b19      	ldr	r3, [pc, #100]	; (800e458 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	2b06      	cmp	r3, #6
 800e3fa:	d015      	beq.n	800e428 <HAL_TIM_PWM_Start_IT+0x280>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e402:	d011      	beq.n	800e428 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f042 0201 	orr.w	r2, r2, #1
 800e412:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e414:	e008      	b.n	800e428 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f042 0201 	orr.w	r2, r2, #1
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	e000      	b.n	800e42a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e428:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	40010000 	.word	0x40010000
 800e438:	40010400 	.word	0x40010400
 800e43c:	40014000 	.word	0x40014000
 800e440:	40014400 	.word	0x40014400
 800e444:	40014800 	.word	0x40014800
 800e448:	40000400 	.word	0x40000400
 800e44c:	40000800 	.word	0x40000800
 800e450:	40000c00 	.word	0x40000c00
 800e454:	40001800 	.word	0x40001800
 800e458:	00010007 	.word	0x00010007

0800e45c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	f003 0302 	and.w	r3, r3, #2
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d122      	bne.n	800e4b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	f003 0302 	and.w	r3, r3, #2
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d11b      	bne.n	800e4b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f06f 0202 	mvn.w	r2, #2
 800e488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2201      	movs	r2, #1
 800e48e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	f003 0303 	and.w	r3, r3, #3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 fb12 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e4a4:	e005      	b.n	800e4b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fb04 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fb15 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	f003 0304 	and.w	r3, r3, #4
 800e4c2:	2b04      	cmp	r3, #4
 800e4c4:	d122      	bne.n	800e50c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	f003 0304 	and.w	r3, r3, #4
 800e4d0:	2b04      	cmp	r3, #4
 800e4d2:	d11b      	bne.n	800e50c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f06f 0204 	mvn.w	r2, #4
 800e4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 fae8 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e4f8:	e005      	b.n	800e506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fada 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 faeb 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	691b      	ldr	r3, [r3, #16]
 800e512:	f003 0308 	and.w	r3, r3, #8
 800e516:	2b08      	cmp	r3, #8
 800e518:	d122      	bne.n	800e560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	f003 0308 	and.w	r3, r3, #8
 800e524:	2b08      	cmp	r3, #8
 800e526:	d11b      	bne.n	800e560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f06f 0208 	mvn.w	r2, #8
 800e530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2204      	movs	r2, #4
 800e536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	69db      	ldr	r3, [r3, #28]
 800e53e:	f003 0303 	and.w	r3, r3, #3
 800e542:	2b00      	cmp	r3, #0
 800e544:	d003      	beq.n	800e54e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 fabe 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e54c:	e005      	b.n	800e55a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 fab0 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 fac1 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	f003 0310 	and.w	r3, r3, #16
 800e56a:	2b10      	cmp	r3, #16
 800e56c:	d122      	bne.n	800e5b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	f003 0310 	and.w	r3, r3, #16
 800e578:	2b10      	cmp	r3, #16
 800e57a:	d11b      	bne.n	800e5b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f06f 0210 	mvn.w	r2, #16
 800e584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2208      	movs	r2, #8
 800e58a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fa94 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e5a0:	e005      	b.n	800e5ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fa86 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fa97 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	f003 0301 	and.w	r3, r3, #1
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d10e      	bne.n	800e5e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	f003 0301 	and.w	r3, r3, #1
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d107      	bne.n	800e5e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f06f 0201 	mvn.w	r2, #1
 800e5d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7f5 f800 	bl	80035e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	691b      	ldr	r3, [r3, #16]
 800e5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ea:	2b80      	cmp	r3, #128	; 0x80
 800e5ec:	d10e      	bne.n	800e60c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5f8:	2b80      	cmp	r3, #128	; 0x80
 800e5fa:	d107      	bne.n	800e60c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 ff48 	bl	800f49c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	691b      	ldr	r3, [r3, #16]
 800e612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e61a:	d10e      	bne.n	800e63a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e626:	2b80      	cmp	r3, #128	; 0x80
 800e628:	d107      	bne.n	800e63a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 ff3b 	bl	800f4b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	691b      	ldr	r3, [r3, #16]
 800e640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e644:	2b40      	cmp	r3, #64	; 0x40
 800e646:	d10e      	bne.n	800e666 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e652:	2b40      	cmp	r3, #64	; 0x40
 800e654:	d107      	bne.n	800e666 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fa45 	bl	800eaf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	f003 0320 	and.w	r3, r3, #32
 800e670:	2b20      	cmp	r3, #32
 800e672:	d10e      	bne.n	800e692 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	f003 0320 	and.w	r3, r3, #32
 800e67e:	2b20      	cmp	r3, #32
 800e680:	d107      	bne.n	800e692 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f06f 0220 	mvn.w	r2, #32
 800e68a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fefb 	bl	800f488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e692:	bf00      	nop
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d101      	bne.n	800e6ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	e0ff      	b.n	800e8ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b14      	cmp	r3, #20
 800e6c6:	f200 80f0 	bhi.w	800e8aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e6ca:	a201      	add	r2, pc, #4	; (adr r2, 800e6d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d0:	0800e725 	.word	0x0800e725
 800e6d4:	0800e8ab 	.word	0x0800e8ab
 800e6d8:	0800e8ab 	.word	0x0800e8ab
 800e6dc:	0800e8ab 	.word	0x0800e8ab
 800e6e0:	0800e765 	.word	0x0800e765
 800e6e4:	0800e8ab 	.word	0x0800e8ab
 800e6e8:	0800e8ab 	.word	0x0800e8ab
 800e6ec:	0800e8ab 	.word	0x0800e8ab
 800e6f0:	0800e7a7 	.word	0x0800e7a7
 800e6f4:	0800e8ab 	.word	0x0800e8ab
 800e6f8:	0800e8ab 	.word	0x0800e8ab
 800e6fc:	0800e8ab 	.word	0x0800e8ab
 800e700:	0800e7e7 	.word	0x0800e7e7
 800e704:	0800e8ab 	.word	0x0800e8ab
 800e708:	0800e8ab 	.word	0x0800e8ab
 800e70c:	0800e8ab 	.word	0x0800e8ab
 800e710:	0800e829 	.word	0x0800e829
 800e714:	0800e8ab 	.word	0x0800e8ab
 800e718:	0800e8ab 	.word	0x0800e8ab
 800e71c:	0800e8ab 	.word	0x0800e8ab
 800e720:	0800e869 	.word	0x0800e869
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68b9      	ldr	r1, [r7, #8]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f000 fa84 	bl	800ec38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	699a      	ldr	r2, [r3, #24]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f042 0208 	orr.w	r2, r2, #8
 800e73e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	699a      	ldr	r2, [r3, #24]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f022 0204 	bic.w	r2, r2, #4
 800e74e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	6999      	ldr	r1, [r3, #24]
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	691a      	ldr	r2, [r3, #16]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	430a      	orrs	r2, r1
 800e760:	619a      	str	r2, [r3, #24]
      break;
 800e762:	e0a5      	b.n	800e8b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68b9      	ldr	r1, [r7, #8]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 faf4 	bl	800ed58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	699a      	ldr	r2, [r3, #24]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e77e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	699a      	ldr	r2, [r3, #24]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e78e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6999      	ldr	r1, [r3, #24]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	021a      	lsls	r2, r3, #8
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	430a      	orrs	r2, r1
 800e7a2:	619a      	str	r2, [r3, #24]
      break;
 800e7a4:	e084      	b.n	800e8b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	68b9      	ldr	r1, [r7, #8]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f000 fb5d 	bl	800ee6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	69da      	ldr	r2, [r3, #28]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f042 0208 	orr.w	r2, r2, #8
 800e7c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	69da      	ldr	r2, [r3, #28]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f022 0204 	bic.w	r2, r2, #4
 800e7d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69d9      	ldr	r1, [r3, #28]
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	691a      	ldr	r2, [r3, #16]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	430a      	orrs	r2, r1
 800e7e2:	61da      	str	r2, [r3, #28]
      break;
 800e7e4:	e064      	b.n	800e8b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68b9      	ldr	r1, [r7, #8]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f000 fbc5 	bl	800ef7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	69da      	ldr	r2, [r3, #28]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	69da      	ldr	r2, [r3, #28]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	69d9      	ldr	r1, [r3, #28]
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	691b      	ldr	r3, [r3, #16]
 800e81c:	021a      	lsls	r2, r3, #8
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	430a      	orrs	r2, r1
 800e824:	61da      	str	r2, [r3, #28]
      break;
 800e826:	e043      	b.n	800e8b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68b9      	ldr	r1, [r7, #8]
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 fc0e 	bl	800f050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f042 0208 	orr.w	r2, r2, #8
 800e842:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f022 0204 	bic.w	r2, r2, #4
 800e852:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	691a      	ldr	r2, [r3, #16]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e866:	e023      	b.n	800e8b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68b9      	ldr	r1, [r7, #8]
 800e86e:	4618      	mov	r0, r3
 800e870:	f000 fc52 	bl	800f118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	691b      	ldr	r3, [r3, #16]
 800e89e:	021a      	lsls	r2, r3, #8
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	430a      	orrs	r2, r1
 800e8a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e8a8:	e002      	b.n	800e8b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	75fb      	strb	r3, [r7, #23]
      break;
 800e8ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3718      	adds	r7, #24
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop

0800e8c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d101      	bne.n	800e8e0 <HAL_TIM_ConfigClockSource+0x1c>
 800e8dc:	2302      	movs	r3, #2
 800e8de:	e0dc      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x1d6>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	4b6a      	ldr	r3, [pc, #424]	; (800eaa4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a64      	ldr	r2, [pc, #400]	; (800eaa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e916:	4293      	cmp	r3, r2
 800e918:	f000 80a9 	beq.w	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e91c:	4a62      	ldr	r2, [pc, #392]	; (800eaa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	f200 80ae 	bhi.w	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e924:	4a61      	ldr	r2, [pc, #388]	; (800eaac <HAL_TIM_ConfigClockSource+0x1e8>)
 800e926:	4293      	cmp	r3, r2
 800e928:	f000 80a1 	beq.w	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e92c:	4a5f      	ldr	r2, [pc, #380]	; (800eaac <HAL_TIM_ConfigClockSource+0x1e8>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	f200 80a6 	bhi.w	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e934:	4a5e      	ldr	r2, [pc, #376]	; (800eab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e936:	4293      	cmp	r3, r2
 800e938:	f000 8099 	beq.w	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e93c:	4a5c      	ldr	r2, [pc, #368]	; (800eab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	f200 809e 	bhi.w	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e944:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e948:	f000 8091 	beq.w	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e94c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e950:	f200 8096 	bhi.w	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e958:	f000 8089 	beq.w	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e95c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e960:	f200 808e 	bhi.w	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e968:	d03e      	beq.n	800e9e8 <HAL_TIM_ConfigClockSource+0x124>
 800e96a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e96e:	f200 8087 	bhi.w	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e976:	f000 8086 	beq.w	800ea86 <HAL_TIM_ConfigClockSource+0x1c2>
 800e97a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e97e:	d87f      	bhi.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e980:	2b70      	cmp	r3, #112	; 0x70
 800e982:	d01a      	beq.n	800e9ba <HAL_TIM_ConfigClockSource+0xf6>
 800e984:	2b70      	cmp	r3, #112	; 0x70
 800e986:	d87b      	bhi.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e988:	2b60      	cmp	r3, #96	; 0x60
 800e98a:	d050      	beq.n	800ea2e <HAL_TIM_ConfigClockSource+0x16a>
 800e98c:	2b60      	cmp	r3, #96	; 0x60
 800e98e:	d877      	bhi.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e990:	2b50      	cmp	r3, #80	; 0x50
 800e992:	d03c      	beq.n	800ea0e <HAL_TIM_ConfigClockSource+0x14a>
 800e994:	2b50      	cmp	r3, #80	; 0x50
 800e996:	d873      	bhi.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e998:	2b40      	cmp	r3, #64	; 0x40
 800e99a:	d058      	beq.n	800ea4e <HAL_TIM_ConfigClockSource+0x18a>
 800e99c:	2b40      	cmp	r3, #64	; 0x40
 800e99e:	d86f      	bhi.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9a0:	2b30      	cmp	r3, #48	; 0x30
 800e9a2:	d064      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e9a4:	2b30      	cmp	r3, #48	; 0x30
 800e9a6:	d86b      	bhi.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9a8:	2b20      	cmp	r3, #32
 800e9aa:	d060      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e9ac:	2b20      	cmp	r3, #32
 800e9ae:	d867      	bhi.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d05c      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e9b4:	2b10      	cmp	r3, #16
 800e9b6:	d05a      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x1aa>
 800e9b8:	e062      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6818      	ldr	r0, [r3, #0]
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	6899      	ldr	r1, [r3, #8]
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	685a      	ldr	r2, [r3, #4]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	f000 fc89 	bl	800f2e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e9dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	609a      	str	r2, [r3, #8]
      break;
 800e9e6:	e04f      	b.n	800ea88 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6818      	ldr	r0, [r3, #0]
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	6899      	ldr	r1, [r3, #8]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	685a      	ldr	r2, [r3, #4]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	f000 fc72 	bl	800f2e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	689a      	ldr	r2, [r3, #8]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ea0a:	609a      	str	r2, [r3, #8]
      break;
 800ea0c:	e03c      	b.n	800ea88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6818      	ldr	r0, [r3, #0]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	6859      	ldr	r1, [r3, #4]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	f000 fbe2 	bl	800f1e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2150      	movs	r1, #80	; 0x50
 800ea26:	4618      	mov	r0, r3
 800ea28:	f000 fc3c 	bl	800f2a4 <TIM_ITRx_SetConfig>
      break;
 800ea2c:	e02c      	b.n	800ea88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6818      	ldr	r0, [r3, #0]
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	6859      	ldr	r1, [r3, #4]
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f000 fc01 	bl	800f242 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2160      	movs	r1, #96	; 0x60
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 fc2c 	bl	800f2a4 <TIM_ITRx_SetConfig>
      break;
 800ea4c:	e01c      	b.n	800ea88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6818      	ldr	r0, [r3, #0]
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	6859      	ldr	r1, [r3, #4]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	68db      	ldr	r3, [r3, #12]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	f000 fbc2 	bl	800f1e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2140      	movs	r1, #64	; 0x40
 800ea66:	4618      	mov	r0, r3
 800ea68:	f000 fc1c 	bl	800f2a4 <TIM_ITRx_SetConfig>
      break;
 800ea6c:	e00c      	b.n	800ea88 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f000 fc13 	bl	800f2a4 <TIM_ITRx_SetConfig>
      break;
 800ea7e:	e003      	b.n	800ea88 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ea80:	2301      	movs	r3, #1
 800ea82:	73fb      	strb	r3, [r7, #15]
      break;
 800ea84:	e000      	b.n	800ea88 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ea86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	ffceff88 	.word	0xffceff88
 800eaa8:	00100040 	.word	0x00100040
 800eaac:	00100030 	.word	0x00100030
 800eab0:	00100020 	.word	0x00100020

0800eab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eaf8:	bf00      	nop
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a40      	ldr	r2, [pc, #256]	; (800ec18 <TIM_Base_SetConfig+0x114>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d013      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb22:	d00f      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a3d      	ldr	r2, [pc, #244]	; (800ec1c <TIM_Base_SetConfig+0x118>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d00b      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a3c      	ldr	r2, [pc, #240]	; (800ec20 <TIM_Base_SetConfig+0x11c>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d007      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a3b      	ldr	r2, [pc, #236]	; (800ec24 <TIM_Base_SetConfig+0x120>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d003      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a3a      	ldr	r2, [pc, #232]	; (800ec28 <TIM_Base_SetConfig+0x124>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d108      	bne.n	800eb56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a2f      	ldr	r2, [pc, #188]	; (800ec18 <TIM_Base_SetConfig+0x114>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d01f      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb64:	d01b      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4a2c      	ldr	r2, [pc, #176]	; (800ec1c <TIM_Base_SetConfig+0x118>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d017      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a2b      	ldr	r2, [pc, #172]	; (800ec20 <TIM_Base_SetConfig+0x11c>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d013      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a2a      	ldr	r2, [pc, #168]	; (800ec24 <TIM_Base_SetConfig+0x120>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d00f      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a29      	ldr	r2, [pc, #164]	; (800ec28 <TIM_Base_SetConfig+0x124>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d00b      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a28      	ldr	r2, [pc, #160]	; (800ec2c <TIM_Base_SetConfig+0x128>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d007      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a27      	ldr	r2, [pc, #156]	; (800ec30 <TIM_Base_SetConfig+0x12c>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d003      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a26      	ldr	r2, [pc, #152]	; (800ec34 <TIM_Base_SetConfig+0x130>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d108      	bne.n	800ebb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	689a      	ldr	r2, [r3, #8]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	4a10      	ldr	r2, [pc, #64]	; (800ec18 <TIM_Base_SetConfig+0x114>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d00f      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4a12      	ldr	r2, [pc, #72]	; (800ec28 <TIM_Base_SetConfig+0x124>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d00b      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a11      	ldr	r2, [pc, #68]	; (800ec2c <TIM_Base_SetConfig+0x128>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d007      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	4a10      	ldr	r2, [pc, #64]	; (800ec30 <TIM_Base_SetConfig+0x12c>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d003      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a0f      	ldr	r2, [pc, #60]	; (800ec34 <TIM_Base_SetConfig+0x130>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d103      	bne.n	800ec04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	691a      	ldr	r2, [r3, #16]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	615a      	str	r2, [r3, #20]
}
 800ec0a:	bf00      	nop
 800ec0c:	3714      	adds	r7, #20
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	40010000 	.word	0x40010000
 800ec1c:	40000400 	.word	0x40000400
 800ec20:	40000800 	.word	0x40000800
 800ec24:	40000c00 	.word	0x40000c00
 800ec28:	40010400 	.word	0x40010400
 800ec2c:	40014000 	.word	0x40014000
 800ec30:	40014400 	.word	0x40014400
 800ec34:	40014800 	.word	0x40014800

0800ec38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b087      	sub	sp, #28
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a1b      	ldr	r3, [r3, #32]
 800ec46:	f023 0201 	bic.w	r2, r3, #1
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	4b37      	ldr	r3, [pc, #220]	; (800ed40 <TIM_OC1_SetConfig+0x108>)
 800ec64:	4013      	ands	r3, r2
 800ec66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f023 0303 	bic.w	r3, r3, #3
 800ec6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	4313      	orrs	r3, r2
 800ec78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	f023 0302 	bic.w	r3, r3, #2
 800ec80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4a2d      	ldr	r2, [pc, #180]	; (800ed44 <TIM_OC1_SetConfig+0x10c>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d00f      	beq.n	800ecb4 <TIM_OC1_SetConfig+0x7c>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	4a2c      	ldr	r2, [pc, #176]	; (800ed48 <TIM_OC1_SetConfig+0x110>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d00b      	beq.n	800ecb4 <TIM_OC1_SetConfig+0x7c>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	4a2b      	ldr	r2, [pc, #172]	; (800ed4c <TIM_OC1_SetConfig+0x114>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d007      	beq.n	800ecb4 <TIM_OC1_SetConfig+0x7c>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	4a2a      	ldr	r2, [pc, #168]	; (800ed50 <TIM_OC1_SetConfig+0x118>)
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	d003      	beq.n	800ecb4 <TIM_OC1_SetConfig+0x7c>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4a29      	ldr	r2, [pc, #164]	; (800ed54 <TIM_OC1_SetConfig+0x11c>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d10c      	bne.n	800ecce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	f023 0308 	bic.w	r3, r3, #8
 800ecba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	697a      	ldr	r2, [r7, #20]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	f023 0304 	bic.w	r3, r3, #4
 800eccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4a1c      	ldr	r2, [pc, #112]	; (800ed44 <TIM_OC1_SetConfig+0x10c>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d00f      	beq.n	800ecf6 <TIM_OC1_SetConfig+0xbe>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4a1b      	ldr	r2, [pc, #108]	; (800ed48 <TIM_OC1_SetConfig+0x110>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d00b      	beq.n	800ecf6 <TIM_OC1_SetConfig+0xbe>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4a1a      	ldr	r2, [pc, #104]	; (800ed4c <TIM_OC1_SetConfig+0x114>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d007      	beq.n	800ecf6 <TIM_OC1_SetConfig+0xbe>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4a19      	ldr	r2, [pc, #100]	; (800ed50 <TIM_OC1_SetConfig+0x118>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d003      	beq.n	800ecf6 <TIM_OC1_SetConfig+0xbe>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a18      	ldr	r2, [pc, #96]	; (800ed54 <TIM_OC1_SetConfig+0x11c>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d111      	bne.n	800ed1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ecfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ed04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	693a      	ldr	r2, [r7, #16]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	693a      	ldr	r2, [r7, #16]
 800ed16:	4313      	orrs	r3, r2
 800ed18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	693a      	ldr	r2, [r7, #16]
 800ed1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	685a      	ldr	r2, [r3, #4]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	621a      	str	r2, [r3, #32]
}
 800ed34:	bf00      	nop
 800ed36:	371c      	adds	r7, #28
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr
 800ed40:	fffeff8f 	.word	0xfffeff8f
 800ed44:	40010000 	.word	0x40010000
 800ed48:	40010400 	.word	0x40010400
 800ed4c:	40014000 	.word	0x40014000
 800ed50:	40014400 	.word	0x40014400
 800ed54:	40014800 	.word	0x40014800

0800ed58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	f023 0210 	bic.w	r2, r3, #16
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a1b      	ldr	r3, [r3, #32]
 800ed72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	4b34      	ldr	r3, [pc, #208]	; (800ee54 <TIM_OC2_SetConfig+0xfc>)
 800ed84:	4013      	ands	r3, r2
 800ed86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	021b      	lsls	r3, r3, #8
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	f023 0320 	bic.w	r3, r3, #32
 800eda2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	011b      	lsls	r3, r3, #4
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	4313      	orrs	r3, r2
 800edae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a29      	ldr	r2, [pc, #164]	; (800ee58 <TIM_OC2_SetConfig+0x100>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d003      	beq.n	800edc0 <TIM_OC2_SetConfig+0x68>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a28      	ldr	r2, [pc, #160]	; (800ee5c <TIM_OC2_SetConfig+0x104>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d10d      	bne.n	800eddc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	68db      	ldr	r3, [r3, #12]
 800edcc:	011b      	lsls	r3, r3, #4
 800edce:	697a      	ldr	r2, [r7, #20]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a1e      	ldr	r2, [pc, #120]	; (800ee58 <TIM_OC2_SetConfig+0x100>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d00f      	beq.n	800ee04 <TIM_OC2_SetConfig+0xac>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4a1d      	ldr	r2, [pc, #116]	; (800ee5c <TIM_OC2_SetConfig+0x104>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d00b      	beq.n	800ee04 <TIM_OC2_SetConfig+0xac>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4a1c      	ldr	r2, [pc, #112]	; (800ee60 <TIM_OC2_SetConfig+0x108>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d007      	beq.n	800ee04 <TIM_OC2_SetConfig+0xac>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4a1b      	ldr	r2, [pc, #108]	; (800ee64 <TIM_OC2_SetConfig+0x10c>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d003      	beq.n	800ee04 <TIM_OC2_SetConfig+0xac>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a1a      	ldr	r2, [pc, #104]	; (800ee68 <TIM_OC2_SetConfig+0x110>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d113      	bne.n	800ee2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ee0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	695b      	ldr	r3, [r3, #20]
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	699b      	ldr	r3, [r3, #24]
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	685a      	ldr	r2, [r3, #4]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	697a      	ldr	r2, [r7, #20]
 800ee44:	621a      	str	r2, [r3, #32]
}
 800ee46:	bf00      	nop
 800ee48:	371c      	adds	r7, #28
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	feff8fff 	.word	0xfeff8fff
 800ee58:	40010000 	.word	0x40010000
 800ee5c:	40010400 	.word	0x40010400
 800ee60:	40014000 	.word	0x40014000
 800ee64:	40014400 	.word	0x40014400
 800ee68:	40014800 	.word	0x40014800

0800ee6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b087      	sub	sp, #28
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a1b      	ldr	r3, [r3, #32]
 800ee7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	69db      	ldr	r3, [r3, #28]
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	4b33      	ldr	r3, [pc, #204]	; (800ef64 <TIM_OC3_SetConfig+0xf8>)
 800ee98:	4013      	ands	r3, r2
 800ee9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f023 0303 	bic.w	r3, r3, #3
 800eea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eeb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	021b      	lsls	r3, r3, #8
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	4313      	orrs	r3, r2
 800eec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a28      	ldr	r2, [pc, #160]	; (800ef68 <TIM_OC3_SetConfig+0xfc>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d003      	beq.n	800eed2 <TIM_OC3_SetConfig+0x66>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a27      	ldr	r2, [pc, #156]	; (800ef6c <TIM_OC3_SetConfig+0x100>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d10d      	bne.n	800eeee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	021b      	lsls	r3, r3, #8
 800eee0:	697a      	ldr	r2, [r7, #20]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eeec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4a1d      	ldr	r2, [pc, #116]	; (800ef68 <TIM_OC3_SetConfig+0xfc>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d00f      	beq.n	800ef16 <TIM_OC3_SetConfig+0xaa>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4a1c      	ldr	r2, [pc, #112]	; (800ef6c <TIM_OC3_SetConfig+0x100>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d00b      	beq.n	800ef16 <TIM_OC3_SetConfig+0xaa>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a1b      	ldr	r2, [pc, #108]	; (800ef70 <TIM_OC3_SetConfig+0x104>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d007      	beq.n	800ef16 <TIM_OC3_SetConfig+0xaa>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a1a      	ldr	r2, [pc, #104]	; (800ef74 <TIM_OC3_SetConfig+0x108>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d003      	beq.n	800ef16 <TIM_OC3_SetConfig+0xaa>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a19      	ldr	r2, [pc, #100]	; (800ef78 <TIM_OC3_SetConfig+0x10c>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d113      	bne.n	800ef3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ef24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	695b      	ldr	r3, [r3, #20]
 800ef2a:	011b      	lsls	r3, r3, #4
 800ef2c:	693a      	ldr	r2, [r7, #16]
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	699b      	ldr	r3, [r3, #24]
 800ef36:	011b      	lsls	r3, r3, #4
 800ef38:	693a      	ldr	r2, [r7, #16]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	697a      	ldr	r2, [r7, #20]
 800ef56:	621a      	str	r2, [r3, #32]
}
 800ef58:	bf00      	nop
 800ef5a:	371c      	adds	r7, #28
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr
 800ef64:	fffeff8f 	.word	0xfffeff8f
 800ef68:	40010000 	.word	0x40010000
 800ef6c:	40010400 	.word	0x40010400
 800ef70:	40014000 	.word	0x40014000
 800ef74:	40014400 	.word	0x40014400
 800ef78:	40014800 	.word	0x40014800

0800ef7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b087      	sub	sp, #28
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a1b      	ldr	r3, [r3, #32]
 800ef8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a1b      	ldr	r3, [r3, #32]
 800ef96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	69db      	ldr	r3, [r3, #28]
 800efa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	4b24      	ldr	r3, [pc, #144]	; (800f038 <TIM_OC4_SetConfig+0xbc>)
 800efa8:	4013      	ands	r3, r2
 800efaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	021b      	lsls	r3, r3, #8
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	4313      	orrs	r3, r2
 800efbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800efc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	031b      	lsls	r3, r3, #12
 800efce:	693a      	ldr	r2, [r7, #16]
 800efd0:	4313      	orrs	r3, r2
 800efd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a19      	ldr	r2, [pc, #100]	; (800f03c <TIM_OC4_SetConfig+0xc0>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d00f      	beq.n	800effc <TIM_OC4_SetConfig+0x80>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a18      	ldr	r2, [pc, #96]	; (800f040 <TIM_OC4_SetConfig+0xc4>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d00b      	beq.n	800effc <TIM_OC4_SetConfig+0x80>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a17      	ldr	r2, [pc, #92]	; (800f044 <TIM_OC4_SetConfig+0xc8>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d007      	beq.n	800effc <TIM_OC4_SetConfig+0x80>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a16      	ldr	r2, [pc, #88]	; (800f048 <TIM_OC4_SetConfig+0xcc>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d003      	beq.n	800effc <TIM_OC4_SetConfig+0x80>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4a15      	ldr	r2, [pc, #84]	; (800f04c <TIM_OC4_SetConfig+0xd0>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d109      	bne.n	800f010 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	695b      	ldr	r3, [r3, #20]
 800f008:	019b      	lsls	r3, r3, #6
 800f00a:	697a      	ldr	r2, [r7, #20]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	693a      	ldr	r2, [r7, #16]
 800f028:	621a      	str	r2, [r3, #32]
}
 800f02a:	bf00      	nop
 800f02c:	371c      	adds	r7, #28
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	feff8fff 	.word	0xfeff8fff
 800f03c:	40010000 	.word	0x40010000
 800f040:	40010400 	.word	0x40010400
 800f044:	40014000 	.word	0x40014000
 800f048:	40014400 	.word	0x40014400
 800f04c:	40014800 	.word	0x40014800

0800f050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f050:	b480      	push	{r7}
 800f052:	b087      	sub	sp, #28
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a1b      	ldr	r3, [r3, #32]
 800f05e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	4b21      	ldr	r3, [pc, #132]	; (800f100 <TIM_OC5_SetConfig+0xb0>)
 800f07c:	4013      	ands	r3, r2
 800f07e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	4313      	orrs	r3, r2
 800f088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	041b      	lsls	r3, r3, #16
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	4313      	orrs	r3, r2
 800f09c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4a18      	ldr	r2, [pc, #96]	; (800f104 <TIM_OC5_SetConfig+0xb4>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d00f      	beq.n	800f0c6 <TIM_OC5_SetConfig+0x76>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a17      	ldr	r2, [pc, #92]	; (800f108 <TIM_OC5_SetConfig+0xb8>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d00b      	beq.n	800f0c6 <TIM_OC5_SetConfig+0x76>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a16      	ldr	r2, [pc, #88]	; (800f10c <TIM_OC5_SetConfig+0xbc>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d007      	beq.n	800f0c6 <TIM_OC5_SetConfig+0x76>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a15      	ldr	r2, [pc, #84]	; (800f110 <TIM_OC5_SetConfig+0xc0>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d003      	beq.n	800f0c6 <TIM_OC5_SetConfig+0x76>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a14      	ldr	r2, [pc, #80]	; (800f114 <TIM_OC5_SetConfig+0xc4>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d109      	bne.n	800f0da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f0cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	695b      	ldr	r3, [r3, #20]
 800f0d2:	021b      	lsls	r3, r3, #8
 800f0d4:	697a      	ldr	r2, [r7, #20]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	685a      	ldr	r2, [r3, #4]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	621a      	str	r2, [r3, #32]
}
 800f0f4:	bf00      	nop
 800f0f6:	371c      	adds	r7, #28
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	fffeff8f 	.word	0xfffeff8f
 800f104:	40010000 	.word	0x40010000
 800f108:	40010400 	.word	0x40010400
 800f10c:	40014000 	.word	0x40014000
 800f110:	40014400 	.word	0x40014400
 800f114:	40014800 	.word	0x40014800

0800f118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f118:	b480      	push	{r7}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a1b      	ldr	r3, [r3, #32]
 800f126:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a1b      	ldr	r3, [r3, #32]
 800f132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	4b22      	ldr	r3, [pc, #136]	; (800f1cc <TIM_OC6_SetConfig+0xb4>)
 800f144:	4013      	ands	r3, r2
 800f146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	4313      	orrs	r3, r2
 800f152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f15a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	051b      	lsls	r3, r3, #20
 800f162:	693a      	ldr	r2, [r7, #16]
 800f164:	4313      	orrs	r3, r2
 800f166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a19      	ldr	r2, [pc, #100]	; (800f1d0 <TIM_OC6_SetConfig+0xb8>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d00f      	beq.n	800f190 <TIM_OC6_SetConfig+0x78>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4a18      	ldr	r2, [pc, #96]	; (800f1d4 <TIM_OC6_SetConfig+0xbc>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d00b      	beq.n	800f190 <TIM_OC6_SetConfig+0x78>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4a17      	ldr	r2, [pc, #92]	; (800f1d8 <TIM_OC6_SetConfig+0xc0>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d007      	beq.n	800f190 <TIM_OC6_SetConfig+0x78>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a16      	ldr	r2, [pc, #88]	; (800f1dc <TIM_OC6_SetConfig+0xc4>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d003      	beq.n	800f190 <TIM_OC6_SetConfig+0x78>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4a15      	ldr	r2, [pc, #84]	; (800f1e0 <TIM_OC6_SetConfig+0xc8>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d109      	bne.n	800f1a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	695b      	ldr	r3, [r3, #20]
 800f19c:	029b      	lsls	r3, r3, #10
 800f19e:	697a      	ldr	r2, [r7, #20]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	68fa      	ldr	r2, [r7, #12]
 800f1ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	685a      	ldr	r2, [r3, #4]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	693a      	ldr	r2, [r7, #16]
 800f1bc:	621a      	str	r2, [r3, #32]
}
 800f1be:	bf00      	nop
 800f1c0:	371c      	adds	r7, #28
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	feff8fff 	.word	0xfeff8fff
 800f1d0:	40010000 	.word	0x40010000
 800f1d4:	40010400 	.word	0x40010400
 800f1d8:	40014000 	.word	0x40014000
 800f1dc:	40014400 	.word	0x40014400
 800f1e0:	40014800 	.word	0x40014800

0800f1e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b087      	sub	sp, #28
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6a1b      	ldr	r3, [r3, #32]
 800f1f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
 800f1fa:	f023 0201 	bic.w	r2, r3, #1
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f20e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	011b      	lsls	r3, r3, #4
 800f214:	693a      	ldr	r2, [r7, #16]
 800f216:	4313      	orrs	r3, r2
 800f218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	f023 030a 	bic.w	r3, r3, #10
 800f220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	4313      	orrs	r3, r2
 800f228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	621a      	str	r2, [r3, #32]
}
 800f236:	bf00      	nop
 800f238:	371c      	adds	r7, #28
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr

0800f242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f242:	b480      	push	{r7}
 800f244:	b087      	sub	sp, #28
 800f246:	af00      	add	r7, sp, #0
 800f248:	60f8      	str	r0, [r7, #12]
 800f24a:	60b9      	str	r1, [r7, #8]
 800f24c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6a1b      	ldr	r3, [r3, #32]
 800f252:	f023 0210 	bic.w	r2, r3, #16
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f26c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	031b      	lsls	r3, r3, #12
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	4313      	orrs	r3, r2
 800f276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f27e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	011b      	lsls	r3, r3, #4
 800f284:	693a      	ldr	r2, [r7, #16]
 800f286:	4313      	orrs	r3, r2
 800f288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	697a      	ldr	r2, [r7, #20]
 800f28e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	693a      	ldr	r2, [r7, #16]
 800f294:	621a      	str	r2, [r3, #32]
}
 800f296:	bf00      	nop
 800f298:	371c      	adds	r7, #28
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
	...

0800f2a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	4b09      	ldr	r3, [pc, #36]	; (800f2dc <TIM_ITRx_SetConfig+0x38>)
 800f2b8:	4013      	ands	r3, r2
 800f2ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	f043 0307 	orr.w	r3, r3, #7
 800f2c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	68fa      	ldr	r2, [r7, #12]
 800f2cc:	609a      	str	r2, [r3, #8]
}
 800f2ce:	bf00      	nop
 800f2d0:	3714      	adds	r7, #20
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	ffcfff8f 	.word	0xffcfff8f

0800f2e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b087      	sub	sp, #28
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
 800f2ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	689b      	ldr	r3, [r3, #8]
 800f2f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f2fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	021a      	lsls	r2, r3, #8
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	431a      	orrs	r2, r3
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	4313      	orrs	r3, r2
 800f308:	697a      	ldr	r2, [r7, #20]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	697a      	ldr	r2, [r7, #20]
 800f312:	609a      	str	r2, [r3, #8]
}
 800f314:	bf00      	nop
 800f316:	371c      	adds	r7, #28
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f320:	b480      	push	{r7}
 800f322:	b087      	sub	sp, #28
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	f003 031f 	and.w	r3, r3, #31
 800f332:	2201      	movs	r2, #1
 800f334:	fa02 f303 	lsl.w	r3, r2, r3
 800f338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6a1a      	ldr	r2, [r3, #32]
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	43db      	mvns	r3, r3
 800f342:	401a      	ands	r2, r3
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6a1a      	ldr	r2, [r3, #32]
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	f003 031f 	and.w	r3, r3, #31
 800f352:	6879      	ldr	r1, [r7, #4]
 800f354:	fa01 f303 	lsl.w	r3, r1, r3
 800f358:	431a      	orrs	r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	621a      	str	r2, [r3, #32]
}
 800f35e:	bf00      	nop
 800f360:	371c      	adds	r7, #28
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
	...

0800f36c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d101      	bne.n	800f384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f380:	2302      	movs	r3, #2
 800f382:	e06d      	b.n	800f460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2201      	movs	r2, #1
 800f388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2202      	movs	r2, #2
 800f390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4a30      	ldr	r2, [pc, #192]	; (800f46c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d004      	beq.n	800f3b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4a2f      	ldr	r2, [pc, #188]	; (800f470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d108      	bne.n	800f3ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f3be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a20      	ldr	r2, [pc, #128]	; (800f46c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d022      	beq.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3f6:	d01d      	beq.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a1d      	ldr	r2, [pc, #116]	; (800f474 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d018      	beq.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a1c      	ldr	r2, [pc, #112]	; (800f478 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d013      	beq.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a1a      	ldr	r2, [pc, #104]	; (800f47c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d00e      	beq.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a15      	ldr	r2, [pc, #84]	; (800f470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d009      	beq.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a16      	ldr	r2, [pc, #88]	; (800f480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d004      	beq.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a15      	ldr	r2, [pc, #84]	; (800f484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d10c      	bne.n	800f44e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f43a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	4313      	orrs	r3, r2
 800f444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr
 800f46c:	40010000 	.word	0x40010000
 800f470:	40010400 	.word	0x40010400
 800f474:	40000400 	.word	0x40000400
 800f478:	40000800 	.word	0x40000800
 800f47c:	40000c00 	.word	0x40000c00
 800f480:	40001800 	.word	0x40001800
 800f484:	40014000 	.word	0x40014000

0800f488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f490:	bf00      	nop
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f4b8:	bf00      	nop
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d101      	bne.n	800f4d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	e042      	b.n	800f55c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d106      	bne.n	800f4ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7f4 ff15 	bl	8004318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2224      	movs	r2, #36	; 0x24
 800f4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f022 0201 	bic.w	r2, r2, #1
 800f504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f996 	bl	800f838 <UART_SetConfig>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d101      	bne.n	800f516 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f512:	2301      	movs	r3, #1
 800f514:	e022      	b.n	800f55c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d002      	beq.n	800f524 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 fef2 	bl	8010308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689a      	ldr	r2, [r3, #8]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f042 0201 	orr.w	r2, r2, #1
 800f552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 ff79 	bl	801044c <UART_CheckIdleState>
 800f55a:	4603      	mov	r3, r0
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af02      	add	r7, sp, #8
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	603b      	str	r3, [r7, #0]
 800f570:	4613      	mov	r3, r2
 800f572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f57a:	2b20      	cmp	r3, #32
 800f57c:	f040 8083 	bne.w	800f686 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <HAL_UART_Transmit+0x28>
 800f586:	88fb      	ldrh	r3, [r7, #6]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d101      	bne.n	800f590 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f58c:	2301      	movs	r3, #1
 800f58e:	e07b      	b.n	800f688 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f596:	2b01      	cmp	r3, #1
 800f598:	d101      	bne.n	800f59e <HAL_UART_Transmit+0x3a>
 800f59a:	2302      	movs	r3, #2
 800f59c:	e074      	b.n	800f688 <HAL_UART_Transmit+0x124>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2221      	movs	r2, #33	; 0x21
 800f5b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5b6:	f7f5 fa1f 	bl	80049f8 <HAL_GetTick>
 800f5ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	88fa      	ldrh	r2, [r7, #6]
 800f5c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	88fa      	ldrh	r2, [r7, #6]
 800f5c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5d4:	d108      	bne.n	800f5e8 <HAL_UART_Transmit+0x84>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d104      	bne.n	800f5e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	61bb      	str	r3, [r7, #24]
 800f5e6:	e003      	b.n	800f5f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f5f8:	e02c      	b.n	800f654 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2200      	movs	r2, #0
 800f602:	2180      	movs	r1, #128	; 0x80
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f000 ff6c 	bl	80104e2 <UART_WaitOnFlagUntilTimeout>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d001      	beq.n	800f614 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f610:	2303      	movs	r3, #3
 800f612:	e039      	b.n	800f688 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d10b      	bne.n	800f632 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f628:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	3302      	adds	r3, #2
 800f62e:	61bb      	str	r3, [r7, #24]
 800f630:	e007      	b.n	800f642 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	781a      	ldrb	r2, [r3, #0]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	3301      	adds	r3, #1
 800f640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f648:	b29b      	uxth	r3, r3
 800f64a:	3b01      	subs	r3, #1
 800f64c:	b29a      	uxth	r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1cc      	bne.n	800f5fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	9300      	str	r3, [sp, #0]
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	2200      	movs	r2, #0
 800f668:	2140      	movs	r1, #64	; 0x40
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f000 ff39 	bl	80104e2 <UART_WaitOnFlagUntilTimeout>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f676:	2303      	movs	r3, #3
 800f678:	e006      	b.n	800f688 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2220      	movs	r2, #32
 800f67e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f682:	2300      	movs	r3, #0
 800f684:	e000      	b.n	800f688 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f686:	2302      	movs	r3, #2
  }
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3720      	adds	r7, #32
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08a      	sub	sp, #40	; 0x28
 800f694:	af02      	add	r7, sp, #8
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	603b      	str	r3, [r7, #0]
 800f69c:	4613      	mov	r3, r2
 800f69e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6a6:	2b20      	cmp	r3, #32
 800f6a8:	f040 80c0 	bne.w	800f82c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d002      	beq.n	800f6b8 <HAL_UART_Receive+0x28>
 800f6b2:	88fb      	ldrh	r3, [r7, #6]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d101      	bne.n	800f6bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e0b8      	b.n	800f82e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d101      	bne.n	800f6ca <HAL_UART_Receive+0x3a>
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e0b1      	b.n	800f82e <HAL_UART_Receive+0x19e>
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2222      	movs	r2, #34	; 0x22
 800f6de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f6e8:	f7f5 f986 	bl	80049f8 <HAL_GetTick>
 800f6ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	88fa      	ldrh	r2, [r7, #6]
 800f6f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	88fa      	ldrh	r2, [r7, #6]
 800f6fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f706:	d10e      	bne.n	800f726 <HAL_UART_Receive+0x96>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d105      	bne.n	800f71c <HAL_UART_Receive+0x8c>
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f71a:	e02d      	b.n	800f778 <HAL_UART_Receive+0xe8>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	22ff      	movs	r2, #255	; 0xff
 800f720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f724:	e028      	b.n	800f778 <HAL_UART_Receive+0xe8>
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10d      	bne.n	800f74a <HAL_UART_Receive+0xba>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	691b      	ldr	r3, [r3, #16]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d104      	bne.n	800f740 <HAL_UART_Receive+0xb0>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	22ff      	movs	r2, #255	; 0xff
 800f73a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f73e:	e01b      	b.n	800f778 <HAL_UART_Receive+0xe8>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	227f      	movs	r2, #127	; 0x7f
 800f744:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f748:	e016      	b.n	800f778 <HAL_UART_Receive+0xe8>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f752:	d10d      	bne.n	800f770 <HAL_UART_Receive+0xe0>
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d104      	bne.n	800f766 <HAL_UART_Receive+0xd6>
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	227f      	movs	r2, #127	; 0x7f
 800f760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f764:	e008      	b.n	800f778 <HAL_UART_Receive+0xe8>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	223f      	movs	r2, #63	; 0x3f
 800f76a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f76e:	e003      	b.n	800f778 <HAL_UART_Receive+0xe8>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2200      	movs	r2, #0
 800f774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f77e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	689b      	ldr	r3, [r3, #8]
 800f784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f788:	d108      	bne.n	800f79c <HAL_UART_Receive+0x10c>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d104      	bne.n	800f79c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f792:	2300      	movs	r3, #0
 800f794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	61bb      	str	r3, [r7, #24]
 800f79a:	e003      	b.n	800f7a4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f7ac:	e032      	b.n	800f814 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	2120      	movs	r1, #32
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f000 fe92 	bl	80104e2 <UART_WaitOnFlagUntilTimeout>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d001      	beq.n	800f7c8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f7c4:	2303      	movs	r3, #3
 800f7c6:	e032      	b.n	800f82e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10c      	bne.n	800f7e8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	8a7b      	ldrh	r3, [r7, #18]
 800f7d8:	4013      	ands	r3, r2
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	3302      	adds	r3, #2
 800f7e4:	61bb      	str	r3, [r7, #24]
 800f7e6:	e00c      	b.n	800f802 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ee:	b2da      	uxtb	r2, r3
 800f7f0:	8a7b      	ldrh	r3, [r7, #18]
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	3301      	adds	r3, #1
 800f800:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f808:	b29b      	uxth	r3, r3
 800f80a:	3b01      	subs	r3, #1
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1c6      	bne.n	800f7ae <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2220      	movs	r2, #32
 800f824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f828:	2300      	movs	r3, #0
 800f82a:	e000      	b.n	800f82e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f82c:	2302      	movs	r3, #2
  }
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3720      	adds	r7, #32
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
	...

0800f838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f83c:	b092      	sub	sp, #72	; 0x48
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f842:	2300      	movs	r3, #0
 800f844:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	689a      	ldr	r2, [r3, #8]
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	431a      	orrs	r2, r3
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	695b      	ldr	r3, [r3, #20]
 800f856:	431a      	orrs	r2, r3
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	69db      	ldr	r3, [r3, #28]
 800f85c:	4313      	orrs	r3, r2
 800f85e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	4bbe      	ldr	r3, [pc, #760]	; (800fb60 <UART_SetConfig+0x328>)
 800f868:	4013      	ands	r3, r2
 800f86a:	697a      	ldr	r2, [r7, #20]
 800f86c:	6812      	ldr	r2, [r2, #0]
 800f86e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f870:	430b      	orrs	r3, r1
 800f872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	68da      	ldr	r2, [r3, #12]
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	430a      	orrs	r2, r1
 800f888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	699b      	ldr	r3, [r3, #24]
 800f88e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4ab3      	ldr	r2, [pc, #716]	; (800fb64 <UART_SetConfig+0x32c>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d004      	beq.n	800f8a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
 800f89e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	689a      	ldr	r2, [r3, #8]
 800f8aa:	4baf      	ldr	r3, [pc, #700]	; (800fb68 <UART_SetConfig+0x330>)
 800f8ac:	4013      	ands	r3, r2
 800f8ae:	697a      	ldr	r2, [r7, #20]
 800f8b0:	6812      	ldr	r2, [r2, #0]
 800f8b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8b4:	430b      	orrs	r3, r1
 800f8b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8be:	f023 010f 	bic.w	r1, r3, #15
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	430a      	orrs	r2, r1
 800f8cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4aa6      	ldr	r2, [pc, #664]	; (800fb6c <UART_SetConfig+0x334>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d177      	bne.n	800f9c8 <UART_SetConfig+0x190>
 800f8d8:	4ba5      	ldr	r3, [pc, #660]	; (800fb70 <UART_SetConfig+0x338>)
 800f8da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f8e0:	2b28      	cmp	r3, #40	; 0x28
 800f8e2:	d86d      	bhi.n	800f9c0 <UART_SetConfig+0x188>
 800f8e4:	a201      	add	r2, pc, #4	; (adr r2, 800f8ec <UART_SetConfig+0xb4>)
 800f8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ea:	bf00      	nop
 800f8ec:	0800f991 	.word	0x0800f991
 800f8f0:	0800f9c1 	.word	0x0800f9c1
 800f8f4:	0800f9c1 	.word	0x0800f9c1
 800f8f8:	0800f9c1 	.word	0x0800f9c1
 800f8fc:	0800f9c1 	.word	0x0800f9c1
 800f900:	0800f9c1 	.word	0x0800f9c1
 800f904:	0800f9c1 	.word	0x0800f9c1
 800f908:	0800f9c1 	.word	0x0800f9c1
 800f90c:	0800f999 	.word	0x0800f999
 800f910:	0800f9c1 	.word	0x0800f9c1
 800f914:	0800f9c1 	.word	0x0800f9c1
 800f918:	0800f9c1 	.word	0x0800f9c1
 800f91c:	0800f9c1 	.word	0x0800f9c1
 800f920:	0800f9c1 	.word	0x0800f9c1
 800f924:	0800f9c1 	.word	0x0800f9c1
 800f928:	0800f9c1 	.word	0x0800f9c1
 800f92c:	0800f9a1 	.word	0x0800f9a1
 800f930:	0800f9c1 	.word	0x0800f9c1
 800f934:	0800f9c1 	.word	0x0800f9c1
 800f938:	0800f9c1 	.word	0x0800f9c1
 800f93c:	0800f9c1 	.word	0x0800f9c1
 800f940:	0800f9c1 	.word	0x0800f9c1
 800f944:	0800f9c1 	.word	0x0800f9c1
 800f948:	0800f9c1 	.word	0x0800f9c1
 800f94c:	0800f9a9 	.word	0x0800f9a9
 800f950:	0800f9c1 	.word	0x0800f9c1
 800f954:	0800f9c1 	.word	0x0800f9c1
 800f958:	0800f9c1 	.word	0x0800f9c1
 800f95c:	0800f9c1 	.word	0x0800f9c1
 800f960:	0800f9c1 	.word	0x0800f9c1
 800f964:	0800f9c1 	.word	0x0800f9c1
 800f968:	0800f9c1 	.word	0x0800f9c1
 800f96c:	0800f9b1 	.word	0x0800f9b1
 800f970:	0800f9c1 	.word	0x0800f9c1
 800f974:	0800f9c1 	.word	0x0800f9c1
 800f978:	0800f9c1 	.word	0x0800f9c1
 800f97c:	0800f9c1 	.word	0x0800f9c1
 800f980:	0800f9c1 	.word	0x0800f9c1
 800f984:	0800f9c1 	.word	0x0800f9c1
 800f988:	0800f9c1 	.word	0x0800f9c1
 800f98c:	0800f9b9 	.word	0x0800f9b9
 800f990:	2301      	movs	r3, #1
 800f992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f996:	e222      	b.n	800fdde <UART_SetConfig+0x5a6>
 800f998:	2304      	movs	r3, #4
 800f99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f99e:	e21e      	b.n	800fdde <UART_SetConfig+0x5a6>
 800f9a0:	2308      	movs	r3, #8
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9a6:	e21a      	b.n	800fdde <UART_SetConfig+0x5a6>
 800f9a8:	2310      	movs	r3, #16
 800f9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ae:	e216      	b.n	800fdde <UART_SetConfig+0x5a6>
 800f9b0:	2320      	movs	r3, #32
 800f9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9b6:	e212      	b.n	800fdde <UART_SetConfig+0x5a6>
 800f9b8:	2340      	movs	r3, #64	; 0x40
 800f9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9be:	e20e      	b.n	800fdde <UART_SetConfig+0x5a6>
 800f9c0:	2380      	movs	r3, #128	; 0x80
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9c6:	e20a      	b.n	800fdde <UART_SetConfig+0x5a6>
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a69      	ldr	r2, [pc, #420]	; (800fb74 <UART_SetConfig+0x33c>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d130      	bne.n	800fa34 <UART_SetConfig+0x1fc>
 800f9d2:	4b67      	ldr	r3, [pc, #412]	; (800fb70 <UART_SetConfig+0x338>)
 800f9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9d6:	f003 0307 	and.w	r3, r3, #7
 800f9da:	2b05      	cmp	r3, #5
 800f9dc:	d826      	bhi.n	800fa2c <UART_SetConfig+0x1f4>
 800f9de:	a201      	add	r2, pc, #4	; (adr r2, 800f9e4 <UART_SetConfig+0x1ac>)
 800f9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e4:	0800f9fd 	.word	0x0800f9fd
 800f9e8:	0800fa05 	.word	0x0800fa05
 800f9ec:	0800fa0d 	.word	0x0800fa0d
 800f9f0:	0800fa15 	.word	0x0800fa15
 800f9f4:	0800fa1d 	.word	0x0800fa1d
 800f9f8:	0800fa25 	.word	0x0800fa25
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa02:	e1ec      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa04:	2304      	movs	r3, #4
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0a:	e1e8      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa0c:	2308      	movs	r3, #8
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa12:	e1e4      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa14:	2310      	movs	r3, #16
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa1a:	e1e0      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa1c:	2320      	movs	r3, #32
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa22:	e1dc      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa24:	2340      	movs	r3, #64	; 0x40
 800fa26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa2a:	e1d8      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa2c:	2380      	movs	r3, #128	; 0x80
 800fa2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa32:	e1d4      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a4f      	ldr	r2, [pc, #316]	; (800fb78 <UART_SetConfig+0x340>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d130      	bne.n	800faa0 <UART_SetConfig+0x268>
 800fa3e:	4b4c      	ldr	r3, [pc, #304]	; (800fb70 <UART_SetConfig+0x338>)
 800fa40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa42:	f003 0307 	and.w	r3, r3, #7
 800fa46:	2b05      	cmp	r3, #5
 800fa48:	d826      	bhi.n	800fa98 <UART_SetConfig+0x260>
 800fa4a:	a201      	add	r2, pc, #4	; (adr r2, 800fa50 <UART_SetConfig+0x218>)
 800fa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa50:	0800fa69 	.word	0x0800fa69
 800fa54:	0800fa71 	.word	0x0800fa71
 800fa58:	0800fa79 	.word	0x0800fa79
 800fa5c:	0800fa81 	.word	0x0800fa81
 800fa60:	0800fa89 	.word	0x0800fa89
 800fa64:	0800fa91 	.word	0x0800fa91
 800fa68:	2300      	movs	r3, #0
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6e:	e1b6      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa70:	2304      	movs	r3, #4
 800fa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa76:	e1b2      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa78:	2308      	movs	r3, #8
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7e:	e1ae      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa80:	2310      	movs	r3, #16
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa86:	e1aa      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa88:	2320      	movs	r3, #32
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa8e:	e1a6      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa90:	2340      	movs	r3, #64	; 0x40
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa96:	e1a2      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fa98:	2380      	movs	r3, #128	; 0x80
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa9e:	e19e      	b.n	800fdde <UART_SetConfig+0x5a6>
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a35      	ldr	r2, [pc, #212]	; (800fb7c <UART_SetConfig+0x344>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d130      	bne.n	800fb0c <UART_SetConfig+0x2d4>
 800faaa:	4b31      	ldr	r3, [pc, #196]	; (800fb70 <UART_SetConfig+0x338>)
 800faac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faae:	f003 0307 	and.w	r3, r3, #7
 800fab2:	2b05      	cmp	r3, #5
 800fab4:	d826      	bhi.n	800fb04 <UART_SetConfig+0x2cc>
 800fab6:	a201      	add	r2, pc, #4	; (adr r2, 800fabc <UART_SetConfig+0x284>)
 800fab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fabc:	0800fad5 	.word	0x0800fad5
 800fac0:	0800fadd 	.word	0x0800fadd
 800fac4:	0800fae5 	.word	0x0800fae5
 800fac8:	0800faed 	.word	0x0800faed
 800facc:	0800faf5 	.word	0x0800faf5
 800fad0:	0800fafd 	.word	0x0800fafd
 800fad4:	2300      	movs	r3, #0
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fada:	e180      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fadc:	2304      	movs	r3, #4
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae2:	e17c      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fae4:	2308      	movs	r3, #8
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faea:	e178      	b.n	800fdde <UART_SetConfig+0x5a6>
 800faec:	2310      	movs	r3, #16
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf2:	e174      	b.n	800fdde <UART_SetConfig+0x5a6>
 800faf4:	2320      	movs	r3, #32
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fafa:	e170      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fafc:	2340      	movs	r3, #64	; 0x40
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb02:	e16c      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb04:	2380      	movs	r3, #128	; 0x80
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb0a:	e168      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a1b      	ldr	r2, [pc, #108]	; (800fb80 <UART_SetConfig+0x348>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d142      	bne.n	800fb9c <UART_SetConfig+0x364>
 800fb16:	4b16      	ldr	r3, [pc, #88]	; (800fb70 <UART_SetConfig+0x338>)
 800fb18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb1a:	f003 0307 	and.w	r3, r3, #7
 800fb1e:	2b05      	cmp	r3, #5
 800fb20:	d838      	bhi.n	800fb94 <UART_SetConfig+0x35c>
 800fb22:	a201      	add	r2, pc, #4	; (adr r2, 800fb28 <UART_SetConfig+0x2f0>)
 800fb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb28:	0800fb41 	.word	0x0800fb41
 800fb2c:	0800fb49 	.word	0x0800fb49
 800fb30:	0800fb51 	.word	0x0800fb51
 800fb34:	0800fb59 	.word	0x0800fb59
 800fb38:	0800fb85 	.word	0x0800fb85
 800fb3c:	0800fb8d 	.word	0x0800fb8d
 800fb40:	2300      	movs	r3, #0
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb46:	e14a      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb48:	2304      	movs	r3, #4
 800fb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb4e:	e146      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb50:	2308      	movs	r3, #8
 800fb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb56:	e142      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb58:	2310      	movs	r3, #16
 800fb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5e:	e13e      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb60:	cfff69f3 	.word	0xcfff69f3
 800fb64:	58000c00 	.word	0x58000c00
 800fb68:	11fff4ff 	.word	0x11fff4ff
 800fb6c:	40011000 	.word	0x40011000
 800fb70:	58024400 	.word	0x58024400
 800fb74:	40004400 	.word	0x40004400
 800fb78:	40004800 	.word	0x40004800
 800fb7c:	40004c00 	.word	0x40004c00
 800fb80:	40005000 	.word	0x40005000
 800fb84:	2320      	movs	r3, #32
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb8a:	e128      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb8c:	2340      	movs	r3, #64	; 0x40
 800fb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb92:	e124      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb94:	2380      	movs	r3, #128	; 0x80
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb9a:	e120      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4acb      	ldr	r2, [pc, #812]	; (800fed0 <UART_SetConfig+0x698>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d176      	bne.n	800fc94 <UART_SetConfig+0x45c>
 800fba6:	4bcb      	ldr	r3, [pc, #812]	; (800fed4 <UART_SetConfig+0x69c>)
 800fba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fbae:	2b28      	cmp	r3, #40	; 0x28
 800fbb0:	d86c      	bhi.n	800fc8c <UART_SetConfig+0x454>
 800fbb2:	a201      	add	r2, pc, #4	; (adr r2, 800fbb8 <UART_SetConfig+0x380>)
 800fbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb8:	0800fc5d 	.word	0x0800fc5d
 800fbbc:	0800fc8d 	.word	0x0800fc8d
 800fbc0:	0800fc8d 	.word	0x0800fc8d
 800fbc4:	0800fc8d 	.word	0x0800fc8d
 800fbc8:	0800fc8d 	.word	0x0800fc8d
 800fbcc:	0800fc8d 	.word	0x0800fc8d
 800fbd0:	0800fc8d 	.word	0x0800fc8d
 800fbd4:	0800fc8d 	.word	0x0800fc8d
 800fbd8:	0800fc65 	.word	0x0800fc65
 800fbdc:	0800fc8d 	.word	0x0800fc8d
 800fbe0:	0800fc8d 	.word	0x0800fc8d
 800fbe4:	0800fc8d 	.word	0x0800fc8d
 800fbe8:	0800fc8d 	.word	0x0800fc8d
 800fbec:	0800fc8d 	.word	0x0800fc8d
 800fbf0:	0800fc8d 	.word	0x0800fc8d
 800fbf4:	0800fc8d 	.word	0x0800fc8d
 800fbf8:	0800fc6d 	.word	0x0800fc6d
 800fbfc:	0800fc8d 	.word	0x0800fc8d
 800fc00:	0800fc8d 	.word	0x0800fc8d
 800fc04:	0800fc8d 	.word	0x0800fc8d
 800fc08:	0800fc8d 	.word	0x0800fc8d
 800fc0c:	0800fc8d 	.word	0x0800fc8d
 800fc10:	0800fc8d 	.word	0x0800fc8d
 800fc14:	0800fc8d 	.word	0x0800fc8d
 800fc18:	0800fc75 	.word	0x0800fc75
 800fc1c:	0800fc8d 	.word	0x0800fc8d
 800fc20:	0800fc8d 	.word	0x0800fc8d
 800fc24:	0800fc8d 	.word	0x0800fc8d
 800fc28:	0800fc8d 	.word	0x0800fc8d
 800fc2c:	0800fc8d 	.word	0x0800fc8d
 800fc30:	0800fc8d 	.word	0x0800fc8d
 800fc34:	0800fc8d 	.word	0x0800fc8d
 800fc38:	0800fc7d 	.word	0x0800fc7d
 800fc3c:	0800fc8d 	.word	0x0800fc8d
 800fc40:	0800fc8d 	.word	0x0800fc8d
 800fc44:	0800fc8d 	.word	0x0800fc8d
 800fc48:	0800fc8d 	.word	0x0800fc8d
 800fc4c:	0800fc8d 	.word	0x0800fc8d
 800fc50:	0800fc8d 	.word	0x0800fc8d
 800fc54:	0800fc8d 	.word	0x0800fc8d
 800fc58:	0800fc85 	.word	0x0800fc85
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc62:	e0bc      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fc64:	2304      	movs	r3, #4
 800fc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc6a:	e0b8      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fc6c:	2308      	movs	r3, #8
 800fc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc72:	e0b4      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fc74:	2310      	movs	r3, #16
 800fc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc7a:	e0b0      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fc7c:	2320      	movs	r3, #32
 800fc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc82:	e0ac      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fc84:	2340      	movs	r3, #64	; 0x40
 800fc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc8a:	e0a8      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fc8c:	2380      	movs	r3, #128	; 0x80
 800fc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc92:	e0a4      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4a8f      	ldr	r2, [pc, #572]	; (800fed8 <UART_SetConfig+0x6a0>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d130      	bne.n	800fd00 <UART_SetConfig+0x4c8>
 800fc9e:	4b8d      	ldr	r3, [pc, #564]	; (800fed4 <UART_SetConfig+0x69c>)
 800fca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fca2:	f003 0307 	and.w	r3, r3, #7
 800fca6:	2b05      	cmp	r3, #5
 800fca8:	d826      	bhi.n	800fcf8 <UART_SetConfig+0x4c0>
 800fcaa:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <UART_SetConfig+0x478>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fcc9 	.word	0x0800fcc9
 800fcb4:	0800fcd1 	.word	0x0800fcd1
 800fcb8:	0800fcd9 	.word	0x0800fcd9
 800fcbc:	0800fce1 	.word	0x0800fce1
 800fcc0:	0800fce9 	.word	0x0800fce9
 800fcc4:	0800fcf1 	.word	0x0800fcf1
 800fcc8:	2300      	movs	r3, #0
 800fcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcce:	e086      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fcd0:	2304      	movs	r3, #4
 800fcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcd6:	e082      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fcd8:	2308      	movs	r3, #8
 800fcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcde:	e07e      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fce0:	2310      	movs	r3, #16
 800fce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fce6:	e07a      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fce8:	2320      	movs	r3, #32
 800fcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcee:	e076      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fcf0:	2340      	movs	r3, #64	; 0x40
 800fcf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcf6:	e072      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fcf8:	2380      	movs	r3, #128	; 0x80
 800fcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcfe:	e06e      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4a75      	ldr	r2, [pc, #468]	; (800fedc <UART_SetConfig+0x6a4>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d130      	bne.n	800fd6c <UART_SetConfig+0x534>
 800fd0a:	4b72      	ldr	r3, [pc, #456]	; (800fed4 <UART_SetConfig+0x69c>)
 800fd0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd0e:	f003 0307 	and.w	r3, r3, #7
 800fd12:	2b05      	cmp	r3, #5
 800fd14:	d826      	bhi.n	800fd64 <UART_SetConfig+0x52c>
 800fd16:	a201      	add	r2, pc, #4	; (adr r2, 800fd1c <UART_SetConfig+0x4e4>)
 800fd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd1c:	0800fd35 	.word	0x0800fd35
 800fd20:	0800fd3d 	.word	0x0800fd3d
 800fd24:	0800fd45 	.word	0x0800fd45
 800fd28:	0800fd4d 	.word	0x0800fd4d
 800fd2c:	0800fd55 	.word	0x0800fd55
 800fd30:	0800fd5d 	.word	0x0800fd5d
 800fd34:	2300      	movs	r3, #0
 800fd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd3a:	e050      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd3c:	2304      	movs	r3, #4
 800fd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd42:	e04c      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd44:	2308      	movs	r3, #8
 800fd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd4a:	e048      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd4c:	2310      	movs	r3, #16
 800fd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd52:	e044      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd54:	2320      	movs	r3, #32
 800fd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd5a:	e040      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd5c:	2340      	movs	r3, #64	; 0x40
 800fd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd62:	e03c      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd64:	2380      	movs	r3, #128	; 0x80
 800fd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd6a:	e038      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a5b      	ldr	r2, [pc, #364]	; (800fee0 <UART_SetConfig+0x6a8>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d130      	bne.n	800fdd8 <UART_SetConfig+0x5a0>
 800fd76:	4b57      	ldr	r3, [pc, #348]	; (800fed4 <UART_SetConfig+0x69c>)
 800fd78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd7a:	f003 0307 	and.w	r3, r3, #7
 800fd7e:	2b05      	cmp	r3, #5
 800fd80:	d826      	bhi.n	800fdd0 <UART_SetConfig+0x598>
 800fd82:	a201      	add	r2, pc, #4	; (adr r2, 800fd88 <UART_SetConfig+0x550>)
 800fd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd88:	0800fda1 	.word	0x0800fda1
 800fd8c:	0800fda9 	.word	0x0800fda9
 800fd90:	0800fdb1 	.word	0x0800fdb1
 800fd94:	0800fdb9 	.word	0x0800fdb9
 800fd98:	0800fdc1 	.word	0x0800fdc1
 800fd9c:	0800fdc9 	.word	0x0800fdc9
 800fda0:	2302      	movs	r3, #2
 800fda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fda6:	e01a      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fda8:	2304      	movs	r3, #4
 800fdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdae:	e016      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fdb0:	2308      	movs	r3, #8
 800fdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdb6:	e012      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fdb8:	2310      	movs	r3, #16
 800fdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdbe:	e00e      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fdc0:	2320      	movs	r3, #32
 800fdc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdc6:	e00a      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fdc8:	2340      	movs	r3, #64	; 0x40
 800fdca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdce:	e006      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fdd0:	2380      	movs	r3, #128	; 0x80
 800fdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdd6:	e002      	b.n	800fdde <UART_SetConfig+0x5a6>
 800fdd8:	2380      	movs	r3, #128	; 0x80
 800fdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a3f      	ldr	r2, [pc, #252]	; (800fee0 <UART_SetConfig+0x6a8>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	f040 80f8 	bne.w	800ffda <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fdea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fdee:	2b20      	cmp	r3, #32
 800fdf0:	dc46      	bgt.n	800fe80 <UART_SetConfig+0x648>
 800fdf2:	2b02      	cmp	r3, #2
 800fdf4:	f2c0 8082 	blt.w	800fefc <UART_SetConfig+0x6c4>
 800fdf8:	3b02      	subs	r3, #2
 800fdfa:	2b1e      	cmp	r3, #30
 800fdfc:	d87e      	bhi.n	800fefc <UART_SetConfig+0x6c4>
 800fdfe:	a201      	add	r2, pc, #4	; (adr r2, 800fe04 <UART_SetConfig+0x5cc>)
 800fe00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe04:	0800fe87 	.word	0x0800fe87
 800fe08:	0800fefd 	.word	0x0800fefd
 800fe0c:	0800fe8f 	.word	0x0800fe8f
 800fe10:	0800fefd 	.word	0x0800fefd
 800fe14:	0800fefd 	.word	0x0800fefd
 800fe18:	0800fefd 	.word	0x0800fefd
 800fe1c:	0800fe9f 	.word	0x0800fe9f
 800fe20:	0800fefd 	.word	0x0800fefd
 800fe24:	0800fefd 	.word	0x0800fefd
 800fe28:	0800fefd 	.word	0x0800fefd
 800fe2c:	0800fefd 	.word	0x0800fefd
 800fe30:	0800fefd 	.word	0x0800fefd
 800fe34:	0800fefd 	.word	0x0800fefd
 800fe38:	0800fefd 	.word	0x0800fefd
 800fe3c:	0800feaf 	.word	0x0800feaf
 800fe40:	0800fefd 	.word	0x0800fefd
 800fe44:	0800fefd 	.word	0x0800fefd
 800fe48:	0800fefd 	.word	0x0800fefd
 800fe4c:	0800fefd 	.word	0x0800fefd
 800fe50:	0800fefd 	.word	0x0800fefd
 800fe54:	0800fefd 	.word	0x0800fefd
 800fe58:	0800fefd 	.word	0x0800fefd
 800fe5c:	0800fefd 	.word	0x0800fefd
 800fe60:	0800fefd 	.word	0x0800fefd
 800fe64:	0800fefd 	.word	0x0800fefd
 800fe68:	0800fefd 	.word	0x0800fefd
 800fe6c:	0800fefd 	.word	0x0800fefd
 800fe70:	0800fefd 	.word	0x0800fefd
 800fe74:	0800fefd 	.word	0x0800fefd
 800fe78:	0800fefd 	.word	0x0800fefd
 800fe7c:	0800feef 	.word	0x0800feef
 800fe80:	2b40      	cmp	r3, #64	; 0x40
 800fe82:	d037      	beq.n	800fef4 <UART_SetConfig+0x6bc>
 800fe84:	e03a      	b.n	800fefc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fe86:	f7fb f81b 	bl	800aec0 <HAL_RCCEx_GetD3PCLK1Freq>
 800fe8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe8c:	e03c      	b.n	800ff08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fb f82a 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe9c:	e034      	b.n	800ff08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe9e:	f107 0318 	add.w	r3, r7, #24
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fb f976 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feac:	e02c      	b.n	800ff08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800feae:	4b09      	ldr	r3, [pc, #36]	; (800fed4 <UART_SetConfig+0x69c>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f003 0320 	and.w	r3, r3, #32
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d016      	beq.n	800fee8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800feba:	4b06      	ldr	r3, [pc, #24]	; (800fed4 <UART_SetConfig+0x69c>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	08db      	lsrs	r3, r3, #3
 800fec0:	f003 0303 	and.w	r3, r3, #3
 800fec4:	4a07      	ldr	r2, [pc, #28]	; (800fee4 <UART_SetConfig+0x6ac>)
 800fec6:	fa22 f303 	lsr.w	r3, r2, r3
 800feca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fecc:	e01c      	b.n	800ff08 <UART_SetConfig+0x6d0>
 800fece:	bf00      	nop
 800fed0:	40011400 	.word	0x40011400
 800fed4:	58024400 	.word	0x58024400
 800fed8:	40007800 	.word	0x40007800
 800fedc:	40007c00 	.word	0x40007c00
 800fee0:	58000c00 	.word	0x58000c00
 800fee4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fee8:	4b9d      	ldr	r3, [pc, #628]	; (8010160 <UART_SetConfig+0x928>)
 800feea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feec:	e00c      	b.n	800ff08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800feee:	4b9d      	ldr	r3, [pc, #628]	; (8010164 <UART_SetConfig+0x92c>)
 800fef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fef2:	e009      	b.n	800ff08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fefa:	e005      	b.n	800ff08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fefc:	2300      	movs	r3, #0
 800fefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff00:	2301      	movs	r3, #1
 800ff02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	f000 81de 	beq.w	80102cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff14:	4a94      	ldr	r2, [pc, #592]	; (8010168 <UART_SetConfig+0x930>)
 800ff16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff22:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	4613      	mov	r3, r2
 800ff2a:	005b      	lsls	r3, r3, #1
 800ff2c:	4413      	add	r3, r2
 800ff2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d305      	bcc.n	800ff40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d903      	bls.n	800ff48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ff40:	2301      	movs	r3, #1
 800ff42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ff46:	e1c1      	b.n	80102cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	60bb      	str	r3, [r7, #8]
 800ff4e:	60fa      	str	r2, [r7, #12]
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff54:	4a84      	ldr	r2, [pc, #528]	; (8010168 <UART_SetConfig+0x930>)
 800ff56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	603b      	str	r3, [r7, #0]
 800ff60:	607a      	str	r2, [r7, #4]
 800ff62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff6a:	f7f0 fa11 	bl	8000390 <__aeabi_uldivmod>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	4610      	mov	r0, r2
 800ff74:	4619      	mov	r1, r3
 800ff76:	f04f 0200 	mov.w	r2, #0
 800ff7a:	f04f 0300 	mov.w	r3, #0
 800ff7e:	020b      	lsls	r3, r1, #8
 800ff80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ff84:	0202      	lsls	r2, r0, #8
 800ff86:	6979      	ldr	r1, [r7, #20]
 800ff88:	6849      	ldr	r1, [r1, #4]
 800ff8a:	0849      	lsrs	r1, r1, #1
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	460c      	mov	r4, r1
 800ff90:	4605      	mov	r5, r0
 800ff92:	eb12 0804 	adds.w	r8, r2, r4
 800ff96:	eb43 0905 	adc.w	r9, r3, r5
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	469a      	mov	sl, r3
 800ffa2:	4693      	mov	fp, r2
 800ffa4:	4652      	mov	r2, sl
 800ffa6:	465b      	mov	r3, fp
 800ffa8:	4640      	mov	r0, r8
 800ffaa:	4649      	mov	r1, r9
 800ffac:	f7f0 f9f0 	bl	8000390 <__aeabi_uldivmod>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ffb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffbe:	d308      	bcc.n	800ffd2 <UART_SetConfig+0x79a>
 800ffc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffc6:	d204      	bcs.n	800ffd2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffce:	60da      	str	r2, [r3, #12]
 800ffd0:	e17c      	b.n	80102cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ffd8:	e178      	b.n	80102cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	69db      	ldr	r3, [r3, #28]
 800ffde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffe2:	f040 80c5 	bne.w	8010170 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ffe6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ffea:	2b20      	cmp	r3, #32
 800ffec:	dc48      	bgt.n	8010080 <UART_SetConfig+0x848>
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	db7b      	blt.n	80100ea <UART_SetConfig+0x8b2>
 800fff2:	2b20      	cmp	r3, #32
 800fff4:	d879      	bhi.n	80100ea <UART_SetConfig+0x8b2>
 800fff6:	a201      	add	r2, pc, #4	; (adr r2, 800fffc <UART_SetConfig+0x7c4>)
 800fff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fffc:	08010087 	.word	0x08010087
 8010000:	0801008f 	.word	0x0801008f
 8010004:	080100eb 	.word	0x080100eb
 8010008:	080100eb 	.word	0x080100eb
 801000c:	08010097 	.word	0x08010097
 8010010:	080100eb 	.word	0x080100eb
 8010014:	080100eb 	.word	0x080100eb
 8010018:	080100eb 	.word	0x080100eb
 801001c:	080100a7 	.word	0x080100a7
 8010020:	080100eb 	.word	0x080100eb
 8010024:	080100eb 	.word	0x080100eb
 8010028:	080100eb 	.word	0x080100eb
 801002c:	080100eb 	.word	0x080100eb
 8010030:	080100eb 	.word	0x080100eb
 8010034:	080100eb 	.word	0x080100eb
 8010038:	080100eb 	.word	0x080100eb
 801003c:	080100b7 	.word	0x080100b7
 8010040:	080100eb 	.word	0x080100eb
 8010044:	080100eb 	.word	0x080100eb
 8010048:	080100eb 	.word	0x080100eb
 801004c:	080100eb 	.word	0x080100eb
 8010050:	080100eb 	.word	0x080100eb
 8010054:	080100eb 	.word	0x080100eb
 8010058:	080100eb 	.word	0x080100eb
 801005c:	080100eb 	.word	0x080100eb
 8010060:	080100eb 	.word	0x080100eb
 8010064:	080100eb 	.word	0x080100eb
 8010068:	080100eb 	.word	0x080100eb
 801006c:	080100eb 	.word	0x080100eb
 8010070:	080100eb 	.word	0x080100eb
 8010074:	080100eb 	.word	0x080100eb
 8010078:	080100eb 	.word	0x080100eb
 801007c:	080100dd 	.word	0x080100dd
 8010080:	2b40      	cmp	r3, #64	; 0x40
 8010082:	d02e      	beq.n	80100e2 <UART_SetConfig+0x8aa>
 8010084:	e031      	b.n	80100ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010086:	f7f9 fa95 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 801008a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801008c:	e033      	b.n	80100f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801008e:	f7f9 faa7 	bl	80095e0 <HAL_RCC_GetPCLK2Freq>
 8010092:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010094:	e02f      	b.n	80100f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801009a:	4618      	mov	r0, r3
 801009c:	f7fa ff26 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100a4:	e027      	b.n	80100f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100a6:	f107 0318 	add.w	r3, r7, #24
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fb f872 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100b4:	e01f      	b.n	80100f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100b6:	4b2d      	ldr	r3, [pc, #180]	; (801016c <UART_SetConfig+0x934>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f003 0320 	and.w	r3, r3, #32
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d009      	beq.n	80100d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100c2:	4b2a      	ldr	r3, [pc, #168]	; (801016c <UART_SetConfig+0x934>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	08db      	lsrs	r3, r3, #3
 80100c8:	f003 0303 	and.w	r3, r3, #3
 80100cc:	4a24      	ldr	r2, [pc, #144]	; (8010160 <UART_SetConfig+0x928>)
 80100ce:	fa22 f303 	lsr.w	r3, r2, r3
 80100d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100d4:	e00f      	b.n	80100f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80100d6:	4b22      	ldr	r3, [pc, #136]	; (8010160 <UART_SetConfig+0x928>)
 80100d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100da:	e00c      	b.n	80100f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100dc:	4b21      	ldr	r3, [pc, #132]	; (8010164 <UART_SetConfig+0x92c>)
 80100de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100e0:	e009      	b.n	80100f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100e8:	e005      	b.n	80100f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80100ea:	2300      	movs	r3, #0
 80100ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80100ee:	2301      	movs	r3, #1
 80100f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80100f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80100f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f000 80e7 	beq.w	80102cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010102:	4a19      	ldr	r2, [pc, #100]	; (8010168 <UART_SetConfig+0x930>)
 8010104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010108:	461a      	mov	r2, r3
 801010a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801010c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010110:	005a      	lsls	r2, r3, #1
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	085b      	lsrs	r3, r3, #1
 8010118:	441a      	add	r2, r3
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010122:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	2b0f      	cmp	r3, #15
 8010128:	d916      	bls.n	8010158 <UART_SetConfig+0x920>
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010130:	d212      	bcs.n	8010158 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010134:	b29b      	uxth	r3, r3
 8010136:	f023 030f 	bic.w	r3, r3, #15
 801013a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801013c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013e:	085b      	lsrs	r3, r3, #1
 8010140:	b29b      	uxth	r3, r3
 8010142:	f003 0307 	and.w	r3, r3, #7
 8010146:	b29a      	uxth	r2, r3
 8010148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801014a:	4313      	orrs	r3, r2
 801014c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010154:	60da      	str	r2, [r3, #12]
 8010156:	e0b9      	b.n	80102cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010158:	2301      	movs	r3, #1
 801015a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801015e:	e0b5      	b.n	80102cc <UART_SetConfig+0xa94>
 8010160:	03d09000 	.word	0x03d09000
 8010164:	003d0900 	.word	0x003d0900
 8010168:	080220f8 	.word	0x080220f8
 801016c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010170:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010174:	2b20      	cmp	r3, #32
 8010176:	dc49      	bgt.n	801020c <UART_SetConfig+0x9d4>
 8010178:	2b00      	cmp	r3, #0
 801017a:	db7c      	blt.n	8010276 <UART_SetConfig+0xa3e>
 801017c:	2b20      	cmp	r3, #32
 801017e:	d87a      	bhi.n	8010276 <UART_SetConfig+0xa3e>
 8010180:	a201      	add	r2, pc, #4	; (adr r2, 8010188 <UART_SetConfig+0x950>)
 8010182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010186:	bf00      	nop
 8010188:	08010213 	.word	0x08010213
 801018c:	0801021b 	.word	0x0801021b
 8010190:	08010277 	.word	0x08010277
 8010194:	08010277 	.word	0x08010277
 8010198:	08010223 	.word	0x08010223
 801019c:	08010277 	.word	0x08010277
 80101a0:	08010277 	.word	0x08010277
 80101a4:	08010277 	.word	0x08010277
 80101a8:	08010233 	.word	0x08010233
 80101ac:	08010277 	.word	0x08010277
 80101b0:	08010277 	.word	0x08010277
 80101b4:	08010277 	.word	0x08010277
 80101b8:	08010277 	.word	0x08010277
 80101bc:	08010277 	.word	0x08010277
 80101c0:	08010277 	.word	0x08010277
 80101c4:	08010277 	.word	0x08010277
 80101c8:	08010243 	.word	0x08010243
 80101cc:	08010277 	.word	0x08010277
 80101d0:	08010277 	.word	0x08010277
 80101d4:	08010277 	.word	0x08010277
 80101d8:	08010277 	.word	0x08010277
 80101dc:	08010277 	.word	0x08010277
 80101e0:	08010277 	.word	0x08010277
 80101e4:	08010277 	.word	0x08010277
 80101e8:	08010277 	.word	0x08010277
 80101ec:	08010277 	.word	0x08010277
 80101f0:	08010277 	.word	0x08010277
 80101f4:	08010277 	.word	0x08010277
 80101f8:	08010277 	.word	0x08010277
 80101fc:	08010277 	.word	0x08010277
 8010200:	08010277 	.word	0x08010277
 8010204:	08010277 	.word	0x08010277
 8010208:	08010269 	.word	0x08010269
 801020c:	2b40      	cmp	r3, #64	; 0x40
 801020e:	d02e      	beq.n	801026e <UART_SetConfig+0xa36>
 8010210:	e031      	b.n	8010276 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010212:	f7f9 f9cf 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 8010216:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010218:	e033      	b.n	8010282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801021a:	f7f9 f9e1 	bl	80095e0 <HAL_RCC_GetPCLK2Freq>
 801021e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010220:	e02f      	b.n	8010282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010226:	4618      	mov	r0, r3
 8010228:	f7fa fe60 	bl	800aeec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801022c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010230:	e027      	b.n	8010282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010232:	f107 0318 	add.w	r3, r7, #24
 8010236:	4618      	mov	r0, r3
 8010238:	f7fa ffac 	bl	800b194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010240:	e01f      	b.n	8010282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010242:	4b2d      	ldr	r3, [pc, #180]	; (80102f8 <UART_SetConfig+0xac0>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f003 0320 	and.w	r3, r3, #32
 801024a:	2b00      	cmp	r3, #0
 801024c:	d009      	beq.n	8010262 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801024e:	4b2a      	ldr	r3, [pc, #168]	; (80102f8 <UART_SetConfig+0xac0>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	08db      	lsrs	r3, r3, #3
 8010254:	f003 0303 	and.w	r3, r3, #3
 8010258:	4a28      	ldr	r2, [pc, #160]	; (80102fc <UART_SetConfig+0xac4>)
 801025a:	fa22 f303 	lsr.w	r3, r2, r3
 801025e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010260:	e00f      	b.n	8010282 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010262:	4b26      	ldr	r3, [pc, #152]	; (80102fc <UART_SetConfig+0xac4>)
 8010264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010266:	e00c      	b.n	8010282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010268:	4b25      	ldr	r3, [pc, #148]	; (8010300 <UART_SetConfig+0xac8>)
 801026a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801026c:	e009      	b.n	8010282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801026e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010274:	e005      	b.n	8010282 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010276:	2300      	movs	r3, #0
 8010278:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010280:	bf00      	nop
    }

    if (pclk != 0U)
 8010282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010284:	2b00      	cmp	r3, #0
 8010286:	d021      	beq.n	80102cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028c:	4a1d      	ldr	r2, [pc, #116]	; (8010304 <UART_SetConfig+0xacc>)
 801028e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010292:	461a      	mov	r2, r3
 8010294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010296:	fbb3 f2f2 	udiv	r2, r3, r2
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	085b      	lsrs	r3, r3, #1
 80102a0:	441a      	add	r2, r3
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80102aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ae:	2b0f      	cmp	r3, #15
 80102b0:	d909      	bls.n	80102c6 <UART_SetConfig+0xa8e>
 80102b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102b8:	d205      	bcs.n	80102c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80102ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102bc:	b29a      	uxth	r2, r3
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	60da      	str	r2, [r3, #12]
 80102c4:	e002      	b.n	80102cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	2200      	movs	r2, #0
 80102e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	2200      	movs	r2, #0
 80102e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80102e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3748      	adds	r7, #72	; 0x48
 80102f0:	46bd      	mov	sp, r7
 80102f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102f6:	bf00      	nop
 80102f8:	58024400 	.word	0x58024400
 80102fc:	03d09000 	.word	0x03d09000
 8010300:	003d0900 	.word	0x003d0900
 8010304:	080220f8 	.word	0x080220f8

08010308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00a      	beq.n	8010332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	430a      	orrs	r2, r1
 8010330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010336:	f003 0302 	and.w	r3, r3, #2
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00a      	beq.n	8010354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	430a      	orrs	r2, r1
 8010352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010358:	f003 0304 	and.w	r3, r3, #4
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00a      	beq.n	8010376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	430a      	orrs	r2, r1
 8010374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	f003 0308 	and.w	r3, r3, #8
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00a      	beq.n	8010398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	430a      	orrs	r2, r1
 8010396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801039c:	f003 0310 	and.w	r3, r3, #16
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00a      	beq.n	80103ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	430a      	orrs	r2, r1
 80103b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103be:	f003 0320 	and.w	r3, r3, #32
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00a      	beq.n	80103dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	430a      	orrs	r2, r1
 80103da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d01a      	beq.n	801041e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010406:	d10a      	bne.n	801041e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	430a      	orrs	r2, r1
 801041c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00a      	beq.n	8010440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	430a      	orrs	r2, r1
 801043e:	605a      	str	r2, [r3, #4]
  }
}
 8010440:	bf00      	nop
 8010442:	370c      	adds	r7, #12
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b086      	sub	sp, #24
 8010450:	af02      	add	r7, sp, #8
 8010452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801045c:	f7f4 facc 	bl	80049f8 <HAL_GetTick>
 8010460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f003 0308 	and.w	r3, r3, #8
 801046c:	2b08      	cmp	r3, #8
 801046e:	d10e      	bne.n	801048e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010474:	9300      	str	r3, [sp, #0]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2200      	movs	r2, #0
 801047a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 f82f 	bl	80104e2 <UART_WaitOnFlagUntilTimeout>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801048a:	2303      	movs	r3, #3
 801048c:	e025      	b.n	80104da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	2b04      	cmp	r3, #4
 801049a:	d10e      	bne.n	80104ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801049c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 f819 	bl	80104e2 <UART_WaitOnFlagUntilTimeout>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104b6:	2303      	movs	r3, #3
 80104b8:	e00f      	b.n	80104da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2220      	movs	r2, #32
 80104be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2220      	movs	r2, #32
 80104c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2200      	movs	r2, #0
 80104d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}

080104e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b09c      	sub	sp, #112	; 0x70
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	60f8      	str	r0, [r7, #12]
 80104ea:	60b9      	str	r1, [r7, #8]
 80104ec:	603b      	str	r3, [r7, #0]
 80104ee:	4613      	mov	r3, r2
 80104f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104f2:	e0a9      	b.n	8010648 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80104f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104fa:	f000 80a5 	beq.w	8010648 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80104fe:	f7f4 fa7b 	bl	80049f8 <HAL_GetTick>
 8010502:	4602      	mov	r2, r0
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801050a:	429a      	cmp	r2, r3
 801050c:	d302      	bcc.n	8010514 <UART_WaitOnFlagUntilTimeout+0x32>
 801050e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010510:	2b00      	cmp	r3, #0
 8010512:	d140      	bne.n	8010596 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801051a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801051c:	e853 3f00 	ldrex	r3, [r3]
 8010520:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010528:	667b      	str	r3, [r7, #100]	; 0x64
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010534:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010536:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010538:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801053a:	e841 2300 	strex	r3, r2, [r1]
 801053e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010542:	2b00      	cmp	r3, #0
 8010544:	d1e6      	bne.n	8010514 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	3308      	adds	r3, #8
 801054c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010550:	e853 3f00 	ldrex	r3, [r3]
 8010554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	f023 0301 	bic.w	r3, r3, #1
 801055c:	663b      	str	r3, [r7, #96]	; 0x60
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3308      	adds	r3, #8
 8010564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010566:	64ba      	str	r2, [r7, #72]	; 0x48
 8010568:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801056c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801056e:	e841 2300 	strex	r3, r2, [r1]
 8010572:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1e5      	bne.n	8010546 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2220      	movs	r2, #32
 801057e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2220      	movs	r2, #32
 8010586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2200      	movs	r2, #0
 801058e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010592:	2303      	movs	r3, #3
 8010594:	e069      	b.n	801066a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f003 0304 	and.w	r3, r3, #4
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d051      	beq.n	8010648 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	69db      	ldr	r3, [r3, #28]
 80105aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105b2:	d149      	bne.n	8010648 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80105bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	e853 3f00 	ldrex	r3, [r3]
 80105ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80105d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	461a      	mov	r2, r3
 80105da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105dc:	637b      	str	r3, [r7, #52]	; 0x34
 80105de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105e4:	e841 2300 	strex	r3, r2, [r1]
 80105e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80105ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1e6      	bne.n	80105be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3308      	adds	r3, #8
 80105f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	e853 3f00 	ldrex	r3, [r3]
 80105fe:	613b      	str	r3, [r7, #16]
   return(result);
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	f023 0301 	bic.w	r3, r3, #1
 8010606:	66bb      	str	r3, [r7, #104]	; 0x68
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3308      	adds	r3, #8
 801060e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010610:	623a      	str	r2, [r7, #32]
 8010612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010614:	69f9      	ldr	r1, [r7, #28]
 8010616:	6a3a      	ldr	r2, [r7, #32]
 8010618:	e841 2300 	strex	r3, r2, [r1]
 801061c:	61bb      	str	r3, [r7, #24]
   return(result);
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e5      	bne.n	80105f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2220      	movs	r2, #32
 8010628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2220      	movs	r2, #32
 8010630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2220      	movs	r2, #32
 8010638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2200      	movs	r2, #0
 8010640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010644:	2303      	movs	r3, #3
 8010646:	e010      	b.n	801066a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	69da      	ldr	r2, [r3, #28]
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	4013      	ands	r3, r2
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	429a      	cmp	r2, r3
 8010656:	bf0c      	ite	eq
 8010658:	2301      	moveq	r3, #1
 801065a:	2300      	movne	r3, #0
 801065c:	b2db      	uxtb	r3, r3
 801065e:	461a      	mov	r2, r3
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	429a      	cmp	r2, r3
 8010664:	f43f af46 	beq.w	80104f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	3770      	adds	r7, #112	; 0x70
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010672:	b480      	push	{r7}
 8010674:	b085      	sub	sp, #20
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010680:	2b01      	cmp	r3, #1
 8010682:	d101      	bne.n	8010688 <HAL_UARTEx_DisableFifoMode+0x16>
 8010684:	2302      	movs	r3, #2
 8010686:	e027      	b.n	80106d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2201      	movs	r2, #1
 801068c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2224      	movs	r2, #36	; 0x24
 8010694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f022 0201 	bic.w	r2, r2, #1
 80106ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80106b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2220      	movs	r2, #32
 80106ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3714      	adds	r7, #20
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d101      	bne.n	80106fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80106f8:	2302      	movs	r3, #2
 80106fa:	e02d      	b.n	8010758 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2201      	movs	r2, #1
 8010700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2224      	movs	r2, #36	; 0x24
 8010708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f022 0201 	bic.w	r2, r2, #1
 8010722:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	689b      	ldr	r3, [r3, #8]
 801072a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	683a      	ldr	r2, [r7, #0]
 8010734:	430a      	orrs	r2, r1
 8010736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 f84f 	bl	80107dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2220      	movs	r2, #32
 801074a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010756:	2300      	movs	r3, #0
}
 8010758:	4618      	mov	r0, r3
 801075a:	3710      	adds	r7, #16
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010770:	2b01      	cmp	r3, #1
 8010772:	d101      	bne.n	8010778 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010774:	2302      	movs	r3, #2
 8010776:	e02d      	b.n	80107d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2201      	movs	r2, #1
 801077c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2224      	movs	r2, #36	; 0x24
 8010784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f022 0201 	bic.w	r2, r2, #1
 801079e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	689b      	ldr	r3, [r3, #8]
 80107a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	683a      	ldr	r2, [r7, #0]
 80107b0:	430a      	orrs	r2, r1
 80107b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 f811 	bl	80107dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2220      	movs	r2, #32
 80107c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2200      	movs	r2, #0
 80107ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80107dc:	b480      	push	{r7}
 80107de:	b085      	sub	sp, #20
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d108      	bne.n	80107fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2201      	movs	r2, #1
 80107f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2201      	movs	r2, #1
 80107f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80107fc:	e031      	b.n	8010862 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80107fe:	2310      	movs	r3, #16
 8010800:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010802:	2310      	movs	r3, #16
 8010804:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	0e5b      	lsrs	r3, r3, #25
 801080e:	b2db      	uxtb	r3, r3
 8010810:	f003 0307 	and.w	r3, r3, #7
 8010814:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	0f5b      	lsrs	r3, r3, #29
 801081e:	b2db      	uxtb	r3, r3
 8010820:	f003 0307 	and.w	r3, r3, #7
 8010824:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010826:	7bbb      	ldrb	r3, [r7, #14]
 8010828:	7b3a      	ldrb	r2, [r7, #12]
 801082a:	4911      	ldr	r1, [pc, #68]	; (8010870 <UARTEx_SetNbDataToProcess+0x94>)
 801082c:	5c8a      	ldrb	r2, [r1, r2]
 801082e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010832:	7b3a      	ldrb	r2, [r7, #12]
 8010834:	490f      	ldr	r1, [pc, #60]	; (8010874 <UARTEx_SetNbDataToProcess+0x98>)
 8010836:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010838:	fb93 f3f2 	sdiv	r3, r3, r2
 801083c:	b29a      	uxth	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010844:	7bfb      	ldrb	r3, [r7, #15]
 8010846:	7b7a      	ldrb	r2, [r7, #13]
 8010848:	4909      	ldr	r1, [pc, #36]	; (8010870 <UARTEx_SetNbDataToProcess+0x94>)
 801084a:	5c8a      	ldrb	r2, [r1, r2]
 801084c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010850:	7b7a      	ldrb	r2, [r7, #13]
 8010852:	4908      	ldr	r1, [pc, #32]	; (8010874 <UARTEx_SetNbDataToProcess+0x98>)
 8010854:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010856:	fb93 f3f2 	sdiv	r3, r3, r2
 801085a:	b29a      	uxth	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010862:	bf00      	nop
 8010864:	3714      	adds	r7, #20
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr
 801086e:	bf00      	nop
 8010870:	08022110 	.word	0x08022110
 8010874:	08022118 	.word	0x08022118

08010878 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010878:	b084      	sub	sp, #16
 801087a:	b480      	push	{r7}
 801087c:	b085      	sub	sp, #20
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	f107 001c 	add.w	r0, r7, #28
 8010886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801088a:	2300      	movs	r3, #0
 801088c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801088e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010890:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010892:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010896:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010898:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801089a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801089e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	685a      	ldr	r2, [r3, #4]
 80108aa:	4b07      	ldr	r3, [pc, #28]	; (80108c8 <SDMMC_Init+0x50>)
 80108ac:	4013      	ands	r3, r2
 80108ae:	68fa      	ldr	r2, [r7, #12]
 80108b0:	431a      	orrs	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80108b6:	2300      	movs	r3, #0
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3714      	adds	r7, #20
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	b004      	add	sp, #16
 80108c4:	4770      	bx	lr
 80108c6:	bf00      	nop
 80108c8:	ffc02c00 	.word	0xffc02c00

080108cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80108da:	4618      	mov	r0, r3
 80108dc:	370c      	adds	r7, #12
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr

080108e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80108e6:	b480      	push	{r7}
 80108e8:	b083      	sub	sp, #12
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80108fa:	2300      	movs	r3, #0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f043 0203 	orr.w	r2, r3, #3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801091c:	2300      	movs	r3, #0
}
 801091e:	4618      	mov	r0, r3
 8010920:	370c      	adds	r7, #12
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801092a:	b480      	push	{r7}
 801092c:	b083      	sub	sp, #12
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f003 0303 	and.w	r3, r3, #3
}
 801093a:	4618      	mov	r0, r3
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
	...

08010948 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010952:	2300      	movs	r3, #0
 8010954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010966:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801096c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010972:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	4313      	orrs	r3, r2
 8010978:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	68da      	ldr	r2, [r3, #12]
 801097e:	4b06      	ldr	r3, [pc, #24]	; (8010998 <SDMMC_SendCommand+0x50>)
 8010980:	4013      	ands	r3, r2
 8010982:	68fa      	ldr	r2, [r7, #12]
 8010984:	431a      	orrs	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801098a:	2300      	movs	r3, #0
}
 801098c:	4618      	mov	r0, r3
 801098e:	3714      	adds	r7, #20
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr
 8010998:	fffee0c0 	.word	0xfffee0c0

0801099c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	691b      	ldr	r3, [r3, #16]
 80109a8:	b2db      	uxtb	r3, r3
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80109b6:	b480      	push	{r7}
 80109b8:	b085      	sub	sp, #20
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
 80109be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	3314      	adds	r3, #20
 80109c4:	461a      	mov	r2, r3
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	4413      	add	r3, r2
 80109ca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3714      	adds	r7, #20
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80109dc:	b480      	push	{r7}
 80109de:	b085      	sub	sp, #20
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80109e6:	2300      	movs	r3, #0
 80109e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	685a      	ldr	r2, [r3, #4]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010a02:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010a08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010a0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010a10:	68fa      	ldr	r2, [r7, #12]
 8010a12:	4313      	orrs	r3, r2
 8010a14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	431a      	orrs	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010a26:	2300      	movs	r3, #0

}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3714      	adds	r7, #20
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b088      	sub	sp, #32
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010a42:	2310      	movs	r3, #16
 8010a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a56:	f107 0308 	add.w	r3, r7, #8
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7ff ff73 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a66:	2110      	movs	r1, #16
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 fa5f 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a70:	69fb      	ldr	r3, [r7, #28]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3720      	adds	r7, #32
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b088      	sub	sp, #32
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010a88:	2311      	movs	r3, #17
 8010a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a92:	2300      	movs	r3, #0
 8010a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a9c:	f107 0308 	add.w	r3, r7, #8
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff ff50 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aac:	2111      	movs	r1, #17
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f000 fa3c 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ab6:	69fb      	ldr	r3, [r7, #28]
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3720      	adds	r7, #32
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b088      	sub	sp, #32
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010ace:	2312      	movs	r3, #18
 8010ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ae2:	f107 0308 	add.w	r3, r7, #8
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7ff ff2d 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8010af2:	2112      	movs	r1, #18
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f000 fa19 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010afc:	69fb      	ldr	r3, [r7, #28]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3720      	adds	r7, #32
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b088      	sub	sp, #32
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
 8010b0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010b14:	2318      	movs	r3, #24
 8010b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b28:	f107 0308 	add.w	r3, r7, #8
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f7ff ff0a 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b38:	2118      	movs	r1, #24
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 f9f6 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b42:	69fb      	ldr	r3, [r7, #28]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3720      	adds	r7, #32
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b088      	sub	sp, #32
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010b5a:	2319      	movs	r3, #25
 8010b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b64:	2300      	movs	r3, #0
 8010b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b6e:	f107 0308 	add.w	r3, r7, #8
 8010b72:	4619      	mov	r1, r3
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7ff fee7 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b7e:	2119      	movs	r1, #25
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 f9d3 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b88:	69fb      	ldr	r3, [r7, #28]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3720      	adds	r7, #32
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b088      	sub	sp, #32
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ba0:	230c      	movs	r3, #12
 8010ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010baa:	2300      	movs	r3, #0
 8010bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bb2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bcc:	f107 0308 	add.w	r3, r7, #8
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff feb8 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010bd8:	4a0b      	ldr	r2, [pc, #44]	; (8010c08 <SDMMC_CmdStopTransfer+0x74>)
 8010bda:	210c      	movs	r1, #12
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 f9a5 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010be2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010bf6:	d101      	bne.n	8010bfc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010bfc:	69fb      	ldr	r3, [r7, #28]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3720      	adds	r7, #32
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	05f5e100 	.word	0x05f5e100

08010c0c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b088      	sub	sp, #32
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010c1a:	2307      	movs	r3, #7
 8010c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c24:	2300      	movs	r3, #0
 8010c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c2e:	f107 0308 	add.w	r3, r7, #8
 8010c32:	4619      	mov	r1, r3
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff fe87 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c3e:	2107      	movs	r1, #7
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 f973 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010c46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c48:	69fb      	ldr	r3, [r7, #28]
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3720      	adds	r7, #32
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b088      	sub	sp, #32
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010c62:	2300      	movs	r3, #0
 8010c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c66:	2300      	movs	r3, #0
 8010c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c70:	f107 0308 	add.w	r3, r7, #8
 8010c74:	4619      	mov	r1, r3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7ff fe66 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 fb97 	bl	80113b0 <SDMMC_GetCmdError>
 8010c82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c84:	69fb      	ldr	r3, [r7, #28]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3720      	adds	r7, #32
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b088      	sub	sp, #32
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010c96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010c9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010c9c:	2308      	movs	r3, #8
 8010c9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cb0:	f107 0308 	add.w	r3, r7, #8
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f7ff fe46 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 fb29 	bl	8011314 <SDMMC_GetCmdResp7>
 8010cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cc4:	69fb      	ldr	r3, [r7, #28]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3720      	adds	r7, #32
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b088      	sub	sp, #32
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010cdc:	2337      	movs	r3, #55	; 0x37
 8010cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cf0:	f107 0308 	add.w	r3, r7, #8
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7ff fe26 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d00:	2137      	movs	r1, #55	; 0x37
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f000 f912 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010d08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d0a:	69fb      	ldr	r3, [r7, #28]
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3720      	adds	r7, #32
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b088      	sub	sp, #32
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010d22:	2329      	movs	r3, #41	; 0x29
 8010d24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d36:	f107 0308 	add.w	r3, r7, #8
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f7ff fe03 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 fa2e 	bl	80111a4 <SDMMC_GetCmdResp3>
 8010d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d4a:	69fb      	ldr	r3, [r7, #28]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3720      	adds	r7, #32
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b088      	sub	sp, #32
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010d62:	2306      	movs	r3, #6
 8010d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d76:	f107 0308 	add.w	r3, r7, #8
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff fde3 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d86:	2106      	movs	r1, #6
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f8cf 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010d8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d90:	69fb      	ldr	r3, [r7, #28]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3720      	adds	r7, #32
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010d9a:	b580      	push	{r7, lr}
 8010d9c:	b088      	sub	sp, #32
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010da2:	2300      	movs	r3, #0
 8010da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010da6:	2333      	movs	r3, #51	; 0x33
 8010da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010dae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010db0:	2300      	movs	r3, #0
 8010db2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010db8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dba:	f107 0308 	add.w	r3, r7, #8
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7ff fdc1 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dca:	2133      	movs	r1, #51	; 0x33
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f000 f8ad 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010dd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dd4:	69fb      	ldr	r3, [r7, #28]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3720      	adds	r7, #32
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}

08010dde <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010dde:	b580      	push	{r7, lr}
 8010de0:	b088      	sub	sp, #32
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010de6:	2300      	movs	r3, #0
 8010de8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010dea:	2302      	movs	r3, #2
 8010dec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010df2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010df4:	2300      	movs	r3, #0
 8010df6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dfe:	f107 0308 	add.w	r3, r7, #8
 8010e02:	4619      	mov	r1, r3
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f7ff fd9f 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 f980 	bl	8011110 <SDMMC_GetCmdResp2>
 8010e10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e12:	69fb      	ldr	r3, [r7, #28]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3720      	adds	r7, #32
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b088      	sub	sp, #32
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010e2a:	2309      	movs	r3, #9
 8010e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010e2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e34:	2300      	movs	r3, #0
 8010e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e3e:	f107 0308 	add.w	r3, r7, #8
 8010e42:	4619      	mov	r1, r3
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7ff fd7f 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 f960 	bl	8011110 <SDMMC_GetCmdResp2>
 8010e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e52:	69fb      	ldr	r3, [r7, #28]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3720      	adds	r7, #32
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b088      	sub	sp, #32
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010e66:	2300      	movs	r3, #0
 8010e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e74:	2300      	movs	r3, #0
 8010e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e7e:	f107 0308 	add.w	r3, r7, #8
 8010e82:	4619      	mov	r1, r3
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f7ff fd5f 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	2103      	movs	r1, #3
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 f9c8 	bl	8011224 <SDMMC_GetCmdResp6>
 8010e94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e96:	69fb      	ldr	r3, [r7, #28]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3720      	adds	r7, #32
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b088      	sub	sp, #32
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010eae:	230d      	movs	r3, #13
 8010eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ec2:	f107 0308 	add.w	r3, r7, #8
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7ff fd3d 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ed2:	210d      	movs	r1, #13
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 f829 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010edc:	69fb      	ldr	r3, [r7, #28]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3720      	adds	r7, #32
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}

08010ee6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b088      	sub	sp, #32
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010ef2:	230d      	movs	r3, #13
 8010ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010efc:	2300      	movs	r3, #0
 8010efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f06:	f107 0308 	add.w	r3, r7, #8
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f7ff fd1b 	bl	8010948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f16:	210d      	movs	r1, #13
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 f807 	bl	8010f2c <SDMMC_GetCmdResp1>
 8010f1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f20:	69fb      	ldr	r3, [r7, #28]
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3720      	adds	r7, #32
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
	...

08010f2c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b088      	sub	sp, #32
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	460b      	mov	r3, r1
 8010f36:	607a      	str	r2, [r7, #4]
 8010f38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010f3a:	4b70      	ldr	r3, [pc, #448]	; (80110fc <SDMMC_GetCmdResp1+0x1d0>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4a70      	ldr	r2, [pc, #448]	; (8011100 <SDMMC_GetCmdResp1+0x1d4>)
 8010f40:	fba2 2303 	umull	r2, r3, r2, r3
 8010f44:	0a5a      	lsrs	r2, r3, #9
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	fb02 f303 	mul.w	r3, r2, r3
 8010f4c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	1e5a      	subs	r2, r3, #1
 8010f52:	61fa      	str	r2, [r7, #28]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d102      	bne.n	8010f5e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f5c:	e0c9      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f62:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010f64:	69ba      	ldr	r2, [r7, #24]
 8010f66:	4b67      	ldr	r3, [pc, #412]	; (8011104 <SDMMC_GetCmdResp1+0x1d8>)
 8010f68:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d0ef      	beq.n	8010f4e <SDMMC_GetCmdResp1+0x22>
 8010f6e:	69bb      	ldr	r3, [r7, #24]
 8010f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1ea      	bne.n	8010f4e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f7c:	f003 0304 	and.w	r3, r3, #4
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d004      	beq.n	8010f8e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2204      	movs	r2, #4
 8010f88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f8a:	2304      	movs	r3, #4
 8010f8c:	e0b1      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f92:	f003 0301 	and.w	r3, r3, #1
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d004      	beq.n	8010fa4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e0a6      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	4a58      	ldr	r2, [pc, #352]	; (8011108 <SDMMC_GetCmdResp1+0x1dc>)
 8010fa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f7ff fcf6 	bl	801099c <SDMMC_GetCommandResponse>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	7afb      	ldrb	r3, [r7, #11]
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d001      	beq.n	8010fbe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e099      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7ff fcf8 	bl	80109b6 <SDMMC_GetResponse>
 8010fc6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010fc8:	697a      	ldr	r2, [r7, #20]
 8010fca:	4b50      	ldr	r3, [pc, #320]	; (801110c <SDMMC_GetCmdResp1+0x1e0>)
 8010fcc:	4013      	ands	r3, r2
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d101      	bne.n	8010fd6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	e08d      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	da02      	bge.n	8010fe2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010fdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010fe0:	e087      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010fec:	2340      	movs	r3, #64	; 0x40
 8010fee:	e080      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010ffa:	2380      	movs	r3, #128	; 0x80
 8010ffc:	e079      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011004:	2b00      	cmp	r3, #0
 8011006:	d002      	beq.n	801100e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011008:	f44f 7380 	mov.w	r3, #256	; 0x100
 801100c:	e071      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011014:	2b00      	cmp	r3, #0
 8011016:	d002      	beq.n	801101e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011018:	f44f 7300 	mov.w	r3, #512	; 0x200
 801101c:	e069      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011024:	2b00      	cmp	r3, #0
 8011026:	d002      	beq.n	801102e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801102c:	e061      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011038:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801103c:	e059      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801104c:	e051      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801105c:	e049      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011064:	2b00      	cmp	r3, #0
 8011066:	d002      	beq.n	801106e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801106c:	e041      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801107c:	e039      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011084:	2b00      	cmp	r3, #0
 8011086:	d002      	beq.n	801108e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801108c:	e031      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011094:	2b00      	cmp	r3, #0
 8011096:	d002      	beq.n	801109e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011098:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801109c:	e029      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d002      	beq.n	80110ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80110a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80110ac:	e021      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d002      	beq.n	80110be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80110b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80110bc:	e019      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d002      	beq.n	80110ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80110c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80110cc:	e011      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80110d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80110dc:	e009      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	f003 0308 	and.w	r3, r3, #8
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80110e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80110ec:	e001      	b.n	80110f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3720      	adds	r7, #32
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	20000000 	.word	0x20000000
 8011100:	10624dd3 	.word	0x10624dd3
 8011104:	00200045 	.word	0x00200045
 8011108:	002000c5 	.word	0x002000c5
 801110c:	fdffe008 	.word	0xfdffe008

08011110 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011110:	b480      	push	{r7}
 8011112:	b085      	sub	sp, #20
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011118:	4b1f      	ldr	r3, [pc, #124]	; (8011198 <SDMMC_GetCmdResp2+0x88>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4a1f      	ldr	r2, [pc, #124]	; (801119c <SDMMC_GetCmdResp2+0x8c>)
 801111e:	fba2 2303 	umull	r2, r3, r2, r3
 8011122:	0a5b      	lsrs	r3, r3, #9
 8011124:	f241 3288 	movw	r2, #5000	; 0x1388
 8011128:	fb02 f303 	mul.w	r3, r2, r3
 801112c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	1e5a      	subs	r2, r3, #1
 8011132:	60fa      	str	r2, [r7, #12]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801113c:	e026      	b.n	801118c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011142:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0ef      	beq.n	801112e <SDMMC_GetCmdResp2+0x1e>
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1ea      	bne.n	801112e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801115c:	f003 0304 	and.w	r3, r3, #4
 8011160:	2b00      	cmp	r3, #0
 8011162:	d004      	beq.n	801116e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2204      	movs	r2, #4
 8011168:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801116a:	2304      	movs	r3, #4
 801116c:	e00e      	b.n	801118c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011172:	f003 0301 	and.w	r3, r3, #1
 8011176:	2b00      	cmp	r3, #0
 8011178:	d004      	beq.n	8011184 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2201      	movs	r2, #1
 801117e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011180:	2301      	movs	r3, #1
 8011182:	e003      	b.n	801118c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a06      	ldr	r2, [pc, #24]	; (80111a0 <SDMMC_GetCmdResp2+0x90>)
 8011188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801118a:	2300      	movs	r3, #0
}
 801118c:	4618      	mov	r0, r3
 801118e:	3714      	adds	r7, #20
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr
 8011198:	20000000 	.word	0x20000000
 801119c:	10624dd3 	.word	0x10624dd3
 80111a0:	002000c5 	.word	0x002000c5

080111a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80111ac:	4b1a      	ldr	r3, [pc, #104]	; (8011218 <SDMMC_GetCmdResp3+0x74>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4a1a      	ldr	r2, [pc, #104]	; (801121c <SDMMC_GetCmdResp3+0x78>)
 80111b2:	fba2 2303 	umull	r2, r3, r2, r3
 80111b6:	0a5b      	lsrs	r3, r3, #9
 80111b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80111bc:	fb02 f303 	mul.w	r3, r2, r3
 80111c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	1e5a      	subs	r2, r3, #1
 80111c6:	60fa      	str	r2, [r7, #12]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d102      	bne.n	80111d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80111d0:	e01b      	b.n	801120a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0ef      	beq.n	80111c2 <SDMMC_GetCmdResp3+0x1e>
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d1ea      	bne.n	80111c2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111f0:	f003 0304 	and.w	r3, r3, #4
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d004      	beq.n	8011202 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2204      	movs	r2, #4
 80111fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111fe:	2304      	movs	r3, #4
 8011200:	e003      	b.n	801120a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4a06      	ldr	r2, [pc, #24]	; (8011220 <SDMMC_GetCmdResp3+0x7c>)
 8011206:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3714      	adds	r7, #20
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop
 8011218:	20000000 	.word	0x20000000
 801121c:	10624dd3 	.word	0x10624dd3
 8011220:	002000c5 	.word	0x002000c5

08011224 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b088      	sub	sp, #32
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	460b      	mov	r3, r1
 801122e:	607a      	str	r2, [r7, #4]
 8011230:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011232:	4b35      	ldr	r3, [pc, #212]	; (8011308 <SDMMC_GetCmdResp6+0xe4>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	4a35      	ldr	r2, [pc, #212]	; (801130c <SDMMC_GetCmdResp6+0xe8>)
 8011238:	fba2 2303 	umull	r2, r3, r2, r3
 801123c:	0a5b      	lsrs	r3, r3, #9
 801123e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011242:	fb02 f303 	mul.w	r3, r2, r3
 8011246:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	1e5a      	subs	r2, r3, #1
 801124c:	61fa      	str	r2, [r7, #28]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d102      	bne.n	8011258 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011252:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011256:	e052      	b.n	80112fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801125c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011264:	2b00      	cmp	r3, #0
 8011266:	d0ef      	beq.n	8011248 <SDMMC_GetCmdResp6+0x24>
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801126e:	2b00      	cmp	r3, #0
 8011270:	d1ea      	bne.n	8011248 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011276:	f003 0304 	and.w	r3, r3, #4
 801127a:	2b00      	cmp	r3, #0
 801127c:	d004      	beq.n	8011288 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2204      	movs	r2, #4
 8011282:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011284:	2304      	movs	r3, #4
 8011286:	e03a      	b.n	80112fe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801128c:	f003 0301 	and.w	r3, r3, #1
 8011290:	2b00      	cmp	r3, #0
 8011292:	d004      	beq.n	801129e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2201      	movs	r2, #1
 8011298:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801129a:	2301      	movs	r3, #1
 801129c:	e02f      	b.n	80112fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801129e:	68f8      	ldr	r0, [r7, #12]
 80112a0:	f7ff fb7c 	bl	801099c <SDMMC_GetCommandResponse>
 80112a4:	4603      	mov	r3, r0
 80112a6:	461a      	mov	r2, r3
 80112a8:	7afb      	ldrb	r3, [r7, #11]
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d001      	beq.n	80112b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112ae:	2301      	movs	r3, #1
 80112b0:	e025      	b.n	80112fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	4a16      	ldr	r2, [pc, #88]	; (8011310 <SDMMC_GetCmdResp6+0xec>)
 80112b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80112b8:	2100      	movs	r1, #0
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f7ff fb7b 	bl	80109b6 <SDMMC_GetResponse>
 80112c0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d106      	bne.n	80112da <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	0c1b      	lsrs	r3, r3, #16
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80112d6:	2300      	movs	r3, #0
 80112d8:	e011      	b.n	80112fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80112e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80112e8:	e009      	b.n	80112fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d002      	beq.n	80112fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80112f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112f8:	e001      	b.n	80112fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80112fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3720      	adds	r7, #32
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
 8011306:	bf00      	nop
 8011308:	20000000 	.word	0x20000000
 801130c:	10624dd3 	.word	0x10624dd3
 8011310:	002000c5 	.word	0x002000c5

08011314 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011314:	b480      	push	{r7}
 8011316:	b085      	sub	sp, #20
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801131c:	4b22      	ldr	r3, [pc, #136]	; (80113a8 <SDMMC_GetCmdResp7+0x94>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a22      	ldr	r2, [pc, #136]	; (80113ac <SDMMC_GetCmdResp7+0x98>)
 8011322:	fba2 2303 	umull	r2, r3, r2, r3
 8011326:	0a5b      	lsrs	r3, r3, #9
 8011328:	f241 3288 	movw	r2, #5000	; 0x1388
 801132c:	fb02 f303 	mul.w	r3, r2, r3
 8011330:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	1e5a      	subs	r2, r3, #1
 8011336:	60fa      	str	r2, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d102      	bne.n	8011342 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801133c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011340:	e02c      	b.n	801139c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011346:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801134e:	2b00      	cmp	r3, #0
 8011350:	d0ef      	beq.n	8011332 <SDMMC_GetCmdResp7+0x1e>
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011358:	2b00      	cmp	r3, #0
 801135a:	d1ea      	bne.n	8011332 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011360:	f003 0304 	and.w	r3, r3, #4
 8011364:	2b00      	cmp	r3, #0
 8011366:	d004      	beq.n	8011372 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2204      	movs	r2, #4
 801136c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801136e:	2304      	movs	r3, #4
 8011370:	e014      	b.n	801139c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011376:	f003 0301 	and.w	r3, r3, #1
 801137a:	2b00      	cmp	r3, #0
 801137c:	d004      	beq.n	8011388 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2201      	movs	r2, #1
 8011382:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011384:	2301      	movs	r3, #1
 8011386:	e009      	b.n	801139c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801138c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011390:	2b00      	cmp	r3, #0
 8011392:	d002      	beq.n	801139a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2240      	movs	r2, #64	; 0x40
 8011398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801139a:	2300      	movs	r3, #0

}
 801139c:	4618      	mov	r0, r3
 801139e:	3714      	adds	r7, #20
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr
 80113a8:	20000000 	.word	0x20000000
 80113ac:	10624dd3 	.word	0x10624dd3

080113b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80113b8:	4b11      	ldr	r3, [pc, #68]	; (8011400 <SDMMC_GetCmdError+0x50>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4a11      	ldr	r2, [pc, #68]	; (8011404 <SDMMC_GetCmdError+0x54>)
 80113be:	fba2 2303 	umull	r2, r3, r2, r3
 80113c2:	0a5b      	lsrs	r3, r3, #9
 80113c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80113c8:	fb02 f303 	mul.w	r3, r2, r3
 80113cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	1e5a      	subs	r2, r3, #1
 80113d2:	60fa      	str	r2, [r7, #12]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113dc:	e009      	b.n	80113f2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d0f1      	beq.n	80113ce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4a06      	ldr	r2, [pc, #24]	; (8011408 <SDMMC_GetCmdError+0x58>)
 80113ee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	20000000 	.word	0x20000000
 8011404:	10624dd3 	.word	0x10624dd3
 8011408:	002000c5 	.word	0x002000c5

0801140c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011410:	4904      	ldr	r1, [pc, #16]	; (8011424 <MX_FATFS_Init+0x18>)
 8011412:	4805      	ldr	r0, [pc, #20]	; (8011428 <MX_FATFS_Init+0x1c>)
 8011414:	f000 faa6 	bl	8011964 <FATFS_LinkDriver>
 8011418:	4603      	mov	r3, r0
 801141a:	461a      	mov	r2, r3
 801141c:	4b03      	ldr	r3, [pc, #12]	; (801142c <MX_FATFS_Init+0x20>)
 801141e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011420:	bf00      	nop
 8011422:	bd80      	pop	{r7, pc}
 8011424:	20000acc 	.word	0x20000acc
 8011428:	08022120 	.word	0x08022120
 801142c:	20000ac8 	.word	0x20000ac8

08011430 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011436:	2300      	movs	r3, #0
 8011438:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801143a:	f000 f885 	bl	8011548 <BSP_SD_IsDetected>
 801143e:	4603      	mov	r3, r0
 8011440:	2b01      	cmp	r3, #1
 8011442:	d001      	beq.n	8011448 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011444:	2302      	movs	r3, #2
 8011446:	e012      	b.n	801146e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011448:	480b      	ldr	r0, [pc, #44]	; (8011478 <BSP_SD_Init+0x48>)
 801144a:	f7fa faad 	bl	800b9a8 <HAL_SD_Init>
 801144e:	4603      	mov	r3, r0
 8011450:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011452:	79fb      	ldrb	r3, [r7, #7]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d109      	bne.n	801146c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801145c:	4806      	ldr	r0, [pc, #24]	; (8011478 <BSP_SD_Init+0x48>)
 801145e:	f7fb f95d 	bl	800c71c <HAL_SD_ConfigWideBusOperation>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d001      	beq.n	801146c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011468:	2301      	movs	r3, #1
 801146a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801146c:	79fb      	ldrb	r3, [r7, #7]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	200006a0 	.word	0x200006a0

0801147c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b086      	sub	sp, #24
 8011480:	af00      	add	r7, sp, #0
 8011482:	60f8      	str	r0, [r7, #12]
 8011484:	60b9      	str	r1, [r7, #8]
 8011486:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011488:	2300      	movs	r3, #0
 801148a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	68ba      	ldr	r2, [r7, #8]
 8011490:	68f9      	ldr	r1, [r7, #12]
 8011492:	4806      	ldr	r0, [pc, #24]	; (80114ac <BSP_SD_ReadBlocks_DMA+0x30>)
 8011494:	f7fa fba2 	bl	800bbdc <HAL_SD_ReadBlocks_DMA>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	d001      	beq.n	80114a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801149e:	2301      	movs	r3, #1
 80114a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80114a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3718      	adds	r7, #24
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	200006a0 	.word	0x200006a0

080114b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	60b9      	str	r1, [r7, #8]
 80114ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80114bc:	2300      	movs	r3, #0
 80114be:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	68ba      	ldr	r2, [r7, #8]
 80114c4:	68f9      	ldr	r1, [r7, #12]
 80114c6:	4806      	ldr	r0, [pc, #24]	; (80114e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80114c8:	f7fa fc30 	bl	800bd2c <HAL_SD_WriteBlocks_DMA>
 80114cc:	4603      	mov	r3, r0
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d001      	beq.n	80114d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80114d2:	2301      	movs	r3, #1
 80114d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80114d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3718      	adds	r7, #24
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	200006a0 	.word	0x200006a0

080114e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80114e8:	4805      	ldr	r0, [pc, #20]	; (8011500 <BSP_SD_GetCardState+0x1c>)
 80114ea:	f7fb fa29 	bl	800c940 <HAL_SD_GetCardState>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b04      	cmp	r3, #4
 80114f2:	bf14      	ite	ne
 80114f4:	2301      	movne	r3, #1
 80114f6:	2300      	moveq	r3, #0
 80114f8:	b2db      	uxtb	r3, r3
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	200006a0 	.word	0x200006a0

08011504 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801150c:	6879      	ldr	r1, [r7, #4]
 801150e:	4803      	ldr	r0, [pc, #12]	; (801151c <BSP_SD_GetCardInfo+0x18>)
 8011510:	f7fb f8d8 	bl	800c6c4 <HAL_SD_GetCardInfo>
}
 8011514:	bf00      	nop
 8011516:	3708      	adds	r7, #8
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	200006a0 	.word	0x200006a0

08011520 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011528:	f000 f9ac 	bl	8011884 <BSP_SD_WriteCpltCallback>
}
 801152c:	bf00      	nop
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801153c:	f000 f9b4 	bl	80118a8 <BSP_SD_ReadCpltCallback>
}
 8011540:	bf00      	nop
 8011542:	3708      	adds	r7, #8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801154e:	2301      	movs	r3, #1
 8011550:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011552:	f000 f80b 	bl	801156c <BSP_PlatformIsDetected>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d101      	bne.n	8011560 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801155c:	2300      	movs	r3, #0
 801155e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011560:	79fb      	ldrb	r3, [r7, #7]
 8011562:	b2db      	uxtb	r3, r3
}
 8011564:	4618      	mov	r0, r3
 8011566:	3708      	adds	r7, #8
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011572:	2301      	movs	r3, #1
 8011574:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801157a:	4806      	ldr	r0, [pc, #24]	; (8011594 <BSP_PlatformIsDetected+0x28>)
 801157c:	f7f6 fb90 	bl	8007ca0 <HAL_GPIO_ReadPin>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d001      	beq.n	801158a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011586:	2300      	movs	r3, #0
 8011588:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801158a:	79fb      	ldrb	r3, [r7, #7]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	58020800 	.word	0x58020800

08011598 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b084      	sub	sp, #16
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80115a0:	f000 faa0 	bl	8011ae4 <osKernelGetTickCount>
 80115a4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80115a6:	e006      	b.n	80115b6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115a8:	f7ff ff9c 	bl	80114e4 <BSP_SD_GetCardState>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d101      	bne.n	80115b6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	e009      	b.n	80115ca <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80115b6:	f000 fa95 	bl	8011ae4 <osKernelGetTickCount>
 80115ba:	4602      	mov	r2, r0
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	1ad3      	subs	r3, r2, r3
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d8f0      	bhi.n	80115a8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80115c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3710      	adds	r7, #16
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
	...

080115d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80115de:	4b0b      	ldr	r3, [pc, #44]	; (801160c <SD_CheckStatus+0x38>)
 80115e0:	2201      	movs	r2, #1
 80115e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115e4:	f7ff ff7e 	bl	80114e4 <BSP_SD_GetCardState>
 80115e8:	4603      	mov	r3, r0
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d107      	bne.n	80115fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80115ee:	4b07      	ldr	r3, [pc, #28]	; (801160c <SD_CheckStatus+0x38>)
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	f023 0301 	bic.w	r3, r3, #1
 80115f8:	b2da      	uxtb	r2, r3
 80115fa:	4b04      	ldr	r3, [pc, #16]	; (801160c <SD_CheckStatus+0x38>)
 80115fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80115fe:	4b03      	ldr	r3, [pc, #12]	; (801160c <SD_CheckStatus+0x38>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	b2db      	uxtb	r3, r3
}
 8011604:	4618      	mov	r0, r3
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	2000000d 	.word	0x2000000d

08011610 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	4603      	mov	r3, r0
 8011618:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801161a:	4b1c      	ldr	r3, [pc, #112]	; (801168c <SD_initialize+0x7c>)
 801161c:	2201      	movs	r2, #1
 801161e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8011620:	f000 fa18 	bl	8011a54 <osKernelGetState>
 8011624:	4603      	mov	r3, r0
 8011626:	2b02      	cmp	r3, #2
 8011628:	d129      	bne.n	801167e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801162a:	f7ff ff01 	bl	8011430 <BSP_SD_Init>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d107      	bne.n	8011644 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8011634:	79fb      	ldrb	r3, [r7, #7]
 8011636:	4618      	mov	r0, r3
 8011638:	f7ff ffcc 	bl	80115d4 <SD_CheckStatus>
 801163c:	4603      	mov	r3, r0
 801163e:	461a      	mov	r2, r3
 8011640:	4b12      	ldr	r3, [pc, #72]	; (801168c <SD_initialize+0x7c>)
 8011642:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011644:	4b11      	ldr	r3, [pc, #68]	; (801168c <SD_initialize+0x7c>)
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	b2db      	uxtb	r3, r3
 801164a:	2b01      	cmp	r3, #1
 801164c:	d017      	beq.n	801167e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801164e:	4b10      	ldr	r3, [pc, #64]	; (8011690 <SD_initialize+0x80>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d107      	bne.n	8011666 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8011656:	2200      	movs	r2, #0
 8011658:	2102      	movs	r1, #2
 801165a:	200a      	movs	r0, #10
 801165c:	f000 fc24 	bl	8011ea8 <osMessageQueueNew>
 8011660:	4603      	mov	r3, r0
 8011662:	4a0b      	ldr	r2, [pc, #44]	; (8011690 <SD_initialize+0x80>)
 8011664:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8011666:	4b0a      	ldr	r3, [pc, #40]	; (8011690 <SD_initialize+0x80>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d107      	bne.n	801167e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801166e:	4b07      	ldr	r3, [pc, #28]	; (801168c <SD_initialize+0x7c>)
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	b2db      	uxtb	r3, r3
 8011674:	f043 0301 	orr.w	r3, r3, #1
 8011678:	b2da      	uxtb	r2, r3
 801167a:	4b04      	ldr	r3, [pc, #16]	; (801168c <SD_initialize+0x7c>)
 801167c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801167e:	4b03      	ldr	r3, [pc, #12]	; (801168c <SD_initialize+0x7c>)
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	b2db      	uxtb	r3, r3
}
 8011684:	4618      	mov	r0, r3
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	2000000d 	.word	0x2000000d
 8011690:	20000ad0 	.word	0x20000ad0

08011694 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	4603      	mov	r3, r0
 801169c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801169e:	79fb      	ldrb	r3, [r7, #7]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7ff ff97 	bl	80115d4 <SD_CheckStatus>
 80116a6:	4603      	mov	r3, r0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b088      	sub	sp, #32
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60b9      	str	r1, [r7, #8]
 80116b8:	607a      	str	r2, [r7, #4]
 80116ba:	603b      	str	r3, [r7, #0]
 80116bc:	4603      	mov	r3, r0
 80116be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80116c0:	2301      	movs	r3, #1
 80116c2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80116c4:	f247 5030 	movw	r0, #30000	; 0x7530
 80116c8:	f7ff ff66 	bl	8011598 <SD_CheckStatusWithTimeout>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	da01      	bge.n	80116d6 <SD_read+0x26>
  {
    return res;
 80116d2:	7ffb      	ldrb	r3, [r7, #31]
 80116d4:	e02f      	b.n	8011736 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80116d6:	683a      	ldr	r2, [r7, #0]
 80116d8:	6879      	ldr	r1, [r7, #4]
 80116da:	68b8      	ldr	r0, [r7, #8]
 80116dc:	f7ff fece 	bl	801147c <BSP_SD_ReadBlocks_DMA>
 80116e0:	4603      	mov	r3, r0
 80116e2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80116e4:	7fbb      	ldrb	r3, [r7, #30]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d124      	bne.n	8011734 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80116ea:	4b15      	ldr	r3, [pc, #84]	; (8011740 <SD_read+0x90>)
 80116ec:	6818      	ldr	r0, [r3, #0]
 80116ee:	f107 0112 	add.w	r1, r7, #18
 80116f2:	f247 5330 	movw	r3, #30000	; 0x7530
 80116f6:	2200      	movs	r2, #0
 80116f8:	f000 fcaa 	bl	8012050 <osMessageQueueGet>
 80116fc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80116fe:	69bb      	ldr	r3, [r7, #24]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d117      	bne.n	8011734 <SD_read+0x84>
 8011704:	8a7b      	ldrh	r3, [r7, #18]
 8011706:	2b01      	cmp	r3, #1
 8011708:	d114      	bne.n	8011734 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801170a:	f000 f9eb 	bl	8011ae4 <osKernelGetTickCount>
 801170e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8011710:	e007      	b.n	8011722 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011712:	f7ff fee7 	bl	80114e4 <BSP_SD_GetCardState>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d102      	bne.n	8011722 <SD_read+0x72>
              {
                res = RES_OK;
 801171c:	2300      	movs	r3, #0
 801171e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8011720:	e008      	b.n	8011734 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8011722:	f000 f9df 	bl	8011ae4 <osKernelGetTickCount>
 8011726:	4602      	mov	r2, r0
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011730:	4293      	cmp	r3, r2
 8011732:	d9ee      	bls.n	8011712 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011734:	7ffb      	ldrb	r3, [r7, #31]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3720      	adds	r7, #32
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	20000ad0 	.word	0x20000ad0

08011744 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af00      	add	r7, sp, #0
 801174a:	60b9      	str	r1, [r7, #8]
 801174c:	607a      	str	r2, [r7, #4]
 801174e:	603b      	str	r3, [r7, #0]
 8011750:	4603      	mov	r3, r0
 8011752:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011754:	2301      	movs	r3, #1
 8011756:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011758:	f247 5030 	movw	r0, #30000	; 0x7530
 801175c:	f7ff ff1c 	bl	8011598 <SD_CheckStatusWithTimeout>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	da01      	bge.n	801176a <SD_write+0x26>
  {
    return res;
 8011766:	7ffb      	ldrb	r3, [r7, #31]
 8011768:	e02d      	b.n	80117c6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801176a:	683a      	ldr	r2, [r7, #0]
 801176c:	6879      	ldr	r1, [r7, #4]
 801176e:	68b8      	ldr	r0, [r7, #8]
 8011770:	f7ff fe9e 	bl	80114b0 <BSP_SD_WriteBlocks_DMA>
 8011774:	4603      	mov	r3, r0
 8011776:	2b00      	cmp	r3, #0
 8011778:	d124      	bne.n	80117c4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801177a:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <SD_write+0x8c>)
 801177c:	6818      	ldr	r0, [r3, #0]
 801177e:	f107 0112 	add.w	r1, r7, #18
 8011782:	f247 5330 	movw	r3, #30000	; 0x7530
 8011786:	2200      	movs	r2, #0
 8011788:	f000 fc62 	bl	8012050 <osMessageQueueGet>
 801178c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d117      	bne.n	80117c4 <SD_write+0x80>
 8011794:	8a7b      	ldrh	r3, [r7, #18]
 8011796:	2b02      	cmp	r3, #2
 8011798:	d114      	bne.n	80117c4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801179a:	f000 f9a3 	bl	8011ae4 <osKernelGetTickCount>
 801179e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80117a0:	e007      	b.n	80117b2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80117a2:	f7ff fe9f 	bl	80114e4 <BSP_SD_GetCardState>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d102      	bne.n	80117b2 <SD_write+0x6e>
          {
            res = RES_OK;
 80117ac:	2300      	movs	r3, #0
 80117ae:	77fb      	strb	r3, [r7, #31]
            break;
 80117b0:	e008      	b.n	80117c4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80117b2:	f000 f997 	bl	8011ae4 <osKernelGetTickCount>
 80117b6:	4602      	mov	r2, r0
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d9ee      	bls.n	80117a2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80117c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3720      	adds	r7, #32
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20000ad0 	.word	0x20000ad0

080117d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b08c      	sub	sp, #48	; 0x30
 80117d8:	af00      	add	r7, sp, #0
 80117da:	4603      	mov	r3, r0
 80117dc:	603a      	str	r2, [r7, #0]
 80117de:	71fb      	strb	r3, [r7, #7]
 80117e0:	460b      	mov	r3, r1
 80117e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80117e4:	2301      	movs	r3, #1
 80117e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80117ea:	4b25      	ldr	r3, [pc, #148]	; (8011880 <SD_ioctl+0xac>)
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	f003 0301 	and.w	r3, r3, #1
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d001      	beq.n	80117fc <SD_ioctl+0x28>
 80117f8:	2303      	movs	r3, #3
 80117fa:	e03c      	b.n	8011876 <SD_ioctl+0xa2>

  switch (cmd)
 80117fc:	79bb      	ldrb	r3, [r7, #6]
 80117fe:	2b03      	cmp	r3, #3
 8011800:	d834      	bhi.n	801186c <SD_ioctl+0x98>
 8011802:	a201      	add	r2, pc, #4	; (adr r2, 8011808 <SD_ioctl+0x34>)
 8011804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011808:	08011819 	.word	0x08011819
 801180c:	08011821 	.word	0x08011821
 8011810:	08011839 	.word	0x08011839
 8011814:	08011853 	.word	0x08011853
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011818:	2300      	movs	r3, #0
 801181a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801181e:	e028      	b.n	8011872 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011820:	f107 0308 	add.w	r3, r7, #8
 8011824:	4618      	mov	r0, r3
 8011826:	f7ff fe6d 	bl	8011504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801182a:	6a3a      	ldr	r2, [r7, #32]
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011830:	2300      	movs	r3, #0
 8011832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011836:	e01c      	b.n	8011872 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011838:	f107 0308 	add.w	r3, r7, #8
 801183c:	4618      	mov	r0, r3
 801183e:	f7ff fe61 	bl	8011504 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011844:	b29a      	uxth	r2, r3
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801184a:	2300      	movs	r3, #0
 801184c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011850:	e00f      	b.n	8011872 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011852:	f107 0308 	add.w	r3, r7, #8
 8011856:	4618      	mov	r0, r3
 8011858:	f7ff fe54 	bl	8011504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	0a5a      	lsrs	r2, r3, #9
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011864:	2300      	movs	r3, #0
 8011866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801186a:	e002      	b.n	8011872 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801186c:	2304      	movs	r3, #4
 801186e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011876:	4618      	mov	r0, r3
 8011878:	3730      	adds	r7, #48	; 0x30
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	2000000d 	.word	0x2000000d

08011884 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801188a:	2302      	movs	r3, #2
 801188c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801188e:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <BSP_SD_WriteCpltCallback+0x20>)
 8011890:	6818      	ldr	r0, [r3, #0]
 8011892:	1db9      	adds	r1, r7, #6
 8011894:	2300      	movs	r3, #0
 8011896:	2200      	movs	r2, #0
 8011898:	f000 fb7a 	bl	8011f90 <osMessageQueuePut>
#endif
}
 801189c:	bf00      	nop
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	20000ad0 	.word	0x20000ad0

080118a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80118ae:	2301      	movs	r3, #1
 80118b0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80118b2:	4b05      	ldr	r3, [pc, #20]	; (80118c8 <BSP_SD_ReadCpltCallback+0x20>)
 80118b4:	6818      	ldr	r0, [r3, #0]
 80118b6:	1db9      	adds	r1, r7, #6
 80118b8:	2300      	movs	r3, #0
 80118ba:	2200      	movs	r2, #0
 80118bc:	f000 fb68 	bl	8011f90 <osMessageQueuePut>
#endif
}
 80118c0:	bf00      	nop
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20000ad0 	.word	0x20000ad0

080118cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b087      	sub	sp, #28
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	4613      	mov	r3, r2
 80118d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80118da:	2301      	movs	r3, #1
 80118dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80118de:	2300      	movs	r3, #0
 80118e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80118e2:	4b1f      	ldr	r3, [pc, #124]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 80118e4:	7a5b      	ldrb	r3, [r3, #9]
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d131      	bne.n	8011950 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80118ec:	4b1c      	ldr	r3, [pc, #112]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 80118ee:	7a5b      	ldrb	r3, [r3, #9]
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	461a      	mov	r2, r3
 80118f4:	4b1a      	ldr	r3, [pc, #104]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 80118f6:	2100      	movs	r1, #0
 80118f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80118fa:	4b19      	ldr	r3, [pc, #100]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 80118fc:	7a5b      	ldrb	r3, [r3, #9]
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	4a17      	ldr	r2, [pc, #92]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 8011902:	009b      	lsls	r3, r3, #2
 8011904:	4413      	add	r3, r2
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801190a:	4b15      	ldr	r3, [pc, #84]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 801190c:	7a5b      	ldrb	r3, [r3, #9]
 801190e:	b2db      	uxtb	r3, r3
 8011910:	461a      	mov	r2, r3
 8011912:	4b13      	ldr	r3, [pc, #76]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 8011914:	4413      	add	r3, r2
 8011916:	79fa      	ldrb	r2, [r7, #7]
 8011918:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801191a:	4b11      	ldr	r3, [pc, #68]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 801191c:	7a5b      	ldrb	r3, [r3, #9]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	1c5a      	adds	r2, r3, #1
 8011922:	b2d1      	uxtb	r1, r2
 8011924:	4a0e      	ldr	r2, [pc, #56]	; (8011960 <FATFS_LinkDriverEx+0x94>)
 8011926:	7251      	strb	r1, [r2, #9]
 8011928:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801192a:	7dbb      	ldrb	r3, [r7, #22]
 801192c:	3330      	adds	r3, #48	; 0x30
 801192e:	b2da      	uxtb	r2, r3
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	3301      	adds	r3, #1
 8011938:	223a      	movs	r2, #58	; 0x3a
 801193a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	3302      	adds	r3, #2
 8011940:	222f      	movs	r2, #47	; 0x2f
 8011942:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	3303      	adds	r3, #3
 8011948:	2200      	movs	r2, #0
 801194a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801194c:	2300      	movs	r3, #0
 801194e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011950:	7dfb      	ldrb	r3, [r7, #23]
}
 8011952:	4618      	mov	r0, r3
 8011954:	371c      	adds	r7, #28
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	20000ad4 	.word	0x20000ad4

08011964 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801196e:	2200      	movs	r2, #0
 8011970:	6839      	ldr	r1, [r7, #0]
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7ff ffaa 	bl	80118cc <FATFS_LinkDriverEx>
 8011978:	4603      	mov	r3, r0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
	...

08011984 <__NVIC_SetPriority>:
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	4603      	mov	r3, r0
 801198c:	6039      	str	r1, [r7, #0]
 801198e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011994:	2b00      	cmp	r3, #0
 8011996:	db0a      	blt.n	80119ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	b2da      	uxtb	r2, r3
 801199c:	490c      	ldr	r1, [pc, #48]	; (80119d0 <__NVIC_SetPriority+0x4c>)
 801199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119a2:	0112      	lsls	r2, r2, #4
 80119a4:	b2d2      	uxtb	r2, r2
 80119a6:	440b      	add	r3, r1
 80119a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80119ac:	e00a      	b.n	80119c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	b2da      	uxtb	r2, r3
 80119b2:	4908      	ldr	r1, [pc, #32]	; (80119d4 <__NVIC_SetPriority+0x50>)
 80119b4:	88fb      	ldrh	r3, [r7, #6]
 80119b6:	f003 030f 	and.w	r3, r3, #15
 80119ba:	3b04      	subs	r3, #4
 80119bc:	0112      	lsls	r2, r2, #4
 80119be:	b2d2      	uxtb	r2, r2
 80119c0:	440b      	add	r3, r1
 80119c2:	761a      	strb	r2, [r3, #24]
}
 80119c4:	bf00      	nop
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr
 80119d0:	e000e100 	.word	0xe000e100
 80119d4:	e000ed00 	.word	0xe000ed00

080119d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80119d8:	b580      	push	{r7, lr}
 80119da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80119dc:	4b05      	ldr	r3, [pc, #20]	; (80119f4 <SysTick_Handler+0x1c>)
 80119de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80119e0:	f002 fae4 	bl	8013fac <xTaskGetSchedulerState>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d001      	beq.n	80119ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80119ea:	f003 f9cd 	bl	8014d88 <xPortSysTickHandler>
  }
}
 80119ee:	bf00      	nop
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	e000e010 	.word	0xe000e010

080119f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80119f8:	b580      	push	{r7, lr}
 80119fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80119fc:	2100      	movs	r1, #0
 80119fe:	f06f 0004 	mvn.w	r0, #4
 8011a02:	f7ff ffbf 	bl	8011984 <__NVIC_SetPriority>
#endif
}
 8011a06:	bf00      	nop
 8011a08:	bd80      	pop	{r7, pc}
	...

08011a0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a12:	f3ef 8305 	mrs	r3, IPSR
 8011a16:	603b      	str	r3, [r7, #0]
  return(result);
 8011a18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d003      	beq.n	8011a26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011a1e:	f06f 0305 	mvn.w	r3, #5
 8011a22:	607b      	str	r3, [r7, #4]
 8011a24:	e00c      	b.n	8011a40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011a26:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <osKernelInitialize+0x44>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d105      	bne.n	8011a3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011a2e:	4b08      	ldr	r3, [pc, #32]	; (8011a50 <osKernelInitialize+0x44>)
 8011a30:	2201      	movs	r2, #1
 8011a32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	607b      	str	r3, [r7, #4]
 8011a38:	e002      	b.n	8011a40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011a40:	687b      	ldr	r3, [r7, #4]
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	370c      	adds	r7, #12
 8011a46:	46bd      	mov	sp, r7
 8011a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop
 8011a50:	20000ae0 	.word	0x20000ae0

08011a54 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011a5a:	f002 faa7 	bl	8013fac <xTaskGetSchedulerState>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d004      	beq.n	8011a6e <osKernelGetState+0x1a>
 8011a64:	2b02      	cmp	r3, #2
 8011a66:	d105      	bne.n	8011a74 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011a68:	2302      	movs	r3, #2
 8011a6a:	607b      	str	r3, [r7, #4]
      break;
 8011a6c:	e00c      	b.n	8011a88 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011a6e:	2303      	movs	r3, #3
 8011a70:	607b      	str	r3, [r7, #4]
      break;
 8011a72:	e009      	b.n	8011a88 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011a74:	4b07      	ldr	r3, [pc, #28]	; (8011a94 <osKernelGetState+0x40>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b01      	cmp	r3, #1
 8011a7a:	d102      	bne.n	8011a82 <osKernelGetState+0x2e>
        state = osKernelReady;
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011a80:	e001      	b.n	8011a86 <osKernelGetState+0x32>
        state = osKernelInactive;
 8011a82:	2300      	movs	r3, #0
 8011a84:	607b      	str	r3, [r7, #4]
      break;
 8011a86:	bf00      	nop
  }

  return (state);
 8011a88:	687b      	ldr	r3, [r7, #4]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	20000ae0 	.word	0x20000ae0

08011a98 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a9e:	f3ef 8305 	mrs	r3, IPSR
 8011aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8011aa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d003      	beq.n	8011ab2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011aaa:	f06f 0305 	mvn.w	r3, #5
 8011aae:	607b      	str	r3, [r7, #4]
 8011ab0:	e010      	b.n	8011ad4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011ab2:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <osKernelStart+0x48>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d109      	bne.n	8011ace <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011aba:	f7ff ff9d 	bl	80119f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011abe:	4b08      	ldr	r3, [pc, #32]	; (8011ae0 <osKernelStart+0x48>)
 8011ac0:	2202      	movs	r2, #2
 8011ac2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011ac4:	f001 fe04 	bl	80136d0 <vTaskStartScheduler>
      stat = osOK;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	607b      	str	r3, [r7, #4]
 8011acc:	e002      	b.n	8011ad4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011ace:	f04f 33ff 	mov.w	r3, #4294967295
 8011ad2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011ad4:	687b      	ldr	r3, [r7, #4]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	20000ae0 	.word	0x20000ae0

08011ae4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011aea:	f3ef 8305 	mrs	r3, IPSR
 8011aee:	603b      	str	r3, [r7, #0]
  return(result);
 8011af0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d003      	beq.n	8011afe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8011af6:	f001 ff17 	bl	8013928 <xTaskGetTickCountFromISR>
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	e002      	b.n	8011b04 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8011afe:	f001 ff03 	bl	8013908 <xTaskGetTickCount>
 8011b02:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8011b04:	687b      	ldr	r3, [r7, #4]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b08e      	sub	sp, #56	; 0x38
 8011b12:	af04      	add	r7, sp, #16
 8011b14:	60f8      	str	r0, [r7, #12]
 8011b16:	60b9      	str	r1, [r7, #8]
 8011b18:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b1e:	f3ef 8305 	mrs	r3, IPSR
 8011b22:	617b      	str	r3, [r7, #20]
  return(result);
 8011b24:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d17e      	bne.n	8011c28 <osThreadNew+0x11a>
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d07b      	beq.n	8011c28 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011b30:	2380      	movs	r3, #128	; 0x80
 8011b32:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011b34:	2318      	movs	r3, #24
 8011b36:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d045      	beq.n	8011bd4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d002      	beq.n	8011b56 <osThreadNew+0x48>
        name = attr->name;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d002      	beq.n	8011b64 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	699b      	ldr	r3, [r3, #24]
 8011b62:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d008      	beq.n	8011b7c <osThreadNew+0x6e>
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	2b38      	cmp	r3, #56	; 0x38
 8011b6e:	d805      	bhi.n	8011b7c <osThreadNew+0x6e>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	f003 0301 	and.w	r3, r3, #1
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d001      	beq.n	8011b80 <osThreadNew+0x72>
        return (NULL);
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	e054      	b.n	8011c2a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	695b      	ldr	r3, [r3, #20]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d003      	beq.n	8011b90 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	695b      	ldr	r3, [r3, #20]
 8011b8c:	089b      	lsrs	r3, r3, #2
 8011b8e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d00e      	beq.n	8011bb6 <osThreadNew+0xa8>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	2bbb      	cmp	r3, #187	; 0xbb
 8011b9e:	d90a      	bls.n	8011bb6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d006      	beq.n	8011bb6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	695b      	ldr	r3, [r3, #20]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d002      	beq.n	8011bb6 <osThreadNew+0xa8>
        mem = 1;
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	61bb      	str	r3, [r7, #24]
 8011bb4:	e010      	b.n	8011bd8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	689b      	ldr	r3, [r3, #8]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d10c      	bne.n	8011bd8 <osThreadNew+0xca>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d108      	bne.n	8011bd8 <osThreadNew+0xca>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	691b      	ldr	r3, [r3, #16]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d104      	bne.n	8011bd8 <osThreadNew+0xca>
          mem = 0;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	61bb      	str	r3, [r7, #24]
 8011bd2:	e001      	b.n	8011bd8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d110      	bne.n	8011c00 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011be6:	9202      	str	r2, [sp, #8]
 8011be8:	9301      	str	r3, [sp, #4]
 8011bea:	69fb      	ldr	r3, [r7, #28]
 8011bec:	9300      	str	r3, [sp, #0]
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	6a3a      	ldr	r2, [r7, #32]
 8011bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f001 fb7f 	bl	80132f8 <xTaskCreateStatic>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	613b      	str	r3, [r7, #16]
 8011bfe:	e013      	b.n	8011c28 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d110      	bne.n	8011c28 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011c06:	6a3b      	ldr	r3, [r7, #32]
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	f107 0310 	add.w	r3, r7, #16
 8011c0e:	9301      	str	r3, [sp, #4]
 8011c10:	69fb      	ldr	r3, [r7, #28]
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f001 fbca 	bl	80133b2 <xTaskCreate>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d001      	beq.n	8011c28 <osThreadNew+0x11a>
            hTask = NULL;
 8011c24:	2300      	movs	r3, #0
 8011c26:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011c28:	693b      	ldr	r3, [r7, #16]
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3728      	adds	r7, #40	; 0x28
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011c32:	b580      	push	{r7, lr}
 8011c34:	b084      	sub	sp, #16
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c3a:	f3ef 8305 	mrs	r3, IPSR
 8011c3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d003      	beq.n	8011c4e <osDelay+0x1c>
    stat = osErrorISR;
 8011c46:	f06f 0305 	mvn.w	r3, #5
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	e007      	b.n	8011c5e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <osDelay+0x2c>
      vTaskDelay(ticks);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f001 fd05 	bl	8013668 <vTaskDelay>
    }
  }

  return (stat);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3710      	adds	r7, #16
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}

08011c68 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b08a      	sub	sp, #40	; 0x28
 8011c6c:	af02      	add	r7, sp, #8
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011c74:	2300      	movs	r3, #0
 8011c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c78:	f3ef 8305 	mrs	r3, IPSR
 8011c7c:	613b      	str	r3, [r7, #16]
  return(result);
 8011c7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d175      	bne.n	8011d70 <osSemaphoreNew+0x108>
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d072      	beq.n	8011d70 <osSemaphoreNew+0x108>
 8011c8a:	68ba      	ldr	r2, [r7, #8]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d86e      	bhi.n	8011d70 <osSemaphoreNew+0x108>
    mem = -1;
 8011c92:	f04f 33ff 	mov.w	r3, #4294967295
 8011c96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d015      	beq.n	8011cca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	689b      	ldr	r3, [r3, #8]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d006      	beq.n	8011cb4 <osSemaphoreNew+0x4c>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	2b4f      	cmp	r3, #79	; 0x4f
 8011cac:	d902      	bls.n	8011cb4 <osSemaphoreNew+0x4c>
        mem = 1;
 8011cae:	2301      	movs	r3, #1
 8011cb0:	61bb      	str	r3, [r7, #24]
 8011cb2:	e00c      	b.n	8011cce <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d108      	bne.n	8011cce <osSemaphoreNew+0x66>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d104      	bne.n	8011cce <osSemaphoreNew+0x66>
          mem = 0;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	61bb      	str	r3, [r7, #24]
 8011cc8:	e001      	b.n	8011cce <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011cce:	69bb      	ldr	r3, [r7, #24]
 8011cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cd4:	d04c      	beq.n	8011d70 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d128      	bne.n	8011d2e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d10a      	bne.n	8011cf8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	2203      	movs	r2, #3
 8011ce8:	9200      	str	r2, [sp, #0]
 8011cea:	2200      	movs	r2, #0
 8011cec:	2100      	movs	r1, #0
 8011cee:	2001      	movs	r0, #1
 8011cf0:	f000 fb5c 	bl	80123ac <xQueueGenericCreateStatic>
 8011cf4:	61f8      	str	r0, [r7, #28]
 8011cf6:	e005      	b.n	8011d04 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011cf8:	2203      	movs	r2, #3
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	2001      	movs	r0, #1
 8011cfe:	f000 fbcd 	bl	801249c <xQueueGenericCreate>
 8011d02:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d022      	beq.n	8011d50 <osSemaphoreNew+0xe8>
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d01f      	beq.n	8011d50 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011d10:	2300      	movs	r3, #0
 8011d12:	2200      	movs	r2, #0
 8011d14:	2100      	movs	r1, #0
 8011d16:	69f8      	ldr	r0, [r7, #28]
 8011d18:	f000 fc88 	bl	801262c <xQueueGenericSend>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d016      	beq.n	8011d50 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011d22:	69f8      	ldr	r0, [r7, #28]
 8011d24:	f001 f914 	bl	8012f50 <vQueueDelete>
            hSemaphore = NULL;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	61fb      	str	r3, [r7, #28]
 8011d2c:	e010      	b.n	8011d50 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d108      	bne.n	8011d46 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	68b9      	ldr	r1, [r7, #8]
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f000 fc0a 	bl	8012556 <xQueueCreateCountingSemaphoreStatic>
 8011d42:	61f8      	str	r0, [r7, #28]
 8011d44:	e004      	b.n	8011d50 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011d46:	68b9      	ldr	r1, [r7, #8]
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	f000 fc3b 	bl	80125c4 <xQueueCreateCountingSemaphore>
 8011d4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00c      	beq.n	8011d70 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d003      	beq.n	8011d64 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	617b      	str	r3, [r7, #20]
 8011d62:	e001      	b.n	8011d68 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011d68:	6979      	ldr	r1, [r7, #20]
 8011d6a:	69f8      	ldr	r0, [r7, #28]
 8011d6c:	f001 fa3c 	bl	80131e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011d70:	69fb      	ldr	r3, [r7, #28]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3720      	adds	r7, #32
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
	...

08011d7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d103      	bne.n	8011d9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011d94:	f06f 0303 	mvn.w	r3, #3
 8011d98:	617b      	str	r3, [r7, #20]
 8011d9a:	e039      	b.n	8011e10 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d9c:	f3ef 8305 	mrs	r3, IPSR
 8011da0:	60fb      	str	r3, [r7, #12]
  return(result);
 8011da2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d022      	beq.n	8011dee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d003      	beq.n	8011db6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011dae:	f06f 0303 	mvn.w	r3, #3
 8011db2:	617b      	str	r3, [r7, #20]
 8011db4:	e02c      	b.n	8011e10 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011db6:	2300      	movs	r3, #0
 8011db8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011dba:	f107 0308 	add.w	r3, r7, #8
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	6938      	ldr	r0, [r7, #16]
 8011dc4:	f001 f844 	bl	8012e50 <xQueueReceiveFromISR>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d003      	beq.n	8011dd6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011dce:	f06f 0302 	mvn.w	r3, #2
 8011dd2:	617b      	str	r3, [r7, #20]
 8011dd4:	e01c      	b.n	8011e10 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d019      	beq.n	8011e10 <osSemaphoreAcquire+0x94>
 8011ddc:	4b0f      	ldr	r3, [pc, #60]	; (8011e1c <osSemaphoreAcquire+0xa0>)
 8011dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011de2:	601a      	str	r2, [r3, #0]
 8011de4:	f3bf 8f4f 	dsb	sy
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	e010      	b.n	8011e10 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	6938      	ldr	r0, [r7, #16]
 8011df2:	f000 ff21 	bl	8012c38 <xQueueSemaphoreTake>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d009      	beq.n	8011e10 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d003      	beq.n	8011e0a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011e02:	f06f 0301 	mvn.w	r3, #1
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e002      	b.n	8011e10 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011e0a:	f06f 0302 	mvn.w	r3, #2
 8011e0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011e10:	697b      	ldr	r3, [r7, #20]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3718      	adds	r7, #24
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	e000ed04 	.word	0xe000ed04

08011e20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b086      	sub	sp, #24
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d103      	bne.n	8011e3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011e36:	f06f 0303 	mvn.w	r3, #3
 8011e3a:	617b      	str	r3, [r7, #20]
 8011e3c:	e02c      	b.n	8011e98 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e3e:	f3ef 8305 	mrs	r3, IPSR
 8011e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d01a      	beq.n	8011e80 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e4e:	f107 0308 	add.w	r3, r7, #8
 8011e52:	4619      	mov	r1, r3
 8011e54:	6938      	ldr	r0, [r7, #16]
 8011e56:	f000 fd82 	bl	801295e <xQueueGiveFromISR>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d003      	beq.n	8011e68 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011e60:	f06f 0302 	mvn.w	r3, #2
 8011e64:	617b      	str	r3, [r7, #20]
 8011e66:	e017      	b.n	8011e98 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d014      	beq.n	8011e98 <osSemaphoreRelease+0x78>
 8011e6e:	4b0d      	ldr	r3, [pc, #52]	; (8011ea4 <osSemaphoreRelease+0x84>)
 8011e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e74:	601a      	str	r2, [r3, #0]
 8011e76:	f3bf 8f4f 	dsb	sy
 8011e7a:	f3bf 8f6f 	isb	sy
 8011e7e:	e00b      	b.n	8011e98 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011e80:	2300      	movs	r3, #0
 8011e82:	2200      	movs	r2, #0
 8011e84:	2100      	movs	r1, #0
 8011e86:	6938      	ldr	r0, [r7, #16]
 8011e88:	f000 fbd0 	bl	801262c <xQueueGenericSend>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d002      	beq.n	8011e98 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011e92:	f06f 0302 	mvn.w	r3, #2
 8011e96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011e98:	697b      	ldr	r3, [r7, #20]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3718      	adds	r7, #24
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	e000ed04 	.word	0xe000ed04

08011ea8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b08a      	sub	sp, #40	; 0x28
 8011eac:	af02      	add	r7, sp, #8
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011eb8:	f3ef 8305 	mrs	r3, IPSR
 8011ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8011ebe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d15f      	bne.n	8011f84 <osMessageQueueNew+0xdc>
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d05c      	beq.n	8011f84 <osMessageQueueNew+0xdc>
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d059      	beq.n	8011f84 <osMessageQueueNew+0xdc>
    mem = -1;
 8011ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d029      	beq.n	8011f30 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d012      	beq.n	8011f0a <osMessageQueueNew+0x62>
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	2b4f      	cmp	r3, #79	; 0x4f
 8011eea:	d90e      	bls.n	8011f0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d00a      	beq.n	8011f0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	695a      	ldr	r2, [r3, #20]
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	68b9      	ldr	r1, [r7, #8]
 8011efc:	fb01 f303 	mul.w	r3, r1, r3
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d302      	bcc.n	8011f0a <osMessageQueueNew+0x62>
        mem = 1;
 8011f04:	2301      	movs	r3, #1
 8011f06:	61bb      	str	r3, [r7, #24]
 8011f08:	e014      	b.n	8011f34 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	689b      	ldr	r3, [r3, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d110      	bne.n	8011f34 <osMessageQueueNew+0x8c>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d10c      	bne.n	8011f34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d108      	bne.n	8011f34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	695b      	ldr	r3, [r3, #20]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d104      	bne.n	8011f34 <osMessageQueueNew+0x8c>
          mem = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	61bb      	str	r3, [r7, #24]
 8011f2e:	e001      	b.n	8011f34 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011f30:	2300      	movs	r3, #0
 8011f32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d10b      	bne.n	8011f52 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	691a      	ldr	r2, [r3, #16]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	689b      	ldr	r3, [r3, #8]
 8011f42:	2100      	movs	r1, #0
 8011f44:	9100      	str	r1, [sp, #0]
 8011f46:	68b9      	ldr	r1, [r7, #8]
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f000 fa2f 	bl	80123ac <xQueueGenericCreateStatic>
 8011f4e:	61f8      	str	r0, [r7, #28]
 8011f50:	e008      	b.n	8011f64 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d105      	bne.n	8011f64 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011f58:	2200      	movs	r2, #0
 8011f5a:	68b9      	ldr	r1, [r7, #8]
 8011f5c:	68f8      	ldr	r0, [r7, #12]
 8011f5e:	f000 fa9d 	bl	801249c <xQueueGenericCreate>
 8011f62:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00c      	beq.n	8011f84 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d003      	beq.n	8011f78 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	617b      	str	r3, [r7, #20]
 8011f76:	e001      	b.n	8011f7c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011f7c:	6979      	ldr	r1, [r7, #20]
 8011f7e:	69f8      	ldr	r0, [r7, #28]
 8011f80:	f001 f932 	bl	80131e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011f84:	69fb      	ldr	r3, [r7, #28]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3720      	adds	r7, #32
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
	...

08011f90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b088      	sub	sp, #32
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60f8      	str	r0, [r7, #12]
 8011f98:	60b9      	str	r1, [r7, #8]
 8011f9a:	603b      	str	r3, [r7, #0]
 8011f9c:	4613      	mov	r3, r2
 8011f9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011fa8:	f3ef 8305 	mrs	r3, IPSR
 8011fac:	617b      	str	r3, [r7, #20]
  return(result);
 8011fae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d028      	beq.n	8012006 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d005      	beq.n	8011fc6 <osMessageQueuePut+0x36>
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d002      	beq.n	8011fc6 <osMessageQueuePut+0x36>
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d003      	beq.n	8011fce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011fc6:	f06f 0303 	mvn.w	r3, #3
 8011fca:	61fb      	str	r3, [r7, #28]
 8011fcc:	e038      	b.n	8012040 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011fd2:	f107 0210 	add.w	r2, r7, #16
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	68b9      	ldr	r1, [r7, #8]
 8011fda:	69b8      	ldr	r0, [r7, #24]
 8011fdc:	f000 fc24 	bl	8012828 <xQueueGenericSendFromISR>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	d003      	beq.n	8011fee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011fe6:	f06f 0302 	mvn.w	r3, #2
 8011fea:	61fb      	str	r3, [r7, #28]
 8011fec:	e028      	b.n	8012040 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d025      	beq.n	8012040 <osMessageQueuePut+0xb0>
 8011ff4:	4b15      	ldr	r3, [pc, #84]	; (801204c <osMessageQueuePut+0xbc>)
 8011ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	f3bf 8f4f 	dsb	sy
 8012000:	f3bf 8f6f 	isb	sy
 8012004:	e01c      	b.n	8012040 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d002      	beq.n	8012012 <osMessageQueuePut+0x82>
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d103      	bne.n	801201a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012012:	f06f 0303 	mvn.w	r3, #3
 8012016:	61fb      	str	r3, [r7, #28]
 8012018:	e012      	b.n	8012040 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801201a:	2300      	movs	r3, #0
 801201c:	683a      	ldr	r2, [r7, #0]
 801201e:	68b9      	ldr	r1, [r7, #8]
 8012020:	69b8      	ldr	r0, [r7, #24]
 8012022:	f000 fb03 	bl	801262c <xQueueGenericSend>
 8012026:	4603      	mov	r3, r0
 8012028:	2b01      	cmp	r3, #1
 801202a:	d009      	beq.n	8012040 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d003      	beq.n	801203a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012032:	f06f 0301 	mvn.w	r3, #1
 8012036:	61fb      	str	r3, [r7, #28]
 8012038:	e002      	b.n	8012040 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801203a:	f06f 0302 	mvn.w	r3, #2
 801203e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012040:	69fb      	ldr	r3, [r7, #28]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3720      	adds	r7, #32
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	e000ed04 	.word	0xe000ed04

08012050 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012050:	b580      	push	{r7, lr}
 8012052:	b088      	sub	sp, #32
 8012054:	af00      	add	r7, sp, #0
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
 801205c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012062:	2300      	movs	r3, #0
 8012064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012066:	f3ef 8305 	mrs	r3, IPSR
 801206a:	617b      	str	r3, [r7, #20]
  return(result);
 801206c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801206e:	2b00      	cmp	r3, #0
 8012070:	d028      	beq.n	80120c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d005      	beq.n	8012084 <osMessageQueueGet+0x34>
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d002      	beq.n	8012084 <osMessageQueueGet+0x34>
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d003      	beq.n	801208c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012084:	f06f 0303 	mvn.w	r3, #3
 8012088:	61fb      	str	r3, [r7, #28]
 801208a:	e037      	b.n	80120fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801208c:	2300      	movs	r3, #0
 801208e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012090:	f107 0310 	add.w	r3, r7, #16
 8012094:	461a      	mov	r2, r3
 8012096:	68b9      	ldr	r1, [r7, #8]
 8012098:	69b8      	ldr	r0, [r7, #24]
 801209a:	f000 fed9 	bl	8012e50 <xQueueReceiveFromISR>
 801209e:	4603      	mov	r3, r0
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d003      	beq.n	80120ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80120a4:	f06f 0302 	mvn.w	r3, #2
 80120a8:	61fb      	str	r3, [r7, #28]
 80120aa:	e027      	b.n	80120fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d024      	beq.n	80120fc <osMessageQueueGet+0xac>
 80120b2:	4b15      	ldr	r3, [pc, #84]	; (8012108 <osMessageQueueGet+0xb8>)
 80120b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120b8:	601a      	str	r2, [r3, #0]
 80120ba:	f3bf 8f4f 	dsb	sy
 80120be:	f3bf 8f6f 	isb	sy
 80120c2:	e01b      	b.n	80120fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d002      	beq.n	80120d0 <osMessageQueueGet+0x80>
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d103      	bne.n	80120d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80120d0:	f06f 0303 	mvn.w	r3, #3
 80120d4:	61fb      	str	r3, [r7, #28]
 80120d6:	e011      	b.n	80120fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80120d8:	683a      	ldr	r2, [r7, #0]
 80120da:	68b9      	ldr	r1, [r7, #8]
 80120dc:	69b8      	ldr	r0, [r7, #24]
 80120de:	f000 fccb 	bl	8012a78 <xQueueReceive>
 80120e2:	4603      	mov	r3, r0
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d009      	beq.n	80120fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d003      	beq.n	80120f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80120ee:	f06f 0301 	mvn.w	r3, #1
 80120f2:	61fb      	str	r3, [r7, #28]
 80120f4:	e002      	b.n	80120fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80120f6:	f06f 0302 	mvn.w	r3, #2
 80120fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80120fc:	69fb      	ldr	r3, [r7, #28]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3720      	adds	r7, #32
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	e000ed04 	.word	0xe000ed04

0801210c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801210c:	b480      	push	{r7}
 801210e:	b085      	sub	sp, #20
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	4a07      	ldr	r2, [pc, #28]	; (8012138 <vApplicationGetIdleTaskMemory+0x2c>)
 801211c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	4a06      	ldr	r2, [pc, #24]	; (801213c <vApplicationGetIdleTaskMemory+0x30>)
 8012122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2280      	movs	r2, #128	; 0x80
 8012128:	601a      	str	r2, [r3, #0]
}
 801212a:	bf00      	nop
 801212c:	3714      	adds	r7, #20
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop
 8012138:	20000ae4 	.word	0x20000ae4
 801213c:	20000ba0 	.word	0x20000ba0

08012140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012140:	b480      	push	{r7}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	4a07      	ldr	r2, [pc, #28]	; (801216c <vApplicationGetTimerTaskMemory+0x2c>)
 8012150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	4a06      	ldr	r2, [pc, #24]	; (8012170 <vApplicationGetTimerTaskMemory+0x30>)
 8012156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801215e:	601a      	str	r2, [r3, #0]
}
 8012160:	bf00      	nop
 8012162:	3714      	adds	r7, #20
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr
 801216c:	20000da0 	.word	0x20000da0
 8012170:	20000e5c 	.word	0x20000e5c

08012174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f103 0208 	add.w	r2, r3, #8
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f04f 32ff 	mov.w	r2, #4294967295
 801218c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f103 0208 	add.w	r2, r3, #8
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f103 0208 	add.w	r2, r3, #8
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2200      	movs	r2, #0
 80121a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80121a8:	bf00      	nop
 80121aa:	370c      	adds	r7, #12
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr

080121b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80121b4:	b480      	push	{r7}
 80121b6:	b083      	sub	sp, #12
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2200      	movs	r2, #0
 80121c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80121c2:	bf00      	nop
 80121c4:	370c      	adds	r7, #12
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr

080121ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80121ce:	b480      	push	{r7}
 80121d0:	b085      	sub	sp, #20
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
 80121d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	68fa      	ldr	r2, [r7, #12]
 80121e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	689a      	ldr	r2, [r3, #8]
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	683a      	ldr	r2, [r7, #0]
 80121f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	683a      	ldr	r2, [r7, #0]
 80121f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	1c5a      	adds	r2, r3, #1
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	601a      	str	r2, [r3, #0]
}
 801220a:	bf00      	nop
 801220c:	3714      	adds	r7, #20
 801220e:	46bd      	mov	sp, r7
 8012210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012214:	4770      	bx	lr

08012216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012216:	b480      	push	{r7}
 8012218:	b085      	sub	sp, #20
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
 801221e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222c:	d103      	bne.n	8012236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	691b      	ldr	r3, [r3, #16]
 8012232:	60fb      	str	r3, [r7, #12]
 8012234:	e00c      	b.n	8012250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	3308      	adds	r3, #8
 801223a:	60fb      	str	r3, [r7, #12]
 801223c:	e002      	b.n	8012244 <vListInsert+0x2e>
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	60fb      	str	r3, [r7, #12]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	68ba      	ldr	r2, [r7, #8]
 801224c:	429a      	cmp	r2, r3
 801224e:	d2f6      	bcs.n	801223e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	685a      	ldr	r2, [r3, #4]
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	683a      	ldr	r2, [r7, #0]
 801225e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	68fa      	ldr	r2, [r7, #12]
 8012264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	683a      	ldr	r2, [r7, #0]
 801226a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	1c5a      	adds	r2, r3, #1
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	601a      	str	r2, [r3, #0]
}
 801227c:	bf00      	nop
 801227e:	3714      	adds	r7, #20
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012288:	b480      	push	{r7}
 801228a:	b085      	sub	sp, #20
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	691b      	ldr	r3, [r3, #16]
 8012294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	6892      	ldr	r2, [r2, #8]
 801229e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	689b      	ldr	r3, [r3, #8]
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	6852      	ldr	r2, [r2, #4]
 80122a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d103      	bne.n	80122bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	689a      	ldr	r2, [r3, #8]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	1e5a      	subs	r2, r3, #1
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3714      	adds	r7, #20
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr

080122dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b084      	sub	sp, #16
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10a      	bne.n	8012306 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012302:	bf00      	nop
 8012304:	e7fe      	b.n	8012304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012306:	f002 fcad 	bl	8014c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012312:	68f9      	ldr	r1, [r7, #12]
 8012314:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012316:	fb01 f303 	mul.w	r3, r1, r3
 801231a:	441a      	add	r2, r3
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2200      	movs	r2, #0
 8012324:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012336:	3b01      	subs	r3, #1
 8012338:	68f9      	ldr	r1, [r7, #12]
 801233a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801233c:	fb01 f303 	mul.w	r3, r1, r3
 8012340:	441a      	add	r2, r3
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	22ff      	movs	r2, #255	; 0xff
 801234a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	22ff      	movs	r2, #255	; 0xff
 8012352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d114      	bne.n	8012386 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	691b      	ldr	r3, [r3, #16]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d01a      	beq.n	801239a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	3310      	adds	r3, #16
 8012368:	4618      	mov	r0, r3
 801236a:	f001 fc5d 	bl	8013c28 <xTaskRemoveFromEventList>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d012      	beq.n	801239a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012374:	4b0c      	ldr	r3, [pc, #48]	; (80123a8 <xQueueGenericReset+0xcc>)
 8012376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	f3bf 8f4f 	dsb	sy
 8012380:	f3bf 8f6f 	isb	sy
 8012384:	e009      	b.n	801239a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	3310      	adds	r3, #16
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff fef2 	bl	8012174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	3324      	adds	r3, #36	; 0x24
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff feed 	bl	8012174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801239a:	f002 fc93 	bl	8014cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801239e:	2301      	movs	r3, #1
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	e000ed04 	.word	0xe000ed04

080123ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b08e      	sub	sp, #56	; 0x38
 80123b0:	af02      	add	r7, sp, #8
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d10a      	bne.n	80123d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80123c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c4:	f383 8811 	msr	BASEPRI, r3
 80123c8:	f3bf 8f6f 	isb	sy
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80123d2:	bf00      	nop
 80123d4:	e7fe      	b.n	80123d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d10a      	bne.n	80123f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80123dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e0:	f383 8811 	msr	BASEPRI, r3
 80123e4:	f3bf 8f6f 	isb	sy
 80123e8:	f3bf 8f4f 	dsb	sy
 80123ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80123ee:	bf00      	nop
 80123f0:	e7fe      	b.n	80123f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d002      	beq.n	80123fe <xQueueGenericCreateStatic+0x52>
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d001      	beq.n	8012402 <xQueueGenericCreateStatic+0x56>
 80123fe:	2301      	movs	r3, #1
 8012400:	e000      	b.n	8012404 <xQueueGenericCreateStatic+0x58>
 8012402:	2300      	movs	r3, #0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10a      	bne.n	801241e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	623b      	str	r3, [r7, #32]
}
 801241a:	bf00      	nop
 801241c:	e7fe      	b.n	801241c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d102      	bne.n	801242a <xQueueGenericCreateStatic+0x7e>
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d101      	bne.n	801242e <xQueueGenericCreateStatic+0x82>
 801242a:	2301      	movs	r3, #1
 801242c:	e000      	b.n	8012430 <xQueueGenericCreateStatic+0x84>
 801242e:	2300      	movs	r3, #0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d10a      	bne.n	801244a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012438:	f383 8811 	msr	BASEPRI, r3
 801243c:	f3bf 8f6f 	isb	sy
 8012440:	f3bf 8f4f 	dsb	sy
 8012444:	61fb      	str	r3, [r7, #28]
}
 8012446:	bf00      	nop
 8012448:	e7fe      	b.n	8012448 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801244a:	2350      	movs	r3, #80	; 0x50
 801244c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	2b50      	cmp	r3, #80	; 0x50
 8012452:	d00a      	beq.n	801246a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	61bb      	str	r3, [r7, #24]
}
 8012466:	bf00      	nop
 8012468:	e7fe      	b.n	8012468 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801246a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00d      	beq.n	8012492 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012478:	2201      	movs	r2, #1
 801247a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801247e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012484:	9300      	str	r3, [sp, #0]
 8012486:	4613      	mov	r3, r2
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	68b9      	ldr	r1, [r7, #8]
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f000 f83f 	bl	8012510 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012494:	4618      	mov	r0, r3
 8012496:	3730      	adds	r7, #48	; 0x30
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801249c:	b580      	push	{r7, lr}
 801249e:	b08a      	sub	sp, #40	; 0x28
 80124a0:	af02      	add	r7, sp, #8
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	4613      	mov	r3, r2
 80124a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d10a      	bne.n	80124c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80124b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b4:	f383 8811 	msr	BASEPRI, r3
 80124b8:	f3bf 8f6f 	isb	sy
 80124bc:	f3bf 8f4f 	dsb	sy
 80124c0:	613b      	str	r3, [r7, #16]
}
 80124c2:	bf00      	nop
 80124c4:	e7fe      	b.n	80124c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	68ba      	ldr	r2, [r7, #8]
 80124ca:	fb02 f303 	mul.w	r3, r2, r3
 80124ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	3350      	adds	r3, #80	; 0x50
 80124d4:	4618      	mov	r0, r3
 80124d6:	f002 fce7 	bl	8014ea8 <pvPortMalloc>
 80124da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d011      	beq.n	8012506 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	3350      	adds	r3, #80	; 0x50
 80124ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	2200      	movs	r2, #0
 80124f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80124f4:	79fa      	ldrb	r2, [r7, #7]
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	4613      	mov	r3, r2
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	68b9      	ldr	r1, [r7, #8]
 8012500:	68f8      	ldr	r0, [r7, #12]
 8012502:	f000 f805 	bl	8012510 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012506:	69bb      	ldr	r3, [r7, #24]
	}
 8012508:	4618      	mov	r0, r3
 801250a:	3720      	adds	r7, #32
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d103      	bne.n	801252c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	69ba      	ldr	r2, [r7, #24]
 8012528:	601a      	str	r2, [r3, #0]
 801252a:	e002      	b.n	8012532 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	68ba      	ldr	r2, [r7, #8]
 801253c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801253e:	2101      	movs	r1, #1
 8012540:	69b8      	ldr	r0, [r7, #24]
 8012542:	f7ff fecb 	bl	80122dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	78fa      	ldrb	r2, [r7, #3]
 801254a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801254e:	bf00      	nop
 8012550:	3710      	adds	r7, #16
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012556:	b580      	push	{r7, lr}
 8012558:	b08a      	sub	sp, #40	; 0x28
 801255a:	af02      	add	r7, sp, #8
 801255c:	60f8      	str	r0, [r7, #12]
 801255e:	60b9      	str	r1, [r7, #8]
 8012560:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10a      	bne.n	801257e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	61bb      	str	r3, [r7, #24]
}
 801257a:	bf00      	nop
 801257c:	e7fe      	b.n	801257c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801257e:	68ba      	ldr	r2, [r7, #8]
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	429a      	cmp	r2, r3
 8012584:	d90a      	bls.n	801259c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258a:	f383 8811 	msr	BASEPRI, r3
 801258e:	f3bf 8f6f 	isb	sy
 8012592:	f3bf 8f4f 	dsb	sy
 8012596:	617b      	str	r3, [r7, #20]
}
 8012598:	bf00      	nop
 801259a:	e7fe      	b.n	801259a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801259c:	2302      	movs	r3, #2
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2200      	movs	r2, #0
 80125a4:	2100      	movs	r1, #0
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f7ff ff00 	bl	80123ac <xQueueGenericCreateStatic>
 80125ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d002      	beq.n	80125ba <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	68ba      	ldr	r2, [r7, #8]
 80125b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80125ba:	69fb      	ldr	r3, [r7, #28]
	}
 80125bc:	4618      	mov	r0, r3
 80125be:	3720      	adds	r7, #32
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d10a      	bne.n	80125ea <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80125d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d8:	f383 8811 	msr	BASEPRI, r3
 80125dc:	f3bf 8f6f 	isb	sy
 80125e0:	f3bf 8f4f 	dsb	sy
 80125e4:	613b      	str	r3, [r7, #16]
}
 80125e6:	bf00      	nop
 80125e8:	e7fe      	b.n	80125e8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80125ea:	683a      	ldr	r2, [r7, #0]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d90a      	bls.n	8012608 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80125f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f6:	f383 8811 	msr	BASEPRI, r3
 80125fa:	f3bf 8f6f 	isb	sy
 80125fe:	f3bf 8f4f 	dsb	sy
 8012602:	60fb      	str	r3, [r7, #12]
}
 8012604:	bf00      	nop
 8012606:	e7fe      	b.n	8012606 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012608:	2202      	movs	r2, #2
 801260a:	2100      	movs	r1, #0
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7ff ff45 	bl	801249c <xQueueGenericCreate>
 8012612:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d002      	beq.n	8012620 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	683a      	ldr	r2, [r7, #0]
 801261e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012620:	697b      	ldr	r3, [r7, #20]
	}
 8012622:	4618      	mov	r0, r3
 8012624:	3718      	adds	r7, #24
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
	...

0801262c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b08e      	sub	sp, #56	; 0x38
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	607a      	str	r2, [r7, #4]
 8012638:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801263a:	2300      	movs	r3, #0
 801263c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012644:	2b00      	cmp	r3, #0
 8012646:	d10a      	bne.n	801265e <xQueueGenericSend+0x32>
	__asm volatile
 8012648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801264c:	f383 8811 	msr	BASEPRI, r3
 8012650:	f3bf 8f6f 	isb	sy
 8012654:	f3bf 8f4f 	dsb	sy
 8012658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801265a:	bf00      	nop
 801265c:	e7fe      	b.n	801265c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d103      	bne.n	801266c <xQueueGenericSend+0x40>
 8012664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012668:	2b00      	cmp	r3, #0
 801266a:	d101      	bne.n	8012670 <xQueueGenericSend+0x44>
 801266c:	2301      	movs	r3, #1
 801266e:	e000      	b.n	8012672 <xQueueGenericSend+0x46>
 8012670:	2300      	movs	r3, #0
 8012672:	2b00      	cmp	r3, #0
 8012674:	d10a      	bne.n	801268c <xQueueGenericSend+0x60>
	__asm volatile
 8012676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267a:	f383 8811 	msr	BASEPRI, r3
 801267e:	f3bf 8f6f 	isb	sy
 8012682:	f3bf 8f4f 	dsb	sy
 8012686:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012688:	bf00      	nop
 801268a:	e7fe      	b.n	801268a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	2b02      	cmp	r3, #2
 8012690:	d103      	bne.n	801269a <xQueueGenericSend+0x6e>
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012696:	2b01      	cmp	r3, #1
 8012698:	d101      	bne.n	801269e <xQueueGenericSend+0x72>
 801269a:	2301      	movs	r3, #1
 801269c:	e000      	b.n	80126a0 <xQueueGenericSend+0x74>
 801269e:	2300      	movs	r3, #0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d10a      	bne.n	80126ba <xQueueGenericSend+0x8e>
	__asm volatile
 80126a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	623b      	str	r3, [r7, #32]
}
 80126b6:	bf00      	nop
 80126b8:	e7fe      	b.n	80126b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126ba:	f001 fc77 	bl	8013fac <xTaskGetSchedulerState>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d102      	bne.n	80126ca <xQueueGenericSend+0x9e>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d101      	bne.n	80126ce <xQueueGenericSend+0xa2>
 80126ca:	2301      	movs	r3, #1
 80126cc:	e000      	b.n	80126d0 <xQueueGenericSend+0xa4>
 80126ce:	2300      	movs	r3, #0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d10a      	bne.n	80126ea <xQueueGenericSend+0xbe>
	__asm volatile
 80126d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d8:	f383 8811 	msr	BASEPRI, r3
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f3bf 8f4f 	dsb	sy
 80126e4:	61fb      	str	r3, [r7, #28]
}
 80126e6:	bf00      	nop
 80126e8:	e7fe      	b.n	80126e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126ea:	f002 fabb 	bl	8014c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d302      	bcc.n	8012700 <xQueueGenericSend+0xd4>
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	2b02      	cmp	r3, #2
 80126fe:	d129      	bne.n	8012754 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012700:	683a      	ldr	r2, [r7, #0]
 8012702:	68b9      	ldr	r1, [r7, #8]
 8012704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012706:	f000 fc5e 	bl	8012fc6 <prvCopyDataToQueue>
 801270a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012710:	2b00      	cmp	r3, #0
 8012712:	d010      	beq.n	8012736 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012716:	3324      	adds	r3, #36	; 0x24
 8012718:	4618      	mov	r0, r3
 801271a:	f001 fa85 	bl	8013c28 <xTaskRemoveFromEventList>
 801271e:	4603      	mov	r3, r0
 8012720:	2b00      	cmp	r3, #0
 8012722:	d013      	beq.n	801274c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012724:	4b3f      	ldr	r3, [pc, #252]	; (8012824 <xQueueGenericSend+0x1f8>)
 8012726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	f3bf 8f6f 	isb	sy
 8012734:	e00a      	b.n	801274c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012738:	2b00      	cmp	r3, #0
 801273a:	d007      	beq.n	801274c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801273c:	4b39      	ldr	r3, [pc, #228]	; (8012824 <xQueueGenericSend+0x1f8>)
 801273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012742:	601a      	str	r2, [r3, #0]
 8012744:	f3bf 8f4f 	dsb	sy
 8012748:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801274c:	f002 faba 	bl	8014cc4 <vPortExitCritical>
				return pdPASS;
 8012750:	2301      	movs	r3, #1
 8012752:	e063      	b.n	801281c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d103      	bne.n	8012762 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801275a:	f002 fab3 	bl	8014cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801275e:	2300      	movs	r3, #0
 8012760:	e05c      	b.n	801281c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012764:	2b00      	cmp	r3, #0
 8012766:	d106      	bne.n	8012776 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012768:	f107 0314 	add.w	r3, r7, #20
 801276c:	4618      	mov	r0, r3
 801276e:	f001 fabf 	bl	8013cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012772:	2301      	movs	r3, #1
 8012774:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012776:	f002 faa5 	bl	8014cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801277a:	f001 f819 	bl	80137b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801277e:	f002 fa71 	bl	8014c64 <vPortEnterCritical>
 8012782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012788:	b25b      	sxtb	r3, r3
 801278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801278e:	d103      	bne.n	8012798 <xQueueGenericSend+0x16c>
 8012790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012792:	2200      	movs	r2, #0
 8012794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801279e:	b25b      	sxtb	r3, r3
 80127a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a4:	d103      	bne.n	80127ae <xQueueGenericSend+0x182>
 80127a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a8:	2200      	movs	r2, #0
 80127aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127ae:	f002 fa89 	bl	8014cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127b2:	1d3a      	adds	r2, r7, #4
 80127b4:	f107 0314 	add.w	r3, r7, #20
 80127b8:	4611      	mov	r1, r2
 80127ba:	4618      	mov	r0, r3
 80127bc:	f001 faae 	bl	8013d1c <xTaskCheckForTimeOut>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d124      	bne.n	8012810 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80127c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127c8:	f000 fcf5 	bl	80131b6 <prvIsQueueFull>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d018      	beq.n	8012804 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80127d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d4:	3310      	adds	r3, #16
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	4611      	mov	r1, r2
 80127da:	4618      	mov	r0, r3
 80127dc:	f001 f9d4 	bl	8013b88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80127e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127e2:	f000 fc80 	bl	80130e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80127e6:	f000 fff1 	bl	80137cc <xTaskResumeAll>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	f47f af7c 	bne.w	80126ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80127f2:	4b0c      	ldr	r3, [pc, #48]	; (8012824 <xQueueGenericSend+0x1f8>)
 80127f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	f3bf 8f4f 	dsb	sy
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	e772      	b.n	80126ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012806:	f000 fc6e 	bl	80130e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801280a:	f000 ffdf 	bl	80137cc <xTaskResumeAll>
 801280e:	e76c      	b.n	80126ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012812:	f000 fc68 	bl	80130e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012816:	f000 ffd9 	bl	80137cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801281a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801281c:	4618      	mov	r0, r3
 801281e:	3738      	adds	r7, #56	; 0x38
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	e000ed04 	.word	0xe000ed04

08012828 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b090      	sub	sp, #64	; 0x40
 801282c:	af00      	add	r7, sp, #0
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	607a      	str	r2, [r7, #4]
 8012834:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801283c:	2b00      	cmp	r3, #0
 801283e:	d10a      	bne.n	8012856 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012844:	f383 8811 	msr	BASEPRI, r3
 8012848:	f3bf 8f6f 	isb	sy
 801284c:	f3bf 8f4f 	dsb	sy
 8012850:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012852:	bf00      	nop
 8012854:	e7fe      	b.n	8012854 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d103      	bne.n	8012864 <xQueueGenericSendFromISR+0x3c>
 801285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012860:	2b00      	cmp	r3, #0
 8012862:	d101      	bne.n	8012868 <xQueueGenericSendFromISR+0x40>
 8012864:	2301      	movs	r3, #1
 8012866:	e000      	b.n	801286a <xQueueGenericSendFromISR+0x42>
 8012868:	2300      	movs	r3, #0
 801286a:	2b00      	cmp	r3, #0
 801286c:	d10a      	bne.n	8012884 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012872:	f383 8811 	msr	BASEPRI, r3
 8012876:	f3bf 8f6f 	isb	sy
 801287a:	f3bf 8f4f 	dsb	sy
 801287e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012880:	bf00      	nop
 8012882:	e7fe      	b.n	8012882 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	2b02      	cmp	r3, #2
 8012888:	d103      	bne.n	8012892 <xQueueGenericSendFromISR+0x6a>
 801288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801288e:	2b01      	cmp	r3, #1
 8012890:	d101      	bne.n	8012896 <xQueueGenericSendFromISR+0x6e>
 8012892:	2301      	movs	r3, #1
 8012894:	e000      	b.n	8012898 <xQueueGenericSendFromISR+0x70>
 8012896:	2300      	movs	r3, #0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10a      	bne.n	80128b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	623b      	str	r3, [r7, #32]
}
 80128ae:	bf00      	nop
 80128b0:	e7fe      	b.n	80128b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128b2:	f002 fab9 	bl	8014e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80128b6:	f3ef 8211 	mrs	r2, BASEPRI
 80128ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128be:	f383 8811 	msr	BASEPRI, r3
 80128c2:	f3bf 8f6f 	isb	sy
 80128c6:	f3bf 8f4f 	dsb	sy
 80128ca:	61fa      	str	r2, [r7, #28]
 80128cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80128ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80128d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128da:	429a      	cmp	r2, r3
 80128dc:	d302      	bcc.n	80128e4 <xQueueGenericSendFromISR+0xbc>
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	2b02      	cmp	r3, #2
 80128e2:	d12f      	bne.n	8012944 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80128e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80128f4:	683a      	ldr	r2, [r7, #0]
 80128f6:	68b9      	ldr	r1, [r7, #8]
 80128f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128fa:	f000 fb64 	bl	8012fc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80128fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012906:	d112      	bne.n	801292e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801290c:	2b00      	cmp	r3, #0
 801290e:	d016      	beq.n	801293e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012912:	3324      	adds	r3, #36	; 0x24
 8012914:	4618      	mov	r0, r3
 8012916:	f001 f987 	bl	8013c28 <xTaskRemoveFromEventList>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d00e      	beq.n	801293e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d00b      	beq.n	801293e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2201      	movs	r2, #1
 801292a:	601a      	str	r2, [r3, #0]
 801292c:	e007      	b.n	801293e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801292e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012932:	3301      	adds	r3, #1
 8012934:	b2db      	uxtb	r3, r3
 8012936:	b25a      	sxtb	r2, r3
 8012938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801293e:	2301      	movs	r3, #1
 8012940:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012942:	e001      	b.n	8012948 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012944:	2300      	movs	r3, #0
 8012946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801294a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012952:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012956:	4618      	mov	r0, r3
 8012958:	3740      	adds	r7, #64	; 0x40
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801295e:	b580      	push	{r7, lr}
 8012960:	b08e      	sub	sp, #56	; 0x38
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
 8012966:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296e:	2b00      	cmp	r3, #0
 8012970:	d10a      	bne.n	8012988 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012976:	f383 8811 	msr	BASEPRI, r3
 801297a:	f3bf 8f6f 	isb	sy
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	623b      	str	r3, [r7, #32]
}
 8012984:	bf00      	nop
 8012986:	e7fe      	b.n	8012986 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298c:	2b00      	cmp	r3, #0
 801298e:	d00a      	beq.n	80129a6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	61fb      	str	r3, [r7, #28]
}
 80129a2:	bf00      	nop
 80129a4:	e7fe      	b.n	80129a4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80129a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d103      	bne.n	80129b6 <xQueueGiveFromISR+0x58>
 80129ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d101      	bne.n	80129ba <xQueueGiveFromISR+0x5c>
 80129b6:	2301      	movs	r3, #1
 80129b8:	e000      	b.n	80129bc <xQueueGiveFromISR+0x5e>
 80129ba:	2300      	movs	r3, #0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d10a      	bne.n	80129d6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80129c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c4:	f383 8811 	msr	BASEPRI, r3
 80129c8:	f3bf 8f6f 	isb	sy
 80129cc:	f3bf 8f4f 	dsb	sy
 80129d0:	61bb      	str	r3, [r7, #24]
}
 80129d2:	bf00      	nop
 80129d4:	e7fe      	b.n	80129d4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129d6:	f002 fa27 	bl	8014e28 <vPortValidateInterruptPriority>
	__asm volatile
 80129da:	f3ef 8211 	mrs	r2, BASEPRI
 80129de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e2:	f383 8811 	msr	BASEPRI, r3
 80129e6:	f3bf 8f6f 	isb	sy
 80129ea:	f3bf 8f4f 	dsb	sy
 80129ee:	617a      	str	r2, [r7, #20]
 80129f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80129f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80129f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80129f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80129fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d22b      	bcs.n	8012a5e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a12:	1c5a      	adds	r2, r3, #1
 8012a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a16:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a20:	d112      	bne.n	8012a48 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d016      	beq.n	8012a58 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2c:	3324      	adds	r3, #36	; 0x24
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f001 f8fa 	bl	8013c28 <xTaskRemoveFromEventList>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d00e      	beq.n	8012a58 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d00b      	beq.n	8012a58 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	2201      	movs	r2, #1
 8012a44:	601a      	str	r2, [r3, #0]
 8012a46:	e007      	b.n	8012a58 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	b25a      	sxtb	r2, r3
 8012a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8012a5c:	e001      	b.n	8012a62 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	637b      	str	r3, [r7, #52]	; 0x34
 8012a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a64:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f383 8811 	msr	BASEPRI, r3
}
 8012a6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3738      	adds	r7, #56	; 0x38
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b08c      	sub	sp, #48	; 0x30
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012a84:	2300      	movs	r3, #0
 8012a86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d10a      	bne.n	8012aa8 <xQueueReceive+0x30>
	__asm volatile
 8012a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a96:	f383 8811 	msr	BASEPRI, r3
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	f3bf 8f4f 	dsb	sy
 8012aa2:	623b      	str	r3, [r7, #32]
}
 8012aa4:	bf00      	nop
 8012aa6:	e7fe      	b.n	8012aa6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d103      	bne.n	8012ab6 <xQueueReceive+0x3e>
 8012aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d101      	bne.n	8012aba <xQueueReceive+0x42>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	e000      	b.n	8012abc <xQueueReceive+0x44>
 8012aba:	2300      	movs	r3, #0
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d10a      	bne.n	8012ad6 <xQueueReceive+0x5e>
	__asm volatile
 8012ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac4:	f383 8811 	msr	BASEPRI, r3
 8012ac8:	f3bf 8f6f 	isb	sy
 8012acc:	f3bf 8f4f 	dsb	sy
 8012ad0:	61fb      	str	r3, [r7, #28]
}
 8012ad2:	bf00      	nop
 8012ad4:	e7fe      	b.n	8012ad4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ad6:	f001 fa69 	bl	8013fac <xTaskGetSchedulerState>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d102      	bne.n	8012ae6 <xQueueReceive+0x6e>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d101      	bne.n	8012aea <xQueueReceive+0x72>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e000      	b.n	8012aec <xQueueReceive+0x74>
 8012aea:	2300      	movs	r3, #0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d10a      	bne.n	8012b06 <xQueueReceive+0x8e>
	__asm volatile
 8012af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	61bb      	str	r3, [r7, #24]
}
 8012b02:	bf00      	nop
 8012b04:	e7fe      	b.n	8012b04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b06:	f002 f8ad 	bl	8014c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d01f      	beq.n	8012b56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012b16:	68b9      	ldr	r1, [r7, #8]
 8012b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b1a:	f000 fabe 	bl	801309a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b20:	1e5a      	subs	r2, r3, #1
 8012b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b28:	691b      	ldr	r3, [r3, #16]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00f      	beq.n	8012b4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b30:	3310      	adds	r3, #16
 8012b32:	4618      	mov	r0, r3
 8012b34:	f001 f878 	bl	8013c28 <xTaskRemoveFromEventList>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d007      	beq.n	8012b4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012b3e:	4b3d      	ldr	r3, [pc, #244]	; (8012c34 <xQueueReceive+0x1bc>)
 8012b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	f3bf 8f4f 	dsb	sy
 8012b4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012b4e:	f002 f8b9 	bl	8014cc4 <vPortExitCritical>
				return pdPASS;
 8012b52:	2301      	movs	r3, #1
 8012b54:	e069      	b.n	8012c2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d103      	bne.n	8012b64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012b5c:	f002 f8b2 	bl	8014cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012b60:	2300      	movs	r3, #0
 8012b62:	e062      	b.n	8012c2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d106      	bne.n	8012b78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b6a:	f107 0310 	add.w	r3, r7, #16
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f001 f8be 	bl	8013cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b74:	2301      	movs	r3, #1
 8012b76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b78:	f002 f8a4 	bl	8014cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b7c:	f000 fe18 	bl	80137b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b80:	f002 f870 	bl	8014c64 <vPortEnterCritical>
 8012b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b8a:	b25b      	sxtb	r3, r3
 8012b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b90:	d103      	bne.n	8012b9a <xQueueReceive+0x122>
 8012b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b94:	2200      	movs	r2, #0
 8012b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ba0:	b25b      	sxtb	r3, r3
 8012ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba6:	d103      	bne.n	8012bb0 <xQueueReceive+0x138>
 8012ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012baa:	2200      	movs	r2, #0
 8012bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012bb0:	f002 f888 	bl	8014cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012bb4:	1d3a      	adds	r2, r7, #4
 8012bb6:	f107 0310 	add.w	r3, r7, #16
 8012bba:	4611      	mov	r1, r2
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f001 f8ad 	bl	8013d1c <xTaskCheckForTimeOut>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d123      	bne.n	8012c10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bca:	f000 fade 	bl	801318a <prvIsQueueEmpty>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d017      	beq.n	8012c04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd6:	3324      	adds	r3, #36	; 0x24
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	4611      	mov	r1, r2
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f000 ffd3 	bl	8013b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012be4:	f000 fa7f 	bl	80130e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012be8:	f000 fdf0 	bl	80137cc <xTaskResumeAll>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d189      	bne.n	8012b06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012bf2:	4b10      	ldr	r3, [pc, #64]	; (8012c34 <xQueueReceive+0x1bc>)
 8012bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bf8:	601a      	str	r2, [r3, #0]
 8012bfa:	f3bf 8f4f 	dsb	sy
 8012bfe:	f3bf 8f6f 	isb	sy
 8012c02:	e780      	b.n	8012b06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c06:	f000 fa6e 	bl	80130e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c0a:	f000 fddf 	bl	80137cc <xTaskResumeAll>
 8012c0e:	e77a      	b.n	8012b06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c12:	f000 fa68 	bl	80130e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c16:	f000 fdd9 	bl	80137cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c1c:	f000 fab5 	bl	801318a <prvIsQueueEmpty>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	f43f af6f 	beq.w	8012b06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3730      	adds	r7, #48	; 0x30
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}
 8012c32:	bf00      	nop
 8012c34:	e000ed04 	.word	0xe000ed04

08012c38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08e      	sub	sp, #56	; 0x38
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012c42:	2300      	movs	r3, #0
 8012c44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d10a      	bne.n	8012c6a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c58:	f383 8811 	msr	BASEPRI, r3
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f3bf 8f4f 	dsb	sy
 8012c64:	623b      	str	r3, [r7, #32]
}
 8012c66:	bf00      	nop
 8012c68:	e7fe      	b.n	8012c68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d00a      	beq.n	8012c88 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c76:	f383 8811 	msr	BASEPRI, r3
 8012c7a:	f3bf 8f6f 	isb	sy
 8012c7e:	f3bf 8f4f 	dsb	sy
 8012c82:	61fb      	str	r3, [r7, #28]
}
 8012c84:	bf00      	nop
 8012c86:	e7fe      	b.n	8012c86 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c88:	f001 f990 	bl	8013fac <xTaskGetSchedulerState>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d102      	bne.n	8012c98 <xQueueSemaphoreTake+0x60>
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d101      	bne.n	8012c9c <xQueueSemaphoreTake+0x64>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e000      	b.n	8012c9e <xQueueSemaphoreTake+0x66>
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d10a      	bne.n	8012cb8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca6:	f383 8811 	msr	BASEPRI, r3
 8012caa:	f3bf 8f6f 	isb	sy
 8012cae:	f3bf 8f4f 	dsb	sy
 8012cb2:	61bb      	str	r3, [r7, #24]
}
 8012cb4:	bf00      	nop
 8012cb6:	e7fe      	b.n	8012cb6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012cb8:	f001 ffd4 	bl	8014c64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cc0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d024      	beq.n	8012d12 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cca:	1e5a      	subs	r2, r3, #1
 8012ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d104      	bne.n	8012ce2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012cd8:	f001 fade 	bl	8014298 <pvTaskIncrementMutexHeldCount>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce4:	691b      	ldr	r3, [r3, #16]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00f      	beq.n	8012d0a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cec:	3310      	adds	r3, #16
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f000 ff9a 	bl	8013c28 <xTaskRemoveFromEventList>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d007      	beq.n	8012d0a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012cfa:	4b54      	ldr	r3, [pc, #336]	; (8012e4c <xQueueSemaphoreTake+0x214>)
 8012cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d00:	601a      	str	r2, [r3, #0]
 8012d02:	f3bf 8f4f 	dsb	sy
 8012d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012d0a:	f001 ffdb 	bl	8014cc4 <vPortExitCritical>
				return pdPASS;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e097      	b.n	8012e42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d111      	bne.n	8012d3c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d00a      	beq.n	8012d34 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d22:	f383 8811 	msr	BASEPRI, r3
 8012d26:	f3bf 8f6f 	isb	sy
 8012d2a:	f3bf 8f4f 	dsb	sy
 8012d2e:	617b      	str	r3, [r7, #20]
}
 8012d30:	bf00      	nop
 8012d32:	e7fe      	b.n	8012d32 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012d34:	f001 ffc6 	bl	8014cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	e082      	b.n	8012e42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d106      	bne.n	8012d50 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012d42:	f107 030c 	add.w	r3, r7, #12
 8012d46:	4618      	mov	r0, r3
 8012d48:	f000 ffd2 	bl	8013cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012d50:	f001 ffb8 	bl	8014cc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012d54:	f000 fd2c 	bl	80137b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012d58:	f001 ff84 	bl	8014c64 <vPortEnterCritical>
 8012d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d62:	b25b      	sxtb	r3, r3
 8012d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d68:	d103      	bne.n	8012d72 <xQueueSemaphoreTake+0x13a>
 8012d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d78:	b25b      	sxtb	r3, r3
 8012d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7e:	d103      	bne.n	8012d88 <xQueueSemaphoreTake+0x150>
 8012d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d82:	2200      	movs	r2, #0
 8012d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d88:	f001 ff9c 	bl	8014cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d8c:	463a      	mov	r2, r7
 8012d8e:	f107 030c 	add.w	r3, r7, #12
 8012d92:	4611      	mov	r1, r2
 8012d94:	4618      	mov	r0, r3
 8012d96:	f000 ffc1 	bl	8013d1c <xTaskCheckForTimeOut>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d132      	bne.n	8012e06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012da0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012da2:	f000 f9f2 	bl	801318a <prvIsQueueEmpty>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d026      	beq.n	8012dfa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d109      	bne.n	8012dc8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012db4:	f001 ff56 	bl	8014c64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dba:	689b      	ldr	r3, [r3, #8]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f001 f913 	bl	8013fe8 <xTaskPriorityInherit>
 8012dc2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012dc4:	f001 ff7e 	bl	8014cc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dca:	3324      	adds	r3, #36	; 0x24
 8012dcc:	683a      	ldr	r2, [r7, #0]
 8012dce:	4611      	mov	r1, r2
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f000 fed9 	bl	8013b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dd8:	f000 f985 	bl	80130e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012ddc:	f000 fcf6 	bl	80137cc <xTaskResumeAll>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	f47f af68 	bne.w	8012cb8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012de8:	4b18      	ldr	r3, [pc, #96]	; (8012e4c <xQueueSemaphoreTake+0x214>)
 8012dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dee:	601a      	str	r2, [r3, #0]
 8012df0:	f3bf 8f4f 	dsb	sy
 8012df4:	f3bf 8f6f 	isb	sy
 8012df8:	e75e      	b.n	8012cb8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dfc:	f000 f973 	bl	80130e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e00:	f000 fce4 	bl	80137cc <xTaskResumeAll>
 8012e04:	e758      	b.n	8012cb8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e08:	f000 f96d 	bl	80130e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e0c:	f000 fcde 	bl	80137cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e12:	f000 f9ba 	bl	801318a <prvIsQueueEmpty>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f43f af4d 	beq.w	8012cb8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d00d      	beq.n	8012e40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012e24:	f001 ff1e 	bl	8014c64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e2a:	f000 f8b4 	bl	8012f96 <prvGetDisinheritPriorityAfterTimeout>
 8012e2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e32:	689b      	ldr	r3, [r3, #8]
 8012e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e36:	4618      	mov	r0, r3
 8012e38:	f001 f9ac 	bl	8014194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012e3c:	f001 ff42 	bl	8014cc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012e40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3738      	adds	r7, #56	; 0x38
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	e000ed04 	.word	0xe000ed04

08012e50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b08e      	sub	sp, #56	; 0x38
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d10a      	bne.n	8012e7c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e6a:	f383 8811 	msr	BASEPRI, r3
 8012e6e:	f3bf 8f6f 	isb	sy
 8012e72:	f3bf 8f4f 	dsb	sy
 8012e76:	623b      	str	r3, [r7, #32]
}
 8012e78:	bf00      	nop
 8012e7a:	e7fe      	b.n	8012e7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d103      	bne.n	8012e8a <xQueueReceiveFromISR+0x3a>
 8012e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d101      	bne.n	8012e8e <xQueueReceiveFromISR+0x3e>
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e000      	b.n	8012e90 <xQueueReceiveFromISR+0x40>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d10a      	bne.n	8012eaa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e98:	f383 8811 	msr	BASEPRI, r3
 8012e9c:	f3bf 8f6f 	isb	sy
 8012ea0:	f3bf 8f4f 	dsb	sy
 8012ea4:	61fb      	str	r3, [r7, #28]
}
 8012ea6:	bf00      	nop
 8012ea8:	e7fe      	b.n	8012ea8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012eaa:	f001 ffbd 	bl	8014e28 <vPortValidateInterruptPriority>
	__asm volatile
 8012eae:	f3ef 8211 	mrs	r2, BASEPRI
 8012eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb6:	f383 8811 	msr	BASEPRI, r3
 8012eba:	f3bf 8f6f 	isb	sy
 8012ebe:	f3bf 8f4f 	dsb	sy
 8012ec2:	61ba      	str	r2, [r7, #24]
 8012ec4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012ec6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ece:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d02f      	beq.n	8012f36 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012ee0:	68b9      	ldr	r1, [r7, #8]
 8012ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ee4:	f000 f8d9 	bl	801309a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eea:	1e5a      	subs	r2, r3, #1
 8012eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012ef0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef8:	d112      	bne.n	8012f20 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efc:	691b      	ldr	r3, [r3, #16]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d016      	beq.n	8012f30 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f04:	3310      	adds	r3, #16
 8012f06:	4618      	mov	r0, r3
 8012f08:	f000 fe8e 	bl	8013c28 <xTaskRemoveFromEventList>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d00e      	beq.n	8012f30 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d00b      	beq.n	8012f30 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	e007      	b.n	8012f30 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f24:	3301      	adds	r3, #1
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	b25a      	sxtb	r2, r3
 8012f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012f30:	2301      	movs	r3, #1
 8012f32:	637b      	str	r3, [r7, #52]	; 0x34
 8012f34:	e001      	b.n	8012f3a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012f36:	2300      	movs	r3, #0
 8012f38:	637b      	str	r3, [r7, #52]	; 0x34
 8012f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	f383 8811 	msr	BASEPRI, r3
}
 8012f44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3738      	adds	r7, #56	; 0x38
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}

08012f50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d10a      	bne.n	8012f78 <vQueueDelete+0x28>
	__asm volatile
 8012f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f66:	f383 8811 	msr	BASEPRI, r3
 8012f6a:	f3bf 8f6f 	isb	sy
 8012f6e:	f3bf 8f4f 	dsb	sy
 8012f72:	60bb      	str	r3, [r7, #8]
}
 8012f74:	bf00      	nop
 8012f76:	e7fe      	b.n	8012f76 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f000 f95f 	bl	801323c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d102      	bne.n	8012f8e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f002 f859 	bl	8015040 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012f8e:	bf00      	nop
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012f96:	b480      	push	{r7}
 8012f98:	b085      	sub	sp, #20
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d006      	beq.n	8012fb4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012fb0:	60fb      	str	r3, [r7, #12]
 8012fb2:	e001      	b.n	8012fb8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
	}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3714      	adds	r7, #20
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc4:	4770      	bx	lr

08012fc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012fc6:	b580      	push	{r7, lr}
 8012fc8:	b086      	sub	sp, #24
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	60f8      	str	r0, [r7, #12]
 8012fce:	60b9      	str	r1, [r7, #8]
 8012fd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d10d      	bne.n	8013000 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d14d      	bne.n	8013088 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f001 f861 	bl	80140b8 <xTaskPriorityDisinherit>
 8012ff6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	609a      	str	r2, [r3, #8]
 8012ffe:	e043      	b.n	8013088 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d119      	bne.n	801303a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	6858      	ldr	r0, [r3, #4]
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801300e:	461a      	mov	r2, r3
 8013010:	68b9      	ldr	r1, [r7, #8]
 8013012:	f00b fda9 	bl	801eb68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	685a      	ldr	r2, [r3, #4]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801301e:	441a      	add	r2, r3
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	685a      	ldr	r2, [r3, #4]
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	689b      	ldr	r3, [r3, #8]
 801302c:	429a      	cmp	r2, r3
 801302e:	d32b      	bcc.n	8013088 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	605a      	str	r2, [r3, #4]
 8013038:	e026      	b.n	8013088 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	68d8      	ldr	r0, [r3, #12]
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013042:	461a      	mov	r2, r3
 8013044:	68b9      	ldr	r1, [r7, #8]
 8013046:	f00b fd8f 	bl	801eb68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	68da      	ldr	r2, [r3, #12]
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013052:	425b      	negs	r3, r3
 8013054:	441a      	add	r2, r3
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	68da      	ldr	r2, [r3, #12]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	429a      	cmp	r2, r3
 8013064:	d207      	bcs.n	8013076 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	689a      	ldr	r2, [r3, #8]
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801306e:	425b      	negs	r3, r3
 8013070:	441a      	add	r2, r3
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b02      	cmp	r3, #2
 801307a:	d105      	bne.n	8013088 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d002      	beq.n	8013088 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	3b01      	subs	r3, #1
 8013086:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	1c5a      	adds	r2, r3, #1
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013090:	697b      	ldr	r3, [r7, #20]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3718      	adds	r7, #24
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b082      	sub	sp, #8
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d018      	beq.n	80130de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	68da      	ldr	r2, [r3, #12]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130b4:	441a      	add	r2, r3
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	68da      	ldr	r2, [r3, #12]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	689b      	ldr	r3, [r3, #8]
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d303      	bcc.n	80130ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	68d9      	ldr	r1, [r3, #12]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130d6:	461a      	mov	r2, r3
 80130d8:	6838      	ldr	r0, [r7, #0]
 80130da:	f00b fd45 	bl	801eb68 <memcpy>
	}
}
 80130de:	bf00      	nop
 80130e0:	3708      	adds	r7, #8
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b084      	sub	sp, #16
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80130ee:	f001 fdb9 	bl	8014c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80130fa:	e011      	b.n	8013120 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013100:	2b00      	cmp	r3, #0
 8013102:	d012      	beq.n	801312a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	3324      	adds	r3, #36	; 0x24
 8013108:	4618      	mov	r0, r3
 801310a:	f000 fd8d 	bl	8013c28 <xTaskRemoveFromEventList>
 801310e:	4603      	mov	r3, r0
 8013110:	2b00      	cmp	r3, #0
 8013112:	d001      	beq.n	8013118 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013114:	f000 fe64 	bl	8013de0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013118:	7bfb      	ldrb	r3, [r7, #15]
 801311a:	3b01      	subs	r3, #1
 801311c:	b2db      	uxtb	r3, r3
 801311e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013124:	2b00      	cmp	r3, #0
 8013126:	dce9      	bgt.n	80130fc <prvUnlockQueue+0x16>
 8013128:	e000      	b.n	801312c <prvUnlockQueue+0x46>
					break;
 801312a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	22ff      	movs	r2, #255	; 0xff
 8013130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013134:	f001 fdc6 	bl	8014cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013138:	f001 fd94 	bl	8014c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013142:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013144:	e011      	b.n	801316a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d012      	beq.n	8013174 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	3310      	adds	r3, #16
 8013152:	4618      	mov	r0, r3
 8013154:	f000 fd68 	bl	8013c28 <xTaskRemoveFromEventList>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d001      	beq.n	8013162 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801315e:	f000 fe3f 	bl	8013de0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013162:	7bbb      	ldrb	r3, [r7, #14]
 8013164:	3b01      	subs	r3, #1
 8013166:	b2db      	uxtb	r3, r3
 8013168:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801316a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801316e:	2b00      	cmp	r3, #0
 8013170:	dce9      	bgt.n	8013146 <prvUnlockQueue+0x60>
 8013172:	e000      	b.n	8013176 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013174:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	22ff      	movs	r2, #255	; 0xff
 801317a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801317e:	f001 fda1 	bl	8014cc4 <vPortExitCritical>
}
 8013182:	bf00      	nop
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}

0801318a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801318a:	b580      	push	{r7, lr}
 801318c:	b084      	sub	sp, #16
 801318e:	af00      	add	r7, sp, #0
 8013190:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013192:	f001 fd67 	bl	8014c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801319a:	2b00      	cmp	r3, #0
 801319c:	d102      	bne.n	80131a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801319e:	2301      	movs	r3, #1
 80131a0:	60fb      	str	r3, [r7, #12]
 80131a2:	e001      	b.n	80131a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80131a4:	2300      	movs	r3, #0
 80131a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80131a8:	f001 fd8c 	bl	8014cc4 <vPortExitCritical>

	return xReturn;
 80131ac:	68fb      	ldr	r3, [r7, #12]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3710      	adds	r7, #16
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}

080131b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80131b6:	b580      	push	{r7, lr}
 80131b8:	b084      	sub	sp, #16
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80131be:	f001 fd51 	bl	8014c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d102      	bne.n	80131d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80131ce:	2301      	movs	r3, #1
 80131d0:	60fb      	str	r3, [r7, #12]
 80131d2:	e001      	b.n	80131d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80131d4:	2300      	movs	r3, #0
 80131d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80131d8:	f001 fd74 	bl	8014cc4 <vPortExitCritical>

	return xReturn;
 80131dc:	68fb      	ldr	r3, [r7, #12]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3710      	adds	r7, #16
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
	...

080131e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80131e8:	b480      	push	{r7}
 80131ea:	b085      	sub	sp, #20
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80131f2:	2300      	movs	r3, #0
 80131f4:	60fb      	str	r3, [r7, #12]
 80131f6:	e014      	b.n	8013222 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80131f8:	4a0f      	ldr	r2, [pc, #60]	; (8013238 <vQueueAddToRegistry+0x50>)
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d10b      	bne.n	801321c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013204:	490c      	ldr	r1, [pc, #48]	; (8013238 <vQueueAddToRegistry+0x50>)
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	683a      	ldr	r2, [r7, #0]
 801320a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801320e:	4a0a      	ldr	r2, [pc, #40]	; (8013238 <vQueueAddToRegistry+0x50>)
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	00db      	lsls	r3, r3, #3
 8013214:	4413      	add	r3, r2
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801321a:	e006      	b.n	801322a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	3301      	adds	r3, #1
 8013220:	60fb      	str	r3, [r7, #12]
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2b07      	cmp	r3, #7
 8013226:	d9e7      	bls.n	80131f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013228:	bf00      	nop
 801322a:	bf00      	nop
 801322c:	3714      	adds	r7, #20
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop
 8013238:	2000125c 	.word	0x2000125c

0801323c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801323c:	b480      	push	{r7}
 801323e:	b085      	sub	sp, #20
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013244:	2300      	movs	r3, #0
 8013246:	60fb      	str	r3, [r7, #12]
 8013248:	e016      	b.n	8013278 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801324a:	4a10      	ldr	r2, [pc, #64]	; (801328c <vQueueUnregisterQueue+0x50>)
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	00db      	lsls	r3, r3, #3
 8013250:	4413      	add	r3, r2
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	429a      	cmp	r2, r3
 8013258:	d10b      	bne.n	8013272 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801325a:	4a0c      	ldr	r2, [pc, #48]	; (801328c <vQueueUnregisterQueue+0x50>)
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2100      	movs	r1, #0
 8013260:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013264:	4a09      	ldr	r2, [pc, #36]	; (801328c <vQueueUnregisterQueue+0x50>)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	00db      	lsls	r3, r3, #3
 801326a:	4413      	add	r3, r2
 801326c:	2200      	movs	r2, #0
 801326e:	605a      	str	r2, [r3, #4]
				break;
 8013270:	e006      	b.n	8013280 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	3301      	adds	r3, #1
 8013276:	60fb      	str	r3, [r7, #12]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2b07      	cmp	r3, #7
 801327c:	d9e5      	bls.n	801324a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801327e:	bf00      	nop
 8013280:	bf00      	nop
 8013282:	3714      	adds	r7, #20
 8013284:	46bd      	mov	sp, r7
 8013286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328a:	4770      	bx	lr
 801328c:	2000125c 	.word	0x2000125c

08013290 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80132a0:	f001 fce0 	bl	8014c64 <vPortEnterCritical>
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80132aa:	b25b      	sxtb	r3, r3
 80132ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132b0:	d103      	bne.n	80132ba <vQueueWaitForMessageRestricted+0x2a>
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	2200      	movs	r2, #0
 80132b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132c0:	b25b      	sxtb	r3, r3
 80132c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c6:	d103      	bne.n	80132d0 <vQueueWaitForMessageRestricted+0x40>
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	2200      	movs	r2, #0
 80132cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80132d0:	f001 fcf8 	bl	8014cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d106      	bne.n	80132ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	3324      	adds	r3, #36	; 0x24
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	68b9      	ldr	r1, [r7, #8]
 80132e4:	4618      	mov	r0, r3
 80132e6:	f000 fc73 	bl	8013bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80132ea:	6978      	ldr	r0, [r7, #20]
 80132ec:	f7ff fefb 	bl	80130e6 <prvUnlockQueue>
	}
 80132f0:	bf00      	nop
 80132f2:	3718      	adds	r7, #24
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b08e      	sub	sp, #56	; 0x38
 80132fc:	af04      	add	r7, sp, #16
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	60b9      	str	r1, [r7, #8]
 8013302:	607a      	str	r2, [r7, #4]
 8013304:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013308:	2b00      	cmp	r3, #0
 801330a:	d10a      	bne.n	8013322 <xTaskCreateStatic+0x2a>
	__asm volatile
 801330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013310:	f383 8811 	msr	BASEPRI, r3
 8013314:	f3bf 8f6f 	isb	sy
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	623b      	str	r3, [r7, #32]
}
 801331e:	bf00      	nop
 8013320:	e7fe      	b.n	8013320 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013324:	2b00      	cmp	r3, #0
 8013326:	d10a      	bne.n	801333e <xTaskCreateStatic+0x46>
	__asm volatile
 8013328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332c:	f383 8811 	msr	BASEPRI, r3
 8013330:	f3bf 8f6f 	isb	sy
 8013334:	f3bf 8f4f 	dsb	sy
 8013338:	61fb      	str	r3, [r7, #28]
}
 801333a:	bf00      	nop
 801333c:	e7fe      	b.n	801333c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801333e:	23bc      	movs	r3, #188	; 0xbc
 8013340:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	2bbc      	cmp	r3, #188	; 0xbc
 8013346:	d00a      	beq.n	801335e <xTaskCreateStatic+0x66>
	__asm volatile
 8013348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334c:	f383 8811 	msr	BASEPRI, r3
 8013350:	f3bf 8f6f 	isb	sy
 8013354:	f3bf 8f4f 	dsb	sy
 8013358:	61bb      	str	r3, [r7, #24]
}
 801335a:	bf00      	nop
 801335c:	e7fe      	b.n	801335c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801335e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013362:	2b00      	cmp	r3, #0
 8013364:	d01e      	beq.n	80133a4 <xTaskCreateStatic+0xac>
 8013366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013368:	2b00      	cmp	r3, #0
 801336a:	d01b      	beq.n	80133a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013374:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013378:	2202      	movs	r2, #2
 801337a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801337e:	2300      	movs	r3, #0
 8013380:	9303      	str	r3, [sp, #12]
 8013382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013384:	9302      	str	r3, [sp, #8]
 8013386:	f107 0314 	add.w	r3, r7, #20
 801338a:	9301      	str	r3, [sp, #4]
 801338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	68b9      	ldr	r1, [r7, #8]
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f000 f850 	bl	801343c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801339c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801339e:	f000 f8f3 	bl	8013588 <prvAddNewTaskToReadyList>
 80133a2:	e001      	b.n	80133a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80133a4:	2300      	movs	r3, #0
 80133a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80133a8:	697b      	ldr	r3, [r7, #20]
	}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3728      	adds	r7, #40	; 0x28
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b08c      	sub	sp, #48	; 0x30
 80133b6:	af04      	add	r7, sp, #16
 80133b8:	60f8      	str	r0, [r7, #12]
 80133ba:	60b9      	str	r1, [r7, #8]
 80133bc:	603b      	str	r3, [r7, #0]
 80133be:	4613      	mov	r3, r2
 80133c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80133c2:	88fb      	ldrh	r3, [r7, #6]
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	4618      	mov	r0, r3
 80133c8:	f001 fd6e 	bl	8014ea8 <pvPortMalloc>
 80133cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d00e      	beq.n	80133f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80133d4:	20bc      	movs	r0, #188	; 0xbc
 80133d6:	f001 fd67 	bl	8014ea8 <pvPortMalloc>
 80133da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d003      	beq.n	80133ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80133e2:	69fb      	ldr	r3, [r7, #28]
 80133e4:	697a      	ldr	r2, [r7, #20]
 80133e6:	631a      	str	r2, [r3, #48]	; 0x30
 80133e8:	e005      	b.n	80133f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80133ea:	6978      	ldr	r0, [r7, #20]
 80133ec:	f001 fe28 	bl	8015040 <vPortFree>
 80133f0:	e001      	b.n	80133f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80133f2:	2300      	movs	r3, #0
 80133f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d017      	beq.n	801342c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	2200      	movs	r2, #0
 8013400:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013404:	88fa      	ldrh	r2, [r7, #6]
 8013406:	2300      	movs	r3, #0
 8013408:	9303      	str	r3, [sp, #12]
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	9302      	str	r3, [sp, #8]
 801340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013410:	9301      	str	r3, [sp, #4]
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	9300      	str	r3, [sp, #0]
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	68b9      	ldr	r1, [r7, #8]
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f000 f80e 	bl	801343c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013420:	69f8      	ldr	r0, [r7, #28]
 8013422:	f000 f8b1 	bl	8013588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013426:	2301      	movs	r3, #1
 8013428:	61bb      	str	r3, [r7, #24]
 801342a:	e002      	b.n	8013432 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801342c:	f04f 33ff 	mov.w	r3, #4294967295
 8013430:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013432:	69bb      	ldr	r3, [r7, #24]
	}
 8013434:	4618      	mov	r0, r3
 8013436:	3720      	adds	r7, #32
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b088      	sub	sp, #32
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]
 8013448:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801344c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	461a      	mov	r2, r3
 8013454:	21a5      	movs	r1, #165	; 0xa5
 8013456:	f00b fb95 	bl	801eb84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013464:	440b      	add	r3, r1
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4413      	add	r3, r2
 801346a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	f023 0307 	bic.w	r3, r3, #7
 8013472:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013474:	69bb      	ldr	r3, [r7, #24]
 8013476:	f003 0307 	and.w	r3, r3, #7
 801347a:	2b00      	cmp	r3, #0
 801347c:	d00a      	beq.n	8013494 <prvInitialiseNewTask+0x58>
	__asm volatile
 801347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013482:	f383 8811 	msr	BASEPRI, r3
 8013486:	f3bf 8f6f 	isb	sy
 801348a:	f3bf 8f4f 	dsb	sy
 801348e:	617b      	str	r3, [r7, #20]
}
 8013490:	bf00      	nop
 8013492:	e7fe      	b.n	8013492 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d01f      	beq.n	80134da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801349a:	2300      	movs	r3, #0
 801349c:	61fb      	str	r3, [r7, #28]
 801349e:	e012      	b.n	80134c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80134a0:	68ba      	ldr	r2, [r7, #8]
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	4413      	add	r3, r2
 80134a6:	7819      	ldrb	r1, [r3, #0]
 80134a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134aa:	69fb      	ldr	r3, [r7, #28]
 80134ac:	4413      	add	r3, r2
 80134ae:	3334      	adds	r3, #52	; 0x34
 80134b0:	460a      	mov	r2, r1
 80134b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80134b4:	68ba      	ldr	r2, [r7, #8]
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	4413      	add	r3, r2
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d006      	beq.n	80134ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	3301      	adds	r3, #1
 80134c4:	61fb      	str	r3, [r7, #28]
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	2b0f      	cmp	r3, #15
 80134ca:	d9e9      	bls.n	80134a0 <prvInitialiseNewTask+0x64>
 80134cc:	e000      	b.n	80134d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80134ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80134d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d2:	2200      	movs	r2, #0
 80134d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80134d8:	e003      	b.n	80134e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80134da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134dc:	2200      	movs	r2, #0
 80134de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	2b37      	cmp	r3, #55	; 0x37
 80134e6:	d901      	bls.n	80134ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80134e8:	2337      	movs	r3, #55	; 0x37
 80134ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80134ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80134f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80134f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134fa:	2200      	movs	r2, #0
 80134fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	3304      	adds	r3, #4
 8013502:	4618      	mov	r0, r3
 8013504:	f7fe fe56 	bl	80121b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801350a:	3318      	adds	r3, #24
 801350c:	4618      	mov	r0, r3
 801350e:	f7fe fe51 	bl	80121b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352a:	2200      	movs	r2, #0
 801352c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013532:	2200      	movs	r2, #0
 8013534:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353a:	3354      	adds	r3, #84	; 0x54
 801353c:	2260      	movs	r2, #96	; 0x60
 801353e:	2100      	movs	r1, #0
 8013540:	4618      	mov	r0, r3
 8013542:	f00b fb1f 	bl	801eb84 <memset>
 8013546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013548:	4a0c      	ldr	r2, [pc, #48]	; (801357c <prvInitialiseNewTask+0x140>)
 801354a:	659a      	str	r2, [r3, #88]	; 0x58
 801354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354e:	4a0c      	ldr	r2, [pc, #48]	; (8013580 <prvInitialiseNewTask+0x144>)
 8013550:	65da      	str	r2, [r3, #92]	; 0x5c
 8013552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013554:	4a0b      	ldr	r2, [pc, #44]	; (8013584 <prvInitialiseNewTask+0x148>)
 8013556:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013558:	683a      	ldr	r2, [r7, #0]
 801355a:	68f9      	ldr	r1, [r7, #12]
 801355c:	69b8      	ldr	r0, [r7, #24]
 801355e:	f001 fa51 	bl	8014a04 <pxPortInitialiseStack>
 8013562:	4602      	mov	r2, r0
 8013564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013566:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356a:	2b00      	cmp	r3, #0
 801356c:	d002      	beq.n	8013574 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013572:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013574:	bf00      	nop
 8013576:	3720      	adds	r7, #32
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	08023ed0 	.word	0x08023ed0
 8013580:	08023ef0 	.word	0x08023ef0
 8013584:	08023eb0 	.word	0x08023eb0

08013588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013590:	f001 fb68 	bl	8014c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013594:	4b2d      	ldr	r3, [pc, #180]	; (801364c <prvAddNewTaskToReadyList+0xc4>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	3301      	adds	r3, #1
 801359a:	4a2c      	ldr	r2, [pc, #176]	; (801364c <prvAddNewTaskToReadyList+0xc4>)
 801359c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801359e:	4b2c      	ldr	r3, [pc, #176]	; (8013650 <prvAddNewTaskToReadyList+0xc8>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d109      	bne.n	80135ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80135a6:	4a2a      	ldr	r2, [pc, #168]	; (8013650 <prvAddNewTaskToReadyList+0xc8>)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80135ac:	4b27      	ldr	r3, [pc, #156]	; (801364c <prvAddNewTaskToReadyList+0xc4>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d110      	bne.n	80135d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80135b4:	f000 fc38 	bl	8013e28 <prvInitialiseTaskLists>
 80135b8:	e00d      	b.n	80135d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80135ba:	4b26      	ldr	r3, [pc, #152]	; (8013654 <prvAddNewTaskToReadyList+0xcc>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d109      	bne.n	80135d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80135c2:	4b23      	ldr	r3, [pc, #140]	; (8013650 <prvAddNewTaskToReadyList+0xc8>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d802      	bhi.n	80135d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80135d0:	4a1f      	ldr	r2, [pc, #124]	; (8013650 <prvAddNewTaskToReadyList+0xc8>)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80135d6:	4b20      	ldr	r3, [pc, #128]	; (8013658 <prvAddNewTaskToReadyList+0xd0>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	3301      	adds	r3, #1
 80135dc:	4a1e      	ldr	r2, [pc, #120]	; (8013658 <prvAddNewTaskToReadyList+0xd0>)
 80135de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80135e0:	4b1d      	ldr	r3, [pc, #116]	; (8013658 <prvAddNewTaskToReadyList+0xd0>)
 80135e2:	681a      	ldr	r2, [r3, #0]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135ec:	4b1b      	ldr	r3, [pc, #108]	; (801365c <prvAddNewTaskToReadyList+0xd4>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d903      	bls.n	80135fc <prvAddNewTaskToReadyList+0x74>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f8:	4a18      	ldr	r2, [pc, #96]	; (801365c <prvAddNewTaskToReadyList+0xd4>)
 80135fa:	6013      	str	r3, [r2, #0]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013600:	4613      	mov	r3, r2
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	4413      	add	r3, r2
 8013606:	009b      	lsls	r3, r3, #2
 8013608:	4a15      	ldr	r2, [pc, #84]	; (8013660 <prvAddNewTaskToReadyList+0xd8>)
 801360a:	441a      	add	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	3304      	adds	r3, #4
 8013610:	4619      	mov	r1, r3
 8013612:	4610      	mov	r0, r2
 8013614:	f7fe fddb 	bl	80121ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013618:	f001 fb54 	bl	8014cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801361c:	4b0d      	ldr	r3, [pc, #52]	; (8013654 <prvAddNewTaskToReadyList+0xcc>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d00e      	beq.n	8013642 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013624:	4b0a      	ldr	r3, [pc, #40]	; (8013650 <prvAddNewTaskToReadyList+0xc8>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801362e:	429a      	cmp	r2, r3
 8013630:	d207      	bcs.n	8013642 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013632:	4b0c      	ldr	r3, [pc, #48]	; (8013664 <prvAddNewTaskToReadyList+0xdc>)
 8013634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	f3bf 8f4f 	dsb	sy
 801363e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013642:	bf00      	nop
 8013644:	3708      	adds	r7, #8
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	20001770 	.word	0x20001770
 8013650:	2000129c 	.word	0x2000129c
 8013654:	2000177c 	.word	0x2000177c
 8013658:	2000178c 	.word	0x2000178c
 801365c:	20001778 	.word	0x20001778
 8013660:	200012a0 	.word	0x200012a0
 8013664:	e000ed04 	.word	0xe000ed04

08013668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013670:	2300      	movs	r3, #0
 8013672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d017      	beq.n	80136aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801367a:	4b13      	ldr	r3, [pc, #76]	; (80136c8 <vTaskDelay+0x60>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00a      	beq.n	8013698 <vTaskDelay+0x30>
	__asm volatile
 8013682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013686:	f383 8811 	msr	BASEPRI, r3
 801368a:	f3bf 8f6f 	isb	sy
 801368e:	f3bf 8f4f 	dsb	sy
 8013692:	60bb      	str	r3, [r7, #8]
}
 8013694:	bf00      	nop
 8013696:	e7fe      	b.n	8013696 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013698:	f000 f88a 	bl	80137b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801369c:	2100      	movs	r1, #0
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f000 fe0e 	bl	80142c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80136a4:	f000 f892 	bl	80137cc <xTaskResumeAll>
 80136a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d107      	bne.n	80136c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80136b0:	4b06      	ldr	r3, [pc, #24]	; (80136cc <vTaskDelay+0x64>)
 80136b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136b6:	601a      	str	r2, [r3, #0]
 80136b8:	f3bf 8f4f 	dsb	sy
 80136bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80136c0:	bf00      	nop
 80136c2:	3710      	adds	r7, #16
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	20001798 	.word	0x20001798
 80136cc:	e000ed04 	.word	0xe000ed04

080136d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b08a      	sub	sp, #40	; 0x28
 80136d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80136d6:	2300      	movs	r3, #0
 80136d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80136da:	2300      	movs	r3, #0
 80136dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80136de:	463a      	mov	r2, r7
 80136e0:	1d39      	adds	r1, r7, #4
 80136e2:	f107 0308 	add.w	r3, r7, #8
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fe fd10 	bl	801210c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80136ec:	6839      	ldr	r1, [r7, #0]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	68ba      	ldr	r2, [r7, #8]
 80136f2:	9202      	str	r2, [sp, #8]
 80136f4:	9301      	str	r3, [sp, #4]
 80136f6:	2300      	movs	r3, #0
 80136f8:	9300      	str	r3, [sp, #0]
 80136fa:	2300      	movs	r3, #0
 80136fc:	460a      	mov	r2, r1
 80136fe:	4924      	ldr	r1, [pc, #144]	; (8013790 <vTaskStartScheduler+0xc0>)
 8013700:	4824      	ldr	r0, [pc, #144]	; (8013794 <vTaskStartScheduler+0xc4>)
 8013702:	f7ff fdf9 	bl	80132f8 <xTaskCreateStatic>
 8013706:	4603      	mov	r3, r0
 8013708:	4a23      	ldr	r2, [pc, #140]	; (8013798 <vTaskStartScheduler+0xc8>)
 801370a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801370c:	4b22      	ldr	r3, [pc, #136]	; (8013798 <vTaskStartScheduler+0xc8>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d002      	beq.n	801371a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013714:	2301      	movs	r3, #1
 8013716:	617b      	str	r3, [r7, #20]
 8013718:	e001      	b.n	801371e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801371a:	2300      	movs	r3, #0
 801371c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d102      	bne.n	801372a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013724:	f000 fe20 	bl	8014368 <xTimerCreateTimerTask>
 8013728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2b01      	cmp	r3, #1
 801372e:	d11b      	bne.n	8013768 <vTaskStartScheduler+0x98>
	__asm volatile
 8013730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013734:	f383 8811 	msr	BASEPRI, r3
 8013738:	f3bf 8f6f 	isb	sy
 801373c:	f3bf 8f4f 	dsb	sy
 8013740:	613b      	str	r3, [r7, #16]
}
 8013742:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013744:	4b15      	ldr	r3, [pc, #84]	; (801379c <vTaskStartScheduler+0xcc>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	3354      	adds	r3, #84	; 0x54
 801374a:	4a15      	ldr	r2, [pc, #84]	; (80137a0 <vTaskStartScheduler+0xd0>)
 801374c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801374e:	4b15      	ldr	r3, [pc, #84]	; (80137a4 <vTaskStartScheduler+0xd4>)
 8013750:	f04f 32ff 	mov.w	r2, #4294967295
 8013754:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013756:	4b14      	ldr	r3, [pc, #80]	; (80137a8 <vTaskStartScheduler+0xd8>)
 8013758:	2201      	movs	r2, #1
 801375a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801375c:	4b13      	ldr	r3, [pc, #76]	; (80137ac <vTaskStartScheduler+0xdc>)
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013762:	f001 f9dd 	bl	8014b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013766:	e00e      	b.n	8013786 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801376e:	d10a      	bne.n	8013786 <vTaskStartScheduler+0xb6>
	__asm volatile
 8013770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013774:	f383 8811 	msr	BASEPRI, r3
 8013778:	f3bf 8f6f 	isb	sy
 801377c:	f3bf 8f4f 	dsb	sy
 8013780:	60fb      	str	r3, [r7, #12]
}
 8013782:	bf00      	nop
 8013784:	e7fe      	b.n	8013784 <vTaskStartScheduler+0xb4>
}
 8013786:	bf00      	nop
 8013788:	3718      	adds	r7, #24
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	080218f8 	.word	0x080218f8
 8013794:	08013df9 	.word	0x08013df9
 8013798:	20001794 	.word	0x20001794
 801379c:	2000129c 	.word	0x2000129c
 80137a0:	20000140 	.word	0x20000140
 80137a4:	20001790 	.word	0x20001790
 80137a8:	2000177c 	.word	0x2000177c
 80137ac:	20001774 	.word	0x20001774

080137b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80137b0:	b480      	push	{r7}
 80137b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80137b4:	4b04      	ldr	r3, [pc, #16]	; (80137c8 <vTaskSuspendAll+0x18>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	3301      	adds	r3, #1
 80137ba:	4a03      	ldr	r2, [pc, #12]	; (80137c8 <vTaskSuspendAll+0x18>)
 80137bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80137be:	bf00      	nop
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr
 80137c8:	20001798 	.word	0x20001798

080137cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b084      	sub	sp, #16
 80137d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80137d2:	2300      	movs	r3, #0
 80137d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80137d6:	2300      	movs	r3, #0
 80137d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80137da:	4b42      	ldr	r3, [pc, #264]	; (80138e4 <xTaskResumeAll+0x118>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d10a      	bne.n	80137f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80137e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e6:	f383 8811 	msr	BASEPRI, r3
 80137ea:	f3bf 8f6f 	isb	sy
 80137ee:	f3bf 8f4f 	dsb	sy
 80137f2:	603b      	str	r3, [r7, #0]
}
 80137f4:	bf00      	nop
 80137f6:	e7fe      	b.n	80137f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80137f8:	f001 fa34 	bl	8014c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80137fc:	4b39      	ldr	r3, [pc, #228]	; (80138e4 <xTaskResumeAll+0x118>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	3b01      	subs	r3, #1
 8013802:	4a38      	ldr	r2, [pc, #224]	; (80138e4 <xTaskResumeAll+0x118>)
 8013804:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013806:	4b37      	ldr	r3, [pc, #220]	; (80138e4 <xTaskResumeAll+0x118>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d162      	bne.n	80138d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801380e:	4b36      	ldr	r3, [pc, #216]	; (80138e8 <xTaskResumeAll+0x11c>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d05e      	beq.n	80138d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013816:	e02f      	b.n	8013878 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013818:	4b34      	ldr	r3, [pc, #208]	; (80138ec <xTaskResumeAll+0x120>)
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	68db      	ldr	r3, [r3, #12]
 801381e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	3318      	adds	r3, #24
 8013824:	4618      	mov	r0, r3
 8013826:	f7fe fd2f 	bl	8012288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	3304      	adds	r3, #4
 801382e:	4618      	mov	r0, r3
 8013830:	f7fe fd2a 	bl	8012288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013838:	4b2d      	ldr	r3, [pc, #180]	; (80138f0 <xTaskResumeAll+0x124>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	429a      	cmp	r2, r3
 801383e:	d903      	bls.n	8013848 <xTaskResumeAll+0x7c>
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013844:	4a2a      	ldr	r2, [pc, #168]	; (80138f0 <xTaskResumeAll+0x124>)
 8013846:	6013      	str	r3, [r2, #0]
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801384c:	4613      	mov	r3, r2
 801384e:	009b      	lsls	r3, r3, #2
 8013850:	4413      	add	r3, r2
 8013852:	009b      	lsls	r3, r3, #2
 8013854:	4a27      	ldr	r2, [pc, #156]	; (80138f4 <xTaskResumeAll+0x128>)
 8013856:	441a      	add	r2, r3
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	3304      	adds	r3, #4
 801385c:	4619      	mov	r1, r3
 801385e:	4610      	mov	r0, r2
 8013860:	f7fe fcb5 	bl	80121ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013868:	4b23      	ldr	r3, [pc, #140]	; (80138f8 <xTaskResumeAll+0x12c>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386e:	429a      	cmp	r2, r3
 8013870:	d302      	bcc.n	8013878 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013872:	4b22      	ldr	r3, [pc, #136]	; (80138fc <xTaskResumeAll+0x130>)
 8013874:	2201      	movs	r2, #1
 8013876:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013878:	4b1c      	ldr	r3, [pc, #112]	; (80138ec <xTaskResumeAll+0x120>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d1cb      	bne.n	8013818 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d001      	beq.n	801388a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013886:	f000 fb71 	bl	8013f6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801388a:	4b1d      	ldr	r3, [pc, #116]	; (8013900 <xTaskResumeAll+0x134>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d010      	beq.n	80138b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013896:	f000 f859 	bl	801394c <xTaskIncrementTick>
 801389a:	4603      	mov	r3, r0
 801389c:	2b00      	cmp	r3, #0
 801389e:	d002      	beq.n	80138a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80138a0:	4b16      	ldr	r3, [pc, #88]	; (80138fc <xTaskResumeAll+0x130>)
 80138a2:	2201      	movs	r2, #1
 80138a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	3b01      	subs	r3, #1
 80138aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d1f1      	bne.n	8013896 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80138b2:	4b13      	ldr	r3, [pc, #76]	; (8013900 <xTaskResumeAll+0x134>)
 80138b4:	2200      	movs	r2, #0
 80138b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80138b8:	4b10      	ldr	r3, [pc, #64]	; (80138fc <xTaskResumeAll+0x130>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d009      	beq.n	80138d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80138c0:	2301      	movs	r3, #1
 80138c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80138c4:	4b0f      	ldr	r3, [pc, #60]	; (8013904 <xTaskResumeAll+0x138>)
 80138c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ca:	601a      	str	r2, [r3, #0]
 80138cc:	f3bf 8f4f 	dsb	sy
 80138d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80138d4:	f001 f9f6 	bl	8014cc4 <vPortExitCritical>

	return xAlreadyYielded;
 80138d8:	68bb      	ldr	r3, [r7, #8]
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	20001798 	.word	0x20001798
 80138e8:	20001770 	.word	0x20001770
 80138ec:	20001730 	.word	0x20001730
 80138f0:	20001778 	.word	0x20001778
 80138f4:	200012a0 	.word	0x200012a0
 80138f8:	2000129c 	.word	0x2000129c
 80138fc:	20001784 	.word	0x20001784
 8013900:	20001780 	.word	0x20001780
 8013904:	e000ed04 	.word	0xe000ed04

08013908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013908:	b480      	push	{r7}
 801390a:	b083      	sub	sp, #12
 801390c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801390e:	4b05      	ldr	r3, [pc, #20]	; (8013924 <xTaskGetTickCount+0x1c>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013914:	687b      	ldr	r3, [r7, #4]
}
 8013916:	4618      	mov	r0, r3
 8013918:	370c      	adds	r7, #12
 801391a:	46bd      	mov	sp, r7
 801391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013920:	4770      	bx	lr
 8013922:	bf00      	nop
 8013924:	20001774 	.word	0x20001774

08013928 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801392e:	f001 fa7b 	bl	8014e28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013932:	2300      	movs	r3, #0
 8013934:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013936:	4b04      	ldr	r3, [pc, #16]	; (8013948 <xTaskGetTickCountFromISR+0x20>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801393c:	683b      	ldr	r3, [r7, #0]
}
 801393e:	4618      	mov	r0, r3
 8013940:	3708      	adds	r7, #8
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	20001774 	.word	0x20001774

0801394c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b086      	sub	sp, #24
 8013950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013952:	2300      	movs	r3, #0
 8013954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013956:	4b4f      	ldr	r3, [pc, #316]	; (8013a94 <xTaskIncrementTick+0x148>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	2b00      	cmp	r3, #0
 801395c:	f040 808f 	bne.w	8013a7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013960:	4b4d      	ldr	r3, [pc, #308]	; (8013a98 <xTaskIncrementTick+0x14c>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	3301      	adds	r3, #1
 8013966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013968:	4a4b      	ldr	r2, [pc, #300]	; (8013a98 <xTaskIncrementTick+0x14c>)
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d120      	bne.n	80139b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013974:	4b49      	ldr	r3, [pc, #292]	; (8013a9c <xTaskIncrementTick+0x150>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00a      	beq.n	8013994 <xTaskIncrementTick+0x48>
	__asm volatile
 801397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013982:	f383 8811 	msr	BASEPRI, r3
 8013986:	f3bf 8f6f 	isb	sy
 801398a:	f3bf 8f4f 	dsb	sy
 801398e:	603b      	str	r3, [r7, #0]
}
 8013990:	bf00      	nop
 8013992:	e7fe      	b.n	8013992 <xTaskIncrementTick+0x46>
 8013994:	4b41      	ldr	r3, [pc, #260]	; (8013a9c <xTaskIncrementTick+0x150>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	60fb      	str	r3, [r7, #12]
 801399a:	4b41      	ldr	r3, [pc, #260]	; (8013aa0 <xTaskIncrementTick+0x154>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	4a3f      	ldr	r2, [pc, #252]	; (8013a9c <xTaskIncrementTick+0x150>)
 80139a0:	6013      	str	r3, [r2, #0]
 80139a2:	4a3f      	ldr	r2, [pc, #252]	; (8013aa0 <xTaskIncrementTick+0x154>)
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	4b3e      	ldr	r3, [pc, #248]	; (8013aa4 <xTaskIncrementTick+0x158>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	3301      	adds	r3, #1
 80139ae:	4a3d      	ldr	r2, [pc, #244]	; (8013aa4 <xTaskIncrementTick+0x158>)
 80139b0:	6013      	str	r3, [r2, #0]
 80139b2:	f000 fadb 	bl	8013f6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80139b6:	4b3c      	ldr	r3, [pc, #240]	; (8013aa8 <xTaskIncrementTick+0x15c>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	693a      	ldr	r2, [r7, #16]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d349      	bcc.n	8013a54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139c0:	4b36      	ldr	r3, [pc, #216]	; (8013a9c <xTaskIncrementTick+0x150>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d104      	bne.n	80139d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139ca:	4b37      	ldr	r3, [pc, #220]	; (8013aa8 <xTaskIncrementTick+0x15c>)
 80139cc:	f04f 32ff 	mov.w	r2, #4294967295
 80139d0:	601a      	str	r2, [r3, #0]
					break;
 80139d2:	e03f      	b.n	8013a54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139d4:	4b31      	ldr	r3, [pc, #196]	; (8013a9c <xTaskIncrementTick+0x150>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80139e4:	693a      	ldr	r2, [r7, #16]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d203      	bcs.n	80139f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80139ec:	4a2e      	ldr	r2, [pc, #184]	; (8013aa8 <xTaskIncrementTick+0x15c>)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80139f2:	e02f      	b.n	8013a54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	3304      	adds	r3, #4
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fe fc45 	bl	8012288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d004      	beq.n	8013a10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	3318      	adds	r3, #24
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fe fc3c 	bl	8012288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a14:	4b25      	ldr	r3, [pc, #148]	; (8013aac <xTaskIncrementTick+0x160>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d903      	bls.n	8013a24 <xTaskIncrementTick+0xd8>
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a20:	4a22      	ldr	r2, [pc, #136]	; (8013aac <xTaskIncrementTick+0x160>)
 8013a22:	6013      	str	r3, [r2, #0]
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a28:	4613      	mov	r3, r2
 8013a2a:	009b      	lsls	r3, r3, #2
 8013a2c:	4413      	add	r3, r2
 8013a2e:	009b      	lsls	r3, r3, #2
 8013a30:	4a1f      	ldr	r2, [pc, #124]	; (8013ab0 <xTaskIncrementTick+0x164>)
 8013a32:	441a      	add	r2, r3
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	3304      	adds	r3, #4
 8013a38:	4619      	mov	r1, r3
 8013a3a:	4610      	mov	r0, r2
 8013a3c:	f7fe fbc7 	bl	80121ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a44:	4b1b      	ldr	r3, [pc, #108]	; (8013ab4 <xTaskIncrementTick+0x168>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d3b8      	bcc.n	80139c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a52:	e7b5      	b.n	80139c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013a54:	4b17      	ldr	r3, [pc, #92]	; (8013ab4 <xTaskIncrementTick+0x168>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a5a:	4915      	ldr	r1, [pc, #84]	; (8013ab0 <xTaskIncrementTick+0x164>)
 8013a5c:	4613      	mov	r3, r2
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	4413      	add	r3, r2
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	440b      	add	r3, r1
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d901      	bls.n	8013a70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013a70:	4b11      	ldr	r3, [pc, #68]	; (8013ab8 <xTaskIncrementTick+0x16c>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d007      	beq.n	8013a88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	617b      	str	r3, [r7, #20]
 8013a7c:	e004      	b.n	8013a88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013a7e:	4b0f      	ldr	r3, [pc, #60]	; (8013abc <xTaskIncrementTick+0x170>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	3301      	adds	r3, #1
 8013a84:	4a0d      	ldr	r2, [pc, #52]	; (8013abc <xTaskIncrementTick+0x170>)
 8013a86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013a88:	697b      	ldr	r3, [r7, #20]
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3718      	adds	r7, #24
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	20001798 	.word	0x20001798
 8013a98:	20001774 	.word	0x20001774
 8013a9c:	20001728 	.word	0x20001728
 8013aa0:	2000172c 	.word	0x2000172c
 8013aa4:	20001788 	.word	0x20001788
 8013aa8:	20001790 	.word	0x20001790
 8013aac:	20001778 	.word	0x20001778
 8013ab0:	200012a0 	.word	0x200012a0
 8013ab4:	2000129c 	.word	0x2000129c
 8013ab8:	20001784 	.word	0x20001784
 8013abc:	20001780 	.word	0x20001780

08013ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013ac0:	b480      	push	{r7}
 8013ac2:	b085      	sub	sp, #20
 8013ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013ac6:	4b2a      	ldr	r3, [pc, #168]	; (8013b70 <vTaskSwitchContext+0xb0>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d003      	beq.n	8013ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013ace:	4b29      	ldr	r3, [pc, #164]	; (8013b74 <vTaskSwitchContext+0xb4>)
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ad4:	e046      	b.n	8013b64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013ad6:	4b27      	ldr	r3, [pc, #156]	; (8013b74 <vTaskSwitchContext+0xb4>)
 8013ad8:	2200      	movs	r2, #0
 8013ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013adc:	4b26      	ldr	r3, [pc, #152]	; (8013b78 <vTaskSwitchContext+0xb8>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	60fb      	str	r3, [r7, #12]
 8013ae2:	e010      	b.n	8013b06 <vTaskSwitchContext+0x46>
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d10a      	bne.n	8013b00 <vTaskSwitchContext+0x40>
	__asm volatile
 8013aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aee:	f383 8811 	msr	BASEPRI, r3
 8013af2:	f3bf 8f6f 	isb	sy
 8013af6:	f3bf 8f4f 	dsb	sy
 8013afa:	607b      	str	r3, [r7, #4]
}
 8013afc:	bf00      	nop
 8013afe:	e7fe      	b.n	8013afe <vTaskSwitchContext+0x3e>
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	3b01      	subs	r3, #1
 8013b04:	60fb      	str	r3, [r7, #12]
 8013b06:	491d      	ldr	r1, [pc, #116]	; (8013b7c <vTaskSwitchContext+0xbc>)
 8013b08:	68fa      	ldr	r2, [r7, #12]
 8013b0a:	4613      	mov	r3, r2
 8013b0c:	009b      	lsls	r3, r3, #2
 8013b0e:	4413      	add	r3, r2
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	440b      	add	r3, r1
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d0e4      	beq.n	8013ae4 <vTaskSwitchContext+0x24>
 8013b1a:	68fa      	ldr	r2, [r7, #12]
 8013b1c:	4613      	mov	r3, r2
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	4413      	add	r3, r2
 8013b22:	009b      	lsls	r3, r3, #2
 8013b24:	4a15      	ldr	r2, [pc, #84]	; (8013b7c <vTaskSwitchContext+0xbc>)
 8013b26:	4413      	add	r3, r2
 8013b28:	60bb      	str	r3, [r7, #8]
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	685a      	ldr	r2, [r3, #4]
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	605a      	str	r2, [r3, #4]
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	685a      	ldr	r2, [r3, #4]
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	3308      	adds	r3, #8
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d104      	bne.n	8013b4a <vTaskSwitchContext+0x8a>
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	685a      	ldr	r2, [r3, #4]
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	605a      	str	r2, [r3, #4]
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	68db      	ldr	r3, [r3, #12]
 8013b50:	4a0b      	ldr	r2, [pc, #44]	; (8013b80 <vTaskSwitchContext+0xc0>)
 8013b52:	6013      	str	r3, [r2, #0]
 8013b54:	4a08      	ldr	r2, [pc, #32]	; (8013b78 <vTaskSwitchContext+0xb8>)
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013b5a:	4b09      	ldr	r3, [pc, #36]	; (8013b80 <vTaskSwitchContext+0xc0>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	3354      	adds	r3, #84	; 0x54
 8013b60:	4a08      	ldr	r2, [pc, #32]	; (8013b84 <vTaskSwitchContext+0xc4>)
 8013b62:	6013      	str	r3, [r2, #0]
}
 8013b64:	bf00      	nop
 8013b66:	3714      	adds	r7, #20
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr
 8013b70:	20001798 	.word	0x20001798
 8013b74:	20001784 	.word	0x20001784
 8013b78:	20001778 	.word	0x20001778
 8013b7c:	200012a0 	.word	0x200012a0
 8013b80:	2000129c 	.word	0x2000129c
 8013b84:	20000140 	.word	0x20000140

08013b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d10a      	bne.n	8013bae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9c:	f383 8811 	msr	BASEPRI, r3
 8013ba0:	f3bf 8f6f 	isb	sy
 8013ba4:	f3bf 8f4f 	dsb	sy
 8013ba8:	60fb      	str	r3, [r7, #12]
}
 8013baa:	bf00      	nop
 8013bac:	e7fe      	b.n	8013bac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013bae:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <vTaskPlaceOnEventList+0x44>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	3318      	adds	r3, #24
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f7fe fb2d 	bl	8012216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013bbc:	2101      	movs	r1, #1
 8013bbe:	6838      	ldr	r0, [r7, #0]
 8013bc0:	f000 fb7e 	bl	80142c0 <prvAddCurrentTaskToDelayedList>
}
 8013bc4:	bf00      	nop
 8013bc6:	3710      	adds	r7, #16
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	2000129c 	.word	0x2000129c

08013bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b086      	sub	sp, #24
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d10a      	bne.n	8013bf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be6:	f383 8811 	msr	BASEPRI, r3
 8013bea:	f3bf 8f6f 	isb	sy
 8013bee:	f3bf 8f4f 	dsb	sy
 8013bf2:	617b      	str	r3, [r7, #20]
}
 8013bf4:	bf00      	nop
 8013bf6:	e7fe      	b.n	8013bf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013bf8:	4b0a      	ldr	r3, [pc, #40]	; (8013c24 <vTaskPlaceOnEventListRestricted+0x54>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	3318      	adds	r3, #24
 8013bfe:	4619      	mov	r1, r3
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f7fe fae4 	bl	80121ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013c12:	6879      	ldr	r1, [r7, #4]
 8013c14:	68b8      	ldr	r0, [r7, #8]
 8013c16:	f000 fb53 	bl	80142c0 <prvAddCurrentTaskToDelayedList>
	}
 8013c1a:	bf00      	nop
 8013c1c:	3718      	adds	r7, #24
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	2000129c 	.word	0x2000129c

08013c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b086      	sub	sp, #24
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	68db      	ldr	r3, [r3, #12]
 8013c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d10a      	bne.n	8013c54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c42:	f383 8811 	msr	BASEPRI, r3
 8013c46:	f3bf 8f6f 	isb	sy
 8013c4a:	f3bf 8f4f 	dsb	sy
 8013c4e:	60fb      	str	r3, [r7, #12]
}
 8013c50:	bf00      	nop
 8013c52:	e7fe      	b.n	8013c52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	3318      	adds	r3, #24
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7fe fb15 	bl	8012288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c5e:	4b1e      	ldr	r3, [pc, #120]	; (8013cd8 <xTaskRemoveFromEventList+0xb0>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d11d      	bne.n	8013ca2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	3304      	adds	r3, #4
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fe fb0c 	bl	8012288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c74:	4b19      	ldr	r3, [pc, #100]	; (8013cdc <xTaskRemoveFromEventList+0xb4>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d903      	bls.n	8013c84 <xTaskRemoveFromEventList+0x5c>
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c80:	4a16      	ldr	r2, [pc, #88]	; (8013cdc <xTaskRemoveFromEventList+0xb4>)
 8013c82:	6013      	str	r3, [r2, #0]
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c88:	4613      	mov	r3, r2
 8013c8a:	009b      	lsls	r3, r3, #2
 8013c8c:	4413      	add	r3, r2
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	4a13      	ldr	r2, [pc, #76]	; (8013ce0 <xTaskRemoveFromEventList+0xb8>)
 8013c92:	441a      	add	r2, r3
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	3304      	adds	r3, #4
 8013c98:	4619      	mov	r1, r3
 8013c9a:	4610      	mov	r0, r2
 8013c9c:	f7fe fa97 	bl	80121ce <vListInsertEnd>
 8013ca0:	e005      	b.n	8013cae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	3318      	adds	r3, #24
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	480e      	ldr	r0, [pc, #56]	; (8013ce4 <xTaskRemoveFromEventList+0xbc>)
 8013caa:	f7fe fa90 	bl	80121ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cb2:	4b0d      	ldr	r3, [pc, #52]	; (8013ce8 <xTaskRemoveFromEventList+0xc0>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d905      	bls.n	8013cc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013cc0:	4b0a      	ldr	r3, [pc, #40]	; (8013cec <xTaskRemoveFromEventList+0xc4>)
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	601a      	str	r2, [r3, #0]
 8013cc6:	e001      	b.n	8013ccc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013cc8:	2300      	movs	r3, #0
 8013cca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013ccc:	697b      	ldr	r3, [r7, #20]
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3718      	adds	r7, #24
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	20001798 	.word	0x20001798
 8013cdc:	20001778 	.word	0x20001778
 8013ce0:	200012a0 	.word	0x200012a0
 8013ce4:	20001730 	.word	0x20001730
 8013ce8:	2000129c 	.word	0x2000129c
 8013cec:	20001784 	.word	0x20001784

08013cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b083      	sub	sp, #12
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013cf8:	4b06      	ldr	r3, [pc, #24]	; (8013d14 <vTaskInternalSetTimeOutState+0x24>)
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013d00:	4b05      	ldr	r3, [pc, #20]	; (8013d18 <vTaskInternalSetTimeOutState+0x28>)
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	605a      	str	r2, [r3, #4]
}
 8013d08:	bf00      	nop
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr
 8013d14:	20001788 	.word	0x20001788
 8013d18:	20001774 	.word	0x20001774

08013d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b088      	sub	sp, #32
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d10a      	bne.n	8013d42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d30:	f383 8811 	msr	BASEPRI, r3
 8013d34:	f3bf 8f6f 	isb	sy
 8013d38:	f3bf 8f4f 	dsb	sy
 8013d3c:	613b      	str	r3, [r7, #16]
}
 8013d3e:	bf00      	nop
 8013d40:	e7fe      	b.n	8013d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d10a      	bne.n	8013d5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4c:	f383 8811 	msr	BASEPRI, r3
 8013d50:	f3bf 8f6f 	isb	sy
 8013d54:	f3bf 8f4f 	dsb	sy
 8013d58:	60fb      	str	r3, [r7, #12]
}
 8013d5a:	bf00      	nop
 8013d5c:	e7fe      	b.n	8013d5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013d5e:	f000 ff81 	bl	8014c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013d62:	4b1d      	ldr	r3, [pc, #116]	; (8013dd8 <xTaskCheckForTimeOut+0xbc>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	69ba      	ldr	r2, [r7, #24]
 8013d6e:	1ad3      	subs	r3, r2, r3
 8013d70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d7a:	d102      	bne.n	8013d82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	61fb      	str	r3, [r7, #28]
 8013d80:	e023      	b.n	8013dca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	4b15      	ldr	r3, [pc, #84]	; (8013ddc <xTaskCheckForTimeOut+0xc0>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d007      	beq.n	8013d9e <xTaskCheckForTimeOut+0x82>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	69ba      	ldr	r2, [r7, #24]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d302      	bcc.n	8013d9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d98:	2301      	movs	r3, #1
 8013d9a:	61fb      	str	r3, [r7, #28]
 8013d9c:	e015      	b.n	8013dca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	697a      	ldr	r2, [r7, #20]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d20b      	bcs.n	8013dc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013da8:	683b      	ldr	r3, [r7, #0]
 8013daa:	681a      	ldr	r2, [r3, #0]
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	1ad2      	subs	r2, r2, r3
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f7ff ff9b 	bl	8013cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	61fb      	str	r3, [r7, #28]
 8013dbe:	e004      	b.n	8013dca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013dca:	f000 ff7b 	bl	8014cc4 <vPortExitCritical>

	return xReturn;
 8013dce:	69fb      	ldr	r3, [r7, #28]
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3720      	adds	r7, #32
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20001774 	.word	0x20001774
 8013ddc:	20001788 	.word	0x20001788

08013de0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013de0:	b480      	push	{r7}
 8013de2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013de4:	4b03      	ldr	r3, [pc, #12]	; (8013df4 <vTaskMissedYield+0x14>)
 8013de6:	2201      	movs	r2, #1
 8013de8:	601a      	str	r2, [r3, #0]
}
 8013dea:	bf00      	nop
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr
 8013df4:	20001784 	.word	0x20001784

08013df8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b082      	sub	sp, #8
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013e00:	f000 f852 	bl	8013ea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013e04:	4b06      	ldr	r3, [pc, #24]	; (8013e20 <prvIdleTask+0x28>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d9f9      	bls.n	8013e00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013e0c:	4b05      	ldr	r3, [pc, #20]	; (8013e24 <prvIdleTask+0x2c>)
 8013e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e12:	601a      	str	r2, [r3, #0]
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013e1c:	e7f0      	b.n	8013e00 <prvIdleTask+0x8>
 8013e1e:	bf00      	nop
 8013e20:	200012a0 	.word	0x200012a0
 8013e24:	e000ed04 	.word	0xe000ed04

08013e28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e2e:	2300      	movs	r3, #0
 8013e30:	607b      	str	r3, [r7, #4]
 8013e32:	e00c      	b.n	8013e4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	4613      	mov	r3, r2
 8013e38:	009b      	lsls	r3, r3, #2
 8013e3a:	4413      	add	r3, r2
 8013e3c:	009b      	lsls	r3, r3, #2
 8013e3e:	4a12      	ldr	r2, [pc, #72]	; (8013e88 <prvInitialiseTaskLists+0x60>)
 8013e40:	4413      	add	r3, r2
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fe f996 	bl	8012174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	607b      	str	r3, [r7, #4]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2b37      	cmp	r3, #55	; 0x37
 8013e52:	d9ef      	bls.n	8013e34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013e54:	480d      	ldr	r0, [pc, #52]	; (8013e8c <prvInitialiseTaskLists+0x64>)
 8013e56:	f7fe f98d 	bl	8012174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013e5a:	480d      	ldr	r0, [pc, #52]	; (8013e90 <prvInitialiseTaskLists+0x68>)
 8013e5c:	f7fe f98a 	bl	8012174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013e60:	480c      	ldr	r0, [pc, #48]	; (8013e94 <prvInitialiseTaskLists+0x6c>)
 8013e62:	f7fe f987 	bl	8012174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013e66:	480c      	ldr	r0, [pc, #48]	; (8013e98 <prvInitialiseTaskLists+0x70>)
 8013e68:	f7fe f984 	bl	8012174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013e6c:	480b      	ldr	r0, [pc, #44]	; (8013e9c <prvInitialiseTaskLists+0x74>)
 8013e6e:	f7fe f981 	bl	8012174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e72:	4b0b      	ldr	r3, [pc, #44]	; (8013ea0 <prvInitialiseTaskLists+0x78>)
 8013e74:	4a05      	ldr	r2, [pc, #20]	; (8013e8c <prvInitialiseTaskLists+0x64>)
 8013e76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e78:	4b0a      	ldr	r3, [pc, #40]	; (8013ea4 <prvInitialiseTaskLists+0x7c>)
 8013e7a:	4a05      	ldr	r2, [pc, #20]	; (8013e90 <prvInitialiseTaskLists+0x68>)
 8013e7c:	601a      	str	r2, [r3, #0]
}
 8013e7e:	bf00      	nop
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	200012a0 	.word	0x200012a0
 8013e8c:	20001700 	.word	0x20001700
 8013e90:	20001714 	.word	0x20001714
 8013e94:	20001730 	.word	0x20001730
 8013e98:	20001744 	.word	0x20001744
 8013e9c:	2000175c 	.word	0x2000175c
 8013ea0:	20001728 	.word	0x20001728
 8013ea4:	2000172c 	.word	0x2000172c

08013ea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013eae:	e019      	b.n	8013ee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013eb0:	f000 fed8 	bl	8014c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eb4:	4b10      	ldr	r3, [pc, #64]	; (8013ef8 <prvCheckTasksWaitingTermination+0x50>)
 8013eb6:	68db      	ldr	r3, [r3, #12]
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	3304      	adds	r3, #4
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7fe f9e1 	bl	8012288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013ec6:	4b0d      	ldr	r3, [pc, #52]	; (8013efc <prvCheckTasksWaitingTermination+0x54>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	4a0b      	ldr	r2, [pc, #44]	; (8013efc <prvCheckTasksWaitingTermination+0x54>)
 8013ece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013ed0:	4b0b      	ldr	r3, [pc, #44]	; (8013f00 <prvCheckTasksWaitingTermination+0x58>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	3b01      	subs	r3, #1
 8013ed6:	4a0a      	ldr	r2, [pc, #40]	; (8013f00 <prvCheckTasksWaitingTermination+0x58>)
 8013ed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013eda:	f000 fef3 	bl	8014cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f000 f810 	bl	8013f04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013ee4:	4b06      	ldr	r3, [pc, #24]	; (8013f00 <prvCheckTasksWaitingTermination+0x58>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d1e1      	bne.n	8013eb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013eec:	bf00      	nop
 8013eee:	bf00      	nop
 8013ef0:	3708      	adds	r7, #8
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	20001744 	.word	0x20001744
 8013efc:	20001770 	.word	0x20001770
 8013f00:	20001758 	.word	0x20001758

08013f04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	3354      	adds	r3, #84	; 0x54
 8013f10:	4618      	mov	r0, r3
 8013f12:	f00b fcc9 	bl	801f8a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d108      	bne.n	8013f32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f24:	4618      	mov	r0, r3
 8013f26:	f001 f88b 	bl	8015040 <vPortFree>
				vPortFree( pxTCB );
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f001 f888 	bl	8015040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013f30:	e018      	b.n	8013f64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013f38:	2b01      	cmp	r3, #1
 8013f3a:	d103      	bne.n	8013f44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f001 f87f 	bl	8015040 <vPortFree>
	}
 8013f42:	e00f      	b.n	8013f64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013f4a:	2b02      	cmp	r3, #2
 8013f4c:	d00a      	beq.n	8013f64 <prvDeleteTCB+0x60>
	__asm volatile
 8013f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f52:	f383 8811 	msr	BASEPRI, r3
 8013f56:	f3bf 8f6f 	isb	sy
 8013f5a:	f3bf 8f4f 	dsb	sy
 8013f5e:	60fb      	str	r3, [r7, #12]
}
 8013f60:	bf00      	nop
 8013f62:	e7fe      	b.n	8013f62 <prvDeleteTCB+0x5e>
	}
 8013f64:	bf00      	nop
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013f6c:	b480      	push	{r7}
 8013f6e:	b083      	sub	sp, #12
 8013f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f72:	4b0c      	ldr	r3, [pc, #48]	; (8013fa4 <prvResetNextTaskUnblockTime+0x38>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d104      	bne.n	8013f86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f7c:	4b0a      	ldr	r3, [pc, #40]	; (8013fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8013f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013f84:	e008      	b.n	8013f98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f86:	4b07      	ldr	r3, [pc, #28]	; (8013fa4 <prvResetNextTaskUnblockTime+0x38>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	68db      	ldr	r3, [r3, #12]
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	4a04      	ldr	r2, [pc, #16]	; (8013fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8013f96:	6013      	str	r3, [r2, #0]
}
 8013f98:	bf00      	nop
 8013f9a:	370c      	adds	r7, #12
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr
 8013fa4:	20001728 	.word	0x20001728
 8013fa8:	20001790 	.word	0x20001790

08013fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013fac:	b480      	push	{r7}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013fb2:	4b0b      	ldr	r3, [pc, #44]	; (8013fe0 <xTaskGetSchedulerState+0x34>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d102      	bne.n	8013fc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013fba:	2301      	movs	r3, #1
 8013fbc:	607b      	str	r3, [r7, #4]
 8013fbe:	e008      	b.n	8013fd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fc0:	4b08      	ldr	r3, [pc, #32]	; (8013fe4 <xTaskGetSchedulerState+0x38>)
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d102      	bne.n	8013fce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013fc8:	2302      	movs	r3, #2
 8013fca:	607b      	str	r3, [r7, #4]
 8013fcc:	e001      	b.n	8013fd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013fd2:	687b      	ldr	r3, [r7, #4]
	}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	370c      	adds	r7, #12
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr
 8013fe0:	2000177c 	.word	0x2000177c
 8013fe4:	20001798 	.word	0x20001798

08013fe8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d051      	beq.n	80140a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014002:	4b2a      	ldr	r3, [pc, #168]	; (80140ac <xTaskPriorityInherit+0xc4>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014008:	429a      	cmp	r2, r3
 801400a:	d241      	bcs.n	8014090 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	699b      	ldr	r3, [r3, #24]
 8014010:	2b00      	cmp	r3, #0
 8014012:	db06      	blt.n	8014022 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014014:	4b25      	ldr	r3, [pc, #148]	; (80140ac <xTaskPriorityInherit+0xc4>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801401a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	6959      	ldr	r1, [r3, #20]
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801402a:	4613      	mov	r3, r2
 801402c:	009b      	lsls	r3, r3, #2
 801402e:	4413      	add	r3, r2
 8014030:	009b      	lsls	r3, r3, #2
 8014032:	4a1f      	ldr	r2, [pc, #124]	; (80140b0 <xTaskPriorityInherit+0xc8>)
 8014034:	4413      	add	r3, r2
 8014036:	4299      	cmp	r1, r3
 8014038:	d122      	bne.n	8014080 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	3304      	adds	r3, #4
 801403e:	4618      	mov	r0, r3
 8014040:	f7fe f922 	bl	8012288 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014044:	4b19      	ldr	r3, [pc, #100]	; (80140ac <xTaskPriorityInherit+0xc4>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014052:	4b18      	ldr	r3, [pc, #96]	; (80140b4 <xTaskPriorityInherit+0xcc>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	429a      	cmp	r2, r3
 8014058:	d903      	bls.n	8014062 <xTaskPriorityInherit+0x7a>
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801405e:	4a15      	ldr	r2, [pc, #84]	; (80140b4 <xTaskPriorityInherit+0xcc>)
 8014060:	6013      	str	r3, [r2, #0]
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014066:	4613      	mov	r3, r2
 8014068:	009b      	lsls	r3, r3, #2
 801406a:	4413      	add	r3, r2
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	4a10      	ldr	r2, [pc, #64]	; (80140b0 <xTaskPriorityInherit+0xc8>)
 8014070:	441a      	add	r2, r3
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	3304      	adds	r3, #4
 8014076:	4619      	mov	r1, r3
 8014078:	4610      	mov	r0, r2
 801407a:	f7fe f8a8 	bl	80121ce <vListInsertEnd>
 801407e:	e004      	b.n	801408a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014080:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <xTaskPriorityInherit+0xc4>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801408a:	2301      	movs	r3, #1
 801408c:	60fb      	str	r3, [r7, #12]
 801408e:	e008      	b.n	80140a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014094:	4b05      	ldr	r3, [pc, #20]	; (80140ac <xTaskPriorityInherit+0xc4>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409a:	429a      	cmp	r2, r3
 801409c:	d201      	bcs.n	80140a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801409e:	2301      	movs	r3, #1
 80140a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80140a2:	68fb      	ldr	r3, [r7, #12]
	}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	2000129c 	.word	0x2000129c
 80140b0:	200012a0 	.word	0x200012a0
 80140b4:	20001778 	.word	0x20001778

080140b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b086      	sub	sp, #24
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80140c4:	2300      	movs	r3, #0
 80140c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d056      	beq.n	801417c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80140ce:	4b2e      	ldr	r3, [pc, #184]	; (8014188 <xTaskPriorityDisinherit+0xd0>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	693a      	ldr	r2, [r7, #16]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d00a      	beq.n	80140ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80140d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140dc:	f383 8811 	msr	BASEPRI, r3
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	f3bf 8f4f 	dsb	sy
 80140e8:	60fb      	str	r3, [r7, #12]
}
 80140ea:	bf00      	nop
 80140ec:	e7fe      	b.n	80140ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d10a      	bne.n	801410c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80140f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140fa:	f383 8811 	msr	BASEPRI, r3
 80140fe:	f3bf 8f6f 	isb	sy
 8014102:	f3bf 8f4f 	dsb	sy
 8014106:	60bb      	str	r3, [r7, #8]
}
 8014108:	bf00      	nop
 801410a:	e7fe      	b.n	801410a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014110:	1e5a      	subs	r2, r3, #1
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014116:	693b      	ldr	r3, [r7, #16]
 8014118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801411e:	429a      	cmp	r2, r3
 8014120:	d02c      	beq.n	801417c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014126:	2b00      	cmp	r3, #0
 8014128:	d128      	bne.n	801417c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	3304      	adds	r3, #4
 801412e:	4618      	mov	r0, r3
 8014130:	f7fe f8aa 	bl	8012288 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014134:	693b      	ldr	r3, [r7, #16]
 8014136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014140:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801414c:	4b0f      	ldr	r3, [pc, #60]	; (801418c <xTaskPriorityDisinherit+0xd4>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	429a      	cmp	r2, r3
 8014152:	d903      	bls.n	801415c <xTaskPriorityDisinherit+0xa4>
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014158:	4a0c      	ldr	r2, [pc, #48]	; (801418c <xTaskPriorityDisinherit+0xd4>)
 801415a:	6013      	str	r3, [r2, #0]
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014160:	4613      	mov	r3, r2
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	4413      	add	r3, r2
 8014166:	009b      	lsls	r3, r3, #2
 8014168:	4a09      	ldr	r2, [pc, #36]	; (8014190 <xTaskPriorityDisinherit+0xd8>)
 801416a:	441a      	add	r2, r3
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	3304      	adds	r3, #4
 8014170:	4619      	mov	r1, r3
 8014172:	4610      	mov	r0, r2
 8014174:	f7fe f82b 	bl	80121ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014178:	2301      	movs	r3, #1
 801417a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801417c:	697b      	ldr	r3, [r7, #20]
	}
 801417e:	4618      	mov	r0, r3
 8014180:	3718      	adds	r7, #24
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	2000129c 	.word	0x2000129c
 801418c:	20001778 	.word	0x20001778
 8014190:	200012a0 	.word	0x200012a0

08014194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014194:	b580      	push	{r7, lr}
 8014196:	b088      	sub	sp, #32
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80141a2:	2301      	movs	r3, #1
 80141a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d06a      	beq.n	8014282 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10a      	bne.n	80141ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80141b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b8:	f383 8811 	msr	BASEPRI, r3
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	60fb      	str	r3, [r7, #12]
}
 80141c6:	bf00      	nop
 80141c8:	e7fe      	b.n	80141c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141ce:	683a      	ldr	r2, [r7, #0]
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d902      	bls.n	80141da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	61fb      	str	r3, [r7, #28]
 80141d8:	e002      	b.n	80141e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e4:	69fa      	ldr	r2, [r7, #28]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d04b      	beq.n	8014282 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141ee:	697a      	ldr	r2, [r7, #20]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d146      	bne.n	8014282 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80141f4:	4b25      	ldr	r3, [pc, #148]	; (801428c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	69ba      	ldr	r2, [r7, #24]
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d10a      	bne.n	8014214 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80141fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014202:	f383 8811 	msr	BASEPRI, r3
 8014206:	f3bf 8f6f 	isb	sy
 801420a:	f3bf 8f4f 	dsb	sy
 801420e:	60bb      	str	r3, [r7, #8]
}
 8014210:	bf00      	nop
 8014212:	e7fe      	b.n	8014212 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014218:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801421a:	69bb      	ldr	r3, [r7, #24]
 801421c:	69fa      	ldr	r2, [r7, #28]
 801421e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	699b      	ldr	r3, [r3, #24]
 8014224:	2b00      	cmp	r3, #0
 8014226:	db04      	blt.n	8014232 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801422e:	69bb      	ldr	r3, [r7, #24]
 8014230:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	6959      	ldr	r1, [r3, #20]
 8014236:	693a      	ldr	r2, [r7, #16]
 8014238:	4613      	mov	r3, r2
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	4413      	add	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	4a13      	ldr	r2, [pc, #76]	; (8014290 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014242:	4413      	add	r3, r2
 8014244:	4299      	cmp	r1, r3
 8014246:	d11c      	bne.n	8014282 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014248:	69bb      	ldr	r3, [r7, #24]
 801424a:	3304      	adds	r3, #4
 801424c:	4618      	mov	r0, r3
 801424e:	f7fe f81b 	bl	8012288 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014252:	69bb      	ldr	r3, [r7, #24]
 8014254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014256:	4b0f      	ldr	r3, [pc, #60]	; (8014294 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	429a      	cmp	r2, r3
 801425c:	d903      	bls.n	8014266 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801425e:	69bb      	ldr	r3, [r7, #24]
 8014260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014262:	4a0c      	ldr	r2, [pc, #48]	; (8014294 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014264:	6013      	str	r3, [r2, #0]
 8014266:	69bb      	ldr	r3, [r7, #24]
 8014268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801426a:	4613      	mov	r3, r2
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	4413      	add	r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	4a07      	ldr	r2, [pc, #28]	; (8014290 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014274:	441a      	add	r2, r3
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	3304      	adds	r3, #4
 801427a:	4619      	mov	r1, r3
 801427c:	4610      	mov	r0, r2
 801427e:	f7fd ffa6 	bl	80121ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014282:	bf00      	nop
 8014284:	3720      	adds	r7, #32
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	2000129c 	.word	0x2000129c
 8014290:	200012a0 	.word	0x200012a0
 8014294:	20001778 	.word	0x20001778

08014298 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014298:	b480      	push	{r7}
 801429a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801429c:	4b07      	ldr	r3, [pc, #28]	; (80142bc <pvTaskIncrementMutexHeldCount+0x24>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d004      	beq.n	80142ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80142a4:	4b05      	ldr	r3, [pc, #20]	; (80142bc <pvTaskIncrementMutexHeldCount+0x24>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142aa:	3201      	adds	r2, #1
 80142ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80142ae:	4b03      	ldr	r3, [pc, #12]	; (80142bc <pvTaskIncrementMutexHeldCount+0x24>)
 80142b0:	681b      	ldr	r3, [r3, #0]
	}
 80142b2:	4618      	mov	r0, r3
 80142b4:	46bd      	mov	sp, r7
 80142b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ba:	4770      	bx	lr
 80142bc:	2000129c 	.word	0x2000129c

080142c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80142ca:	4b21      	ldr	r3, [pc, #132]	; (8014350 <prvAddCurrentTaskToDelayedList+0x90>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80142d0:	4b20      	ldr	r3, [pc, #128]	; (8014354 <prvAddCurrentTaskToDelayedList+0x94>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	3304      	adds	r3, #4
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7fd ffd6 	bl	8012288 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142e2:	d10a      	bne.n	80142fa <prvAddCurrentTaskToDelayedList+0x3a>
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d007      	beq.n	80142fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80142ea:	4b1a      	ldr	r3, [pc, #104]	; (8014354 <prvAddCurrentTaskToDelayedList+0x94>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	3304      	adds	r3, #4
 80142f0:	4619      	mov	r1, r3
 80142f2:	4819      	ldr	r0, [pc, #100]	; (8014358 <prvAddCurrentTaskToDelayedList+0x98>)
 80142f4:	f7fd ff6b 	bl	80121ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80142f8:	e026      	b.n	8014348 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80142fa:	68fa      	ldr	r2, [r7, #12]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	4413      	add	r3, r2
 8014300:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014302:	4b14      	ldr	r3, [pc, #80]	; (8014354 <prvAddCurrentTaskToDelayedList+0x94>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	68ba      	ldr	r2, [r7, #8]
 8014308:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801430a:	68ba      	ldr	r2, [r7, #8]
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	429a      	cmp	r2, r3
 8014310:	d209      	bcs.n	8014326 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014312:	4b12      	ldr	r3, [pc, #72]	; (801435c <prvAddCurrentTaskToDelayedList+0x9c>)
 8014314:	681a      	ldr	r2, [r3, #0]
 8014316:	4b0f      	ldr	r3, [pc, #60]	; (8014354 <prvAddCurrentTaskToDelayedList+0x94>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	3304      	adds	r3, #4
 801431c:	4619      	mov	r1, r3
 801431e:	4610      	mov	r0, r2
 8014320:	f7fd ff79 	bl	8012216 <vListInsert>
}
 8014324:	e010      	b.n	8014348 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014326:	4b0e      	ldr	r3, [pc, #56]	; (8014360 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014328:	681a      	ldr	r2, [r3, #0]
 801432a:	4b0a      	ldr	r3, [pc, #40]	; (8014354 <prvAddCurrentTaskToDelayedList+0x94>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	3304      	adds	r3, #4
 8014330:	4619      	mov	r1, r3
 8014332:	4610      	mov	r0, r2
 8014334:	f7fd ff6f 	bl	8012216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014338:	4b0a      	ldr	r3, [pc, #40]	; (8014364 <prvAddCurrentTaskToDelayedList+0xa4>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	68ba      	ldr	r2, [r7, #8]
 801433e:	429a      	cmp	r2, r3
 8014340:	d202      	bcs.n	8014348 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014342:	4a08      	ldr	r2, [pc, #32]	; (8014364 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	6013      	str	r3, [r2, #0]
}
 8014348:	bf00      	nop
 801434a:	3710      	adds	r7, #16
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	20001774 	.word	0x20001774
 8014354:	2000129c 	.word	0x2000129c
 8014358:	2000175c 	.word	0x2000175c
 801435c:	2000172c 	.word	0x2000172c
 8014360:	20001728 	.word	0x20001728
 8014364:	20001790 	.word	0x20001790

08014368 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b08a      	sub	sp, #40	; 0x28
 801436c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801436e:	2300      	movs	r3, #0
 8014370:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014372:	f000 fb07 	bl	8014984 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014376:	4b1c      	ldr	r3, [pc, #112]	; (80143e8 <xTimerCreateTimerTask+0x80>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d021      	beq.n	80143c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801437e:	2300      	movs	r3, #0
 8014380:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014382:	2300      	movs	r3, #0
 8014384:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014386:	1d3a      	adds	r2, r7, #4
 8014388:	f107 0108 	add.w	r1, r7, #8
 801438c:	f107 030c 	add.w	r3, r7, #12
 8014390:	4618      	mov	r0, r3
 8014392:	f7fd fed5 	bl	8012140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014396:	6879      	ldr	r1, [r7, #4]
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	68fa      	ldr	r2, [r7, #12]
 801439c:	9202      	str	r2, [sp, #8]
 801439e:	9301      	str	r3, [sp, #4]
 80143a0:	2302      	movs	r3, #2
 80143a2:	9300      	str	r3, [sp, #0]
 80143a4:	2300      	movs	r3, #0
 80143a6:	460a      	mov	r2, r1
 80143a8:	4910      	ldr	r1, [pc, #64]	; (80143ec <xTimerCreateTimerTask+0x84>)
 80143aa:	4811      	ldr	r0, [pc, #68]	; (80143f0 <xTimerCreateTimerTask+0x88>)
 80143ac:	f7fe ffa4 	bl	80132f8 <xTaskCreateStatic>
 80143b0:	4603      	mov	r3, r0
 80143b2:	4a10      	ldr	r2, [pc, #64]	; (80143f4 <xTimerCreateTimerTask+0x8c>)
 80143b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80143b6:	4b0f      	ldr	r3, [pc, #60]	; (80143f4 <xTimerCreateTimerTask+0x8c>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d001      	beq.n	80143c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80143be:	2301      	movs	r3, #1
 80143c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d10a      	bne.n	80143de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80143c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143cc:	f383 8811 	msr	BASEPRI, r3
 80143d0:	f3bf 8f6f 	isb	sy
 80143d4:	f3bf 8f4f 	dsb	sy
 80143d8:	613b      	str	r3, [r7, #16]
}
 80143da:	bf00      	nop
 80143dc:	e7fe      	b.n	80143dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80143de:	697b      	ldr	r3, [r7, #20]
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3718      	adds	r7, #24
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	200017cc 	.word	0x200017cc
 80143ec:	08021900 	.word	0x08021900
 80143f0:	0801452d 	.word	0x0801452d
 80143f4:	200017d0 	.word	0x200017d0

080143f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b08a      	sub	sp, #40	; 0x28
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	60f8      	str	r0, [r7, #12]
 8014400:	60b9      	str	r1, [r7, #8]
 8014402:	607a      	str	r2, [r7, #4]
 8014404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014406:	2300      	movs	r3, #0
 8014408:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d10a      	bne.n	8014426 <xTimerGenericCommand+0x2e>
	__asm volatile
 8014410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014414:	f383 8811 	msr	BASEPRI, r3
 8014418:	f3bf 8f6f 	isb	sy
 801441c:	f3bf 8f4f 	dsb	sy
 8014420:	623b      	str	r3, [r7, #32]
}
 8014422:	bf00      	nop
 8014424:	e7fe      	b.n	8014424 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014426:	4b1a      	ldr	r3, [pc, #104]	; (8014490 <xTimerGenericCommand+0x98>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d02a      	beq.n	8014484 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	2b05      	cmp	r3, #5
 801443e:	dc18      	bgt.n	8014472 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014440:	f7ff fdb4 	bl	8013fac <xTaskGetSchedulerState>
 8014444:	4603      	mov	r3, r0
 8014446:	2b02      	cmp	r3, #2
 8014448:	d109      	bne.n	801445e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801444a:	4b11      	ldr	r3, [pc, #68]	; (8014490 <xTimerGenericCommand+0x98>)
 801444c:	6818      	ldr	r0, [r3, #0]
 801444e:	f107 0110 	add.w	r1, r7, #16
 8014452:	2300      	movs	r3, #0
 8014454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014456:	f7fe f8e9 	bl	801262c <xQueueGenericSend>
 801445a:	6278      	str	r0, [r7, #36]	; 0x24
 801445c:	e012      	b.n	8014484 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801445e:	4b0c      	ldr	r3, [pc, #48]	; (8014490 <xTimerGenericCommand+0x98>)
 8014460:	6818      	ldr	r0, [r3, #0]
 8014462:	f107 0110 	add.w	r1, r7, #16
 8014466:	2300      	movs	r3, #0
 8014468:	2200      	movs	r2, #0
 801446a:	f7fe f8df 	bl	801262c <xQueueGenericSend>
 801446e:	6278      	str	r0, [r7, #36]	; 0x24
 8014470:	e008      	b.n	8014484 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014472:	4b07      	ldr	r3, [pc, #28]	; (8014490 <xTimerGenericCommand+0x98>)
 8014474:	6818      	ldr	r0, [r3, #0]
 8014476:	f107 0110 	add.w	r1, r7, #16
 801447a:	2300      	movs	r3, #0
 801447c:	683a      	ldr	r2, [r7, #0]
 801447e:	f7fe f9d3 	bl	8012828 <xQueueGenericSendFromISR>
 8014482:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014486:	4618      	mov	r0, r3
 8014488:	3728      	adds	r7, #40	; 0x28
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	200017cc 	.word	0x200017cc

08014494 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b088      	sub	sp, #32
 8014498:	af02      	add	r7, sp, #8
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801449e:	4b22      	ldr	r3, [pc, #136]	; (8014528 <prvProcessExpiredTimer+0x94>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	68db      	ldr	r3, [r3, #12]
 80144a4:	68db      	ldr	r3, [r3, #12]
 80144a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	3304      	adds	r3, #4
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fd feeb 	bl	8012288 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80144b8:	f003 0304 	and.w	r3, r3, #4
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d022      	beq.n	8014506 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	699a      	ldr	r2, [r3, #24]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	18d1      	adds	r1, r2, r3
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	683a      	ldr	r2, [r7, #0]
 80144cc:	6978      	ldr	r0, [r7, #20]
 80144ce:	f000 f8d1 	bl	8014674 <prvInsertTimerInActiveList>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d01f      	beq.n	8014518 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80144d8:	2300      	movs	r3, #0
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	2300      	movs	r3, #0
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	2100      	movs	r1, #0
 80144e2:	6978      	ldr	r0, [r7, #20]
 80144e4:	f7ff ff88 	bl	80143f8 <xTimerGenericCommand>
 80144e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d113      	bne.n	8014518 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80144f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f4:	f383 8811 	msr	BASEPRI, r3
 80144f8:	f3bf 8f6f 	isb	sy
 80144fc:	f3bf 8f4f 	dsb	sy
 8014500:	60fb      	str	r3, [r7, #12]
}
 8014502:	bf00      	nop
 8014504:	e7fe      	b.n	8014504 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014506:	697b      	ldr	r3, [r7, #20]
 8014508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801450c:	f023 0301 	bic.w	r3, r3, #1
 8014510:	b2da      	uxtb	r2, r3
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	6a1b      	ldr	r3, [r3, #32]
 801451c:	6978      	ldr	r0, [r7, #20]
 801451e:	4798      	blx	r3
}
 8014520:	bf00      	nop
 8014522:	3718      	adds	r7, #24
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	200017c4 	.word	0x200017c4

0801452c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014534:	f107 0308 	add.w	r3, r7, #8
 8014538:	4618      	mov	r0, r3
 801453a:	f000 f857 	bl	80145ec <prvGetNextExpireTime>
 801453e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	4619      	mov	r1, r3
 8014544:	68f8      	ldr	r0, [r7, #12]
 8014546:	f000 f803 	bl	8014550 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801454a:	f000 f8d5 	bl	80146f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801454e:	e7f1      	b.n	8014534 <prvTimerTask+0x8>

08014550 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801455a:	f7ff f929 	bl	80137b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801455e:	f107 0308 	add.w	r3, r7, #8
 8014562:	4618      	mov	r0, r3
 8014564:	f000 f866 	bl	8014634 <prvSampleTimeNow>
 8014568:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d130      	bne.n	80145d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d10a      	bne.n	801458c <prvProcessTimerOrBlockTask+0x3c>
 8014576:	687a      	ldr	r2, [r7, #4]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	429a      	cmp	r2, r3
 801457c:	d806      	bhi.n	801458c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801457e:	f7ff f925 	bl	80137cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014582:	68f9      	ldr	r1, [r7, #12]
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f7ff ff85 	bl	8014494 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801458a:	e024      	b.n	80145d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d008      	beq.n	80145a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014592:	4b13      	ldr	r3, [pc, #76]	; (80145e0 <prvProcessTimerOrBlockTask+0x90>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d101      	bne.n	80145a0 <prvProcessTimerOrBlockTask+0x50>
 801459c:	2301      	movs	r3, #1
 801459e:	e000      	b.n	80145a2 <prvProcessTimerOrBlockTask+0x52>
 80145a0:	2300      	movs	r3, #0
 80145a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80145a4:	4b0f      	ldr	r3, [pc, #60]	; (80145e4 <prvProcessTimerOrBlockTask+0x94>)
 80145a6:	6818      	ldr	r0, [r3, #0]
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	1ad3      	subs	r3, r2, r3
 80145ae:	683a      	ldr	r2, [r7, #0]
 80145b0:	4619      	mov	r1, r3
 80145b2:	f7fe fe6d 	bl	8013290 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80145b6:	f7ff f909 	bl	80137cc <xTaskResumeAll>
 80145ba:	4603      	mov	r3, r0
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10a      	bne.n	80145d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80145c0:	4b09      	ldr	r3, [pc, #36]	; (80145e8 <prvProcessTimerOrBlockTask+0x98>)
 80145c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145c6:	601a      	str	r2, [r3, #0]
 80145c8:	f3bf 8f4f 	dsb	sy
 80145cc:	f3bf 8f6f 	isb	sy
}
 80145d0:	e001      	b.n	80145d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80145d2:	f7ff f8fb 	bl	80137cc <xTaskResumeAll>
}
 80145d6:	bf00      	nop
 80145d8:	3710      	adds	r7, #16
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	200017c8 	.word	0x200017c8
 80145e4:	200017cc 	.word	0x200017cc
 80145e8:	e000ed04 	.word	0xe000ed04

080145ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80145ec:	b480      	push	{r7}
 80145ee:	b085      	sub	sp, #20
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80145f4:	4b0e      	ldr	r3, [pc, #56]	; (8014630 <prvGetNextExpireTime+0x44>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d101      	bne.n	8014602 <prvGetNextExpireTime+0x16>
 80145fe:	2201      	movs	r2, #1
 8014600:	e000      	b.n	8014604 <prvGetNextExpireTime+0x18>
 8014602:	2200      	movs	r2, #0
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d105      	bne.n	801461c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014610:	4b07      	ldr	r3, [pc, #28]	; (8014630 <prvGetNextExpireTime+0x44>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	68db      	ldr	r3, [r3, #12]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	60fb      	str	r3, [r7, #12]
 801461a:	e001      	b.n	8014620 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801461c:	2300      	movs	r3, #0
 801461e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014620:	68fb      	ldr	r3, [r7, #12]
}
 8014622:	4618      	mov	r0, r3
 8014624:	3714      	adds	r7, #20
 8014626:	46bd      	mov	sp, r7
 8014628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462c:	4770      	bx	lr
 801462e:	bf00      	nop
 8014630:	200017c4 	.word	0x200017c4

08014634 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b084      	sub	sp, #16
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801463c:	f7ff f964 	bl	8013908 <xTaskGetTickCount>
 8014640:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014642:	4b0b      	ldr	r3, [pc, #44]	; (8014670 <prvSampleTimeNow+0x3c>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	68fa      	ldr	r2, [r7, #12]
 8014648:	429a      	cmp	r2, r3
 801464a:	d205      	bcs.n	8014658 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801464c:	f000 f936 	bl	80148bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2201      	movs	r2, #1
 8014654:	601a      	str	r2, [r3, #0]
 8014656:	e002      	b.n	801465e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801465e:	4a04      	ldr	r2, [pc, #16]	; (8014670 <prvSampleTimeNow+0x3c>)
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014664:	68fb      	ldr	r3, [r7, #12]
}
 8014666:	4618      	mov	r0, r3
 8014668:	3710      	adds	r7, #16
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	200017d4 	.word	0x200017d4

08014674 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b086      	sub	sp, #24
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	607a      	str	r2, [r7, #4]
 8014680:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014682:	2300      	movs	r3, #0
 8014684:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	68ba      	ldr	r2, [r7, #8]
 801468a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	68fa      	ldr	r2, [r7, #12]
 8014690:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014692:	68ba      	ldr	r2, [r7, #8]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	429a      	cmp	r2, r3
 8014698:	d812      	bhi.n	80146c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801469a:	687a      	ldr	r2, [r7, #4]
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	1ad2      	subs	r2, r2, r3
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	699b      	ldr	r3, [r3, #24]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d302      	bcc.n	80146ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80146a8:	2301      	movs	r3, #1
 80146aa:	617b      	str	r3, [r7, #20]
 80146ac:	e01b      	b.n	80146e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80146ae:	4b10      	ldr	r3, [pc, #64]	; (80146f0 <prvInsertTimerInActiveList+0x7c>)
 80146b0:	681a      	ldr	r2, [r3, #0]
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	3304      	adds	r3, #4
 80146b6:	4619      	mov	r1, r3
 80146b8:	4610      	mov	r0, r2
 80146ba:	f7fd fdac 	bl	8012216 <vListInsert>
 80146be:	e012      	b.n	80146e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80146c0:	687a      	ldr	r2, [r7, #4]
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d206      	bcs.n	80146d6 <prvInsertTimerInActiveList+0x62>
 80146c8:	68ba      	ldr	r2, [r7, #8]
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d302      	bcc.n	80146d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80146d0:	2301      	movs	r3, #1
 80146d2:	617b      	str	r3, [r7, #20]
 80146d4:	e007      	b.n	80146e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80146d6:	4b07      	ldr	r3, [pc, #28]	; (80146f4 <prvInsertTimerInActiveList+0x80>)
 80146d8:	681a      	ldr	r2, [r3, #0]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	3304      	adds	r3, #4
 80146de:	4619      	mov	r1, r3
 80146e0:	4610      	mov	r0, r2
 80146e2:	f7fd fd98 	bl	8012216 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80146e6:	697b      	ldr	r3, [r7, #20]
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3718      	adds	r7, #24
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	200017c8 	.word	0x200017c8
 80146f4:	200017c4 	.word	0x200017c4

080146f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b08e      	sub	sp, #56	; 0x38
 80146fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80146fe:	e0ca      	b.n	8014896 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2b00      	cmp	r3, #0
 8014704:	da18      	bge.n	8014738 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014706:	1d3b      	adds	r3, r7, #4
 8014708:	3304      	adds	r3, #4
 801470a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801470e:	2b00      	cmp	r3, #0
 8014710:	d10a      	bne.n	8014728 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014716:	f383 8811 	msr	BASEPRI, r3
 801471a:	f3bf 8f6f 	isb	sy
 801471e:	f3bf 8f4f 	dsb	sy
 8014722:	61fb      	str	r3, [r7, #28]
}
 8014724:	bf00      	nop
 8014726:	e7fe      	b.n	8014726 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801472e:	6850      	ldr	r0, [r2, #4]
 8014730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014732:	6892      	ldr	r2, [r2, #8]
 8014734:	4611      	mov	r1, r2
 8014736:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2b00      	cmp	r3, #0
 801473c:	f2c0 80aa 	blt.w	8014894 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014746:	695b      	ldr	r3, [r3, #20]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d004      	beq.n	8014756 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801474e:	3304      	adds	r3, #4
 8014750:	4618      	mov	r0, r3
 8014752:	f7fd fd99 	bl	8012288 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014756:	463b      	mov	r3, r7
 8014758:	4618      	mov	r0, r3
 801475a:	f7ff ff6b 	bl	8014634 <prvSampleTimeNow>
 801475e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b09      	cmp	r3, #9
 8014764:	f200 8097 	bhi.w	8014896 <prvProcessReceivedCommands+0x19e>
 8014768:	a201      	add	r2, pc, #4	; (adr r2, 8014770 <prvProcessReceivedCommands+0x78>)
 801476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801476e:	bf00      	nop
 8014770:	08014799 	.word	0x08014799
 8014774:	08014799 	.word	0x08014799
 8014778:	08014799 	.word	0x08014799
 801477c:	0801480d 	.word	0x0801480d
 8014780:	08014821 	.word	0x08014821
 8014784:	0801486b 	.word	0x0801486b
 8014788:	08014799 	.word	0x08014799
 801478c:	08014799 	.word	0x08014799
 8014790:	0801480d 	.word	0x0801480d
 8014794:	08014821 	.word	0x08014821
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801479e:	f043 0301 	orr.w	r3, r3, #1
 80147a2:	b2da      	uxtb	r2, r3
 80147a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80147aa:	68ba      	ldr	r2, [r7, #8]
 80147ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ae:	699b      	ldr	r3, [r3, #24]
 80147b0:	18d1      	adds	r1, r2, r3
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147b8:	f7ff ff5c 	bl	8014674 <prvInsertTimerInActiveList>
 80147bc:	4603      	mov	r3, r0
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d069      	beq.n	8014896 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80147c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c4:	6a1b      	ldr	r3, [r3, #32]
 80147c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147d0:	f003 0304 	and.w	r3, r3, #4
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d05e      	beq.n	8014896 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80147d8:	68ba      	ldr	r2, [r7, #8]
 80147da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147dc:	699b      	ldr	r3, [r3, #24]
 80147de:	441a      	add	r2, r3
 80147e0:	2300      	movs	r3, #0
 80147e2:	9300      	str	r3, [sp, #0]
 80147e4:	2300      	movs	r3, #0
 80147e6:	2100      	movs	r1, #0
 80147e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147ea:	f7ff fe05 	bl	80143f8 <xTimerGenericCommand>
 80147ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80147f0:	6a3b      	ldr	r3, [r7, #32]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d14f      	bne.n	8014896 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	f383 8811 	msr	BASEPRI, r3
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f3bf 8f4f 	dsb	sy
 8014806:	61bb      	str	r3, [r7, #24]
}
 8014808:	bf00      	nop
 801480a:	e7fe      	b.n	801480a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014812:	f023 0301 	bic.w	r3, r3, #1
 8014816:	b2da      	uxtb	r2, r3
 8014818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801481a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801481e:	e03a      	b.n	8014896 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014826:	f043 0301 	orr.w	r3, r3, #1
 801482a:	b2da      	uxtb	r2, r3
 801482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014832:	68ba      	ldr	r2, [r7, #8]
 8014834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014836:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483a:	699b      	ldr	r3, [r3, #24]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d10a      	bne.n	8014856 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014844:	f383 8811 	msr	BASEPRI, r3
 8014848:	f3bf 8f6f 	isb	sy
 801484c:	f3bf 8f4f 	dsb	sy
 8014850:	617b      	str	r3, [r7, #20]
}
 8014852:	bf00      	nop
 8014854:	e7fe      	b.n	8014854 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014858:	699a      	ldr	r2, [r3, #24]
 801485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485c:	18d1      	adds	r1, r2, r3
 801485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014864:	f7ff ff06 	bl	8014674 <prvInsertTimerInActiveList>
					break;
 8014868:	e015      	b.n	8014896 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014870:	f003 0302 	and.w	r3, r3, #2
 8014874:	2b00      	cmp	r3, #0
 8014876:	d103      	bne.n	8014880 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801487a:	f000 fbe1 	bl	8015040 <vPortFree>
 801487e:	e00a      	b.n	8014896 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014886:	f023 0301 	bic.w	r3, r3, #1
 801488a:	b2da      	uxtb	r2, r3
 801488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014892:	e000      	b.n	8014896 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014894:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014896:	4b08      	ldr	r3, [pc, #32]	; (80148b8 <prvProcessReceivedCommands+0x1c0>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	1d39      	adds	r1, r7, #4
 801489c:	2200      	movs	r2, #0
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fe f8ea 	bl	8012a78 <xQueueReceive>
 80148a4:	4603      	mov	r3, r0
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	f47f af2a 	bne.w	8014700 <prvProcessReceivedCommands+0x8>
	}
}
 80148ac:	bf00      	nop
 80148ae:	bf00      	nop
 80148b0:	3730      	adds	r7, #48	; 0x30
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	200017cc 	.word	0x200017cc

080148bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b088      	sub	sp, #32
 80148c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80148c2:	e048      	b.n	8014956 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148c4:	4b2d      	ldr	r3, [pc, #180]	; (801497c <prvSwitchTimerLists+0xc0>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148ce:	4b2b      	ldr	r3, [pc, #172]	; (801497c <prvSwitchTimerLists+0xc0>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	68db      	ldr	r3, [r3, #12]
 80148d4:	68db      	ldr	r3, [r3, #12]
 80148d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	3304      	adds	r3, #4
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fd fcd3 	bl	8012288 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	6a1b      	ldr	r3, [r3, #32]
 80148e6:	68f8      	ldr	r0, [r7, #12]
 80148e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148f0:	f003 0304 	and.w	r3, r3, #4
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d02e      	beq.n	8014956 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	699b      	ldr	r3, [r3, #24]
 80148fc:	693a      	ldr	r2, [r7, #16]
 80148fe:	4413      	add	r3, r2
 8014900:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014902:	68ba      	ldr	r2, [r7, #8]
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	429a      	cmp	r2, r3
 8014908:	d90e      	bls.n	8014928 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	68ba      	ldr	r2, [r7, #8]
 801490e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	68fa      	ldr	r2, [r7, #12]
 8014914:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014916:	4b19      	ldr	r3, [pc, #100]	; (801497c <prvSwitchTimerLists+0xc0>)
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	3304      	adds	r3, #4
 801491e:	4619      	mov	r1, r3
 8014920:	4610      	mov	r0, r2
 8014922:	f7fd fc78 	bl	8012216 <vListInsert>
 8014926:	e016      	b.n	8014956 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014928:	2300      	movs	r3, #0
 801492a:	9300      	str	r3, [sp, #0]
 801492c:	2300      	movs	r3, #0
 801492e:	693a      	ldr	r2, [r7, #16]
 8014930:	2100      	movs	r1, #0
 8014932:	68f8      	ldr	r0, [r7, #12]
 8014934:	f7ff fd60 	bl	80143f8 <xTimerGenericCommand>
 8014938:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d10a      	bne.n	8014956 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014944:	f383 8811 	msr	BASEPRI, r3
 8014948:	f3bf 8f6f 	isb	sy
 801494c:	f3bf 8f4f 	dsb	sy
 8014950:	603b      	str	r3, [r7, #0]
}
 8014952:	bf00      	nop
 8014954:	e7fe      	b.n	8014954 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014956:	4b09      	ldr	r3, [pc, #36]	; (801497c <prvSwitchTimerLists+0xc0>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d1b1      	bne.n	80148c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014960:	4b06      	ldr	r3, [pc, #24]	; (801497c <prvSwitchTimerLists+0xc0>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014966:	4b06      	ldr	r3, [pc, #24]	; (8014980 <prvSwitchTimerLists+0xc4>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4a04      	ldr	r2, [pc, #16]	; (801497c <prvSwitchTimerLists+0xc0>)
 801496c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801496e:	4a04      	ldr	r2, [pc, #16]	; (8014980 <prvSwitchTimerLists+0xc4>)
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	6013      	str	r3, [r2, #0]
}
 8014974:	bf00      	nop
 8014976:	3718      	adds	r7, #24
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}
 801497c:	200017c4 	.word	0x200017c4
 8014980:	200017c8 	.word	0x200017c8

08014984 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b082      	sub	sp, #8
 8014988:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801498a:	f000 f96b 	bl	8014c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801498e:	4b15      	ldr	r3, [pc, #84]	; (80149e4 <prvCheckForValidListAndQueue+0x60>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d120      	bne.n	80149d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014996:	4814      	ldr	r0, [pc, #80]	; (80149e8 <prvCheckForValidListAndQueue+0x64>)
 8014998:	f7fd fbec 	bl	8012174 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801499c:	4813      	ldr	r0, [pc, #76]	; (80149ec <prvCheckForValidListAndQueue+0x68>)
 801499e:	f7fd fbe9 	bl	8012174 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80149a2:	4b13      	ldr	r3, [pc, #76]	; (80149f0 <prvCheckForValidListAndQueue+0x6c>)
 80149a4:	4a10      	ldr	r2, [pc, #64]	; (80149e8 <prvCheckForValidListAndQueue+0x64>)
 80149a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80149a8:	4b12      	ldr	r3, [pc, #72]	; (80149f4 <prvCheckForValidListAndQueue+0x70>)
 80149aa:	4a10      	ldr	r2, [pc, #64]	; (80149ec <prvCheckForValidListAndQueue+0x68>)
 80149ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80149ae:	2300      	movs	r3, #0
 80149b0:	9300      	str	r3, [sp, #0]
 80149b2:	4b11      	ldr	r3, [pc, #68]	; (80149f8 <prvCheckForValidListAndQueue+0x74>)
 80149b4:	4a11      	ldr	r2, [pc, #68]	; (80149fc <prvCheckForValidListAndQueue+0x78>)
 80149b6:	2110      	movs	r1, #16
 80149b8:	200a      	movs	r0, #10
 80149ba:	f7fd fcf7 	bl	80123ac <xQueueGenericCreateStatic>
 80149be:	4603      	mov	r3, r0
 80149c0:	4a08      	ldr	r2, [pc, #32]	; (80149e4 <prvCheckForValidListAndQueue+0x60>)
 80149c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80149c4:	4b07      	ldr	r3, [pc, #28]	; (80149e4 <prvCheckForValidListAndQueue+0x60>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d005      	beq.n	80149d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80149cc:	4b05      	ldr	r3, [pc, #20]	; (80149e4 <prvCheckForValidListAndQueue+0x60>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	490b      	ldr	r1, [pc, #44]	; (8014a00 <prvCheckForValidListAndQueue+0x7c>)
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fe fc08 	bl	80131e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80149d8:	f000 f974 	bl	8014cc4 <vPortExitCritical>
}
 80149dc:	bf00      	nop
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	200017cc 	.word	0x200017cc
 80149e8:	2000179c 	.word	0x2000179c
 80149ec:	200017b0 	.word	0x200017b0
 80149f0:	200017c4 	.word	0x200017c4
 80149f4:	200017c8 	.word	0x200017c8
 80149f8:	20001878 	.word	0x20001878
 80149fc:	200017d8 	.word	0x200017d8
 8014a00:	08021908 	.word	0x08021908

08014a04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a04:	b480      	push	{r7}
 8014a06:	b085      	sub	sp, #20
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	3b04      	subs	r3, #4
 8014a14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	3b04      	subs	r3, #4
 8014a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	f023 0201 	bic.w	r2, r3, #1
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	3b04      	subs	r3, #4
 8014a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014a34:	4a0c      	ldr	r2, [pc, #48]	; (8014a68 <pxPortInitialiseStack+0x64>)
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	3b14      	subs	r3, #20
 8014a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	3b04      	subs	r3, #4
 8014a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	f06f 0202 	mvn.w	r2, #2
 8014a52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	3b20      	subs	r3, #32
 8014a58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3714      	adds	r7, #20
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr
 8014a68:	08014a6d 	.word	0x08014a6d

08014a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014a72:	2300      	movs	r3, #0
 8014a74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014a76:	4b12      	ldr	r3, [pc, #72]	; (8014ac0 <prvTaskExitError+0x54>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a7e:	d00a      	beq.n	8014a96 <prvTaskExitError+0x2a>
	__asm volatile
 8014a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a84:	f383 8811 	msr	BASEPRI, r3
 8014a88:	f3bf 8f6f 	isb	sy
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	60fb      	str	r3, [r7, #12]
}
 8014a92:	bf00      	nop
 8014a94:	e7fe      	b.n	8014a94 <prvTaskExitError+0x28>
	__asm volatile
 8014a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9a:	f383 8811 	msr	BASEPRI, r3
 8014a9e:	f3bf 8f6f 	isb	sy
 8014aa2:	f3bf 8f4f 	dsb	sy
 8014aa6:	60bb      	str	r3, [r7, #8]
}
 8014aa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014aaa:	bf00      	nop
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d0fc      	beq.n	8014aac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ab2:	bf00      	nop
 8014ab4:	bf00      	nop
 8014ab6:	3714      	adds	r7, #20
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr
 8014ac0:	20000010 	.word	0x20000010
	...

08014ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014ad0:	4b07      	ldr	r3, [pc, #28]	; (8014af0 <pxCurrentTCBConst2>)
 8014ad2:	6819      	ldr	r1, [r3, #0]
 8014ad4:	6808      	ldr	r0, [r1, #0]
 8014ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ada:	f380 8809 	msr	PSP, r0
 8014ade:	f3bf 8f6f 	isb	sy
 8014ae2:	f04f 0000 	mov.w	r0, #0
 8014ae6:	f380 8811 	msr	BASEPRI, r0
 8014aea:	4770      	bx	lr
 8014aec:	f3af 8000 	nop.w

08014af0 <pxCurrentTCBConst2>:
 8014af0:	2000129c 	.word	0x2000129c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014af4:	bf00      	nop
 8014af6:	bf00      	nop

08014af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014af8:	4808      	ldr	r0, [pc, #32]	; (8014b1c <prvPortStartFirstTask+0x24>)
 8014afa:	6800      	ldr	r0, [r0, #0]
 8014afc:	6800      	ldr	r0, [r0, #0]
 8014afe:	f380 8808 	msr	MSP, r0
 8014b02:	f04f 0000 	mov.w	r0, #0
 8014b06:	f380 8814 	msr	CONTROL, r0
 8014b0a:	b662      	cpsie	i
 8014b0c:	b661      	cpsie	f
 8014b0e:	f3bf 8f4f 	dsb	sy
 8014b12:	f3bf 8f6f 	isb	sy
 8014b16:	df00      	svc	0
 8014b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b1a:	bf00      	nop
 8014b1c:	e000ed08 	.word	0xe000ed08

08014b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b086      	sub	sp, #24
 8014b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014b26:	4b46      	ldr	r3, [pc, #280]	; (8014c40 <xPortStartScheduler+0x120>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	4a46      	ldr	r2, [pc, #280]	; (8014c44 <xPortStartScheduler+0x124>)
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	d10a      	bne.n	8014b46 <xPortStartScheduler+0x26>
	__asm volatile
 8014b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b34:	f383 8811 	msr	BASEPRI, r3
 8014b38:	f3bf 8f6f 	isb	sy
 8014b3c:	f3bf 8f4f 	dsb	sy
 8014b40:	613b      	str	r3, [r7, #16]
}
 8014b42:	bf00      	nop
 8014b44:	e7fe      	b.n	8014b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014b46:	4b3e      	ldr	r3, [pc, #248]	; (8014c40 <xPortStartScheduler+0x120>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	4a3f      	ldr	r2, [pc, #252]	; (8014c48 <xPortStartScheduler+0x128>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d10a      	bne.n	8014b66 <xPortStartScheduler+0x46>
	__asm volatile
 8014b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b54:	f383 8811 	msr	BASEPRI, r3
 8014b58:	f3bf 8f6f 	isb	sy
 8014b5c:	f3bf 8f4f 	dsb	sy
 8014b60:	60fb      	str	r3, [r7, #12]
}
 8014b62:	bf00      	nop
 8014b64:	e7fe      	b.n	8014b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014b66:	4b39      	ldr	r3, [pc, #228]	; (8014c4c <xPortStartScheduler+0x12c>)
 8014b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	22ff      	movs	r2, #255	; 0xff
 8014b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	b2db      	uxtb	r3, r3
 8014b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014b80:	78fb      	ldrb	r3, [r7, #3]
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014b88:	b2da      	uxtb	r2, r3
 8014b8a:	4b31      	ldr	r3, [pc, #196]	; (8014c50 <xPortStartScheduler+0x130>)
 8014b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014b8e:	4b31      	ldr	r3, [pc, #196]	; (8014c54 <xPortStartScheduler+0x134>)
 8014b90:	2207      	movs	r2, #7
 8014b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014b94:	e009      	b.n	8014baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014b96:	4b2f      	ldr	r3, [pc, #188]	; (8014c54 <xPortStartScheduler+0x134>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	3b01      	subs	r3, #1
 8014b9c:	4a2d      	ldr	r2, [pc, #180]	; (8014c54 <xPortStartScheduler+0x134>)
 8014b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014ba0:	78fb      	ldrb	r3, [r7, #3]
 8014ba2:	b2db      	uxtb	r3, r3
 8014ba4:	005b      	lsls	r3, r3, #1
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014baa:	78fb      	ldrb	r3, [r7, #3]
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bb2:	2b80      	cmp	r3, #128	; 0x80
 8014bb4:	d0ef      	beq.n	8014b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014bb6:	4b27      	ldr	r3, [pc, #156]	; (8014c54 <xPortStartScheduler+0x134>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	f1c3 0307 	rsb	r3, r3, #7
 8014bbe:	2b04      	cmp	r3, #4
 8014bc0:	d00a      	beq.n	8014bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc6:	f383 8811 	msr	BASEPRI, r3
 8014bca:	f3bf 8f6f 	isb	sy
 8014bce:	f3bf 8f4f 	dsb	sy
 8014bd2:	60bb      	str	r3, [r7, #8]
}
 8014bd4:	bf00      	nop
 8014bd6:	e7fe      	b.n	8014bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014bd8:	4b1e      	ldr	r3, [pc, #120]	; (8014c54 <xPortStartScheduler+0x134>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	021b      	lsls	r3, r3, #8
 8014bde:	4a1d      	ldr	r2, [pc, #116]	; (8014c54 <xPortStartScheduler+0x134>)
 8014be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014be2:	4b1c      	ldr	r3, [pc, #112]	; (8014c54 <xPortStartScheduler+0x134>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014bea:	4a1a      	ldr	r2, [pc, #104]	; (8014c54 <xPortStartScheduler+0x134>)
 8014bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	b2da      	uxtb	r2, r3
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014bf6:	4b18      	ldr	r3, [pc, #96]	; (8014c58 <xPortStartScheduler+0x138>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	4a17      	ldr	r2, [pc, #92]	; (8014c58 <xPortStartScheduler+0x138>)
 8014bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c02:	4b15      	ldr	r3, [pc, #84]	; (8014c58 <xPortStartScheduler+0x138>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4a14      	ldr	r2, [pc, #80]	; (8014c58 <xPortStartScheduler+0x138>)
 8014c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c0e:	f000 f8dd 	bl	8014dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014c12:	4b12      	ldr	r3, [pc, #72]	; (8014c5c <xPortStartScheduler+0x13c>)
 8014c14:	2200      	movs	r2, #0
 8014c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c18:	f000 f8fc 	bl	8014e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c1c:	4b10      	ldr	r3, [pc, #64]	; (8014c60 <xPortStartScheduler+0x140>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	4a0f      	ldr	r2, [pc, #60]	; (8014c60 <xPortStartScheduler+0x140>)
 8014c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c28:	f7ff ff66 	bl	8014af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c2c:	f7fe ff48 	bl	8013ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8014c30:	f7ff ff1c 	bl	8014a6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c34:	2300      	movs	r3, #0
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3718      	adds	r7, #24
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	e000ed00 	.word	0xe000ed00
 8014c44:	410fc271 	.word	0x410fc271
 8014c48:	410fc270 	.word	0x410fc270
 8014c4c:	e000e400 	.word	0xe000e400
 8014c50:	200018c8 	.word	0x200018c8
 8014c54:	200018cc 	.word	0x200018cc
 8014c58:	e000ed20 	.word	0xe000ed20
 8014c5c:	20000010 	.word	0x20000010
 8014c60:	e000ef34 	.word	0xe000ef34

08014c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014c64:	b480      	push	{r7}
 8014c66:	b083      	sub	sp, #12
 8014c68:	af00      	add	r7, sp, #0
	__asm volatile
 8014c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c6e:	f383 8811 	msr	BASEPRI, r3
 8014c72:	f3bf 8f6f 	isb	sy
 8014c76:	f3bf 8f4f 	dsb	sy
 8014c7a:	607b      	str	r3, [r7, #4]
}
 8014c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014c7e:	4b0f      	ldr	r3, [pc, #60]	; (8014cbc <vPortEnterCritical+0x58>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	3301      	adds	r3, #1
 8014c84:	4a0d      	ldr	r2, [pc, #52]	; (8014cbc <vPortEnterCritical+0x58>)
 8014c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014c88:	4b0c      	ldr	r3, [pc, #48]	; (8014cbc <vPortEnterCritical+0x58>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	2b01      	cmp	r3, #1
 8014c8e:	d10f      	bne.n	8014cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014c90:	4b0b      	ldr	r3, [pc, #44]	; (8014cc0 <vPortEnterCritical+0x5c>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	b2db      	uxtb	r3, r3
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d00a      	beq.n	8014cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8014c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c9e:	f383 8811 	msr	BASEPRI, r3
 8014ca2:	f3bf 8f6f 	isb	sy
 8014ca6:	f3bf 8f4f 	dsb	sy
 8014caa:	603b      	str	r3, [r7, #0]
}
 8014cac:	bf00      	nop
 8014cae:	e7fe      	b.n	8014cae <vPortEnterCritical+0x4a>
	}
}
 8014cb0:	bf00      	nop
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr
 8014cbc:	20000010 	.word	0x20000010
 8014cc0:	e000ed04 	.word	0xe000ed04

08014cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b083      	sub	sp, #12
 8014cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014cca:	4b12      	ldr	r3, [pc, #72]	; (8014d14 <vPortExitCritical+0x50>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d10a      	bne.n	8014ce8 <vPortExitCritical+0x24>
	__asm volatile
 8014cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cd6:	f383 8811 	msr	BASEPRI, r3
 8014cda:	f3bf 8f6f 	isb	sy
 8014cde:	f3bf 8f4f 	dsb	sy
 8014ce2:	607b      	str	r3, [r7, #4]
}
 8014ce4:	bf00      	nop
 8014ce6:	e7fe      	b.n	8014ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014ce8:	4b0a      	ldr	r3, [pc, #40]	; (8014d14 <vPortExitCritical+0x50>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	3b01      	subs	r3, #1
 8014cee:	4a09      	ldr	r2, [pc, #36]	; (8014d14 <vPortExitCritical+0x50>)
 8014cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014cf2:	4b08      	ldr	r3, [pc, #32]	; (8014d14 <vPortExitCritical+0x50>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d105      	bne.n	8014d06 <vPortExitCritical+0x42>
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	f383 8811 	msr	BASEPRI, r3
}
 8014d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d06:	bf00      	nop
 8014d08:	370c      	adds	r7, #12
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d10:	4770      	bx	lr
 8014d12:	bf00      	nop
 8014d14:	20000010 	.word	0x20000010
	...

08014d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d20:	f3ef 8009 	mrs	r0, PSP
 8014d24:	f3bf 8f6f 	isb	sy
 8014d28:	4b15      	ldr	r3, [pc, #84]	; (8014d80 <pxCurrentTCBConst>)
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	f01e 0f10 	tst.w	lr, #16
 8014d30:	bf08      	it	eq
 8014d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3a:	6010      	str	r0, [r2, #0]
 8014d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014d44:	f380 8811 	msr	BASEPRI, r0
 8014d48:	f3bf 8f4f 	dsb	sy
 8014d4c:	f3bf 8f6f 	isb	sy
 8014d50:	f7fe feb6 	bl	8013ac0 <vTaskSwitchContext>
 8014d54:	f04f 0000 	mov.w	r0, #0
 8014d58:	f380 8811 	msr	BASEPRI, r0
 8014d5c:	bc09      	pop	{r0, r3}
 8014d5e:	6819      	ldr	r1, [r3, #0]
 8014d60:	6808      	ldr	r0, [r1, #0]
 8014d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d66:	f01e 0f10 	tst.w	lr, #16
 8014d6a:	bf08      	it	eq
 8014d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014d70:	f380 8809 	msr	PSP, r0
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop
 8014d7c:	f3af 8000 	nop.w

08014d80 <pxCurrentTCBConst>:
 8014d80:	2000129c 	.word	0x2000129c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014d84:	bf00      	nop
 8014d86:	bf00      	nop

08014d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b082      	sub	sp, #8
 8014d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d92:	f383 8811 	msr	BASEPRI, r3
 8014d96:	f3bf 8f6f 	isb	sy
 8014d9a:	f3bf 8f4f 	dsb	sy
 8014d9e:	607b      	str	r3, [r7, #4]
}
 8014da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014da2:	f7fe fdd3 	bl	801394c <xTaskIncrementTick>
 8014da6:	4603      	mov	r3, r0
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d003      	beq.n	8014db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014dac:	4b06      	ldr	r3, [pc, #24]	; (8014dc8 <xPortSysTickHandler+0x40>)
 8014dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014db2:	601a      	str	r2, [r3, #0]
 8014db4:	2300      	movs	r3, #0
 8014db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	f383 8811 	msr	BASEPRI, r3
}
 8014dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014dc0:	bf00      	nop
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	e000ed04 	.word	0xe000ed04

08014dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014dcc:	b480      	push	{r7}
 8014dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014dd0:	4b0b      	ldr	r3, [pc, #44]	; (8014e00 <vPortSetupTimerInterrupt+0x34>)
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014dd6:	4b0b      	ldr	r3, [pc, #44]	; (8014e04 <vPortSetupTimerInterrupt+0x38>)
 8014dd8:	2200      	movs	r2, #0
 8014dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014ddc:	4b0a      	ldr	r3, [pc, #40]	; (8014e08 <vPortSetupTimerInterrupt+0x3c>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4a0a      	ldr	r2, [pc, #40]	; (8014e0c <vPortSetupTimerInterrupt+0x40>)
 8014de2:	fba2 2303 	umull	r2, r3, r2, r3
 8014de6:	099b      	lsrs	r3, r3, #6
 8014de8:	4a09      	ldr	r2, [pc, #36]	; (8014e10 <vPortSetupTimerInterrupt+0x44>)
 8014dea:	3b01      	subs	r3, #1
 8014dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014dee:	4b04      	ldr	r3, [pc, #16]	; (8014e00 <vPortSetupTimerInterrupt+0x34>)
 8014df0:	2207      	movs	r2, #7
 8014df2:	601a      	str	r2, [r3, #0]
}
 8014df4:	bf00      	nop
 8014df6:	46bd      	mov	sp, r7
 8014df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop
 8014e00:	e000e010 	.word	0xe000e010
 8014e04:	e000e018 	.word	0xe000e018
 8014e08:	20000000 	.word	0x20000000
 8014e0c:	10624dd3 	.word	0x10624dd3
 8014e10:	e000e014 	.word	0xe000e014

08014e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014e24 <vPortEnableVFP+0x10>
 8014e18:	6801      	ldr	r1, [r0, #0]
 8014e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014e1e:	6001      	str	r1, [r0, #0]
 8014e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e22:	bf00      	nop
 8014e24:	e000ed88 	.word	0xe000ed88

08014e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e28:	b480      	push	{r7}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014e2e:	f3ef 8305 	mrs	r3, IPSR
 8014e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	2b0f      	cmp	r3, #15
 8014e38:	d914      	bls.n	8014e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e3a:	4a17      	ldr	r2, [pc, #92]	; (8014e98 <vPortValidateInterruptPriority+0x70>)
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	4413      	add	r3, r2
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e44:	4b15      	ldr	r3, [pc, #84]	; (8014e9c <vPortValidateInterruptPriority+0x74>)
 8014e46:	781b      	ldrb	r3, [r3, #0]
 8014e48:	7afa      	ldrb	r2, [r7, #11]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d20a      	bcs.n	8014e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	607b      	str	r3, [r7, #4]
}
 8014e60:	bf00      	nop
 8014e62:	e7fe      	b.n	8014e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e64:	4b0e      	ldr	r3, [pc, #56]	; (8014ea0 <vPortValidateInterruptPriority+0x78>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014e6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ea4 <vPortValidateInterruptPriority+0x7c>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d90a      	bls.n	8014e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e78:	f383 8811 	msr	BASEPRI, r3
 8014e7c:	f3bf 8f6f 	isb	sy
 8014e80:	f3bf 8f4f 	dsb	sy
 8014e84:	603b      	str	r3, [r7, #0]
}
 8014e86:	bf00      	nop
 8014e88:	e7fe      	b.n	8014e88 <vPortValidateInterruptPriority+0x60>
	}
 8014e8a:	bf00      	nop
 8014e8c:	3714      	adds	r7, #20
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e94:	4770      	bx	lr
 8014e96:	bf00      	nop
 8014e98:	e000e3f0 	.word	0xe000e3f0
 8014e9c:	200018c8 	.word	0x200018c8
 8014ea0:	e000ed0c 	.word	0xe000ed0c
 8014ea4:	200018cc 	.word	0x200018cc

08014ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08a      	sub	sp, #40	; 0x28
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014eb4:	f7fe fc7c 	bl	80137b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014eb8:	4b5b      	ldr	r3, [pc, #364]	; (8015028 <pvPortMalloc+0x180>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d101      	bne.n	8014ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ec0:	f000 f920 	bl	8015104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014ec4:	4b59      	ldr	r3, [pc, #356]	; (801502c <pvPortMalloc+0x184>)
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	4013      	ands	r3, r2
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	f040 8093 	bne.w	8014ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d01d      	beq.n	8014f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014ed8:	2208      	movs	r2, #8
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4413      	add	r3, r2
 8014ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f003 0307 	and.w	r3, r3, #7
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d014      	beq.n	8014f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f023 0307 	bic.w	r3, r3, #7
 8014ef0:	3308      	adds	r3, #8
 8014ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f003 0307 	and.w	r3, r3, #7
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00a      	beq.n	8014f14 <pvPortMalloc+0x6c>
	__asm volatile
 8014efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f02:	f383 8811 	msr	BASEPRI, r3
 8014f06:	f3bf 8f6f 	isb	sy
 8014f0a:	f3bf 8f4f 	dsb	sy
 8014f0e:	617b      	str	r3, [r7, #20]
}
 8014f10:	bf00      	nop
 8014f12:	e7fe      	b.n	8014f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d06e      	beq.n	8014ff8 <pvPortMalloc+0x150>
 8014f1a:	4b45      	ldr	r3, [pc, #276]	; (8015030 <pvPortMalloc+0x188>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	687a      	ldr	r2, [r7, #4]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d869      	bhi.n	8014ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f24:	4b43      	ldr	r3, [pc, #268]	; (8015034 <pvPortMalloc+0x18c>)
 8014f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f28:	4b42      	ldr	r3, [pc, #264]	; (8015034 <pvPortMalloc+0x18c>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f2e:	e004      	b.n	8014f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	687a      	ldr	r2, [r7, #4]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d903      	bls.n	8014f4c <pvPortMalloc+0xa4>
 8014f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d1f1      	bne.n	8014f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014f4c:	4b36      	ldr	r3, [pc, #216]	; (8015028 <pvPortMalloc+0x180>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d050      	beq.n	8014ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f56:	6a3b      	ldr	r3, [r7, #32]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	2208      	movs	r2, #8
 8014f5c:	4413      	add	r3, r2
 8014f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	6a3b      	ldr	r3, [r7, #32]
 8014f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6a:	685a      	ldr	r2, [r3, #4]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	1ad2      	subs	r2, r2, r3
 8014f70:	2308      	movs	r3, #8
 8014f72:	005b      	lsls	r3, r3, #1
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d91f      	bls.n	8014fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	f003 0307 	and.w	r3, r3, #7
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d00a      	beq.n	8014fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8014f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f8e:	f383 8811 	msr	BASEPRI, r3
 8014f92:	f3bf 8f6f 	isb	sy
 8014f96:	f3bf 8f4f 	dsb	sy
 8014f9a:	613b      	str	r3, [r7, #16]
}
 8014f9c:	bf00      	nop
 8014f9e:	e7fe      	b.n	8014f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa2:	685a      	ldr	r2, [r3, #4]
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	1ad2      	subs	r2, r2, r3
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014fb2:	69b8      	ldr	r0, [r7, #24]
 8014fb4:	f000 f908 	bl	80151c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014fb8:	4b1d      	ldr	r3, [pc, #116]	; (8015030 <pvPortMalloc+0x188>)
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	1ad3      	subs	r3, r2, r3
 8014fc2:	4a1b      	ldr	r2, [pc, #108]	; (8015030 <pvPortMalloc+0x188>)
 8014fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fc6:	4b1a      	ldr	r3, [pc, #104]	; (8015030 <pvPortMalloc+0x188>)
 8014fc8:	681a      	ldr	r2, [r3, #0]
 8014fca:	4b1b      	ldr	r3, [pc, #108]	; (8015038 <pvPortMalloc+0x190>)
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d203      	bcs.n	8014fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014fd2:	4b17      	ldr	r3, [pc, #92]	; (8015030 <pvPortMalloc+0x188>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	4a18      	ldr	r2, [pc, #96]	; (8015038 <pvPortMalloc+0x190>)
 8014fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fdc:	685a      	ldr	r2, [r3, #4]
 8014fde:	4b13      	ldr	r3, [pc, #76]	; (801502c <pvPortMalloc+0x184>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	431a      	orrs	r2, r3
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fea:	2200      	movs	r2, #0
 8014fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014fee:	4b13      	ldr	r3, [pc, #76]	; (801503c <pvPortMalloc+0x194>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	4a11      	ldr	r2, [pc, #68]	; (801503c <pvPortMalloc+0x194>)
 8014ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014ff8:	f7fe fbe8 	bl	80137cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	f003 0307 	and.w	r3, r3, #7
 8015002:	2b00      	cmp	r3, #0
 8015004:	d00a      	beq.n	801501c <pvPortMalloc+0x174>
	__asm volatile
 8015006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801500a:	f383 8811 	msr	BASEPRI, r3
 801500e:	f3bf 8f6f 	isb	sy
 8015012:	f3bf 8f4f 	dsb	sy
 8015016:	60fb      	str	r3, [r7, #12]
}
 8015018:	bf00      	nop
 801501a:	e7fe      	b.n	801501a <pvPortMalloc+0x172>
	return pvReturn;
 801501c:	69fb      	ldr	r3, [r7, #28]
}
 801501e:	4618      	mov	r0, r3
 8015020:	3728      	adds	r7, #40	; 0x28
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	200054d8 	.word	0x200054d8
 801502c:	200054ec 	.word	0x200054ec
 8015030:	200054dc 	.word	0x200054dc
 8015034:	200054d0 	.word	0x200054d0
 8015038:	200054e0 	.word	0x200054e0
 801503c:	200054e4 	.word	0x200054e4

08015040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b086      	sub	sp, #24
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d04d      	beq.n	80150ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015052:	2308      	movs	r3, #8
 8015054:	425b      	negs	r3, r3
 8015056:	697a      	ldr	r2, [r7, #20]
 8015058:	4413      	add	r3, r2
 801505a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015060:	693b      	ldr	r3, [r7, #16]
 8015062:	685a      	ldr	r2, [r3, #4]
 8015064:	4b24      	ldr	r3, [pc, #144]	; (80150f8 <vPortFree+0xb8>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	4013      	ands	r3, r2
 801506a:	2b00      	cmp	r3, #0
 801506c:	d10a      	bne.n	8015084 <vPortFree+0x44>
	__asm volatile
 801506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015072:	f383 8811 	msr	BASEPRI, r3
 8015076:	f3bf 8f6f 	isb	sy
 801507a:	f3bf 8f4f 	dsb	sy
 801507e:	60fb      	str	r3, [r7, #12]
}
 8015080:	bf00      	nop
 8015082:	e7fe      	b.n	8015082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d00a      	beq.n	80150a2 <vPortFree+0x62>
	__asm volatile
 801508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015090:	f383 8811 	msr	BASEPRI, r3
 8015094:	f3bf 8f6f 	isb	sy
 8015098:	f3bf 8f4f 	dsb	sy
 801509c:	60bb      	str	r3, [r7, #8]
}
 801509e:	bf00      	nop
 80150a0:	e7fe      	b.n	80150a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	685a      	ldr	r2, [r3, #4]
 80150a6:	4b14      	ldr	r3, [pc, #80]	; (80150f8 <vPortFree+0xb8>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4013      	ands	r3, r2
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d01e      	beq.n	80150ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d11a      	bne.n	80150ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	685a      	ldr	r2, [r3, #4]
 80150bc:	4b0e      	ldr	r3, [pc, #56]	; (80150f8 <vPortFree+0xb8>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	43db      	mvns	r3, r3
 80150c2:	401a      	ands	r2, r3
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80150c8:	f7fe fb72 	bl	80137b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	685a      	ldr	r2, [r3, #4]
 80150d0:	4b0a      	ldr	r3, [pc, #40]	; (80150fc <vPortFree+0xbc>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4413      	add	r3, r2
 80150d6:	4a09      	ldr	r2, [pc, #36]	; (80150fc <vPortFree+0xbc>)
 80150d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80150da:	6938      	ldr	r0, [r7, #16]
 80150dc:	f000 f874 	bl	80151c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80150e0:	4b07      	ldr	r3, [pc, #28]	; (8015100 <vPortFree+0xc0>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	3301      	adds	r3, #1
 80150e6:	4a06      	ldr	r2, [pc, #24]	; (8015100 <vPortFree+0xc0>)
 80150e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80150ea:	f7fe fb6f 	bl	80137cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80150ee:	bf00      	nop
 80150f0:	3718      	adds	r7, #24
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	bf00      	nop
 80150f8:	200054ec 	.word	0x200054ec
 80150fc:	200054dc 	.word	0x200054dc
 8015100:	200054e8 	.word	0x200054e8

08015104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015104:	b480      	push	{r7}
 8015106:	b085      	sub	sp, #20
 8015108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801510a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801510e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015110:	4b27      	ldr	r3, [pc, #156]	; (80151b0 <prvHeapInit+0xac>)
 8015112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f003 0307 	and.w	r3, r3, #7
 801511a:	2b00      	cmp	r3, #0
 801511c:	d00c      	beq.n	8015138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	3307      	adds	r3, #7
 8015122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f023 0307 	bic.w	r3, r3, #7
 801512a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801512c:	68ba      	ldr	r2, [r7, #8]
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	1ad3      	subs	r3, r2, r3
 8015132:	4a1f      	ldr	r2, [pc, #124]	; (80151b0 <prvHeapInit+0xac>)
 8015134:	4413      	add	r3, r2
 8015136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801513c:	4a1d      	ldr	r2, [pc, #116]	; (80151b4 <prvHeapInit+0xb0>)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015142:	4b1c      	ldr	r3, [pc, #112]	; (80151b4 <prvHeapInit+0xb0>)
 8015144:	2200      	movs	r2, #0
 8015146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	68ba      	ldr	r2, [r7, #8]
 801514c:	4413      	add	r3, r2
 801514e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015150:	2208      	movs	r2, #8
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	1a9b      	subs	r3, r3, r2
 8015156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f023 0307 	bic.w	r3, r3, #7
 801515e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	4a15      	ldr	r2, [pc, #84]	; (80151b8 <prvHeapInit+0xb4>)
 8015164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015166:	4b14      	ldr	r3, [pc, #80]	; (80151b8 <prvHeapInit+0xb4>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2200      	movs	r2, #0
 801516c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801516e:	4b12      	ldr	r3, [pc, #72]	; (80151b8 <prvHeapInit+0xb4>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2200      	movs	r2, #0
 8015174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	68fa      	ldr	r2, [r7, #12]
 801517e:	1ad2      	subs	r2, r2, r3
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015184:	4b0c      	ldr	r3, [pc, #48]	; (80151b8 <prvHeapInit+0xb4>)
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	685b      	ldr	r3, [r3, #4]
 8015190:	4a0a      	ldr	r2, [pc, #40]	; (80151bc <prvHeapInit+0xb8>)
 8015192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	4a09      	ldr	r2, [pc, #36]	; (80151c0 <prvHeapInit+0xbc>)
 801519a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801519c:	4b09      	ldr	r3, [pc, #36]	; (80151c4 <prvHeapInit+0xc0>)
 801519e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80151a2:	601a      	str	r2, [r3, #0]
}
 80151a4:	bf00      	nop
 80151a6:	3714      	adds	r7, #20
 80151a8:	46bd      	mov	sp, r7
 80151aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ae:	4770      	bx	lr
 80151b0:	200018d0 	.word	0x200018d0
 80151b4:	200054d0 	.word	0x200054d0
 80151b8:	200054d8 	.word	0x200054d8
 80151bc:	200054e0 	.word	0x200054e0
 80151c0:	200054dc 	.word	0x200054dc
 80151c4:	200054ec 	.word	0x200054ec

080151c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80151c8:	b480      	push	{r7}
 80151ca:	b085      	sub	sp, #20
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80151d0:	4b28      	ldr	r3, [pc, #160]	; (8015274 <prvInsertBlockIntoFreeList+0xac>)
 80151d2:	60fb      	str	r3, [r7, #12]
 80151d4:	e002      	b.n	80151dc <prvInsertBlockIntoFreeList+0x14>
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	60fb      	str	r3, [r7, #12]
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	687a      	ldr	r2, [r7, #4]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d8f7      	bhi.n	80151d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	68ba      	ldr	r2, [r7, #8]
 80151f0:	4413      	add	r3, r2
 80151f2:	687a      	ldr	r2, [r7, #4]
 80151f4:	429a      	cmp	r2, r3
 80151f6:	d108      	bne.n	801520a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	685a      	ldr	r2, [r3, #4]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	441a      	add	r2, r3
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	68ba      	ldr	r2, [r7, #8]
 8015214:	441a      	add	r2, r3
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	429a      	cmp	r2, r3
 801521c:	d118      	bne.n	8015250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	681a      	ldr	r2, [r3, #0]
 8015222:	4b15      	ldr	r3, [pc, #84]	; (8015278 <prvInsertBlockIntoFreeList+0xb0>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	429a      	cmp	r2, r3
 8015228:	d00d      	beq.n	8015246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	685a      	ldr	r2, [r3, #4]
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	441a      	add	r2, r3
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	601a      	str	r2, [r3, #0]
 8015244:	e008      	b.n	8015258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015246:	4b0c      	ldr	r3, [pc, #48]	; (8015278 <prvInsertBlockIntoFreeList+0xb0>)
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	601a      	str	r2, [r3, #0]
 801524e:	e003      	b.n	8015258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	429a      	cmp	r2, r3
 801525e:	d002      	beq.n	8015266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	687a      	ldr	r2, [r7, #4]
 8015264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015266:	bf00      	nop
 8015268:	3714      	adds	r7, #20
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	200054d0 	.word	0x200054d0
 8015278:	200054d8 	.word	0x200054d8

0801527c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 801527c:	b480      	push	{r7}
 801527e:	b083      	sub	sp, #12
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
    {
 8015284:	4a04      	ldr	r2, [pc, #16]	; (8015298 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	601a      	str	r2, [r3, #0]
    }
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	4618      	mov	r0, r3
 801528e:	370c      	adds	r7, #12
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr
 8015298:	08022150 	.word	0x08022150

0801529c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
    }
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f7ff ffe9 	bl	801527c <_ZN8touchgfx12FontProviderD1Ev>
 80152aa:	2104      	movs	r1, #4
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f009 fabf 	bl	801e830 <_ZdlPvj>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	4618      	mov	r0, r3
 80152b6:	3708      	adds	r7, #8
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	460b      	mov	r3, r1
 80152c6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80152c8:	887b      	ldrh	r3, [r7, #2]
 80152ca:	2b0c      	cmp	r3, #12
 80152cc:	d85d      	bhi.n	801538a <_ZN23ApplicationFontProvider7getFontEt+0xce>
 80152ce:	a201      	add	r2, pc, #4	; (adr r2, 80152d4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80152d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152d4:	08015309 	.word	0x08015309
 80152d8:	08015313 	.word	0x08015313
 80152dc:	0801531d 	.word	0x0801531d
 80152e0:	08015327 	.word	0x08015327
 80152e4:	08015331 	.word	0x08015331
 80152e8:	0801533b 	.word	0x0801533b
 80152ec:	08015345 	.word	0x08015345
 80152f0:	0801534f 	.word	0x0801534f
 80152f4:	08015359 	.word	0x08015359
 80152f8:	08015363 	.word	0x08015363
 80152fc:	0801536d 	.word	0x0801536d
 8015300:	08015377 	.word	0x08015377
 8015304:	08015381 	.word	0x08015381
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8015308:	f001 f938 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 801530c:	4603      	mov	r3, r0
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	e03c      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::BUTTONSENG:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8015312:	f001 f933 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015316:	4603      	mov	r3, r0
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	e037      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::TITLES:
        // AGENCYB_TTF_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801531c:	f001 f92e 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015320:	4603      	mov	r3, r0
 8015322:	689b      	ldr	r3, [r3, #8]
 8015324:	e032      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MEDIUMTITLE:
        // AGENCYB_TTF_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8015326:	f001 f929 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 801532a:	4603      	mov	r3, r0
 801532c:	68db      	ldr	r3, [r3, #12]
 801532e:	e02d      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::BACKBUTTON:
        // AGENCYB_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8015330:	f001 f924 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015334:	4603      	mov	r3, r0
 8015336:	691b      	ldr	r3, [r3, #16]
 8015338:	e028      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::DISPLAY:
        // AGENCYB_TTF_28_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 801533a:	f001 f91f 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 801533e:	4603      	mov	r3, r0
 8015340:	695b      	ldr	r3, [r3, #20]
 8015342:	e023      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MODE:
        // AGENCYB_TTF_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8015344:	f001 f91a 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015348:	4603      	mov	r3, r0
 801534a:	699b      	ldr	r3, [r3, #24]
 801534c:	e01e      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::KEYBOARD:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 801534e:	f001 f915 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015352:	4603      	mov	r3, r0
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	e019      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MAINTEXT:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8015358:	f001 f910 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 801535c:	4603      	mov	r3, r0
 801535e:	685b      	ldr	r3, [r3, #4]
 8015360:	e014      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::ITALICARIAL14:
        // AGENCYB_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8015362:	f001 f90b 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015366:	4603      	mov	r3, r0
 8015368:	691b      	ldr	r3, [r3, #16]
 801536a:	e00f      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::SMALLARIEL10:
        // AGENCYB_TTF_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 801536c:	f001 f906 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015370:	4603      	mov	r3, r0
 8015372:	69db      	ldr	r3, [r3, #28]
 8015374:	e00a      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[8]);
 8015376:	f001 f901 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 801537a:	4603      	mov	r3, r0
 801537c:	6a1b      	ldr	r3, [r3, #32]
 801537e:	e005      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[9]);
 8015380:	f001 f8fc 	bl	801657c <_ZN17TypedTextDatabase8getFontsEv>
 8015384:	4603      	mov	r3, r0
 8015386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015388:	e000      	b.n	801538c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    default:
        return 0;
 801538a:	2300      	movs	r3, #0
    }
}
 801538c:	4618      	mov	r0, r3
 801538e:	3708      	adds	r7, #8
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 8;         // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 9;         // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 10;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8015394:	b580      	push	{r7, lr}
 8015396:	b082      	sub	sp, #8
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	4a05      	ldr	r2, [pc, #20]	; (80153b4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	601a      	str	r2, [r3, #0]
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7ff ff69 	bl	801527c <_ZN8touchgfx12FontProviderD1Ev>
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	4618      	mov	r0, r3
 80153ae:	3708      	adds	r7, #8
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	0802213c 	.word	0x0802213c

080153b8 <_ZN23ApplicationFontProviderD0Ev>:
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7ff ffe7 	bl	8015394 <_ZN23ApplicationFontProviderD1Ev>
 80153c6:	2104      	movs	r1, #4
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f009 fa31 	bl	801e830 <_ZdlPvj>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	4618      	mov	r0, r3
 80153d2:	3708      	adds	r7, #8
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80153d8:	b480      	push	{r7}
 80153da:	b083      	sub	sp, #12
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
    {
 80153e0:	4a04      	ldr	r2, [pc, #16]	; (80153f4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	601a      	str	r2, [r3, #0]
    }
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	4618      	mov	r0, r3
 80153ea:	370c      	adds	r7, #12
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr
 80153f4:	080221cc 	.word	0x080221cc

080153f8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
    }
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ff ffe9 	bl	80153d8 <_ZN8touchgfx4FontD1Ev>
 8015406:	2110      	movs	r1, #16
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f009 fa11 	bl	801e830 <_ZdlPvj>
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	4618      	mov	r0, r3
 8015412:	3708      	adds	r7, #8
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8015418:	b590      	push	{r4, r7, lr}
 801541a:	b087      	sub	sp, #28
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	460b      	mov	r3, r1
 8015422:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8015424:	887b      	ldrh	r3, [r7, #2]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d101      	bne.n	801542e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 801542a:	2300      	movs	r3, #0
 801542c:	e010      	b.n	8015450 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 801542e:	2300      	movs	r3, #0
 8015430:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8015432:	2300      	movs	r3, #0
 8015434:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	3308      	adds	r3, #8
 801543c:	681c      	ldr	r4, [r3, #0]
 801543e:	f107 030f 	add.w	r3, r7, #15
 8015442:	f107 0210 	add.w	r2, r7, #16
 8015446:	8879      	ldrh	r1, [r7, #2]
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	47a0      	blx	r4
 801544c:	6178      	str	r0, [r7, #20]
        return glyph;
 801544e:	697b      	ldr	r3, [r7, #20]
    }
 8015450:	4618      	mov	r0, r3
 8015452:	371c      	adds	r7, #28
 8015454:	46bd      	mov	sp, r7
 8015456:	bd90      	pop	{r4, r7, pc}

08015458 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8015458:	b480      	push	{r7}
 801545a:	b083      	sub	sp, #12
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	895b      	ldrh	r3, [r3, #10]
    }
 8015464:	4618      	mov	r0, r3
 8015466:	370c      	adds	r7, #12
 8015468:	46bd      	mov	sp, r7
 801546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546e:	4770      	bx	lr

08015470 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	899b      	ldrh	r3, [r3, #12]
    }
 801547c:	4618      	mov	r0, r3
 801547e:	370c      	adds	r7, #12
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr

08015488 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8015488:	b480      	push	{r7}
 801548a:	b083      	sub	sp, #12
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	889b      	ldrh	r3, [r3, #4]
    }
 8015494:	4618      	mov	r0, r3
 8015496:	370c      	adds	r7, #12
 8015498:	46bd      	mov	sp, r7
 801549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549e:	4770      	bx	lr

080154a0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80154a0:	b480      	push	{r7}
 80154a2:	b083      	sub	sp, #12
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	889a      	ldrh	r2, [r3, #4]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	799b      	ldrb	r3, [r3, #6]
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	4413      	add	r3, r2
 80154b4:	b29b      	uxth	r3, r3
    }
 80154b6:	4618      	mov	r0, r3
 80154b8:	370c      	adds	r7, #12
 80154ba:	46bd      	mov	sp, r7
 80154bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c0:	4770      	bx	lr

080154c2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80154c2:	b480      	push	{r7}
 80154c4:	b083      	sub	sp, #12
 80154c6:	af00      	add	r7, sp, #0
 80154c8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	79db      	ldrb	r3, [r3, #7]
 80154ce:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80154d2:	b2db      	uxtb	r3, r3
    }
 80154d4:	4618      	mov	r0, r3
 80154d6:	370c      	adds	r7, #12
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr

080154e0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	79db      	ldrb	r3, [r3, #7]
 80154ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80154f0:	b2db      	uxtb	r3, r3
    }
 80154f2:	4618      	mov	r0, r3
 80154f4:	370c      	adds	r7, #12
 80154f6:	46bd      	mov	sp, r7
 80154f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fc:	4770      	bx	lr
	...

08015500 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8015500:	b580      	push	{r7, lr}
 8015502:	b082      	sub	sp, #8
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	4a05      	ldr	r2, [pc, #20]	; (8015520 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	601a      	str	r2, [r3, #0]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	4618      	mov	r0, r3
 8015512:	f7ff ff61 	bl	80153d8 <_ZN8touchgfx4FontD1Ev>
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	4618      	mov	r0, r3
 801551a:	3708      	adds	r7, #8
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	08022dd4 	.word	0x08022dd4

08015524 <_ZN8touchgfx9ConstFontD0Ev>:
 8015524:	b580      	push	{r7, lr}
 8015526:	b082      	sub	sp, #8
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7ff ffe7 	bl	8015500 <_ZN8touchgfx9ConstFontD1Ev>
 8015532:	2118      	movs	r1, #24
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f009 f97b 	bl	801e830 <_ZdlPvj>
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	4618      	mov	r0, r3
 801553e:	3708      	adds	r7, #8
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}

08015544 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8015544:	b580      	push	{r7, lr}
 8015546:	b082      	sub	sp, #8
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
 801554c:	4a05      	ldr	r2, [pc, #20]	; (8015564 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	601a      	str	r2, [r3, #0]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff ffd3 	bl	8015500 <_ZN8touchgfx9ConstFontD1Ev>
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	4618      	mov	r0, r3
 801555e:	3708      	adds	r7, #8
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}
 8015564:	08022174 	.word	0x08022174

08015568 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8015568:	b580      	push	{r7, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	f7ff ffe7 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 8015576:	2128      	movs	r1, #40	; 0x28
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f009 f959 	bl	801e830 <_ZdlPvj>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	4618      	mov	r0, r3
 8015582:	3708      	adds	r7, #8
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8015588:	b480      	push	{r7}
 801558a:	b083      	sub	sp, #12
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
    {
 8015590:	4a04      	ldr	r2, [pc, #16]	; (80155a4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	601a      	str	r2, [r3, #0]
    }
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	4618      	mov	r0, r3
 801559a:	370c      	adds	r7, #12
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr
 80155a4:	08022164 	.word	0x08022164

080155a8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
    }
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f7ff ffe9 	bl	8015588 <_ZN8touchgfx9TypedTextD1Ev>
 80155b6:	2108      	movs	r1, #8
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f009 f939 	bl	801e830 <_ZdlPvj>
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	4618      	mov	r0, r3
 80155c2:	3708      	adds	r7, #8
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80155c8:	b480      	push	{r7}
 80155ca:	b083      	sub	sp, #12
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6a1b      	ldr	r3, [r3, #32]
    }
 80155d4:	4618      	mov	r0, r3
 80155d6:	370c      	adds	r7, #12
 80155d8:	46bd      	mov	sp, r7
 80155da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155de:	4770      	bx	lr

080155e0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80155e0:	b480      	push	{r7}
 80155e2:	b083      	sub	sp, #12
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80155ec:	4618      	mov	r0, r3
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr

080155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b08c      	sub	sp, #48	; 0x30
 80155fc:	af08      	add	r7, sp, #32
 80155fe:	60f8      	str	r0, [r7, #12]
 8015600:	60b9      	str	r1, [r7, #8]
 8015602:	4611      	mov	r1, r2
 8015604:	461a      	mov	r2, r3
 8015606:	460b      	mov	r3, r1
 8015608:	80fb      	strh	r3, [r7, #6]
 801560a:	4613      	mov	r3, r2
 801560c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 801560e:	68f8      	ldr	r0, [r7, #12]
 8015610:	88b9      	ldrh	r1, [r7, #4]
 8015612:	88fa      	ldrh	r2, [r7, #6]
 8015614:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015616:	9306      	str	r3, [sp, #24]
 8015618:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801561a:	9305      	str	r3, [sp, #20]
 801561c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015620:	9304      	str	r3, [sp, #16]
 8015622:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015626:	9303      	str	r3, [sp, #12]
 8015628:	f897 3020 	ldrb.w	r3, [r7, #32]
 801562c:	9302      	str	r3, [sp, #8]
 801562e:	7f3b      	ldrb	r3, [r7, #28]
 8015630:	9301      	str	r3, [sp, #4]
 8015632:	7e3b      	ldrb	r3, [r7, #24]
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	460b      	mov	r3, r1
 8015638:	68b9      	ldr	r1, [r7, #8]
 801563a:	f005 fea5 	bl	801b388 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 801563e:	4a0a      	ldr	r2, [pc, #40]	; (8015668 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	601a      	str	r2, [r3, #0]
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015648:	619a      	str	r2, [r3, #24]
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801564e:	61da      	str	r2, [r3, #28]
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015654:	621a      	str	r2, [r3, #32]
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801565a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	4618      	mov	r0, r3
 8015660:	3710      	adds	r7, #16
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	08022174 	.word	0x08022174

0801566c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 801566c:	b480      	push	{r7}
 801566e:	b085      	sub	sp, #20
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	699b      	ldr	r3, [r3, #24]
 801567a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	889b      	ldrh	r3, [r3, #4]
 8015680:	0adb      	lsrs	r3, r3, #11
 8015682:	b29b      	uxth	r3, r3
 8015684:	009b      	lsls	r3, r3, #2
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	4413      	add	r3, r2
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	4413      	add	r3, r2
}
 8015692:	4618      	mov	r0, r3
 8015694:	3714      	adds	r7, #20
 8015696:	46bd      	mov	sp, r7
 8015698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569c:	4770      	bx	lr

0801569e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801569e:	b480      	push	{r7}
 80156a0:	b089      	sub	sp, #36	; 0x24
 80156a2:	af00      	add	r7, sp, #0
 80156a4:	60f8      	str	r0, [r7, #12]
 80156a6:	460b      	mov	r3, r1
 80156a8:	607a      	str	r2, [r7, #4]
 80156aa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d003      	beq.n	80156ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	7b1b      	ldrb	r3, [r3, #12]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d101      	bne.n	80156be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80156ba:	2300      	movs	r3, #0
 80156bc:	e030      	b.n	8015720 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	69da      	ldr	r2, [r3, #28]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	7b5b      	ldrb	r3, [r3, #13]
 80156ca:	021b      	lsls	r3, r3, #8
 80156cc:	b21b      	sxth	r3, r3
 80156ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80156d2:	b219      	sxth	r1, r3
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	7adb      	ldrb	r3, [r3, #11]
 80156d8:	b21b      	sxth	r3, r3
 80156da:	430b      	orrs	r3, r1
 80156dc:	b21b      	sxth	r3, r3
 80156de:	b29b      	uxth	r3, r3
 80156e0:	009b      	lsls	r3, r3, #2
 80156e2:	4413      	add	r3, r2
 80156e4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	7b1b      	ldrb	r3, [r3, #12]
 80156ea:	837b      	strh	r3, [r7, #26]
 80156ec:	8b7b      	ldrh	r3, [r7, #26]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d015      	beq.n	801571e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80156f2:	69fb      	ldr	r3, [r7, #28]
 80156f4:	881b      	ldrh	r3, [r3, #0]
 80156f6:	897a      	ldrh	r2, [r7, #10]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d103      	bne.n	8015704 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80156fc:	69fb      	ldr	r3, [r7, #28]
 80156fe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015702:	e00d      	b.n	8015720 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	881b      	ldrh	r3, [r3, #0]
 8015708:	897a      	ldrh	r2, [r7, #10]
 801570a:	429a      	cmp	r2, r3
 801570c:	d306      	bcc.n	801571c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801570e:	8b7b      	ldrh	r3, [r7, #26]
 8015710:	3b01      	subs	r3, #1
 8015712:	837b      	strh	r3, [r7, #26]
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	3304      	adds	r3, #4
 8015718:	61fb      	str	r3, [r7, #28]
 801571a:	e7e7      	b.n	80156ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 801571c:	bf00      	nop
        }
    }
    return 0;
 801571e:	2300      	movs	r3, #0
}
 8015720:	4618      	mov	r0, r3
 8015722:	3724      	adds	r7, #36	; 0x24
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_12_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_12_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_12_4bpp(glyphs_AGENCYB_TTF_12_4bpp, 65, 12, 2, 4, 1, 1, 1, unicodes_AGENCYB_TTF_12_4bpp, kerning_AGENCYB_TTF_12_4bpp, 63, 0, 0, 0);
 801572c:	b580      	push	{r7, lr}
 801572e:	af00      	add	r7, sp, #0
 8015730:	4801      	ldr	r0, [pc, #4]	; (8015738 <__tcf_0+0xc>)
 8015732:	f7ff ff07 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 8015736:	bd80      	pop	{r7, pc}
 8015738:	200054f0 	.word	0x200054f0

0801573c <_Z27getFont_AGENCYB_TTF_12_4bppv>:
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b08c      	sub	sp, #48	; 0x30
 8015740:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_12_4bpp(glyphs_AGENCYB_TTF_12_4bpp, 65, 12, 2, 4, 1, 1, 1, unicodes_AGENCYB_TTF_12_4bpp, kerning_AGENCYB_TTF_12_4bpp, 63, 0, 0, 0);
 8015742:	4b1f      	ldr	r3, [pc, #124]	; (80157c0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	f3bf 8f5b 	dmb	ish
 801574a:	b2db      	uxtb	r3, r3
 801574c:	f003 0301 	and.w	r3, r3, #1
 8015750:	2b00      	cmp	r3, #0
 8015752:	bf0c      	ite	eq
 8015754:	2301      	moveq	r3, #1
 8015756:	2300      	movne	r3, #0
 8015758:	b2db      	uxtb	r3, r3
 801575a:	2b00      	cmp	r3, #0
 801575c:	d02c      	beq.n	80157b8 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x7c>
 801575e:	4818      	ldr	r0, [pc, #96]	; (80157c0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 8015760:	f009 f868 	bl	801e834 <__cxa_guard_acquire>
 8015764:	4603      	mov	r3, r0
 8015766:	2b00      	cmp	r3, #0
 8015768:	bf14      	ite	ne
 801576a:	2301      	movne	r3, #1
 801576c:	2300      	moveq	r3, #0
 801576e:	b2db      	uxtb	r3, r3
 8015770:	2b00      	cmp	r3, #0
 8015772:	d021      	beq.n	80157b8 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x7c>
 8015774:	2300      	movs	r3, #0
 8015776:	930a      	str	r3, [sp, #40]	; 0x28
 8015778:	2300      	movs	r3, #0
 801577a:	9309      	str	r3, [sp, #36]	; 0x24
 801577c:	2300      	movs	r3, #0
 801577e:	9308      	str	r3, [sp, #32]
 8015780:	233f      	movs	r3, #63	; 0x3f
 8015782:	9307      	str	r3, [sp, #28]
 8015784:	4b0f      	ldr	r3, [pc, #60]	; (80157c4 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x88>)
 8015786:	9306      	str	r3, [sp, #24]
 8015788:	4b0f      	ldr	r3, [pc, #60]	; (80157c8 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x8c>)
 801578a:	9305      	str	r3, [sp, #20]
 801578c:	2301      	movs	r3, #1
 801578e:	9304      	str	r3, [sp, #16]
 8015790:	2301      	movs	r3, #1
 8015792:	9303      	str	r3, [sp, #12]
 8015794:	2301      	movs	r3, #1
 8015796:	9302      	str	r3, [sp, #8]
 8015798:	2304      	movs	r3, #4
 801579a:	9301      	str	r3, [sp, #4]
 801579c:	2302      	movs	r3, #2
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	230c      	movs	r3, #12
 80157a2:	2241      	movs	r2, #65	; 0x41
 80157a4:	4909      	ldr	r1, [pc, #36]	; (80157cc <_Z27getFont_AGENCYB_TTF_12_4bppv+0x90>)
 80157a6:	480a      	ldr	r0, [pc, #40]	; (80157d0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x94>)
 80157a8:	f7ff ff26 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80157ac:	4809      	ldr	r0, [pc, #36]	; (80157d4 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x98>)
 80157ae:	f009 f88b 	bl	801e8c8 <atexit>
 80157b2:	4803      	ldr	r0, [pc, #12]	; (80157c0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 80157b4:	f009 f84a 	bl	801e84c <__cxa_guard_release>
    return AGENCYB_TTF_12_4bpp;
 80157b8:	4b05      	ldr	r3, [pc, #20]	; (80157d0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x94>)
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	20005518 	.word	0x20005518
 80157c4:	0803b084 	.word	0x0803b084
 80157c8:	0803b378 	.word	0x0803b378
 80157cc:	08038588 	.word	0x08038588
 80157d0:	200054f0 	.word	0x200054f0
 80157d4:	0801572d 	.word	0x0801572d

080157d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_14_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_14_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_14_4bpp(glyphs_AGENCYB_TTF_14_4bpp, 113, 14, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_14_4bpp, kerning_AGENCYB_TTF_14_4bpp, 63, 0, 0, 0);
 80157d8:	b580      	push	{r7, lr}
 80157da:	af00      	add	r7, sp, #0
 80157dc:	4801      	ldr	r0, [pc, #4]	; (80157e4 <__tcf_0+0xc>)
 80157de:	f7ff feb1 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 80157e2:	bd80      	pop	{r7, pc}
 80157e4:	2000551c 	.word	0x2000551c

080157e8 <_Z27getFont_AGENCYB_TTF_14_4bppv>:
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b08c      	sub	sp, #48	; 0x30
 80157ec:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_14_4bpp(glyphs_AGENCYB_TTF_14_4bpp, 113, 14, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_14_4bpp, kerning_AGENCYB_TTF_14_4bpp, 63, 0, 0, 0);
 80157ee:	4b1f      	ldr	r3, [pc, #124]	; (801586c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	f3bf 8f5b 	dmb	ish
 80157f6:	b2db      	uxtb	r3, r3
 80157f8:	f003 0301 	and.w	r3, r3, #1
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	bf0c      	ite	eq
 8015800:	2301      	moveq	r3, #1
 8015802:	2300      	movne	r3, #0
 8015804:	b2db      	uxtb	r3, r3
 8015806:	2b00      	cmp	r3, #0
 8015808:	d02c      	beq.n	8015864 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x7c>
 801580a:	4818      	ldr	r0, [pc, #96]	; (801586c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 801580c:	f009 f812 	bl	801e834 <__cxa_guard_acquire>
 8015810:	4603      	mov	r3, r0
 8015812:	2b00      	cmp	r3, #0
 8015814:	bf14      	ite	ne
 8015816:	2301      	movne	r3, #1
 8015818:	2300      	moveq	r3, #0
 801581a:	b2db      	uxtb	r3, r3
 801581c:	2b00      	cmp	r3, #0
 801581e:	d021      	beq.n	8015864 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x7c>
 8015820:	2300      	movs	r3, #0
 8015822:	930a      	str	r3, [sp, #40]	; 0x28
 8015824:	2300      	movs	r3, #0
 8015826:	9309      	str	r3, [sp, #36]	; 0x24
 8015828:	2300      	movs	r3, #0
 801582a:	9308      	str	r3, [sp, #32]
 801582c:	233f      	movs	r3, #63	; 0x3f
 801582e:	9307      	str	r3, [sp, #28]
 8015830:	4b0f      	ldr	r3, [pc, #60]	; (8015870 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x88>)
 8015832:	9306      	str	r3, [sp, #24]
 8015834:	4b0f      	ldr	r3, [pc, #60]	; (8015874 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x8c>)
 8015836:	9305      	str	r3, [sp, #20]
 8015838:	2301      	movs	r3, #1
 801583a:	9304      	str	r3, [sp, #16]
 801583c:	2301      	movs	r3, #1
 801583e:	9303      	str	r3, [sp, #12]
 8015840:	2301      	movs	r3, #1
 8015842:	9302      	str	r3, [sp, #8]
 8015844:	2304      	movs	r3, #4
 8015846:	9301      	str	r3, [sp, #4]
 8015848:	2304      	movs	r3, #4
 801584a:	9300      	str	r3, [sp, #0]
 801584c:	230e      	movs	r3, #14
 801584e:	2271      	movs	r2, #113	; 0x71
 8015850:	4909      	ldr	r1, [pc, #36]	; (8015878 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x90>)
 8015852:	480a      	ldr	r0, [pc, #40]	; (801587c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x94>)
 8015854:	f7ff fed0 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015858:	4809      	ldr	r0, [pc, #36]	; (8015880 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x98>)
 801585a:	f009 f835 	bl	801e8c8 <atexit>
 801585e:	4803      	ldr	r0, [pc, #12]	; (801586c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 8015860:	f008 fff4 	bl	801e84c <__cxa_guard_release>
    return AGENCYB_TTF_14_4bpp;
 8015864:	4b05      	ldr	r3, [pc, #20]	; (801587c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x94>)
}
 8015866:	4618      	mov	r0, r3
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}
 801586c:	20005544 	.word	0x20005544
 8015870:	0803b088 	.word	0x0803b088
 8015874:	0803b37c 	.word	0x0803b37c
 8015878:	08038918 	.word	0x08038918
 801587c:	2000551c 	.word	0x2000551c
 8015880:	080157d9 	.word	0x080157d9

08015884 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_20_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_20_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_20_4bpp(glyphs_AGENCYB_TTF_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_20_4bpp, kerning_AGENCYB_TTF_20_4bpp, 63, 0, 0, 0);
 8015884:	b580      	push	{r7, lr}
 8015886:	af00      	add	r7, sp, #0
 8015888:	4801      	ldr	r0, [pc, #4]	; (8015890 <__tcf_0+0xc>)
 801588a:	f7ff fe5b 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 801588e:	bd80      	pop	{r7, pc}
 8015890:	20005548 	.word	0x20005548

08015894 <_Z27getFont_AGENCYB_TTF_20_4bppv>:
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b08c      	sub	sp, #48	; 0x30
 8015898:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_20_4bpp(glyphs_AGENCYB_TTF_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_20_4bpp, kerning_AGENCYB_TTF_20_4bpp, 63, 0, 0, 0);
 801589a:	4b1f      	ldr	r3, [pc, #124]	; (8015918 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	f3bf 8f5b 	dmb	ish
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	f003 0301 	and.w	r3, r3, #1
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	bf0c      	ite	eq
 80158ac:	2301      	moveq	r3, #1
 80158ae:	2300      	movne	r3, #0
 80158b0:	b2db      	uxtb	r3, r3
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d02c      	beq.n	8015910 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x7c>
 80158b6:	4818      	ldr	r0, [pc, #96]	; (8015918 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 80158b8:	f008 ffbc 	bl	801e834 <__cxa_guard_acquire>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	bf14      	ite	ne
 80158c2:	2301      	movne	r3, #1
 80158c4:	2300      	moveq	r3, #0
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d021      	beq.n	8015910 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x7c>
 80158cc:	2300      	movs	r3, #0
 80158ce:	930a      	str	r3, [sp, #40]	; 0x28
 80158d0:	2300      	movs	r3, #0
 80158d2:	9309      	str	r3, [sp, #36]	; 0x24
 80158d4:	2300      	movs	r3, #0
 80158d6:	9308      	str	r3, [sp, #32]
 80158d8:	233f      	movs	r3, #63	; 0x3f
 80158da:	9307      	str	r3, [sp, #28]
 80158dc:	4b0f      	ldr	r3, [pc, #60]	; (801591c <_Z27getFont_AGENCYB_TTF_20_4bppv+0x88>)
 80158de:	9306      	str	r3, [sp, #24]
 80158e0:	4b0f      	ldr	r3, [pc, #60]	; (8015920 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x8c>)
 80158e2:	9305      	str	r3, [sp, #20]
 80158e4:	2301      	movs	r3, #1
 80158e6:	9304      	str	r3, [sp, #16]
 80158e8:	2301      	movs	r3, #1
 80158ea:	9303      	str	r3, [sp, #12]
 80158ec:	2301      	movs	r3, #1
 80158ee:	9302      	str	r3, [sp, #8]
 80158f0:	2304      	movs	r3, #4
 80158f2:	9301      	str	r3, [sp, #4]
 80158f4:	2304      	movs	r3, #4
 80158f6:	9300      	str	r3, [sp, #0]
 80158f8:	2314      	movs	r3, #20
 80158fa:	226e      	movs	r2, #110	; 0x6e
 80158fc:	4909      	ldr	r1, [pc, #36]	; (8015924 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x90>)
 80158fe:	480a      	ldr	r0, [pc, #40]	; (8015928 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x94>)
 8015900:	f7ff fe7a 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015904:	4809      	ldr	r0, [pc, #36]	; (801592c <_Z27getFont_AGENCYB_TTF_20_4bppv+0x98>)
 8015906:	f008 ffdf 	bl	801e8c8 <atexit>
 801590a:	4803      	ldr	r0, [pc, #12]	; (8015918 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 801590c:	f008 ff9e 	bl	801e84c <__cxa_guard_release>
    return AGENCYB_TTF_20_4bpp;
 8015910:	4b05      	ldr	r3, [pc, #20]	; (8015928 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x94>)
}
 8015912:	4618      	mov	r0, r3
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	20005570 	.word	0x20005570
 801591c:	0803b08c 	.word	0x0803b08c
 8015920:	0803b390 	.word	0x0803b390
 8015924:	08038f48 	.word	0x08038f48
 8015928:	20005548 	.word	0x20005548
 801592c:	08015885 	.word	0x08015885

08015930 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_24_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_24_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_24_4bpp(glyphs_AGENCYB_TTF_24_4bpp, 63, 24, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_24_4bpp, kerning_AGENCYB_TTF_24_4bpp, 63, 0, 0, 0);
 8015930:	b580      	push	{r7, lr}
 8015932:	af00      	add	r7, sp, #0
 8015934:	4801      	ldr	r0, [pc, #4]	; (801593c <__tcf_0+0xc>)
 8015936:	f7ff fe05 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 801593a:	bd80      	pop	{r7, pc}
 801593c:	20005574 	.word	0x20005574

08015940 <_Z27getFont_AGENCYB_TTF_24_4bppv>:
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b08c      	sub	sp, #48	; 0x30
 8015944:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_24_4bpp(glyphs_AGENCYB_TTF_24_4bpp, 63, 24, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_24_4bpp, kerning_AGENCYB_TTF_24_4bpp, 63, 0, 0, 0);
 8015946:	4b1f      	ldr	r3, [pc, #124]	; (80159c4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	f3bf 8f5b 	dmb	ish
 801594e:	b2db      	uxtb	r3, r3
 8015950:	f003 0301 	and.w	r3, r3, #1
 8015954:	2b00      	cmp	r3, #0
 8015956:	bf0c      	ite	eq
 8015958:	2301      	moveq	r3, #1
 801595a:	2300      	movne	r3, #0
 801595c:	b2db      	uxtb	r3, r3
 801595e:	2b00      	cmp	r3, #0
 8015960:	d02c      	beq.n	80159bc <_Z27getFont_AGENCYB_TTF_24_4bppv+0x7c>
 8015962:	4818      	ldr	r0, [pc, #96]	; (80159c4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 8015964:	f008 ff66 	bl	801e834 <__cxa_guard_acquire>
 8015968:	4603      	mov	r3, r0
 801596a:	2b00      	cmp	r3, #0
 801596c:	bf14      	ite	ne
 801596e:	2301      	movne	r3, #1
 8015970:	2300      	moveq	r3, #0
 8015972:	b2db      	uxtb	r3, r3
 8015974:	2b00      	cmp	r3, #0
 8015976:	d021      	beq.n	80159bc <_Z27getFont_AGENCYB_TTF_24_4bppv+0x7c>
 8015978:	2300      	movs	r3, #0
 801597a:	930a      	str	r3, [sp, #40]	; 0x28
 801597c:	2300      	movs	r3, #0
 801597e:	9309      	str	r3, [sp, #36]	; 0x24
 8015980:	2300      	movs	r3, #0
 8015982:	9308      	str	r3, [sp, #32]
 8015984:	233f      	movs	r3, #63	; 0x3f
 8015986:	9307      	str	r3, [sp, #28]
 8015988:	4b0f      	ldr	r3, [pc, #60]	; (80159c8 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x88>)
 801598a:	9306      	str	r3, [sp, #24]
 801598c:	4b0f      	ldr	r3, [pc, #60]	; (80159cc <_Z27getFont_AGENCYB_TTF_24_4bppv+0x8c>)
 801598e:	9305      	str	r3, [sp, #20]
 8015990:	2301      	movs	r3, #1
 8015992:	9304      	str	r3, [sp, #16]
 8015994:	2301      	movs	r3, #1
 8015996:	9303      	str	r3, [sp, #12]
 8015998:	2301      	movs	r3, #1
 801599a:	9302      	str	r3, [sp, #8]
 801599c:	2304      	movs	r3, #4
 801599e:	9301      	str	r3, [sp, #4]
 80159a0:	2304      	movs	r3, #4
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	2318      	movs	r3, #24
 80159a6:	223f      	movs	r2, #63	; 0x3f
 80159a8:	4909      	ldr	r1, [pc, #36]	; (80159d0 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x90>)
 80159aa:	480a      	ldr	r0, [pc, #40]	; (80159d4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x94>)
 80159ac:	f7ff fe24 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80159b0:	4809      	ldr	r0, [pc, #36]	; (80159d8 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x98>)
 80159b2:	f008 ff89 	bl	801e8c8 <atexit>
 80159b6:	4803      	ldr	r0, [pc, #12]	; (80159c4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 80159b8:	f008 ff48 	bl	801e84c <__cxa_guard_release>
    return AGENCYB_TTF_24_4bpp;
 80159bc:	4b05      	ldr	r3, [pc, #20]	; (80159d4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x94>)
}
 80159be:	4618      	mov	r0, r3
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	2000559c 	.word	0x2000559c
 80159c8:	0803b090 	.word	0x0803b090
 80159cc:	0803b3a4 	.word	0x0803b3a4
 80159d0:	0803954c 	.word	0x0803954c
 80159d4:	20005574 	.word	0x20005574
 80159d8:	08015931 	.word	0x08015931

080159dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_28_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_28_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_28_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_28_4bpp(glyphs_AGENCYB_TTF_28_4bpp, 110, 28, 6, 4, 1, 1, 1, unicodes_AGENCYB_TTF_28_4bpp, kerning_AGENCYB_TTF_28_4bpp, 63, 0, 0, 0);
 80159dc:	b580      	push	{r7, lr}
 80159de:	af00      	add	r7, sp, #0
 80159e0:	4801      	ldr	r0, [pc, #4]	; (80159e8 <__tcf_0+0xc>)
 80159e2:	f7ff fdaf 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	200055a0 	.word	0x200055a0

080159ec <_Z27getFont_AGENCYB_TTF_28_4bppv>:
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b08c      	sub	sp, #48	; 0x30
 80159f0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_28_4bpp(glyphs_AGENCYB_TTF_28_4bpp, 110, 28, 6, 4, 1, 1, 1, unicodes_AGENCYB_TTF_28_4bpp, kerning_AGENCYB_TTF_28_4bpp, 63, 0, 0, 0);
 80159f2:	4b1f      	ldr	r3, [pc, #124]	; (8015a70 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	f3bf 8f5b 	dmb	ish
 80159fa:	b2db      	uxtb	r3, r3
 80159fc:	f003 0301 	and.w	r3, r3, #1
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	bf0c      	ite	eq
 8015a04:	2301      	moveq	r3, #1
 8015a06:	2300      	movne	r3, #0
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d02c      	beq.n	8015a68 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x7c>
 8015a0e:	4818      	ldr	r0, [pc, #96]	; (8015a70 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 8015a10:	f008 ff10 	bl	801e834 <__cxa_guard_acquire>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	bf14      	ite	ne
 8015a1a:	2301      	movne	r3, #1
 8015a1c:	2300      	moveq	r3, #0
 8015a1e:	b2db      	uxtb	r3, r3
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d021      	beq.n	8015a68 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x7c>
 8015a24:	2300      	movs	r3, #0
 8015a26:	930a      	str	r3, [sp, #40]	; 0x28
 8015a28:	2300      	movs	r3, #0
 8015a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	9308      	str	r3, [sp, #32]
 8015a30:	233f      	movs	r3, #63	; 0x3f
 8015a32:	9307      	str	r3, [sp, #28]
 8015a34:	4b0f      	ldr	r3, [pc, #60]	; (8015a74 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x88>)
 8015a36:	9306      	str	r3, [sp, #24]
 8015a38:	4b0f      	ldr	r3, [pc, #60]	; (8015a78 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x8c>)
 8015a3a:	9305      	str	r3, [sp, #20]
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	9304      	str	r3, [sp, #16]
 8015a40:	2301      	movs	r3, #1
 8015a42:	9303      	str	r3, [sp, #12]
 8015a44:	2301      	movs	r3, #1
 8015a46:	9302      	str	r3, [sp, #8]
 8015a48:	2304      	movs	r3, #4
 8015a4a:	9301      	str	r3, [sp, #4]
 8015a4c:	2306      	movs	r3, #6
 8015a4e:	9300      	str	r3, [sp, #0]
 8015a50:	231c      	movs	r3, #28
 8015a52:	226e      	movs	r2, #110	; 0x6e
 8015a54:	4909      	ldr	r1, [pc, #36]	; (8015a7c <_Z27getFont_AGENCYB_TTF_28_4bppv+0x90>)
 8015a56:	480a      	ldr	r0, [pc, #40]	; (8015a80 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x94>)
 8015a58:	f7ff fdce 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015a5c:	4809      	ldr	r0, [pc, #36]	; (8015a84 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x98>)
 8015a5e:	f008 ff33 	bl	801e8c8 <atexit>
 8015a62:	4803      	ldr	r0, [pc, #12]	; (8015a70 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 8015a64:	f008 fef2 	bl	801e84c <__cxa_guard_release>
    return AGENCYB_TTF_28_4bpp;
 8015a68:	4b05      	ldr	r3, [pc, #20]	; (8015a80 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x94>)
}
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}
 8015a70:	200055c8 	.word	0x200055c8
 8015a74:	0803b094 	.word	0x0803b094
 8015a78:	0803b3a8 	.word	0x0803b3a8
 8015a7c:	080398c0 	.word	0x080398c0
 8015a80:	200055a0 	.word	0x200055a0
 8015a84:	080159dd 	.word	0x080159dd

08015a88 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_30_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_30_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_30_4bpp(glyphs_AGENCYB_TTF_30_4bpp, 65, 30, 5, 4, 1, 1, 0, unicodes_AGENCYB_TTF_30_4bpp, kerning_AGENCYB_TTF_30_4bpp, 63, 0, 0, 0);
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	af00      	add	r7, sp, #0
 8015a8c:	4801      	ldr	r0, [pc, #4]	; (8015a94 <__tcf_0+0xc>)
 8015a8e:	f7ff fd59 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	200055cc 	.word	0x200055cc

08015a98 <_Z27getFont_AGENCYB_TTF_30_4bppv>:
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b08c      	sub	sp, #48	; 0x30
 8015a9c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_30_4bpp(glyphs_AGENCYB_TTF_30_4bpp, 65, 30, 5, 4, 1, 1, 0, unicodes_AGENCYB_TTF_30_4bpp, kerning_AGENCYB_TTF_30_4bpp, 63, 0, 0, 0);
 8015a9e:	4b1f      	ldr	r3, [pc, #124]	; (8015b1c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	f3bf 8f5b 	dmb	ish
 8015aa6:	b2db      	uxtb	r3, r3
 8015aa8:	f003 0301 	and.w	r3, r3, #1
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	bf0c      	ite	eq
 8015ab0:	2301      	moveq	r3, #1
 8015ab2:	2300      	movne	r3, #0
 8015ab4:	b2db      	uxtb	r3, r3
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d02c      	beq.n	8015b14 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x7c>
 8015aba:	4818      	ldr	r0, [pc, #96]	; (8015b1c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 8015abc:	f008 feba 	bl	801e834 <__cxa_guard_acquire>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	bf14      	ite	ne
 8015ac6:	2301      	movne	r3, #1
 8015ac8:	2300      	moveq	r3, #0
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d021      	beq.n	8015b14 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x7c>
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8015ad8:	2300      	movs	r3, #0
 8015ada:	9308      	str	r3, [sp, #32]
 8015adc:	233f      	movs	r3, #63	; 0x3f
 8015ade:	9307      	str	r3, [sp, #28]
 8015ae0:	4b0f      	ldr	r3, [pc, #60]	; (8015b20 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x88>)
 8015ae2:	9306      	str	r3, [sp, #24]
 8015ae4:	4b0f      	ldr	r3, [pc, #60]	; (8015b24 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x8c>)
 8015ae6:	9305      	str	r3, [sp, #20]
 8015ae8:	2300      	movs	r3, #0
 8015aea:	9304      	str	r3, [sp, #16]
 8015aec:	2301      	movs	r3, #1
 8015aee:	9303      	str	r3, [sp, #12]
 8015af0:	2301      	movs	r3, #1
 8015af2:	9302      	str	r3, [sp, #8]
 8015af4:	2304      	movs	r3, #4
 8015af6:	9301      	str	r3, [sp, #4]
 8015af8:	2305      	movs	r3, #5
 8015afa:	9300      	str	r3, [sp, #0]
 8015afc:	231e      	movs	r3, #30
 8015afe:	2241      	movs	r2, #65	; 0x41
 8015b00:	4909      	ldr	r1, [pc, #36]	; (8015b28 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x90>)
 8015b02:	480a      	ldr	r0, [pc, #40]	; (8015b2c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x94>)
 8015b04:	f7ff fd78 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015b08:	4809      	ldr	r0, [pc, #36]	; (8015b30 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x98>)
 8015b0a:	f008 fedd 	bl	801e8c8 <atexit>
 8015b0e:	4803      	ldr	r0, [pc, #12]	; (8015b1c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 8015b10:	f008 fe9c 	bl	801e84c <__cxa_guard_release>
    return AGENCYB_TTF_30_4bpp;
 8015b14:	4b05      	ldr	r3, [pc, #20]	; (8015b2c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x94>)
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	200055f4 	.word	0x200055f4
 8015b20:	0803b098 	.word	0x0803b098
 8015b24:	0803b3bc 	.word	0x0803b3bc
 8015b28:	08039ec4 	.word	0x08039ec4
 8015b2c:	200055cc 	.word	0x200055cc
 8015b30:	08015a89 	.word	0x08015a89

08015b34 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_50_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_50_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_50_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_50_4bpp(glyphs_AGENCYB_TTF_50_4bpp, 67, 50, 9, 4, 1, 2, 0, unicodes_AGENCYB_TTF_50_4bpp, kerning_AGENCYB_TTF_50_4bpp, 63, 0, 0, 0);
 8015b34:	b580      	push	{r7, lr}
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	4801      	ldr	r0, [pc, #4]	; (8015b40 <__tcf_0+0xc>)
 8015b3a:	f7ff fd03 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	200055f8 	.word	0x200055f8

08015b44 <_Z27getFont_AGENCYB_TTF_50_4bppv>:
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b08c      	sub	sp, #48	; 0x30
 8015b48:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_50_4bpp(glyphs_AGENCYB_TTF_50_4bpp, 67, 50, 9, 4, 1, 2, 0, unicodes_AGENCYB_TTF_50_4bpp, kerning_AGENCYB_TTF_50_4bpp, 63, 0, 0, 0);
 8015b4a:	4b1f      	ldr	r3, [pc, #124]	; (8015bc8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	f3bf 8f5b 	dmb	ish
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	f003 0301 	and.w	r3, r3, #1
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	bf0c      	ite	eq
 8015b5c:	2301      	moveq	r3, #1
 8015b5e:	2300      	movne	r3, #0
 8015b60:	b2db      	uxtb	r3, r3
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d02c      	beq.n	8015bc0 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x7c>
 8015b66:	4818      	ldr	r0, [pc, #96]	; (8015bc8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 8015b68:	f008 fe64 	bl	801e834 <__cxa_guard_acquire>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	bf14      	ite	ne
 8015b72:	2301      	movne	r3, #1
 8015b74:	2300      	moveq	r3, #0
 8015b76:	b2db      	uxtb	r3, r3
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d021      	beq.n	8015bc0 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x7c>
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8015b80:	2300      	movs	r3, #0
 8015b82:	9309      	str	r3, [sp, #36]	; 0x24
 8015b84:	2300      	movs	r3, #0
 8015b86:	9308      	str	r3, [sp, #32]
 8015b88:	233f      	movs	r3, #63	; 0x3f
 8015b8a:	9307      	str	r3, [sp, #28]
 8015b8c:	4b0f      	ldr	r3, [pc, #60]	; (8015bcc <_Z27getFont_AGENCYB_TTF_50_4bppv+0x88>)
 8015b8e:	9306      	str	r3, [sp, #24]
 8015b90:	4b0f      	ldr	r3, [pc, #60]	; (8015bd0 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x8c>)
 8015b92:	9305      	str	r3, [sp, #20]
 8015b94:	2300      	movs	r3, #0
 8015b96:	9304      	str	r3, [sp, #16]
 8015b98:	2302      	movs	r3, #2
 8015b9a:	9303      	str	r3, [sp, #12]
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	9302      	str	r3, [sp, #8]
 8015ba0:	2304      	movs	r3, #4
 8015ba2:	9301      	str	r3, [sp, #4]
 8015ba4:	2309      	movs	r3, #9
 8015ba6:	9300      	str	r3, [sp, #0]
 8015ba8:	2332      	movs	r3, #50	; 0x32
 8015baa:	2243      	movs	r2, #67	; 0x43
 8015bac:	4909      	ldr	r1, [pc, #36]	; (8015bd4 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x90>)
 8015bae:	480a      	ldr	r0, [pc, #40]	; (8015bd8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x94>)
 8015bb0:	f7ff fd22 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015bb4:	4809      	ldr	r0, [pc, #36]	; (8015bdc <_Z27getFont_AGENCYB_TTF_50_4bppv+0x98>)
 8015bb6:	f008 fe87 	bl	801e8c8 <atexit>
 8015bba:	4803      	ldr	r0, [pc, #12]	; (8015bc8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 8015bbc:	f008 fe46 	bl	801e84c <__cxa_guard_release>
    return AGENCYB_TTF_50_4bpp;
 8015bc0:	4b05      	ldr	r3, [pc, #20]	; (8015bd8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x94>)
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}
 8015bc8:	20005620 	.word	0x20005620
 8015bcc:	0803b09c 	.word	0x0803b09c
 8015bd0:	0803b3c0 	.word	0x0803b3c0
 8015bd4:	0803a254 	.word	0x0803a254
 8015bd8:	200055f8 	.word	0x200055f8
 8015bdc:	08015b35 	.word	0x08015b35

08015be0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 63, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8015be0:	b580      	push	{r7, lr}
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	4801      	ldr	r0, [pc, #4]	; (8015bec <__tcf_0+0xc>)
 8015be6:	f7ff fcad 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 8015bea:	bd80      	pop	{r7, pc}
 8015bec:	20005624 	.word	0x20005624

08015bf0 <_Z23getFont_verdana_10_4bppv>:
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b08c      	sub	sp, #48	; 0x30
 8015bf4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 63, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8015bf6:	4b1f      	ldr	r3, [pc, #124]	; (8015c74 <_Z23getFont_verdana_10_4bppv+0x84>)
 8015bf8:	781b      	ldrb	r3, [r3, #0]
 8015bfa:	f3bf 8f5b 	dmb	ish
 8015bfe:	b2db      	uxtb	r3, r3
 8015c00:	f003 0301 	and.w	r3, r3, #1
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	bf0c      	ite	eq
 8015c08:	2301      	moveq	r3, #1
 8015c0a:	2300      	movne	r3, #0
 8015c0c:	b2db      	uxtb	r3, r3
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d02c      	beq.n	8015c6c <_Z23getFont_verdana_10_4bppv+0x7c>
 8015c12:	4818      	ldr	r0, [pc, #96]	; (8015c74 <_Z23getFont_verdana_10_4bppv+0x84>)
 8015c14:	f008 fe0e 	bl	801e834 <__cxa_guard_acquire>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	bf14      	ite	ne
 8015c1e:	2301      	movne	r3, #1
 8015c20:	2300      	moveq	r3, #0
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d021      	beq.n	8015c6c <_Z23getFont_verdana_10_4bppv+0x7c>
 8015c28:	2300      	movs	r3, #0
 8015c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8015c30:	2300      	movs	r3, #0
 8015c32:	9308      	str	r3, [sp, #32]
 8015c34:	233f      	movs	r3, #63	; 0x3f
 8015c36:	9307      	str	r3, [sp, #28]
 8015c38:	4b0f      	ldr	r3, [pc, #60]	; (8015c78 <_Z23getFont_verdana_10_4bppv+0x88>)
 8015c3a:	9306      	str	r3, [sp, #24]
 8015c3c:	4b0f      	ldr	r3, [pc, #60]	; (8015c7c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8015c3e:	9305      	str	r3, [sp, #20]
 8015c40:	2301      	movs	r3, #1
 8015c42:	9304      	str	r3, [sp, #16]
 8015c44:	2301      	movs	r3, #1
 8015c46:	9303      	str	r3, [sp, #12]
 8015c48:	2301      	movs	r3, #1
 8015c4a:	9302      	str	r3, [sp, #8]
 8015c4c:	2304      	movs	r3, #4
 8015c4e:	9301      	str	r3, [sp, #4]
 8015c50:	2302      	movs	r3, #2
 8015c52:	9300      	str	r3, [sp, #0]
 8015c54:	230a      	movs	r3, #10
 8015c56:	223f      	movs	r2, #63	; 0x3f
 8015c58:	4909      	ldr	r1, [pc, #36]	; (8015c80 <_Z23getFont_verdana_10_4bppv+0x90>)
 8015c5a:	480a      	ldr	r0, [pc, #40]	; (8015c84 <_Z23getFont_verdana_10_4bppv+0x94>)
 8015c5c:	f7ff fccc 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015c60:	4809      	ldr	r0, [pc, #36]	; (8015c88 <_Z23getFont_verdana_10_4bppv+0x98>)
 8015c62:	f008 fe31 	bl	801e8c8 <atexit>
 8015c66:	4803      	ldr	r0, [pc, #12]	; (8015c74 <_Z23getFont_verdana_10_4bppv+0x84>)
 8015c68:	f008 fdf0 	bl	801e84c <__cxa_guard_release>
    return verdana_10_4bpp;
 8015c6c:	4b05      	ldr	r3, [pc, #20]	; (8015c84 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	2000564c 	.word	0x2000564c
 8015c78:	0803b0a0 	.word	0x0803b0a0
 8015c7c:	0803b3c4 	.word	0x0803b3c4
 8015c80:	0803a600 	.word	0x0803a600
 8015c84:	20005624 	.word	0x20005624
 8015c88:	08015be1 	.word	0x08015be1

08015c8c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	4801      	ldr	r0, [pc, #4]	; (8015c98 <__tcf_0+0xc>)
 8015c92:	f7ff fc57 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	20005650 	.word	0x20005650

08015c9c <_Z23getFont_verdana_20_4bppv>:
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b08c      	sub	sp, #48	; 0x30
 8015ca0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8015ca2:	4b1f      	ldr	r3, [pc, #124]	; (8015d20 <_Z23getFont_verdana_20_4bppv+0x84>)
 8015ca4:	781b      	ldrb	r3, [r3, #0]
 8015ca6:	f3bf 8f5b 	dmb	ish
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	f003 0301 	and.w	r3, r3, #1
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	bf0c      	ite	eq
 8015cb4:	2301      	moveq	r3, #1
 8015cb6:	2300      	movne	r3, #0
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d02c      	beq.n	8015d18 <_Z23getFont_verdana_20_4bppv+0x7c>
 8015cbe:	4818      	ldr	r0, [pc, #96]	; (8015d20 <_Z23getFont_verdana_20_4bppv+0x84>)
 8015cc0:	f008 fdb8 	bl	801e834 <__cxa_guard_acquire>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	bf14      	ite	ne
 8015cca:	2301      	movne	r3, #1
 8015ccc:	2300      	moveq	r3, #0
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d021      	beq.n	8015d18 <_Z23getFont_verdana_20_4bppv+0x7c>
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8015cd8:	2300      	movs	r3, #0
 8015cda:	9309      	str	r3, [sp, #36]	; 0x24
 8015cdc:	2300      	movs	r3, #0
 8015cde:	9308      	str	r3, [sp, #32]
 8015ce0:	233f      	movs	r3, #63	; 0x3f
 8015ce2:	9307      	str	r3, [sp, #28]
 8015ce4:	4b0f      	ldr	r3, [pc, #60]	; (8015d24 <_Z23getFont_verdana_20_4bppv+0x88>)
 8015ce6:	9306      	str	r3, [sp, #24]
 8015ce8:	4b0f      	ldr	r3, [pc, #60]	; (8015d28 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8015cea:	9305      	str	r3, [sp, #20]
 8015cec:	2301      	movs	r3, #1
 8015cee:	9304      	str	r3, [sp, #16]
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	9303      	str	r3, [sp, #12]
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	9302      	str	r3, [sp, #8]
 8015cf8:	2304      	movs	r3, #4
 8015cfa:	9301      	str	r3, [sp, #4]
 8015cfc:	2304      	movs	r3, #4
 8015cfe:	9300      	str	r3, [sp, #0]
 8015d00:	2314      	movs	r3, #20
 8015d02:	2242      	movs	r2, #66	; 0x42
 8015d04:	4909      	ldr	r1, [pc, #36]	; (8015d2c <_Z23getFont_verdana_20_4bppv+0x90>)
 8015d06:	480a      	ldr	r0, [pc, #40]	; (8015d30 <_Z23getFont_verdana_20_4bppv+0x94>)
 8015d08:	f7ff fc76 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015d0c:	4809      	ldr	r0, [pc, #36]	; (8015d34 <_Z23getFont_verdana_20_4bppv+0x98>)
 8015d0e:	f008 fddb 	bl	801e8c8 <atexit>
 8015d12:	4803      	ldr	r0, [pc, #12]	; (8015d20 <_Z23getFont_verdana_20_4bppv+0x84>)
 8015d14:	f008 fd9a 	bl	801e84c <__cxa_guard_release>
    return verdana_20_4bpp;
 8015d18:	4b05      	ldr	r3, [pc, #20]	; (8015d30 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}
 8015d20:	20005678 	.word	0x20005678
 8015d24:	0803b0a4 	.word	0x0803b0a4
 8015d28:	0803b3c8 	.word	0x0803b3c8
 8015d2c:	0803a974 	.word	0x0803a974
 8015d30:	20005650 	.word	0x20005650
 8015d34:	08015c8d 	.word	0x08015c8d

08015d38 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 63, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	4801      	ldr	r0, [pc, #4]	; (8015d44 <__tcf_0+0xc>)
 8015d3e:	f7ff fc01 	bl	8015544 <_ZN8touchgfx13GeneratedFontD1Ev>
 8015d42:	bd80      	pop	{r7, pc}
 8015d44:	2000567c 	.word	0x2000567c

08015d48 <_Z23getFont_verdana_40_4bppv>:
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b08c      	sub	sp, #48	; 0x30
 8015d4c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 63, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8015d4e:	4b1f      	ldr	r3, [pc, #124]	; (8015dcc <_Z23getFont_verdana_40_4bppv+0x84>)
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	f3bf 8f5b 	dmb	ish
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	f003 0301 	and.w	r3, r3, #1
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	bf0c      	ite	eq
 8015d60:	2301      	moveq	r3, #1
 8015d62:	2300      	movne	r3, #0
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d02c      	beq.n	8015dc4 <_Z23getFont_verdana_40_4bppv+0x7c>
 8015d6a:	4818      	ldr	r0, [pc, #96]	; (8015dcc <_Z23getFont_verdana_40_4bppv+0x84>)
 8015d6c:	f008 fd62 	bl	801e834 <__cxa_guard_acquire>
 8015d70:	4603      	mov	r3, r0
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	bf14      	ite	ne
 8015d76:	2301      	movne	r3, #1
 8015d78:	2300      	moveq	r3, #0
 8015d7a:	b2db      	uxtb	r3, r3
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d021      	beq.n	8015dc4 <_Z23getFont_verdana_40_4bppv+0x7c>
 8015d80:	2300      	movs	r3, #0
 8015d82:	930a      	str	r3, [sp, #40]	; 0x28
 8015d84:	2300      	movs	r3, #0
 8015d86:	9309      	str	r3, [sp, #36]	; 0x24
 8015d88:	2300      	movs	r3, #0
 8015d8a:	9308      	str	r3, [sp, #32]
 8015d8c:	233f      	movs	r3, #63	; 0x3f
 8015d8e:	9307      	str	r3, [sp, #28]
 8015d90:	4b0f      	ldr	r3, [pc, #60]	; (8015dd0 <_Z23getFont_verdana_40_4bppv+0x88>)
 8015d92:	9306      	str	r3, [sp, #24]
 8015d94:	4b0f      	ldr	r3, [pc, #60]	; (8015dd4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8015d96:	9305      	str	r3, [sp, #20]
 8015d98:	2302      	movs	r3, #2
 8015d9a:	9304      	str	r3, [sp, #16]
 8015d9c:	2302      	movs	r3, #2
 8015d9e:	9303      	str	r3, [sp, #12]
 8015da0:	2301      	movs	r3, #1
 8015da2:	9302      	str	r3, [sp, #8]
 8015da4:	2304      	movs	r3, #4
 8015da6:	9301      	str	r3, [sp, #4]
 8015da8:	2308      	movs	r3, #8
 8015daa:	9300      	str	r3, [sp, #0]
 8015dac:	2328      	movs	r3, #40	; 0x28
 8015dae:	223f      	movs	r2, #63	; 0x3f
 8015db0:	4909      	ldr	r1, [pc, #36]	; (8015dd8 <_Z23getFont_verdana_40_4bppv+0x90>)
 8015db2:	480a      	ldr	r0, [pc, #40]	; (8015ddc <_Z23getFont_verdana_40_4bppv+0x94>)
 8015db4:	f7ff fc20 	bl	80155f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8015db8:	4809      	ldr	r0, [pc, #36]	; (8015de0 <_Z23getFont_verdana_40_4bppv+0x98>)
 8015dba:	f008 fd85 	bl	801e8c8 <atexit>
 8015dbe:	4803      	ldr	r0, [pc, #12]	; (8015dcc <_Z23getFont_verdana_40_4bppv+0x84>)
 8015dc0:	f008 fd44 	bl	801e84c <__cxa_guard_release>
    return verdana_40_4bpp;
 8015dc4:	4b05      	ldr	r3, [pc, #20]	; (8015ddc <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	200056a4 	.word	0x200056a4
 8015dd0:	0803b1e0 	.word	0x0803b1e0
 8015dd4:	0803b3cc 	.word	0x0803b3cc
 8015dd8:	0803ad10 	.word	0x0803ad10
 8015ddc:	2000567c 	.word	0x2000567c
 8015de0:	08015d39 	.word	0x08015d39

08015de4 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
        : color(0)
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2200      	movs	r2, #0
 8015df0:	601a      	str	r2, [r3, #0]
    {
    }
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	4618      	mov	r0, r3
 8015df6:	370c      	adds	r7, #12
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfe:	4770      	bx	lr

08015e00 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8015e00:	b480      	push	{r7}
 8015e02:	b083      	sub	sp, #12
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	6039      	str	r1, [r7, #0]
        : color(col)
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	683a      	ldr	r2, [r7, #0]
 8015e0e:	601a      	str	r2, [r3, #0]
    {
    }
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	4618      	mov	r0, r3
 8015e14:	370c      	adds	r7, #12
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr

08015e1e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8015e1e:	b480      	push	{r7}
 8015e20:	b083      	sub	sp, #12
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	801a      	strh	r2, [r3, #0]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	805a      	strh	r2, [r3, #2]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2200      	movs	r2, #0
 8015e36:	809a      	strh	r2, [r3, #4]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	80da      	strh	r2, [r3, #6]
    {
    }
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	4618      	mov	r0, r3
 8015e42:	370c      	adds	r7, #12
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr

08015e4c <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8015e4c:	b480      	push	{r7}
 8015e4e:	b085      	sub	sp, #20
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	4608      	mov	r0, r1
 8015e56:	4611      	mov	r1, r2
 8015e58:	461a      	mov	r2, r3
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	817b      	strh	r3, [r7, #10]
 8015e5e:	460b      	mov	r3, r1
 8015e60:	813b      	strh	r3, [r7, #8]
 8015e62:	4613      	mov	r3, r2
 8015e64:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	897a      	ldrh	r2, [r7, #10]
 8015e6a:	801a      	strh	r2, [r3, #0]
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	893a      	ldrh	r2, [r7, #8]
 8015e70:	805a      	strh	r2, [r3, #2]
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	88fa      	ldrh	r2, [r7, #6]
 8015e76:	809a      	strh	r2, [r3, #4]
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	8b3a      	ldrh	r2, [r7, #24]
 8015e7c:	80da      	strh	r2, [r3, #6]
    {
    }
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	4618      	mov	r0, r3
 8015e82:	3714      	adds	r7, #20
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr

08015e8c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b082      	sub	sp, #8
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	460b      	mov	r3, r1
 8015e96:	807b      	strh	r3, [r7, #2]
 8015e98:	4613      	mov	r3, r2
 8015e9a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	3330      	adds	r3, #48	; 0x30
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015ea8:	4611      	mov	r1, r2
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	4798      	blx	r3
        setY(y);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	3334      	adds	r3, #52	; 0x34
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015eba:	4611      	mov	r1, r2
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	4798      	blx	r3
    }
 8015ec0:	bf00      	nop
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8015ec8:	b480      	push	{r7}
 8015eca:	b083      	sub	sp, #12
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	460b      	mov	r3, r1
 8015ed2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8015ed4:	4a06      	ldr	r2, [pc, #24]	; (8015ef0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	601a      	str	r2, [r3, #0]
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	887a      	ldrh	r2, [r7, #2]
 8015ede:	809a      	strh	r2, [r3, #4]
    }
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	370c      	adds	r7, #12
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eec:	4770      	bx	lr
 8015eee:	bf00      	nop
 8015ef0:	08022164 	.word	0x08022164

08015ef4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8015ef4:	b480      	push	{r7}
 8015ef6:	af00      	add	r7, sp, #0
    {
        return instance;
 8015ef8:	4b03      	ldr	r3, [pc, #12]	; (8015f08 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8015efa:	681b      	ldr	r3, [r3, #0]
    }
 8015efc:	4618      	mov	r0, r3
 8015efe:	46bd      	mov	sp, r7
 8015f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f04:	4770      	bx	lr
 8015f06:	bf00      	nop
 8015f08:	20006f14 	.word	0x20006f14

08015f0c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8015f0c:	b480      	push	{r7}
 8015f0e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8015f10:	4b0b      	ldr	r3, [pc, #44]	; (8015f40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d008      	beq.n	8015f2e <_ZN8touchgfx3HAL3lcdEv+0x22>
 8015f1c:	4b08      	ldr	r3, [pc, #32]	; (8015f40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d003      	beq.n	8015f2e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8015f26:	4b06      	ldr	r3, [pc, #24]	; (8015f40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f2c:	e002      	b.n	8015f34 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8015f2e:	4b04      	ldr	r3, [pc, #16]	; (8015f40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	689b      	ldr	r3, [r3, #8]
    }
 8015f34:	4618      	mov	r0, r3
 8015f36:	46bd      	mov	sp, r7
 8015f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3c:	4770      	bx	lr
 8015f3e:	bf00      	nop
 8015f40:	20006f14 	.word	0x20006f14

08015f44 <_ZN8touchgfx8Keyboard6LayoutD1Ev>:

    /**
     * Definition of the keyboard layout. The keyboard can handle changing layouts, so
     * different keyboard modes can be implemented by changing layouts and key mappings.
     */
    struct Layout
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	331c      	adds	r3, #28
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7ff fb19 	bl	8015588 <_ZN8touchgfx9TypedTextD1Ev>
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3708      	adds	r7, #8
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotoSyringeSelectionScreenWipeTransitionSouthImpl()
{
    touchgfx::makeTransition<SyringeSelectionView, SyringeSelectionPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 8015f60:	b590      	push	{r4, r7, lr}
 8015f62:	b085      	sub	sp, #20
 8015f64:	af02      	add	r7, sp, #8
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6039      	str	r1, [r7, #0]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2b01      	cmp	r3, #1
 8015f6e:	f040 81d3 	bne.w	8016318 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f78:	4293      	cmp	r3, r2
 8015f7a:	f040 81cd 	bne.w	8016318 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
    {26, Rect(63 + 28 * 3, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(63 + 28 * 4, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(63 + 28 * 5, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(63 + 28 * 6, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(62, 193, 252, 40), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};
 8015f7e:	4cda      	ldr	r4, [pc, #872]	; (80162e8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8015f80:	2301      	movs	r3, #1
 8015f82:	7023      	strb	r3, [r4, #0]
 8015f84:	1ca0      	adds	r0, r4, #2
 8015f86:	2328      	movs	r3, #40	; 0x28
 8015f88:	9300      	str	r3, [sp, #0]
 8015f8a:	231a      	movs	r3, #26
 8015f8c:	223d      	movs	r2, #61	; 0x3d
 8015f8e:	2107      	movs	r1, #7
 8015f90:	f7ff ff5c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8015f94:	2328      	movs	r3, #40	; 0x28
 8015f96:	8163      	strh	r3, [r4, #10]
 8015f98:	340c      	adds	r4, #12
 8015f9a:	2302      	movs	r3, #2
 8015f9c:	7023      	strb	r3, [r4, #0]
 8015f9e:	1ca0      	adds	r0, r4, #2
 8015fa0:	2328      	movs	r3, #40	; 0x28
 8015fa2:	9300      	str	r3, [sp, #0]
 8015fa4:	231a      	movs	r3, #26
 8015fa6:	223d      	movs	r2, #61	; 0x3d
 8015fa8:	2123      	movs	r1, #35	; 0x23
 8015faa:	f7ff ff4f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8015fae:	2328      	movs	r3, #40	; 0x28
 8015fb0:	8163      	strh	r3, [r4, #10]
 8015fb2:	340c      	adds	r4, #12
 8015fb4:	2303      	movs	r3, #3
 8015fb6:	7023      	strb	r3, [r4, #0]
 8015fb8:	1ca0      	adds	r0, r4, #2
 8015fba:	2328      	movs	r3, #40	; 0x28
 8015fbc:	9300      	str	r3, [sp, #0]
 8015fbe:	231a      	movs	r3, #26
 8015fc0:	223d      	movs	r2, #61	; 0x3d
 8015fc2:	213f      	movs	r1, #63	; 0x3f
 8015fc4:	f7ff ff42 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8015fc8:	2328      	movs	r3, #40	; 0x28
 8015fca:	8163      	strh	r3, [r4, #10]
 8015fcc:	340c      	adds	r4, #12
 8015fce:	2304      	movs	r3, #4
 8015fd0:	7023      	strb	r3, [r4, #0]
 8015fd2:	1ca0      	adds	r0, r4, #2
 8015fd4:	2328      	movs	r3, #40	; 0x28
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	231a      	movs	r3, #26
 8015fda:	223d      	movs	r2, #61	; 0x3d
 8015fdc:	215b      	movs	r1, #91	; 0x5b
 8015fde:	f7ff ff35 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8015fe2:	2328      	movs	r3, #40	; 0x28
 8015fe4:	8163      	strh	r3, [r4, #10]
 8015fe6:	340c      	adds	r4, #12
 8015fe8:	2305      	movs	r3, #5
 8015fea:	7023      	strb	r3, [r4, #0]
 8015fec:	1ca0      	adds	r0, r4, #2
 8015fee:	2328      	movs	r3, #40	; 0x28
 8015ff0:	9300      	str	r3, [sp, #0]
 8015ff2:	231a      	movs	r3, #26
 8015ff4:	223d      	movs	r2, #61	; 0x3d
 8015ff6:	2177      	movs	r1, #119	; 0x77
 8015ff8:	f7ff ff28 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8015ffc:	2328      	movs	r3, #40	; 0x28
 8015ffe:	8163      	strh	r3, [r4, #10]
 8016000:	340c      	adds	r4, #12
 8016002:	2306      	movs	r3, #6
 8016004:	7023      	strb	r3, [r4, #0]
 8016006:	1ca0      	adds	r0, r4, #2
 8016008:	2328      	movs	r3, #40	; 0x28
 801600a:	9300      	str	r3, [sp, #0]
 801600c:	231a      	movs	r3, #26
 801600e:	223d      	movs	r2, #61	; 0x3d
 8016010:	2193      	movs	r1, #147	; 0x93
 8016012:	f7ff ff1b 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016016:	2328      	movs	r3, #40	; 0x28
 8016018:	8163      	strh	r3, [r4, #10]
 801601a:	340c      	adds	r4, #12
 801601c:	2307      	movs	r3, #7
 801601e:	7023      	strb	r3, [r4, #0]
 8016020:	1ca0      	adds	r0, r4, #2
 8016022:	2328      	movs	r3, #40	; 0x28
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	231a      	movs	r3, #26
 8016028:	223d      	movs	r2, #61	; 0x3d
 801602a:	21af      	movs	r1, #175	; 0xaf
 801602c:	f7ff ff0e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016030:	2328      	movs	r3, #40	; 0x28
 8016032:	8163      	strh	r3, [r4, #10]
 8016034:	340c      	adds	r4, #12
 8016036:	2308      	movs	r3, #8
 8016038:	7023      	strb	r3, [r4, #0]
 801603a:	1ca0      	adds	r0, r4, #2
 801603c:	2328      	movs	r3, #40	; 0x28
 801603e:	9300      	str	r3, [sp, #0]
 8016040:	231a      	movs	r3, #26
 8016042:	223d      	movs	r2, #61	; 0x3d
 8016044:	21cb      	movs	r1, #203	; 0xcb
 8016046:	f7ff ff01 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801604a:	2328      	movs	r3, #40	; 0x28
 801604c:	8163      	strh	r3, [r4, #10]
 801604e:	340c      	adds	r4, #12
 8016050:	2309      	movs	r3, #9
 8016052:	7023      	strb	r3, [r4, #0]
 8016054:	1ca0      	adds	r0, r4, #2
 8016056:	2328      	movs	r3, #40	; 0x28
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	231a      	movs	r3, #26
 801605c:	223d      	movs	r2, #61	; 0x3d
 801605e:	21e7      	movs	r1, #231	; 0xe7
 8016060:	f7ff fef4 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016064:	2328      	movs	r3, #40	; 0x28
 8016066:	8163      	strh	r3, [r4, #10]
 8016068:	340c      	adds	r4, #12
 801606a:	230a      	movs	r3, #10
 801606c:	7023      	strb	r3, [r4, #0]
 801606e:	1ca0      	adds	r0, r4, #2
 8016070:	2328      	movs	r3, #40	; 0x28
 8016072:	9300      	str	r3, [sp, #0]
 8016074:	231a      	movs	r3, #26
 8016076:	223d      	movs	r2, #61	; 0x3d
 8016078:	f240 1103 	movw	r1, #259	; 0x103
 801607c:	f7ff fee6 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016080:	2328      	movs	r3, #40	; 0x28
 8016082:	8163      	strh	r3, [r4, #10]
 8016084:	340c      	adds	r4, #12
 8016086:	230b      	movs	r3, #11
 8016088:	7023      	strb	r3, [r4, #0]
 801608a:	1ca0      	adds	r0, r4, #2
 801608c:	2328      	movs	r3, #40	; 0x28
 801608e:	9300      	str	r3, [sp, #0]
 8016090:	231a      	movs	r3, #26
 8016092:	223d      	movs	r2, #61	; 0x3d
 8016094:	f240 111f 	movw	r1, #287	; 0x11f
 8016098:	f7ff fed8 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801609c:	2328      	movs	r3, #40	; 0x28
 801609e:	8163      	strh	r3, [r4, #10]
 80160a0:	340c      	adds	r4, #12
 80160a2:	230c      	movs	r3, #12
 80160a4:	7023      	strb	r3, [r4, #0]
 80160a6:	1ca0      	adds	r0, r4, #2
 80160a8:	2328      	movs	r3, #40	; 0x28
 80160aa:	9300      	str	r3, [sp, #0]
 80160ac:	231a      	movs	r3, #26
 80160ae:	2269      	movs	r2, #105	; 0x69
 80160b0:	2107      	movs	r1, #7
 80160b2:	f7ff fecb 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80160b6:	2328      	movs	r3, #40	; 0x28
 80160b8:	8163      	strh	r3, [r4, #10]
 80160ba:	340c      	adds	r4, #12
 80160bc:	230d      	movs	r3, #13
 80160be:	7023      	strb	r3, [r4, #0]
 80160c0:	1ca0      	adds	r0, r4, #2
 80160c2:	2328      	movs	r3, #40	; 0x28
 80160c4:	9300      	str	r3, [sp, #0]
 80160c6:	231a      	movs	r3, #26
 80160c8:	2269      	movs	r2, #105	; 0x69
 80160ca:	2123      	movs	r1, #35	; 0x23
 80160cc:	f7ff febe 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80160d0:	2328      	movs	r3, #40	; 0x28
 80160d2:	8163      	strh	r3, [r4, #10]
 80160d4:	340c      	adds	r4, #12
 80160d6:	230e      	movs	r3, #14
 80160d8:	7023      	strb	r3, [r4, #0]
 80160da:	1ca0      	adds	r0, r4, #2
 80160dc:	2328      	movs	r3, #40	; 0x28
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	231a      	movs	r3, #26
 80160e2:	2269      	movs	r2, #105	; 0x69
 80160e4:	213f      	movs	r1, #63	; 0x3f
 80160e6:	f7ff feb1 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80160ea:	2328      	movs	r3, #40	; 0x28
 80160ec:	8163      	strh	r3, [r4, #10]
 80160ee:	340c      	adds	r4, #12
 80160f0:	230f      	movs	r3, #15
 80160f2:	7023      	strb	r3, [r4, #0]
 80160f4:	1ca0      	adds	r0, r4, #2
 80160f6:	2328      	movs	r3, #40	; 0x28
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	231a      	movs	r3, #26
 80160fc:	2269      	movs	r2, #105	; 0x69
 80160fe:	215b      	movs	r1, #91	; 0x5b
 8016100:	f7ff fea4 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016104:	2328      	movs	r3, #40	; 0x28
 8016106:	8163      	strh	r3, [r4, #10]
 8016108:	340c      	adds	r4, #12
 801610a:	2310      	movs	r3, #16
 801610c:	7023      	strb	r3, [r4, #0]
 801610e:	1ca0      	adds	r0, r4, #2
 8016110:	2328      	movs	r3, #40	; 0x28
 8016112:	9300      	str	r3, [sp, #0]
 8016114:	231a      	movs	r3, #26
 8016116:	2269      	movs	r2, #105	; 0x69
 8016118:	2177      	movs	r1, #119	; 0x77
 801611a:	f7ff fe97 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801611e:	2328      	movs	r3, #40	; 0x28
 8016120:	8163      	strh	r3, [r4, #10]
 8016122:	340c      	adds	r4, #12
 8016124:	2311      	movs	r3, #17
 8016126:	7023      	strb	r3, [r4, #0]
 8016128:	1ca0      	adds	r0, r4, #2
 801612a:	2328      	movs	r3, #40	; 0x28
 801612c:	9300      	str	r3, [sp, #0]
 801612e:	231a      	movs	r3, #26
 8016130:	2269      	movs	r2, #105	; 0x69
 8016132:	2193      	movs	r1, #147	; 0x93
 8016134:	f7ff fe8a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016138:	2328      	movs	r3, #40	; 0x28
 801613a:	8163      	strh	r3, [r4, #10]
 801613c:	340c      	adds	r4, #12
 801613e:	2312      	movs	r3, #18
 8016140:	7023      	strb	r3, [r4, #0]
 8016142:	1ca0      	adds	r0, r4, #2
 8016144:	2328      	movs	r3, #40	; 0x28
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	231a      	movs	r3, #26
 801614a:	2269      	movs	r2, #105	; 0x69
 801614c:	21af      	movs	r1, #175	; 0xaf
 801614e:	f7ff fe7d 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016152:	2328      	movs	r3, #40	; 0x28
 8016154:	8163      	strh	r3, [r4, #10]
 8016156:	340c      	adds	r4, #12
 8016158:	2313      	movs	r3, #19
 801615a:	7023      	strb	r3, [r4, #0]
 801615c:	1ca0      	adds	r0, r4, #2
 801615e:	2328      	movs	r3, #40	; 0x28
 8016160:	9300      	str	r3, [sp, #0]
 8016162:	231a      	movs	r3, #26
 8016164:	2269      	movs	r2, #105	; 0x69
 8016166:	21cb      	movs	r1, #203	; 0xcb
 8016168:	f7ff fe70 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801616c:	2328      	movs	r3, #40	; 0x28
 801616e:	8163      	strh	r3, [r4, #10]
 8016170:	340c      	adds	r4, #12
 8016172:	2314      	movs	r3, #20
 8016174:	7023      	strb	r3, [r4, #0]
 8016176:	1ca0      	adds	r0, r4, #2
 8016178:	2328      	movs	r3, #40	; 0x28
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	231a      	movs	r3, #26
 801617e:	2269      	movs	r2, #105	; 0x69
 8016180:	21e7      	movs	r1, #231	; 0xe7
 8016182:	f7ff fe63 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016186:	2328      	movs	r3, #40	; 0x28
 8016188:	8163      	strh	r3, [r4, #10]
 801618a:	340c      	adds	r4, #12
 801618c:	2315      	movs	r3, #21
 801618e:	7023      	strb	r3, [r4, #0]
 8016190:	1ca0      	adds	r0, r4, #2
 8016192:	2328      	movs	r3, #40	; 0x28
 8016194:	9300      	str	r3, [sp, #0]
 8016196:	231a      	movs	r3, #26
 8016198:	2269      	movs	r2, #105	; 0x69
 801619a:	f240 1103 	movw	r1, #259	; 0x103
 801619e:	f7ff fe55 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80161a2:	2328      	movs	r3, #40	; 0x28
 80161a4:	8163      	strh	r3, [r4, #10]
 80161a6:	340c      	adds	r4, #12
 80161a8:	2316      	movs	r3, #22
 80161aa:	7023      	strb	r3, [r4, #0]
 80161ac:	1ca0      	adds	r0, r4, #2
 80161ae:	2328      	movs	r3, #40	; 0x28
 80161b0:	9300      	str	r3, [sp, #0]
 80161b2:	231a      	movs	r3, #26
 80161b4:	2269      	movs	r2, #105	; 0x69
 80161b6:	f240 111f 	movw	r1, #287	; 0x11f
 80161ba:	f7ff fe47 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80161be:	2328      	movs	r3, #40	; 0x28
 80161c0:	8163      	strh	r3, [r4, #10]
 80161c2:	340c      	adds	r4, #12
 80161c4:	2317      	movs	r3, #23
 80161c6:	7023      	strb	r3, [r4, #0]
 80161c8:	1ca0      	adds	r0, r4, #2
 80161ca:	2328      	movs	r3, #40	; 0x28
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	231a      	movs	r3, #26
 80161d0:	2295      	movs	r2, #149	; 0x95
 80161d2:	213f      	movs	r1, #63	; 0x3f
 80161d4:	f7ff fe3a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80161d8:	2328      	movs	r3, #40	; 0x28
 80161da:	8163      	strh	r3, [r4, #10]
 80161dc:	340c      	adds	r4, #12
 80161de:	2318      	movs	r3, #24
 80161e0:	7023      	strb	r3, [r4, #0]
 80161e2:	1ca0      	adds	r0, r4, #2
 80161e4:	2328      	movs	r3, #40	; 0x28
 80161e6:	9300      	str	r3, [sp, #0]
 80161e8:	231a      	movs	r3, #26
 80161ea:	2295      	movs	r2, #149	; 0x95
 80161ec:	215b      	movs	r1, #91	; 0x5b
 80161ee:	f7ff fe2d 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80161f2:	2328      	movs	r3, #40	; 0x28
 80161f4:	8163      	strh	r3, [r4, #10]
 80161f6:	340c      	adds	r4, #12
 80161f8:	2319      	movs	r3, #25
 80161fa:	7023      	strb	r3, [r4, #0]
 80161fc:	1ca0      	adds	r0, r4, #2
 80161fe:	2328      	movs	r3, #40	; 0x28
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	231a      	movs	r3, #26
 8016204:	2295      	movs	r2, #149	; 0x95
 8016206:	2177      	movs	r1, #119	; 0x77
 8016208:	f7ff fe20 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801620c:	2328      	movs	r3, #40	; 0x28
 801620e:	8163      	strh	r3, [r4, #10]
 8016210:	340c      	adds	r4, #12
 8016212:	231a      	movs	r3, #26
 8016214:	7023      	strb	r3, [r4, #0]
 8016216:	1ca0      	adds	r0, r4, #2
 8016218:	2328      	movs	r3, #40	; 0x28
 801621a:	9300      	str	r3, [sp, #0]
 801621c:	231a      	movs	r3, #26
 801621e:	2295      	movs	r2, #149	; 0x95
 8016220:	2193      	movs	r1, #147	; 0x93
 8016222:	f7ff fe13 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016226:	2328      	movs	r3, #40	; 0x28
 8016228:	8163      	strh	r3, [r4, #10]
 801622a:	340c      	adds	r4, #12
 801622c:	231b      	movs	r3, #27
 801622e:	7023      	strb	r3, [r4, #0]
 8016230:	1ca0      	adds	r0, r4, #2
 8016232:	2328      	movs	r3, #40	; 0x28
 8016234:	9300      	str	r3, [sp, #0]
 8016236:	231a      	movs	r3, #26
 8016238:	2295      	movs	r2, #149	; 0x95
 801623a:	21af      	movs	r1, #175	; 0xaf
 801623c:	f7ff fe06 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016240:	2328      	movs	r3, #40	; 0x28
 8016242:	8163      	strh	r3, [r4, #10]
 8016244:	340c      	adds	r4, #12
 8016246:	231c      	movs	r3, #28
 8016248:	7023      	strb	r3, [r4, #0]
 801624a:	1ca0      	adds	r0, r4, #2
 801624c:	2328      	movs	r3, #40	; 0x28
 801624e:	9300      	str	r3, [sp, #0]
 8016250:	231a      	movs	r3, #26
 8016252:	2295      	movs	r2, #149	; 0x95
 8016254:	21cb      	movs	r1, #203	; 0xcb
 8016256:	f7ff fdf9 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801625a:	2328      	movs	r3, #40	; 0x28
 801625c:	8163      	strh	r3, [r4, #10]
 801625e:	340c      	adds	r4, #12
 8016260:	231d      	movs	r3, #29
 8016262:	7023      	strb	r3, [r4, #0]
 8016264:	1ca0      	adds	r0, r4, #2
 8016266:	2328      	movs	r3, #40	; 0x28
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	231a      	movs	r3, #26
 801626c:	2295      	movs	r2, #149	; 0x95
 801626e:	21e7      	movs	r1, #231	; 0xe7
 8016270:	f7ff fdec 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016274:	2328      	movs	r3, #40	; 0x28
 8016276:	8163      	strh	r3, [r4, #10]
 8016278:	340c      	adds	r4, #12
 801627a:	231e      	movs	r3, #30
 801627c:	7023      	strb	r3, [r4, #0]
 801627e:	1ca0      	adds	r0, r4, #2
 8016280:	2328      	movs	r3, #40	; 0x28
 8016282:	9300      	str	r3, [sp, #0]
 8016284:	23fc      	movs	r3, #252	; 0xfc
 8016286:	22c1      	movs	r2, #193	; 0xc1
 8016288:	213e      	movs	r1, #62	; 0x3e
 801628a:	f7ff fddf 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801628e:	232b      	movs	r3, #43	; 0x2b
 8016290:	8163      	strh	r3, [r4, #10]
static Keyboard::CallbackArea callbackAreas[3] =
{
    {Rect(5, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID},     // caps-lock
    {Rect(258, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID},  // backspace
    {Rect(5, 193, 56, 40), 0, BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID},       // mode
};
 8016292:	4c16      	ldr	r4, [pc, #88]	; (80162ec <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8016294:	4620      	mov	r0, r4
 8016296:	2328      	movs	r3, #40	; 0x28
 8016298:	9300      	str	r3, [sp, #0]
 801629a:	2338      	movs	r3, #56	; 0x38
 801629c:	2295      	movs	r2, #149	; 0x95
 801629e:	2105      	movs	r1, #5
 80162a0:	f7ff fdd4 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80162a4:	2300      	movs	r3, #0
 80162a6:	60a3      	str	r3, [r4, #8]
 80162a8:	232a      	movs	r3, #42	; 0x2a
 80162aa:	81a3      	strh	r3, [r4, #12]
 80162ac:	3410      	adds	r4, #16
 80162ae:	4620      	mov	r0, r4
 80162b0:	2328      	movs	r3, #40	; 0x28
 80162b2:	9300      	str	r3, [sp, #0]
 80162b4:	2338      	movs	r3, #56	; 0x38
 80162b6:	2295      	movs	r2, #149	; 0x95
 80162b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80162bc:	f7ff fdc6 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80162c0:	2300      	movs	r3, #0
 80162c2:	60a3      	str	r3, [r4, #8]
 80162c4:	2327      	movs	r3, #39	; 0x27
 80162c6:	81a3      	strh	r3, [r4, #12]
 80162c8:	3410      	adds	r4, #16
 80162ca:	4620      	mov	r0, r4
 80162cc:	2328      	movs	r3, #40	; 0x28
 80162ce:	9300      	str	r3, [sp, #0]
 80162d0:	2338      	movs	r3, #56	; 0x38
 80162d2:	22c1      	movs	r2, #193	; 0xc1
 80162d4:	2105      	movs	r1, #5
 80162d6:	f7ff fdb9 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80162da:	2300      	movs	r3, #0
 80162dc:	60a3      	str	r3, [r4, #8]
 80162de:	2329      	movs	r3, #41	; 0x29
 80162e0:	81a3      	strh	r3, [r4, #12]
#else
#error Unknown USE_BPP
#endif
    Typography::KEYBOARD,
    0
};
 80162e2:	2328      	movs	r3, #40	; 0x28
 80162e4:	9300      	str	r3, [sp, #0]
 80162e6:	e003      	b.n	80162f0 <_Z41__static_initialization_and_destruction_0ii+0x390>
 80162e8:	200056a8 	.word	0x200056a8
 80162ec:	20005810 	.word	0x20005810
 80162f0:	f44f 739a 	mov.w	r3, #308	; 0x134
 80162f4:	220a      	movs	r2, #10
 80162f6:	210f      	movs	r1, #15
 80162f8:	480f      	ldr	r0, [pc, #60]	; (8016338 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80162fa:	f7ff fda7 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80162fe:	2130      	movs	r1, #48	; 0x30
 8016300:	480e      	ldr	r0, [pc, #56]	; (801633c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8016302:	f7ff fde1 	bl	8015ec8 <_ZN8touchgfx9TypedTextC1Et>
 8016306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801630a:	480d      	ldr	r0, [pc, #52]	; (8016340 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 801630c:	f7ff fd78 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
 8016310:	2100      	movs	r1, #0
 8016312:	480c      	ldr	r0, [pc, #48]	; (8016344 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8016314:	f7ff fd74 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d107      	bne.n	801632e <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016324:	4293      	cmp	r3, r2
 8016326:	d102      	bne.n	801632e <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8016328:	4807      	ldr	r0, [pc, #28]	; (8016348 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 801632a:	f7ff fe0b 	bl	8015f44 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 801632e:	bf00      	nop
 8016330:	370c      	adds	r7, #12
 8016332:	46bd      	mov	sp, r7
 8016334:	bd90      	pop	{r4, r7, pc}
 8016336:	bf00      	nop
 8016338:	20000026 	.word	0x20000026
 801633c:	20000030 	.word	0x20000030
 8016340:	20000038 	.word	0x20000038
 8016344:	20000040 	.word	0x20000040
 8016348:	20000014 	.word	0x20000014

0801634c <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 801634c:	b580      	push	{r7, lr}
 801634e:	af00      	add	r7, sp, #0
 8016350:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016354:	2001      	movs	r0, #1
 8016356:	f7ff fe03 	bl	8015f60 <_Z41__static_initialization_and_destruction_0ii>
 801635a:	bd80      	pop	{r7, pc}

0801635c <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 801635c:	b580      	push	{r7, lr}
 801635e:	af00      	add	r7, sp, #0
 8016360:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016364:	2000      	movs	r0, #0
 8016366:	f7ff fdfb 	bl	8015f60 <_Z41__static_initialization_and_destruction_0ii>
 801636a:	bd80      	pop	{r7, pc}

0801636c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801636c:	b480      	push	{r7}
 801636e:	b085      	sub	sp, #20
 8016370:	af00      	add	r7, sp, #0
 8016372:	60f8      	str	r0, [r7, #12]
 8016374:	460b      	mov	r3, r1
 8016376:	607a      	str	r2, [r7, #4]
 8016378:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801637a:	2300      	movs	r3, #0
    }
 801637c:	4618      	mov	r0, r3
 801637e:	3714      	adds	r7, #20
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr

08016388 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8016388:	b480      	push	{r7}
 801638a:	b083      	sub	sp, #12
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8016390:	2300      	movs	r3, #0
    }
 8016392:	4618      	mov	r0, r3
 8016394:	370c      	adds	r7, #12
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr

0801639e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801639e:	b480      	push	{r7}
 80163a0:	b083      	sub	sp, #12
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80163a6:	2300      	movs	r3, #0
    }
 80163a8:	4618      	mov	r0, r3
 80163aa:	370c      	adds	r7, #12
 80163ac:	46bd      	mov	sp, r7
 80163ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b2:	4770      	bx	lr

080163b4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80163b4:	b40e      	push	{r1, r2, r3}
 80163b6:	b580      	push	{r7, lr}
 80163b8:	b085      	sub	sp, #20
 80163ba:	af00      	add	r7, sp, #0
 80163bc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80163be:	f107 0320 	add.w	r3, r7, #32
 80163c2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	69fa      	ldr	r2, [r7, #28]
 80163c8:	2100      	movs	r1, #0
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f004 feba 	bl	801b144 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80163d0:	4603      	mov	r3, r0
 80163d2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80163d4:	89fb      	ldrh	r3, [r7, #14]
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3714      	adds	r7, #20
 80163da:	46bd      	mov	sp, r7
 80163dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80163e0:	b003      	add	sp, #12
 80163e2:	4770      	bx	lr

080163e4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80163e4:	b40c      	push	{r2, r3}
 80163e6:	b580      	push	{r7, lr}
 80163e8:	b084      	sub	sp, #16
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	6078      	str	r0, [r7, #4]
 80163ee:	460b      	mov	r3, r1
 80163f0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80163f2:	f107 031c 	add.w	r3, r7, #28
 80163f6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80163f8:	78f9      	ldrb	r1, [r7, #3]
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	69ba      	ldr	r2, [r7, #24]
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f004 fea0 	bl	801b144 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8016404:	4603      	mov	r3, r0
 8016406:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8016408:	89fb      	ldrh	r3, [r7, #14]
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016414:	b002      	add	sp, #8
 8016416:	4770      	bx	lr

08016418 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b08a      	sub	sp, #40	; 0x28
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	460b      	mov	r3, r1
 8016422:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016428:	2b00      	cmp	r3, #0
 801642a:	d016      	beq.n	801645a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	3322      	adds	r3, #34	; 0x22
 8016430:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8016432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016434:	8adb      	ldrh	r3, [r3, #22]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d105      	bne.n	8016446 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801643a:	4b43      	ldr	r3, [pc, #268]	; (8016548 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801643c:	4a43      	ldr	r2, [pc, #268]	; (801654c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801643e:	21c0      	movs	r1, #192	; 0xc0
 8016440:	4843      	ldr	r0, [pc, #268]	; (8016550 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8016442:	f008 fa23 	bl	801e88c <__assert_func>
            return buffer[pos];
 8016446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016448:	8a9b      	ldrh	r3, [r3, #20]
 801644a:	461a      	mov	r2, r3
 801644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801644e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d001      	beq.n	801645a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8016456:	2301      	movs	r3, #1
 8016458:	e000      	b.n	801645c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801645a:	2300      	movs	r3, #0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d06a      	beq.n	8016536 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f005 fd37 	bl	801bed4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	3322      	adds	r3, #34	; 0x22
 801646a:	623b      	str	r3, [r7, #32]
 801646c:	2301      	movs	r3, #1
 801646e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8016470:	6a3b      	ldr	r3, [r7, #32]
 8016472:	8adb      	ldrh	r3, [r3, #22]
 8016474:	8bfa      	ldrh	r2, [r7, #30]
 8016476:	429a      	cmp	r2, r3
 8016478:	d305      	bcc.n	8016486 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801647a:	4b36      	ldr	r3, [pc, #216]	; (8016554 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801647c:	4a36      	ldr	r2, [pc, #216]	; (8016558 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801647e:	21c5      	movs	r1, #197	; 0xc5
 8016480:	4833      	ldr	r0, [pc, #204]	; (8016550 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8016482:	f008 fa03 	bl	801e88c <__assert_func>
            const uint16_t index = pos + offset;
 8016486:	6a3b      	ldr	r3, [r7, #32]
 8016488:	8a9a      	ldrh	r2, [r3, #20]
 801648a:	8bfb      	ldrh	r3, [r7, #30]
 801648c:	4413      	add	r3, r2
 801648e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8016490:	8bbb      	ldrh	r3, [r7, #28]
 8016492:	2b09      	cmp	r3, #9
 8016494:	d801      	bhi.n	801649a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8016496:	8bbb      	ldrh	r3, [r7, #28]
 8016498:	e001      	b.n	801649e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801649a:	8bbb      	ldrh	r3, [r7, #28]
 801649c:	3b0a      	subs	r3, #10
 801649e:	6a3a      	ldr	r2, [r7, #32]
 80164a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80164a4:	f640 123f 	movw	r2, #2367	; 0x93f
 80164a8:	4293      	cmp	r3, r2
 80164aa:	bf0c      	ite	eq
 80164ac:	2301      	moveq	r3, #1
 80164ae:	2300      	movne	r3, #0
 80164b0:	b2db      	uxtb	r3, r3
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d03f      	beq.n	8016536 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	3322      	adds	r3, #34	; 0x22
 80164ba:	687a      	ldr	r2, [r7, #4]
 80164bc:	3222      	adds	r2, #34	; 0x22
 80164be:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80164c0:	68ba      	ldr	r2, [r7, #8]
 80164c2:	8ad2      	ldrh	r2, [r2, #22]
 80164c4:	2a00      	cmp	r2, #0
 80164c6:	d105      	bne.n	80164d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80164c8:	4b1f      	ldr	r3, [pc, #124]	; (8016548 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80164ca:	4a20      	ldr	r2, [pc, #128]	; (801654c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80164cc:	21c0      	movs	r1, #192	; 0xc0
 80164ce:	4820      	ldr	r0, [pc, #128]	; (8016550 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80164d0:	f008 f9dc 	bl	801e88c <__assert_func>
            return buffer[pos];
 80164d4:	68ba      	ldr	r2, [r7, #8]
 80164d6:	8a92      	ldrh	r2, [r2, #20]
 80164d8:	4611      	mov	r1, r2
 80164da:	68ba      	ldr	r2, [r7, #8]
 80164dc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80164e0:	613b      	str	r3, [r7, #16]
 80164e2:	4613      	mov	r3, r2
 80164e4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	8adb      	ldrh	r3, [r3, #22]
 80164ea:	2b01      	cmp	r3, #1
 80164ec:	d806      	bhi.n	80164fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80164ee:	4b1b      	ldr	r3, [pc, #108]	; (801655c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80164f0:	4a1b      	ldr	r2, [pc, #108]	; (8016560 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80164f2:	f240 110d 	movw	r1, #269	; 0x10d
 80164f6:	4816      	ldr	r0, [pc, #88]	; (8016550 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80164f8:	f008 f9c8 	bl	801e88c <__assert_func>
            const uint16_t index = pos + 1;
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	8a9b      	ldrh	r3, [r3, #20]
 8016500:	3301      	adds	r3, #1
 8016502:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8016504:	89bb      	ldrh	r3, [r7, #12]
 8016506:	2b09      	cmp	r3, #9
 8016508:	d801      	bhi.n	801650e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801650a:	89bb      	ldrh	r3, [r7, #12]
 801650c:	e000      	b.n	8016510 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801650e:	2300      	movs	r3, #0
 8016510:	693a      	ldr	r2, [r7, #16]
 8016512:	89f9      	ldrh	r1, [r7, #14]
 8016514:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8016518:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	3322      	adds	r3, #34	; 0x22
 801651e:	61bb      	str	r3, [r7, #24]
 8016520:	f640 133f 	movw	r3, #2367	; 0x93f
 8016524:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8016526:	69bb      	ldr	r3, [r7, #24]
 8016528:	8a9b      	ldrh	r3, [r3, #20]
 801652a:	4619      	mov	r1, r3
 801652c:	69bb      	ldr	r3, [r7, #24]
 801652e:	8afa      	ldrh	r2, [r7, #22]
 8016530:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8016534:	bf00      	nop
        }
    }
    return getNextChar();
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f005 fbb0 	bl	801bc9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801653c:	4603      	mov	r3, r0
}
 801653e:	4618      	mov	r0, r3
 8016540:	3728      	adds	r7, #40	; 0x28
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	08021910 	.word	0x08021910
 801654c:	0802191c 	.word	0x0802191c
 8016550:	080219c8 	.word	0x080219c8
 8016554:	08021a10 	.word	0x08021a10
 8016558:	08021a20 	.word	0x08021a20
 801655c:	08021af4 	.word	0x08021af4
 8016560:	08021b00 	.word	0x08021b00

08016564 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b082      	sub	sp, #8
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f005 fb4d 	bl	801bc0c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8016572:	bf00      	nop
 8016574:	3708      	adds	r7, #8
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
	...

0801657c <_ZN17TypedTextDatabase8getFontsEv>:
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}

const touchgfx::Font** getFonts()
{
 801657c:	b480      	push	{r7}
 801657e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8016580:	4b02      	ldr	r3, [pc, #8]	; (801658c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8016582:	4618      	mov	r0, r3
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr
 801658c:	20005840 	.word	0x20005840

08016590 <_Z41__static_initialization_and_destruction_0ii>:
    case 9:
        touchgfx_fonts[9] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2b01      	cmp	r3, #1
 801659e:	d136      	bne.n	801660e <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d131      	bne.n	801660e <_Z41__static_initialization_and_destruction_0ii+0x7e>
    &(getFont_verdana_20_4bpp()),
 80165aa:	f7ff fb77 	bl	8015c9c <_Z23getFont_verdana_20_4bppv>
 80165ae:	4603      	mov	r3, r0
};
 80165b0:	4a19      	ldr	r2, [pc, #100]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165b2:	6013      	str	r3, [r2, #0]
    &(getFont_AGENCYB_TTF_20_4bpp()),
 80165b4:	f7ff f96e 	bl	8015894 <_Z27getFont_AGENCYB_TTF_20_4bppv>
 80165b8:	4603      	mov	r3, r0
};
 80165ba:	4a17      	ldr	r2, [pc, #92]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165bc:	6053      	str	r3, [r2, #4]
    &(getFont_AGENCYB_TTF_50_4bpp()),
 80165be:	f7ff fac1 	bl	8015b44 <_Z27getFont_AGENCYB_TTF_50_4bppv>
 80165c2:	4603      	mov	r3, r0
};
 80165c4:	4a14      	ldr	r2, [pc, #80]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165c6:	6093      	str	r3, [r2, #8]
    &(getFont_AGENCYB_TTF_30_4bpp()),
 80165c8:	f7ff fa66 	bl	8015a98 <_Z27getFont_AGENCYB_TTF_30_4bppv>
 80165cc:	4603      	mov	r3, r0
};
 80165ce:	4a12      	ldr	r2, [pc, #72]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165d0:	60d3      	str	r3, [r2, #12]
    &(getFont_AGENCYB_TTF_14_4bpp()),
 80165d2:	f7ff f909 	bl	80157e8 <_Z27getFont_AGENCYB_TTF_14_4bppv>
 80165d6:	4603      	mov	r3, r0
};
 80165d8:	4a0f      	ldr	r2, [pc, #60]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165da:	6113      	str	r3, [r2, #16]
    &(getFont_AGENCYB_TTF_28_4bpp()),
 80165dc:	f7ff fa06 	bl	80159ec <_Z27getFont_AGENCYB_TTF_28_4bppv>
 80165e0:	4603      	mov	r3, r0
};
 80165e2:	4a0d      	ldr	r2, [pc, #52]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165e4:	6153      	str	r3, [r2, #20]
    &(getFont_AGENCYB_TTF_24_4bpp()),
 80165e6:	f7ff f9ab 	bl	8015940 <_Z27getFont_AGENCYB_TTF_24_4bppv>
 80165ea:	4603      	mov	r3, r0
};
 80165ec:	4a0a      	ldr	r2, [pc, #40]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165ee:	6193      	str	r3, [r2, #24]
    &(getFont_AGENCYB_TTF_12_4bpp()),
 80165f0:	f7ff f8a4 	bl	801573c <_Z27getFont_AGENCYB_TTF_12_4bppv>
 80165f4:	4603      	mov	r3, r0
};
 80165f6:	4a08      	ldr	r2, [pc, #32]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80165f8:	61d3      	str	r3, [r2, #28]
    &(getFont_verdana_40_4bpp()),
 80165fa:	f7ff fba5 	bl	8015d48 <_Z23getFont_verdana_40_4bppv>
 80165fe:	4603      	mov	r3, r0
};
 8016600:	4a05      	ldr	r2, [pc, #20]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016602:	6213      	str	r3, [r2, #32]
    &(getFont_verdana_10_4bpp())
 8016604:	f7ff faf4 	bl	8015bf0 <_Z23getFont_verdana_10_4bppv>
 8016608:	4603      	mov	r3, r0
};
 801660a:	4a03      	ldr	r2, [pc, #12]	; (8016618 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801660c:	6253      	str	r3, [r2, #36]	; 0x24
} // namespace TypedTextDatabase
 801660e:	bf00      	nop
 8016610:	3708      	adds	r7, #8
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	20005840 	.word	0x20005840

0801661c <_GLOBAL__sub_I_touchgfx_fonts>:
 801661c:	b580      	push	{r7, lr}
 801661e:	af00      	add	r7, sp, #0
 8016620:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016624:	2001      	movs	r0, #1
 8016626:	f7ff ffb3 	bl	8016590 <_Z41__static_initialization_and_destruction_0ii>
 801662a:	bd80      	pop	{r7, pc}

0801662c <_Z41__static_initialization_and_destruction_0ii>:
}

Unicode::UnicodeChar * CustomKeyboard::getBuffer()
{
	return keyboard.getBuffer();
}
 801662c:	b590      	push	{r4, r7, lr}
 801662e:	b085      	sub	sp, #20
 8016630:	af02      	add	r7, sp, #8
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	6039      	str	r1, [r7, #0]
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2b01      	cmp	r3, #1
 801663a:	f040 81d3 	bne.w	80169e4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016644:	4293      	cmp	r3, r2
 8016646:	f040 81cd 	bne.w	80169e4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 801664a:	4cda      	ldr	r4, [pc, #872]	; (80169b4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 801664c:	2301      	movs	r3, #1
 801664e:	7023      	strb	r3, [r4, #0]
 8016650:	1ca0      	adds	r0, r4, #2
 8016652:	2328      	movs	r3, #40	; 0x28
 8016654:	9300      	str	r3, [sp, #0]
 8016656:	231a      	movs	r3, #26
 8016658:	223d      	movs	r2, #61	; 0x3d
 801665a:	2107      	movs	r1, #7
 801665c:	f7ff fbf6 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016660:	2328      	movs	r3, #40	; 0x28
 8016662:	8163      	strh	r3, [r4, #10]
 8016664:	340c      	adds	r4, #12
 8016666:	2302      	movs	r3, #2
 8016668:	7023      	strb	r3, [r4, #0]
 801666a:	1ca0      	adds	r0, r4, #2
 801666c:	2328      	movs	r3, #40	; 0x28
 801666e:	9300      	str	r3, [sp, #0]
 8016670:	231a      	movs	r3, #26
 8016672:	223d      	movs	r2, #61	; 0x3d
 8016674:	2123      	movs	r1, #35	; 0x23
 8016676:	f7ff fbe9 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801667a:	2328      	movs	r3, #40	; 0x28
 801667c:	8163      	strh	r3, [r4, #10]
 801667e:	340c      	adds	r4, #12
 8016680:	2303      	movs	r3, #3
 8016682:	7023      	strb	r3, [r4, #0]
 8016684:	1ca0      	adds	r0, r4, #2
 8016686:	2328      	movs	r3, #40	; 0x28
 8016688:	9300      	str	r3, [sp, #0]
 801668a:	231a      	movs	r3, #26
 801668c:	223d      	movs	r2, #61	; 0x3d
 801668e:	213f      	movs	r1, #63	; 0x3f
 8016690:	f7ff fbdc 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016694:	2328      	movs	r3, #40	; 0x28
 8016696:	8163      	strh	r3, [r4, #10]
 8016698:	340c      	adds	r4, #12
 801669a:	2304      	movs	r3, #4
 801669c:	7023      	strb	r3, [r4, #0]
 801669e:	1ca0      	adds	r0, r4, #2
 80166a0:	2328      	movs	r3, #40	; 0x28
 80166a2:	9300      	str	r3, [sp, #0]
 80166a4:	231a      	movs	r3, #26
 80166a6:	223d      	movs	r2, #61	; 0x3d
 80166a8:	215b      	movs	r1, #91	; 0x5b
 80166aa:	f7ff fbcf 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80166ae:	2328      	movs	r3, #40	; 0x28
 80166b0:	8163      	strh	r3, [r4, #10]
 80166b2:	340c      	adds	r4, #12
 80166b4:	2305      	movs	r3, #5
 80166b6:	7023      	strb	r3, [r4, #0]
 80166b8:	1ca0      	adds	r0, r4, #2
 80166ba:	2328      	movs	r3, #40	; 0x28
 80166bc:	9300      	str	r3, [sp, #0]
 80166be:	231a      	movs	r3, #26
 80166c0:	223d      	movs	r2, #61	; 0x3d
 80166c2:	2177      	movs	r1, #119	; 0x77
 80166c4:	f7ff fbc2 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80166c8:	2328      	movs	r3, #40	; 0x28
 80166ca:	8163      	strh	r3, [r4, #10]
 80166cc:	340c      	adds	r4, #12
 80166ce:	2306      	movs	r3, #6
 80166d0:	7023      	strb	r3, [r4, #0]
 80166d2:	1ca0      	adds	r0, r4, #2
 80166d4:	2328      	movs	r3, #40	; 0x28
 80166d6:	9300      	str	r3, [sp, #0]
 80166d8:	231a      	movs	r3, #26
 80166da:	223d      	movs	r2, #61	; 0x3d
 80166dc:	2193      	movs	r1, #147	; 0x93
 80166de:	f7ff fbb5 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80166e2:	2328      	movs	r3, #40	; 0x28
 80166e4:	8163      	strh	r3, [r4, #10]
 80166e6:	340c      	adds	r4, #12
 80166e8:	2307      	movs	r3, #7
 80166ea:	7023      	strb	r3, [r4, #0]
 80166ec:	1ca0      	adds	r0, r4, #2
 80166ee:	2328      	movs	r3, #40	; 0x28
 80166f0:	9300      	str	r3, [sp, #0]
 80166f2:	231a      	movs	r3, #26
 80166f4:	223d      	movs	r2, #61	; 0x3d
 80166f6:	21af      	movs	r1, #175	; 0xaf
 80166f8:	f7ff fba8 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80166fc:	2328      	movs	r3, #40	; 0x28
 80166fe:	8163      	strh	r3, [r4, #10]
 8016700:	340c      	adds	r4, #12
 8016702:	2308      	movs	r3, #8
 8016704:	7023      	strb	r3, [r4, #0]
 8016706:	1ca0      	adds	r0, r4, #2
 8016708:	2328      	movs	r3, #40	; 0x28
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	231a      	movs	r3, #26
 801670e:	223d      	movs	r2, #61	; 0x3d
 8016710:	21cb      	movs	r1, #203	; 0xcb
 8016712:	f7ff fb9b 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016716:	2328      	movs	r3, #40	; 0x28
 8016718:	8163      	strh	r3, [r4, #10]
 801671a:	340c      	adds	r4, #12
 801671c:	2309      	movs	r3, #9
 801671e:	7023      	strb	r3, [r4, #0]
 8016720:	1ca0      	adds	r0, r4, #2
 8016722:	2328      	movs	r3, #40	; 0x28
 8016724:	9300      	str	r3, [sp, #0]
 8016726:	231a      	movs	r3, #26
 8016728:	223d      	movs	r2, #61	; 0x3d
 801672a:	21e7      	movs	r1, #231	; 0xe7
 801672c:	f7ff fb8e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016730:	2328      	movs	r3, #40	; 0x28
 8016732:	8163      	strh	r3, [r4, #10]
 8016734:	340c      	adds	r4, #12
 8016736:	230a      	movs	r3, #10
 8016738:	7023      	strb	r3, [r4, #0]
 801673a:	1ca0      	adds	r0, r4, #2
 801673c:	2328      	movs	r3, #40	; 0x28
 801673e:	9300      	str	r3, [sp, #0]
 8016740:	231a      	movs	r3, #26
 8016742:	223d      	movs	r2, #61	; 0x3d
 8016744:	f240 1103 	movw	r1, #259	; 0x103
 8016748:	f7ff fb80 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801674c:	2328      	movs	r3, #40	; 0x28
 801674e:	8163      	strh	r3, [r4, #10]
 8016750:	340c      	adds	r4, #12
 8016752:	230b      	movs	r3, #11
 8016754:	7023      	strb	r3, [r4, #0]
 8016756:	1ca0      	adds	r0, r4, #2
 8016758:	2328      	movs	r3, #40	; 0x28
 801675a:	9300      	str	r3, [sp, #0]
 801675c:	231a      	movs	r3, #26
 801675e:	223d      	movs	r2, #61	; 0x3d
 8016760:	f240 111f 	movw	r1, #287	; 0x11f
 8016764:	f7ff fb72 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016768:	2328      	movs	r3, #40	; 0x28
 801676a:	8163      	strh	r3, [r4, #10]
 801676c:	340c      	adds	r4, #12
 801676e:	230c      	movs	r3, #12
 8016770:	7023      	strb	r3, [r4, #0]
 8016772:	1ca0      	adds	r0, r4, #2
 8016774:	2328      	movs	r3, #40	; 0x28
 8016776:	9300      	str	r3, [sp, #0]
 8016778:	231a      	movs	r3, #26
 801677a:	2269      	movs	r2, #105	; 0x69
 801677c:	2107      	movs	r1, #7
 801677e:	f7ff fb65 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016782:	2328      	movs	r3, #40	; 0x28
 8016784:	8163      	strh	r3, [r4, #10]
 8016786:	340c      	adds	r4, #12
 8016788:	230d      	movs	r3, #13
 801678a:	7023      	strb	r3, [r4, #0]
 801678c:	1ca0      	adds	r0, r4, #2
 801678e:	2328      	movs	r3, #40	; 0x28
 8016790:	9300      	str	r3, [sp, #0]
 8016792:	231a      	movs	r3, #26
 8016794:	2269      	movs	r2, #105	; 0x69
 8016796:	2123      	movs	r1, #35	; 0x23
 8016798:	f7ff fb58 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801679c:	2328      	movs	r3, #40	; 0x28
 801679e:	8163      	strh	r3, [r4, #10]
 80167a0:	340c      	adds	r4, #12
 80167a2:	230e      	movs	r3, #14
 80167a4:	7023      	strb	r3, [r4, #0]
 80167a6:	1ca0      	adds	r0, r4, #2
 80167a8:	2328      	movs	r3, #40	; 0x28
 80167aa:	9300      	str	r3, [sp, #0]
 80167ac:	231a      	movs	r3, #26
 80167ae:	2269      	movs	r2, #105	; 0x69
 80167b0:	213f      	movs	r1, #63	; 0x3f
 80167b2:	f7ff fb4b 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80167b6:	2328      	movs	r3, #40	; 0x28
 80167b8:	8163      	strh	r3, [r4, #10]
 80167ba:	340c      	adds	r4, #12
 80167bc:	230f      	movs	r3, #15
 80167be:	7023      	strb	r3, [r4, #0]
 80167c0:	1ca0      	adds	r0, r4, #2
 80167c2:	2328      	movs	r3, #40	; 0x28
 80167c4:	9300      	str	r3, [sp, #0]
 80167c6:	231a      	movs	r3, #26
 80167c8:	2269      	movs	r2, #105	; 0x69
 80167ca:	215b      	movs	r1, #91	; 0x5b
 80167cc:	f7ff fb3e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80167d0:	2328      	movs	r3, #40	; 0x28
 80167d2:	8163      	strh	r3, [r4, #10]
 80167d4:	340c      	adds	r4, #12
 80167d6:	2310      	movs	r3, #16
 80167d8:	7023      	strb	r3, [r4, #0]
 80167da:	1ca0      	adds	r0, r4, #2
 80167dc:	2328      	movs	r3, #40	; 0x28
 80167de:	9300      	str	r3, [sp, #0]
 80167e0:	231a      	movs	r3, #26
 80167e2:	2269      	movs	r2, #105	; 0x69
 80167e4:	2177      	movs	r1, #119	; 0x77
 80167e6:	f7ff fb31 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80167ea:	2328      	movs	r3, #40	; 0x28
 80167ec:	8163      	strh	r3, [r4, #10]
 80167ee:	340c      	adds	r4, #12
 80167f0:	2311      	movs	r3, #17
 80167f2:	7023      	strb	r3, [r4, #0]
 80167f4:	1ca0      	adds	r0, r4, #2
 80167f6:	2328      	movs	r3, #40	; 0x28
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	231a      	movs	r3, #26
 80167fc:	2269      	movs	r2, #105	; 0x69
 80167fe:	2193      	movs	r1, #147	; 0x93
 8016800:	f7ff fb24 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016804:	2328      	movs	r3, #40	; 0x28
 8016806:	8163      	strh	r3, [r4, #10]
 8016808:	340c      	adds	r4, #12
 801680a:	2312      	movs	r3, #18
 801680c:	7023      	strb	r3, [r4, #0]
 801680e:	1ca0      	adds	r0, r4, #2
 8016810:	2328      	movs	r3, #40	; 0x28
 8016812:	9300      	str	r3, [sp, #0]
 8016814:	231a      	movs	r3, #26
 8016816:	2269      	movs	r2, #105	; 0x69
 8016818:	21af      	movs	r1, #175	; 0xaf
 801681a:	f7ff fb17 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801681e:	2328      	movs	r3, #40	; 0x28
 8016820:	8163      	strh	r3, [r4, #10]
 8016822:	340c      	adds	r4, #12
 8016824:	2313      	movs	r3, #19
 8016826:	7023      	strb	r3, [r4, #0]
 8016828:	1ca0      	adds	r0, r4, #2
 801682a:	2328      	movs	r3, #40	; 0x28
 801682c:	9300      	str	r3, [sp, #0]
 801682e:	231a      	movs	r3, #26
 8016830:	2269      	movs	r2, #105	; 0x69
 8016832:	21cb      	movs	r1, #203	; 0xcb
 8016834:	f7ff fb0a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016838:	2328      	movs	r3, #40	; 0x28
 801683a:	8163      	strh	r3, [r4, #10]
 801683c:	340c      	adds	r4, #12
 801683e:	2314      	movs	r3, #20
 8016840:	7023      	strb	r3, [r4, #0]
 8016842:	1ca0      	adds	r0, r4, #2
 8016844:	2328      	movs	r3, #40	; 0x28
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	231a      	movs	r3, #26
 801684a:	2269      	movs	r2, #105	; 0x69
 801684c:	21e7      	movs	r1, #231	; 0xe7
 801684e:	f7ff fafd 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016852:	2328      	movs	r3, #40	; 0x28
 8016854:	8163      	strh	r3, [r4, #10]
 8016856:	340c      	adds	r4, #12
 8016858:	2315      	movs	r3, #21
 801685a:	7023      	strb	r3, [r4, #0]
 801685c:	1ca0      	adds	r0, r4, #2
 801685e:	2328      	movs	r3, #40	; 0x28
 8016860:	9300      	str	r3, [sp, #0]
 8016862:	231a      	movs	r3, #26
 8016864:	2269      	movs	r2, #105	; 0x69
 8016866:	f240 1103 	movw	r1, #259	; 0x103
 801686a:	f7ff faef 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801686e:	2328      	movs	r3, #40	; 0x28
 8016870:	8163      	strh	r3, [r4, #10]
 8016872:	340c      	adds	r4, #12
 8016874:	2316      	movs	r3, #22
 8016876:	7023      	strb	r3, [r4, #0]
 8016878:	1ca0      	adds	r0, r4, #2
 801687a:	2328      	movs	r3, #40	; 0x28
 801687c:	9300      	str	r3, [sp, #0]
 801687e:	231a      	movs	r3, #26
 8016880:	2269      	movs	r2, #105	; 0x69
 8016882:	f240 111f 	movw	r1, #287	; 0x11f
 8016886:	f7ff fae1 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801688a:	2328      	movs	r3, #40	; 0x28
 801688c:	8163      	strh	r3, [r4, #10]
 801688e:	340c      	adds	r4, #12
 8016890:	2317      	movs	r3, #23
 8016892:	7023      	strb	r3, [r4, #0]
 8016894:	1ca0      	adds	r0, r4, #2
 8016896:	2328      	movs	r3, #40	; 0x28
 8016898:	9300      	str	r3, [sp, #0]
 801689a:	231a      	movs	r3, #26
 801689c:	2295      	movs	r2, #149	; 0x95
 801689e:	213f      	movs	r1, #63	; 0x3f
 80168a0:	f7ff fad4 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80168a4:	2328      	movs	r3, #40	; 0x28
 80168a6:	8163      	strh	r3, [r4, #10]
 80168a8:	340c      	adds	r4, #12
 80168aa:	2318      	movs	r3, #24
 80168ac:	7023      	strb	r3, [r4, #0]
 80168ae:	1ca0      	adds	r0, r4, #2
 80168b0:	2328      	movs	r3, #40	; 0x28
 80168b2:	9300      	str	r3, [sp, #0]
 80168b4:	231a      	movs	r3, #26
 80168b6:	2295      	movs	r2, #149	; 0x95
 80168b8:	215b      	movs	r1, #91	; 0x5b
 80168ba:	f7ff fac7 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80168be:	2328      	movs	r3, #40	; 0x28
 80168c0:	8163      	strh	r3, [r4, #10]
 80168c2:	340c      	adds	r4, #12
 80168c4:	2319      	movs	r3, #25
 80168c6:	7023      	strb	r3, [r4, #0]
 80168c8:	1ca0      	adds	r0, r4, #2
 80168ca:	2328      	movs	r3, #40	; 0x28
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	231a      	movs	r3, #26
 80168d0:	2295      	movs	r2, #149	; 0x95
 80168d2:	2177      	movs	r1, #119	; 0x77
 80168d4:	f7ff faba 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80168d8:	2328      	movs	r3, #40	; 0x28
 80168da:	8163      	strh	r3, [r4, #10]
 80168dc:	340c      	adds	r4, #12
 80168de:	231a      	movs	r3, #26
 80168e0:	7023      	strb	r3, [r4, #0]
 80168e2:	1ca0      	adds	r0, r4, #2
 80168e4:	2328      	movs	r3, #40	; 0x28
 80168e6:	9300      	str	r3, [sp, #0]
 80168e8:	231a      	movs	r3, #26
 80168ea:	2295      	movs	r2, #149	; 0x95
 80168ec:	2193      	movs	r1, #147	; 0x93
 80168ee:	f7ff faad 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80168f2:	2328      	movs	r3, #40	; 0x28
 80168f4:	8163      	strh	r3, [r4, #10]
 80168f6:	340c      	adds	r4, #12
 80168f8:	231b      	movs	r3, #27
 80168fa:	7023      	strb	r3, [r4, #0]
 80168fc:	1ca0      	adds	r0, r4, #2
 80168fe:	2328      	movs	r3, #40	; 0x28
 8016900:	9300      	str	r3, [sp, #0]
 8016902:	231a      	movs	r3, #26
 8016904:	2295      	movs	r2, #149	; 0x95
 8016906:	21af      	movs	r1, #175	; 0xaf
 8016908:	f7ff faa0 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801690c:	2328      	movs	r3, #40	; 0x28
 801690e:	8163      	strh	r3, [r4, #10]
 8016910:	340c      	adds	r4, #12
 8016912:	231c      	movs	r3, #28
 8016914:	7023      	strb	r3, [r4, #0]
 8016916:	1ca0      	adds	r0, r4, #2
 8016918:	2328      	movs	r3, #40	; 0x28
 801691a:	9300      	str	r3, [sp, #0]
 801691c:	231a      	movs	r3, #26
 801691e:	2295      	movs	r2, #149	; 0x95
 8016920:	21cb      	movs	r1, #203	; 0xcb
 8016922:	f7ff fa93 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016926:	2328      	movs	r3, #40	; 0x28
 8016928:	8163      	strh	r3, [r4, #10]
 801692a:	340c      	adds	r4, #12
 801692c:	231d      	movs	r3, #29
 801692e:	7023      	strb	r3, [r4, #0]
 8016930:	1ca0      	adds	r0, r4, #2
 8016932:	2328      	movs	r3, #40	; 0x28
 8016934:	9300      	str	r3, [sp, #0]
 8016936:	231a      	movs	r3, #26
 8016938:	2295      	movs	r2, #149	; 0x95
 801693a:	21e7      	movs	r1, #231	; 0xe7
 801693c:	f7ff fa86 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016940:	2328      	movs	r3, #40	; 0x28
 8016942:	8163      	strh	r3, [r4, #10]
 8016944:	340c      	adds	r4, #12
 8016946:	231e      	movs	r3, #30
 8016948:	7023      	strb	r3, [r4, #0]
 801694a:	1ca0      	adds	r0, r4, #2
 801694c:	2328      	movs	r3, #40	; 0x28
 801694e:	9300      	str	r3, [sp, #0]
 8016950:	23fc      	movs	r3, #252	; 0xfc
 8016952:	22c1      	movs	r2, #193	; 0xc1
 8016954:	213e      	movs	r1, #62	; 0x3e
 8016956:	f7ff fa79 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801695a:	232b      	movs	r3, #43	; 0x2b
 801695c:	8163      	strh	r3, [r4, #10]
};
 801695e:	4c16      	ldr	r4, [pc, #88]	; (80169b8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8016960:	4620      	mov	r0, r4
 8016962:	2328      	movs	r3, #40	; 0x28
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	2338      	movs	r3, #56	; 0x38
 8016968:	2295      	movs	r2, #149	; 0x95
 801696a:	2105      	movs	r1, #5
 801696c:	f7ff fa6e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016970:	2300      	movs	r3, #0
 8016972:	60a3      	str	r3, [r4, #8]
 8016974:	232a      	movs	r3, #42	; 0x2a
 8016976:	81a3      	strh	r3, [r4, #12]
 8016978:	3410      	adds	r4, #16
 801697a:	4620      	mov	r0, r4
 801697c:	2328      	movs	r3, #40	; 0x28
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	2338      	movs	r3, #56	; 0x38
 8016982:	2295      	movs	r2, #149	; 0x95
 8016984:	f44f 7181 	mov.w	r1, #258	; 0x102
 8016988:	f7ff fa60 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801698c:	2300      	movs	r3, #0
 801698e:	60a3      	str	r3, [r4, #8]
 8016990:	2327      	movs	r3, #39	; 0x27
 8016992:	81a3      	strh	r3, [r4, #12]
 8016994:	3410      	adds	r4, #16
 8016996:	4620      	mov	r0, r4
 8016998:	2328      	movs	r3, #40	; 0x28
 801699a:	9300      	str	r3, [sp, #0]
 801699c:	2338      	movs	r3, #56	; 0x38
 801699e:	22c1      	movs	r2, #193	; 0xc1
 80169a0:	2105      	movs	r1, #5
 80169a2:	f7ff fa53 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80169a6:	2300      	movs	r3, #0
 80169a8:	60a3      	str	r3, [r4, #8]
 80169aa:	2329      	movs	r3, #41	; 0x29
 80169ac:	81a3      	strh	r3, [r4, #12]
};
 80169ae:	2328      	movs	r3, #40	; 0x28
 80169b0:	9300      	str	r3, [sp, #0]
 80169b2:	e003      	b.n	80169bc <_Z41__static_initialization_and_destruction_0ii+0x390>
 80169b4:	20005868 	.word	0x20005868
 80169b8:	200059d0 	.word	0x200059d0
 80169bc:	f44f 739a 	mov.w	r3, #308	; 0x134
 80169c0:	220a      	movs	r2, #10
 80169c2:	210f      	movs	r1, #15
 80169c4:	480f      	ldr	r0, [pc, #60]	; (8016a04 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80169c6:	f7ff fa41 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80169ca:	2130      	movs	r1, #48	; 0x30
 80169cc:	480e      	ldr	r0, [pc, #56]	; (8016a08 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80169ce:	f7ff fa7b 	bl	8015ec8 <_ZN8touchgfx9TypedTextC1Et>
 80169d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80169d6:	480d      	ldr	r0, [pc, #52]	; (8016a0c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80169d8:	f7ff fa12 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
 80169dc:	2100      	movs	r1, #0
 80169de:	480c      	ldr	r0, [pc, #48]	; (8016a10 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80169e0:	f7ff fa0e 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d107      	bne.n	80169fa <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169f0:	4293      	cmp	r3, r2
 80169f2:	d102      	bne.n	80169fa <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80169f4:	4807      	ldr	r0, [pc, #28]	; (8016a14 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80169f6:	f7ff faa5 	bl	8015f44 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 80169fa:	bf00      	nop
 80169fc:	370c      	adds	r7, #12
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd90      	pop	{r4, r7, pc}
 8016a02:	bf00      	nop
 8016a04:	20000056 	.word	0x20000056
 8016a08:	20000060 	.word	0x20000060
 8016a0c:	20000068 	.word	0x20000068
 8016a10:	20000070 	.word	0x20000070
 8016a14:	20000044 	.word	0x20000044

08016a18 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	af00      	add	r7, sp, #0
 8016a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016a20:	2001      	movs	r0, #1
 8016a22:	f7ff fe03 	bl	801662c <_Z41__static_initialization_and_destruction_0ii>
 8016a26:	bd80      	pop	{r7, pc}

08016a28 <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016a30:	2000      	movs	r0, #0
 8016a32:	f7ff fdfb 	bl	801662c <_Z41__static_initialization_and_destruction_0ii>
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <_Z41__static_initialization_and_destruction_0ii>:
}

void KeyboardPresenter::AlarmOrEvent(void)
{
        view.AlarmOrEvent();
}
 8016a38:	b590      	push	{r4, r7, lr}
 8016a3a:	b085      	sub	sp, #20
 8016a3c:	af02      	add	r7, sp, #8
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	6039      	str	r1, [r7, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2b01      	cmp	r3, #1
 8016a46:	f040 81d3 	bne.w	8016df0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a50:	4293      	cmp	r3, r2
 8016a52:	f040 81cd 	bne.w	8016df0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8016a56:	4cda      	ldr	r4, [pc, #872]	; (8016dc0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8016a58:	2301      	movs	r3, #1
 8016a5a:	7023      	strb	r3, [r4, #0]
 8016a5c:	1ca0      	adds	r0, r4, #2
 8016a5e:	2328      	movs	r3, #40	; 0x28
 8016a60:	9300      	str	r3, [sp, #0]
 8016a62:	231a      	movs	r3, #26
 8016a64:	223d      	movs	r2, #61	; 0x3d
 8016a66:	2107      	movs	r1, #7
 8016a68:	f7ff f9f0 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016a6c:	2328      	movs	r3, #40	; 0x28
 8016a6e:	8163      	strh	r3, [r4, #10]
 8016a70:	340c      	adds	r4, #12
 8016a72:	2302      	movs	r3, #2
 8016a74:	7023      	strb	r3, [r4, #0]
 8016a76:	1ca0      	adds	r0, r4, #2
 8016a78:	2328      	movs	r3, #40	; 0x28
 8016a7a:	9300      	str	r3, [sp, #0]
 8016a7c:	231a      	movs	r3, #26
 8016a7e:	223d      	movs	r2, #61	; 0x3d
 8016a80:	2123      	movs	r1, #35	; 0x23
 8016a82:	f7ff f9e3 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016a86:	2328      	movs	r3, #40	; 0x28
 8016a88:	8163      	strh	r3, [r4, #10]
 8016a8a:	340c      	adds	r4, #12
 8016a8c:	2303      	movs	r3, #3
 8016a8e:	7023      	strb	r3, [r4, #0]
 8016a90:	1ca0      	adds	r0, r4, #2
 8016a92:	2328      	movs	r3, #40	; 0x28
 8016a94:	9300      	str	r3, [sp, #0]
 8016a96:	231a      	movs	r3, #26
 8016a98:	223d      	movs	r2, #61	; 0x3d
 8016a9a:	213f      	movs	r1, #63	; 0x3f
 8016a9c:	f7ff f9d6 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016aa0:	2328      	movs	r3, #40	; 0x28
 8016aa2:	8163      	strh	r3, [r4, #10]
 8016aa4:	340c      	adds	r4, #12
 8016aa6:	2304      	movs	r3, #4
 8016aa8:	7023      	strb	r3, [r4, #0]
 8016aaa:	1ca0      	adds	r0, r4, #2
 8016aac:	2328      	movs	r3, #40	; 0x28
 8016aae:	9300      	str	r3, [sp, #0]
 8016ab0:	231a      	movs	r3, #26
 8016ab2:	223d      	movs	r2, #61	; 0x3d
 8016ab4:	215b      	movs	r1, #91	; 0x5b
 8016ab6:	f7ff f9c9 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016aba:	2328      	movs	r3, #40	; 0x28
 8016abc:	8163      	strh	r3, [r4, #10]
 8016abe:	340c      	adds	r4, #12
 8016ac0:	2305      	movs	r3, #5
 8016ac2:	7023      	strb	r3, [r4, #0]
 8016ac4:	1ca0      	adds	r0, r4, #2
 8016ac6:	2328      	movs	r3, #40	; 0x28
 8016ac8:	9300      	str	r3, [sp, #0]
 8016aca:	231a      	movs	r3, #26
 8016acc:	223d      	movs	r2, #61	; 0x3d
 8016ace:	2177      	movs	r1, #119	; 0x77
 8016ad0:	f7ff f9bc 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016ad4:	2328      	movs	r3, #40	; 0x28
 8016ad6:	8163      	strh	r3, [r4, #10]
 8016ad8:	340c      	adds	r4, #12
 8016ada:	2306      	movs	r3, #6
 8016adc:	7023      	strb	r3, [r4, #0]
 8016ade:	1ca0      	adds	r0, r4, #2
 8016ae0:	2328      	movs	r3, #40	; 0x28
 8016ae2:	9300      	str	r3, [sp, #0]
 8016ae4:	231a      	movs	r3, #26
 8016ae6:	223d      	movs	r2, #61	; 0x3d
 8016ae8:	2193      	movs	r1, #147	; 0x93
 8016aea:	f7ff f9af 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016aee:	2328      	movs	r3, #40	; 0x28
 8016af0:	8163      	strh	r3, [r4, #10]
 8016af2:	340c      	adds	r4, #12
 8016af4:	2307      	movs	r3, #7
 8016af6:	7023      	strb	r3, [r4, #0]
 8016af8:	1ca0      	adds	r0, r4, #2
 8016afa:	2328      	movs	r3, #40	; 0x28
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	231a      	movs	r3, #26
 8016b00:	223d      	movs	r2, #61	; 0x3d
 8016b02:	21af      	movs	r1, #175	; 0xaf
 8016b04:	f7ff f9a2 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016b08:	2328      	movs	r3, #40	; 0x28
 8016b0a:	8163      	strh	r3, [r4, #10]
 8016b0c:	340c      	adds	r4, #12
 8016b0e:	2308      	movs	r3, #8
 8016b10:	7023      	strb	r3, [r4, #0]
 8016b12:	1ca0      	adds	r0, r4, #2
 8016b14:	2328      	movs	r3, #40	; 0x28
 8016b16:	9300      	str	r3, [sp, #0]
 8016b18:	231a      	movs	r3, #26
 8016b1a:	223d      	movs	r2, #61	; 0x3d
 8016b1c:	21cb      	movs	r1, #203	; 0xcb
 8016b1e:	f7ff f995 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016b22:	2328      	movs	r3, #40	; 0x28
 8016b24:	8163      	strh	r3, [r4, #10]
 8016b26:	340c      	adds	r4, #12
 8016b28:	2309      	movs	r3, #9
 8016b2a:	7023      	strb	r3, [r4, #0]
 8016b2c:	1ca0      	adds	r0, r4, #2
 8016b2e:	2328      	movs	r3, #40	; 0x28
 8016b30:	9300      	str	r3, [sp, #0]
 8016b32:	231a      	movs	r3, #26
 8016b34:	223d      	movs	r2, #61	; 0x3d
 8016b36:	21e7      	movs	r1, #231	; 0xe7
 8016b38:	f7ff f988 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016b3c:	2328      	movs	r3, #40	; 0x28
 8016b3e:	8163      	strh	r3, [r4, #10]
 8016b40:	340c      	adds	r4, #12
 8016b42:	230a      	movs	r3, #10
 8016b44:	7023      	strb	r3, [r4, #0]
 8016b46:	1ca0      	adds	r0, r4, #2
 8016b48:	2328      	movs	r3, #40	; 0x28
 8016b4a:	9300      	str	r3, [sp, #0]
 8016b4c:	231a      	movs	r3, #26
 8016b4e:	223d      	movs	r2, #61	; 0x3d
 8016b50:	f240 1103 	movw	r1, #259	; 0x103
 8016b54:	f7ff f97a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016b58:	2328      	movs	r3, #40	; 0x28
 8016b5a:	8163      	strh	r3, [r4, #10]
 8016b5c:	340c      	adds	r4, #12
 8016b5e:	230b      	movs	r3, #11
 8016b60:	7023      	strb	r3, [r4, #0]
 8016b62:	1ca0      	adds	r0, r4, #2
 8016b64:	2328      	movs	r3, #40	; 0x28
 8016b66:	9300      	str	r3, [sp, #0]
 8016b68:	231a      	movs	r3, #26
 8016b6a:	223d      	movs	r2, #61	; 0x3d
 8016b6c:	f240 111f 	movw	r1, #287	; 0x11f
 8016b70:	f7ff f96c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016b74:	2328      	movs	r3, #40	; 0x28
 8016b76:	8163      	strh	r3, [r4, #10]
 8016b78:	340c      	adds	r4, #12
 8016b7a:	230c      	movs	r3, #12
 8016b7c:	7023      	strb	r3, [r4, #0]
 8016b7e:	1ca0      	adds	r0, r4, #2
 8016b80:	2328      	movs	r3, #40	; 0x28
 8016b82:	9300      	str	r3, [sp, #0]
 8016b84:	231a      	movs	r3, #26
 8016b86:	2269      	movs	r2, #105	; 0x69
 8016b88:	2107      	movs	r1, #7
 8016b8a:	f7ff f95f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016b8e:	2328      	movs	r3, #40	; 0x28
 8016b90:	8163      	strh	r3, [r4, #10]
 8016b92:	340c      	adds	r4, #12
 8016b94:	230d      	movs	r3, #13
 8016b96:	7023      	strb	r3, [r4, #0]
 8016b98:	1ca0      	adds	r0, r4, #2
 8016b9a:	2328      	movs	r3, #40	; 0x28
 8016b9c:	9300      	str	r3, [sp, #0]
 8016b9e:	231a      	movs	r3, #26
 8016ba0:	2269      	movs	r2, #105	; 0x69
 8016ba2:	2123      	movs	r1, #35	; 0x23
 8016ba4:	f7ff f952 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016ba8:	2328      	movs	r3, #40	; 0x28
 8016baa:	8163      	strh	r3, [r4, #10]
 8016bac:	340c      	adds	r4, #12
 8016bae:	230e      	movs	r3, #14
 8016bb0:	7023      	strb	r3, [r4, #0]
 8016bb2:	1ca0      	adds	r0, r4, #2
 8016bb4:	2328      	movs	r3, #40	; 0x28
 8016bb6:	9300      	str	r3, [sp, #0]
 8016bb8:	231a      	movs	r3, #26
 8016bba:	2269      	movs	r2, #105	; 0x69
 8016bbc:	213f      	movs	r1, #63	; 0x3f
 8016bbe:	f7ff f945 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016bc2:	2328      	movs	r3, #40	; 0x28
 8016bc4:	8163      	strh	r3, [r4, #10]
 8016bc6:	340c      	adds	r4, #12
 8016bc8:	230f      	movs	r3, #15
 8016bca:	7023      	strb	r3, [r4, #0]
 8016bcc:	1ca0      	adds	r0, r4, #2
 8016bce:	2328      	movs	r3, #40	; 0x28
 8016bd0:	9300      	str	r3, [sp, #0]
 8016bd2:	231a      	movs	r3, #26
 8016bd4:	2269      	movs	r2, #105	; 0x69
 8016bd6:	215b      	movs	r1, #91	; 0x5b
 8016bd8:	f7ff f938 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016bdc:	2328      	movs	r3, #40	; 0x28
 8016bde:	8163      	strh	r3, [r4, #10]
 8016be0:	340c      	adds	r4, #12
 8016be2:	2310      	movs	r3, #16
 8016be4:	7023      	strb	r3, [r4, #0]
 8016be6:	1ca0      	adds	r0, r4, #2
 8016be8:	2328      	movs	r3, #40	; 0x28
 8016bea:	9300      	str	r3, [sp, #0]
 8016bec:	231a      	movs	r3, #26
 8016bee:	2269      	movs	r2, #105	; 0x69
 8016bf0:	2177      	movs	r1, #119	; 0x77
 8016bf2:	f7ff f92b 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016bf6:	2328      	movs	r3, #40	; 0x28
 8016bf8:	8163      	strh	r3, [r4, #10]
 8016bfa:	340c      	adds	r4, #12
 8016bfc:	2311      	movs	r3, #17
 8016bfe:	7023      	strb	r3, [r4, #0]
 8016c00:	1ca0      	adds	r0, r4, #2
 8016c02:	2328      	movs	r3, #40	; 0x28
 8016c04:	9300      	str	r3, [sp, #0]
 8016c06:	231a      	movs	r3, #26
 8016c08:	2269      	movs	r2, #105	; 0x69
 8016c0a:	2193      	movs	r1, #147	; 0x93
 8016c0c:	f7ff f91e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016c10:	2328      	movs	r3, #40	; 0x28
 8016c12:	8163      	strh	r3, [r4, #10]
 8016c14:	340c      	adds	r4, #12
 8016c16:	2312      	movs	r3, #18
 8016c18:	7023      	strb	r3, [r4, #0]
 8016c1a:	1ca0      	adds	r0, r4, #2
 8016c1c:	2328      	movs	r3, #40	; 0x28
 8016c1e:	9300      	str	r3, [sp, #0]
 8016c20:	231a      	movs	r3, #26
 8016c22:	2269      	movs	r2, #105	; 0x69
 8016c24:	21af      	movs	r1, #175	; 0xaf
 8016c26:	f7ff f911 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016c2a:	2328      	movs	r3, #40	; 0x28
 8016c2c:	8163      	strh	r3, [r4, #10]
 8016c2e:	340c      	adds	r4, #12
 8016c30:	2313      	movs	r3, #19
 8016c32:	7023      	strb	r3, [r4, #0]
 8016c34:	1ca0      	adds	r0, r4, #2
 8016c36:	2328      	movs	r3, #40	; 0x28
 8016c38:	9300      	str	r3, [sp, #0]
 8016c3a:	231a      	movs	r3, #26
 8016c3c:	2269      	movs	r2, #105	; 0x69
 8016c3e:	21cb      	movs	r1, #203	; 0xcb
 8016c40:	f7ff f904 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016c44:	2328      	movs	r3, #40	; 0x28
 8016c46:	8163      	strh	r3, [r4, #10]
 8016c48:	340c      	adds	r4, #12
 8016c4a:	2314      	movs	r3, #20
 8016c4c:	7023      	strb	r3, [r4, #0]
 8016c4e:	1ca0      	adds	r0, r4, #2
 8016c50:	2328      	movs	r3, #40	; 0x28
 8016c52:	9300      	str	r3, [sp, #0]
 8016c54:	231a      	movs	r3, #26
 8016c56:	2269      	movs	r2, #105	; 0x69
 8016c58:	21e7      	movs	r1, #231	; 0xe7
 8016c5a:	f7ff f8f7 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016c5e:	2328      	movs	r3, #40	; 0x28
 8016c60:	8163      	strh	r3, [r4, #10]
 8016c62:	340c      	adds	r4, #12
 8016c64:	2315      	movs	r3, #21
 8016c66:	7023      	strb	r3, [r4, #0]
 8016c68:	1ca0      	adds	r0, r4, #2
 8016c6a:	2328      	movs	r3, #40	; 0x28
 8016c6c:	9300      	str	r3, [sp, #0]
 8016c6e:	231a      	movs	r3, #26
 8016c70:	2269      	movs	r2, #105	; 0x69
 8016c72:	f240 1103 	movw	r1, #259	; 0x103
 8016c76:	f7ff f8e9 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016c7a:	2328      	movs	r3, #40	; 0x28
 8016c7c:	8163      	strh	r3, [r4, #10]
 8016c7e:	340c      	adds	r4, #12
 8016c80:	2316      	movs	r3, #22
 8016c82:	7023      	strb	r3, [r4, #0]
 8016c84:	1ca0      	adds	r0, r4, #2
 8016c86:	2328      	movs	r3, #40	; 0x28
 8016c88:	9300      	str	r3, [sp, #0]
 8016c8a:	231a      	movs	r3, #26
 8016c8c:	2269      	movs	r2, #105	; 0x69
 8016c8e:	f240 111f 	movw	r1, #287	; 0x11f
 8016c92:	f7ff f8db 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016c96:	2328      	movs	r3, #40	; 0x28
 8016c98:	8163      	strh	r3, [r4, #10]
 8016c9a:	340c      	adds	r4, #12
 8016c9c:	2317      	movs	r3, #23
 8016c9e:	7023      	strb	r3, [r4, #0]
 8016ca0:	1ca0      	adds	r0, r4, #2
 8016ca2:	2328      	movs	r3, #40	; 0x28
 8016ca4:	9300      	str	r3, [sp, #0]
 8016ca6:	231a      	movs	r3, #26
 8016ca8:	2295      	movs	r2, #149	; 0x95
 8016caa:	213f      	movs	r1, #63	; 0x3f
 8016cac:	f7ff f8ce 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016cb0:	2328      	movs	r3, #40	; 0x28
 8016cb2:	8163      	strh	r3, [r4, #10]
 8016cb4:	340c      	adds	r4, #12
 8016cb6:	2318      	movs	r3, #24
 8016cb8:	7023      	strb	r3, [r4, #0]
 8016cba:	1ca0      	adds	r0, r4, #2
 8016cbc:	2328      	movs	r3, #40	; 0x28
 8016cbe:	9300      	str	r3, [sp, #0]
 8016cc0:	231a      	movs	r3, #26
 8016cc2:	2295      	movs	r2, #149	; 0x95
 8016cc4:	215b      	movs	r1, #91	; 0x5b
 8016cc6:	f7ff f8c1 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016cca:	2328      	movs	r3, #40	; 0x28
 8016ccc:	8163      	strh	r3, [r4, #10]
 8016cce:	340c      	adds	r4, #12
 8016cd0:	2319      	movs	r3, #25
 8016cd2:	7023      	strb	r3, [r4, #0]
 8016cd4:	1ca0      	adds	r0, r4, #2
 8016cd6:	2328      	movs	r3, #40	; 0x28
 8016cd8:	9300      	str	r3, [sp, #0]
 8016cda:	231a      	movs	r3, #26
 8016cdc:	2295      	movs	r2, #149	; 0x95
 8016cde:	2177      	movs	r1, #119	; 0x77
 8016ce0:	f7ff f8b4 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016ce4:	2328      	movs	r3, #40	; 0x28
 8016ce6:	8163      	strh	r3, [r4, #10]
 8016ce8:	340c      	adds	r4, #12
 8016cea:	231a      	movs	r3, #26
 8016cec:	7023      	strb	r3, [r4, #0]
 8016cee:	1ca0      	adds	r0, r4, #2
 8016cf0:	2328      	movs	r3, #40	; 0x28
 8016cf2:	9300      	str	r3, [sp, #0]
 8016cf4:	231a      	movs	r3, #26
 8016cf6:	2295      	movs	r2, #149	; 0x95
 8016cf8:	2193      	movs	r1, #147	; 0x93
 8016cfa:	f7ff f8a7 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016cfe:	2328      	movs	r3, #40	; 0x28
 8016d00:	8163      	strh	r3, [r4, #10]
 8016d02:	340c      	adds	r4, #12
 8016d04:	231b      	movs	r3, #27
 8016d06:	7023      	strb	r3, [r4, #0]
 8016d08:	1ca0      	adds	r0, r4, #2
 8016d0a:	2328      	movs	r3, #40	; 0x28
 8016d0c:	9300      	str	r3, [sp, #0]
 8016d0e:	231a      	movs	r3, #26
 8016d10:	2295      	movs	r2, #149	; 0x95
 8016d12:	21af      	movs	r1, #175	; 0xaf
 8016d14:	f7ff f89a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016d18:	2328      	movs	r3, #40	; 0x28
 8016d1a:	8163      	strh	r3, [r4, #10]
 8016d1c:	340c      	adds	r4, #12
 8016d1e:	231c      	movs	r3, #28
 8016d20:	7023      	strb	r3, [r4, #0]
 8016d22:	1ca0      	adds	r0, r4, #2
 8016d24:	2328      	movs	r3, #40	; 0x28
 8016d26:	9300      	str	r3, [sp, #0]
 8016d28:	231a      	movs	r3, #26
 8016d2a:	2295      	movs	r2, #149	; 0x95
 8016d2c:	21cb      	movs	r1, #203	; 0xcb
 8016d2e:	f7ff f88d 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016d32:	2328      	movs	r3, #40	; 0x28
 8016d34:	8163      	strh	r3, [r4, #10]
 8016d36:	340c      	adds	r4, #12
 8016d38:	231d      	movs	r3, #29
 8016d3a:	7023      	strb	r3, [r4, #0]
 8016d3c:	1ca0      	adds	r0, r4, #2
 8016d3e:	2328      	movs	r3, #40	; 0x28
 8016d40:	9300      	str	r3, [sp, #0]
 8016d42:	231a      	movs	r3, #26
 8016d44:	2295      	movs	r2, #149	; 0x95
 8016d46:	21e7      	movs	r1, #231	; 0xe7
 8016d48:	f7ff f880 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016d4c:	2328      	movs	r3, #40	; 0x28
 8016d4e:	8163      	strh	r3, [r4, #10]
 8016d50:	340c      	adds	r4, #12
 8016d52:	231e      	movs	r3, #30
 8016d54:	7023      	strb	r3, [r4, #0]
 8016d56:	1ca0      	adds	r0, r4, #2
 8016d58:	2328      	movs	r3, #40	; 0x28
 8016d5a:	9300      	str	r3, [sp, #0]
 8016d5c:	23fc      	movs	r3, #252	; 0xfc
 8016d5e:	22c1      	movs	r2, #193	; 0xc1
 8016d60:	213e      	movs	r1, #62	; 0x3e
 8016d62:	f7ff f873 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016d66:	232b      	movs	r3, #43	; 0x2b
 8016d68:	8163      	strh	r3, [r4, #10]
};
 8016d6a:	4c16      	ldr	r4, [pc, #88]	; (8016dc4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	2328      	movs	r3, #40	; 0x28
 8016d70:	9300      	str	r3, [sp, #0]
 8016d72:	2338      	movs	r3, #56	; 0x38
 8016d74:	2295      	movs	r2, #149	; 0x95
 8016d76:	2105      	movs	r1, #5
 8016d78:	f7ff f868 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	60a3      	str	r3, [r4, #8]
 8016d80:	232a      	movs	r3, #42	; 0x2a
 8016d82:	81a3      	strh	r3, [r4, #12]
 8016d84:	3410      	adds	r4, #16
 8016d86:	4620      	mov	r0, r4
 8016d88:	2328      	movs	r3, #40	; 0x28
 8016d8a:	9300      	str	r3, [sp, #0]
 8016d8c:	2338      	movs	r3, #56	; 0x38
 8016d8e:	2295      	movs	r2, #149	; 0x95
 8016d90:	f44f 7181 	mov.w	r1, #258	; 0x102
 8016d94:	f7ff f85a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016d98:	2300      	movs	r3, #0
 8016d9a:	60a3      	str	r3, [r4, #8]
 8016d9c:	2327      	movs	r3, #39	; 0x27
 8016d9e:	81a3      	strh	r3, [r4, #12]
 8016da0:	3410      	adds	r4, #16
 8016da2:	4620      	mov	r0, r4
 8016da4:	2328      	movs	r3, #40	; 0x28
 8016da6:	9300      	str	r3, [sp, #0]
 8016da8:	2338      	movs	r3, #56	; 0x38
 8016daa:	22c1      	movs	r2, #193	; 0xc1
 8016dac:	2105      	movs	r1, #5
 8016dae:	f7ff f84d 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016db2:	2300      	movs	r3, #0
 8016db4:	60a3      	str	r3, [r4, #8]
 8016db6:	2329      	movs	r3, #41	; 0x29
 8016db8:	81a3      	strh	r3, [r4, #12]
};
 8016dba:	2328      	movs	r3, #40	; 0x28
 8016dbc:	9300      	str	r3, [sp, #0]
 8016dbe:	e003      	b.n	8016dc8 <_Z41__static_initialization_and_destruction_0ii+0x390>
 8016dc0:	20005a00 	.word	0x20005a00
 8016dc4:	20005b68 	.word	0x20005b68
 8016dc8:	f44f 739a 	mov.w	r3, #308	; 0x134
 8016dcc:	220a      	movs	r2, #10
 8016dce:	210f      	movs	r1, #15
 8016dd0:	480f      	ldr	r0, [pc, #60]	; (8016e10 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8016dd2:	f7ff f83b 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016dd6:	2130      	movs	r1, #48	; 0x30
 8016dd8:	480e      	ldr	r0, [pc, #56]	; (8016e14 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8016dda:	f7ff f875 	bl	8015ec8 <_ZN8touchgfx9TypedTextC1Et>
 8016dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016de2:	480d      	ldr	r0, [pc, #52]	; (8016e18 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8016de4:	f7ff f80c 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
 8016de8:	2100      	movs	r1, #0
 8016dea:	480c      	ldr	r0, [pc, #48]	; (8016e1c <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8016dec:	f7ff f808 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d107      	bne.n	8016e06 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016dfc:	4293      	cmp	r3, r2
 8016dfe:	d102      	bne.n	8016e06 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8016e00:	4807      	ldr	r0, [pc, #28]	; (8016e20 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8016e02:	f7ff f89f 	bl	8015f44 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 8016e06:	bf00      	nop
 8016e08:	370c      	adds	r7, #12
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd90      	pop	{r4, r7, pc}
 8016e0e:	bf00      	nop
 8016e10:	20000086 	.word	0x20000086
 8016e14:	20000090 	.word	0x20000090
 8016e18:	20000098 	.word	0x20000098
 8016e1c:	200000a0 	.word	0x200000a0
 8016e20:	20000074 	.word	0x20000074

08016e24 <_GLOBAL__sub_I__ZN17KeyboardPresenterC2ER12KeyboardView>:
 8016e24:	b580      	push	{r7, lr}
 8016e26:	af00      	add	r7, sp, #0
 8016e28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016e2c:	2001      	movs	r0, #1
 8016e2e:	f7ff fe03 	bl	8016a38 <_Z41__static_initialization_and_destruction_0ii>
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <_GLOBAL__sub_D__ZN17KeyboardPresenterC2ER12KeyboardView>:
 8016e34:	b580      	push	{r7, lr}
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016e3c:	2000      	movs	r0, #0
 8016e3e:	f7ff fdfb 	bl	8016a38 <_Z41__static_initialization_and_destruction_0ii>
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <_Z41__static_initialization_and_destruction_0ii>:
}

void KeyboardView::AlarmOrEvent(void)
{
	static_cast<FrontendApplication*>(Application::getInstance())->gotoMainScreenNoTransition();
}
 8016e44:	b590      	push	{r4, r7, lr}
 8016e46:	b085      	sub	sp, #20
 8016e48:	af02      	add	r7, sp, #8
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	6039      	str	r1, [r7, #0]
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	2b01      	cmp	r3, #1
 8016e52:	f040 81d3 	bne.w	80171fc <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8016e56:	683b      	ldr	r3, [r7, #0]
 8016e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e5c:	4293      	cmp	r3, r2
 8016e5e:	f040 81cd 	bne.w	80171fc <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8016e62:	4cda      	ldr	r4, [pc, #872]	; (80171cc <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8016e64:	2301      	movs	r3, #1
 8016e66:	7023      	strb	r3, [r4, #0]
 8016e68:	1ca0      	adds	r0, r4, #2
 8016e6a:	2328      	movs	r3, #40	; 0x28
 8016e6c:	9300      	str	r3, [sp, #0]
 8016e6e:	231a      	movs	r3, #26
 8016e70:	223d      	movs	r2, #61	; 0x3d
 8016e72:	2107      	movs	r1, #7
 8016e74:	f7fe ffea 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016e78:	2328      	movs	r3, #40	; 0x28
 8016e7a:	8163      	strh	r3, [r4, #10]
 8016e7c:	340c      	adds	r4, #12
 8016e7e:	2302      	movs	r3, #2
 8016e80:	7023      	strb	r3, [r4, #0]
 8016e82:	1ca0      	adds	r0, r4, #2
 8016e84:	2328      	movs	r3, #40	; 0x28
 8016e86:	9300      	str	r3, [sp, #0]
 8016e88:	231a      	movs	r3, #26
 8016e8a:	223d      	movs	r2, #61	; 0x3d
 8016e8c:	2123      	movs	r1, #35	; 0x23
 8016e8e:	f7fe ffdd 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016e92:	2328      	movs	r3, #40	; 0x28
 8016e94:	8163      	strh	r3, [r4, #10]
 8016e96:	340c      	adds	r4, #12
 8016e98:	2303      	movs	r3, #3
 8016e9a:	7023      	strb	r3, [r4, #0]
 8016e9c:	1ca0      	adds	r0, r4, #2
 8016e9e:	2328      	movs	r3, #40	; 0x28
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	231a      	movs	r3, #26
 8016ea4:	223d      	movs	r2, #61	; 0x3d
 8016ea6:	213f      	movs	r1, #63	; 0x3f
 8016ea8:	f7fe ffd0 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016eac:	2328      	movs	r3, #40	; 0x28
 8016eae:	8163      	strh	r3, [r4, #10]
 8016eb0:	340c      	adds	r4, #12
 8016eb2:	2304      	movs	r3, #4
 8016eb4:	7023      	strb	r3, [r4, #0]
 8016eb6:	1ca0      	adds	r0, r4, #2
 8016eb8:	2328      	movs	r3, #40	; 0x28
 8016eba:	9300      	str	r3, [sp, #0]
 8016ebc:	231a      	movs	r3, #26
 8016ebe:	223d      	movs	r2, #61	; 0x3d
 8016ec0:	215b      	movs	r1, #91	; 0x5b
 8016ec2:	f7fe ffc3 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016ec6:	2328      	movs	r3, #40	; 0x28
 8016ec8:	8163      	strh	r3, [r4, #10]
 8016eca:	340c      	adds	r4, #12
 8016ecc:	2305      	movs	r3, #5
 8016ece:	7023      	strb	r3, [r4, #0]
 8016ed0:	1ca0      	adds	r0, r4, #2
 8016ed2:	2328      	movs	r3, #40	; 0x28
 8016ed4:	9300      	str	r3, [sp, #0]
 8016ed6:	231a      	movs	r3, #26
 8016ed8:	223d      	movs	r2, #61	; 0x3d
 8016eda:	2177      	movs	r1, #119	; 0x77
 8016edc:	f7fe ffb6 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016ee0:	2328      	movs	r3, #40	; 0x28
 8016ee2:	8163      	strh	r3, [r4, #10]
 8016ee4:	340c      	adds	r4, #12
 8016ee6:	2306      	movs	r3, #6
 8016ee8:	7023      	strb	r3, [r4, #0]
 8016eea:	1ca0      	adds	r0, r4, #2
 8016eec:	2328      	movs	r3, #40	; 0x28
 8016eee:	9300      	str	r3, [sp, #0]
 8016ef0:	231a      	movs	r3, #26
 8016ef2:	223d      	movs	r2, #61	; 0x3d
 8016ef4:	2193      	movs	r1, #147	; 0x93
 8016ef6:	f7fe ffa9 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016efa:	2328      	movs	r3, #40	; 0x28
 8016efc:	8163      	strh	r3, [r4, #10]
 8016efe:	340c      	adds	r4, #12
 8016f00:	2307      	movs	r3, #7
 8016f02:	7023      	strb	r3, [r4, #0]
 8016f04:	1ca0      	adds	r0, r4, #2
 8016f06:	2328      	movs	r3, #40	; 0x28
 8016f08:	9300      	str	r3, [sp, #0]
 8016f0a:	231a      	movs	r3, #26
 8016f0c:	223d      	movs	r2, #61	; 0x3d
 8016f0e:	21af      	movs	r1, #175	; 0xaf
 8016f10:	f7fe ff9c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016f14:	2328      	movs	r3, #40	; 0x28
 8016f16:	8163      	strh	r3, [r4, #10]
 8016f18:	340c      	adds	r4, #12
 8016f1a:	2308      	movs	r3, #8
 8016f1c:	7023      	strb	r3, [r4, #0]
 8016f1e:	1ca0      	adds	r0, r4, #2
 8016f20:	2328      	movs	r3, #40	; 0x28
 8016f22:	9300      	str	r3, [sp, #0]
 8016f24:	231a      	movs	r3, #26
 8016f26:	223d      	movs	r2, #61	; 0x3d
 8016f28:	21cb      	movs	r1, #203	; 0xcb
 8016f2a:	f7fe ff8f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016f2e:	2328      	movs	r3, #40	; 0x28
 8016f30:	8163      	strh	r3, [r4, #10]
 8016f32:	340c      	adds	r4, #12
 8016f34:	2309      	movs	r3, #9
 8016f36:	7023      	strb	r3, [r4, #0]
 8016f38:	1ca0      	adds	r0, r4, #2
 8016f3a:	2328      	movs	r3, #40	; 0x28
 8016f3c:	9300      	str	r3, [sp, #0]
 8016f3e:	231a      	movs	r3, #26
 8016f40:	223d      	movs	r2, #61	; 0x3d
 8016f42:	21e7      	movs	r1, #231	; 0xe7
 8016f44:	f7fe ff82 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016f48:	2328      	movs	r3, #40	; 0x28
 8016f4a:	8163      	strh	r3, [r4, #10]
 8016f4c:	340c      	adds	r4, #12
 8016f4e:	230a      	movs	r3, #10
 8016f50:	7023      	strb	r3, [r4, #0]
 8016f52:	1ca0      	adds	r0, r4, #2
 8016f54:	2328      	movs	r3, #40	; 0x28
 8016f56:	9300      	str	r3, [sp, #0]
 8016f58:	231a      	movs	r3, #26
 8016f5a:	223d      	movs	r2, #61	; 0x3d
 8016f5c:	f240 1103 	movw	r1, #259	; 0x103
 8016f60:	f7fe ff74 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016f64:	2328      	movs	r3, #40	; 0x28
 8016f66:	8163      	strh	r3, [r4, #10]
 8016f68:	340c      	adds	r4, #12
 8016f6a:	230b      	movs	r3, #11
 8016f6c:	7023      	strb	r3, [r4, #0]
 8016f6e:	1ca0      	adds	r0, r4, #2
 8016f70:	2328      	movs	r3, #40	; 0x28
 8016f72:	9300      	str	r3, [sp, #0]
 8016f74:	231a      	movs	r3, #26
 8016f76:	223d      	movs	r2, #61	; 0x3d
 8016f78:	f240 111f 	movw	r1, #287	; 0x11f
 8016f7c:	f7fe ff66 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016f80:	2328      	movs	r3, #40	; 0x28
 8016f82:	8163      	strh	r3, [r4, #10]
 8016f84:	340c      	adds	r4, #12
 8016f86:	230c      	movs	r3, #12
 8016f88:	7023      	strb	r3, [r4, #0]
 8016f8a:	1ca0      	adds	r0, r4, #2
 8016f8c:	2328      	movs	r3, #40	; 0x28
 8016f8e:	9300      	str	r3, [sp, #0]
 8016f90:	231a      	movs	r3, #26
 8016f92:	2269      	movs	r2, #105	; 0x69
 8016f94:	2107      	movs	r1, #7
 8016f96:	f7fe ff59 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016f9a:	2328      	movs	r3, #40	; 0x28
 8016f9c:	8163      	strh	r3, [r4, #10]
 8016f9e:	340c      	adds	r4, #12
 8016fa0:	230d      	movs	r3, #13
 8016fa2:	7023      	strb	r3, [r4, #0]
 8016fa4:	1ca0      	adds	r0, r4, #2
 8016fa6:	2328      	movs	r3, #40	; 0x28
 8016fa8:	9300      	str	r3, [sp, #0]
 8016faa:	231a      	movs	r3, #26
 8016fac:	2269      	movs	r2, #105	; 0x69
 8016fae:	2123      	movs	r1, #35	; 0x23
 8016fb0:	f7fe ff4c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016fb4:	2328      	movs	r3, #40	; 0x28
 8016fb6:	8163      	strh	r3, [r4, #10]
 8016fb8:	340c      	adds	r4, #12
 8016fba:	230e      	movs	r3, #14
 8016fbc:	7023      	strb	r3, [r4, #0]
 8016fbe:	1ca0      	adds	r0, r4, #2
 8016fc0:	2328      	movs	r3, #40	; 0x28
 8016fc2:	9300      	str	r3, [sp, #0]
 8016fc4:	231a      	movs	r3, #26
 8016fc6:	2269      	movs	r2, #105	; 0x69
 8016fc8:	213f      	movs	r1, #63	; 0x3f
 8016fca:	f7fe ff3f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016fce:	2328      	movs	r3, #40	; 0x28
 8016fd0:	8163      	strh	r3, [r4, #10]
 8016fd2:	340c      	adds	r4, #12
 8016fd4:	230f      	movs	r3, #15
 8016fd6:	7023      	strb	r3, [r4, #0]
 8016fd8:	1ca0      	adds	r0, r4, #2
 8016fda:	2328      	movs	r3, #40	; 0x28
 8016fdc:	9300      	str	r3, [sp, #0]
 8016fde:	231a      	movs	r3, #26
 8016fe0:	2269      	movs	r2, #105	; 0x69
 8016fe2:	215b      	movs	r1, #91	; 0x5b
 8016fe4:	f7fe ff32 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8016fe8:	2328      	movs	r3, #40	; 0x28
 8016fea:	8163      	strh	r3, [r4, #10]
 8016fec:	340c      	adds	r4, #12
 8016fee:	2310      	movs	r3, #16
 8016ff0:	7023      	strb	r3, [r4, #0]
 8016ff2:	1ca0      	adds	r0, r4, #2
 8016ff4:	2328      	movs	r3, #40	; 0x28
 8016ff6:	9300      	str	r3, [sp, #0]
 8016ff8:	231a      	movs	r3, #26
 8016ffa:	2269      	movs	r2, #105	; 0x69
 8016ffc:	2177      	movs	r1, #119	; 0x77
 8016ffe:	f7fe ff25 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017002:	2328      	movs	r3, #40	; 0x28
 8017004:	8163      	strh	r3, [r4, #10]
 8017006:	340c      	adds	r4, #12
 8017008:	2311      	movs	r3, #17
 801700a:	7023      	strb	r3, [r4, #0]
 801700c:	1ca0      	adds	r0, r4, #2
 801700e:	2328      	movs	r3, #40	; 0x28
 8017010:	9300      	str	r3, [sp, #0]
 8017012:	231a      	movs	r3, #26
 8017014:	2269      	movs	r2, #105	; 0x69
 8017016:	2193      	movs	r1, #147	; 0x93
 8017018:	f7fe ff18 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801701c:	2328      	movs	r3, #40	; 0x28
 801701e:	8163      	strh	r3, [r4, #10]
 8017020:	340c      	adds	r4, #12
 8017022:	2312      	movs	r3, #18
 8017024:	7023      	strb	r3, [r4, #0]
 8017026:	1ca0      	adds	r0, r4, #2
 8017028:	2328      	movs	r3, #40	; 0x28
 801702a:	9300      	str	r3, [sp, #0]
 801702c:	231a      	movs	r3, #26
 801702e:	2269      	movs	r2, #105	; 0x69
 8017030:	21af      	movs	r1, #175	; 0xaf
 8017032:	f7fe ff0b 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017036:	2328      	movs	r3, #40	; 0x28
 8017038:	8163      	strh	r3, [r4, #10]
 801703a:	340c      	adds	r4, #12
 801703c:	2313      	movs	r3, #19
 801703e:	7023      	strb	r3, [r4, #0]
 8017040:	1ca0      	adds	r0, r4, #2
 8017042:	2328      	movs	r3, #40	; 0x28
 8017044:	9300      	str	r3, [sp, #0]
 8017046:	231a      	movs	r3, #26
 8017048:	2269      	movs	r2, #105	; 0x69
 801704a:	21cb      	movs	r1, #203	; 0xcb
 801704c:	f7fe fefe 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017050:	2328      	movs	r3, #40	; 0x28
 8017052:	8163      	strh	r3, [r4, #10]
 8017054:	340c      	adds	r4, #12
 8017056:	2314      	movs	r3, #20
 8017058:	7023      	strb	r3, [r4, #0]
 801705a:	1ca0      	adds	r0, r4, #2
 801705c:	2328      	movs	r3, #40	; 0x28
 801705e:	9300      	str	r3, [sp, #0]
 8017060:	231a      	movs	r3, #26
 8017062:	2269      	movs	r2, #105	; 0x69
 8017064:	21e7      	movs	r1, #231	; 0xe7
 8017066:	f7fe fef1 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801706a:	2328      	movs	r3, #40	; 0x28
 801706c:	8163      	strh	r3, [r4, #10]
 801706e:	340c      	adds	r4, #12
 8017070:	2315      	movs	r3, #21
 8017072:	7023      	strb	r3, [r4, #0]
 8017074:	1ca0      	adds	r0, r4, #2
 8017076:	2328      	movs	r3, #40	; 0x28
 8017078:	9300      	str	r3, [sp, #0]
 801707a:	231a      	movs	r3, #26
 801707c:	2269      	movs	r2, #105	; 0x69
 801707e:	f240 1103 	movw	r1, #259	; 0x103
 8017082:	f7fe fee3 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017086:	2328      	movs	r3, #40	; 0x28
 8017088:	8163      	strh	r3, [r4, #10]
 801708a:	340c      	adds	r4, #12
 801708c:	2316      	movs	r3, #22
 801708e:	7023      	strb	r3, [r4, #0]
 8017090:	1ca0      	adds	r0, r4, #2
 8017092:	2328      	movs	r3, #40	; 0x28
 8017094:	9300      	str	r3, [sp, #0]
 8017096:	231a      	movs	r3, #26
 8017098:	2269      	movs	r2, #105	; 0x69
 801709a:	f240 111f 	movw	r1, #287	; 0x11f
 801709e:	f7fe fed5 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80170a2:	2328      	movs	r3, #40	; 0x28
 80170a4:	8163      	strh	r3, [r4, #10]
 80170a6:	340c      	adds	r4, #12
 80170a8:	2317      	movs	r3, #23
 80170aa:	7023      	strb	r3, [r4, #0]
 80170ac:	1ca0      	adds	r0, r4, #2
 80170ae:	2328      	movs	r3, #40	; 0x28
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	231a      	movs	r3, #26
 80170b4:	2295      	movs	r2, #149	; 0x95
 80170b6:	213f      	movs	r1, #63	; 0x3f
 80170b8:	f7fe fec8 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80170bc:	2328      	movs	r3, #40	; 0x28
 80170be:	8163      	strh	r3, [r4, #10]
 80170c0:	340c      	adds	r4, #12
 80170c2:	2318      	movs	r3, #24
 80170c4:	7023      	strb	r3, [r4, #0]
 80170c6:	1ca0      	adds	r0, r4, #2
 80170c8:	2328      	movs	r3, #40	; 0x28
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	231a      	movs	r3, #26
 80170ce:	2295      	movs	r2, #149	; 0x95
 80170d0:	215b      	movs	r1, #91	; 0x5b
 80170d2:	f7fe febb 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80170d6:	2328      	movs	r3, #40	; 0x28
 80170d8:	8163      	strh	r3, [r4, #10]
 80170da:	340c      	adds	r4, #12
 80170dc:	2319      	movs	r3, #25
 80170de:	7023      	strb	r3, [r4, #0]
 80170e0:	1ca0      	adds	r0, r4, #2
 80170e2:	2328      	movs	r3, #40	; 0x28
 80170e4:	9300      	str	r3, [sp, #0]
 80170e6:	231a      	movs	r3, #26
 80170e8:	2295      	movs	r2, #149	; 0x95
 80170ea:	2177      	movs	r1, #119	; 0x77
 80170ec:	f7fe feae 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80170f0:	2328      	movs	r3, #40	; 0x28
 80170f2:	8163      	strh	r3, [r4, #10]
 80170f4:	340c      	adds	r4, #12
 80170f6:	231a      	movs	r3, #26
 80170f8:	7023      	strb	r3, [r4, #0]
 80170fa:	1ca0      	adds	r0, r4, #2
 80170fc:	2328      	movs	r3, #40	; 0x28
 80170fe:	9300      	str	r3, [sp, #0]
 8017100:	231a      	movs	r3, #26
 8017102:	2295      	movs	r2, #149	; 0x95
 8017104:	2193      	movs	r1, #147	; 0x93
 8017106:	f7fe fea1 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801710a:	2328      	movs	r3, #40	; 0x28
 801710c:	8163      	strh	r3, [r4, #10]
 801710e:	340c      	adds	r4, #12
 8017110:	231b      	movs	r3, #27
 8017112:	7023      	strb	r3, [r4, #0]
 8017114:	1ca0      	adds	r0, r4, #2
 8017116:	2328      	movs	r3, #40	; 0x28
 8017118:	9300      	str	r3, [sp, #0]
 801711a:	231a      	movs	r3, #26
 801711c:	2295      	movs	r2, #149	; 0x95
 801711e:	21af      	movs	r1, #175	; 0xaf
 8017120:	f7fe fe94 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017124:	2328      	movs	r3, #40	; 0x28
 8017126:	8163      	strh	r3, [r4, #10]
 8017128:	340c      	adds	r4, #12
 801712a:	231c      	movs	r3, #28
 801712c:	7023      	strb	r3, [r4, #0]
 801712e:	1ca0      	adds	r0, r4, #2
 8017130:	2328      	movs	r3, #40	; 0x28
 8017132:	9300      	str	r3, [sp, #0]
 8017134:	231a      	movs	r3, #26
 8017136:	2295      	movs	r2, #149	; 0x95
 8017138:	21cb      	movs	r1, #203	; 0xcb
 801713a:	f7fe fe87 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801713e:	2328      	movs	r3, #40	; 0x28
 8017140:	8163      	strh	r3, [r4, #10]
 8017142:	340c      	adds	r4, #12
 8017144:	231d      	movs	r3, #29
 8017146:	7023      	strb	r3, [r4, #0]
 8017148:	1ca0      	adds	r0, r4, #2
 801714a:	2328      	movs	r3, #40	; 0x28
 801714c:	9300      	str	r3, [sp, #0]
 801714e:	231a      	movs	r3, #26
 8017150:	2295      	movs	r2, #149	; 0x95
 8017152:	21e7      	movs	r1, #231	; 0xe7
 8017154:	f7fe fe7a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017158:	2328      	movs	r3, #40	; 0x28
 801715a:	8163      	strh	r3, [r4, #10]
 801715c:	340c      	adds	r4, #12
 801715e:	231e      	movs	r3, #30
 8017160:	7023      	strb	r3, [r4, #0]
 8017162:	1ca0      	adds	r0, r4, #2
 8017164:	2328      	movs	r3, #40	; 0x28
 8017166:	9300      	str	r3, [sp, #0]
 8017168:	23fc      	movs	r3, #252	; 0xfc
 801716a:	22c1      	movs	r2, #193	; 0xc1
 801716c:	213e      	movs	r1, #62	; 0x3e
 801716e:	f7fe fe6d 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017172:	232b      	movs	r3, #43	; 0x2b
 8017174:	8163      	strh	r3, [r4, #10]
};
 8017176:	4c16      	ldr	r4, [pc, #88]	; (80171d0 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8017178:	4620      	mov	r0, r4
 801717a:	2328      	movs	r3, #40	; 0x28
 801717c:	9300      	str	r3, [sp, #0]
 801717e:	2338      	movs	r3, #56	; 0x38
 8017180:	2295      	movs	r2, #149	; 0x95
 8017182:	2105      	movs	r1, #5
 8017184:	f7fe fe62 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8017188:	2300      	movs	r3, #0
 801718a:	60a3      	str	r3, [r4, #8]
 801718c:	232a      	movs	r3, #42	; 0x2a
 801718e:	81a3      	strh	r3, [r4, #12]
 8017190:	3410      	adds	r4, #16
 8017192:	4620      	mov	r0, r4
 8017194:	2328      	movs	r3, #40	; 0x28
 8017196:	9300      	str	r3, [sp, #0]
 8017198:	2338      	movs	r3, #56	; 0x38
 801719a:	2295      	movs	r2, #149	; 0x95
 801719c:	f44f 7181 	mov.w	r1, #258	; 0x102
 80171a0:	f7fe fe54 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80171a4:	2300      	movs	r3, #0
 80171a6:	60a3      	str	r3, [r4, #8]
 80171a8:	2327      	movs	r3, #39	; 0x27
 80171aa:	81a3      	strh	r3, [r4, #12]
 80171ac:	3410      	adds	r4, #16
 80171ae:	4620      	mov	r0, r4
 80171b0:	2328      	movs	r3, #40	; 0x28
 80171b2:	9300      	str	r3, [sp, #0]
 80171b4:	2338      	movs	r3, #56	; 0x38
 80171b6:	22c1      	movs	r2, #193	; 0xc1
 80171b8:	2105      	movs	r1, #5
 80171ba:	f7fe fe47 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80171be:	2300      	movs	r3, #0
 80171c0:	60a3      	str	r3, [r4, #8]
 80171c2:	2329      	movs	r3, #41	; 0x29
 80171c4:	81a3      	strh	r3, [r4, #12]
};
 80171c6:	2328      	movs	r3, #40	; 0x28
 80171c8:	9300      	str	r3, [sp, #0]
 80171ca:	e003      	b.n	80171d4 <_Z41__static_initialization_and_destruction_0ii+0x390>
 80171cc:	20005b98 	.word	0x20005b98
 80171d0:	20005d00 	.word	0x20005d00
 80171d4:	f44f 739a 	mov.w	r3, #308	; 0x134
 80171d8:	220a      	movs	r2, #10
 80171da:	210f      	movs	r1, #15
 80171dc:	480f      	ldr	r0, [pc, #60]	; (801721c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80171de:	f7fe fe35 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80171e2:	2130      	movs	r1, #48	; 0x30
 80171e4:	480e      	ldr	r0, [pc, #56]	; (8017220 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80171e6:	f7fe fe6f 	bl	8015ec8 <_ZN8touchgfx9TypedTextC1Et>
 80171ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80171ee:	480d      	ldr	r0, [pc, #52]	; (8017224 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80171f0:	f7fe fe06 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
 80171f4:	2100      	movs	r1, #0
 80171f6:	480c      	ldr	r0, [pc, #48]	; (8017228 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80171f8:	f7fe fe02 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d107      	bne.n	8017212 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017208:	4293      	cmp	r3, r2
 801720a:	d102      	bne.n	8017212 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 801720c:	4807      	ldr	r0, [pc, #28]	; (801722c <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 801720e:	f7fe fe99 	bl	8015f44 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 8017212:	bf00      	nop
 8017214:	370c      	adds	r7, #12
 8017216:	46bd      	mov	sp, r7
 8017218:	bd90      	pop	{r4, r7, pc}
 801721a:	bf00      	nop
 801721c:	200000b6 	.word	0x200000b6
 8017220:	200000c0 	.word	0x200000c0
 8017224:	200000c8 	.word	0x200000c8
 8017228:	200000d0 	.word	0x200000d0
 801722c:	200000a4 	.word	0x200000a4

08017230 <_GLOBAL__sub_I__ZN12KeyboardViewC2Ev>:
 8017230:	b580      	push	{r7, lr}
 8017232:	af00      	add	r7, sp, #0
 8017234:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017238:	2001      	movs	r0, #1
 801723a:	f7ff fe03 	bl	8016e44 <_Z41__static_initialization_and_destruction_0ii>
 801723e:	bd80      	pop	{r7, pc}

08017240 <_GLOBAL__sub_D__ZN12KeyboardViewC2Ev>:
 8017240:	b580      	push	{r7, lr}
 8017242:	af00      	add	r7, sp, #0
 8017244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017248:	2000      	movs	r0, #0
 801724a:	f7ff fdfb 	bl	8016e44 <_Z41__static_initialization_and_destruction_0ii>
 801724e:	bd80      	pop	{r7, pc}

08017250 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8017250:	b480      	push	{r7}
 8017252:	b083      	sub	sp, #12
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
    {
 8017258:	4a04      	ldr	r2, [pc, #16]	; (801726c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	601a      	str	r2, [r3, #0]
    }
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	4618      	mov	r0, r3
 8017262:	370c      	adds	r7, #12
 8017264:	46bd      	mov	sp, r7
 8017266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726a:	4770      	bx	lr
 801726c:	08022238 	.word	0x08022238

08017270 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
    }
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f7ff ffe9 	bl	8017250 <_ZN8touchgfx15TouchControllerD1Ev>
 801727e:	2104      	movs	r1, #4
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f007 fad5 	bl	801e830 <_ZdlPvj>
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	4618      	mov	r0, r3
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8017290:	b480      	push	{r7}
 8017292:	b083      	sub	sp, #12
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8017298:	bf00      	nop
 801729a:	370c      	adds	r7, #12
 801729c:	46bd      	mov	sp, r7
 801729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a2:	4770      	bx	lr

080172a4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80172a4:	b480      	push	{r7}
 80172a6:	b085      	sub	sp, #20
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	60b9      	str	r1, [r7, #8]
 80172ae:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80172b0:	2300      	movs	r3, #0
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	3714      	adds	r7, #20
 80172b6:	46bd      	mov	sp, r7
 80172b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172bc:	4770      	bx	lr
	...

080172c0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b082      	sub	sp, #8
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	4a05      	ldr	r2, [pc, #20]	; (80172e0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	601a      	str	r2, [r3, #0]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ff ffbd 	bl	8017250 <_ZN8touchgfx15TouchControllerD1Ev>
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	4618      	mov	r0, r3
 80172da:	3708      	adds	r7, #8
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}
 80172e0:	08022220 	.word	0x08022220

080172e4 <_ZN20STM32TouchControllerD0Ev>:
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f7ff ffe7 	bl	80172c0 <_ZN20STM32TouchControllerD1Ev>
 80172f2:	2104      	movs	r1, #4
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f007 fa9b 	bl	801e830 <_ZdlPvj>
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	4618      	mov	r0, r3
 80172fe:	3708      	adds	r7, #8
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8017304:	b480      	push	{r7}
 8017306:	b083      	sub	sp, #12
 8017308:	af00      	add	r7, sp, #0
 801730a:	4603      	mov	r3, r0
 801730c:	71fb      	strb	r3, [r7, #7]

}
 801730e:	bf00      	nop
 8017310:	370c      	adds	r7, #12
 8017312:	46bd      	mov	sp, r7
 8017314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017318:	4770      	bx	lr

0801731a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801731a:	b480      	push	{r7}
 801731c:	b083      	sub	sp, #12
 801731e:	af00      	add	r7, sp, #0
 8017320:	4603      	mov	r3, r0
 8017322:	71fb      	strb	r3, [r7, #7]

}
 8017324:	bf00      	nop
 8017326:	370c      	adds	r7, #12
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr

08017330 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8017330:	b480      	push	{r7}
 8017332:	b083      	sub	sp, #12
 8017334:	af00      	add	r7, sp, #0
 8017336:	4603      	mov	r3, r0
 8017338:	71fb      	strb	r3, [r7, #7]

}
 801733a:	bf00      	nop
 801733c:	370c      	adds	r7, #12
 801733e:	46bd      	mov	sp, r7
 8017340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017344:	4770      	bx	lr
	...

08017348 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8017348:	b480      	push	{r7}
 801734a:	b083      	sub	sp, #12
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
    {
 8017350:	4a04      	ldr	r2, [pc, #16]	; (8017364 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	601a      	str	r2, [r3, #0]
    }
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	4618      	mov	r0, r3
 801735a:	370c      	adds	r7, #12
 801735c:	46bd      	mov	sp, r7
 801735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017362:	4770      	bx	lr
 8017364:	080226f8 	.word	0x080226f8

08017368 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
    }
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f7ff ffe9 	bl	8017348 <_ZN8touchgfx3HALD1Ev>
 8017376:	217c      	movs	r1, #124	; 0x7c
 8017378:	6878      	ldr	r0, [r7, #4]
 801737a:	f007 fa59 	bl	801e830 <_ZdlPvj>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	4618      	mov	r0, r3
 8017382:	3708      	adds	r7, #8
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8017388:	b480      	push	{r7}
 801738a:	b083      	sub	sp, #12
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	460b      	mov	r3, r1
 8017392:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	78fa      	ldrb	r2, [r7, #3]
 8017398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2201      	movs	r2, #1
 80173a0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80173a4:	bf00      	nop
 80173a6:	370c      	adds	r7, #12
 80173a8:	46bd      	mov	sp, r7
 80173aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ae:	4770      	bx	lr

080173b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	460b      	mov	r3, r1
 80173ba:	807b      	strh	r3, [r7, #2]
 80173bc:	4613      	mov	r3, r2
 80173be:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80173c0:	4b0c      	ldr	r3, [pc, #48]	; (80173f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80173c2:	881b      	ldrh	r3, [r3, #0]
 80173c4:	887a      	ldrh	r2, [r7, #2]
 80173c6:	429a      	cmp	r2, r3
 80173c8:	d304      	bcc.n	80173d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80173ca:	4b0b      	ldr	r3, [pc, #44]	; (80173f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80173cc:	881b      	ldrh	r3, [r3, #0]
 80173ce:	883a      	ldrh	r2, [r7, #0]
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d205      	bcs.n	80173e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80173d4:	4b09      	ldr	r3, [pc, #36]	; (80173fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80173d6:	4a0a      	ldr	r2, [pc, #40]	; (8017400 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80173d8:	219e      	movs	r1, #158	; 0x9e
 80173da:	480a      	ldr	r0, [pc, #40]	; (8017404 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80173dc:	f007 fa56 	bl	801e88c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80173e0:	4a09      	ldr	r2, [pc, #36]	; (8017408 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80173e2:	887b      	ldrh	r3, [r7, #2]
 80173e4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80173e6:	4a09      	ldr	r2, [pc, #36]	; (801740c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80173e8:	883b      	ldrh	r3, [r7, #0]
 80173ea:	8013      	strh	r3, [r2, #0]
    }
 80173ec:	bf00      	nop
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	20006f06 	.word	0x20006f06
 80173f8:	20006f08 	.word	0x20006f08
 80173fc:	08021bb4 	.word	0x08021bb4
 8017400:	08021c18 	.word	0x08021c18
 8017404:	08021c5c 	.word	0x08021c5c
 8017408:	20006f0c 	.word	0x20006f0c
 801740c:	20006f0e 	.word	0x20006f0e

08017410 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801741e:	2b00      	cmp	r3, #0
 8017420:	d009      	beq.n	8017436 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	685a      	ldr	r2, [r3, #4]
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	685b      	ldr	r3, [r3, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	4610      	mov	r0, r2
 8017430:	4798      	blx	r3
 8017432:	4603      	mov	r3, r0
 8017434:	e000      	b.n	8017438 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8017436:	2300      	movs	r3, #0
    }
 8017438:	4618      	mov	r0, r3
 801743a:	3708      	adds	r7, #8
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8017440:	b580      	push	{r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8017448:	6878      	ldr	r0, [r7, #4]
 801744a:	f002 fe3f 	bl	801a0cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	33ac      	adds	r3, #172	; 0xac
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	4798      	blx	r3
    }
 801745a:	bf00      	nop
 801745c:	3708      	adds	r7, #8
 801745e:	46bd      	mov	sp, r7
 8017460:	bd80      	pop	{r7, pc}

08017462 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8017462:	b480      	push	{r7}
 8017464:	b083      	sub	sp, #12
 8017466:	af00      	add	r7, sp, #0
 8017468:	6078      	str	r0, [r7, #4]
 801746a:	6039      	str	r1, [r7, #0]
    {
        return false;
 801746c:	2300      	movs	r3, #0
    }
 801746e:	4618      	mov	r0, r3
 8017470:	370c      	adds	r7, #12
 8017472:	46bd      	mov	sp, r7
 8017474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017478:	4770      	bx	lr
	...

0801747c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801747c:	b580      	push	{r7, lr}
 801747e:	b084      	sub	sp, #16
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	60b9      	str	r1, [r7, #8]
 8017486:	607a      	str	r2, [r7, #4]
 8017488:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801748a:	68bb      	ldr	r3, [r7, #8]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d106      	bne.n	801749e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8017490:	4b0f      	ldr	r3, [pc, #60]	; (80174d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8017492:	4a10      	ldr	r2, [pc, #64]	; (80174d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8017494:	f240 21bb 	movw	r1, #699	; 0x2bb
 8017498:	480f      	ldr	r0, [pc, #60]	; (80174d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801749a:	f007 f9f7 	bl	801e88c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	68ba      	ldr	r2, [r7, #8]
 80174a2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	687a      	ldr	r2, [r7, #4]
 80174a8:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	bf14      	ite	ne
 80174b0:	2301      	movne	r3, #1
 80174b2:	2300      	moveq	r3, #0
 80174b4:	b2da      	uxtb	r2, r3
 80174b6:	4b09      	ldr	r3, [pc, #36]	; (80174dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80174b8:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	338c      	adds	r3, #140	; 0x8c
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	6839      	ldr	r1, [r7, #0]
 80174c4:	68f8      	ldr	r0, [r7, #12]
 80174c6:	4798      	blx	r3
    }
 80174c8:	bf00      	nop
 80174ca:	3710      	adds	r7, #16
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}
 80174d0:	08021ca0 	.word	0x08021ca0
 80174d4:	08021cd8 	.word	0x08021cd8
 80174d8:	08021c5c 	.word	0x08021c5c
 80174dc:	20006f10 	.word	0x20006f10

080174e0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80174e0:	b480      	push	{r7}
 80174e2:	b083      	sub	sp, #12
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
 80174e8:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	683a      	ldr	r2, [r7, #0]
 80174ee:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	bf14      	ite	ne
 80174f6:	2301      	movne	r3, #1
 80174f8:	2300      	moveq	r3, #0
 80174fa:	b2da      	uxtb	r2, r3
 80174fc:	4b03      	ldr	r3, [pc, #12]	; (801750c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80174fe:	701a      	strb	r2, [r3, #0]
    }
 8017500:	bf00      	nop
 8017502:	370c      	adds	r7, #12
 8017504:	46bd      	mov	sp, r7
 8017506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750a:	4770      	bx	lr
 801750c:	20006f11 	.word	0x20006f11

08017510 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8017510:	b480      	push	{r7}
 8017512:	b083      	sub	sp, #12
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8017518:	2300      	movs	r3, #0
    }
 801751a:	4618      	mov	r0, r3
 801751c:	370c      	adds	r7, #12
 801751e:	46bd      	mov	sp, r7
 8017520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017524:	4770      	bx	lr

08017526 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8017526:	b580      	push	{r7, lr}
 8017528:	b082      	sub	sp, #8
 801752a:	af00      	add	r7, sp, #0
 801752c:	6078      	str	r0, [r7, #4]
 801752e:	460b      	mov	r3, r1
 8017530:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017536:	2b00      	cmp	r3, #0
 8017538:	d004      	beq.n	8017544 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801753e:	887a      	ldrh	r2, [r7, #2]
 8017540:	4610      	mov	r0, r2
 8017542:	4798      	blx	r3
        }
    }
 8017544:	bf00      	nop
 8017546:	3708      	adds	r7, #8
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}

0801754c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801754c:	b580      	push	{r7, lr}
 801754e:	b082      	sub	sp, #8
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	685a      	ldr	r2, [r3, #4]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	3318      	adds	r3, #24
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	4610      	mov	r0, r2
 8017564:	4798      	blx	r3
 8017566:	4603      	mov	r3, r0
    }
 8017568:	4618      	mov	r0, r3
 801756a:	3708      	adds	r7, #8
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}

08017570 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8017570:	b480      	push	{r7}
 8017572:	b085      	sub	sp, #20
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017584:	429a      	cmp	r2, r3
 8017586:	d011      	beq.n	80175ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8017588:	4b14      	ldr	r3, [pc, #80]	; (80175dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d11e      	bne.n	80175ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8017590:	4b13      	ldr	r3, [pc, #76]	; (80175e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8017592:	881b      	ldrh	r3, [r3, #0]
 8017594:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8017596:	4b13      	ldr	r3, [pc, #76]	; (80175e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8017598:	881a      	ldrh	r2, [r3, #0]
 801759a:	4b11      	ldr	r3, [pc, #68]	; (80175e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801759c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801759e:	4a11      	ldr	r2, [pc, #68]	; (80175e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80175a0:	89bb      	ldrh	r3, [r7, #12]
 80175a2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80175a4:	4b0d      	ldr	r3, [pc, #52]	; (80175dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80175a6:	2201      	movs	r2, #1
 80175a8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80175aa:	e010      	b.n	80175ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80175ac:	4b0b      	ldr	r3, [pc, #44]	; (80175dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80175ae:	781b      	ldrb	r3, [r3, #0]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d00c      	beq.n	80175ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80175b4:	4b0a      	ldr	r3, [pc, #40]	; (80175e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80175b6:	881b      	ldrh	r3, [r3, #0]
 80175b8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80175ba:	4b0a      	ldr	r3, [pc, #40]	; (80175e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80175bc:	881a      	ldrh	r2, [r3, #0]
 80175be:	4b08      	ldr	r3, [pc, #32]	; (80175e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80175c0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80175c2:	4a08      	ldr	r2, [pc, #32]	; (80175e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80175c4:	89fb      	ldrh	r3, [r7, #14]
 80175c6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80175c8:	4b04      	ldr	r3, [pc, #16]	; (80175dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80175ca:	2200      	movs	r2, #0
 80175cc:	701a      	strb	r2, [r3, #0]
    }
 80175ce:	bf00      	nop
 80175d0:	3714      	adds	r7, #20
 80175d2:	46bd      	mov	sp, r7
 80175d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d8:	4770      	bx	lr
 80175da:	bf00      	nop
 80175dc:	20006f0a 	.word	0x20006f0a
 80175e0:	20006f08 	.word	0x20006f08
 80175e4:	20006f06 	.word	0x20006f06

080175e8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	4618      	mov	r0, r3
 80175f4:	f001 fef4 	bl	80193e0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80175f8:	bf00      	nop
 80175fa:	3708      	adds	r7, #8
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}

08017600 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8017600:	b580      	push	{r7, lr}
 8017602:	b082      	sub	sp, #8
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
 8017608:	4a05      	ldr	r2, [pc, #20]	; (8017620 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	601a      	str	r2, [r3, #0]
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	4618      	mov	r0, r3
 8017612:	f7ff fe99 	bl	8017348 <_ZN8touchgfx3HALD1Ev>
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	4618      	mov	r0, r3
 801761a:	3708      	adds	r7, #8
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	0802239c 	.word	0x0802239c

08017624 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f7ff ffe7 	bl	8017600 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017632:	217c      	movs	r1, #124	; 0x7c
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f007 f8fb 	bl	801e830 <_ZdlPvj>
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	4618      	mov	r0, r3
 801763e:	3708      	adds	r7, #8
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8017644:	b580      	push	{r7, lr}
 8017646:	b082      	sub	sp, #8
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	4618      	mov	r0, r3
 8017650:	f7ff ffca 	bl	80175e8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8017654:	bf00      	nop
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	4618      	mov	r0, r3
 8017668:	f001 f9f0 	bl	8018a4c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801766c:	bf00      	nop
 801766e:	3708      	adds	r7, #8
 8017670:	46bd      	mov	sp, r7
 8017672:	bd80      	pop	{r7, pc}

08017674 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b082      	sub	sp, #8
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	4618      	mov	r0, r3
 8017680:	f001 fa90 	bl	8018ba4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8017684:	4603      	mov	r3, r0
}
 8017686:	4618      	mov	r0, r3
 8017688:	3708      	adds	r7, #8
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}

0801768e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801768e:	b580      	push	{r7, lr}
 8017690:	b082      	sub	sp, #8
 8017692:	af00      	add	r7, sp, #0
 8017694:	6078      	str	r0, [r7, #4]
 8017696:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6839      	ldr	r1, [r7, #0]
 801769c:	4618      	mov	r0, r3
 801769e:	f001 fa8f 	bl	8018bc0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80176a2:	bf00      	nop
 80176a4:	3708      	adds	r7, #8
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd80      	pop	{r7, pc}

080176aa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80176aa:	b580      	push	{r7, lr}
 80176ac:	b082      	sub	sp, #8
 80176ae:	af00      	add	r7, sp, #0
 80176b0:	6078      	str	r0, [r7, #4]
 80176b2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	6839      	ldr	r1, [r7, #0]
 80176b8:	4618      	mov	r0, r3
 80176ba:	f001 fa97 	bl	8018bec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80176be:	bf00      	nop
 80176c0:	3708      	adds	r7, #8
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}

080176c6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80176c6:	b580      	push	{r7, lr}
 80176c8:	b084      	sub	sp, #16
 80176ca:	af00      	add	r7, sp, #0
 80176cc:	60f8      	str	r0, [r7, #12]
 80176ce:	60b9      	str	r1, [r7, #8]
 80176d0:	607a      	str	r2, [r7, #4]
 80176d2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80176d4:	68f8      	ldr	r0, [r7, #12]
 80176d6:	683b      	ldr	r3, [r7, #0]
 80176d8:	687a      	ldr	r2, [r7, #4]
 80176da:	68b9      	ldr	r1, [r7, #8]
 80176dc:	f001 fade 	bl	8018c9c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80176e0:	4603      	mov	r3, r0
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3710      	adds	r7, #16
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}

080176ea <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80176ea:	b580      	push	{r7, lr}
 80176ec:	b082      	sub	sp, #8
 80176ee:	af00      	add	r7, sp, #0
 80176f0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	4618      	mov	r0, r3
 80176f6:	f001 f9d7 	bl	8018aa8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80176fa:	bf00      	nop
 80176fc:	3708      	adds	r7, #8
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}

08017702 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8017702:	b580      	push	{r7, lr}
 8017704:	b082      	sub	sp, #8
 8017706:	af00      	add	r7, sp, #0
 8017708:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	4618      	mov	r0, r3
 801770e:	f001 f9db 	bl	8018ac8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8017712:	bf00      	nop
 8017714:	3708      	adds	r7, #8
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}

0801771a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801771a:	b580      	push	{r7, lr}
 801771c:	b082      	sub	sp, #8
 801771e:	af00      	add	r7, sp, #0
 8017720:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	4618      	mov	r0, r3
 8017726:	f001 f9dd 	bl	8018ae4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801772a:	bf00      	nop
 801772c:	3708      	adds	r7, #8
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}

08017732 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8017732:	b580      	push	{r7, lr}
 8017734:	b082      	sub	sp, #8
 8017736:	af00      	add	r7, sp, #0
 8017738:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	4618      	mov	r0, r3
 801773e:	f001 f9df 	bl	8018b00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8017742:	bf00      	nop
 8017744:	3708      	adds	r7, #8
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}
	...

0801774c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801774c:	b580      	push	{r7, lr}
 801774e:	b082      	sub	sp, #8
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	4a05      	ldr	r2, [pc, #20]	; (801776c <_ZN11TouchGFXHALD1Ev+0x20>)
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	601a      	str	r2, [r3, #0]
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	4618      	mov	r0, r3
 801775e:	f7ff ff4f 	bl	8017600 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	4618      	mov	r0, r3
 8017766:	3708      	adds	r7, #8
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}
 801776c:	08022250 	.word	0x08022250

08017770 <_ZN11TouchGFXHALD0Ev>:
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f7ff ffe7 	bl	801774c <_ZN11TouchGFXHALD1Ev>
 801777e:	217c      	movs	r1, #124	; 0x7c
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f007 f855 	bl	801e830 <_ZdlPvj>
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	4618      	mov	r0, r3
 801778a:	3708      	adds	r7, #8
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}

08017790 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8017790:	b580      	push	{r7, lr}
 8017792:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8017794:	2200      	movs	r2, #0
 8017796:	2101      	movs	r1, #1
 8017798:	2001      	movs	r0, #1
 801779a:	f7fa fa65 	bl	8011c68 <osSemaphoreNew>
 801779e:	4603      	mov	r3, r0
 80177a0:	4a0f      	ldr	r2, [pc, #60]	; (80177e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80177a2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80177a4:	4b0e      	ldr	r3, [pc, #56]	; (80177e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d105      	bne.n	80177b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80177ac:	4b0d      	ldr	r3, [pc, #52]	; (80177e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80177ae:	4a0e      	ldr	r2, [pc, #56]	; (80177e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80177b0:	2129      	movs	r1, #41	; 0x29
 80177b2:	480e      	ldr	r0, [pc, #56]	; (80177ec <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80177b4:	f007 f86a 	bl	801e88c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80177b8:	2200      	movs	r2, #0
 80177ba:	2104      	movs	r1, #4
 80177bc:	2001      	movs	r0, #1
 80177be:	f7fa fb73 	bl	8011ea8 <osMessageQueueNew>
 80177c2:	4603      	mov	r3, r0
 80177c4:	4a0a      	ldr	r2, [pc, #40]	; (80177f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80177c6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80177c8:	4b09      	ldr	r3, [pc, #36]	; (80177f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d105      	bne.n	80177dc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80177d0:	4b08      	ldr	r3, [pc, #32]	; (80177f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80177d2:	4a05      	ldr	r2, [pc, #20]	; (80177e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80177d4:	212d      	movs	r1, #45	; 0x2d
 80177d6:	4805      	ldr	r0, [pc, #20]	; (80177ec <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80177d8:	f007 f858 	bl	801e88c <__assert_func>
}
 80177dc:	bf00      	nop
 80177de:	bd80      	pop	{r7, pc}
 80177e0:	20005d30 	.word	0x20005d30
 80177e4:	08021d28 	.word	0x08021d28
 80177e8:	08021d74 	.word	0x08021d74
 80177ec:	08021da4 	.word	0x08021da4
 80177f0:	20005d34 	.word	0x20005d34
 80177f4:	08021dd0 	.word	0x08021dd0

080177f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80177fc:	4b04      	ldr	r3, [pc, #16]	; (8017810 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	f04f 31ff 	mov.w	r1, #4294967295
 8017804:	4618      	mov	r0, r3
 8017806:	f7fa fab9 	bl	8011d7c <osSemaphoreAcquire>
}
 801780a:	bf00      	nop
 801780c:	bd80      	pop	{r7, pc}
 801780e:	bf00      	nop
 8017810:	20005d30 	.word	0x20005d30

08017814 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8017814:	b580      	push	{r7, lr}
 8017816:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8017818:	4b03      	ldr	r3, [pc, #12]	; (8017828 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	4618      	mov	r0, r3
 801781e:	f7fa faff 	bl	8011e20 <osSemaphoreRelease>
}
 8017822:	bf00      	nop
 8017824:	bd80      	pop	{r7, pc}
 8017826:	bf00      	nop
 8017828:	20005d30 	.word	0x20005d30

0801782c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801782c:	b580      	push	{r7, lr}
 801782e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8017830:	4b03      	ldr	r3, [pc, #12]	; (8017840 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2100      	movs	r1, #0
 8017836:	4618      	mov	r0, r3
 8017838:	f7fa faa0 	bl	8011d7c <osSemaphoreAcquire>
}
 801783c:	bf00      	nop
 801783e:	bd80      	pop	{r7, pc}
 8017840:	20005d30 	.word	0x20005d30

08017844 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8017844:	b580      	push	{r7, lr}
 8017846:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8017848:	4b03      	ldr	r3, [pc, #12]	; (8017858 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	4618      	mov	r0, r3
 801784e:	f7fa fae7 	bl	8011e20 <osSemaphoreRelease>
}
 8017852:	bf00      	nop
 8017854:	bd80      	pop	{r7, pc}
 8017856:	bf00      	nop
 8017858:	20005d30 	.word	0x20005d30

0801785c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 801785c:	b580      	push	{r7, lr}
 801785e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8017860:	4b04      	ldr	r3, [pc, #16]	; (8017874 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8017862:	6818      	ldr	r0, [r3, #0]
 8017864:	2300      	movs	r3, #0
 8017866:	2200      	movs	r2, #0
 8017868:	4903      	ldr	r1, [pc, #12]	; (8017878 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 801786a:	f7fa fb91 	bl	8011f90 <osMessageQueuePut>
}
 801786e:	bf00      	nop
 8017870:	bd80      	pop	{r7, pc}
 8017872:	bf00      	nop
 8017874:	20005d34 	.word	0x20005d34
 8017878:	200000d4 	.word	0x200000d4

0801787c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b082      	sub	sp, #8
 8017880:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8017882:	4b09      	ldr	r3, [pc, #36]	; (80178a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8017884:	6818      	ldr	r0, [r3, #0]
 8017886:	1d39      	adds	r1, r7, #4
 8017888:	2300      	movs	r3, #0
 801788a:	2200      	movs	r2, #0
 801788c:	f7fa fbe0 	bl	8012050 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8017890:	4b05      	ldr	r3, [pc, #20]	; (80178a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8017892:	6818      	ldr	r0, [r3, #0]
 8017894:	1d39      	adds	r1, r7, #4
 8017896:	f04f 33ff 	mov.w	r3, #4294967295
 801789a:	2200      	movs	r2, #0
 801789c:	f7fa fbd8 	bl	8012050 <osMessageQueueGet>
}
 80178a0:	bf00      	nop
 80178a2:	3708      	adds	r7, #8
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}
 80178a8:	20005d34 	.word	0x20005d34

080178ac <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b082      	sub	sp, #8
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	4603      	mov	r3, r0
 80178b4:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80178b6:	88fb      	ldrh	r3, [r7, #6]
 80178b8:	4618      	mov	r0, r3
 80178ba:	f7fa f9ba 	bl	8011c32 <osDelay>
}
 80178be:	bf00      	nop
 80178c0:	3708      	adds	r7, #8
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd80      	pop	{r7, pc}
	...

080178c8 <__NVIC_DisableIRQ>:
{
 80178c8:	b480      	push	{r7}
 80178ca:	b083      	sub	sp, #12
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	4603      	mov	r3, r0
 80178d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80178d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	db12      	blt.n	8017900 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80178da:	88fb      	ldrh	r3, [r7, #6]
 80178dc:	f003 021f 	and.w	r2, r3, #31
 80178e0:	490a      	ldr	r1, [pc, #40]	; (801790c <__NVIC_DisableIRQ+0x44>)
 80178e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80178e6:	095b      	lsrs	r3, r3, #5
 80178e8:	2001      	movs	r0, #1
 80178ea:	fa00 f202 	lsl.w	r2, r0, r2
 80178ee:	3320      	adds	r3, #32
 80178f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80178f4:	f3bf 8f4f 	dsb	sy
}
 80178f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80178fa:	f3bf 8f6f 	isb	sy
}
 80178fe:	bf00      	nop
}
 8017900:	bf00      	nop
 8017902:	370c      	adds	r7, #12
 8017904:	46bd      	mov	sp, r7
 8017906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790a:	4770      	bx	lr
 801790c:	e000e100 	.word	0xe000e100

08017910 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
        return color;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
    }
 801791c:	4618      	mov	r0, r3
 801791e:	370c      	adds	r7, #12
 8017920:	46bd      	mov	sp, r7
 8017922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017926:	4770      	bx	lr

08017928 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8017928:	b480      	push	{r7}
 801792a:	b083      	sub	sp, #12
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
    {
 8017930:	4a04      	ldr	r2, [pc, #16]	; (8017944 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	601a      	str	r2, [r3, #0]
    }
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	4618      	mov	r0, r3
 801793a:	370c      	adds	r7, #12
 801793c:	46bd      	mov	sp, r7
 801793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017942:	4770      	bx	lr
 8017944:	08022378 	.word	0x08022378

08017948 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8017948:	b580      	push	{r7, lr}
 801794a:	b082      	sub	sp, #8
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
    }
 8017950:	6878      	ldr	r0, [r7, #4]
 8017952:	f7ff ffe9 	bl	8017928 <_ZN8touchgfx9DMA_QueueD1Ev>
 8017956:	2104      	movs	r1, #4
 8017958:	6878      	ldr	r0, [r7, #4]
 801795a:	f006 ff69 	bl	801e830 <_ZdlPvj>
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	4618      	mov	r0, r3
 8017962:	3708      	adds	r7, #8
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}

08017968 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8017968:	b580      	push	{r7, lr}
 801796a:	b082      	sub	sp, #8
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	3344      	adds	r3, #68	; 0x44
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	4798      	blx	r3
    }
 801797c:	bf00      	nop
 801797e:	3708      	adds	r7, #8
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}

08017984 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8017984:	b480      	push	{r7}
 8017986:	b083      	sub	sp, #12
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
    {
 801798c:	4a04      	ldr	r2, [pc, #16]	; (80179a0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	601a      	str	r2, [r3, #0]
    }
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	4618      	mov	r0, r3
 8017996:	370c      	adds	r7, #12
 8017998:	46bd      	mov	sp, r7
 801799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799e:	4770      	bx	lr
 80179a0:	08022c58 	.word	0x08022c58

080179a4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
    }
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7ff ffe9 	bl	8017984 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80179b2:	210c      	movs	r1, #12
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f006 ff3b 	bl	801e830 <_ZdlPvj>
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	4618      	mov	r0, r3
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}

080179c4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80179c4:	b480      	push	{r7}
 80179c6:	b083      	sub	sp, #12
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80179ce:	4a09      	ldr	r2, [pc, #36]	; (80179f4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	601a      	str	r2, [r3, #0]
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	683a      	ldr	r2, [r7, #0]
 80179d8:	605a      	str	r2, [r3, #4]
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	2200      	movs	r2, #0
 80179de:	721a      	strb	r2, [r3, #8]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2200      	movs	r2, #0
 80179e4:	725a      	strb	r2, [r3, #9]
    {
    }
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	4618      	mov	r0, r3
 80179ea:	370c      	adds	r7, #12
 80179ec:	46bd      	mov	sp, r7
 80179ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f2:	4770      	bx	lr
 80179f4:	08022c58 	.word	0x08022c58

080179f8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80179f8:	b480      	push	{r7}
 80179fa:	b083      	sub	sp, #12
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8017a00:	2301      	movs	r3, #1
    }
 8017a02:	4618      	mov	r0, r3
 8017a04:	370c      	adds	r7, #12
 8017a06:	46bd      	mov	sp, r7
 8017a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0c:	4770      	bx	lr

08017a0e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8017a0e:	b580      	push	{r7, lr}
 8017a10:	b082      	sub	sp, #8
 8017a12:	af00      	add	r7, sp, #0
 8017a14:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8017a16:	687a      	ldr	r2, [r7, #4]
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	3328      	adds	r3, #40	; 0x28
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	4610      	mov	r0, r2
 8017a22:	4798      	blx	r3
    }
 8017a24:	bf00      	nop
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}

08017a2c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	685a      	ldr	r2, [r3, #4]
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	685b      	ldr	r3, [r3, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	3314      	adds	r3, #20
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	4610      	mov	r0, r2
 8017a44:	4798      	blx	r3
    }
 8017a46:	bf00      	nop
 8017a48:	3708      	adds	r7, #8
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}
	...

08017a50 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8017a54:	4b13      	ldr	r3, [pc, #76]	; (8017aa4 <DMA2D_IRQHandler+0x54>)
 8017a56:	685b      	ldr	r3, [r3, #4]
 8017a58:	f003 0302 	and.w	r3, r3, #2
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	bf14      	ite	ne
 8017a60:	2301      	movne	r3, #1
 8017a62:	2300      	moveq	r3, #0
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d019      	beq.n	8017a9e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8017a6a:	4b0e      	ldr	r3, [pc, #56]	; (8017aa4 <DMA2D_IRQHandler+0x54>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	bf14      	ite	ne
 8017a76:	2301      	movne	r3, #1
 8017a78:	2300      	moveq	r3, #0
 8017a7a:	b2db      	uxtb	r3, r3
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d00e      	beq.n	8017a9e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8017a80:	4b08      	ldr	r3, [pc, #32]	; (8017aa4 <DMA2D_IRQHandler+0x54>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	4a07      	ldr	r2, [pc, #28]	; (8017aa4 <DMA2D_IRQHandler+0x54>)
 8017a86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017a8a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8017a8c:	4b05      	ldr	r3, [pc, #20]	; (8017aa4 <DMA2D_IRQHandler+0x54>)
 8017a8e:	2202      	movs	r2, #2
 8017a90:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8017a92:	f7fe fa2f 	bl	8015ef4 <_ZN8touchgfx3HAL11getInstanceEv>
 8017a96:	4603      	mov	r3, r0
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7ff ffc7 	bl	8017a2c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8017a9e:	bf00      	nop
 8017aa0:	bd80      	pop	{r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	52001000 	.word	0x52001000

08017aa8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	330c      	adds	r3, #12
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	f7fe f995 	bl	8015de4 <_ZN8touchgfx9colortypeC1Ev>
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	4618      	mov	r0, r3
 8017abe:	3708      	adds	r7, #8
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}

08017ac4 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8017ac4:	b5b0      	push	{r4, r5, r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8017acc:	687a      	ldr	r2, [r7, #4]
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	330c      	adds	r3, #12
 8017ad2:	4619      	mov	r1, r3
 8017ad4:	4610      	mov	r0, r2
 8017ad6:	f7ff ff75 	bl	80179c4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8017ada:	4a0e      	ldr	r2, [pc, #56]	; (8017b14 <_ZN8STM32DMAC1Ev+0x50>)
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	601a      	str	r2, [r3, #0]
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f103 000c 	add.w	r0, r3, #12
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	3320      	adds	r3, #32
 8017aea:	2260      	movs	r2, #96	; 0x60
 8017aec:	4619      	mov	r1, r3
 8017aee:	f002 fc51 	bl	801a394 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	3320      	adds	r3, #32
 8017af6:	245f      	movs	r4, #95	; 0x5f
 8017af8:	461d      	mov	r5, r3
 8017afa:	2c00      	cmp	r4, #0
 8017afc:	db05      	blt.n	8017b0a <_ZN8STM32DMAC1Ev+0x46>
 8017afe:	4628      	mov	r0, r5
 8017b00:	f7ff ffd2 	bl	8017aa8 <_ZN8touchgfx6BlitOpC1Ev>
 8017b04:	3524      	adds	r5, #36	; 0x24
 8017b06:	3c01      	subs	r4, #1
 8017b08:	e7f7      	b.n	8017afa <_ZN8STM32DMAC1Ev+0x36>
{
}
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bdb0      	pop	{r4, r5, r7, pc}
 8017b14:	08022328 	.word	0x08022328

08017b18 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b082      	sub	sp, #8
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	4a09      	ldr	r2, [pc, #36]	; (8017b48 <_ZN8STM32DMAD1Ev+0x30>)
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017b26:	205a      	movs	r0, #90	; 0x5a
 8017b28:	f7ff fece 	bl	80178c8 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	330c      	adds	r3, #12
 8017b30:	4618      	mov	r0, r3
 8017b32:	f000 fac9 	bl	80180c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f7ff ff23 	bl	8017984 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	4618      	mov	r0, r3
 8017b42:	3708      	adds	r7, #8
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	08022328 	.word	0x08022328

08017b4c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
}
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f7ff ffdf 	bl	8017b18 <_ZN8STM32DMAD1Ev>
 8017b5a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8017b5e:	6878      	ldr	r0, [r7, #4]
 8017b60:	f006 fe66 	bl	801e830 <_ZdlPvj>
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	4618      	mov	r0, r3
 8017b68:	3708      	adds	r7, #8
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}
	...

08017b70 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b084      	sub	sp, #16
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8017b78:	4b13      	ldr	r3, [pc, #76]	; (8017bc8 <_ZN8STM32DMA10initializeEv+0x58>)
 8017b7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8017b7e:	4a12      	ldr	r2, [pc, #72]	; (8017bc8 <_ZN8STM32DMA10initializeEv+0x58>)
 8017b80:	f043 0310 	orr.w	r3, r3, #16
 8017b84:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8017b88:	4b0f      	ldr	r3, [pc, #60]	; (8017bc8 <_ZN8STM32DMA10initializeEv+0x58>)
 8017b8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8017b8e:	f003 0310 	and.w	r3, r3, #16
 8017b92:	60fb      	str	r3, [r7, #12]
 8017b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8017b96:	4b0c      	ldr	r3, [pc, #48]	; (8017bc8 <_ZN8STM32DMA10initializeEv+0x58>)
 8017b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017b9a:	4a0b      	ldr	r2, [pc, #44]	; (8017bc8 <_ZN8STM32DMA10initializeEv+0x58>)
 8017b9c:	f043 0310 	orr.w	r3, r3, #16
 8017ba0:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8017ba2:	4b09      	ldr	r3, [pc, #36]	; (8017bc8 <_ZN8STM32DMA10initializeEv+0x58>)
 8017ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ba6:	4a08      	ldr	r2, [pc, #32]	; (8017bc8 <_ZN8STM32DMA10initializeEv+0x58>)
 8017ba8:	f023 0310 	bic.w	r3, r3, #16
 8017bac:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8017bae:	2200      	movs	r2, #0
 8017bb0:	2105      	movs	r1, #5
 8017bb2:	205a      	movs	r0, #90	; 0x5a
 8017bb4:	f7ef fca0 	bl	80074f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8017bb8:	205a      	movs	r0, #90	; 0x5a
 8017bba:	f7ef fcb7 	bl	800752c <HAL_NVIC_EnableIRQ>
}
 8017bbe:	bf00      	nop
 8017bc0:	3710      	adds	r7, #16
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
 8017bc6:	bf00      	nop
 8017bc8:	58024400 	.word	0x58024400

08017bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b084      	sub	sp, #16
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	460b      	mov	r3, r1
 8017bd6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	60fb      	str	r3, [r7, #12]

    switch (format)
 8017bdc:	78fb      	ldrb	r3, [r7, #3]
 8017bde:	2b0b      	cmp	r3, #11
 8017be0:	d826      	bhi.n	8017c30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8017be2:	a201      	add	r2, pc, #4	; (adr r2, 8017be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8017be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017be8:	08017c25 	.word	0x08017c25
 8017bec:	08017c1f 	.word	0x08017c1f
 8017bf0:	08017c19 	.word	0x08017c19
 8017bf4:	08017c31 	.word	0x08017c31
 8017bf8:	08017c31 	.word	0x08017c31
 8017bfc:	08017c31 	.word	0x08017c31
 8017c00:	08017c31 	.word	0x08017c31
 8017c04:	08017c2b 	.word	0x08017c2b
 8017c08:	08017c2b 	.word	0x08017c2b
 8017c0c:	08017c2b 	.word	0x08017c2b
 8017c10:	08017c2b 	.word	0x08017c2b
 8017c14:	08017c2b 	.word	0x08017c2b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	60fb      	str	r3, [r7, #12]
        break;
 8017c1c:	e00e      	b.n	8017c3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8017c1e:	2301      	movs	r3, #1
 8017c20:	60fb      	str	r3, [r7, #12]
        break;
 8017c22:	e00b      	b.n	8017c3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8017c24:	2302      	movs	r3, #2
 8017c26:	60fb      	str	r3, [r7, #12]
        break;
 8017c28:	e008      	b.n	8017c3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8017c2a:	2305      	movs	r3, #5
 8017c2c:	60fb      	str	r3, [r7, #12]
        break;
 8017c2e:	e005      	b.n	8017c3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8017c30:	4b05      	ldr	r3, [pc, #20]	; (8017c48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8017c32:	4a06      	ldr	r2, [pc, #24]	; (8017c4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8017c34:	216f      	movs	r1, #111	; 0x6f
 8017c36:	4806      	ldr	r0, [pc, #24]	; (8017c50 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8017c38:	f006 fe28 	bl	801e88c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	3710      	adds	r7, #16
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}
 8017c46:	bf00      	nop
 8017c48:	08021e14 	.word	0x08021e14
 8017c4c:	08021e30 	.word	0x08021e30
 8017c50:	08021e7c 	.word	0x08021e7c

08017c54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b084      	sub	sp, #16
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	460b      	mov	r3, r1
 8017c5e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8017c60:	2300      	movs	r3, #0
 8017c62:	60fb      	str	r3, [r7, #12]

    switch (format)
 8017c64:	78fb      	ldrb	r3, [r7, #3]
 8017c66:	2b0a      	cmp	r3, #10
 8017c68:	d821      	bhi.n	8017cae <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8017c6a:	a201      	add	r2, pc, #4	; (adr r2, 8017c70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8017c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c70:	08017ca9 	.word	0x08017ca9
 8017c74:	08017ca3 	.word	0x08017ca3
 8017c78:	08017c9d 	.word	0x08017c9d
 8017c7c:	08017caf 	.word	0x08017caf
 8017c80:	08017caf 	.word	0x08017caf
 8017c84:	08017caf 	.word	0x08017caf
 8017c88:	08017caf 	.word	0x08017caf
 8017c8c:	08017ca3 	.word	0x08017ca3
 8017c90:	08017ca3 	.word	0x08017ca3
 8017c94:	08017ca3 	.word	0x08017ca3
 8017c98:	08017ca3 	.word	0x08017ca3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	60fb      	str	r3, [r7, #12]
        break;
 8017ca0:	e00b      	b.n	8017cba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	60fb      	str	r3, [r7, #12]
        break;
 8017ca6:	e008      	b.n	8017cba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8017ca8:	2302      	movs	r3, #2
 8017caa:	60fb      	str	r3, [r7, #12]
        break;
 8017cac:	e005      	b.n	8017cba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8017cae:	4b05      	ldr	r3, [pc, #20]	; (8017cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8017cb0:	4a05      	ldr	r2, [pc, #20]	; (8017cc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8017cb2:	2190      	movs	r1, #144	; 0x90
 8017cb4:	4805      	ldr	r0, [pc, #20]	; (8017ccc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8017cb6:	f006 fde9 	bl	801e88c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8017cba:	68fb      	ldr	r3, [r7, #12]
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	3710      	adds	r7, #16
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}
 8017cc4:	08021e14 	.word	0x08021e14
 8017cc8:	08021ea8 	.word	0x08021ea8
 8017ccc:	08021e7c 	.word	0x08021e7c

08017cd0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8017cd0:	b480      	push	{r7}
 8017cd2:	b083      	sub	sp, #12
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8017cd8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	370c      	adds	r7, #12
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce6:	4770      	bx	lr

08017ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8017ce8:	b590      	push	{r4, r7, lr}
 8017cea:	b089      	sub	sp, #36	; 0x24
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	7f5b      	ldrb	r3, [r3, #29]
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f7ff ff67 	bl	8017bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8017cfe:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8017d00:	683b      	ldr	r3, [r7, #0]
 8017d02:	7f9b      	ldrb	r3, [r3, #30]
 8017d04:	4619      	mov	r1, r3
 8017d06:	6878      	ldr	r0, [r7, #4]
 8017d08:	f7ff ff60 	bl	8017bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8017d0c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8017d0e:	683b      	ldr	r3, [r7, #0]
 8017d10:	7f9b      	ldrb	r3, [r3, #30]
 8017d12:	4619      	mov	r1, r3
 8017d14:	6878      	ldr	r0, [r7, #4]
 8017d16:	f7ff ff9d 	bl	8017c54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8017d1a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017d1c:	683b      	ldr	r3, [r7, #0]
 8017d1e:	8b5b      	ldrh	r3, [r3, #26]
 8017d20:	461a      	mov	r2, r3
 8017d22:	683b      	ldr	r3, [r7, #0]
 8017d24:	8a9b      	ldrh	r3, [r3, #20]
 8017d26:	1ad2      	subs	r2, r2, r3
 8017d28:	4b92      	ldr	r3, [pc, #584]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	8b5b      	ldrh	r3, [r3, #26]
 8017d30:	461a      	mov	r2, r3
 8017d32:	683b      	ldr	r3, [r7, #0]
 8017d34:	8a9b      	ldrh	r3, [r3, #20]
 8017d36:	1ad2      	subs	r2, r2, r3
 8017d38:	4b8e      	ldr	r3, [pc, #568]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017d3a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	8b1b      	ldrh	r3, [r3, #24]
 8017d40:	461a      	mov	r2, r3
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	8a9b      	ldrh	r3, [r3, #20]
 8017d46:	1ad2      	subs	r2, r2, r3
 8017d48:	4b8a      	ldr	r3, [pc, #552]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017d4a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8017d4c:	4a89      	ldr	r2, [pc, #548]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8017d52:	683b      	ldr	r3, [r7, #0]
 8017d54:	8adb      	ldrh	r3, [r3, #22]
 8017d56:	461a      	mov	r2, r3
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	8a9b      	ldrh	r3, [r3, #20]
 8017d5c:	041b      	lsls	r3, r3, #16
 8017d5e:	431a      	orrs	r2, r3
 8017d60:	4b84      	ldr	r3, [pc, #528]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017d62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	691a      	ldr	r2, [r3, #16]
 8017d68:	4b82      	ldr	r3, [pc, #520]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017d6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	685a      	ldr	r2, [r3, #4]
 8017d70:	4b80      	ldr	r3, [pc, #512]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017d72:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d7c:	d036      	beq.n	8017dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8017d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d82:	f200 80e2 	bhi.w	8017f4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8017d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d8a:	d014      	beq.n	8017db6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8017d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d90:	f200 80db 	bhi.w	8017f4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8017d94:	2b80      	cmp	r3, #128	; 0x80
 8017d96:	d059      	beq.n	8017e4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8017d98:	2b80      	cmp	r3, #128	; 0x80
 8017d9a:	f200 80d6 	bhi.w	8017f4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8017d9e:	2b40      	cmp	r3, #64	; 0x40
 8017da0:	f000 80be 	beq.w	8017f20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8017da4:	2b40      	cmp	r3, #64	; 0x40
 8017da6:	f200 80d0 	bhi.w	8017f4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8017daa:	2b04      	cmp	r3, #4
 8017dac:	d039      	beq.n	8017e22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8017dae:	2b20      	cmp	r3, #32
 8017db0:	f000 80b6 	beq.w	8017f20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8017db4:	e0c9      	b.n	8017f4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	7f1b      	ldrb	r3, [r3, #28]
 8017dba:	061b      	lsls	r3, r3, #24
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	4a6d      	ldr	r2, [pc, #436]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017dc0:	4b6d      	ldr	r3, [pc, #436]	; (8017f78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8017dc2:	430b      	orrs	r3, r1
 8017dc4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8017dc6:	683b      	ldr	r3, [r7, #0]
 8017dc8:	330c      	adds	r3, #12
 8017dca:	4c6a      	ldr	r4, [pc, #424]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f7ff fd9f 	bl	8017910 <_ZNK8touchgfx9colortypecvmEv>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017dd6:	4a67      	ldr	r2, [pc, #412]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017dd8:	697b      	ldr	r3, [r7, #20]
 8017dda:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	691a      	ldr	r2, [r3, #16]
 8017de0:	4b64      	ldr	r3, [pc, #400]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017de2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8017de4:	4b63      	ldr	r3, [pc, #396]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017de6:	4a65      	ldr	r2, [pc, #404]	; (8017f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017de8:	601a      	str	r2, [r3, #0]
        break;
 8017dea:	e0da      	b.n	8017fa2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	7f1b      	ldrb	r3, [r3, #28]
 8017df0:	061b      	lsls	r3, r3, #24
 8017df2:	4619      	mov	r1, r3
 8017df4:	4a5f      	ldr	r2, [pc, #380]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017df6:	4b62      	ldr	r3, [pc, #392]	; (8017f80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017df8:	430b      	orrs	r3, r1
 8017dfa:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8017dfc:	683b      	ldr	r3, [r7, #0]
 8017dfe:	330c      	adds	r3, #12
 8017e00:	4c5c      	ldr	r4, [pc, #368]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e02:	4618      	mov	r0, r3
 8017e04:	f7ff fd84 	bl	8017910 <_ZNK8touchgfx9colortypecvmEv>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017e0c:	4a59      	ldr	r2, [pc, #356]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	691a      	ldr	r2, [r3, #16]
 8017e16:	4b57      	ldr	r3, [pc, #348]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e18:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8017e1a:	4b56      	ldr	r3, [pc, #344]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e1c:	4a57      	ldr	r2, [pc, #348]	; (8017f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017e1e:	601a      	str	r2, [r3, #0]
        break;
 8017e20:	e0bf      	b.n	8017fa2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017e22:	683b      	ldr	r3, [r7, #0]
 8017e24:	7f1b      	ldrb	r3, [r3, #28]
 8017e26:	061b      	lsls	r3, r3, #24
 8017e28:	461a      	mov	r2, r3
 8017e2a:	69bb      	ldr	r3, [r7, #24]
 8017e2c:	4313      	orrs	r3, r2
 8017e2e:	4a51      	ldr	r2, [pc, #324]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017e34:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017e36:	4a4f      	ldr	r2, [pc, #316]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e38:	697b      	ldr	r3, [r7, #20]
 8017e3a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	691a      	ldr	r2, [r3, #16]
 8017e40:	4b4c      	ldr	r3, [pc, #304]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e42:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8017e44:	4b4b      	ldr	r3, [pc, #300]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e46:	4a4d      	ldr	r2, [pc, #308]	; (8017f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017e48:	601a      	str	r2, [r3, #0]
        break;
 8017e4a:	e0aa      	b.n	8017fa2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	689b      	ldr	r3, [r3, #8]
 8017e54:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	1d1a      	adds	r2, r3, #4
 8017e5a:	4b46      	ldr	r3, [pc, #280]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e5c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017e5e:	683b      	ldr	r3, [r7, #0]
 8017e60:	7f1b      	ldrb	r3, [r3, #28]
 8017e62:	061b      	lsls	r3, r3, #24
 8017e64:	461a      	mov	r2, r3
 8017e66:	69bb      	ldr	r3, [r7, #24]
 8017e68:	4313      	orrs	r3, r2
 8017e6a:	4a42      	ldr	r2, [pc, #264]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017e70:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017e72:	4a40      	ldr	r2, [pc, #256]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	691a      	ldr	r2, [r3, #16]
 8017e7c:	4b3d      	ldr	r3, [pc, #244]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e7e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	881b      	ldrh	r3, [r3, #0]
 8017e84:	b2db      	uxtb	r3, r3
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d002      	beq.n	8017e90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d00d      	beq.n	8017eaa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8017e8e:	e020      	b.n	8017ed2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8017e90:	4b38      	ldr	r3, [pc, #224]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017e92:	69da      	ldr	r2, [r3, #28]
 8017e94:	4b3b      	ldr	r3, [pc, #236]	; (8017f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017e96:	4013      	ands	r3, r2
 8017e98:	68fa      	ldr	r2, [r7, #12]
 8017e9a:	8852      	ldrh	r2, [r2, #2]
 8017e9c:	3a01      	subs	r2, #1
 8017e9e:	0212      	lsls	r2, r2, #8
 8017ea0:	4611      	mov	r1, r2
 8017ea2:	4a34      	ldr	r2, [pc, #208]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017ea4:	430b      	orrs	r3, r1
 8017ea6:	61d3      	str	r3, [r2, #28]
                break;
 8017ea8:	e01a      	b.n	8017ee0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	7f1b      	ldrb	r3, [r3, #28]
 8017eae:	2bff      	cmp	r3, #255	; 0xff
 8017eb0:	d101      	bne.n	8017eb6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8017eb6:	4b2f      	ldr	r3, [pc, #188]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017eb8:	69da      	ldr	r2, [r3, #28]
 8017eba:	4b32      	ldr	r3, [pc, #200]	; (8017f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017ebc:	4013      	ands	r3, r2
 8017ebe:	68fa      	ldr	r2, [r7, #12]
 8017ec0:	8852      	ldrh	r2, [r2, #2]
 8017ec2:	3a01      	subs	r2, #1
 8017ec4:	0212      	lsls	r2, r2, #8
 8017ec6:	4313      	orrs	r3, r2
 8017ec8:	4a2a      	ldr	r2, [pc, #168]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017eca:	f043 0310 	orr.w	r3, r3, #16
 8017ece:	61d3      	str	r3, [r2, #28]
                break;
 8017ed0:	e006      	b.n	8017ee0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8017ed2:	4b2d      	ldr	r3, [pc, #180]	; (8017f88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8017ed4:	4a2d      	ldr	r2, [pc, #180]	; (8017f8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017ed6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8017eda:	482d      	ldr	r0, [pc, #180]	; (8017f90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8017edc:	f006 fcd6 	bl	801e88c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8017ee0:	4b24      	ldr	r3, [pc, #144]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017ee2:	69db      	ldr	r3, [r3, #28]
 8017ee4:	4a23      	ldr	r2, [pc, #140]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017ee6:	f043 0320 	orr.w	r3, r3, #32
 8017eea:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8017eec:	4b21      	ldr	r3, [pc, #132]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017eee:	69db      	ldr	r3, [r3, #28]
 8017ef0:	f003 0320 	and.w	r3, r3, #32
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	bf14      	ite	ne
 8017ef8:	2301      	movne	r3, #1
 8017efa:	2300      	moveq	r3, #0
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d000      	beq.n	8017f04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 8017f02:	e7f3      	b.n	8017eec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8017f04:	4b1b      	ldr	r3, [pc, #108]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f06:	2210      	movs	r2, #16
 8017f08:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8017f0a:	7ffb      	ldrb	r3, [r7, #31]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d003      	beq.n	8017f18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8017f10:	4b18      	ldr	r3, [pc, #96]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f12:	4a1a      	ldr	r2, [pc, #104]	; (8017f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017f14:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8017f16:	e044      	b.n	8017fa2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8017f18:	4b16      	ldr	r3, [pc, #88]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f1a:	4a1e      	ldr	r2, [pc, #120]	; (8017f94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8017f1c:	601a      	str	r2, [r3, #0]
        break;
 8017f1e:	e040      	b.n	8017fa2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	7f1b      	ldrb	r3, [r3, #28]
 8017f24:	061b      	lsls	r3, r3, #24
 8017f26:	461a      	mov	r2, r3
 8017f28:	69bb      	ldr	r3, [r7, #24]
 8017f2a:	4313      	orrs	r3, r2
 8017f2c:	4a11      	ldr	r2, [pc, #68]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017f32:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017f34:	4a0f      	ldr	r2, [pc, #60]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	691a      	ldr	r2, [r3, #16]
 8017f3e:	4b0d      	ldr	r3, [pc, #52]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f40:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8017f42:	4b0c      	ldr	r3, [pc, #48]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f44:	4a0d      	ldr	r2, [pc, #52]	; (8017f7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017f46:	601a      	str	r2, [r3, #0]
        break;
 8017f48:	e02b      	b.n	8017fa2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017f4a:	683b      	ldr	r3, [r7, #0]
 8017f4c:	7f1b      	ldrb	r3, [r3, #28]
 8017f4e:	061b      	lsls	r3, r3, #24
 8017f50:	461a      	mov	r2, r3
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	4313      	orrs	r3, r2
 8017f56:	4a07      	ldr	r2, [pc, #28]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017f5c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	7f5a      	ldrb	r2, [r3, #29]
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	7f9b      	ldrb	r3, [r3, #30]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d016      	beq.n	8017f98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8017f6a:	4b02      	ldr	r3, [pc, #8]	; (8017f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8017f6c:	4a09      	ldr	r2, [pc, #36]	; (8017f94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8017f6e:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8017f70:	e016      	b.n	8017fa0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8017f72:	bf00      	nop
 8017f74:	52001000 	.word	0x52001000
 8017f78:	0002000a 	.word	0x0002000a
 8017f7c:	00020201 	.word	0x00020201
 8017f80:	00020009 	.word	0x00020009
 8017f84:	ffff00ef 	.word	0xffff00ef
 8017f88:	08021ef4 	.word	0x08021ef4
 8017f8c:	08021f10 	.word	0x08021f10
 8017f90:	08021e7c 	.word	0x08021e7c
 8017f94:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8017f98:	4b04      	ldr	r3, [pc, #16]	; (8017fac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8017f9a:	f240 2201 	movw	r2, #513	; 0x201
 8017f9e:	601a      	str	r2, [r3, #0]
        break;
 8017fa0:	bf00      	nop
    }
}
 8017fa2:	bf00      	nop
 8017fa4:	3724      	adds	r7, #36	; 0x24
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd90      	pop	{r4, r7, pc}
 8017faa:	bf00      	nop
 8017fac:	52001000 	.word	0x52001000

08017fb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8017fb0:	b590      	push	{r4, r7, lr}
 8017fb2:	b085      	sub	sp, #20
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
 8017fb8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	7f9b      	ldrb	r3, [r3, #30]
 8017fbe:	4619      	mov	r1, r3
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f7ff fe47 	bl	8017c54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8017fc6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8017fc8:	4a3b      	ldr	r2, [pc, #236]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	8adb      	ldrh	r3, [r3, #22]
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	683b      	ldr	r3, [r7, #0]
 8017fd6:	8a9b      	ldrh	r3, [r3, #20]
 8017fd8:	041b      	lsls	r3, r3, #16
 8017fda:	431a      	orrs	r2, r3
 8017fdc:	4b36      	ldr	r3, [pc, #216]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017fde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	691a      	ldr	r2, [r3, #16]
 8017fe4:	4b34      	ldr	r3, [pc, #208]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017fe6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	8b5b      	ldrh	r3, [r3, #26]
 8017fec:	461a      	mov	r2, r3
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	8a9b      	ldrh	r3, [r3, #20]
 8017ff2:	1ad2      	subs	r2, r2, r3
 8017ff4:	4b30      	ldr	r3, [pc, #192]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017ff6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8017ff8:	683b      	ldr	r3, [r7, #0]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	2b08      	cmp	r3, #8
 8017ffe:	d12e      	bne.n	801805e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	8b5b      	ldrh	r3, [r3, #26]
 8018004:	461a      	mov	r2, r3
 8018006:	683b      	ldr	r3, [r7, #0]
 8018008:	8a9b      	ldrh	r3, [r3, #20]
 801800a:	1ad2      	subs	r2, r2, r3
 801800c:	4b2a      	ldr	r3, [pc, #168]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801800e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	8b5b      	ldrh	r3, [r3, #26]
 8018014:	461a      	mov	r2, r3
 8018016:	683b      	ldr	r3, [r7, #0]
 8018018:	8a9b      	ldrh	r3, [r3, #20]
 801801a:	1ad2      	subs	r2, r2, r3
 801801c:	4b26      	ldr	r3, [pc, #152]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801801e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8018020:	4a25      	ldr	r2, [pc, #148]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	7f1b      	ldrb	r3, [r3, #28]
 801802a:	061b      	lsls	r3, r3, #24
 801802c:	4619      	mov	r1, r3
 801802e:	4a22      	ldr	r2, [pc, #136]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018030:	4b22      	ldr	r3, [pc, #136]	; (80180bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8018032:	430b      	orrs	r3, r1
 8018034:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	330c      	adds	r3, #12
 801803a:	4c1f      	ldr	r4, [pc, #124]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801803c:	4618      	mov	r0, r3
 801803e:	f7ff fc67 	bl	8017910 <_ZNK8touchgfx9colortypecvmEv>
 8018042:	4603      	mov	r3, r0
 8018044:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	691a      	ldr	r2, [r3, #16]
 801804a:	4b1b      	ldr	r3, [pc, #108]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801804c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	691a      	ldr	r2, [r3, #16]
 8018052:	4b19      	ldr	r3, [pc, #100]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018054:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8018056:	4b18      	ldr	r3, [pc, #96]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018058:	4a19      	ldr	r2, [pc, #100]	; (80180c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801805a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 801805c:	e027      	b.n	80180ae <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801805e:	4a16      	ldr	r2, [pc, #88]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8018064:	4b14      	ldr	r3, [pc, #80]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018066:	2200      	movs	r2, #0
 8018068:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	330c      	adds	r3, #12
 801806e:	4618      	mov	r0, r3
 8018070:	f7ff fc4e 	bl	8017910 <_ZNK8touchgfx9colortypecvmEv>
 8018074:	4603      	mov	r3, r0
 8018076:	0a1b      	lsrs	r3, r3, #8
 8018078:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	330c      	adds	r3, #12
 8018080:	4618      	mov	r0, r3
 8018082:	f7ff fc45 	bl	8017910 <_ZNK8touchgfx9colortypecvmEv>
 8018086:	4603      	mov	r3, r0
 8018088:	095b      	lsrs	r3, r3, #5
 801808a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801808e:	431c      	orrs	r4, r3
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	330c      	adds	r3, #12
 8018094:	4618      	mov	r0, r3
 8018096:	f7ff fc3b 	bl	8017910 <_ZNK8touchgfx9colortypecvmEv>
 801809a:	4603      	mov	r3, r0
 801809c:	08db      	lsrs	r3, r3, #3
 801809e:	f003 031f 	and.w	r3, r3, #31
 80180a2:	4a05      	ldr	r2, [pc, #20]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80180a4:	4323      	orrs	r3, r4
 80180a6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80180a8:	4b03      	ldr	r3, [pc, #12]	; (80180b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80180aa:	4a06      	ldr	r2, [pc, #24]	; (80180c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80180ac:	601a      	str	r2, [r3, #0]
}
 80180ae:	bf00      	nop
 80180b0:	3714      	adds	r7, #20
 80180b2:	46bd      	mov	sp, r7
 80180b4:	bd90      	pop	{r4, r7, pc}
 80180b6:	bf00      	nop
 80180b8:	52001000 	.word	0x52001000
 80180bc:	00010009 	.word	0x00010009
 80180c0:	00020201 	.word	0x00020201
 80180c4:	00030201 	.word	0x00030201

080180c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
 80180d0:	4a05      	ldr	r2, [pc, #20]	; (80180e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	601a      	str	r2, [r3, #0]
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	4618      	mov	r0, r3
 80180da:	f7ff fc25 	bl	8017928 <_ZN8touchgfx9DMA_QueueD1Ev>
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	4618      	mov	r0, r3
 80180e2:	3708      	adds	r7, #8
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd80      	pop	{r7, pc}
 80180e8:	08022ca8 	.word	0x08022ca8

080180ec <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b082      	sub	sp, #8
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f7ff ffe7 	bl	80180c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80180fa:	2114      	movs	r1, #20
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f006 fb97 	bl	801e830 <_ZdlPvj>
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	4618      	mov	r0, r3
 8018106:	3708      	adds	r7, #8
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}

0801810c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801810c:	b480      	push	{r7}
 801810e:	b083      	sub	sp, #12
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
    {
 8018114:	4a04      	ldr	r2, [pc, #16]	; (8018128 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	601a      	str	r2, [r3, #0]
    }
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	4618      	mov	r0, r3
 801811e:	370c      	adds	r7, #12
 8018120:	46bd      	mov	sp, r7
 8018122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018126:	4770      	bx	lr
 8018128:	08022d7c 	.word	0x08022d7c

0801812c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
    }
 8018134:	6878      	ldr	r0, [r7, #4]
 8018136:	f7ff ffe9 	bl	801810c <_ZN8touchgfx3LCDD1Ev>
 801813a:	2108      	movs	r1, #8
 801813c:	6878      	ldr	r0, [r7, #4]
 801813e:	f006 fb77 	bl	801e830 <_ZdlPvj>
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	4618      	mov	r0, r3
 8018146:	3708      	adds	r7, #8
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801814c:	b480      	push	{r7}
 801814e:	b083      	sub	sp, #12
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	2200      	movs	r2, #0
 8018158:	801a      	strh	r2, [r3, #0]
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	2200      	movs	r2, #0
 801815e:	805a      	strh	r2, [r3, #2]
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2200      	movs	r2, #0
 8018164:	809a      	strh	r2, [r3, #4]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2200      	movs	r2, #0
 801816a:	80da      	strh	r2, [r3, #6]
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2200      	movs	r2, #0
 8018170:	811a      	strh	r2, [r3, #8]
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2200      	movs	r2, #0
 8018176:	815a      	strh	r2, [r3, #10]
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2200      	movs	r2, #0
 801817c:	819a      	strh	r2, [r3, #12]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2200      	movs	r2, #0
 8018182:	739a      	strb	r2, [r3, #14]
        {
        }
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	4618      	mov	r0, r3
 8018188:	370c      	adds	r7, #12
 801818a:	46bd      	mov	sp, r7
 801818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018190:	4770      	bx	lr

08018192 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8018192:	b580      	push	{r7, lr}
 8018194:	b082      	sub	sp, #8
 8018196:	af00      	add	r7, sp, #0
 8018198:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	4618      	mov	r0, r3
 801819e:	f7ff ffd5 	bl	801814c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2200      	movs	r2, #0
 80181a6:	611a      	str	r2, [r3, #16]
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2200      	movs	r2, #0
 80181ac:	829a      	strh	r2, [r3, #20]
    {
    }
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	4618      	mov	r0, r3
 80181b2:	3708      	adds	r7, #8
 80181b4:	46bd      	mov	sp, r7
 80181b6:	bd80      	pop	{r7, pc}

080181b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b084      	sub	sp, #16
 80181bc:	af00      	add	r7, sp, #0
 80181be:	60f8      	str	r0, [r7, #12]
 80181c0:	60b9      	str	r1, [r7, #8]
 80181c2:	607a      	str	r2, [r7, #4]
 80181c4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80181c6:	4a55      	ldr	r2, [pc, #340]	; (801831c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	601a      	str	r2, [r3, #0]
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	68ba      	ldr	r2, [r7, #8]
 80181d0:	605a      	str	r2, [r3, #4]
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	687a      	ldr	r2, [r7, #4]
 80181d6:	609a      	str	r2, [r3, #8]
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	683a      	ldr	r2, [r7, #0]
 80181dc:	60da      	str	r2, [r3, #12]
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2200      	movs	r2, #0
 80181e2:	611a      	str	r2, [r3, #16]
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	2200      	movs	r2, #0
 80181e8:	615a      	str	r2, [r3, #20]
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	2200      	movs	r2, #0
 80181ee:	619a      	str	r2, [r3, #24]
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	331c      	adds	r3, #28
 80181f4:	4618      	mov	r0, r3
 80181f6:	f7ff ffcc 	bl	8018192 <_ZN8touchgfx8GesturesC1Ev>
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	2200      	movs	r2, #0
 80181fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	2200      	movs	r2, #0
 8018206:	639a      	str	r2, [r3, #56]	; 0x38
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	2200      	movs	r2, #0
 801820c:	63da      	str	r2, [r3, #60]	; 0x3c
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	2200      	movs	r2, #0
 8018212:	641a      	str	r2, [r3, #64]	; 0x40
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	2200      	movs	r2, #0
 8018218:	645a      	str	r2, [r3, #68]	; 0x44
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	2200      	movs	r2, #0
 801821e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	2201      	movs	r2, #1
 8018226:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	2200      	movs	r2, #0
 801822e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	2200      	movs	r2, #0
 8018236:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	2200      	movs	r2, #0
 801823e:	64da      	str	r2, [r3, #76]	; 0x4c
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	3350      	adds	r3, #80	; 0x50
 8018244:	4618      	mov	r0, r3
 8018246:	f7fd fdea 	bl	8015e1e <_ZN8touchgfx4RectC1Ev>
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	2200      	movs	r2, #0
 801824e:	659a      	str	r2, [r3, #88]	; 0x58
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	2200      	movs	r2, #0
 8018254:	65da      	str	r2, [r3, #92]	; 0x5c
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2200      	movs	r2, #0
 801825a:	661a      	str	r2, [r3, #96]	; 0x60
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	2201      	movs	r2, #1
 8018260:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	2200      	movs	r2, #0
 8018268:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	2200      	movs	r2, #0
 8018270:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	2201      	movs	r2, #1
 8018278:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	2200      	movs	r2, #0
 8018280:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	2200      	movs	r2, #0
 8018288:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	2200      	movs	r2, #0
 8018290:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	2200      	movs	r2, #0
 8018298:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	2200      	movs	r2, #0
 80182a0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	2200      	movs	r2, #0
 80182a8:	671a      	str	r2, [r3, #112]	; 0x70
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	2200      	movs	r2, #0
 80182ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	2200      	movs	r2, #0
 80182b6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	2200      	movs	r2, #0
 80182be:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	2201      	movs	r2, #1
 80182c6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	2201      	movs	r2, #1
 80182ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80182d2:	4a13      	ldr	r2, [pc, #76]	; (8018320 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80182d8:	4a12      	ldr	r2, [pc, #72]	; (8018324 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80182da:	8b3b      	ldrh	r3, [r7, #24]
 80182dc:	8013      	strh	r3, [r2, #0]
 80182de:	4b11      	ldr	r3, [pc, #68]	; (8018324 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80182e0:	881a      	ldrh	r2, [r3, #0]
 80182e2:	4b11      	ldr	r3, [pc, #68]	; (8018328 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80182e4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80182e6:	4a11      	ldr	r2, [pc, #68]	; (801832c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80182e8:	8bbb      	ldrh	r3, [r7, #28]
 80182ea:	8013      	strh	r3, [r2, #0]
 80182ec:	4b0f      	ldr	r3, [pc, #60]	; (801832c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80182ee:	881a      	ldrh	r2, [r3, #0]
 80182f0:	4b0f      	ldr	r3, [pc, #60]	; (8018330 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80182f2:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80182f4:	4b0f      	ldr	r3, [pc, #60]	; (8018334 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80182f6:	2200      	movs	r2, #0
 80182f8:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80182fa:	8b3a      	ldrh	r2, [r7, #24]
 80182fc:	8bbb      	ldrh	r3, [r7, #28]
 80182fe:	429a      	cmp	r2, r3
 8018300:	bf34      	ite	cc
 8018302:	2301      	movcc	r3, #1
 8018304:	2300      	movcs	r3, #0
 8018306:	b2db      	uxtb	r3, r3
 8018308:	461a      	mov	r2, r3
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	4618      	mov	r0, r3
 8018314:	3710      	adds	r7, #16
 8018316:	46bd      	mov	sp, r7
 8018318:	bd80      	pop	{r7, pc}
 801831a:	bf00      	nop
 801831c:	080226f8 	.word	0x080226f8
 8018320:	20006f14 	.word	0x20006f14
 8018324:	20006f06 	.word	0x20006f06
 8018328:	20006f0c 	.word	0x20006f0c
 801832c:	20006f08 	.word	0x20006f08
 8018330:	20006f0e 	.word	0x20006f0e
 8018334:	20006f0a 	.word	0x20006f0a

08018338 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8018338:	b580      	push	{r7, lr}
 801833a:	b086      	sub	sp, #24
 801833c:	af02      	add	r7, sp, #8
 801833e:	60f8      	str	r0, [r7, #12]
 8018340:	60b9      	str	r1, [r7, #8]
 8018342:	607a      	str	r2, [r7, #4]
 8018344:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8018346:	68f8      	ldr	r0, [r7, #12]
 8018348:	8bbb      	ldrh	r3, [r7, #28]
 801834a:	9301      	str	r3, [sp, #4]
 801834c:	8b3b      	ldrh	r3, [r7, #24]
 801834e:	9300      	str	r3, [sp, #0]
 8018350:	683b      	ldr	r3, [r7, #0]
 8018352:	687a      	ldr	r2, [r7, #4]
 8018354:	68b9      	ldr	r1, [r7, #8]
 8018356:	f7ff ff2f 	bl	80181b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801835a:	4a04      	ldr	r2, [pc, #16]	; (801836c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	601a      	str	r2, [r3, #0]
    }
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	4618      	mov	r0, r3
 8018364:	3710      	adds	r7, #16
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	0802239c 	.word	0x0802239c

08018370 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8018370:	b580      	push	{r7, lr}
 8018372:	b086      	sub	sp, #24
 8018374:	af02      	add	r7, sp, #8
 8018376:	60f8      	str	r0, [r7, #12]
 8018378:	60b9      	str	r1, [r7, #8]
 801837a:	607a      	str	r2, [r7, #4]
 801837c:	603b      	str	r3, [r7, #0]
 801837e:	68f8      	ldr	r0, [r7, #12]
 8018380:	8bbb      	ldrh	r3, [r7, #28]
 8018382:	9301      	str	r3, [sp, #4]
 8018384:	8b3b      	ldrh	r3, [r7, #24]
 8018386:	9300      	str	r3, [sp, #0]
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	687a      	ldr	r2, [r7, #4]
 801838c:	68b9      	ldr	r1, [r7, #8]
 801838e:	f7ff ffd3 	bl	8018338 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018392:	4a04      	ldr	r2, [pc, #16]	; (80183a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	601a      	str	r2, [r3, #0]
    }
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	4618      	mov	r0, r3
 801839c:	3710      	adds	r7, #16
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}
 80183a2:	bf00      	nop
 80183a4:	08022250 	.word	0x08022250

080183a8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80183a8:	b480      	push	{r7}
 80183aa:	b083      	sub	sp, #12
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
 80183b0:	4a04      	ldr	r2, [pc, #16]	; (80183c4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	601a      	str	r2, [r3, #0]
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	4618      	mov	r0, r3
 80183ba:	370c      	adds	r7, #12
 80183bc:	46bd      	mov	sp, r7
 80183be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c2:	4770      	bx	lr
 80183c4:	08022238 	.word	0x08022238

080183c8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b082      	sub	sp, #8
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7ff ffe8 	bl	80183a8 <_ZN8touchgfx15TouchControllerC1Ev>
 80183d8:	4a03      	ldr	r2, [pc, #12]	; (80183e8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	601a      	str	r2, [r3, #0]
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	4618      	mov	r0, r3
 80183e2:	3708      	adds	r7, #8
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}
 80183e8:	08022220 	.word	0x08022220

080183ec <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b082      	sub	sp, #8
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
 80183f4:	4a05      	ldr	r2, [pc, #20]	; (801840c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	601a      	str	r2, [r3, #0]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	4618      	mov	r0, r3
 80183fe:	f7ff fe85 	bl	801810c <_ZN8touchgfx3LCDD1Ev>
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	4618      	mov	r0, r3
 8018406:	3708      	adds	r7, #8
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}
 801840c:	080239a0 	.word	0x080239a0

08018410 <_ZN8touchgfx8LCD16bppD0Ev>:
 8018410:	b580      	push	{r7, lr}
 8018412:	b082      	sub	sp, #8
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
 8018418:	6878      	ldr	r0, [r7, #4]
 801841a:	f7ff ffe7 	bl	80183ec <_ZN8touchgfx8LCD16bppD1Ev>
 801841e:	2178      	movs	r1, #120	; 0x78
 8018420:	6878      	ldr	r0, [r7, #4]
 8018422:	f006 fa05 	bl	801e830 <_ZdlPvj>
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	4618      	mov	r0, r3
 801842a:	3708      	adds	r7, #8
 801842c:	46bd      	mov	sp, r7
 801842e:	bd80      	pop	{r7, pc}

08018430 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8018430:	b590      	push	{r4, r7, lr}
 8018432:	b085      	sub	sp, #20
 8018434:	af02      	add	r7, sp, #8
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	6039      	str	r1, [r7, #0]
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	2b01      	cmp	r3, #1
 801843e:	f040 81e8 	bne.w	8018812 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018448:	4293      	cmp	r3, r2
 801844a:	f040 81e2 	bne.w	8018812 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
};
 801844e:	4cda      	ldr	r4, [pc, #872]	; (80187b8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8018450:	2301      	movs	r3, #1
 8018452:	7023      	strb	r3, [r4, #0]
 8018454:	1ca0      	adds	r0, r4, #2
 8018456:	2328      	movs	r3, #40	; 0x28
 8018458:	9300      	str	r3, [sp, #0]
 801845a:	231a      	movs	r3, #26
 801845c:	223d      	movs	r2, #61	; 0x3d
 801845e:	2107      	movs	r1, #7
 8018460:	f7fd fcf4 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018464:	2328      	movs	r3, #40	; 0x28
 8018466:	8163      	strh	r3, [r4, #10]
 8018468:	340c      	adds	r4, #12
 801846a:	2302      	movs	r3, #2
 801846c:	7023      	strb	r3, [r4, #0]
 801846e:	1ca0      	adds	r0, r4, #2
 8018470:	2328      	movs	r3, #40	; 0x28
 8018472:	9300      	str	r3, [sp, #0]
 8018474:	231a      	movs	r3, #26
 8018476:	223d      	movs	r2, #61	; 0x3d
 8018478:	2123      	movs	r1, #35	; 0x23
 801847a:	f7fd fce7 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801847e:	2328      	movs	r3, #40	; 0x28
 8018480:	8163      	strh	r3, [r4, #10]
 8018482:	340c      	adds	r4, #12
 8018484:	2303      	movs	r3, #3
 8018486:	7023      	strb	r3, [r4, #0]
 8018488:	1ca0      	adds	r0, r4, #2
 801848a:	2328      	movs	r3, #40	; 0x28
 801848c:	9300      	str	r3, [sp, #0]
 801848e:	231a      	movs	r3, #26
 8018490:	223d      	movs	r2, #61	; 0x3d
 8018492:	213f      	movs	r1, #63	; 0x3f
 8018494:	f7fd fcda 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018498:	2328      	movs	r3, #40	; 0x28
 801849a:	8163      	strh	r3, [r4, #10]
 801849c:	340c      	adds	r4, #12
 801849e:	2304      	movs	r3, #4
 80184a0:	7023      	strb	r3, [r4, #0]
 80184a2:	1ca0      	adds	r0, r4, #2
 80184a4:	2328      	movs	r3, #40	; 0x28
 80184a6:	9300      	str	r3, [sp, #0]
 80184a8:	231a      	movs	r3, #26
 80184aa:	223d      	movs	r2, #61	; 0x3d
 80184ac:	215b      	movs	r1, #91	; 0x5b
 80184ae:	f7fd fccd 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80184b2:	2328      	movs	r3, #40	; 0x28
 80184b4:	8163      	strh	r3, [r4, #10]
 80184b6:	340c      	adds	r4, #12
 80184b8:	2305      	movs	r3, #5
 80184ba:	7023      	strb	r3, [r4, #0]
 80184bc:	1ca0      	adds	r0, r4, #2
 80184be:	2328      	movs	r3, #40	; 0x28
 80184c0:	9300      	str	r3, [sp, #0]
 80184c2:	231a      	movs	r3, #26
 80184c4:	223d      	movs	r2, #61	; 0x3d
 80184c6:	2177      	movs	r1, #119	; 0x77
 80184c8:	f7fd fcc0 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80184cc:	2328      	movs	r3, #40	; 0x28
 80184ce:	8163      	strh	r3, [r4, #10]
 80184d0:	340c      	adds	r4, #12
 80184d2:	2306      	movs	r3, #6
 80184d4:	7023      	strb	r3, [r4, #0]
 80184d6:	1ca0      	adds	r0, r4, #2
 80184d8:	2328      	movs	r3, #40	; 0x28
 80184da:	9300      	str	r3, [sp, #0]
 80184dc:	231a      	movs	r3, #26
 80184de:	223d      	movs	r2, #61	; 0x3d
 80184e0:	2193      	movs	r1, #147	; 0x93
 80184e2:	f7fd fcb3 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80184e6:	2328      	movs	r3, #40	; 0x28
 80184e8:	8163      	strh	r3, [r4, #10]
 80184ea:	340c      	adds	r4, #12
 80184ec:	2307      	movs	r3, #7
 80184ee:	7023      	strb	r3, [r4, #0]
 80184f0:	1ca0      	adds	r0, r4, #2
 80184f2:	2328      	movs	r3, #40	; 0x28
 80184f4:	9300      	str	r3, [sp, #0]
 80184f6:	231a      	movs	r3, #26
 80184f8:	223d      	movs	r2, #61	; 0x3d
 80184fa:	21af      	movs	r1, #175	; 0xaf
 80184fc:	f7fd fca6 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018500:	2328      	movs	r3, #40	; 0x28
 8018502:	8163      	strh	r3, [r4, #10]
 8018504:	340c      	adds	r4, #12
 8018506:	2308      	movs	r3, #8
 8018508:	7023      	strb	r3, [r4, #0]
 801850a:	1ca0      	adds	r0, r4, #2
 801850c:	2328      	movs	r3, #40	; 0x28
 801850e:	9300      	str	r3, [sp, #0]
 8018510:	231a      	movs	r3, #26
 8018512:	223d      	movs	r2, #61	; 0x3d
 8018514:	21cb      	movs	r1, #203	; 0xcb
 8018516:	f7fd fc99 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801851a:	2328      	movs	r3, #40	; 0x28
 801851c:	8163      	strh	r3, [r4, #10]
 801851e:	340c      	adds	r4, #12
 8018520:	2309      	movs	r3, #9
 8018522:	7023      	strb	r3, [r4, #0]
 8018524:	1ca0      	adds	r0, r4, #2
 8018526:	2328      	movs	r3, #40	; 0x28
 8018528:	9300      	str	r3, [sp, #0]
 801852a:	231a      	movs	r3, #26
 801852c:	223d      	movs	r2, #61	; 0x3d
 801852e:	21e7      	movs	r1, #231	; 0xe7
 8018530:	f7fd fc8c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018534:	2328      	movs	r3, #40	; 0x28
 8018536:	8163      	strh	r3, [r4, #10]
 8018538:	340c      	adds	r4, #12
 801853a:	230a      	movs	r3, #10
 801853c:	7023      	strb	r3, [r4, #0]
 801853e:	1ca0      	adds	r0, r4, #2
 8018540:	2328      	movs	r3, #40	; 0x28
 8018542:	9300      	str	r3, [sp, #0]
 8018544:	231a      	movs	r3, #26
 8018546:	223d      	movs	r2, #61	; 0x3d
 8018548:	f240 1103 	movw	r1, #259	; 0x103
 801854c:	f7fd fc7e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018550:	2328      	movs	r3, #40	; 0x28
 8018552:	8163      	strh	r3, [r4, #10]
 8018554:	340c      	adds	r4, #12
 8018556:	230b      	movs	r3, #11
 8018558:	7023      	strb	r3, [r4, #0]
 801855a:	1ca0      	adds	r0, r4, #2
 801855c:	2328      	movs	r3, #40	; 0x28
 801855e:	9300      	str	r3, [sp, #0]
 8018560:	231a      	movs	r3, #26
 8018562:	223d      	movs	r2, #61	; 0x3d
 8018564:	f240 111f 	movw	r1, #287	; 0x11f
 8018568:	f7fd fc70 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801856c:	2328      	movs	r3, #40	; 0x28
 801856e:	8163      	strh	r3, [r4, #10]
 8018570:	340c      	adds	r4, #12
 8018572:	230c      	movs	r3, #12
 8018574:	7023      	strb	r3, [r4, #0]
 8018576:	1ca0      	adds	r0, r4, #2
 8018578:	2328      	movs	r3, #40	; 0x28
 801857a:	9300      	str	r3, [sp, #0]
 801857c:	231a      	movs	r3, #26
 801857e:	2269      	movs	r2, #105	; 0x69
 8018580:	2107      	movs	r1, #7
 8018582:	f7fd fc63 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018586:	2328      	movs	r3, #40	; 0x28
 8018588:	8163      	strh	r3, [r4, #10]
 801858a:	340c      	adds	r4, #12
 801858c:	230d      	movs	r3, #13
 801858e:	7023      	strb	r3, [r4, #0]
 8018590:	1ca0      	adds	r0, r4, #2
 8018592:	2328      	movs	r3, #40	; 0x28
 8018594:	9300      	str	r3, [sp, #0]
 8018596:	231a      	movs	r3, #26
 8018598:	2269      	movs	r2, #105	; 0x69
 801859a:	2123      	movs	r1, #35	; 0x23
 801859c:	f7fd fc56 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80185a0:	2328      	movs	r3, #40	; 0x28
 80185a2:	8163      	strh	r3, [r4, #10]
 80185a4:	340c      	adds	r4, #12
 80185a6:	230e      	movs	r3, #14
 80185a8:	7023      	strb	r3, [r4, #0]
 80185aa:	1ca0      	adds	r0, r4, #2
 80185ac:	2328      	movs	r3, #40	; 0x28
 80185ae:	9300      	str	r3, [sp, #0]
 80185b0:	231a      	movs	r3, #26
 80185b2:	2269      	movs	r2, #105	; 0x69
 80185b4:	213f      	movs	r1, #63	; 0x3f
 80185b6:	f7fd fc49 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80185ba:	2328      	movs	r3, #40	; 0x28
 80185bc:	8163      	strh	r3, [r4, #10]
 80185be:	340c      	adds	r4, #12
 80185c0:	230f      	movs	r3, #15
 80185c2:	7023      	strb	r3, [r4, #0]
 80185c4:	1ca0      	adds	r0, r4, #2
 80185c6:	2328      	movs	r3, #40	; 0x28
 80185c8:	9300      	str	r3, [sp, #0]
 80185ca:	231a      	movs	r3, #26
 80185cc:	2269      	movs	r2, #105	; 0x69
 80185ce:	215b      	movs	r1, #91	; 0x5b
 80185d0:	f7fd fc3c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80185d4:	2328      	movs	r3, #40	; 0x28
 80185d6:	8163      	strh	r3, [r4, #10]
 80185d8:	340c      	adds	r4, #12
 80185da:	2310      	movs	r3, #16
 80185dc:	7023      	strb	r3, [r4, #0]
 80185de:	1ca0      	adds	r0, r4, #2
 80185e0:	2328      	movs	r3, #40	; 0x28
 80185e2:	9300      	str	r3, [sp, #0]
 80185e4:	231a      	movs	r3, #26
 80185e6:	2269      	movs	r2, #105	; 0x69
 80185e8:	2177      	movs	r1, #119	; 0x77
 80185ea:	f7fd fc2f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80185ee:	2328      	movs	r3, #40	; 0x28
 80185f0:	8163      	strh	r3, [r4, #10]
 80185f2:	340c      	adds	r4, #12
 80185f4:	2311      	movs	r3, #17
 80185f6:	7023      	strb	r3, [r4, #0]
 80185f8:	1ca0      	adds	r0, r4, #2
 80185fa:	2328      	movs	r3, #40	; 0x28
 80185fc:	9300      	str	r3, [sp, #0]
 80185fe:	231a      	movs	r3, #26
 8018600:	2269      	movs	r2, #105	; 0x69
 8018602:	2193      	movs	r1, #147	; 0x93
 8018604:	f7fd fc22 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018608:	2328      	movs	r3, #40	; 0x28
 801860a:	8163      	strh	r3, [r4, #10]
 801860c:	340c      	adds	r4, #12
 801860e:	2312      	movs	r3, #18
 8018610:	7023      	strb	r3, [r4, #0]
 8018612:	1ca0      	adds	r0, r4, #2
 8018614:	2328      	movs	r3, #40	; 0x28
 8018616:	9300      	str	r3, [sp, #0]
 8018618:	231a      	movs	r3, #26
 801861a:	2269      	movs	r2, #105	; 0x69
 801861c:	21af      	movs	r1, #175	; 0xaf
 801861e:	f7fd fc15 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018622:	2328      	movs	r3, #40	; 0x28
 8018624:	8163      	strh	r3, [r4, #10]
 8018626:	340c      	adds	r4, #12
 8018628:	2313      	movs	r3, #19
 801862a:	7023      	strb	r3, [r4, #0]
 801862c:	1ca0      	adds	r0, r4, #2
 801862e:	2328      	movs	r3, #40	; 0x28
 8018630:	9300      	str	r3, [sp, #0]
 8018632:	231a      	movs	r3, #26
 8018634:	2269      	movs	r2, #105	; 0x69
 8018636:	21cb      	movs	r1, #203	; 0xcb
 8018638:	f7fd fc08 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801863c:	2328      	movs	r3, #40	; 0x28
 801863e:	8163      	strh	r3, [r4, #10]
 8018640:	340c      	adds	r4, #12
 8018642:	2314      	movs	r3, #20
 8018644:	7023      	strb	r3, [r4, #0]
 8018646:	1ca0      	adds	r0, r4, #2
 8018648:	2328      	movs	r3, #40	; 0x28
 801864a:	9300      	str	r3, [sp, #0]
 801864c:	231a      	movs	r3, #26
 801864e:	2269      	movs	r2, #105	; 0x69
 8018650:	21e7      	movs	r1, #231	; 0xe7
 8018652:	f7fd fbfb 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018656:	2328      	movs	r3, #40	; 0x28
 8018658:	8163      	strh	r3, [r4, #10]
 801865a:	340c      	adds	r4, #12
 801865c:	2315      	movs	r3, #21
 801865e:	7023      	strb	r3, [r4, #0]
 8018660:	1ca0      	adds	r0, r4, #2
 8018662:	2328      	movs	r3, #40	; 0x28
 8018664:	9300      	str	r3, [sp, #0]
 8018666:	231a      	movs	r3, #26
 8018668:	2269      	movs	r2, #105	; 0x69
 801866a:	f240 1103 	movw	r1, #259	; 0x103
 801866e:	f7fd fbed 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018672:	2328      	movs	r3, #40	; 0x28
 8018674:	8163      	strh	r3, [r4, #10]
 8018676:	340c      	adds	r4, #12
 8018678:	2316      	movs	r3, #22
 801867a:	7023      	strb	r3, [r4, #0]
 801867c:	1ca0      	adds	r0, r4, #2
 801867e:	2328      	movs	r3, #40	; 0x28
 8018680:	9300      	str	r3, [sp, #0]
 8018682:	231a      	movs	r3, #26
 8018684:	2269      	movs	r2, #105	; 0x69
 8018686:	f240 111f 	movw	r1, #287	; 0x11f
 801868a:	f7fd fbdf 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801868e:	2328      	movs	r3, #40	; 0x28
 8018690:	8163      	strh	r3, [r4, #10]
 8018692:	340c      	adds	r4, #12
 8018694:	2317      	movs	r3, #23
 8018696:	7023      	strb	r3, [r4, #0]
 8018698:	1ca0      	adds	r0, r4, #2
 801869a:	2328      	movs	r3, #40	; 0x28
 801869c:	9300      	str	r3, [sp, #0]
 801869e:	231a      	movs	r3, #26
 80186a0:	2295      	movs	r2, #149	; 0x95
 80186a2:	213f      	movs	r1, #63	; 0x3f
 80186a4:	f7fd fbd2 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80186a8:	2328      	movs	r3, #40	; 0x28
 80186aa:	8163      	strh	r3, [r4, #10]
 80186ac:	340c      	adds	r4, #12
 80186ae:	2318      	movs	r3, #24
 80186b0:	7023      	strb	r3, [r4, #0]
 80186b2:	1ca0      	adds	r0, r4, #2
 80186b4:	2328      	movs	r3, #40	; 0x28
 80186b6:	9300      	str	r3, [sp, #0]
 80186b8:	231a      	movs	r3, #26
 80186ba:	2295      	movs	r2, #149	; 0x95
 80186bc:	215b      	movs	r1, #91	; 0x5b
 80186be:	f7fd fbc5 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80186c2:	2328      	movs	r3, #40	; 0x28
 80186c4:	8163      	strh	r3, [r4, #10]
 80186c6:	340c      	adds	r4, #12
 80186c8:	2319      	movs	r3, #25
 80186ca:	7023      	strb	r3, [r4, #0]
 80186cc:	1ca0      	adds	r0, r4, #2
 80186ce:	2328      	movs	r3, #40	; 0x28
 80186d0:	9300      	str	r3, [sp, #0]
 80186d2:	231a      	movs	r3, #26
 80186d4:	2295      	movs	r2, #149	; 0x95
 80186d6:	2177      	movs	r1, #119	; 0x77
 80186d8:	f7fd fbb8 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80186dc:	2328      	movs	r3, #40	; 0x28
 80186de:	8163      	strh	r3, [r4, #10]
 80186e0:	340c      	adds	r4, #12
 80186e2:	231a      	movs	r3, #26
 80186e4:	7023      	strb	r3, [r4, #0]
 80186e6:	1ca0      	adds	r0, r4, #2
 80186e8:	2328      	movs	r3, #40	; 0x28
 80186ea:	9300      	str	r3, [sp, #0]
 80186ec:	231a      	movs	r3, #26
 80186ee:	2295      	movs	r2, #149	; 0x95
 80186f0:	2193      	movs	r1, #147	; 0x93
 80186f2:	f7fd fbab 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80186f6:	2328      	movs	r3, #40	; 0x28
 80186f8:	8163      	strh	r3, [r4, #10]
 80186fa:	340c      	adds	r4, #12
 80186fc:	231b      	movs	r3, #27
 80186fe:	7023      	strb	r3, [r4, #0]
 8018700:	1ca0      	adds	r0, r4, #2
 8018702:	2328      	movs	r3, #40	; 0x28
 8018704:	9300      	str	r3, [sp, #0]
 8018706:	231a      	movs	r3, #26
 8018708:	2295      	movs	r2, #149	; 0x95
 801870a:	21af      	movs	r1, #175	; 0xaf
 801870c:	f7fd fb9e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018710:	2328      	movs	r3, #40	; 0x28
 8018712:	8163      	strh	r3, [r4, #10]
 8018714:	340c      	adds	r4, #12
 8018716:	231c      	movs	r3, #28
 8018718:	7023      	strb	r3, [r4, #0]
 801871a:	1ca0      	adds	r0, r4, #2
 801871c:	2328      	movs	r3, #40	; 0x28
 801871e:	9300      	str	r3, [sp, #0]
 8018720:	231a      	movs	r3, #26
 8018722:	2295      	movs	r2, #149	; 0x95
 8018724:	21cb      	movs	r1, #203	; 0xcb
 8018726:	f7fd fb91 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801872a:	2328      	movs	r3, #40	; 0x28
 801872c:	8163      	strh	r3, [r4, #10]
 801872e:	340c      	adds	r4, #12
 8018730:	231d      	movs	r3, #29
 8018732:	7023      	strb	r3, [r4, #0]
 8018734:	1ca0      	adds	r0, r4, #2
 8018736:	2328      	movs	r3, #40	; 0x28
 8018738:	9300      	str	r3, [sp, #0]
 801873a:	231a      	movs	r3, #26
 801873c:	2295      	movs	r2, #149	; 0x95
 801873e:	21e7      	movs	r1, #231	; 0xe7
 8018740:	f7fd fb84 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018744:	2328      	movs	r3, #40	; 0x28
 8018746:	8163      	strh	r3, [r4, #10]
 8018748:	340c      	adds	r4, #12
 801874a:	231e      	movs	r3, #30
 801874c:	7023      	strb	r3, [r4, #0]
 801874e:	1ca0      	adds	r0, r4, #2
 8018750:	2328      	movs	r3, #40	; 0x28
 8018752:	9300      	str	r3, [sp, #0]
 8018754:	23fc      	movs	r3, #252	; 0xfc
 8018756:	22c1      	movs	r2, #193	; 0xc1
 8018758:	213e      	movs	r1, #62	; 0x3e
 801875a:	f7fd fb77 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801875e:	232b      	movs	r3, #43	; 0x2b
 8018760:	8163      	strh	r3, [r4, #10]
};
 8018762:	4c16      	ldr	r4, [pc, #88]	; (80187bc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8018764:	4620      	mov	r0, r4
 8018766:	2328      	movs	r3, #40	; 0x28
 8018768:	9300      	str	r3, [sp, #0]
 801876a:	2338      	movs	r3, #56	; 0x38
 801876c:	2295      	movs	r2, #149	; 0x95
 801876e:	2105      	movs	r1, #5
 8018770:	f7fd fb6c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018774:	2300      	movs	r3, #0
 8018776:	60a3      	str	r3, [r4, #8]
 8018778:	232a      	movs	r3, #42	; 0x2a
 801877a:	81a3      	strh	r3, [r4, #12]
 801877c:	3410      	adds	r4, #16
 801877e:	4620      	mov	r0, r4
 8018780:	2328      	movs	r3, #40	; 0x28
 8018782:	9300      	str	r3, [sp, #0]
 8018784:	2338      	movs	r3, #56	; 0x38
 8018786:	2295      	movs	r2, #149	; 0x95
 8018788:	f44f 7181 	mov.w	r1, #258	; 0x102
 801878c:	f7fd fb5e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018790:	2300      	movs	r3, #0
 8018792:	60a3      	str	r3, [r4, #8]
 8018794:	2327      	movs	r3, #39	; 0x27
 8018796:	81a3      	strh	r3, [r4, #12]
 8018798:	3410      	adds	r4, #16
 801879a:	4620      	mov	r0, r4
 801879c:	2328      	movs	r3, #40	; 0x28
 801879e:	9300      	str	r3, [sp, #0]
 80187a0:	2338      	movs	r3, #56	; 0x38
 80187a2:	22c1      	movs	r2, #193	; 0xc1
 80187a4:	2105      	movs	r1, #5
 80187a6:	f7fd fb51 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80187aa:	2300      	movs	r3, #0
 80187ac:	60a3      	str	r3, [r4, #8]
 80187ae:	2329      	movs	r3, #41	; 0x29
 80187b0:	81a3      	strh	r3, [r4, #12]
};
 80187b2:	2328      	movs	r3, #40	; 0x28
 80187b4:	9300      	str	r3, [sp, #0]
 80187b6:	e003      	b.n	80187c0 <_Z41__static_initialization_and_destruction_0ii+0x390>
 80187b8:	20005d38 	.word	0x20005d38
 80187bc:	20005ea0 	.word	0x20005ea0
 80187c0:	f44f 739a 	mov.w	r3, #308	; 0x134
 80187c4:	220a      	movs	r2, #10
 80187c6:	210f      	movs	r1, #15
 80187c8:	4821      	ldr	r0, [pc, #132]	; (8018850 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 80187ca:	f7fd fb3f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80187ce:	2130      	movs	r1, #48	; 0x30
 80187d0:	4820      	ldr	r0, [pc, #128]	; (8018854 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 80187d2:	f7fd fb79 	bl	8015ec8 <_ZN8touchgfx9TypedTextC1Et>
 80187d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80187da:	481f      	ldr	r0, [pc, #124]	; (8018858 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 80187dc:	f7fd fb10 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
 80187e0:	2100      	movs	r1, #0
 80187e2:	481e      	ldr	r0, [pc, #120]	; (801885c <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 80187e4:	f7fd fb0c 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
static STM32TouchController tc;
 80187e8:	481d      	ldr	r0, [pc, #116]	; (8018860 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 80187ea:	f7ff fded 	bl	80183c8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80187ee:	481d      	ldr	r0, [pc, #116]	; (8018864 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 80187f0:	f7ff f968 	bl	8017ac4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80187f4:	481c      	ldr	r0, [pc, #112]	; (8018868 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80187f6:	f004 fc8b 	bl	801d110 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80187fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80187fe:	9301      	str	r3, [sp, #4]
 8018800:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8018804:	9300      	str	r3, [sp, #0]
 8018806:	4b16      	ldr	r3, [pc, #88]	; (8018860 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8018808:	4a17      	ldr	r2, [pc, #92]	; (8018868 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 801880a:	4916      	ldr	r1, [pc, #88]	; (8018864 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 801880c:	4817      	ldr	r0, [pc, #92]	; (801886c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 801880e:	f7ff fdaf 	bl	8018370 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d116      	bne.n	8018846 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801881e:	4293      	cmp	r3, r2
 8018820:	d111      	bne.n	8018846 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8018822:	4812      	ldr	r0, [pc, #72]	; (801886c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8018824:	f7fe ff92 	bl	801774c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8018828:	4811      	ldr	r0, [pc, #68]	; (8018870 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 801882a:	f7fc fdb3 	bl	8015394 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801882e:	480e      	ldr	r0, [pc, #56]	; (8018868 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8018830:	f7ff fddc 	bl	80183ec <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8018834:	480b      	ldr	r0, [pc, #44]	; (8018864 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8018836:	f7ff f96f 	bl	8017b18 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801883a:	4809      	ldr	r0, [pc, #36]	; (8018860 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 801883c:	f7fe fd40 	bl	80172c0 <_ZN20STM32TouchControllerD1Ev>
static const Keyboard::Layout layout =
 8018840:	480c      	ldr	r0, [pc, #48]	; (8018874 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8018842:	f7fd fb7f 	bl	8015f44 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
}
 8018846:	bf00      	nop
 8018848:	370c      	adds	r7, #12
 801884a:	46bd      	mov	sp, r7
 801884c:	bd90      	pop	{r4, r7, pc}
 801884e:	bf00      	nop
 8018850:	200000ea 	.word	0x200000ea
 8018854:	200000f4 	.word	0x200000f4
 8018858:	200000fc 	.word	0x200000fc
 801885c:	20000104 	.word	0x20000104
 8018860:	20005ed0 	.word	0x20005ed0
 8018864:	20005ed4 	.word	0x20005ed4
 8018868:	20006c74 	.word	0x20006c74
 801886c:	20006cec 	.word	0x20006cec
 8018870:	20000108 	.word	0x20000108
 8018874:	200000d8 	.word	0x200000d8

08018878 <_GLOBAL__sub_I_touchgfx_init>:
 8018878:	b580      	push	{r7, lr}
 801887a:	af00      	add	r7, sp, #0
 801887c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018880:	2001      	movs	r0, #1
 8018882:	f7ff fdd5 	bl	8018430 <_Z41__static_initialization_and_destruction_0ii>
 8018886:	bd80      	pop	{r7, pc}

08018888 <_GLOBAL__sub_D_touchgfx_init>:
 8018888:	b580      	push	{r7, lr}
 801888a:	af00      	add	r7, sp, #0
 801888c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018890:	2000      	movs	r0, #0
 8018892:	f7ff fdcd 	bl	8018430 <_Z41__static_initialization_and_destruction_0ii>
 8018896:	bd80      	pop	{r7, pc}

08018898 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8018898:	b580      	push	{r7, lr}
 801889a:	b082      	sub	sp, #8
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	3320      	adds	r3, #32
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	6878      	ldr	r0, [r7, #4]
 80188aa:	4798      	blx	r3
    }
 80188ac:	bf00      	nop
 80188ae:	3708      	adds	r7, #8
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}

080188b4 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80188b4:	b480      	push	{r7}
 80188b6:	b083      	sub	sp, #12
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80188c2:	3301      	adds	r3, #1
 80188c4:	b2da      	uxtb	r2, r3
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80188cc:	bf00      	nop
 80188ce:	370c      	adds	r7, #12
 80188d0:	46bd      	mov	sp, r7
 80188d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d6:	4770      	bx	lr

080188d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80188d8:	b580      	push	{r7, lr}
 80188da:	b082      	sub	sp, #8
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
 80188e0:	460b      	mov	r3, r1
 80188e2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80188e4:	78fb      	ldrb	r3, [r7, #3]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d002      	beq.n	80188f0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80188ea:	78fb      	ldrb	r3, [r7, #3]
 80188ec:	2b02      	cmp	r3, #2
 80188ee:	d105      	bne.n	80188fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	78fa      	ldrb	r2, [r7, #3]
 80188f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80188f8:	2301      	movs	r3, #1
 80188fa:	e027      	b.n	801894c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80188fc:	78fb      	ldrb	r3, [r7, #3]
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d123      	bne.n	801894a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018906:	2b00      	cmp	r3, #0
 8018908:	d014      	beq.n	8018934 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	339c      	adds	r3, #156	; 0x9c
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	6878      	ldr	r0, [r7, #4]
 8018914:	4798      	blx	r3
 8018916:	4603      	mov	r3, r0
 8018918:	461a      	mov	r2, r3
 801891a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801891e:	429a      	cmp	r2, r3
 8018920:	d008      	beq.n	8018934 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8018922:	4b0c      	ldr	r3, [pc, #48]	; (8018954 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8018924:	781b      	ldrb	r3, [r3, #0]
 8018926:	f083 0301 	eor.w	r3, r3, #1
 801892a:	b2db      	uxtb	r3, r3
 801892c:	2b00      	cmp	r3, #0
 801892e:	d001      	beq.n	8018934 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8018930:	2301      	movs	r3, #1
 8018932:	e000      	b.n	8018936 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8018934:	2300      	movs	r3, #0
 8018936:	2b00      	cmp	r3, #0
 8018938:	d005      	beq.n	8018946 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	78fa      	ldrb	r2, [r7, #3]
 801893e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8018942:	2301      	movs	r3, #1
 8018944:	e002      	b.n	801894c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8018946:	2300      	movs	r3, #0
 8018948:	e000      	b.n	801894c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801894a:	2300      	movs	r3, #0
    }
 801894c:	4618      	mov	r0, r3
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	20006f10 	.word	0x20006f10

08018958 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8018958:	b480      	push	{r7}
 801895a:	b083      	sub	sp, #12
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
 8018960:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	683a      	ldr	r2, [r7, #0]
 8018966:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8018968:	bf00      	nop
 801896a:	370c      	adds	r7, #12
 801896c:	46bd      	mov	sp, r7
 801896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018972:	4770      	bx	lr

08018974 <__NVIC_EnableIRQ>:
{
 8018974:	b480      	push	{r7}
 8018976:	b083      	sub	sp, #12
 8018978:	af00      	add	r7, sp, #0
 801897a:	4603      	mov	r3, r0
 801897c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801897e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018982:	2b00      	cmp	r3, #0
 8018984:	db0b      	blt.n	801899e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018986:	88fb      	ldrh	r3, [r7, #6]
 8018988:	f003 021f 	and.w	r2, r3, #31
 801898c:	4907      	ldr	r1, [pc, #28]	; (80189ac <__NVIC_EnableIRQ+0x38>)
 801898e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018992:	095b      	lsrs	r3, r3, #5
 8018994:	2001      	movs	r0, #1
 8018996:	fa00 f202 	lsl.w	r2, r0, r2
 801899a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801899e:	bf00      	nop
 80189a0:	370c      	adds	r7, #12
 80189a2:	46bd      	mov	sp, r7
 80189a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a8:	4770      	bx	lr
 80189aa:	bf00      	nop
 80189ac:	e000e100 	.word	0xe000e100

080189b0 <__NVIC_DisableIRQ>:
{
 80189b0:	b480      	push	{r7}
 80189b2:	b083      	sub	sp, #12
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	4603      	mov	r3, r0
 80189b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80189ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	db12      	blt.n	80189e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80189c2:	88fb      	ldrh	r3, [r7, #6]
 80189c4:	f003 021f 	and.w	r2, r3, #31
 80189c8:	490a      	ldr	r1, [pc, #40]	; (80189f4 <__NVIC_DisableIRQ+0x44>)
 80189ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80189ce:	095b      	lsrs	r3, r3, #5
 80189d0:	2001      	movs	r0, #1
 80189d2:	fa00 f202 	lsl.w	r2, r0, r2
 80189d6:	3320      	adds	r3, #32
 80189d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80189dc:	f3bf 8f4f 	dsb	sy
}
 80189e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80189e2:	f3bf 8f6f 	isb	sy
}
 80189e6:	bf00      	nop
}
 80189e8:	bf00      	nop
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr
 80189f4:	e000e100 	.word	0xe000e100

080189f8 <__NVIC_SetPriority>:
{
 80189f8:	b480      	push	{r7}
 80189fa:	b083      	sub	sp, #12
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	4603      	mov	r3, r0
 8018a00:	6039      	str	r1, [r7, #0]
 8018a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	db0a      	blt.n	8018a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	b2da      	uxtb	r2, r3
 8018a10:	490c      	ldr	r1, [pc, #48]	; (8018a44 <__NVIC_SetPriority+0x4c>)
 8018a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018a16:	0112      	lsls	r2, r2, #4
 8018a18:	b2d2      	uxtb	r2, r2
 8018a1a:	440b      	add	r3, r1
 8018a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018a20:	e00a      	b.n	8018a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	b2da      	uxtb	r2, r3
 8018a26:	4908      	ldr	r1, [pc, #32]	; (8018a48 <__NVIC_SetPriority+0x50>)
 8018a28:	88fb      	ldrh	r3, [r7, #6]
 8018a2a:	f003 030f 	and.w	r3, r3, #15
 8018a2e:	3b04      	subs	r3, #4
 8018a30:	0112      	lsls	r2, r2, #4
 8018a32:	b2d2      	uxtb	r2, r2
 8018a34:	440b      	add	r3, r1
 8018a36:	761a      	strb	r2, [r3, #24]
}
 8018a38:	bf00      	nop
 8018a3a:	370c      	adds	r7, #12
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a42:	4770      	bx	lr
 8018a44:	e000e100 	.word	0xe000e100
 8018a48:	e000ed00 	.word	0xe000ed00

08018a4c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8018a4c:	b5b0      	push	{r4, r5, r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	4618      	mov	r0, r3
 8018a58:	f000 fd17 	bl	801948a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8018a5c:	687d      	ldr	r5, [r7, #4]
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	3364      	adds	r3, #100	; 0x64
 8018a64:	681c      	ldr	r4, [r3, #0]
 8018a66:	f002 fb5d 	bl	801b124 <_ZN8touchgfx11Application11getInstanceEv>
 8018a6a:	4603      	mov	r3, r0
 8018a6c:	4619      	mov	r1, r3
 8018a6e:	4628      	mov	r0, r5
 8018a70:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	490b      	ldr	r1, [pc, #44]	; (8018aa4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7ff ff6e 	bl	8018958 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	2101      	movs	r1, #1
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7ff ff29 	bl	80188d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	3388      	adds	r3, #136	; 0x88
 8018a8e:	681c      	ldr	r4, [r3, #0]
 8018a90:	2300      	movs	r3, #0
 8018a92:	2200      	movs	r2, #0
 8018a94:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8018a98:	47a0      	blx	r4
}
 8018a9a:	bf00      	nop
 8018a9c:	3708      	adds	r7, #8
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	080178ad 	.word	0x080178ad

08018aa8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8018ab0:	2109      	movs	r1, #9
 8018ab2:	205a      	movs	r0, #90	; 0x5a
 8018ab4:	f7ff ffa0 	bl	80189f8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8018ab8:	2109      	movs	r1, #9
 8018aba:	2058      	movs	r0, #88	; 0x58
 8018abc:	f7ff ff9c 	bl	80189f8 <__NVIC_SetPriority>
}
 8018ac0:	bf00      	nop
 8018ac2:	3708      	adds	r7, #8
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}

08018ac8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b082      	sub	sp, #8
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8018ad0:	205a      	movs	r0, #90	; 0x5a
 8018ad2:	f7ff ff4f 	bl	8018974 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8018ad6:	2058      	movs	r0, #88	; 0x58
 8018ad8:	f7ff ff4c 	bl	8018974 <__NVIC_EnableIRQ>
}
 8018adc:	bf00      	nop
 8018ade:	3708      	adds	r7, #8
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}

08018ae4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8018aec:	205a      	movs	r0, #90	; 0x5a
 8018aee:	f7ff ff5f 	bl	80189b0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8018af2:	2058      	movs	r0, #88	; 0x58
 8018af4:	f7ff ff5c 	bl	80189b0 <__NVIC_DisableIRQ>
}
 8018af8:	bf00      	nop
 8018afa:	3708      	adds	r7, #8
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}

08018b00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8018b00:	b480      	push	{r7}
 8018b02:	b083      	sub	sp, #12
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8018b08:	4b11      	ldr	r3, [pc, #68]	; (8018b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018b0a:	68db      	ldr	r3, [r3, #12]
 8018b0c:	b29b      	uxth	r3, r3
 8018b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018b12:	b29b      	uxth	r3, r3
 8018b14:	3b01      	subs	r3, #1
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	4b0e      	ldr	r3, [pc, #56]	; (8018b54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8018b1a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8018b1c:	4b0c      	ldr	r3, [pc, #48]	; (8018b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018b1e:	691b      	ldr	r3, [r3, #16]
 8018b20:	b29b      	uxth	r3, r3
 8018b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018b26:	b29b      	uxth	r3, r3
 8018b28:	3b01      	subs	r3, #1
 8018b2a:	b29a      	uxth	r2, r3
 8018b2c:	4b0a      	ldr	r3, [pc, #40]	; (8018b58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8018b2e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8018b30:	4b08      	ldr	r3, [pc, #32]	; (8018b54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8018b32:	881a      	ldrh	r2, [r3, #0]
 8018b34:	4b06      	ldr	r3, [pc, #24]	; (8018b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018b36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8018b38:	4b05      	ldr	r3, [pc, #20]	; (8018b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b3c:	4a04      	ldr	r2, [pc, #16]	; (8018b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018b3e:	f043 0301 	orr.w	r3, r3, #1
 8018b42:	6353      	str	r3, [r2, #52]	; 0x34
}
 8018b44:	bf00      	nop
 8018b46:	370c      	adds	r7, #12
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4e:	4770      	bx	lr
 8018b50:	50001000 	.word	0x50001000
 8018b54:	20006f02 	.word	0x20006f02
 8018b58:	20006f04 	.word	0x20006f04

08018b5c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b082      	sub	sp, #8
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	4618      	mov	r0, r3
 8018b68:	f000 fc76 	bl	8019458 <_ZN8touchgfx3HAL10beginFrameEv>
 8018b6c:	4603      	mov	r3, r0
}
 8018b6e:	4618      	mov	r0, r3
 8018b70:	3708      	adds	r7, #8
 8018b72:	46bd      	mov	sp, r7
 8018b74:	bd80      	pop	{r7, pc}
	...

08018b78 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b082      	sub	sp, #8
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d002      	beq.n	8018b90 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 8018b8a:	4b05      	ldr	r3, [pc, #20]	; (8018ba0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 8018b8c:	2201      	movs	r2, #1
 8018b8e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	4618      	mov	r0, r3
 8018b94:	f000 fc6c 	bl	8019470 <_ZN8touchgfx3HAL8endFrameEv>
}
 8018b98:	bf00      	nop
 8018b9a:	3708      	adds	r7, #8
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}
 8018ba0:	20006f00 	.word	0x20006f00

08018ba4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8018ba4:	b480      	push	{r7}
 8018ba6:	b083      	sub	sp, #12
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8018bac:	4b03      	ldr	r3, [pc, #12]	; (8018bbc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8018bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	370c      	adds	r7, #12
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bba:	4770      	bx	lr
 8018bbc:	50001084 	.word	0x50001084

08018bc0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8018bc0:	b480      	push	{r7}
 8018bc2:	b083      	sub	sp, #12
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8018bca:	4a06      	ldr	r2, [pc, #24]	; (8018be4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8018bd0:	4b05      	ldr	r3, [pc, #20]	; (8018be8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018bd6:	bf00      	nop
 8018bd8:	370c      	adds	r7, #12
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be0:	4770      	bx	lr
 8018be2:	bf00      	nop
 8018be4:	50001084 	.word	0x50001084
 8018be8:	50001000 	.word	0x50001000

08018bec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b086      	sub	sp, #24
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
 8018bf4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	6839      	ldr	r1, [r7, #0]
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f000 fbf6 	bl	80193ec <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8018c00:	4b25      	ldr	r3, [pc, #148]	; (8018c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8018c02:	695b      	ldr	r3, [r3, #20]
 8018c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	bf14      	ite	ne
 8018c0c:	2301      	movne	r3, #1
 8018c0e:	2300      	moveq	r3, #0
 8018c10:	b2db      	uxtb	r3, r3
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d03c      	beq.n	8018c90 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8018c16:	4b20      	ldr	r3, [pc, #128]	; (8018c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8018c18:	2200      	movs	r2, #0
 8018c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8018c1e:	f3bf 8f4f 	dsb	sy
}
 8018c22:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8018c24:	4b1c      	ldr	r3, [pc, #112]	; (8018c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8018c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018c2a:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	0b5b      	lsrs	r3, r3, #13
 8018c30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018c34:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	08db      	lsrs	r3, r3, #3
 8018c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018c3e:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8018c40:	693b      	ldr	r3, [r7, #16]
 8018c42:	015a      	lsls	r2, r3, #5
 8018c44:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8018c48:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8018c4a:	68fa      	ldr	r2, [r7, #12]
 8018c4c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8018c4e:	4912      	ldr	r1, [pc, #72]	; (8018c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8018c50:	4313      	orrs	r3, r2
 8018c52:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	1e5a      	subs	r2, r3, #1
 8018c5a:	60fa      	str	r2, [r7, #12]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	bf14      	ite	ne
 8018c60:	2301      	movne	r3, #1
 8018c62:	2300      	moveq	r3, #0
 8018c64:	b2db      	uxtb	r3, r3
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d000      	beq.n	8018c6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8018c6a:	e7e9      	b.n	8018c40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8018c6c:	693b      	ldr	r3, [r7, #16]
 8018c6e:	1e5a      	subs	r2, r3, #1
 8018c70:	613a      	str	r2, [r7, #16]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	bf14      	ite	ne
 8018c76:	2301      	movne	r3, #1
 8018c78:	2300      	moveq	r3, #0
 8018c7a:	b2db      	uxtb	r3, r3
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d000      	beq.n	8018c82 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8018c80:	e7d9      	b.n	8018c36 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8018c82:	f3bf 8f4f 	dsb	sy
}
 8018c86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018c88:	f3bf 8f6f 	isb	sy
}
 8018c8c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8018c8e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8018c90:	bf00      	nop
 8018c92:	3718      	adds	r7, #24
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd80      	pop	{r7, pc}
 8018c98:	e000ed00 	.word	0xe000ed00

08018c9c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b084      	sub	sp, #16
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	60b9      	str	r1, [r7, #8]
 8018ca6:	607a      	str	r2, [r7, #4]
 8018ca8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8018caa:	68f8      	ldr	r0, [r7, #12]
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	68b9      	ldr	r1, [r7, #8]
 8018cb2:	f000 fd04 	bl	80196be <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8018cb6:	4603      	mov	r3, r0
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3710      	adds	r7, #16
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}

08018cc0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b085      	sub	sp, #20
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8018cc8:	4b0d      	ldr	r3, [pc, #52]	; (8018d00 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8018cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ccc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8018cce:	4b0c      	ldr	r3, [pc, #48]	; (8018d00 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8018cd0:	68db      	ldr	r3, [r3, #12]
 8018cd2:	b29b      	uxth	r3, r3
 8018cd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018cd8:	b29b      	uxth	r3, r3
 8018cda:	3301      	adds	r3, #1
 8018cdc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8018cde:	89fa      	ldrh	r2, [r7, #14]
 8018ce0:	89bb      	ldrh	r3, [r7, #12]
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d304      	bcc.n	8018cf0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8018ce6:	89fa      	ldrh	r2, [r7, #14]
 8018ce8:	89bb      	ldrh	r3, [r7, #12]
 8018cea:	1ad3      	subs	r3, r2, r3
 8018cec:	b29b      	uxth	r3, r3
 8018cee:	e000      	b.n	8018cf2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8018cf0:	2300      	movs	r3, #0
}
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	3714      	adds	r7, #20
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfc:	4770      	bx	lr
 8018cfe:	bf00      	nop
 8018d00:	50001000 	.word	0x50001000

08018d04 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8018d04:	b480      	push	{r7}
 8018d06:	b087      	sub	sp, #28
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8018d0c:	4b26      	ldr	r3, [pc, #152]	; (8018da8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8018d0e:	695b      	ldr	r3, [r3, #20]
 8018d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	bf14      	ite	ne
 8018d18:	2301      	movne	r3, #1
 8018d1a:	2300      	moveq	r3, #0
 8018d1c:	b2db      	uxtb	r3, r3
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d03c      	beq.n	8018d9c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8018d22:	4b21      	ldr	r3, [pc, #132]	; (8018da8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8018d24:	2200      	movs	r2, #0
 8018d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8018d2a:	f3bf 8f4f 	dsb	sy
}
 8018d2e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8018d30:	4b1d      	ldr	r3, [pc, #116]	; (8018da8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8018d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018d36:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	0b5b      	lsrs	r3, r3, #13
 8018d3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018d40:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8018d42:	697b      	ldr	r3, [r7, #20]
 8018d44:	08db      	lsrs	r3, r3, #3
 8018d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018d4a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8018d4c:	693b      	ldr	r3, [r7, #16]
 8018d4e:	015a      	lsls	r2, r3, #5
 8018d50:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8018d54:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8018d56:	68fa      	ldr	r2, [r7, #12]
 8018d58:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8018d5a:	4913      	ldr	r1, [pc, #76]	; (8018da8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8018d5c:	4313      	orrs	r3, r2
 8018d5e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	1e5a      	subs	r2, r3, #1
 8018d66:	60fa      	str	r2, [r7, #12]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	bf14      	ite	ne
 8018d6c:	2301      	movne	r3, #1
 8018d6e:	2300      	moveq	r3, #0
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d000      	beq.n	8018d78 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8018d76:	e7e9      	b.n	8018d4c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8018d78:	693b      	ldr	r3, [r7, #16]
 8018d7a:	1e5a      	subs	r2, r3, #1
 8018d7c:	613a      	str	r2, [r7, #16]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	bf14      	ite	ne
 8018d82:	2301      	movne	r3, #1
 8018d84:	2300      	moveq	r3, #0
 8018d86:	b2db      	uxtb	r3, r3
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d000      	beq.n	8018d8e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8018d8c:	e7d9      	b.n	8018d42 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8018d8e:	f3bf 8f4f 	dsb	sy
}
 8018d92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018d94:	f3bf 8f6f 	isb	sy
}
 8018d98:	bf00      	nop
}
 8018d9a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8018d9c:	bf00      	nop
 8018d9e:	371c      	adds	r7, #28
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr
 8018da8:	e000ed00 	.word	0xe000ed00

08018dac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8018dac:	b480      	push	{r7}
 8018dae:	b087      	sub	sp, #28
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8018db4:	4b26      	ldr	r3, [pc, #152]	; (8018e50 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8018db6:	695b      	ldr	r3, [r3, #20]
 8018db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	bf14      	ite	ne
 8018dc0:	2301      	movne	r3, #1
 8018dc2:	2300      	moveq	r3, #0
 8018dc4:	b2db      	uxtb	r3, r3
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d03c      	beq.n	8018e44 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8018dca:	4b21      	ldr	r3, [pc, #132]	; (8018e50 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8018dcc:	2200      	movs	r2, #0
 8018dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8018dd2:	f3bf 8f4f 	dsb	sy
}
 8018dd6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8018dd8:	4b1d      	ldr	r3, [pc, #116]	; (8018e50 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8018dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018dde:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8018de0:	697b      	ldr	r3, [r7, #20]
 8018de2:	0b5b      	lsrs	r3, r3, #13
 8018de4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018de8:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8018dea:	697b      	ldr	r3, [r7, #20]
 8018dec:	08db      	lsrs	r3, r3, #3
 8018dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018df2:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8018df4:	693b      	ldr	r3, [r7, #16]
 8018df6:	015a      	lsls	r2, r3, #5
 8018df8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8018dfc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8018dfe:	68fa      	ldr	r2, [r7, #12]
 8018e00:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8018e02:	4913      	ldr	r1, [pc, #76]	; (8018e50 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8018e04:	4313      	orrs	r3, r2
 8018e06:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	1e5a      	subs	r2, r3, #1
 8018e0e:	60fa      	str	r2, [r7, #12]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	bf14      	ite	ne
 8018e14:	2301      	movne	r3, #1
 8018e16:	2300      	moveq	r3, #0
 8018e18:	b2db      	uxtb	r3, r3
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d000      	beq.n	8018e20 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8018e1e:	e7e9      	b.n	8018df4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8018e20:	693b      	ldr	r3, [r7, #16]
 8018e22:	1e5a      	subs	r2, r3, #1
 8018e24:	613a      	str	r2, [r7, #16]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	bf14      	ite	ne
 8018e2a:	2301      	movne	r3, #1
 8018e2c:	2300      	moveq	r3, #0
 8018e2e:	b2db      	uxtb	r3, r3
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d000      	beq.n	8018e36 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8018e34:	e7d9      	b.n	8018dea <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8018e36:	f3bf 8f4f 	dsb	sy
}
 8018e3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018e3c:	f3bf 8f6f 	isb	sy
}
 8018e40:	bf00      	nop
}
 8018e42:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8018e44:	bf00      	nop
 8018e46:	371c      	adds	r7, #28
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4e:	4770      	bx	lr
 8018e50:	e000ed00 	.word	0xe000ed00

08018e54 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8018e5c:	f7fd f84a 	bl	8015ef4 <_ZN8touchgfx3HAL11getInstanceEv>
 8018e60:	4603      	mov	r3, r0
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	bf0c      	ite	eq
 8018e66:	2301      	moveq	r3, #1
 8018e68:	2300      	movne	r3, #0
 8018e6a:	b2db      	uxtb	r3, r3
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d132      	bne.n	8018ed6 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8018e70:	4b1b      	ldr	r3, [pc, #108]	; (8018ee0 <HAL_LTDC_LineEventCallback+0x8c>)
 8018e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e74:	4a1b      	ldr	r2, [pc, #108]	; (8018ee4 <HAL_LTDC_LineEventCallback+0x90>)
 8018e76:	8812      	ldrh	r2, [r2, #0]
 8018e78:	4293      	cmp	r3, r2
 8018e7a:	bf0c      	ite	eq
 8018e7c:	2301      	moveq	r3, #1
 8018e7e:	2300      	movne	r3, #0
 8018e80:	b2db      	uxtb	r3, r3
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d017      	beq.n	8018eb6 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8018e86:	4b18      	ldr	r3, [pc, #96]	; (8018ee8 <HAL_LTDC_LineEventCallback+0x94>)
 8018e88:	881b      	ldrh	r3, [r3, #0]
 8018e8a:	4619      	mov	r1, r3
 8018e8c:	6878      	ldr	r0, [r7, #4]
 8018e8e:	f7ef f93d 	bl	800810c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8018e92:	f7fd f82f 	bl	8015ef4 <_ZN8touchgfx3HAL11getInstanceEv>
 8018e96:	4603      	mov	r3, r0
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7ff fd0b 	bl	80188b4 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8018e9e:	f7fe fcdd 	bl	801785c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8018ea2:	f7fd f827 	bl	8015ef4 <_ZN8touchgfx3HAL11getInstanceEv>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f001 f90f 	bl	801a0cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8018eae:	2000      	movs	r0, #0
 8018eb0:	f7fe fa28 	bl	8017304 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018eb4:	e010      	b.n	8018ed8 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8018eb6:	4b0b      	ldr	r3, [pc, #44]	; (8018ee4 <HAL_LTDC_LineEventCallback+0x90>)
 8018eb8:	881b      	ldrh	r3, [r3, #0]
 8018eba:	4619      	mov	r1, r3
 8018ebc:	6878      	ldr	r0, [r7, #4]
 8018ebe:	f7ef f925 	bl	800810c <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8018ec2:	f7fd f817 	bl	8015ef4 <_ZN8touchgfx3HAL11getInstanceEv>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7ff fce5 	bl	8018898 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8018ece:	2000      	movs	r0, #0
 8018ed0:	f7fe fa23 	bl	801731a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018ed4:	e000      	b.n	8018ed8 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8018ed6:	bf00      	nop
        }
    }
 8018ed8:	3708      	adds	r7, #8
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}
 8018ede:	bf00      	nop
 8018ee0:	50001000 	.word	0x50001000
 8018ee4:	20006f02 	.word	0x20006f02
 8018ee8:	20006f04 	.word	0x20006f04

08018eec <_Z41__static_initialization_and_destruction_0ii>:
}
 8018eec:	b590      	push	{r4, r7, lr}
 8018eee:	b085      	sub	sp, #20
 8018ef0:	af02      	add	r7, sp, #8
 8018ef2:	6078      	str	r0, [r7, #4]
 8018ef4:	6039      	str	r1, [r7, #0]
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2b01      	cmp	r3, #1
 8018efa:	f040 81d3 	bne.w	80192a4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f04:	4293      	cmp	r3, r2
 8018f06:	f040 81cd 	bne.w	80192a4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8018f0a:	4cda      	ldr	r4, [pc, #872]	; (8019274 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	7023      	strb	r3, [r4, #0]
 8018f10:	1ca0      	adds	r0, r4, #2
 8018f12:	2328      	movs	r3, #40	; 0x28
 8018f14:	9300      	str	r3, [sp, #0]
 8018f16:	231a      	movs	r3, #26
 8018f18:	223d      	movs	r2, #61	; 0x3d
 8018f1a:	2107      	movs	r1, #7
 8018f1c:	f7fc ff96 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018f20:	2328      	movs	r3, #40	; 0x28
 8018f22:	8163      	strh	r3, [r4, #10]
 8018f24:	340c      	adds	r4, #12
 8018f26:	2302      	movs	r3, #2
 8018f28:	7023      	strb	r3, [r4, #0]
 8018f2a:	1ca0      	adds	r0, r4, #2
 8018f2c:	2328      	movs	r3, #40	; 0x28
 8018f2e:	9300      	str	r3, [sp, #0]
 8018f30:	231a      	movs	r3, #26
 8018f32:	223d      	movs	r2, #61	; 0x3d
 8018f34:	2123      	movs	r1, #35	; 0x23
 8018f36:	f7fc ff89 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018f3a:	2328      	movs	r3, #40	; 0x28
 8018f3c:	8163      	strh	r3, [r4, #10]
 8018f3e:	340c      	adds	r4, #12
 8018f40:	2303      	movs	r3, #3
 8018f42:	7023      	strb	r3, [r4, #0]
 8018f44:	1ca0      	adds	r0, r4, #2
 8018f46:	2328      	movs	r3, #40	; 0x28
 8018f48:	9300      	str	r3, [sp, #0]
 8018f4a:	231a      	movs	r3, #26
 8018f4c:	223d      	movs	r2, #61	; 0x3d
 8018f4e:	213f      	movs	r1, #63	; 0x3f
 8018f50:	f7fc ff7c 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018f54:	2328      	movs	r3, #40	; 0x28
 8018f56:	8163      	strh	r3, [r4, #10]
 8018f58:	340c      	adds	r4, #12
 8018f5a:	2304      	movs	r3, #4
 8018f5c:	7023      	strb	r3, [r4, #0]
 8018f5e:	1ca0      	adds	r0, r4, #2
 8018f60:	2328      	movs	r3, #40	; 0x28
 8018f62:	9300      	str	r3, [sp, #0]
 8018f64:	231a      	movs	r3, #26
 8018f66:	223d      	movs	r2, #61	; 0x3d
 8018f68:	215b      	movs	r1, #91	; 0x5b
 8018f6a:	f7fc ff6f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018f6e:	2328      	movs	r3, #40	; 0x28
 8018f70:	8163      	strh	r3, [r4, #10]
 8018f72:	340c      	adds	r4, #12
 8018f74:	2305      	movs	r3, #5
 8018f76:	7023      	strb	r3, [r4, #0]
 8018f78:	1ca0      	adds	r0, r4, #2
 8018f7a:	2328      	movs	r3, #40	; 0x28
 8018f7c:	9300      	str	r3, [sp, #0]
 8018f7e:	231a      	movs	r3, #26
 8018f80:	223d      	movs	r2, #61	; 0x3d
 8018f82:	2177      	movs	r1, #119	; 0x77
 8018f84:	f7fc ff62 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018f88:	2328      	movs	r3, #40	; 0x28
 8018f8a:	8163      	strh	r3, [r4, #10]
 8018f8c:	340c      	adds	r4, #12
 8018f8e:	2306      	movs	r3, #6
 8018f90:	7023      	strb	r3, [r4, #0]
 8018f92:	1ca0      	adds	r0, r4, #2
 8018f94:	2328      	movs	r3, #40	; 0x28
 8018f96:	9300      	str	r3, [sp, #0]
 8018f98:	231a      	movs	r3, #26
 8018f9a:	223d      	movs	r2, #61	; 0x3d
 8018f9c:	2193      	movs	r1, #147	; 0x93
 8018f9e:	f7fc ff55 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018fa2:	2328      	movs	r3, #40	; 0x28
 8018fa4:	8163      	strh	r3, [r4, #10]
 8018fa6:	340c      	adds	r4, #12
 8018fa8:	2307      	movs	r3, #7
 8018faa:	7023      	strb	r3, [r4, #0]
 8018fac:	1ca0      	adds	r0, r4, #2
 8018fae:	2328      	movs	r3, #40	; 0x28
 8018fb0:	9300      	str	r3, [sp, #0]
 8018fb2:	231a      	movs	r3, #26
 8018fb4:	223d      	movs	r2, #61	; 0x3d
 8018fb6:	21af      	movs	r1, #175	; 0xaf
 8018fb8:	f7fc ff48 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018fbc:	2328      	movs	r3, #40	; 0x28
 8018fbe:	8163      	strh	r3, [r4, #10]
 8018fc0:	340c      	adds	r4, #12
 8018fc2:	2308      	movs	r3, #8
 8018fc4:	7023      	strb	r3, [r4, #0]
 8018fc6:	1ca0      	adds	r0, r4, #2
 8018fc8:	2328      	movs	r3, #40	; 0x28
 8018fca:	9300      	str	r3, [sp, #0]
 8018fcc:	231a      	movs	r3, #26
 8018fce:	223d      	movs	r2, #61	; 0x3d
 8018fd0:	21cb      	movs	r1, #203	; 0xcb
 8018fd2:	f7fc ff3b 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018fd6:	2328      	movs	r3, #40	; 0x28
 8018fd8:	8163      	strh	r3, [r4, #10]
 8018fda:	340c      	adds	r4, #12
 8018fdc:	2309      	movs	r3, #9
 8018fde:	7023      	strb	r3, [r4, #0]
 8018fe0:	1ca0      	adds	r0, r4, #2
 8018fe2:	2328      	movs	r3, #40	; 0x28
 8018fe4:	9300      	str	r3, [sp, #0]
 8018fe6:	231a      	movs	r3, #26
 8018fe8:	223d      	movs	r2, #61	; 0x3d
 8018fea:	21e7      	movs	r1, #231	; 0xe7
 8018fec:	f7fc ff2e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8018ff0:	2328      	movs	r3, #40	; 0x28
 8018ff2:	8163      	strh	r3, [r4, #10]
 8018ff4:	340c      	adds	r4, #12
 8018ff6:	230a      	movs	r3, #10
 8018ff8:	7023      	strb	r3, [r4, #0]
 8018ffa:	1ca0      	adds	r0, r4, #2
 8018ffc:	2328      	movs	r3, #40	; 0x28
 8018ffe:	9300      	str	r3, [sp, #0]
 8019000:	231a      	movs	r3, #26
 8019002:	223d      	movs	r2, #61	; 0x3d
 8019004:	f240 1103 	movw	r1, #259	; 0x103
 8019008:	f7fc ff20 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801900c:	2328      	movs	r3, #40	; 0x28
 801900e:	8163      	strh	r3, [r4, #10]
 8019010:	340c      	adds	r4, #12
 8019012:	230b      	movs	r3, #11
 8019014:	7023      	strb	r3, [r4, #0]
 8019016:	1ca0      	adds	r0, r4, #2
 8019018:	2328      	movs	r3, #40	; 0x28
 801901a:	9300      	str	r3, [sp, #0]
 801901c:	231a      	movs	r3, #26
 801901e:	223d      	movs	r2, #61	; 0x3d
 8019020:	f240 111f 	movw	r1, #287	; 0x11f
 8019024:	f7fc ff12 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019028:	2328      	movs	r3, #40	; 0x28
 801902a:	8163      	strh	r3, [r4, #10]
 801902c:	340c      	adds	r4, #12
 801902e:	230c      	movs	r3, #12
 8019030:	7023      	strb	r3, [r4, #0]
 8019032:	1ca0      	adds	r0, r4, #2
 8019034:	2328      	movs	r3, #40	; 0x28
 8019036:	9300      	str	r3, [sp, #0]
 8019038:	231a      	movs	r3, #26
 801903a:	2269      	movs	r2, #105	; 0x69
 801903c:	2107      	movs	r1, #7
 801903e:	f7fc ff05 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019042:	2328      	movs	r3, #40	; 0x28
 8019044:	8163      	strh	r3, [r4, #10]
 8019046:	340c      	adds	r4, #12
 8019048:	230d      	movs	r3, #13
 801904a:	7023      	strb	r3, [r4, #0]
 801904c:	1ca0      	adds	r0, r4, #2
 801904e:	2328      	movs	r3, #40	; 0x28
 8019050:	9300      	str	r3, [sp, #0]
 8019052:	231a      	movs	r3, #26
 8019054:	2269      	movs	r2, #105	; 0x69
 8019056:	2123      	movs	r1, #35	; 0x23
 8019058:	f7fc fef8 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801905c:	2328      	movs	r3, #40	; 0x28
 801905e:	8163      	strh	r3, [r4, #10]
 8019060:	340c      	adds	r4, #12
 8019062:	230e      	movs	r3, #14
 8019064:	7023      	strb	r3, [r4, #0]
 8019066:	1ca0      	adds	r0, r4, #2
 8019068:	2328      	movs	r3, #40	; 0x28
 801906a:	9300      	str	r3, [sp, #0]
 801906c:	231a      	movs	r3, #26
 801906e:	2269      	movs	r2, #105	; 0x69
 8019070:	213f      	movs	r1, #63	; 0x3f
 8019072:	f7fc feeb 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019076:	2328      	movs	r3, #40	; 0x28
 8019078:	8163      	strh	r3, [r4, #10]
 801907a:	340c      	adds	r4, #12
 801907c:	230f      	movs	r3, #15
 801907e:	7023      	strb	r3, [r4, #0]
 8019080:	1ca0      	adds	r0, r4, #2
 8019082:	2328      	movs	r3, #40	; 0x28
 8019084:	9300      	str	r3, [sp, #0]
 8019086:	231a      	movs	r3, #26
 8019088:	2269      	movs	r2, #105	; 0x69
 801908a:	215b      	movs	r1, #91	; 0x5b
 801908c:	f7fc fede 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019090:	2328      	movs	r3, #40	; 0x28
 8019092:	8163      	strh	r3, [r4, #10]
 8019094:	340c      	adds	r4, #12
 8019096:	2310      	movs	r3, #16
 8019098:	7023      	strb	r3, [r4, #0]
 801909a:	1ca0      	adds	r0, r4, #2
 801909c:	2328      	movs	r3, #40	; 0x28
 801909e:	9300      	str	r3, [sp, #0]
 80190a0:	231a      	movs	r3, #26
 80190a2:	2269      	movs	r2, #105	; 0x69
 80190a4:	2177      	movs	r1, #119	; 0x77
 80190a6:	f7fc fed1 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80190aa:	2328      	movs	r3, #40	; 0x28
 80190ac:	8163      	strh	r3, [r4, #10]
 80190ae:	340c      	adds	r4, #12
 80190b0:	2311      	movs	r3, #17
 80190b2:	7023      	strb	r3, [r4, #0]
 80190b4:	1ca0      	adds	r0, r4, #2
 80190b6:	2328      	movs	r3, #40	; 0x28
 80190b8:	9300      	str	r3, [sp, #0]
 80190ba:	231a      	movs	r3, #26
 80190bc:	2269      	movs	r2, #105	; 0x69
 80190be:	2193      	movs	r1, #147	; 0x93
 80190c0:	f7fc fec4 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80190c4:	2328      	movs	r3, #40	; 0x28
 80190c6:	8163      	strh	r3, [r4, #10]
 80190c8:	340c      	adds	r4, #12
 80190ca:	2312      	movs	r3, #18
 80190cc:	7023      	strb	r3, [r4, #0]
 80190ce:	1ca0      	adds	r0, r4, #2
 80190d0:	2328      	movs	r3, #40	; 0x28
 80190d2:	9300      	str	r3, [sp, #0]
 80190d4:	231a      	movs	r3, #26
 80190d6:	2269      	movs	r2, #105	; 0x69
 80190d8:	21af      	movs	r1, #175	; 0xaf
 80190da:	f7fc feb7 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80190de:	2328      	movs	r3, #40	; 0x28
 80190e0:	8163      	strh	r3, [r4, #10]
 80190e2:	340c      	adds	r4, #12
 80190e4:	2313      	movs	r3, #19
 80190e6:	7023      	strb	r3, [r4, #0]
 80190e8:	1ca0      	adds	r0, r4, #2
 80190ea:	2328      	movs	r3, #40	; 0x28
 80190ec:	9300      	str	r3, [sp, #0]
 80190ee:	231a      	movs	r3, #26
 80190f0:	2269      	movs	r2, #105	; 0x69
 80190f2:	21cb      	movs	r1, #203	; 0xcb
 80190f4:	f7fc feaa 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80190f8:	2328      	movs	r3, #40	; 0x28
 80190fa:	8163      	strh	r3, [r4, #10]
 80190fc:	340c      	adds	r4, #12
 80190fe:	2314      	movs	r3, #20
 8019100:	7023      	strb	r3, [r4, #0]
 8019102:	1ca0      	adds	r0, r4, #2
 8019104:	2328      	movs	r3, #40	; 0x28
 8019106:	9300      	str	r3, [sp, #0]
 8019108:	231a      	movs	r3, #26
 801910a:	2269      	movs	r2, #105	; 0x69
 801910c:	21e7      	movs	r1, #231	; 0xe7
 801910e:	f7fc fe9d 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019112:	2328      	movs	r3, #40	; 0x28
 8019114:	8163      	strh	r3, [r4, #10]
 8019116:	340c      	adds	r4, #12
 8019118:	2315      	movs	r3, #21
 801911a:	7023      	strb	r3, [r4, #0]
 801911c:	1ca0      	adds	r0, r4, #2
 801911e:	2328      	movs	r3, #40	; 0x28
 8019120:	9300      	str	r3, [sp, #0]
 8019122:	231a      	movs	r3, #26
 8019124:	2269      	movs	r2, #105	; 0x69
 8019126:	f240 1103 	movw	r1, #259	; 0x103
 801912a:	f7fc fe8f 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801912e:	2328      	movs	r3, #40	; 0x28
 8019130:	8163      	strh	r3, [r4, #10]
 8019132:	340c      	adds	r4, #12
 8019134:	2316      	movs	r3, #22
 8019136:	7023      	strb	r3, [r4, #0]
 8019138:	1ca0      	adds	r0, r4, #2
 801913a:	2328      	movs	r3, #40	; 0x28
 801913c:	9300      	str	r3, [sp, #0]
 801913e:	231a      	movs	r3, #26
 8019140:	2269      	movs	r2, #105	; 0x69
 8019142:	f240 111f 	movw	r1, #287	; 0x11f
 8019146:	f7fc fe81 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801914a:	2328      	movs	r3, #40	; 0x28
 801914c:	8163      	strh	r3, [r4, #10]
 801914e:	340c      	adds	r4, #12
 8019150:	2317      	movs	r3, #23
 8019152:	7023      	strb	r3, [r4, #0]
 8019154:	1ca0      	adds	r0, r4, #2
 8019156:	2328      	movs	r3, #40	; 0x28
 8019158:	9300      	str	r3, [sp, #0]
 801915a:	231a      	movs	r3, #26
 801915c:	2295      	movs	r2, #149	; 0x95
 801915e:	213f      	movs	r1, #63	; 0x3f
 8019160:	f7fc fe74 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019164:	2328      	movs	r3, #40	; 0x28
 8019166:	8163      	strh	r3, [r4, #10]
 8019168:	340c      	adds	r4, #12
 801916a:	2318      	movs	r3, #24
 801916c:	7023      	strb	r3, [r4, #0]
 801916e:	1ca0      	adds	r0, r4, #2
 8019170:	2328      	movs	r3, #40	; 0x28
 8019172:	9300      	str	r3, [sp, #0]
 8019174:	231a      	movs	r3, #26
 8019176:	2295      	movs	r2, #149	; 0x95
 8019178:	215b      	movs	r1, #91	; 0x5b
 801917a:	f7fc fe67 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801917e:	2328      	movs	r3, #40	; 0x28
 8019180:	8163      	strh	r3, [r4, #10]
 8019182:	340c      	adds	r4, #12
 8019184:	2319      	movs	r3, #25
 8019186:	7023      	strb	r3, [r4, #0]
 8019188:	1ca0      	adds	r0, r4, #2
 801918a:	2328      	movs	r3, #40	; 0x28
 801918c:	9300      	str	r3, [sp, #0]
 801918e:	231a      	movs	r3, #26
 8019190:	2295      	movs	r2, #149	; 0x95
 8019192:	2177      	movs	r1, #119	; 0x77
 8019194:	f7fc fe5a 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019198:	2328      	movs	r3, #40	; 0x28
 801919a:	8163      	strh	r3, [r4, #10]
 801919c:	340c      	adds	r4, #12
 801919e:	231a      	movs	r3, #26
 80191a0:	7023      	strb	r3, [r4, #0]
 80191a2:	1ca0      	adds	r0, r4, #2
 80191a4:	2328      	movs	r3, #40	; 0x28
 80191a6:	9300      	str	r3, [sp, #0]
 80191a8:	231a      	movs	r3, #26
 80191aa:	2295      	movs	r2, #149	; 0x95
 80191ac:	2193      	movs	r1, #147	; 0x93
 80191ae:	f7fc fe4d 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80191b2:	2328      	movs	r3, #40	; 0x28
 80191b4:	8163      	strh	r3, [r4, #10]
 80191b6:	340c      	adds	r4, #12
 80191b8:	231b      	movs	r3, #27
 80191ba:	7023      	strb	r3, [r4, #0]
 80191bc:	1ca0      	adds	r0, r4, #2
 80191be:	2328      	movs	r3, #40	; 0x28
 80191c0:	9300      	str	r3, [sp, #0]
 80191c2:	231a      	movs	r3, #26
 80191c4:	2295      	movs	r2, #149	; 0x95
 80191c6:	21af      	movs	r1, #175	; 0xaf
 80191c8:	f7fc fe40 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80191cc:	2328      	movs	r3, #40	; 0x28
 80191ce:	8163      	strh	r3, [r4, #10]
 80191d0:	340c      	adds	r4, #12
 80191d2:	231c      	movs	r3, #28
 80191d4:	7023      	strb	r3, [r4, #0]
 80191d6:	1ca0      	adds	r0, r4, #2
 80191d8:	2328      	movs	r3, #40	; 0x28
 80191da:	9300      	str	r3, [sp, #0]
 80191dc:	231a      	movs	r3, #26
 80191de:	2295      	movs	r2, #149	; 0x95
 80191e0:	21cb      	movs	r1, #203	; 0xcb
 80191e2:	f7fc fe33 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 80191e6:	2328      	movs	r3, #40	; 0x28
 80191e8:	8163      	strh	r3, [r4, #10]
 80191ea:	340c      	adds	r4, #12
 80191ec:	231d      	movs	r3, #29
 80191ee:	7023      	strb	r3, [r4, #0]
 80191f0:	1ca0      	adds	r0, r4, #2
 80191f2:	2328      	movs	r3, #40	; 0x28
 80191f4:	9300      	str	r3, [sp, #0]
 80191f6:	231a      	movs	r3, #26
 80191f8:	2295      	movs	r2, #149	; 0x95
 80191fa:	21e7      	movs	r1, #231	; 0xe7
 80191fc:	f7fc fe26 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019200:	2328      	movs	r3, #40	; 0x28
 8019202:	8163      	strh	r3, [r4, #10]
 8019204:	340c      	adds	r4, #12
 8019206:	231e      	movs	r3, #30
 8019208:	7023      	strb	r3, [r4, #0]
 801920a:	1ca0      	adds	r0, r4, #2
 801920c:	2328      	movs	r3, #40	; 0x28
 801920e:	9300      	str	r3, [sp, #0]
 8019210:	23fc      	movs	r3, #252	; 0xfc
 8019212:	22c1      	movs	r2, #193	; 0xc1
 8019214:	213e      	movs	r1, #62	; 0x3e
 8019216:	f7fc fe19 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801921a:	232b      	movs	r3, #43	; 0x2b
 801921c:	8163      	strh	r3, [r4, #10]
};
 801921e:	4c16      	ldr	r4, [pc, #88]	; (8019278 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019220:	4620      	mov	r0, r4
 8019222:	2328      	movs	r3, #40	; 0x28
 8019224:	9300      	str	r3, [sp, #0]
 8019226:	2338      	movs	r3, #56	; 0x38
 8019228:	2295      	movs	r2, #149	; 0x95
 801922a:	2105      	movs	r1, #5
 801922c:	f7fc fe0e 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019230:	2300      	movs	r3, #0
 8019232:	60a3      	str	r3, [r4, #8]
 8019234:	232a      	movs	r3, #42	; 0x2a
 8019236:	81a3      	strh	r3, [r4, #12]
 8019238:	3410      	adds	r4, #16
 801923a:	4620      	mov	r0, r4
 801923c:	2328      	movs	r3, #40	; 0x28
 801923e:	9300      	str	r3, [sp, #0]
 8019240:	2338      	movs	r3, #56	; 0x38
 8019242:	2295      	movs	r2, #149	; 0x95
 8019244:	f44f 7181 	mov.w	r1, #258	; 0x102
 8019248:	f7fc fe00 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801924c:	2300      	movs	r3, #0
 801924e:	60a3      	str	r3, [r4, #8]
 8019250:	2327      	movs	r3, #39	; 0x27
 8019252:	81a3      	strh	r3, [r4, #12]
 8019254:	3410      	adds	r4, #16
 8019256:	4620      	mov	r0, r4
 8019258:	2328      	movs	r3, #40	; 0x28
 801925a:	9300      	str	r3, [sp, #0]
 801925c:	2338      	movs	r3, #56	; 0x38
 801925e:	22c1      	movs	r2, #193	; 0xc1
 8019260:	2105      	movs	r1, #5
 8019262:	f7fc fdf3 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 8019266:	2300      	movs	r3, #0
 8019268:	60a3      	str	r3, [r4, #8]
 801926a:	2329      	movs	r3, #41	; 0x29
 801926c:	81a3      	strh	r3, [r4, #12]
};
 801926e:	2328      	movs	r3, #40	; 0x28
 8019270:	9300      	str	r3, [sp, #0]
 8019272:	e003      	b.n	801927c <_Z41__static_initialization_and_destruction_0ii+0x390>
 8019274:	20006d68 	.word	0x20006d68
 8019278:	20006ed0 	.word	0x20006ed0
 801927c:	f44f 739a 	mov.w	r3, #308	; 0x134
 8019280:	220a      	movs	r2, #10
 8019282:	210f      	movs	r1, #15
 8019284:	480f      	ldr	r0, [pc, #60]	; (80192c4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8019286:	f7fc fde1 	bl	8015e4c <_ZN8touchgfx4RectC1Essss>
 801928a:	2130      	movs	r1, #48	; 0x30
 801928c:	480e      	ldr	r0, [pc, #56]	; (80192c8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 801928e:	f7fc fe1b 	bl	8015ec8 <_ZN8touchgfx9TypedTextC1Et>
 8019292:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019296:	480d      	ldr	r0, [pc, #52]	; (80192cc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8019298:	f7fc fdb2 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
 801929c:	2100      	movs	r1, #0
 801929e:	480c      	ldr	r0, [pc, #48]	; (80192d0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80192a0:	f7fc fdae 	bl	8015e00 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d107      	bne.n	80192ba <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80192b0:	4293      	cmp	r3, r2
 80192b2:	d102      	bne.n	80192ba <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80192b4:	4807      	ldr	r0, [pc, #28]	; (80192d4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80192b6:	f7fc fe45 	bl	8015f44 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 80192ba:	bf00      	nop
 80192bc:	370c      	adds	r7, #12
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd90      	pop	{r4, r7, pc}
 80192c2:	bf00      	nop
 80192c4:	2000011e 	.word	0x2000011e
 80192c8:	20000128 	.word	0x20000128
 80192cc:	20000130 	.word	0x20000130
 80192d0:	20000138 	.word	0x20000138
 80192d4:	2000010c 	.word	0x2000010c

080192d8 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 80192d8:	b580      	push	{r7, lr}
 80192da:	af00      	add	r7, sp, #0
 80192dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80192e0:	2001      	movs	r0, #1
 80192e2:	f7ff fe03 	bl	8018eec <_Z41__static_initialization_and_destruction_0ii>
 80192e6:	bd80      	pop	{r7, pc}

080192e8 <_GLOBAL__sub_D__ZN20TouchGFXGeneratedHAL10initializeEv>:
 80192e8:	b580      	push	{r7, lr}
 80192ea:	af00      	add	r7, sp, #0
 80192ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80192f0:	2000      	movs	r0, #0
 80192f2:	f7ff fdfb 	bl	8018eec <_Z41__static_initialization_and_destruction_0ii>
 80192f6:	bd80      	pop	{r7, pc}

080192f8 <_ZN8touchgfx4RectaNERKS0_>:
 80192f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192fc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8019300:	888c      	ldrh	r4, [r1, #4]
 8019302:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019306:	443c      	add	r4, r7
 8019308:	b2a4      	uxth	r4, r4
 801930a:	fa0f f884 	sxth.w	r8, r4
 801930e:	45c1      	cmp	r9, r8
 8019310:	da2f      	bge.n	8019372 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019312:	8882      	ldrh	r2, [r0, #4]
 8019314:	444a      	add	r2, r9
 8019316:	b292      	uxth	r2, r2
 8019318:	fa0f fe82 	sxth.w	lr, r2
 801931c:	4577      	cmp	r7, lr
 801931e:	da28      	bge.n	8019372 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019320:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019324:	88cb      	ldrh	r3, [r1, #6]
 8019326:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801932a:	442b      	add	r3, r5
 801932c:	b21b      	sxth	r3, r3
 801932e:	429e      	cmp	r6, r3
 8019330:	da1f      	bge.n	8019372 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019332:	88c3      	ldrh	r3, [r0, #6]
 8019334:	4433      	add	r3, r6
 8019336:	b29b      	uxth	r3, r3
 8019338:	fa0f fc83 	sxth.w	ip, r3
 801933c:	4565      	cmp	r5, ip
 801933e:	da18      	bge.n	8019372 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019340:	454f      	cmp	r7, r9
 8019342:	bfb8      	it	lt
 8019344:	464f      	movlt	r7, r9
 8019346:	42b5      	cmp	r5, r6
 8019348:	bfb8      	it	lt
 801934a:	4635      	movlt	r5, r6
 801934c:	45f0      	cmp	r8, lr
 801934e:	bfd8      	it	le
 8019350:	4622      	movle	r2, r4
 8019352:	1bd2      	subs	r2, r2, r7
 8019354:	8082      	strh	r2, [r0, #4]
 8019356:	884a      	ldrh	r2, [r1, #2]
 8019358:	88c9      	ldrh	r1, [r1, #6]
 801935a:	8007      	strh	r7, [r0, #0]
 801935c:	440a      	add	r2, r1
 801935e:	8045      	strh	r5, [r0, #2]
 8019360:	b292      	uxth	r2, r2
 8019362:	b211      	sxth	r1, r2
 8019364:	458c      	cmp	ip, r1
 8019366:	bfa8      	it	ge
 8019368:	4613      	movge	r3, r2
 801936a:	1b5b      	subs	r3, r3, r5
 801936c:	80c3      	strh	r3, [r0, #6]
 801936e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019372:	2300      	movs	r3, #0
 8019374:	8003      	strh	r3, [r0, #0]
 8019376:	8043      	strh	r3, [r0, #2]
 8019378:	8083      	strh	r3, [r0, #4]
 801937a:	80c3      	strh	r3, [r0, #6]
 801937c:	e7f7      	b.n	801936e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801937e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801937e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019382:	2b00      	cmp	r3, #0
 8019384:	dd06      	ble.n	8019394 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8019386:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801938a:	2800      	cmp	r0, #0
 801938c:	bfcc      	ite	gt
 801938e:	2000      	movgt	r0, #0
 8019390:	2001      	movle	r0, #1
 8019392:	4770      	bx	lr
 8019394:	2001      	movs	r0, #1
 8019396:	4770      	bx	lr

08019398 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019398:	2000      	movs	r0, #0
 801939a:	4770      	bx	lr

0801939c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801939c:	2001      	movs	r0, #1
 801939e:	4770      	bx	lr

080193a0 <_ZN8touchgfx9DragEventD1Ev>:
 80193a0:	4770      	bx	lr

080193a2 <_ZN8touchgfx10ClickEventD1Ev>:
 80193a2:	4770      	bx	lr

080193a4 <_ZN8touchgfx10ClickEventD0Ev>:
 80193a4:	b510      	push	{r4, lr}
 80193a6:	4604      	mov	r4, r0
 80193a8:	210c      	movs	r1, #12
 80193aa:	f005 fa41 	bl	801e830 <_ZdlPvj>
 80193ae:	4620      	mov	r0, r4
 80193b0:	bd10      	pop	{r4, pc}

080193b2 <_ZN8touchgfx9DragEventD0Ev>:
 80193b2:	b510      	push	{r4, lr}
 80193b4:	4604      	mov	r4, r0
 80193b6:	2110      	movs	r1, #16
 80193b8:	f005 fa3a 	bl	801e830 <_ZdlPvj>
 80193bc:	4620      	mov	r0, r4
 80193be:	bd10      	pop	{r4, pc}

080193c0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80193c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80193c4:	4770      	bx	lr

080193c6 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80193c6:	4770      	bx	lr

080193c8 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80193c8:	4770      	bx	lr

080193ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80193ca:	6803      	ldr	r3, [r0, #0]
 80193cc:	b513      	push	{r0, r1, r4, lr}
 80193ce:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80193d2:	2300      	movs	r3, #0
 80193d4:	e9cd 3300 	strd	r3, r3, [sp]
 80193d8:	466b      	mov	r3, sp
 80193da:	47a0      	blx	r4
 80193dc:	b002      	add	sp, #8
 80193de:	bd10      	pop	{r4, pc}

080193e0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80193e0:	2301      	movs	r3, #1
 80193e2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80193e6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80193ea:	4770      	bx	lr

080193ec <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80193ec:	2301      	movs	r3, #1
 80193ee:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80193f2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80193f6:	4770      	bx	lr

080193f8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80193f8:	6843      	ldr	r3, [r0, #4]
 80193fa:	2201      	movs	r2, #1
 80193fc:	725a      	strb	r2, [r3, #9]
 80193fe:	6840      	ldr	r0, [r0, #4]
 8019400:	6803      	ldr	r3, [r0, #0]
 8019402:	691b      	ldr	r3, [r3, #16]
 8019404:	4718      	bx	r3

08019406 <_ZN8touchgfx3HAL8flushDMAEv>:
 8019406:	6840      	ldr	r0, [r0, #4]
 8019408:	6803      	ldr	r3, [r0, #0]
 801940a:	689b      	ldr	r3, [r3, #8]
 801940c:	4718      	bx	r3

0801940e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801940e:	b530      	push	{r4, r5, lr}
 8019410:	b08b      	sub	sp, #44	; 0x2c
 8019412:	6804      	ldr	r4, [r0, #0]
 8019414:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8019418:	9509      	str	r5, [sp, #36]	; 0x24
 801941a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801941e:	9508      	str	r5, [sp, #32]
 8019420:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8019424:	9507      	str	r5, [sp, #28]
 8019426:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801942a:	9506      	str	r5, [sp, #24]
 801942c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8019430:	9505      	str	r5, [sp, #20]
 8019432:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8019436:	9504      	str	r5, [sp, #16]
 8019438:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801943c:	9503      	str	r5, [sp, #12]
 801943e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019442:	9502      	str	r5, [sp, #8]
 8019444:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8019448:	e9cd 3500 	strd	r3, r5, [sp]
 801944c:	4613      	mov	r3, r2
 801944e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8019450:	2200      	movs	r2, #0
 8019452:	47a0      	blx	r4
 8019454:	b00b      	add	sp, #44	; 0x2c
 8019456:	bd30      	pop	{r4, r5, pc}

08019458 <_ZN8touchgfx3HAL10beginFrameEv>:
 8019458:	4b04      	ldr	r3, [pc, #16]	; (801946c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	b123      	cbz	r3, 8019468 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801945e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019462:	f080 0001 	eor.w	r0, r0, #1
 8019466:	4770      	bx	lr
 8019468:	2001      	movs	r0, #1
 801946a:	4770      	bx	lr
 801946c:	20006f10 	.word	0x20006f10

08019470 <_ZN8touchgfx3HAL8endFrameEv>:
 8019470:	b510      	push	{r4, lr}
 8019472:	4604      	mov	r4, r0
 8019474:	6840      	ldr	r0, [r0, #4]
 8019476:	6803      	ldr	r3, [r0, #0]
 8019478:	689b      	ldr	r3, [r3, #8]
 801947a:	4798      	blx	r3
 801947c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8019480:	b113      	cbz	r3, 8019488 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019482:	2301      	movs	r3, #1
 8019484:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019488:	bd10      	pop	{r4, pc}

0801948a <_ZN8touchgfx3HAL10initializeEv>:
 801948a:	b510      	push	{r4, lr}
 801948c:	4604      	mov	r4, r0
 801948e:	f7fe f97f 	bl	8017790 <_ZN8touchgfx10OSWrappers10initializeEv>
 8019492:	6860      	ldr	r0, [r4, #4]
 8019494:	6803      	ldr	r3, [r0, #0]
 8019496:	68db      	ldr	r3, [r3, #12]
 8019498:	4798      	blx	r3
 801949a:	68e0      	ldr	r0, [r4, #12]
 801949c:	6803      	ldr	r3, [r0, #0]
 801949e:	689b      	ldr	r3, [r3, #8]
 80194a0:	4798      	blx	r3
 80194a2:	6823      	ldr	r3, [r4, #0]
 80194a4:	4620      	mov	r0, r4
 80194a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194ac:	4718      	bx	r3

080194ae <_ZN8touchgfx3HAL9taskEntryEv>:
 80194ae:	b508      	push	{r3, lr}
 80194b0:	6803      	ldr	r3, [r0, #0]
 80194b2:	4604      	mov	r4, r0
 80194b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80194b8:	4798      	blx	r3
 80194ba:	6823      	ldr	r3, [r4, #0]
 80194bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80194be:	4620      	mov	r0, r4
 80194c0:	4798      	blx	r3
 80194c2:	f7fe f9db 	bl	801787c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80194c6:	6823      	ldr	r3, [r4, #0]
 80194c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194ca:	e7f8      	b.n	80194be <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080194cc <_ZN8touchgfx3HAL4tickEv>:
 80194cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80194ce:	6803      	ldr	r3, [r0, #0]
 80194d0:	4604      	mov	r4, r0
 80194d2:	4d5b      	ldr	r5, [pc, #364]	; (8019640 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80194d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80194d8:	4798      	blx	r3
 80194da:	2800      	cmp	r0, #0
 80194dc:	f000 8095 	beq.w	801960a <_ZN8touchgfx3HAL4tickEv+0x13e>
 80194e0:	2001      	movs	r0, #1
 80194e2:	2600      	movs	r6, #0
 80194e4:	f7fd ff0e 	bl	8017304 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80194e8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80194ec:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80194f0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80194f4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80194f8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80194fc:	b133      	cbz	r3, 801950c <_ZN8touchgfx3HAL4tickEv+0x40>
 80194fe:	6823      	ldr	r3, [r4, #0]
 8019500:	4620      	mov	r0, r4
 8019502:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019506:	4798      	blx	r3
 8019508:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801950c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019510:	2601      	movs	r6, #1
 8019512:	6862      	ldr	r2, [r4, #4]
 8019514:	f083 0301 	eor.w	r3, r3, #1
 8019518:	702e      	strb	r6, [r5, #0]
 801951a:	7253      	strb	r3, [r2, #9]
 801951c:	f001 fe02 	bl	801b124 <_ZN8touchgfx11Application11getInstanceEv>
 8019520:	6803      	ldr	r3, [r0, #0]
 8019522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019524:	4798      	blx	r3
 8019526:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801952a:	b90b      	cbnz	r3, 8019530 <_ZN8touchgfx3HAL4tickEv+0x64>
 801952c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8019530:	f001 fdf8 	bl	801b124 <_ZN8touchgfx11Application11getInstanceEv>
 8019534:	6803      	ldr	r3, [r0, #0]
 8019536:	695b      	ldr	r3, [r3, #20]
 8019538:	4798      	blx	r3
 801953a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801953c:	6803      	ldr	r3, [r0, #0]
 801953e:	691b      	ldr	r3, [r3, #16]
 8019540:	4798      	blx	r3
 8019542:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019546:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801954a:	3b01      	subs	r3, #1
 801954c:	b2db      	uxtb	r3, r3
 801954e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019552:	b10a      	cbz	r2, 8019558 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8019554:	2b00      	cmp	r3, #0
 8019556:	d1eb      	bne.n	8019530 <_ZN8touchgfx3HAL4tickEv+0x64>
 8019558:	4a3a      	ldr	r2, [pc, #232]	; (8019644 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801955a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801955e:	7813      	ldrb	r3, [r2, #0]
 8019560:	3301      	adds	r3, #1
 8019562:	b25b      	sxtb	r3, r3
 8019564:	4299      	cmp	r1, r3
 8019566:	7013      	strb	r3, [r2, #0]
 8019568:	dc10      	bgt.n	801958c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801956a:	2300      	movs	r3, #0
 801956c:	68e0      	ldr	r0, [r4, #12]
 801956e:	a902      	add	r1, sp, #8
 8019570:	7013      	strb	r3, [r2, #0]
 8019572:	aa03      	add	r2, sp, #12
 8019574:	6803      	ldr	r3, [r0, #0]
 8019576:	68db      	ldr	r3, [r3, #12]
 8019578:	4798      	blx	r3
 801957a:	6823      	ldr	r3, [r4, #0]
 801957c:	2800      	cmp	r0, #0
 801957e:	d050      	beq.n	8019622 <_ZN8touchgfx3HAL4tickEv+0x156>
 8019580:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019584:	4620      	mov	r0, r4
 8019586:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801958a:	4798      	blx	r3
 801958c:	2300      	movs	r3, #0
 801958e:	6960      	ldr	r0, [r4, #20]
 8019590:	f88d 3007 	strb.w	r3, [sp, #7]
 8019594:	b158      	cbz	r0, 80195ae <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019596:	6803      	ldr	r3, [r0, #0]
 8019598:	f10d 0107 	add.w	r1, sp, #7
 801959c:	68db      	ldr	r3, [r3, #12]
 801959e:	4798      	blx	r3
 80195a0:	b128      	cbz	r0, 80195ae <_ZN8touchgfx3HAL4tickEv+0xe2>
 80195a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80195a8:	6803      	ldr	r3, [r0, #0]
 80195aa:	68db      	ldr	r3, [r3, #12]
 80195ac:	4798      	blx	r3
 80195ae:	f104 001c 	add.w	r0, r4, #28
 80195b2:	f005 f88d 	bl	801e6d0 <_ZN8touchgfx8Gestures4tickEv>
 80195b6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80195ba:	b30b      	cbz	r3, 8019600 <_ZN8touchgfx3HAL4tickEv+0x134>
 80195bc:	6920      	ldr	r0, [r4, #16]
 80195be:	6803      	ldr	r3, [r0, #0]
 80195c0:	691b      	ldr	r3, [r3, #16]
 80195c2:	4798      	blx	r3
 80195c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80195c6:	4606      	mov	r6, r0
 80195c8:	b903      	cbnz	r3, 80195cc <_ZN8touchgfx3HAL4tickEv+0x100>
 80195ca:	6720      	str	r0, [r4, #112]	; 0x70
 80195cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80195ce:	4a1e      	ldr	r2, [pc, #120]	; (8019648 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80195d0:	1af3      	subs	r3, r6, r3
 80195d2:	4293      	cmp	r3, r2
 80195d4:	d914      	bls.n	8019600 <_ZN8touchgfx3HAL4tickEv+0x134>
 80195d6:	6920      	ldr	r0, [r4, #16]
 80195d8:	6803      	ldr	r3, [r0, #0]
 80195da:	699b      	ldr	r3, [r3, #24]
 80195dc:	4798      	blx	r3
 80195de:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80195e0:	2264      	movs	r2, #100	; 0x64
 80195e2:	1af3      	subs	r3, r6, r3
 80195e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80195e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80195ec:	2800      	cmp	r0, #0
 80195ee:	dc1d      	bgt.n	801962c <_ZN8touchgfx3HAL4tickEv+0x160>
 80195f0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80195f4:	6920      	ldr	r0, [r4, #16]
 80195f6:	2100      	movs	r1, #0
 80195f8:	6803      	ldr	r3, [r0, #0]
 80195fa:	69db      	ldr	r3, [r3, #28]
 80195fc:	4798      	blx	r3
 80195fe:	6726      	str	r6, [r4, #112]	; 0x70
 8019600:	f001 fd90 	bl	801b124 <_ZN8touchgfx11Application11getInstanceEv>
 8019604:	6803      	ldr	r3, [r0, #0]
 8019606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019608:	4798      	blx	r3
 801960a:	6823      	ldr	r3, [r4, #0]
 801960c:	4620      	mov	r0, r4
 801960e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019612:	4798      	blx	r3
 8019614:	2001      	movs	r0, #1
 8019616:	f7fd fe80 	bl	801731a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801961a:	2300      	movs	r3, #0
 801961c:	702b      	strb	r3, [r5, #0]
 801961e:	b004      	add	sp, #16
 8019620:	bd70      	pop	{r4, r5, r6, pc}
 8019622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019626:	4620      	mov	r0, r4
 8019628:	4798      	blx	r3
 801962a:	e7af      	b.n	801958c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801962c:	2863      	cmp	r0, #99	; 0x63
 801962e:	bfcb      	itete	gt
 8019630:	2300      	movgt	r3, #0
 8019632:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8019636:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801963a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801963e:	e7d9      	b.n	80195f4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8019640:	20006f18 	.word	0x20006f18
 8019644:	20006f19 	.word	0x20006f19
 8019648:	05f5e100 	.word	0x05f5e100

0801964c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801964c:	f7fe b8e2 	b.w	8017814 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019650 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019650:	6581      	str	r1, [r0, #88]	; 0x58
 8019652:	301c      	adds	r0, #28
 8019654:	f005 b83a 	b.w	801e6cc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08019658 <_ZN8touchgfx3HAL5touchEll>:
 8019658:	b530      	push	{r4, r5, lr}
 801965a:	b087      	sub	sp, #28
 801965c:	4604      	mov	r4, r0
 801965e:	a804      	add	r0, sp, #16
 8019660:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8019664:	f001 fcb8 	bl	801afd8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8019668:	9b04      	ldr	r3, [sp, #16]
 801966a:	a906      	add	r1, sp, #24
 801966c:	a803      	add	r0, sp, #12
 801966e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019672:	9b05      	ldr	r3, [sp, #20]
 8019674:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8019678:	f001 fd00 	bl	801b07c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801967c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019680:	f104 001c 	add.w	r0, r4, #28
 8019684:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019688:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801968c:	b189      	cbz	r1, 80196b2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801968e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8019692:	9300      	str	r3, [sp, #0]
 8019694:	4613      	mov	r3, r2
 8019696:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801969a:	462a      	mov	r2, r5
 801969c:	f005 f826 	bl	801e6ec <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80196a0:	b128      	cbz	r0, 80196ae <_ZN8touchgfx3HAL5touchEll+0x56>
 80196a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80196a6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80196a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80196ac:	6623      	str	r3, [r4, #96]	; 0x60
 80196ae:	b007      	add	sp, #28
 80196b0:	bd30      	pop	{r4, r5, pc}
 80196b2:	f005 f85b 	bl	801e76c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80196b6:	2301      	movs	r3, #1
 80196b8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80196bc:	e7f1      	b.n	80196a2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080196be <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80196be:	b510      	push	{r4, lr}
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d046      	beq.n	8019752 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80196c4:	ea81 0002 	eor.w	r0, r1, r2
 80196c8:	07c4      	lsls	r4, r0, #31
 80196ca:	d508      	bpl.n	80196de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80196cc:	440b      	add	r3, r1
 80196ce:	3a01      	subs	r2, #1
 80196d0:	428b      	cmp	r3, r1
 80196d2:	d93e      	bls.n	8019752 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80196d4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80196d8:	f801 0b01 	strb.w	r0, [r1], #1
 80196dc:	e7f8      	b.n	80196d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80196de:	07d0      	lsls	r0, r2, #31
 80196e0:	bf42      	ittt	mi
 80196e2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80196e6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80196ea:	f801 0b01 	strbmi.w	r0, [r1], #1
 80196ee:	2b01      	cmp	r3, #1
 80196f0:	d911      	bls.n	8019716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80196f2:	ea81 0402 	eor.w	r4, r1, r2
 80196f6:	4610      	mov	r0, r2
 80196f8:	07a4      	lsls	r4, r4, #30
 80196fa:	d022      	beq.n	8019742 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80196fc:	f023 0401 	bic.w	r4, r3, #1
 8019700:	440c      	add	r4, r1
 8019702:	428c      	cmp	r4, r1
 8019704:	4602      	mov	r2, r0
 8019706:	d904      	bls.n	8019712 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8019708:	8812      	ldrh	r2, [r2, #0]
 801970a:	3002      	adds	r0, #2
 801970c:	f821 2b02 	strh.w	r2, [r1], #2
 8019710:	e7f7      	b.n	8019702 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8019712:	f003 0301 	and.w	r3, r3, #1
 8019716:	f023 0003 	bic.w	r0, r3, #3
 801971a:	4408      	add	r0, r1
 801971c:	4288      	cmp	r0, r1
 801971e:	4614      	mov	r4, r2
 8019720:	d904      	bls.n	801972c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8019722:	6824      	ldr	r4, [r4, #0]
 8019724:	3204      	adds	r2, #4
 8019726:	f841 4b04 	str.w	r4, [r1], #4
 801972a:	e7f7      	b.n	801971c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801972c:	f003 0303 	and.w	r3, r3, #3
 8019730:	3a01      	subs	r2, #1
 8019732:	440b      	add	r3, r1
 8019734:	428b      	cmp	r3, r1
 8019736:	d90c      	bls.n	8019752 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019738:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801973c:	f801 0b01 	strb.w	r0, [r1], #1
 8019740:	e7f8      	b.n	8019734 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8019742:	0790      	lsls	r0, r2, #30
 8019744:	d0e7      	beq.n	8019716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019746:	f832 0b02 	ldrh.w	r0, [r2], #2
 801974a:	3b02      	subs	r3, #2
 801974c:	f821 0b02 	strh.w	r0, [r1], #2
 8019750:	e7e1      	b.n	8019716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019752:	2001      	movs	r0, #1
 8019754:	bd10      	pop	{r4, pc}

08019756 <_ZN8touchgfx3HAL7noTouchEv>:
 8019756:	b510      	push	{r4, lr}
 8019758:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801975c:	4604      	mov	r4, r0
 801975e:	b153      	cbz	r3, 8019776 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019760:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019764:	2101      	movs	r1, #1
 8019766:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801976a:	301c      	adds	r0, #28
 801976c:	f004 fffe 	bl	801e76c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019770:	2300      	movs	r3, #0
 8019772:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019776:	bd10      	pop	{r4, pc}

08019778 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8019778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801977c:	4604      	mov	r4, r0
 801977e:	6980      	ldr	r0, [r0, #24]
 8019780:	b085      	sub	sp, #20
 8019782:	460f      	mov	r7, r1
 8019784:	4690      	mov	r8, r2
 8019786:	4699      	mov	r9, r3
 8019788:	b930      	cbnz	r0, 8019798 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801978a:	4b1c      	ldr	r3, [pc, #112]	; (80197fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 801978c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8019790:	4a1b      	ldr	r2, [pc, #108]	; (8019800 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8019792:	481c      	ldr	r0, [pc, #112]	; (8019804 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8019794:	f005 f87a 	bl	801e88c <__assert_func>
 8019798:	ad04      	add	r5, sp, #16
 801979a:	2600      	movs	r6, #0
 801979c:	f845 6d04 	str.w	r6, [r5, #-4]!
 80197a0:	6806      	ldr	r6, [r0, #0]
 80197a2:	9501      	str	r5, [sp, #4]
 80197a4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80197a8:	9500      	str	r5, [sp, #0]
 80197aa:	6835      	ldr	r5, [r6, #0]
 80197ac:	47a8      	blx	r5
 80197ae:	4d16      	ldr	r5, [pc, #88]	; (8019808 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80197b0:	4606      	mov	r6, r0
 80197b2:	f8a5 9000 	strh.w	r9, [r5]
 80197b6:	f7fc fba9 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 80197ba:	6803      	ldr	r3, [r0, #0]
 80197bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197be:	4798      	blx	r3
 80197c0:	2801      	cmp	r0, #1
 80197c2:	d012      	beq.n	80197ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80197c4:	d306      	bcc.n	80197d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80197c6:	280d      	cmp	r0, #13
 80197c8:	d80b      	bhi.n	80197e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80197ca:	4b10      	ldr	r3, [pc, #64]	; (801980c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80197cc:	f240 115b 	movw	r1, #347	; 0x15b
 80197d0:	4a0b      	ldr	r2, [pc, #44]	; (8019800 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80197d2:	e7de      	b.n	8019792 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80197d4:	882b      	ldrh	r3, [r5, #0]
 80197d6:	fb08 7203 	mla	r2, r8, r3, r7
 80197da:	9b03      	ldr	r3, [sp, #12]
 80197dc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80197e0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80197e2:	4630      	mov	r0, r6
 80197e4:	b005      	add	sp, #20
 80197e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197ea:	882a      	ldrh	r2, [r5, #0]
 80197ec:	9b03      	ldr	r3, [sp, #12]
 80197ee:	fb08 7202 	mla	r2, r8, r2, r7
 80197f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80197f6:	1a9a      	subs	r2, r3, r2
 80197f8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80197fa:	e7f2      	b.n	80197e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80197fc:	080225fa 	.word	0x080225fa
 8019800:	08022993 	.word	0x08022993
 8019804:	0802263f 	.word	0x0802263f
 8019808:	20006f0c 	.word	0x20006f0c
 801980c:	08022665 	.word	0x08022665

08019810 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8019810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019812:	b08b      	sub	sp, #44	; 0x2c
 8019814:	4617      	mov	r7, r2
 8019816:	4604      	mov	r4, r0
 8019818:	460e      	mov	r6, r1
 801981a:	461d      	mov	r5, r3
 801981c:	f7fc fb76 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 8019820:	6803      	ldr	r3, [r0, #0]
 8019822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019824:	4798      	blx	r3
 8019826:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801982a:	9007      	str	r0, [sp, #28]
 801982c:	4631      	mov	r1, r6
 801982e:	6822      	ldr	r2, [r4, #0]
 8019830:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019834:	4b0c      	ldr	r3, [pc, #48]	; (8019868 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8019836:	4620      	mov	r0, r4
 8019838:	881b      	ldrh	r3, [r3, #0]
 801983a:	9306      	str	r3, [sp, #24]
 801983c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019840:	9305      	str	r3, [sp, #20]
 8019842:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019846:	9304      	str	r3, [sp, #16]
 8019848:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801984c:	9303      	str	r3, [sp, #12]
 801984e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019852:	9302      	str	r3, [sp, #8]
 8019854:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019858:	e9cd 5300 	strd	r5, r3, [sp]
 801985c:	463b      	mov	r3, r7
 801985e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8019860:	2200      	movs	r2, #0
 8019862:	47a8      	blx	r5
 8019864:	b00b      	add	sp, #44	; 0x2c
 8019866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019868:	20006f0c 	.word	0x20006f0c

0801986c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801986c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019870:	4698      	mov	r8, r3
 8019872:	6803      	ldr	r3, [r0, #0]
 8019874:	b08b      	sub	sp, #44	; 0x2c
 8019876:	4617      	mov	r7, r2
 8019878:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801987a:	460e      	mov	r6, r1
 801987c:	4b13      	ldr	r3, [pc, #76]	; (80198cc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801987e:	4604      	mov	r4, r0
 8019880:	f8b3 9000 	ldrh.w	r9, [r3]
 8019884:	f7fc fb42 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 8019888:	6803      	ldr	r3, [r0, #0]
 801988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801988c:	4798      	blx	r3
 801988e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019892:	2200      	movs	r2, #0
 8019894:	4631      	mov	r1, r6
 8019896:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801989a:	2302      	movs	r3, #2
 801989c:	4620      	mov	r0, r4
 801989e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80198a2:	2301      	movs	r3, #1
 80198a4:	9305      	str	r3, [sp, #20]
 80198a6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80198aa:	9304      	str	r3, [sp, #16]
 80198ac:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80198b0:	9303      	str	r3, [sp, #12]
 80198b2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80198b6:	9302      	str	r3, [sp, #8]
 80198b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80198bc:	e9cd 8300 	strd	r8, r3, [sp]
 80198c0:	463b      	mov	r3, r7
 80198c2:	47a8      	blx	r5
 80198c4:	b00b      	add	sp, #44	; 0x2c
 80198c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198ca:	bf00      	nop
 80198cc:	20006f0c 	.word	0x20006f0c

080198d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80198d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198d4:	4698      	mov	r8, r3
 80198d6:	6803      	ldr	r3, [r0, #0]
 80198d8:	b087      	sub	sp, #28
 80198da:	460e      	mov	r6, r1
 80198dc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80198de:	4617      	mov	r7, r2
 80198e0:	4b0f      	ldr	r3, [pc, #60]	; (8019920 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80198e2:	4604      	mov	r4, r0
 80198e4:	f8b3 9000 	ldrh.w	r9, [r3]
 80198e8:	f7fc fb10 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 80198ec:	6803      	ldr	r3, [r0, #0]
 80198ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198f0:	4798      	blx	r3
 80198f2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80198f6:	463a      	mov	r2, r7
 80198f8:	4631      	mov	r1, r6
 80198fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80198fe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8019902:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019906:	4620      	mov	r0, r4
 8019908:	9302      	str	r3, [sp, #8]
 801990a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801990e:	9301      	str	r3, [sp, #4]
 8019910:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019914:	9300      	str	r3, [sp, #0]
 8019916:	4643      	mov	r3, r8
 8019918:	47a8      	blx	r5
 801991a:	b007      	add	sp, #28
 801991c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019920:	20006f0c 	.word	0x20006f0c

08019924 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019928:	4604      	mov	r4, r0
 801992a:	b08f      	sub	sp, #60	; 0x3c
 801992c:	4610      	mov	r0, r2
 801992e:	460d      	mov	r5, r1
 8019930:	4691      	mov	r9, r2
 8019932:	461e      	mov	r6, r3
 8019934:	f002 fd36 	bl	801c3a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019938:	2800      	cmp	r0, #0
 801993a:	f000 809c 	beq.w	8019a76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 801993e:	6823      	ldr	r3, [r4, #0]
 8019940:	4620      	mov	r0, r4
 8019942:	f8df b194 	ldr.w	fp, [pc, #404]	; 8019ad8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8019946:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801994c:	4798      	blx	r3
 801994e:	6823      	ldr	r3, [r4, #0]
 8019950:	4620      	mov	r0, r4
 8019952:	f8df a188 	ldr.w	sl, [pc, #392]	; 8019adc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8019956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019958:	4798      	blx	r3
 801995a:	f8bb 3000 	ldrh.w	r3, [fp]
 801995e:	4f5b      	ldr	r7, [pc, #364]	; (8019acc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8019960:	9301      	str	r3, [sp, #4]
 8019962:	f8ba 3000 	ldrh.w	r3, [sl]
 8019966:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801996a:	4640      	mov	r0, r8
 801996c:	9302      	str	r3, [sp, #8]
 801996e:	883b      	ldrh	r3, [r7, #0]
 8019970:	9303      	str	r3, [sp, #12]
 8019972:	4b57      	ldr	r3, [pc, #348]	; (8019ad0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019974:	881a      	ldrh	r2, [r3, #0]
 8019976:	9305      	str	r3, [sp, #20]
 8019978:	9204      	str	r2, [sp, #16]
 801997a:	f002 fd1f 	bl	801c3bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801997e:	8038      	strh	r0, [r7, #0]
 8019980:	4640      	mov	r0, r8
 8019982:	f002 fd5f 	bl	801c444 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019986:	9b05      	ldr	r3, [sp, #20]
 8019988:	8018      	strh	r0, [r3, #0]
 801998a:	4b52      	ldr	r3, [pc, #328]	; (8019ad4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801998c:	781b      	ldrb	r3, [r3, #0]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d174      	bne.n	8019a7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8019992:	883b      	ldrh	r3, [r7, #0]
 8019994:	f8aa 0000 	strh.w	r0, [sl]
 8019998:	f8ab 3000 	strh.w	r3, [fp]
 801999c:	4648      	mov	r0, r9
 801999e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80199a2:	f002 fcff 	bl	801c3a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80199a6:	2200      	movs	r2, #0
 80199a8:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80199ac:	4611      	mov	r1, r2
 80199ae:	4628      	mov	r0, r5
 80199b0:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80199b4:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80199b8:	f7fc fa68 	bl	8015e8c <_ZN8touchgfx8Drawable5setXYEss>
 80199bc:	2301      	movs	r3, #1
 80199be:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80199c2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80199c6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	dd5c      	ble.n	8019a88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80199ce:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	dd58      	ble.n	8019a88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80199d6:	462a      	mov	r2, r5
 80199d8:	ab0a      	add	r3, sp, #40	; 0x28
 80199da:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80199de:	6851      	ldr	r1, [r2, #4]
 80199e0:	c303      	stmia	r3!, {r0, r1}
 80199e2:	4631      	mov	r1, r6
 80199e4:	a80a      	add	r0, sp, #40	; 0x28
 80199e6:	f7ff fc87 	bl	80192f8 <_ZN8touchgfx4RectaNERKS0_>
 80199ea:	4b38      	ldr	r3, [pc, #224]	; (8019acc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80199ec:	2100      	movs	r1, #0
 80199ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80199f2:	4b37      	ldr	r3, [pc, #220]	; (8019ad0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80199f4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80199f8:	aa0a      	add	r2, sp, #40	; 0x28
 80199fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199fe:	910c      	str	r1, [sp, #48]	; 0x30
 8019a00:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019a04:	ab08      	add	r3, sp, #32
 8019a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	a90c      	add	r1, sp, #48	; 0x30
 8019a12:	f7ff fc71 	bl	80192f8 <_ZN8touchgfx4RectaNERKS0_>
 8019a16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d13c      	bne.n	8019a96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8019a1c:	2000      	movs	r0, #0
 8019a1e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8019a22:	2600      	movs	r6, #0
 8019a24:	696b      	ldr	r3, [r5, #20]
 8019a26:	a908      	add	r1, sp, #32
 8019a28:	682a      	ldr	r2, [r5, #0]
 8019a2a:	4628      	mov	r0, r5
 8019a2c:	9305      	str	r3, [sp, #20]
 8019a2e:	616e      	str	r6, [r5, #20]
 8019a30:	6892      	ldr	r2, [r2, #8]
 8019a32:	4790      	blx	r2
 8019a34:	9b05      	ldr	r3, [sp, #20]
 8019a36:	4652      	mov	r2, sl
 8019a38:	4649      	mov	r1, r9
 8019a3a:	616b      	str	r3, [r5, #20]
 8019a3c:	4628      	mov	r0, r5
 8019a3e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8019a42:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8019a46:	f7fc fa21 	bl	8015e8c <_ZN8touchgfx8Drawable5setXYEss>
 8019a4a:	9a01      	ldr	r2, [sp, #4]
 8019a4c:	4b22      	ldr	r3, [pc, #136]	; (8019ad8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8019a4e:	4620      	mov	r0, r4
 8019a50:	801a      	strh	r2, [r3, #0]
 8019a52:	9a02      	ldr	r2, [sp, #8]
 8019a54:	4b21      	ldr	r3, [pc, #132]	; (8019adc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8019a56:	801a      	strh	r2, [r3, #0]
 8019a58:	9a03      	ldr	r2, [sp, #12]
 8019a5a:	4b1c      	ldr	r3, [pc, #112]	; (8019acc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8019a5c:	801a      	strh	r2, [r3, #0]
 8019a5e:	4b1c      	ldr	r3, [pc, #112]	; (8019ad0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019a60:	9a04      	ldr	r2, [sp, #16]
 8019a62:	801a      	strh	r2, [r3, #0]
 8019a64:	6823      	ldr	r3, [r4, #0]
 8019a66:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8019a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a6c:	4798      	blx	r3
 8019a6e:	6823      	ldr	r3, [r4, #0]
 8019a70:	4620      	mov	r0, r4
 8019a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a74:	4798      	blx	r3
 8019a76:	b00f      	add	sp, #60	; 0x3c
 8019a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a7c:	883b      	ldrh	r3, [r7, #0]
 8019a7e:	f8ab 0000 	strh.w	r0, [fp]
 8019a82:	f8aa 3000 	strh.w	r3, [sl]
 8019a86:	e789      	b.n	801999c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8019a88:	462a      	mov	r2, r5
 8019a8a:	ab0a      	add	r3, sp, #40	; 0x28
 8019a8c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019a90:	6851      	ldr	r1, [r2, #4]
 8019a92:	c303      	stmia	r3!, {r0, r1}
 8019a94:	e7a9      	b.n	80199ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8019a96:	a807      	add	r0, sp, #28
 8019a98:	f002 fe36 	bl	801c708 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019a9c:	4606      	mov	r6, r0
 8019a9e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019aa0:	6803      	ldr	r3, [r0, #0]
 8019aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aa4:	4798      	blx	r3
 8019aa6:	4286      	cmp	r6, r0
 8019aa8:	d1b8      	bne.n	8019a1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8019aaa:	f7fc fa2f 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 8019aae:	6803      	ldr	r3, [r0, #0]
 8019ab0:	4606      	mov	r6, r0
 8019ab2:	a807      	add	r0, sp, #28
 8019ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ab6:	9305      	str	r3, [sp, #20]
 8019ab8:	f002 fe26 	bl	801c708 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019abc:	9b05      	ldr	r3, [sp, #20]
 8019abe:	4601      	mov	r1, r0
 8019ac0:	4630      	mov	r0, r6
 8019ac2:	4798      	blx	r3
 8019ac4:	f080 0001 	eor.w	r0, r0, #1
 8019ac8:	b2c0      	uxtb	r0, r0
 8019aca:	e7a8      	b.n	8019a1e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8019acc:	20006f06 	.word	0x20006f06
 8019ad0:	20006f08 	.word	0x20006f08
 8019ad4:	20006f0a 	.word	0x20006f0a
 8019ad8:	20006f0c 	.word	0x20006f0c
 8019adc:	20006f0e 	.word	0x20006f0e

08019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019ae0:	4b07      	ldr	r3, [pc, #28]	; (8019b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8019ae2:	b510      	push	{r4, lr}
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	4604      	mov	r4, r0
 8019ae8:	b13b      	cbz	r3, 8019afa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019aea:	6803      	ldr	r3, [r0, #0]
 8019aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019aee:	4798      	blx	r3
 8019af0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019af2:	4283      	cmp	r3, r0
 8019af4:	d101      	bne.n	8019afa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019af6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019af8:	bd10      	pop	{r4, pc}
 8019afa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019afc:	e7fc      	b.n	8019af8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8019afe:	bf00      	nop
 8019b00:	20006f10 	.word	0x20006f10

08019b04 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8019b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b08:	b08a      	sub	sp, #40	; 0x28
 8019b0a:	4692      	mov	sl, r2
 8019b0c:	461d      	mov	r5, r3
 8019b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b12:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 8019b16:	2400      	movs	r4, #0
 8019b18:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8019b1c:	4606      	mov	r6, r0
 8019b1e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8019b22:	fb09 a505 	mla	r5, r9, r5, sl
 8019b26:	9404      	str	r4, [sp, #16]
 8019b28:	f8ad 8018 	strh.w	r8, [sp, #24]
 8019b2c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019b30:	f88d 4020 	strb.w	r4, [sp, #32]
 8019b34:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019b38:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019b3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019b40:	f7ff ffce 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019b44:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019b48:	f8ad 901e 	strh.w	r9, [sp, #30]
 8019b4c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019b50:	9505      	str	r5, [sp, #20]
 8019b52:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8019b56:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8019b5a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8019b5e:	f1b8 0f00 	cmp.w	r8, #0
 8019b62:	d000      	beq.n	8019b66 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8019b64:	b937      	cbnz	r7, 8019b74 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 8019b66:	4b0d      	ldr	r3, [pc, #52]	; (8019b9c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8019b68:	f240 2102 	movw	r1, #514	; 0x202
 8019b6c:	4a0c      	ldr	r2, [pc, #48]	; (8019ba0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8019b6e:	480d      	ldr	r0, [pc, #52]	; (8019ba4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8019b70:	f004 fe8c 	bl	801e88c <__assert_func>
 8019b74:	6833      	ldr	r3, [r6, #0]
 8019b76:	4630      	mov	r0, r6
 8019b78:	9c01      	ldr	r4, [sp, #4]
 8019b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b7c:	4798      	blx	r3
 8019b7e:	4220      	tst	r0, r4
 8019b80:	d104      	bne.n	8019b8c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 8019b82:	4b09      	ldr	r3, [pc, #36]	; (8019ba8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 8019b84:	f240 2103 	movw	r1, #515	; 0x203
 8019b88:	4a05      	ldr	r2, [pc, #20]	; (8019ba0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8019b8a:	e7f0      	b.n	8019b6e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 8019b8c:	6870      	ldr	r0, [r6, #4]
 8019b8e:	a901      	add	r1, sp, #4
 8019b90:	6803      	ldr	r3, [r0, #0]
 8019b92:	685b      	ldr	r3, [r3, #4]
 8019b94:	4798      	blx	r3
 8019b96:	b00a      	add	sp, #40	; 0x28
 8019b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b9c:	08022494 	.word	0x08022494
 8019ba0:	080227c8 	.word	0x080227c8
 8019ba4:	0802263f 	.word	0x0802263f
 8019ba8:	080224cc 	.word	0x080224cc

08019bac <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8019bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb0:	b08b      	sub	sp, #44	; 0x2c
 8019bb2:	4693      	mov	fp, r2
 8019bb4:	461d      	mov	r5, r3
 8019bb6:	2400      	movs	r4, #0
 8019bb8:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 8019bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019bc0:	468a      	mov	sl, r1
 8019bc2:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 8019bc6:	fb09 b505 	mla	r5, r9, r5, fp
 8019bca:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 8019bce:	4606      	mov	r6, r0
 8019bd0:	9404      	str	r4, [sp, #16]
 8019bd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019bd6:	f7ff ff83 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019bda:	f8ad 8018 	strh.w	r8, [sp, #24]
 8019bde:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019be2:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019be6:	f8ad 401c 	strh.w	r4, [sp, #28]
 8019bea:	9505      	str	r5, [sp, #20]
 8019bec:	f8ad 901e 	strh.w	r9, [sp, #30]
 8019bf0:	f8cd a010 	str.w	sl, [sp, #16]
 8019bf4:	f8ad 4020 	strh.w	r4, [sp, #32]
 8019bf8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019bfc:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8019c00:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8019c04:	f1b8 0f00 	cmp.w	r8, #0
 8019c08:	d000      	beq.n	8019c0c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8019c0a:	b937      	cbnz	r7, 8019c1a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 8019c0c:	4b0d      	ldr	r3, [pc, #52]	; (8019c44 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8019c0e:	f240 2119 	movw	r1, #537	; 0x219
 8019c12:	4a0d      	ldr	r2, [pc, #52]	; (8019c48 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8019c14:	480d      	ldr	r0, [pc, #52]	; (8019c4c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8019c16:	f004 fe39 	bl	801e88c <__assert_func>
 8019c1a:	6833      	ldr	r3, [r6, #0]
 8019c1c:	4630      	mov	r0, r6
 8019c1e:	9c01      	ldr	r4, [sp, #4]
 8019c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c22:	4798      	blx	r3
 8019c24:	4220      	tst	r0, r4
 8019c26:	d104      	bne.n	8019c32 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 8019c28:	4b09      	ldr	r3, [pc, #36]	; (8019c50 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 8019c2a:	f240 211a 	movw	r1, #538	; 0x21a
 8019c2e:	4a06      	ldr	r2, [pc, #24]	; (8019c48 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8019c30:	e7f0      	b.n	8019c14 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 8019c32:	6870      	ldr	r0, [r6, #4]
 8019c34:	a901      	add	r1, sp, #4
 8019c36:	6803      	ldr	r3, [r0, #0]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	4798      	blx	r3
 8019c3c:	b00b      	add	sp, #44	; 0x2c
 8019c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c42:	bf00      	nop
 8019c44:	08022511 	.word	0x08022511
 8019c48:	0802283e 	.word	0x0802283e
 8019c4c:	0802263f 	.word	0x0802263f
 8019c50:	08022549 	.word	0x08022549

08019c54 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8019c54:	b508      	push	{r3, lr}
 8019c56:	290d      	cmp	r1, #13
 8019c58:	d817      	bhi.n	8019c8a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8019c5a:	e8df f001 	tbb	[pc, r1]
 8019c5e:	090b      	.short	0x090b
 8019c60:	0d0d0d07 	.word	0x0d0d0d07
 8019c64:	1414140d 	.word	0x1414140d
 8019c68:	0d0d1414 	.word	0x0d0d1414
 8019c6c:	2020      	movs	r0, #32
 8019c6e:	bd08      	pop	{r3, pc}
 8019c70:	2018      	movs	r0, #24
 8019c72:	e7fc      	b.n	8019c6e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019c74:	2010      	movs	r0, #16
 8019c76:	e7fa      	b.n	8019c6e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019c78:	4b05      	ldr	r3, [pc, #20]	; (8019c90 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8019c7a:	f240 2183 	movw	r1, #643	; 0x283
 8019c7e:	4a05      	ldr	r2, [pc, #20]	; (8019c94 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8019c80:	4805      	ldr	r0, [pc, #20]	; (8019c98 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8019c82:	f004 fe03 	bl	801e88c <__assert_func>
 8019c86:	2008      	movs	r0, #8
 8019c88:	e7f1      	b.n	8019c6e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019c8a:	2000      	movs	r0, #0
 8019c8c:	e7ef      	b.n	8019c6e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019c8e:	bf00      	nop
 8019c90:	080226bb 	.word	0x080226bb
 8019c94:	08022b69 	.word	0x08022b69
 8019c98:	0802263f 	.word	0x0802263f

08019c9c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8019c9c:	b570      	push	{r4, r5, r6, lr}
 8019c9e:	460d      	mov	r5, r1
 8019ca0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8019ca4:	4616      	mov	r6, r2
 8019ca6:	461c      	mov	r4, r3
 8019ca8:	f7ff ffd4 	bl	8019c54 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8019cac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8019cb0:	10c0      	asrs	r0, r0, #3
 8019cb2:	fb06 5101 	mla	r1, r6, r1, r5
 8019cb6:	fb00 4001 	mla	r0, r0, r1, r4
 8019cba:	bd70      	pop	{r4, r5, r6, pc}

08019cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8019cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cc0:	b08c      	sub	sp, #48	; 0x30
 8019cc2:	f04f 0c00 	mov.w	ip, #0
 8019cc6:	4604      	mov	r4, r0
 8019cc8:	469a      	mov	sl, r3
 8019cca:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 8019cce:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 8019cd2:	2d0b      	cmp	r5, #11
 8019cd4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 8019cd8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8019cdc:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8019ce0:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 8019ce4:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8019ce8:	f8cd c018 	str.w	ip, [sp, #24]
 8019cec:	d130      	bne.n	8019d50 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 8019cee:	2080      	movs	r0, #128	; 0x80
 8019cf0:	9205      	str	r2, [sp, #20]
 8019cf2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8019cf6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019cfa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019cfe:	f8ad 7020 	strh.w	r7, [sp, #32]
 8019d02:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 8019d06:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	f7ff fee8 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019d10:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8019d14:	4603      	mov	r3, r0
 8019d16:	4651      	mov	r1, sl
 8019d18:	4620      	mov	r0, r4
 8019d1a:	e9cd 9800 	strd	r9, r8, [sp]
 8019d1e:	f7ff ffbd 	bl	8019c9c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019d22:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8019d26:	9007      	str	r0, [sp, #28]
 8019d28:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 8019d32:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8019d36:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 8019d3a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8019d3e:	b107      	cbz	r7, 8019d42 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 8019d40:	b9d6      	cbnz	r6, 8019d78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 8019d42:	4b17      	ldr	r3, [pc, #92]	; (8019da0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8019d44:	f240 11c9 	movw	r1, #457	; 0x1c9
 8019d48:	4a16      	ldr	r2, [pc, #88]	; (8019da4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8019d4a:	4817      	ldr	r0, [pc, #92]	; (8019da8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8019d4c:	f004 fd9e 	bl	801e88c <__assert_func>
 8019d50:	2d02      	cmp	r5, #2
 8019d52:	d108      	bne.n	8019d66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8019d54:	2bff      	cmp	r3, #255	; 0xff
 8019d56:	d104      	bne.n	8019d62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	bf14      	ite	ne
 8019d5c:	2040      	movne	r0, #64	; 0x40
 8019d5e:	2020      	moveq	r0, #32
 8019d60:	e7c6      	b.n	8019cf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8019d62:	2040      	movs	r0, #64	; 0x40
 8019d64:	e7c4      	b.n	8019cf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8019d66:	2bff      	cmp	r3, #255	; 0xff
 8019d68:	d104      	bne.n	8019d74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 8019d6a:	2800      	cmp	r0, #0
 8019d6c:	bf14      	ite	ne
 8019d6e:	2004      	movne	r0, #4
 8019d70:	2001      	moveq	r0, #1
 8019d72:	e7bd      	b.n	8019cf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8019d74:	2004      	movs	r0, #4
 8019d76:	e7bb      	b.n	8019cf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8019d78:	6823      	ldr	r3, [r4, #0]
 8019d7a:	4620      	mov	r0, r4
 8019d7c:	9d03      	ldr	r5, [sp, #12]
 8019d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d80:	4798      	blx	r3
 8019d82:	4228      	tst	r0, r5
 8019d84:	d104      	bne.n	8019d90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 8019d86:	4b09      	ldr	r3, [pc, #36]	; (8019dac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 8019d88:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8019d8c:	4a05      	ldr	r2, [pc, #20]	; (8019da4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8019d8e:	e7dc      	b.n	8019d4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8019d90:	6860      	ldr	r0, [r4, #4]
 8019d92:	a903      	add	r1, sp, #12
 8019d94:	6803      	ldr	r3, [r0, #0]
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	4798      	blx	r3
 8019d9a:	b00c      	add	sp, #48	; 0x30
 8019d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019da0:	08022494 	.word	0x08022494
 8019da4:	080229f7 	.word	0x080229f7
 8019da8:	0802263f 	.word	0x0802263f
 8019dac:	080224cc 	.word	0x080224cc

08019db0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8019db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019db4:	b08d      	sub	sp, #52	; 0x34
 8019db6:	469b      	mov	fp, r3
 8019db8:	2500      	movs	r5, #0
 8019dba:	4604      	mov	r4, r0
 8019dbc:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 8019dc0:	4692      	mov	sl, r2
 8019dc2:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8019dc6:	4689      	mov	r9, r1
 8019dc8:	2fff      	cmp	r7, #255	; 0xff
 8019dca:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8019dce:	9506      	str	r5, [sp, #24]
 8019dd0:	bf14      	ite	ne
 8019dd2:	2308      	movne	r3, #8
 8019dd4:	2302      	moveq	r3, #2
 8019dd6:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8019dda:	f7ff fe81 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019dde:	465a      	mov	r2, fp
 8019de0:	4603      	mov	r3, r0
 8019de2:	4651      	mov	r1, sl
 8019de4:	4620      	mov	r0, r4
 8019de6:	e9cd 8600 	strd	r8, r6, [sp]
 8019dea:	f7ff ff57 	bl	8019c9c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019dee:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8019df2:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8019df6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019dfa:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8019dfe:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8019e02:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019e06:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8019e0a:	9d03      	ldr	r5, [sp, #12]
 8019e0c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8019e10:	6823      	ldr	r3, [r4, #0]
 8019e12:	9007      	str	r0, [sp, #28]
 8019e14:	4620      	mov	r0, r4
 8019e16:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8019e1a:	f8cd 9018 	str.w	r9, [sp, #24]
 8019e1e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8019e22:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8019e26:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8019e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e2c:	4798      	blx	r3
 8019e2e:	4228      	tst	r0, r5
 8019e30:	d106      	bne.n	8019e40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 8019e32:	4b07      	ldr	r3, [pc, #28]	; (8019e50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8019e34:	f44f 710c 	mov.w	r1, #560	; 0x230
 8019e38:	4a06      	ldr	r2, [pc, #24]	; (8019e54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8019e3a:	4807      	ldr	r0, [pc, #28]	; (8019e58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 8019e3c:	f004 fd26 	bl	801e88c <__assert_func>
 8019e40:	6860      	ldr	r0, [r4, #4]
 8019e42:	a903      	add	r1, sp, #12
 8019e44:	6803      	ldr	r3, [r0, #0]
 8019e46:	685b      	ldr	r3, [r3, #4]
 8019e48:	4798      	blx	r3
 8019e4a:	b00d      	add	sp, #52	; 0x34
 8019e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e50:	080224cc 	.word	0x080224cc
 8019e54:	08022ace 	.word	0x08022ace
 8019e58:	0802263f 	.word	0x0802263f

08019e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019e5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019e60:	461f      	mov	r7, r3
 8019e62:	4b0b      	ldr	r3, [pc, #44]	; (8019e90 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019e64:	460d      	mov	r5, r1
 8019e66:	4616      	mov	r6, r2
 8019e68:	f8b3 8000 	ldrh.w	r8, [r3]
 8019e6c:	4604      	mov	r4, r0
 8019e6e:	f7fc f84d 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 8019e72:	6803      	ldr	r3, [r0, #0]
 8019e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e76:	4798      	blx	r3
 8019e78:	463b      	mov	r3, r7
 8019e7a:	4632      	mov	r2, r6
 8019e7c:	4629      	mov	r1, r5
 8019e7e:	e9cd 8000 	strd	r8, r0, [sp]
 8019e82:	4620      	mov	r0, r4
 8019e84:	f7ff ff0a 	bl	8019c9c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019e88:	b002      	add	sp, #8
 8019e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e8e:	bf00      	nop
 8019e90:	20006f0c 	.word	0x20006f0c

08019e94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8019e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e98:	b08b      	sub	sp, #44	; 0x2c
 8019e9a:	4699      	mov	r9, r3
 8019e9c:	4690      	mov	r8, r2
 8019e9e:	4604      	mov	r4, r0
 8019ea0:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8019ea4:	2500      	movs	r5, #0
 8019ea6:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8019eaa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8019eae:	9504      	str	r5, [sp, #16]
 8019eb0:	f8ad 7018 	strh.w	r7, [sp, #24]
 8019eb4:	f8ad 601a 	strh.w	r6, [sp, #26]
 8019eb8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019ebc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019ec0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019ec4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019ec8:	f88d 3020 	strb.w	r3, [sp, #32]
 8019ecc:	f7ff fe08 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019ed0:	464a      	mov	r2, r9
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	4641      	mov	r1, r8
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f7ff ffc0 	bl	8019e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019edc:	4b19      	ldr	r3, [pc, #100]	; (8019f44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8019ede:	9005      	str	r0, [sp, #20]
 8019ee0:	881b      	ldrh	r3, [r3, #0]
 8019ee2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019ee6:	f7fc f811 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 8019eea:	6803      	ldr	r3, [r0, #0]
 8019eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019eee:	4798      	blx	r3
 8019ef0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8019ef4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019ef8:	b107      	cbz	r7, 8019efc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8019efa:	b936      	cbnz	r6, 8019f0a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8019efc:	4b12      	ldr	r3, [pc, #72]	; (8019f48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8019efe:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8019f02:	4a12      	ldr	r2, [pc, #72]	; (8019f4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8019f04:	4812      	ldr	r0, [pc, #72]	; (8019f50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8019f06:	f004 fcc1 	bl	801e88c <__assert_func>
 8019f0a:	6823      	ldr	r3, [r4, #0]
 8019f0c:	4620      	mov	r0, r4
 8019f0e:	9e01      	ldr	r6, [sp, #4]
 8019f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f12:	4798      	blx	r3
 8019f14:	4230      	tst	r0, r6
 8019f16:	d104      	bne.n	8019f22 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8019f18:	4b0e      	ldr	r3, [pc, #56]	; (8019f54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 8019f1a:	f240 11e7 	movw	r1, #487	; 0x1e7
 8019f1e:	4a0b      	ldr	r2, [pc, #44]	; (8019f4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8019f20:	e7f0      	b.n	8019f04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8019f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f24:	a901      	add	r1, sp, #4
 8019f26:	6860      	ldr	r0, [r4, #4]
 8019f28:	9304      	str	r3, [sp, #16]
 8019f2a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8019f2e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8019f32:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8019f36:	6803      	ldr	r3, [r0, #0]
 8019f38:	685b      	ldr	r3, [r3, #4]
 8019f3a:	4798      	blx	r3
 8019f3c:	b00b      	add	sp, #44	; 0x2c
 8019f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f42:	bf00      	nop
 8019f44:	20006f0c 	.word	0x20006f0c
 8019f48:	08022494 	.word	0x08022494
 8019f4c:	080228a3 	.word	0x080228a3
 8019f50:	0802263f 	.word	0x0802263f
 8019f54:	080224cc 	.word	0x080224cc

08019f58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f5a:	b08d      	sub	sp, #52	; 0x34
 8019f5c:	4604      	mov	r4, r0
 8019f5e:	466b      	mov	r3, sp
 8019f60:	e883 0006 	stmia.w	r3, {r1, r2}
 8019f64:	4b21      	ldr	r3, [pc, #132]	; (8019fec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019f66:	781b      	ldrb	r3, [r3, #0]
 8019f68:	b933      	cbnz	r3, 8019f78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019f6a:	4b21      	ldr	r3, [pc, #132]	; (8019ff0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8019f6c:	f240 2141 	movw	r1, #577	; 0x241
 8019f70:	4a20      	ldr	r2, [pc, #128]	; (8019ff4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8019f72:	4821      	ldr	r0, [pc, #132]	; (8019ff8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8019f74:	f004 fc8a 	bl	801e88c <__assert_func>
 8019f78:	2300      	movs	r3, #0
 8019f7a:	2501      	movs	r5, #1
 8019f7c:	f8bd 6000 	ldrh.w	r6, [sp]
 8019f80:	9306      	str	r3, [sp, #24]
 8019f82:	6803      	ldr	r3, [r0, #0]
 8019f84:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019f88:	9503      	str	r5, [sp, #12]
 8019f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f8c:	4798      	blx	r3
 8019f8e:	463a      	mov	r2, r7
 8019f90:	4631      	mov	r1, r6
 8019f92:	4603      	mov	r3, r0
 8019f94:	4620      	mov	r0, r4
 8019f96:	f7ff ff61 	bl	8019e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019f9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019f9c:	9004      	str	r0, [sp, #16]
 8019f9e:	9307      	str	r3, [sp, #28]
 8019fa0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019fa4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019fa8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019fac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019fb0:	4b12      	ldr	r3, [pc, #72]	; (8019ffc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 8019fb2:	881b      	ldrh	r3, [r3, #0]
 8019fb4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019fb8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019fbc:	f7fb ffa6 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 8019fc0:	6803      	ldr	r3, [r0, #0]
 8019fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fc4:	4798      	blx	r3
 8019fc6:	23ff      	movs	r3, #255	; 0xff
 8019fc8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8019fcc:	a903      	add	r1, sp, #12
 8019fce:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019fd2:	6860      	ldr	r0, [r4, #4]
 8019fd4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019fd8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019fdc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8019fe0:	6803      	ldr	r3, [r0, #0]
 8019fe2:	685b      	ldr	r3, [r3, #4]
 8019fe4:	4798      	blx	r3
 8019fe6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019fe8:	b00d      	add	sp, #52	; 0x34
 8019fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fec:	20006f11 	.word	0x20006f11
 8019ff0:	08022593 	.word	0x08022593
 8019ff4:	0802294d 	.word	0x0802294d
 8019ff8:	0802263f 	.word	0x0802263f
 8019ffc:	20006f0c 	.word	0x20006f0c

0801a000 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a004:	b08c      	sub	sp, #48	; 0x30
 801a006:	461e      	mov	r6, r3
 801a008:	2300      	movs	r3, #0
 801a00a:	4604      	mov	r4, r0
 801a00c:	466d      	mov	r5, sp
 801a00e:	9306      	str	r3, [sp, #24]
 801a010:	6803      	ldr	r3, [r0, #0]
 801a012:	e885 0006 	stmia.w	r5, {r1, r2}
 801a016:	2501      	movs	r5, #1
 801a018:	f8bd 7000 	ldrh.w	r7, [sp]
 801a01c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801a020:	9503      	str	r5, [sp, #12]
 801a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a024:	4798      	blx	r3
 801a026:	4642      	mov	r2, r8
 801a028:	4639      	mov	r1, r7
 801a02a:	4603      	mov	r3, r0
 801a02c:	4620      	mov	r0, r4
 801a02e:	f7ff ff15 	bl	8019e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a032:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a036:	9004      	str	r0, [sp, #16]
 801a038:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a03c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a040:	9607      	str	r6, [sp, #28]
 801a042:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a046:	4b10      	ldr	r3, [pc, #64]	; (801a088 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801a048:	881b      	ldrh	r3, [r3, #0]
 801a04a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a04e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a050:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a054:	f7fb ff5a 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 801a058:	6803      	ldr	r3, [r0, #0]
 801a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a05c:	4798      	blx	r3
 801a05e:	23ff      	movs	r3, #255	; 0xff
 801a060:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a064:	a903      	add	r1, sp, #12
 801a066:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a06a:	6860      	ldr	r0, [r4, #4]
 801a06c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a070:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a074:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a078:	6803      	ldr	r3, [r0, #0]
 801a07a:	685b      	ldr	r3, [r3, #4]
 801a07c:	4798      	blx	r3
 801a07e:	4630      	mov	r0, r6
 801a080:	b00c      	add	sp, #48	; 0x30
 801a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a086:	bf00      	nop
 801a088:	20006f0c 	.word	0x20006f0c

0801a08c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801a08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a08e:	b085      	sub	sp, #20
 801a090:	4605      	mov	r5, r0
 801a092:	ac02      	add	r4, sp, #8
 801a094:	e884 0006 	stmia.w	r4, {r1, r2}
 801a098:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801a09c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801a0a0:	f7ff fd1e 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a0a4:	4631      	mov	r1, r6
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	463a      	mov	r2, r7
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	f7ff fed6 	bl	8019e5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a0b0:	4a05      	ldr	r2, [pc, #20]	; (801a0c8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801a0b2:	682b      	ldr	r3, [r5, #0]
 801a0b4:	8812      	ldrh	r2, [r2, #0]
 801a0b6:	9200      	str	r2, [sp, #0]
 801a0b8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	4628      	mov	r0, r5
 801a0be:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a0c2:	47b0      	blx	r6
 801a0c4:	b005      	add	sp, #20
 801a0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0c8:	20006f0c 	.word	0x20006f0c

0801a0cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801a0cc:	b570      	push	{r4, r5, r6, lr}
 801a0ce:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801a0d2:	4604      	mov	r4, r0
 801a0d4:	b19b      	cbz	r3, 801a0fe <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801a0d6:	2002      	movs	r0, #2
 801a0d8:	f7fd f92a 	bl	8017330 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801a0dc:	2300      	movs	r3, #0
 801a0de:	4620      	mov	r0, r4
 801a0e0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a0e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801a0e8:	6823      	ldr	r3, [r4, #0]
 801a0ea:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801a0ee:	f7ff fcf7 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a0f2:	4601      	mov	r1, r0
 801a0f4:	4620      	mov	r0, r4
 801a0f6:	462b      	mov	r3, r5
 801a0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0fc:	4718      	bx	r3
 801a0fe:	bd70      	pop	{r4, r5, r6, pc}

0801a100 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801a100:	b538      	push	{r3, r4, r5, lr}
 801a102:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801a106:	4604      	mov	r4, r0
 801a108:	460d      	mov	r5, r1
 801a10a:	428b      	cmp	r3, r1
 801a10c:	d006      	beq.n	801a11c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801a10e:	6803      	ldr	r3, [r0, #0]
 801a110:	b929      	cbnz	r1, 801a11e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801a112:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a116:	4798      	blx	r3
 801a118:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801a11c:	bd38      	pop	{r3, r4, r5, pc}
 801a11e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a122:	e7f8      	b.n	801a116 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801a124 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801a124:	4b0d      	ldr	r3, [pc, #52]	; (801a15c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801a126:	b510      	push	{r4, lr}
 801a128:	781b      	ldrb	r3, [r3, #0]
 801a12a:	4604      	mov	r4, r0
 801a12c:	b95b      	cbnz	r3, 801a146 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a12e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801a132:	2b02      	cmp	r3, #2
 801a134:	d007      	beq.n	801a146 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a136:	6840      	ldr	r0, [r0, #4]
 801a138:	f000 f938 	bl	801a3ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801a13c:	b118      	cbz	r0, 801a146 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a13e:	6862      	ldr	r2, [r4, #4]
 801a140:	7a53      	ldrb	r3, [r2, #9]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d0fc      	beq.n	801a140 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801a146:	f7fd fb57 	bl	80177f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a14a:	4620      	mov	r0, r4
 801a14c:	2100      	movs	r1, #0
 801a14e:	f7ff ffd7 	bl	801a100 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a152:	4620      	mov	r0, r4
 801a154:	f7ff fcc4 	bl	8019ae0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a158:	bd10      	pop	{r4, pc}
 801a15a:	bf00      	nop
 801a15c:	20006f10 	.word	0x20006f10

0801a160 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801a160:	4770      	bx	lr

0801a162 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801a162:	2000      	movs	r0, #0
 801a164:	4770      	bx	lr

0801a166 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801a166:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801a16a:	1a13      	subs	r3, r2, r0
 801a16c:	4258      	negs	r0, r3
 801a16e:	4158      	adcs	r0, r3
 801a170:	4770      	bx	lr

0801a172 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801a172:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801a176:	1a9b      	subs	r3, r3, r2
 801a178:	2b00      	cmp	r3, #0
 801a17a:	bfdc      	itt	le
 801a17c:	6882      	ldrle	r2, [r0, #8]
 801a17e:	189b      	addle	r3, r3, r2
 801a180:	2b01      	cmp	r3, #1
 801a182:	bfcc      	ite	gt
 801a184:	2000      	movgt	r0, #0
 801a186:	2001      	movle	r0, #1
 801a188:	4770      	bx	lr

0801a18a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801a18a:	6902      	ldr	r2, [r0, #16]
 801a18c:	6843      	ldr	r3, [r0, #4]
 801a18e:	2024      	movs	r0, #36	; 0x24
 801a190:	fb00 3002 	mla	r0, r0, r2, r3
 801a194:	4770      	bx	lr

0801a196 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801a196:	6803      	ldr	r3, [r0, #0]
 801a198:	691b      	ldr	r3, [r3, #16]
 801a19a:	4718      	bx	r3

0801a19c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801a19c:	4770      	bx	lr

0801a19e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801a19e:	4770      	bx	lr

0801a1a0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	b570      	push	{r4, r5, r6, lr}
 801a1a4:	7203      	strb	r3, [r0, #8]
 801a1a6:	4604      	mov	r4, r0
 801a1a8:	6840      	ldr	r0, [r0, #4]
 801a1aa:	6803      	ldr	r3, [r0, #0]
 801a1ac:	699b      	ldr	r3, [r3, #24]
 801a1ae:	4798      	blx	r3
 801a1b0:	6803      	ldr	r3, [r0, #0]
 801a1b2:	4605      	mov	r5, r0
 801a1b4:	2b40      	cmp	r3, #64	; 0x40
 801a1b6:	d039      	beq.n	801a22c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a1b8:	d815      	bhi.n	801a1e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801a1ba:	2b04      	cmp	r3, #4
 801a1bc:	d022      	beq.n	801a204 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801a1be:	d808      	bhi.n	801a1d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a1c0:	2b01      	cmp	r3, #1
 801a1c2:	d033      	beq.n	801a22c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a1c4:	2b02      	cmp	r3, #2
 801a1c6:	d108      	bne.n	801a1da <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 801a1c8:	6823      	ldr	r3, [r4, #0]
 801a1ca:	4620      	mov	r0, r4
 801a1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1ce:	4798      	blx	r3
 801a1d0:	e025      	b.n	801a21e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801a1d2:	2b08      	cmp	r3, #8
 801a1d4:	d01e      	beq.n	801a214 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801a1d6:	2b20      	cmp	r3, #32
 801a1d8:	d028      	beq.n	801a22c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a1da:	4b17      	ldr	r3, [pc, #92]	; (801a238 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801a1dc:	2188      	movs	r1, #136	; 0x88
 801a1de:	4a17      	ldr	r2, [pc, #92]	; (801a23c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 801a1e0:	4817      	ldr	r0, [pc, #92]	; (801a240 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801a1e2:	f004 fb53 	bl	801e88c <__assert_func>
 801a1e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1ea:	d01f      	beq.n	801a22c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a1ec:	d804      	bhi.n	801a1f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801a1ee:	2b80      	cmp	r3, #128	; 0x80
 801a1f0:	d01c      	beq.n	801a22c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a1f6:	e7ef      	b.n	801a1d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 801a1f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a1fc:	d016      	beq.n	801a22c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801a1fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a202:	e7e0      	b.n	801a1c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801a204:	6823      	ldr	r3, [r4, #0]
 801a206:	7f01      	ldrb	r1, [r0, #28]
 801a208:	4620      	mov	r0, r4
 801a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a20c:	4798      	blx	r3
 801a20e:	6823      	ldr	r3, [r4, #0]
 801a210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a212:	e006      	b.n	801a222 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801a214:	6823      	ldr	r3, [r4, #0]
 801a216:	7f01      	ldrb	r1, [r0, #28]
 801a218:	4620      	mov	r0, r4
 801a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a21c:	4798      	blx	r3
 801a21e:	6823      	ldr	r3, [r4, #0]
 801a220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a222:	4629      	mov	r1, r5
 801a224:	4620      	mov	r0, r4
 801a226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a22a:	4718      	bx	r3
 801a22c:	6823      	ldr	r3, [r4, #0]
 801a22e:	4620      	mov	r0, r4
 801a230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a232:	4798      	blx	r3
 801a234:	e7eb      	b.n	801a20e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801a236:	bf00      	nop
 801a238:	08022bb2 	.word	0x08022bb2
 801a23c:	08022cc4 	.word	0x08022cc4
 801a240:	08022bd7 	.word	0x08022bd7

0801a244 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801a244:	b570      	push	{r4, r5, r6, lr}
 801a246:	4604      	mov	r4, r0
 801a248:	460e      	mov	r6, r1
 801a24a:	6860      	ldr	r0, [r4, #4]
 801a24c:	6803      	ldr	r3, [r0, #0]
 801a24e:	685b      	ldr	r3, [r3, #4]
 801a250:	4798      	blx	r3
 801a252:	2800      	cmp	r0, #0
 801a254:	d1f9      	bne.n	801a24a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801a256:	4d0d      	ldr	r5, [pc, #52]	; (801a28c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801a258:	6828      	ldr	r0, [r5, #0]
 801a25a:	6803      	ldr	r3, [r0, #0]
 801a25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a25e:	4798      	blx	r3
 801a260:	f7fd fae4 	bl	801782c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801a264:	6828      	ldr	r0, [r5, #0]
 801a266:	2101      	movs	r1, #1
 801a268:	f7ff ff4a 	bl	801a100 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a26c:	6860      	ldr	r0, [r4, #4]
 801a26e:	4631      	mov	r1, r6
 801a270:	6803      	ldr	r3, [r0, #0]
 801a272:	689b      	ldr	r3, [r3, #8]
 801a274:	4798      	blx	r3
 801a276:	6823      	ldr	r3, [r4, #0]
 801a278:	4620      	mov	r0, r4
 801a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a27c:	4798      	blx	r3
 801a27e:	6828      	ldr	r0, [r5, #0]
 801a280:	6803      	ldr	r3, [r0, #0]
 801a282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a288:	4718      	bx	r3
 801a28a:	bf00      	nop
 801a28c:	20006f14 	.word	0x20006f14

0801a290 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801a290:	b508      	push	{r3, lr}
 801a292:	f7fd fab1 	bl	80177f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a29a:	f7fd babb 	b.w	8017814 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a29e <_ZN8touchgfx13DMA_Interface5startEv>:
 801a29e:	b510      	push	{r4, lr}
 801a2a0:	4604      	mov	r4, r0
 801a2a2:	6840      	ldr	r0, [r0, #4]
 801a2a4:	6803      	ldr	r3, [r0, #0]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	4798      	blx	r3
 801a2aa:	b948      	cbnz	r0, 801a2c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a2ac:	7a63      	ldrb	r3, [r4, #9]
 801a2ae:	b13b      	cbz	r3, 801a2c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a2b0:	7a23      	ldrb	r3, [r4, #8]
 801a2b2:	b92b      	cbnz	r3, 801a2c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a2b4:	6823      	ldr	r3, [r4, #0]
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2be:	4718      	bx	r3
 801a2c0:	bd10      	pop	{r4, pc}
	...

0801a2c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801a2c4:	b510      	push	{r4, lr}
 801a2c6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801a2ca:	1ad2      	subs	r2, r2, r3
 801a2cc:	2a00      	cmp	r2, #0
 801a2ce:	bfdc      	itt	le
 801a2d0:	6884      	ldrle	r4, [r0, #8]
 801a2d2:	1912      	addle	r2, r2, r4
 801a2d4:	2a01      	cmp	r2, #1
 801a2d6:	dd17      	ble.n	801a308 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801a2d8:	6842      	ldr	r2, [r0, #4]
 801a2da:	2424      	movs	r4, #36	; 0x24
 801a2dc:	fb04 2303 	mla	r3, r4, r3, r2
 801a2e0:	f101 0220 	add.w	r2, r1, #32
 801a2e4:	f851 4b04 	ldr.w	r4, [r1], #4
 801a2e8:	4291      	cmp	r1, r2
 801a2ea:	f843 4b04 	str.w	r4, [r3], #4
 801a2ee:	d1f9      	bne.n	801a2e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801a2f0:	780a      	ldrb	r2, [r1, #0]
 801a2f2:	701a      	strb	r2, [r3, #0]
 801a2f4:	68c3      	ldr	r3, [r0, #12]
 801a2f6:	6882      	ldr	r2, [r0, #8]
 801a2f8:	f3bf 8f5b 	dmb	ish
 801a2fc:	3301      	adds	r3, #1
 801a2fe:	429a      	cmp	r2, r3
 801a300:	bfd8      	it	le
 801a302:	1a9b      	suble	r3, r3, r2
 801a304:	60c3      	str	r3, [r0, #12]
 801a306:	bd10      	pop	{r4, pc}
 801a308:	4b02      	ldr	r3, [pc, #8]	; (801a314 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801a30a:	2136      	movs	r1, #54	; 0x36
 801a30c:	4a02      	ldr	r2, [pc, #8]	; (801a318 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801a30e:	4803      	ldr	r0, [pc, #12]	; (801a31c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801a310:	f004 fabc 	bl	801e88c <__assert_func>
 801a314:	08022bfd 	.word	0x08022bfd
 801a318:	08022cf4 	.word	0x08022cf4
 801a31c:	08022bd7 	.word	0x08022bd7

0801a320 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801a320:	b510      	push	{r4, lr}
 801a322:	6803      	ldr	r3, [r0, #0]
 801a324:	4604      	mov	r4, r0
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	4798      	blx	r3
 801a32a:	b128      	cbz	r0, 801a338 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801a32c:	4b07      	ldr	r3, [pc, #28]	; (801a34c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801a32e:	213c      	movs	r1, #60	; 0x3c
 801a330:	4a07      	ldr	r2, [pc, #28]	; (801a350 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801a332:	4808      	ldr	r0, [pc, #32]	; (801a354 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801a334:	f004 faaa 	bl	801e88c <__assert_func>
 801a338:	6923      	ldr	r3, [r4, #16]
 801a33a:	68a2      	ldr	r2, [r4, #8]
 801a33c:	f3bf 8f5b 	dmb	ish
 801a340:	3301      	adds	r3, #1
 801a342:	429a      	cmp	r2, r3
 801a344:	bfd8      	it	le
 801a346:	1a9b      	suble	r3, r3, r2
 801a348:	6123      	str	r3, [r4, #16]
 801a34a:	bd10      	pop	{r4, pc}
 801a34c:	08022c20 	.word	0x08022c20
 801a350:	08022d42 	.word	0x08022d42
 801a354:	08022bd7 	.word	0x08022bd7

0801a358 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801a358:	b570      	push	{r4, r5, r6, lr}
 801a35a:	4604      	mov	r4, r0
 801a35c:	6840      	ldr	r0, [r0, #4]
 801a35e:	6803      	ldr	r3, [r0, #0]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	4798      	blx	r3
 801a364:	4605      	mov	r5, r0
 801a366:	b930      	cbnz	r0, 801a376 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a368:	7a23      	ldrb	r3, [r4, #8]
 801a36a:	b123      	cbz	r3, 801a376 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a36c:	6860      	ldr	r0, [r4, #4]
 801a36e:	6803      	ldr	r3, [r0, #0]
 801a370:	695b      	ldr	r3, [r3, #20]
 801a372:	4798      	blx	r3
 801a374:	7225      	strb	r5, [r4, #8]
 801a376:	6860      	ldr	r0, [r4, #4]
 801a378:	6803      	ldr	r3, [r0, #0]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	4798      	blx	r3
 801a37e:	b928      	cbnz	r0, 801a38c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801a380:	6823      	ldr	r3, [r4, #0]
 801a382:	4620      	mov	r0, r4
 801a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a38a:	4718      	bx	r3
 801a38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a390:	f7fd ba58 	b.w	8017844 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801a394 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801a394:	b510      	push	{r4, lr}
 801a396:	6082      	str	r2, [r0, #8]
 801a398:	2200      	movs	r2, #0
 801a39a:	4c03      	ldr	r4, [pc, #12]	; (801a3a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801a39c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a3a0:	e9c0 4100 	strd	r4, r1, [r0]
 801a3a4:	bd10      	pop	{r4, pc}
 801a3a6:	bf00      	nop
 801a3a8:	08022ca8 	.word	0x08022ca8

0801a3ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801a3ac:	6840      	ldr	r0, [r0, #4]
 801a3ae:	6803      	ldr	r3, [r0, #0]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	4718      	bx	r3

0801a3b4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a3b4:	b510      	push	{r4, lr}
 801a3b6:	6803      	ldr	r3, [r0, #0]
 801a3b8:	460c      	mov	r4, r1
 801a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3bc:	4798      	blx	r3
 801a3be:	1b03      	subs	r3, r0, r4
 801a3c0:	4258      	negs	r0, r3
 801a3c2:	4158      	adcs	r0, r3
 801a3c4:	bd10      	pop	{r4, pc}
	...

0801a3c8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a3c8:	4b01      	ldr	r3, [pc, #4]	; (801a3d0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a3ca:	6019      	str	r1, [r3, #0]
 801a3cc:	4770      	bx	lr
 801a3ce:	bf00      	nop
 801a3d0:	20006f1c 	.word	0x20006f1c

0801a3d4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d8:	4696      	mov	lr, r2
 801a3da:	b097      	sub	sp, #92	; 0x5c
 801a3dc:	4605      	mov	r5, r0
 801a3de:	4614      	mov	r4, r2
 801a3e0:	460e      	mov	r6, r1
 801a3e2:	461f      	mov	r7, r3
 801a3e4:	f10d 0c1c 	add.w	ip, sp, #28
 801a3e8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a3ec:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a3f0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a3f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a3f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3fc:	f8de 3000 	ldr.w	r3, [lr]
 801a400:	f104 0e14 	add.w	lr, r4, #20
 801a404:	f8cc 3000 	str.w	r3, [ip]
 801a408:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a40c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a410:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a414:	f8de 3000 	ldr.w	r3, [lr]
 801a418:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a41c:	f8cc 3000 	str.w	r3, [ip]
 801a420:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a424:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a428:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a42c:	f8de 3000 	ldr.w	r3, [lr]
 801a430:	4631      	mov	r1, r6
 801a432:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a434:	4628      	mov	r0, r5
 801a436:	f8cc 3000 	str.w	r3, [ip]
 801a43a:	682b      	ldr	r3, [r5, #0]
 801a43c:	9201      	str	r2, [sp, #4]
 801a43e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a440:	f8cd 8008 	str.w	r8, [sp, #8]
 801a444:	9200      	str	r2, [sp, #0]
 801a446:	aa07      	add	r2, sp, #28
 801a448:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a44c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a450:	463b      	mov	r3, r7
 801a452:	47d8      	blx	fp
 801a454:	46a6      	mov	lr, r4
 801a456:	f10d 0c1c 	add.w	ip, sp, #28
 801a45a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a45e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a462:	f8de 3000 	ldr.w	r3, [lr]
 801a466:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a46a:	343c      	adds	r4, #60	; 0x3c
 801a46c:	f8cc 3000 	str.w	r3, [ip]
 801a470:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a474:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a47c:	f8de 3000 	ldr.w	r3, [lr]
 801a480:	f8cc 3000 	str.w	r3, [ip]
 801a484:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a48a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a48e:	6823      	ldr	r3, [r4, #0]
 801a490:	4631      	mov	r1, r6
 801a492:	4628      	mov	r0, r5
 801a494:	f8cc 3000 	str.w	r3, [ip]
 801a498:	682b      	ldr	r3, [r5, #0]
 801a49a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a49e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a4a0:	f8cd 8008 	str.w	r8, [sp, #8]
 801a4a4:	9201      	str	r2, [sp, #4]
 801a4a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a4a8:	9200      	str	r2, [sp, #0]
 801a4aa:	aa07      	add	r2, sp, #28
 801a4ac:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a4ae:	463b      	mov	r3, r7
 801a4b0:	47a0      	blx	r4
 801a4b2:	b017      	add	sp, #92	; 0x5c
 801a4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a4b8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a4b8:	2000      	movs	r0, #0
 801a4ba:	4770      	bx	lr

0801a4bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4c0:	b08d      	sub	sp, #52	; 0x34
 801a4c2:	4688      	mov	r8, r1
 801a4c4:	f8d3 c000 	ldr.w	ip, [r3]
 801a4c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a4ca:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a4ce:	680f      	ldr	r7, [r1, #0]
 801a4d0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a4d4:	eba7 070c 	sub.w	r7, r7, ip
 801a4d8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a4dc:	edd3 6a07 	vldr	s13, [r3, #28]
 801a4e0:	42bc      	cmp	r4, r7
 801a4e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a4e4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a4e8:	bfa8      	it	ge
 801a4ea:	463c      	movge	r4, r7
 801a4ec:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a4f0:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a4f4:	ee07 4a90 	vmov	s15, r4
 801a4f8:	eb09 0e0c 	add.w	lr, r9, ip
 801a4fc:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a500:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a504:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a508:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a50c:	4571      	cmp	r1, lr
 801a50e:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a512:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a516:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a51a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a51e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a522:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a526:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a52a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a52e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a532:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a536:	f340 808c 	ble.w	801a652 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a53a:	eba1 060e 	sub.w	r6, r1, lr
 801a53e:	fb96 f5f4 	sdiv	r5, r6, r4
 801a542:	ee07 5a10 	vmov	s14, r5
 801a546:	2d00      	cmp	r5, #0
 801a548:	fb04 6615 	mls	r6, r4, r5, r6
 801a54c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a550:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a554:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a558:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a55c:	dd12      	ble.n	801a584 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a55e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a562:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a566:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a56a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a572:	bf14      	ite	ne
 801a574:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a578:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a57c:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a580:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a584:	fb05 f204 	mul.w	r2, r5, r4
 801a588:	1abf      	subs	r7, r7, r2
 801a58a:	4494      	add	ip, r2
 801a58c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a590:	4411      	add	r1, r2
 801a592:	eb09 020c 	add.w	r2, r9, ip
 801a596:	b209      	sxth	r1, r1
 801a598:	443a      	add	r2, r7
 801a59a:	428a      	cmp	r2, r1
 801a59c:	bfc4      	itt	gt
 801a59e:	eba1 0209 	subgt.w	r2, r1, r9
 801a5a2:	eba2 070c 	subgt.w	r7, r2, ip
 801a5a6:	2f00      	cmp	r7, #0
 801a5a8:	dd50      	ble.n	801a64c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a5aa:	fb97 f1f4 	sdiv	r1, r7, r4
 801a5ae:	fb04 7211 	mls	r2, r4, r1, r7
 801a5b2:	b90a      	cbnz	r2, 801a5b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a5b4:	3901      	subs	r1, #1
 801a5b6:	4622      	mov	r2, r4
 801a5b8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a5bc:	6840      	ldr	r0, [r0, #4]
 801a5be:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a5c2:	44b6      	add	lr, r6
 801a5c4:	f8d0 a000 	ldr.w	sl, [r0]
 801a5c8:	2900      	cmp	r1, #0
 801a5ca:	bfcc      	ite	gt
 801a5cc:	46a1      	movgt	r9, r4
 801a5ce:	4691      	movle	r9, r2
 801a5d0:	900b      	str	r0, [sp, #44]	; 0x2c
 801a5d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a5d4:	fb04 e505 	mla	r5, r4, r5, lr
 801a5d8:	eef0 6a42 	vmov.f32	s13, s4
 801a5dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a5e0:	9008      	str	r0, [sp, #32]
 801a5e2:	eeb0 7a61 	vmov.f32	s14, s3
 801a5e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a5e8:	695b      	ldr	r3, [r3, #20]
 801a5ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5ee:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a5f2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a5f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a5f8:	445b      	add	r3, fp
 801a5fa:	9307      	str	r3, [sp, #28]
 801a5fc:	ee16 3a90 	vmov	r3, s13
 801a600:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a604:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a608:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a60c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a610:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a614:	ee17 7a90 	vmov	r7, s15
 801a618:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a61c:	fb97 f7f4 	sdiv	r7, r7, r4
 801a620:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a624:	ee17 ca90 	vmov	ip, s15
 801a628:	fb9c fcf4 	sdiv	ip, ip, r4
 801a62c:	fb0c 3306 	mla	r3, ip, r6, r3
 801a630:	9302      	str	r3, [sp, #8]
 801a632:	ee17 3a10 	vmov	r3, s14
 801a636:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a63a:	fb07 3706 	mla	r7, r7, r6, r3
 801a63e:	eba9 0306 	sub.w	r3, r9, r6
 801a642:	e9cd 4700 	strd	r4, r7, [sp]
 801a646:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a64a:	47a0      	blx	r4
 801a64c:	b00d      	add	sp, #52	; 0x34
 801a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a652:	2500      	movs	r5, #0
 801a654:	462e      	mov	r6, r5
 801a656:	e799      	b.n	801a58c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a65c:	b0db      	sub	sp, #364	; 0x16c
 801a65e:	461d      	mov	r5, r3
 801a660:	4614      	mov	r4, r2
 801a662:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a666:	910f      	str	r1, [sp, #60]	; 0x3c
 801a668:	4629      	mov	r1, r5
 801a66a:	930a      	str	r3, [sp, #40]	; 0x28
 801a66c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a670:	9009      	str	r0, [sp, #36]	; 0x24
 801a672:	930b      	str	r3, [sp, #44]	; 0x2c
 801a674:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a678:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a67c:	9310      	str	r3, [sp, #64]	; 0x40
 801a67e:	6803      	ldr	r3, [r0, #0]
 801a680:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a682:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a686:	47b8      	blx	r7
 801a688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a68a:	6058      	str	r0, [r3, #4]
 801a68c:	2800      	cmp	r0, #0
 801a68e:	f000 83a1 	beq.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a692:	682b      	ldr	r3, [r5, #0]
 801a694:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a698:	ed94 7a02 	vldr	s14, [r4, #8]
 801a69c:	9314      	str	r3, [sp, #80]	; 0x50
 801a69e:	686b      	ldr	r3, [r5, #4]
 801a6a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6a4:	9315      	str	r3, [sp, #84]	; 0x54
 801a6a6:	4bc1      	ldr	r3, [pc, #772]	; (801a9ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a6a8:	7819      	ldrb	r1, [r3, #0]
 801a6aa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a6ae:	2900      	cmp	r1, #0
 801a6b0:	bf16      	itet	ne
 801a6b2:	4619      	movne	r1, r3
 801a6b4:	4611      	moveq	r1, r2
 801a6b6:	4613      	movne	r3, r2
 801a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6bc:	9116      	str	r1, [sp, #88]	; 0x58
 801a6be:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a6c2:	f240 8387 	bls.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6c6:	ed94 7a07 	vldr	s14, [r4, #28]
 801a6ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d2:	f240 837f 	bls.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6d6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a6da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6e2:	f240 8377 	bls.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6e6:	6822      	ldr	r2, [r4, #0]
 801a6e8:	4bb1      	ldr	r3, [pc, #708]	; (801a9b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a6ea:	429a      	cmp	r2, r3
 801a6ec:	f2c0 8372 	blt.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6f0:	49b0      	ldr	r1, [pc, #704]	; (801a9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a6f2:	6963      	ldr	r3, [r4, #20]
 801a6f4:	428a      	cmp	r2, r1
 801a6f6:	f300 836d 	bgt.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6fa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a6fe:	48ae      	ldr	r0, [pc, #696]	; (801a9b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a700:	33ff      	adds	r3, #255	; 0xff
 801a702:	4283      	cmp	r3, r0
 801a704:	f200 8366 	bhi.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a70a:	4dac      	ldr	r5, [pc, #688]	; (801a9bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a70c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a710:	33ff      	adds	r3, #255	; 0xff
 801a712:	42ab      	cmp	r3, r5
 801a714:	f200 835e 	bhi.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a718:	6862      	ldr	r2, [r4, #4]
 801a71a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a71e:	33ff      	adds	r3, #255	; 0xff
 801a720:	4283      	cmp	r3, r0
 801a722:	f200 8357 	bhi.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a726:	69a1      	ldr	r1, [r4, #24]
 801a728:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a72c:	33ff      	adds	r3, #255	; 0xff
 801a72e:	4283      	cmp	r3, r0
 801a730:	f200 8350 	bhi.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a736:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a73a:	30ff      	adds	r0, #255	; 0xff
 801a73c:	42a8      	cmp	r0, r5
 801a73e:	f200 8349 	bhi.w	801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a742:	428a      	cmp	r2, r1
 801a744:	f280 8110 	bge.w	801a968 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a748:	429a      	cmp	r2, r3
 801a74a:	f300 8119 	bgt.w	801a980 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a74e:	4299      	cmp	r1, r3
 801a750:	f280 811d 	bge.w	801a98e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a754:	2502      	movs	r5, #2
 801a756:	2701      	movs	r7, #1
 801a758:	46a9      	mov	r9, r5
 801a75a:	46b8      	mov	r8, r7
 801a75c:	f04f 0a00 	mov.w	sl, #0
 801a760:	4621      	mov	r1, r4
 801a762:	a849      	add	r0, sp, #292	; 0x124
 801a764:	f001 fbe4 	bl	801bf30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a768:	4622      	mov	r2, r4
 801a76a:	4653      	mov	r3, sl
 801a76c:	a949      	add	r1, sp, #292	; 0x124
 801a76e:	f8cd 9000 	str.w	r9, [sp]
 801a772:	a819      	add	r0, sp, #100	; 0x64
 801a774:	f001 fd0c 	bl	801c190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a778:	4622      	mov	r2, r4
 801a77a:	4653      	mov	r3, sl
 801a77c:	a949      	add	r1, sp, #292	; 0x124
 801a77e:	f8cd 8000 	str.w	r8, [sp]
 801a782:	a829      	add	r0, sp, #164	; 0xa4
 801a784:	f001 fd04 	bl	801c190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a788:	4643      	mov	r3, r8
 801a78a:	4622      	mov	r2, r4
 801a78c:	a949      	add	r1, sp, #292	; 0x124
 801a78e:	f8cd 9000 	str.w	r9, [sp]
 801a792:	a839      	add	r0, sp, #228	; 0xe4
 801a794:	f001 fcfc 	bl	801c190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a798:	42af      	cmp	r7, r5
 801a79a:	af12      	add	r7, sp, #72	; 0x48
 801a79c:	bfb7      	itett	lt
 801a79e:	2300      	movlt	r3, #0
 801a7a0:	2301      	movge	r3, #1
 801a7a2:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a7a4:	ac19      	addlt	r4, sp, #100	; 0x64
 801a7a6:	bfb1      	iteee	lt
 801a7a8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a7aa:	ad19      	addge	r5, sp, #100	; 0x64
 801a7ac:	930e      	strge	r3, [sp, #56]	; 0x38
 801a7ae:	ac29      	addge	r4, sp, #164	; 0xa4
 801a7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a7b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a7b6:	e887 0003 	stmia.w	r7, {r0, r1}
 801a7ba:	b928      	cbnz	r0, 801a7c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a7bc:	4b80      	ldr	r3, [pc, #512]	; (801a9c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a7be:	6818      	ldr	r0, [r3, #0]
 801a7c0:	6803      	ldr	r3, [r0, #0]
 801a7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7c4:	4798      	blx	r3
 801a7c6:	6038      	str	r0, [r7, #0]
 801a7c8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a7ca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a7ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a7d2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a7d4:	930c      	str	r3, [sp, #48]	; 0x30
 801a7d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a7d8:	6963      	ldr	r3, [r4, #20]
 801a7da:	440b      	add	r3, r1
 801a7dc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a7e0:	4408      	add	r0, r1
 801a7e2:	b200      	sxth	r0, r0
 801a7e4:	4283      	cmp	r3, r0
 801a7e6:	900d      	str	r0, [sp, #52]	; 0x34
 801a7e8:	f280 80dd 	bge.w	801a9a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a7ec:	428b      	cmp	r3, r1
 801a7ee:	da08      	bge.n	801a802 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a7f0:	2a00      	cmp	r2, #0
 801a7f2:	dd06      	ble.n	801a802 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a7f4:	1acb      	subs	r3, r1, r3
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	f2c0 80e4 	blt.w	801a9c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	f300 80e2 	bgt.w	801a9c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a802:	6967      	ldr	r7, [r4, #20]
 801a804:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a80a:	443b      	add	r3, r7
 801a80c:	461f      	mov	r7, r3
 801a80e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a810:	1bdf      	subs	r7, r3, r7
 801a812:	4297      	cmp	r7, r2
 801a814:	bfa8      	it	ge
 801a816:	4617      	movge	r7, r2
 801a818:	2f00      	cmp	r7, #0
 801a81a:	f340 8166 	ble.w	801aaea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a81e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a820:	6829      	ldr	r1, [r5, #0]
 801a822:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a826:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a82a:	4411      	add	r1, r2
 801a82c:	6820      	ldr	r0, [r4, #0]
 801a82e:	4299      	cmp	r1, r3
 801a830:	dd1a      	ble.n	801a868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a832:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a836:	4402      	add	r2, r0
 801a838:	440b      	add	r3, r1
 801a83a:	b21b      	sxth	r3, r3
 801a83c:	429a      	cmp	r2, r3
 801a83e:	dc13      	bgt.n	801a868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a840:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a842:	a912      	add	r1, sp, #72	; 0x48
 801a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a846:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	9206      	str	r2, [sp, #24]
 801a84c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a84e:	9500      	str	r5, [sp, #0]
 801a850:	9205      	str	r2, [sp, #20]
 801a852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a854:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a858:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a85a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a85e:	aa49      	add	r2, sp, #292	; 0x124
 801a860:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a864:	4623      	mov	r3, r4
 801a866:	47c8      	blx	r9
 801a868:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a86c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a870:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a874:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a878:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a87c:	68a1      	ldr	r1, [r4, #8]
 801a87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a882:	ed94 6a08 	vldr	s12, [r4, #32]
 801a886:	edd4 6a07 	vldr	s13, [r4, #28]
 801a88a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a88e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a892:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a896:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a89a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a89e:	441a      	add	r2, r3
 801a8a0:	6963      	ldr	r3, [r4, #20]
 801a8a2:	3301      	adds	r3, #1
 801a8a4:	6022      	str	r2, [r4, #0]
 801a8a6:	6163      	str	r3, [r4, #20]
 801a8a8:	69a3      	ldr	r3, [r4, #24]
 801a8aa:	3b01      	subs	r3, #1
 801a8ac:	61a3      	str	r3, [r4, #24]
 801a8ae:	6923      	ldr	r3, [r4, #16]
 801a8b0:	440b      	add	r3, r1
 801a8b2:	68e1      	ldr	r1, [r4, #12]
 801a8b4:	428b      	cmp	r3, r1
 801a8b6:	6123      	str	r3, [r4, #16]
 801a8b8:	db15      	blt.n	801a8e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a8ba:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a8be:	3201      	adds	r2, #1
 801a8c0:	1a5b      	subs	r3, r3, r1
 801a8c2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a8c6:	6022      	str	r2, [r4, #0]
 801a8c8:	6123      	str	r3, [r4, #16]
 801a8ca:	edc4 6a07 	vstr	s13, [r4, #28]
 801a8ce:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a8d2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a8d6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a8da:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a8de:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a8e2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a8e6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a8ea:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a8ee:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a8f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a8f6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a8fa:	68a9      	ldr	r1, [r5, #8]
 801a8fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a900:	ed95 6a08 	vldr	s12, [r5, #32]
 801a904:	edd5 6a07 	vldr	s13, [r5, #28]
 801a908:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a90c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a910:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a914:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a918:	edc5 6a07 	vstr	s13, [r5, #28]
 801a91c:	441a      	add	r2, r3
 801a91e:	696b      	ldr	r3, [r5, #20]
 801a920:	3301      	adds	r3, #1
 801a922:	602a      	str	r2, [r5, #0]
 801a924:	616b      	str	r3, [r5, #20]
 801a926:	69ab      	ldr	r3, [r5, #24]
 801a928:	3b01      	subs	r3, #1
 801a92a:	61ab      	str	r3, [r5, #24]
 801a92c:	692b      	ldr	r3, [r5, #16]
 801a92e:	440b      	add	r3, r1
 801a930:	68e9      	ldr	r1, [r5, #12]
 801a932:	428b      	cmp	r3, r1
 801a934:	612b      	str	r3, [r5, #16]
 801a936:	db15      	blt.n	801a964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a938:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a93c:	3201      	adds	r2, #1
 801a93e:	1a5b      	subs	r3, r3, r1
 801a940:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a944:	602a      	str	r2, [r5, #0]
 801a946:	612b      	str	r3, [r5, #16]
 801a948:	edc5 6a07 	vstr	s13, [r5, #28]
 801a94c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a950:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a954:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a958:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a95c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a960:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a964:	3f01      	subs	r7, #1
 801a966:	e757      	b.n	801a818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a968:	4299      	cmp	r1, r3
 801a96a:	dc13      	bgt.n	801a994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a96c:	429a      	cmp	r2, r3
 801a96e:	da14      	bge.n	801a99a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a970:	2502      	movs	r5, #2
 801a972:	2703      	movs	r7, #3
 801a974:	f04f 0800 	mov.w	r8, #0
 801a978:	46a9      	mov	r9, r5
 801a97a:	f04f 0a01 	mov.w	sl, #1
 801a97e:	e6ef      	b.n	801a760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a980:	2501      	movs	r5, #1
 801a982:	2700      	movs	r7, #0
 801a984:	46a9      	mov	r9, r5
 801a986:	46b8      	mov	r8, r7
 801a988:	f04f 0a02 	mov.w	sl, #2
 801a98c:	e6e8      	b.n	801a760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a98e:	2501      	movs	r5, #1
 801a990:	2702      	movs	r7, #2
 801a992:	e6e1      	b.n	801a758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a994:	2500      	movs	r5, #0
 801a996:	2701      	movs	r7, #1
 801a998:	e7f4      	b.n	801a984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a99a:	2702      	movs	r7, #2
 801a99c:	2503      	movs	r5, #3
 801a99e:	f04f 0900 	mov.w	r9, #0
 801a9a2:	46b8      	mov	r8, r7
 801a9a4:	e7e9      	b.n	801a97a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a9a6:	4613      	mov	r3, r2
 801a9a8:	e728      	b.n	801a7fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a9aa:	bf00      	nop
 801a9ac:	20006f0a 	.word	0x20006f0a
 801a9b0:	fffd8f01 	.word	0xfffd8f01
 801a9b4:	00027100 	.word	0x00027100
 801a9b8:	0004e1ff 	.word	0x0004e1ff
 801a9bc:	0004e1fe 	.word	0x0004e1fe
 801a9c0:	20006f14 	.word	0x20006f14
 801a9c4:	4613      	mov	r3, r2
 801a9c6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a9c8:	469e      	mov	lr, r3
 801a9ca:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a9cc:	469c      	mov	ip, r3
 801a9ce:	9111      	str	r1, [sp, #68]	; 0x44
 801a9d0:	f04f 0900 	mov.w	r9, #0
 801a9d4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a9d8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a9dc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a9e0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a9e4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a9e8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a9ec:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a9f0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a9f4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a9f8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a9fc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801aa00:	f1bc 0f00 	cmp.w	ip, #0
 801aa04:	d147      	bne.n	801aa96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801aa06:	eb03 0c07 	add.w	ip, r3, r7
 801aa0a:	1ad7      	subs	r7, r2, r3
 801aa0c:	f1b9 0f00 	cmp.w	r9, #0
 801aa10:	d009      	beq.n	801aa26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801aa12:	9029      	str	r0, [sp, #164]	; 0xa4
 801aa14:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801aa18:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801aa1c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801aa20:	912d      	str	r1, [sp, #180]	; 0xb4
 801aa22:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801aa26:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801aa28:	f04f 0800 	mov.w	r8, #0
 801aa2c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801aa30:	9111      	str	r1, [sp, #68]	; 0x44
 801aa32:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801aa36:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801aa3a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801aa3e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801aa42:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801aa46:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801aa4a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801aa4e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801aa52:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801aa56:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801aa5a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801aa5e:	f1be 0f00 	cmp.w	lr, #0
 801aa62:	d031      	beq.n	801aac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801aa64:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801aa66:	4450      	add	r0, sl
 801aa68:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801aa6c:	4431      	add	r1, r6
 801aa6e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801aa72:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801aa76:	4549      	cmp	r1, r9
 801aa78:	db08      	blt.n	801aa8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801aa7a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801aa7e:	3001      	adds	r0, #1
 801aa80:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801aa84:	eba1 0109 	sub.w	r1, r1, r9
 801aa88:	ee37 7a06 	vadd.f32	s14, s14, s12
 801aa8c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801aa90:	f04f 0801 	mov.w	r8, #1
 801aa94:	e7e3      	b.n	801aa5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801aa96:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801aa98:	4450      	add	r0, sl
 801aa9a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801aa9e:	4431      	add	r1, r6
 801aaa0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801aaa4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801aaa8:	4541      	cmp	r1, r8
 801aaaa:	db08      	blt.n	801aabe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801aaac:	ee76 6a85 	vadd.f32	s13, s13, s10
 801aab0:	3001      	adds	r0, #1
 801aab2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801aab6:	eba1 0108 	sub.w	r1, r1, r8
 801aaba:	ee77 7a86 	vadd.f32	s15, s15, s12
 801aabe:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aac2:	f04f 0901 	mov.w	r9, #1
 801aac6:	e79b      	b.n	801aa00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801aac8:	449c      	add	ip, r3
 801aaca:	1aff      	subs	r7, r7, r3
 801aacc:	f1b8 0f00 	cmp.w	r8, #0
 801aad0:	d009      	beq.n	801aae6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801aad2:	9019      	str	r0, [sp, #100]	; 0x64
 801aad4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801aad8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801aadc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801aae0:	911d      	str	r1, [sp, #116]	; 0x74
 801aae2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801aae6:	1ad2      	subs	r2, r2, r3
 801aae8:	e68b      	b.n	801a802 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aaea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aaec:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	f000 80d1 	beq.w	801ac96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801aaf4:	ad19      	add	r5, sp, #100	; 0x64
 801aaf6:	ac39      	add	r4, sp, #228	; 0xe4
 801aaf8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aafa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aafe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ab02:	930c      	str	r3, [sp, #48]	; 0x30
 801ab04:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab06:	6963      	ldr	r3, [r4, #20]
 801ab08:	440b      	add	r3, r1
 801ab0a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ab0e:	4408      	add	r0, r1
 801ab10:	b200      	sxth	r0, r0
 801ab12:	4283      	cmp	r3, r0
 801ab14:	900d      	str	r0, [sp, #52]	; 0x34
 801ab16:	f280 80c1 	bge.w	801ac9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801ab1a:	428b      	cmp	r3, r1
 801ab1c:	da08      	bge.n	801ab30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ab1e:	2a00      	cmp	r2, #0
 801ab20:	dd06      	ble.n	801ab30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ab22:	1acb      	subs	r3, r1, r3
 801ab24:	429a      	cmp	r2, r3
 801ab26:	f2c0 80bb 	blt.w	801aca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	f300 80b9 	bgt.w	801aca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801ab30:	6967      	ldr	r7, [r4, #20]
 801ab32:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ab36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab38:	443b      	add	r3, r7
 801ab3a:	461f      	mov	r7, r3
 801ab3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab3e:	1bdf      	subs	r7, r3, r7
 801ab40:	4297      	cmp	r7, r2
 801ab42:	bfa8      	it	ge
 801ab44:	4617      	movge	r7, r2
 801ab46:	2f00      	cmp	r7, #0
 801ab48:	f340 813c 	ble.w	801adc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801ab4c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ab4e:	6829      	ldr	r1, [r5, #0]
 801ab50:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab54:	f9bb 3000 	ldrsh.w	r3, [fp]
 801ab58:	4411      	add	r1, r2
 801ab5a:	6820      	ldr	r0, [r4, #0]
 801ab5c:	4299      	cmp	r1, r3
 801ab5e:	dd1a      	ble.n	801ab96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ab60:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801ab64:	4402      	add	r2, r0
 801ab66:	440b      	add	r3, r1
 801ab68:	b21b      	sxth	r3, r3
 801ab6a:	429a      	cmp	r2, r3
 801ab6c:	dc13      	bgt.n	801ab96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ab6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab70:	a912      	add	r1, sp, #72	; 0x48
 801ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	9206      	str	r2, [sp, #24]
 801ab7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ab7c:	9500      	str	r5, [sp, #0]
 801ab7e:	9205      	str	r2, [sp, #20]
 801ab80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab82:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ab86:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ab88:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ab8c:	aa49      	add	r2, sp, #292	; 0x124
 801ab8e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801ab92:	4623      	mov	r3, r4
 801ab94:	47c8      	blx	r9
 801ab96:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801ab9a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801ab9e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aba6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801abaa:	68a1      	ldr	r1, [r4, #8]
 801abac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801abb0:	ed94 6a08 	vldr	s12, [r4, #32]
 801abb4:	edd4 6a07 	vldr	s13, [r4, #28]
 801abb8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801abbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801abc0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801abc4:	e9d4 2300 	ldrd	r2, r3, [r4]
 801abc8:	edc4 6a07 	vstr	s13, [r4, #28]
 801abcc:	441a      	add	r2, r3
 801abce:	6963      	ldr	r3, [r4, #20]
 801abd0:	3301      	adds	r3, #1
 801abd2:	6022      	str	r2, [r4, #0]
 801abd4:	6163      	str	r3, [r4, #20]
 801abd6:	69a3      	ldr	r3, [r4, #24]
 801abd8:	3b01      	subs	r3, #1
 801abda:	61a3      	str	r3, [r4, #24]
 801abdc:	6923      	ldr	r3, [r4, #16]
 801abde:	440b      	add	r3, r1
 801abe0:	68e1      	ldr	r1, [r4, #12]
 801abe2:	428b      	cmp	r3, r1
 801abe4:	6123      	str	r3, [r4, #16]
 801abe6:	db15      	blt.n	801ac14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801abe8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801abec:	3201      	adds	r2, #1
 801abee:	1a5b      	subs	r3, r3, r1
 801abf0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801abf4:	6022      	str	r2, [r4, #0]
 801abf6:	6123      	str	r3, [r4, #16]
 801abf8:	edc4 6a07 	vstr	s13, [r4, #28]
 801abfc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ac00:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ac04:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ac08:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ac0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac10:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ac14:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ac18:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ac1c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801ac20:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ac24:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801ac28:	68a9      	ldr	r1, [r5, #8]
 801ac2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ac2e:	ed95 6a08 	vldr	s12, [r5, #32]
 801ac32:	edd5 6a07 	vldr	s13, [r5, #28]
 801ac36:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ac3a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ac3e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ac42:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ac46:	edc5 6a07 	vstr	s13, [r5, #28]
 801ac4a:	441a      	add	r2, r3
 801ac4c:	696b      	ldr	r3, [r5, #20]
 801ac4e:	3301      	adds	r3, #1
 801ac50:	602a      	str	r2, [r5, #0]
 801ac52:	616b      	str	r3, [r5, #20]
 801ac54:	69ab      	ldr	r3, [r5, #24]
 801ac56:	3b01      	subs	r3, #1
 801ac58:	61ab      	str	r3, [r5, #24]
 801ac5a:	692b      	ldr	r3, [r5, #16]
 801ac5c:	440b      	add	r3, r1
 801ac5e:	68e9      	ldr	r1, [r5, #12]
 801ac60:	428b      	cmp	r3, r1
 801ac62:	612b      	str	r3, [r5, #16]
 801ac64:	db15      	blt.n	801ac92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801ac66:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ac6a:	3201      	adds	r2, #1
 801ac6c:	1a5b      	subs	r3, r3, r1
 801ac6e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ac72:	602a      	str	r2, [r5, #0]
 801ac74:	612b      	str	r3, [r5, #16]
 801ac76:	edc5 6a07 	vstr	s13, [r5, #28]
 801ac7a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ac7e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ac82:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ac86:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801ac8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac8e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ac92:	3f01      	subs	r7, #1
 801ac94:	e757      	b.n	801ab46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801ac96:	ad39      	add	r5, sp, #228	; 0xe4
 801ac98:	ac19      	add	r4, sp, #100	; 0x64
 801ac9a:	e72d      	b.n	801aaf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801ac9c:	4613      	mov	r3, r2
 801ac9e:	e744      	b.n	801ab2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801aca0:	4613      	mov	r3, r2
 801aca2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801aca4:	469e      	mov	lr, r3
 801aca6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801acaa:	461f      	mov	r7, r3
 801acac:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801acb0:	f04f 0900 	mov.w	r9, #0
 801acb4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801acb8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801acbc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801acc0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801acc4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801acc8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801acca:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801acce:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801acd2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801acd6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801acda:	960e      	str	r6, [sp, #56]	; 0x38
 801acdc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ace0:	2f00      	cmp	r7, #0
 801ace2:	d146      	bne.n	801ad72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ace4:	449c      	add	ip, r3
 801ace6:	1ad7      	subs	r7, r2, r3
 801ace8:	f1b9 0f00 	cmp.w	r9, #0
 801acec:	d009      	beq.n	801ad02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801acee:	9039      	str	r0, [sp, #228]	; 0xe4
 801acf0:	913d      	str	r1, [sp, #244]	; 0xf4
 801acf2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801acf6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801acfa:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801acfe:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ad02:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ad04:	f04f 0800 	mov.w	r8, #0
 801ad08:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ad0c:	910e      	str	r1, [sp, #56]	; 0x38
 801ad0e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ad12:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ad16:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ad1a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ad1e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ad22:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ad26:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ad2a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ad2e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ad32:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ad36:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ad3a:	f1be 0f00 	cmp.w	lr, #0
 801ad3e:	d030      	beq.n	801ada2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801ad40:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ad42:	4450      	add	r0, sl
 801ad44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ad48:	4431      	add	r1, r6
 801ad4a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ad4e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ad52:	4549      	cmp	r1, r9
 801ad54:	db08      	blt.n	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801ad56:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ad5a:	3001      	adds	r0, #1
 801ad5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ad60:	eba1 0109 	sub.w	r1, r1, r9
 801ad64:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ad68:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ad6c:	f04f 0801 	mov.w	r8, #1
 801ad70:	e7e3      	b.n	801ad3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801ad72:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ad74:	4450      	add	r0, sl
 801ad76:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ad7a:	4431      	add	r1, r6
 801ad7c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ad80:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ad84:	4541      	cmp	r1, r8
 801ad86:	db08      	blt.n	801ad9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801ad88:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ad8c:	3001      	adds	r0, #1
 801ad8e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ad92:	eba1 0108 	sub.w	r1, r1, r8
 801ad96:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ad9a:	3f01      	subs	r7, #1
 801ad9c:	f04f 0901 	mov.w	r9, #1
 801ada0:	e79e      	b.n	801ace0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801ada2:	449c      	add	ip, r3
 801ada4:	1aff      	subs	r7, r7, r3
 801ada6:	f1b8 0f00 	cmp.w	r8, #0
 801adaa:	d009      	beq.n	801adc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801adac:	9019      	str	r0, [sp, #100]	; 0x64
 801adae:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801adb2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801adb6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801adba:	911d      	str	r1, [sp, #116]	; 0x74
 801adbc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801adc0:	1ad2      	subs	r2, r2, r3
 801adc2:	e6b5      	b.n	801ab30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801adc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	b923      	cbnz	r3, 801add4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801adca:	4b04      	ldr	r3, [pc, #16]	; (801addc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801adcc:	6818      	ldr	r0, [r3, #0]
 801adce:	6803      	ldr	r3, [r0, #0]
 801add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801add2:	4798      	blx	r3
 801add4:	b05b      	add	sp, #364	; 0x16c
 801add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adda:	bf00      	nop
 801addc:	20006f14 	.word	0x20006f14

0801ade0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ade0:	2b02      	cmp	r3, #2
 801ade2:	b510      	push	{r4, lr}
 801ade4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ade8:	d00b      	beq.n	801ae02 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801adea:	2b03      	cmp	r3, #3
 801adec:	d00e      	beq.n	801ae0c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801adee:	2b01      	cmp	r3, #1
 801adf0:	d001      	beq.n	801adf6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801adf2:	1860      	adds	r0, r4, r1
 801adf4:	bd10      	pop	{r4, pc}
 801adf6:	8880      	ldrh	r0, [r0, #4]
 801adf8:	4420      	add	r0, r4
 801adfa:	b200      	sxth	r0, r0
 801adfc:	1a80      	subs	r0, r0, r2
 801adfe:	3801      	subs	r0, #1
 801ae00:	e7f8      	b.n	801adf4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801ae02:	8880      	ldrh	r0, [r0, #4]
 801ae04:	4420      	add	r0, r4
 801ae06:	b200      	sxth	r0, r0
 801ae08:	1a40      	subs	r0, r0, r1
 801ae0a:	e7f8      	b.n	801adfe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ae0c:	18a0      	adds	r0, r4, r2
 801ae0e:	e7f1      	b.n	801adf4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801ae10 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ae10:	2b02      	cmp	r3, #2
 801ae12:	b510      	push	{r4, lr}
 801ae14:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801ae18:	d006      	beq.n	801ae28 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801ae1a:	2b03      	cmp	r3, #3
 801ae1c:	d00a      	beq.n	801ae34 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ae1e:	2b01      	cmp	r3, #1
 801ae20:	bf14      	ite	ne
 801ae22:	18a0      	addne	r0, r4, r2
 801ae24:	1860      	addeq	r0, r4, r1
 801ae26:	bd10      	pop	{r4, pc}
 801ae28:	88c0      	ldrh	r0, [r0, #6]
 801ae2a:	4420      	add	r0, r4
 801ae2c:	b200      	sxth	r0, r0
 801ae2e:	1a80      	subs	r0, r0, r2
 801ae30:	3801      	subs	r0, #1
 801ae32:	e7f8      	b.n	801ae26 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801ae34:	88c0      	ldrh	r0, [r0, #6]
 801ae36:	4420      	add	r0, r4
 801ae38:	b200      	sxth	r0, r0
 801ae3a:	1a40      	subs	r0, r0, r1
 801ae3c:	e7f8      	b.n	801ae30 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801ae40 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ae40:	4b01      	ldr	r3, [pc, #4]	; (801ae48 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ae42:	2200      	movs	r2, #0
 801ae44:	601a      	str	r2, [r3, #0]
 801ae46:	4770      	bx	lr
 801ae48:	20006f1c 	.word	0x20006f1c

0801ae4c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	b1c8      	cbz	r0, 801ae84 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ae50:	0c02      	lsrs	r2, r0, #16
 801ae52:	0412      	lsls	r2, r2, #16
 801ae54:	b9a2      	cbnz	r2, 801ae80 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ae56:	0403      	lsls	r3, r0, #16
 801ae58:	2010      	movs	r0, #16
 801ae5a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ae5e:	bf04      	itt	eq
 801ae60:	021b      	lsleq	r3, r3, #8
 801ae62:	3008      	addeq	r0, #8
 801ae64:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ae68:	bf04      	itt	eq
 801ae6a:	011b      	lsleq	r3, r3, #4
 801ae6c:	3004      	addeq	r0, #4
 801ae6e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ae72:	bf04      	itt	eq
 801ae74:	009b      	lsleq	r3, r3, #2
 801ae76:	3002      	addeq	r0, #2
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	db04      	blt.n	801ae86 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	4770      	bx	lr
 801ae80:	2000      	movs	r0, #0
 801ae82:	e7ea      	b.n	801ae5a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ae84:	2020      	movs	r0, #32
 801ae86:	4770      	bx	lr

0801ae88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae8c:	b087      	sub	sp, #28
 801ae8e:	4681      	mov	r9, r0
 801ae90:	4698      	mov	r8, r3
 801ae92:	4610      	mov	r0, r2
 801ae94:	460d      	mov	r5, r1
 801ae96:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ae9a:	b981      	cbnz	r1, 801aebe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801ae9c:	b14b      	cbz	r3, 801aeb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801ae9e:	460b      	mov	r3, r1
 801aea0:	464a      	mov	r2, r9
 801aea2:	4641      	mov	r1, r8
 801aea4:	e9cd 4700 	strd	r4, r7, [sp]
 801aea8:	f7ff ffee 	bl	801ae88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aeac:	b007      	add	sp, #28
 801aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb2:	f04f 33ff 	mov.w	r3, #4294967295
 801aeb6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801aeba:	603b      	str	r3, [r7, #0]
 801aebc:	e7f6      	b.n	801aeac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801aebe:	fa32 fa01 	lsrs.w	sl, r2, r1
 801aec2:	d107      	bne.n	801aed4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801aec4:	fb09 f602 	mul.w	r6, r9, r2
 801aec8:	fbb6 f0f4 	udiv	r0, r6, r4
 801aecc:	fb04 6610 	mls	r6, r4, r0, r6
 801aed0:	603e      	str	r6, [r7, #0]
 801aed2:	e7eb      	b.n	801aeac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801aed4:	2601      	movs	r6, #1
 801aed6:	fa09 fb01 	lsl.w	fp, r9, r1
 801aeda:	408e      	lsls	r6, r1
 801aedc:	fbbb f3f4 	udiv	r3, fp, r4
 801aee0:	3e01      	subs	r6, #1
 801aee2:	9302      	str	r3, [sp, #8]
 801aee4:	fb0a f303 	mul.w	r3, sl, r3
 801aee8:	4016      	ands	r6, r2
 801aeea:	9303      	str	r3, [sp, #12]
 801aeec:	4630      	mov	r0, r6
 801aeee:	f7ff ffad 	bl	801ae4c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801aef2:	464a      	mov	r2, r9
 801aef4:	460b      	mov	r3, r1
 801aef6:	4601      	mov	r1, r0
 801aef8:	4630      	mov	r0, r6
 801aefa:	e9cd 4700 	strd	r4, r7, [sp]
 801aefe:	f7ff ffc3 	bl	801ae88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801af02:	9b02      	ldr	r3, [sp, #8]
 801af04:	4606      	mov	r6, r0
 801af06:	eb05 0108 	add.w	r1, r5, r8
 801af0a:	fb04 bb13 	mls	fp, r4, r3, fp
 801af0e:	4658      	mov	r0, fp
 801af10:	f7ff ff9c 	bl	801ae4c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801af14:	ab05      	add	r3, sp, #20
 801af16:	465a      	mov	r2, fp
 801af18:	e9cd 4300 	strd	r4, r3, [sp]
 801af1c:	4603      	mov	r3, r0
 801af1e:	4650      	mov	r0, sl
 801af20:	f7ff ffb2 	bl	801ae88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801af24:	6839      	ldr	r1, [r7, #0]
 801af26:	9a05      	ldr	r2, [sp, #20]
 801af28:	9b03      	ldr	r3, [sp, #12]
 801af2a:	4411      	add	r1, r2
 801af2c:	fbb1 f2f4 	udiv	r2, r1, r4
 801af30:	18d3      	adds	r3, r2, r3
 801af32:	fb04 1412 	mls	r4, r4, r2, r1
 801af36:	441e      	add	r6, r3
 801af38:	603c      	str	r4, [r7, #0]
 801af3a:	4430      	add	r0, r6
 801af3c:	e7b6      	b.n	801aeac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801af3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801af3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af42:	b085      	sub	sp, #20
 801af44:	f1b0 0900 	subs.w	r9, r0, #0
 801af48:	461d      	mov	r5, r3
 801af4a:	4617      	mov	r7, r2
 801af4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801af4e:	bfbb      	ittet	lt
 801af50:	f1c9 0900 	rsblt	r9, r9, #0
 801af54:	f04f 36ff 	movlt.w	r6, #4294967295
 801af58:	2601      	movge	r6, #1
 801af5a:	6823      	ldrlt	r3, [r4, #0]
 801af5c:	bfbc      	itt	lt
 801af5e:	425b      	neglt	r3, r3
 801af60:	6023      	strlt	r3, [r4, #0]
 801af62:	2a00      	cmp	r2, #0
 801af64:	da04      	bge.n	801af70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801af66:	6823      	ldr	r3, [r4, #0]
 801af68:	4257      	negs	r7, r2
 801af6a:	4276      	negs	r6, r6
 801af6c:	425b      	negs	r3, r3
 801af6e:	6023      	str	r3, [r4, #0]
 801af70:	2d00      	cmp	r5, #0
 801af72:	4638      	mov	r0, r7
 801af74:	bfba      	itte	lt
 801af76:	426d      	neglt	r5, r5
 801af78:	f04f 38ff 	movlt.w	r8, #4294967295
 801af7c:	f04f 0801 	movge.w	r8, #1
 801af80:	f7ff ff64 	bl	801ae4c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801af84:	ab03      	add	r3, sp, #12
 801af86:	463a      	mov	r2, r7
 801af88:	e9cd 5300 	strd	r5, r3, [sp]
 801af8c:	4603      	mov	r3, r0
 801af8e:	4648      	mov	r0, r9
 801af90:	f7ff ff7a 	bl	801ae88 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801af94:	6823      	ldr	r3, [r4, #0]
 801af96:	9a03      	ldr	r2, [sp, #12]
 801af98:	4546      	cmp	r6, r8
 801af9a:	441a      	add	r2, r3
 801af9c:	fb92 f3f5 	sdiv	r3, r2, r5
 801afa0:	4418      	add	r0, r3
 801afa2:	fb05 2313 	mls	r3, r5, r3, r2
 801afa6:	bf18      	it	ne
 801afa8:	4240      	negne	r0, r0
 801afaa:	1c72      	adds	r2, r6, #1
 801afac:	6023      	str	r3, [r4, #0]
 801afae:	d105      	bne.n	801afbc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	f1c3 0200 	rsb	r2, r3, #0
 801afb6:	db0b      	blt.n	801afd0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801afb8:	6022      	str	r2, [r4, #0]
 801afba:	e006      	b.n	801afca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801afbc:	2e01      	cmp	r6, #1
 801afbe:	d104      	bne.n	801afca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	da02      	bge.n	801afca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801afc4:	442b      	add	r3, r5
 801afc6:	3801      	subs	r0, #1
 801afc8:	6023      	str	r3, [r4, #0]
 801afca:	b005      	add	sp, #20
 801afcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afd0:	3801      	subs	r0, #1
 801afd2:	1b52      	subs	r2, r2, r5
 801afd4:	e7f0      	b.n	801afb8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801afd8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801afd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801afdc:	4c1c      	ldr	r4, [pc, #112]	; (801b050 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801afde:	4605      	mov	r5, r0
 801afe0:	6807      	ldr	r7, [r0, #0]
 801afe2:	69a3      	ldr	r3, [r4, #24]
 801afe4:	b92b      	cbnz	r3, 801aff2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801afe6:	6840      	ldr	r0, [r0, #4]
 801afe8:	e9c5 7000 	strd	r7, r0, [r5]
 801afec:	b004      	add	sp, #16
 801afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aff2:	f04f 0802 	mov.w	r8, #2
 801aff6:	68a2      	ldr	r2, [r4, #8]
 801aff8:	ae04      	add	r6, sp, #16
 801affa:	6820      	ldr	r0, [r4, #0]
 801affc:	fb93 f1f8 	sdiv	r1, r3, r8
 801b000:	440a      	add	r2, r1
 801b002:	69e1      	ldr	r1, [r4, #28]
 801b004:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b008:	463a      	mov	r2, r7
 801b00a:	9600      	str	r6, [sp, #0]
 801b00c:	f7ff ff97 	bl	801af3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b010:	69a3      	ldr	r3, [r4, #24]
 801b012:	4607      	mov	r7, r0
 801b014:	686a      	ldr	r2, [r5, #4]
 801b016:	6a21      	ldr	r1, [r4, #32]
 801b018:	9600      	str	r6, [sp, #0]
 801b01a:	6860      	ldr	r0, [r4, #4]
 801b01c:	f7ff ff8f 	bl	801af3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b020:	69a3      	ldr	r3, [r4, #24]
 801b022:	6962      	ldr	r2, [r4, #20]
 801b024:	4407      	add	r7, r0
 801b026:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b028:	9600      	str	r6, [sp, #0]
 801b02a:	68e0      	ldr	r0, [r4, #12]
 801b02c:	fb93 f8f8 	sdiv	r8, r3, r8
 801b030:	4442      	add	r2, r8
 801b032:	9203      	str	r2, [sp, #12]
 801b034:	682a      	ldr	r2, [r5, #0]
 801b036:	f7ff ff82 	bl	801af3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b03a:	4680      	mov	r8, r0
 801b03c:	9600      	str	r6, [sp, #0]
 801b03e:	69a3      	ldr	r3, [r4, #24]
 801b040:	686a      	ldr	r2, [r5, #4]
 801b042:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b044:	6920      	ldr	r0, [r4, #16]
 801b046:	f7ff ff7a 	bl	801af3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b04a:	4440      	add	r0, r8
 801b04c:	e7cc      	b.n	801afe8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b04e:	bf00      	nop
 801b050:	20006f20 	.word	0x20006f20

0801b054 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b054:	4b07      	ldr	r3, [pc, #28]	; (801b074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b056:	781b      	ldrb	r3, [r3, #0]
 801b058:	2b01      	cmp	r3, #1
 801b05a:	d109      	bne.n	801b070 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b05c:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b060:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b064:	8003      	strh	r3, [r0, #0]
 801b066:	4b04      	ldr	r3, [pc, #16]	; (801b078 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b068:	881b      	ldrh	r3, [r3, #0]
 801b06a:	3b01      	subs	r3, #1
 801b06c:	1a9b      	subs	r3, r3, r2
 801b06e:	800b      	strh	r3, [r1, #0]
 801b070:	4770      	bx	lr
 801b072:	bf00      	nop
 801b074:	20006f0a 	.word	0x20006f0a
 801b078:	20006f06 	.word	0x20006f06

0801b07c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b07c:	4b07      	ldr	r3, [pc, #28]	; (801b09c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b07e:	b510      	push	{r4, lr}
 801b080:	781b      	ldrb	r3, [r3, #0]
 801b082:	2b01      	cmp	r3, #1
 801b084:	d108      	bne.n	801b098 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b086:	4b06      	ldr	r3, [pc, #24]	; (801b0a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b088:	880c      	ldrh	r4, [r1, #0]
 801b08a:	881b      	ldrh	r3, [r3, #0]
 801b08c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b090:	3b01      	subs	r3, #1
 801b092:	1b1b      	subs	r3, r3, r4
 801b094:	8003      	strh	r3, [r0, #0]
 801b096:	800a      	strh	r2, [r1, #0]
 801b098:	bd10      	pop	{r4, pc}
 801b09a:	bf00      	nop
 801b09c:	20006f0a 	.word	0x20006f0a
 801b0a0:	20006f06 	.word	0x20006f06

0801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b0a4:	4b08      	ldr	r3, [pc, #32]	; (801b0c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b0a6:	781b      	ldrb	r3, [r3, #0]
 801b0a8:	2b01      	cmp	r3, #1
 801b0aa:	d10c      	bne.n	801b0c6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b0ac:	8803      	ldrh	r3, [r0, #0]
 801b0ae:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b0b2:	8842      	ldrh	r2, [r0, #2]
 801b0b4:	8002      	strh	r2, [r0, #0]
 801b0b6:	185a      	adds	r2, r3, r1
 801b0b8:	4b04      	ldr	r3, [pc, #16]	; (801b0cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b0ba:	881b      	ldrh	r3, [r3, #0]
 801b0bc:	1a9b      	subs	r3, r3, r2
 801b0be:	8043      	strh	r3, [r0, #2]
 801b0c0:	88c3      	ldrh	r3, [r0, #6]
 801b0c2:	80c1      	strh	r1, [r0, #6]
 801b0c4:	8083      	strh	r3, [r0, #4]
 801b0c6:	4770      	bx	lr
 801b0c8:	20006f0a 	.word	0x20006f0a
 801b0cc:	20006f06 	.word	0x20006f06

0801b0d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b0d0:	4b07      	ldr	r3, [pc, #28]	; (801b0f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b0d2:	b510      	push	{r4, lr}
 801b0d4:	781b      	ldrb	r3, [r3, #0]
 801b0d6:	2b01      	cmp	r3, #1
 801b0d8:	d108      	bne.n	801b0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b0da:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b0de:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b0e2:	8003      	strh	r3, [r0, #0]
 801b0e4:	8893      	ldrh	r3, [r2, #4]
 801b0e6:	3b01      	subs	r3, #1
 801b0e8:	1b1b      	subs	r3, r3, r4
 801b0ea:	800b      	strh	r3, [r1, #0]
 801b0ec:	bd10      	pop	{r4, pc}
 801b0ee:	bf00      	nop
 801b0f0:	20006f0a 	.word	0x20006f0a

0801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b0f4:	4b0a      	ldr	r3, [pc, #40]	; (801b120 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b0f6:	460a      	mov	r2, r1
 801b0f8:	b510      	push	{r4, lr}
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	2b01      	cmp	r3, #1
 801b0fe:	d10d      	bne.n	801b11c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b100:	8881      	ldrh	r1, [r0, #4]
 801b102:	8803      	ldrh	r3, [r0, #0]
 801b104:	440b      	add	r3, r1
 801b106:	4601      	mov	r1, r0
 801b108:	3b01      	subs	r3, #1
 801b10a:	f821 3b02 	strh.w	r3, [r1], #2
 801b10e:	f7ff ffdf 	bl	801b0d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b112:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b116:	88c2      	ldrh	r2, [r0, #6]
 801b118:	80c3      	strh	r3, [r0, #6]
 801b11a:	8082      	strh	r2, [r0, #4]
 801b11c:	bd10      	pop	{r4, pc}
 801b11e:	bf00      	nop
 801b120:	20006f0a 	.word	0x20006f0a

0801b124 <_ZN8touchgfx11Application11getInstanceEv>:
 801b124:	4b01      	ldr	r3, [pc, #4]	; (801b12c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b126:	6818      	ldr	r0, [r3, #0]
 801b128:	4770      	bx	lr
 801b12a:	bf00      	nop
 801b12c:	20006f54 	.word	0x20006f54

0801b130 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b130:	4b03      	ldr	r3, [pc, #12]	; (801b140 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b132:	2200      	movs	r2, #0
 801b134:	801a      	strh	r2, [r3, #0]
 801b136:	805a      	strh	r2, [r3, #2]
 801b138:	809a      	strh	r2, [r3, #4]
 801b13a:	80da      	strh	r2, [r3, #6]
 801b13c:	4770      	bx	lr
 801b13e:	bf00      	nop
 801b140:	20006f4c 	.word	0x20006f4c

0801b144 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b148:	b09d      	sub	sp, #116	; 0x74
 801b14a:	4606      	mov	r6, r0
 801b14c:	4614      	mov	r4, r2
 801b14e:	468a      	mov	sl, r1
 801b150:	a803      	add	r0, sp, #12
 801b152:	461d      	mov	r5, r3
 801b154:	f000 f9ae 	bl	801b4b4 <_ZN8touchgfx12TextProviderC1Ev>
 801b158:	6833      	ldr	r3, [r6, #0]
 801b15a:	4630      	mov	r0, r6
 801b15c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b162:	4798      	blx	r3
 801b164:	6833      	ldr	r3, [r6, #0]
 801b166:	4607      	mov	r7, r0
 801b168:	4630      	mov	r0, r6
 801b16a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b16c:	4798      	blx	r3
 801b16e:	462a      	mov	r2, r5
 801b170:	2500      	movs	r5, #0
 801b172:	4621      	mov	r1, r4
 801b174:	9000      	str	r0, [sp, #0]
 801b176:	463b      	mov	r3, r7
 801b178:	462c      	mov	r4, r5
 801b17a:	46a9      	mov	r9, r5
 801b17c:	46a8      	mov	r8, r5
 801b17e:	a803      	add	r0, sp, #12
 801b180:	f000 f9eb 	bl	801b55a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b184:	2300      	movs	r3, #0
 801b186:	9302      	str	r3, [sp, #8]
 801b188:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b18c:	429c      	cmp	r4, r3
 801b18e:	d002      	beq.n	801b196 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b190:	455c      	cmp	r4, fp
 801b192:	bf18      	it	ne
 801b194:	4625      	movne	r5, r4
 801b196:	ab02      	add	r3, sp, #8
 801b198:	4632      	mov	r2, r6
 801b19a:	4651      	mov	r1, sl
 801b19c:	a803      	add	r0, sp, #12
 801b19e:	f000 fcdd 	bl	801bb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b1a2:	4604      	mov	r4, r0
 801b1a4:	b108      	cbz	r0, 801b1aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b1a6:	280a      	cmp	r0, #10
 801b1a8:	d10a      	bne.n	801b1c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b1aa:	45c1      	cmp	r9, r8
 801b1ac:	bf38      	it	cc
 801b1ae:	46c1      	movcc	r9, r8
 801b1b0:	f04f 0800 	mov.w	r8, #0
 801b1b4:	2c00      	cmp	r4, #0
 801b1b6:	d1e5      	bne.n	801b184 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b1b8:	4648      	mov	r0, r9
 801b1ba:	b01d      	add	sp, #116	; 0x74
 801b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1c0:	9a02      	ldr	r2, [sp, #8]
 801b1c2:	2a00      	cmp	r2, #0
 801b1c4:	d0de      	beq.n	801b184 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b1c6:	7b57      	ldrb	r7, [r2, #13]
 801b1c8:	4629      	mov	r1, r5
 801b1ca:	6833      	ldr	r3, [r6, #0]
 801b1cc:	007f      	lsls	r7, r7, #1
 801b1ce:	8894      	ldrh	r4, [r2, #4]
 801b1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1d2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b1d6:	7a97      	ldrb	r7, [r2, #10]
 801b1d8:	4307      	orrs	r7, r0
 801b1da:	4630      	mov	r0, r6
 801b1dc:	4798      	blx	r3
 801b1de:	4438      	add	r0, r7
 801b1e0:	4480      	add	r8, r0
 801b1e2:	fa1f f888 	uxth.w	r8, r8
 801b1e6:	e7e5      	b.n	801b1b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b1e8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b1e8:	b508      	push	{r3, lr}
 801b1ea:	6803      	ldr	r3, [r0, #0]
 801b1ec:	68db      	ldr	r3, [r3, #12]
 801b1ee:	4798      	blx	r3
 801b1f0:	b128      	cbz	r0, 801b1fe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b1f2:	7b43      	ldrb	r3, [r0, #13]
 801b1f4:	7a80      	ldrb	r0, [r0, #10]
 801b1f6:	005b      	lsls	r3, r3, #1
 801b1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b1fc:	4318      	orrs	r0, r3
 801b1fe:	bd08      	pop	{r3, pc}

0801b200 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b200:	b40e      	push	{r1, r2, r3}
 801b202:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b204:	b09e      	sub	sp, #120	; 0x78
 801b206:	4605      	mov	r5, r0
 801b208:	ab23      	add	r3, sp, #140	; 0x8c
 801b20a:	a805      	add	r0, sp, #20
 801b20c:	f853 4b04 	ldr.w	r4, [r3], #4
 801b210:	9303      	str	r3, [sp, #12]
 801b212:	f000 f94f 	bl	801b4b4 <_ZN8touchgfx12TextProviderC1Ev>
 801b216:	682b      	ldr	r3, [r5, #0]
 801b218:	4628      	mov	r0, r5
 801b21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b21c:	4798      	blx	r3
 801b21e:	682b      	ldr	r3, [r5, #0]
 801b220:	4606      	mov	r6, r0
 801b222:	4628      	mov	r0, r5
 801b224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b226:	4798      	blx	r3
 801b228:	4633      	mov	r3, r6
 801b22a:	4621      	mov	r1, r4
 801b22c:	ae1e      	add	r6, sp, #120	; 0x78
 801b22e:	2400      	movs	r4, #0
 801b230:	9000      	str	r0, [sp, #0]
 801b232:	9a03      	ldr	r2, [sp, #12]
 801b234:	a805      	add	r0, sp, #20
 801b236:	f000 f990 	bl	801b55a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b23a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801b23e:	462a      	mov	r2, r5
 801b240:	4633      	mov	r3, r6
 801b242:	4621      	mov	r1, r4
 801b244:	a805      	add	r0, sp, #20
 801b246:	f000 fc89 	bl	801bb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b24a:	b300      	cbz	r0, 801b28e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801b24c:	280a      	cmp	r0, #10
 801b24e:	d01a      	beq.n	801b286 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b250:	9f04      	ldr	r7, [sp, #16]
 801b252:	b1c7      	cbz	r7, 801b286 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b254:	7b78      	ldrb	r0, [r7, #13]
 801b256:	7a3b      	ldrb	r3, [r7, #8]
 801b258:	00c1      	lsls	r1, r0, #3
 801b25a:	88aa      	ldrh	r2, [r5, #4]
 801b25c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b260:	4319      	orrs	r1, r3
 801b262:	0643      	lsls	r3, r0, #25
 801b264:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b268:	bf48      	it	mi
 801b26a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b26e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b272:	bf48      	it	mi
 801b274:	b219      	sxthmi	r1, r3
 801b276:	79fb      	ldrb	r3, [r7, #7]
 801b278:	4303      	orrs	r3, r0
 801b27a:	4413      	add	r3, r2
 801b27c:	1a5b      	subs	r3, r3, r1
 801b27e:	b29b      	uxth	r3, r3
 801b280:	42a3      	cmp	r3, r4
 801b282:	bfc8      	it	gt
 801b284:	b21c      	sxthgt	r4, r3
 801b286:	4633      	mov	r3, r6
 801b288:	462a      	mov	r2, r5
 801b28a:	2100      	movs	r1, #0
 801b28c:	e7da      	b.n	801b244 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b28e:	b2a0      	uxth	r0, r4
 801b290:	b01e      	add	sp, #120	; 0x78
 801b292:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b296:	b003      	add	sp, #12
 801b298:	4770      	bx	lr

0801b29a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b29a:	b40e      	push	{r1, r2, r3}
 801b29c:	b570      	push	{r4, r5, r6, lr}
 801b29e:	b09d      	sub	sp, #116	; 0x74
 801b2a0:	4604      	mov	r4, r0
 801b2a2:	ab21      	add	r3, sp, #132	; 0x84
 801b2a4:	a803      	add	r0, sp, #12
 801b2a6:	f853 5b04 	ldr.w	r5, [r3], #4
 801b2aa:	9302      	str	r3, [sp, #8]
 801b2ac:	f000 f902 	bl	801b4b4 <_ZN8touchgfx12TextProviderC1Ev>
 801b2b0:	6823      	ldr	r3, [r4, #0]
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2b6:	4798      	blx	r3
 801b2b8:	6823      	ldr	r3, [r4, #0]
 801b2ba:	4606      	mov	r6, r0
 801b2bc:	4620      	mov	r0, r4
 801b2be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2c0:	2401      	movs	r4, #1
 801b2c2:	4798      	blx	r3
 801b2c4:	4633      	mov	r3, r6
 801b2c6:	9000      	str	r0, [sp, #0]
 801b2c8:	4629      	mov	r1, r5
 801b2ca:	9a02      	ldr	r2, [sp, #8]
 801b2cc:	a803      	add	r0, sp, #12
 801b2ce:	f000 f944 	bl	801b55a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b2d2:	a803      	add	r0, sp, #12
 801b2d4:	f000 fce2 	bl	801bc9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b2d8:	b2a3      	uxth	r3, r4
 801b2da:	b138      	cbz	r0, 801b2ec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801b2dc:	280a      	cmp	r0, #10
 801b2de:	a803      	add	r0, sp, #12
 801b2e0:	bf04      	itt	eq
 801b2e2:	3301      	addeq	r3, #1
 801b2e4:	b21c      	sxtheq	r4, r3
 801b2e6:	f000 fcd9 	bl	801bc9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b2ea:	e7f5      	b.n	801b2d8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	b01d      	add	sp, #116	; 0x74
 801b2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b2f4:	b003      	add	sp, #12
 801b2f6:	4770      	bx	lr

0801b2f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b2f8:	b40e      	push	{r1, r2, r3}
 801b2fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2fc:	b09e      	sub	sp, #120	; 0x78
 801b2fe:	4604      	mov	r4, r0
 801b300:	ab23      	add	r3, sp, #140	; 0x8c
 801b302:	a805      	add	r0, sp, #20
 801b304:	f853 5b04 	ldr.w	r5, [r3], #4
 801b308:	9303      	str	r3, [sp, #12]
 801b30a:	f000 f8d3 	bl	801b4b4 <_ZN8touchgfx12TextProviderC1Ev>
 801b30e:	6823      	ldr	r3, [r4, #0]
 801b310:	4620      	mov	r0, r4
 801b312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b314:	4798      	blx	r3
 801b316:	6823      	ldr	r3, [r4, #0]
 801b318:	4606      	mov	r6, r0
 801b31a:	4620      	mov	r0, r4
 801b31c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b31e:	4798      	blx	r3
 801b320:	4633      	mov	r3, r6
 801b322:	4629      	mov	r1, r5
 801b324:	9000      	str	r0, [sp, #0]
 801b326:	9a03      	ldr	r2, [sp, #12]
 801b328:	a805      	add	r0, sp, #20
 801b32a:	f000 f916 	bl	801b55a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b32e:	ad1e      	add	r5, sp, #120	; 0x78
 801b330:	2100      	movs	r1, #0
 801b332:	26ff      	movs	r6, #255	; 0xff
 801b334:	4622      	mov	r2, r4
 801b336:	a805      	add	r0, sp, #20
 801b338:	f845 1d68 	str.w	r1, [r5, #-104]!
 801b33c:	462b      	mov	r3, r5
 801b33e:	f000 fc0d 	bl	801bb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b342:	b1d8      	cbz	r0, 801b37c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801b344:	280a      	cmp	r0, #10
 801b346:	d012      	beq.n	801b36e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b348:	9804      	ldr	r0, [sp, #16]
 801b34a:	b180      	cbz	r0, 801b36e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b34c:	7b47      	ldrb	r7, [r0, #13]
 801b34e:	7922      	ldrb	r2, [r4, #4]
 801b350:	00fb      	lsls	r3, r7, #3
 801b352:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b356:	7a03      	ldrb	r3, [r0, #8]
 801b358:	430b      	orrs	r3, r1
 801b35a:	0679      	lsls	r1, r7, #25
 801b35c:	bf44      	itt	mi
 801b35e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b362:	b21b      	sxthmi	r3, r3
 801b364:	1ad3      	subs	r3, r2, r3
 801b366:	b2db      	uxtb	r3, r3
 801b368:	429e      	cmp	r6, r3
 801b36a:	bf28      	it	cs
 801b36c:	461e      	movcs	r6, r3
 801b36e:	462b      	mov	r3, r5
 801b370:	4622      	mov	r2, r4
 801b372:	2100      	movs	r1, #0
 801b374:	a805      	add	r0, sp, #20
 801b376:	f000 fbf1 	bl	801bb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b37a:	e7e2      	b.n	801b342 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801b37c:	4630      	mov	r0, r6
 801b37e:	b01e      	add	sp, #120	; 0x78
 801b380:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b384:	b003      	add	sp, #12
 801b386:	4770      	bx	lr

0801b388 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b388:	b530      	push	{r4, r5, lr}
 801b38a:	8083      	strh	r3, [r0, #4]
 801b38c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b390:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b394:	7183      	strb	r3, [r0, #6]
 801b396:	79c3      	ldrb	r3, [r0, #7]
 801b398:	6101      	str	r1, [r0, #16]
 801b39a:	f365 0306 	bfi	r3, r5, #0, #7
 801b39e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b3a2:	8282      	strh	r2, [r0, #20]
 801b3a4:	f365 13c7 	bfi	r3, r5, #7, #1
 801b3a8:	71c3      	strb	r3, [r0, #7]
 801b3aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b3ae:	7203      	strb	r3, [r0, #8]
 801b3b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b3b4:	7243      	strb	r3, [r0, #9]
 801b3b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b3ba:	8143      	strh	r3, [r0, #10]
 801b3bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b3c0:	8183      	strh	r3, [r0, #12]
 801b3c2:	4b01      	ldr	r3, [pc, #4]	; (801b3c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b3c4:	6003      	str	r3, [r0, #0]
 801b3c6:	bd30      	pop	{r4, r5, pc}
 801b3c8:	08022dd4 	.word	0x08022dd4

0801b3cc <_ZNK8touchgfx9ConstFont4findEt>:
 801b3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3ce:	6904      	ldr	r4, [r0, #16]
 801b3d0:	b3bc      	cbz	r4, 801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3d2:	88a3      	ldrh	r3, [r4, #4]
 801b3d4:	8a82      	ldrh	r2, [r0, #20]
 801b3d6:	1acb      	subs	r3, r1, r3
 801b3d8:	f102 32ff 	add.w	r2, r2, #4294967295
 801b3dc:	d431      	bmi.n	801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	dd0c      	ble.n	801b3fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b3e2:	230e      	movs	r3, #14
 801b3e4:	fb03 4302 	mla	r3, r3, r2, r4
 801b3e8:	889b      	ldrh	r3, [r3, #4]
 801b3ea:	1a5b      	subs	r3, r3, r1
 801b3ec:	1ad3      	subs	r3, r2, r3
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	db27      	blt.n	801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	bfbc      	itt	lt
 801b3f6:	2302      	movlt	r3, #2
 801b3f8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b3fc:	2500      	movs	r5, #0
 801b3fe:	260e      	movs	r6, #14
 801b400:	4295      	cmp	r5, r2
 801b402:	dc1e      	bgt.n	801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b404:	fb06 4003 	mla	r0, r6, r3, r4
 801b408:	8887      	ldrh	r7, [r0, #4]
 801b40a:	42b9      	cmp	r1, r7
 801b40c:	d01a      	beq.n	801b444 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b40e:	d20d      	bcs.n	801b42c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b410:	1e5a      	subs	r2, r3, #1
 801b412:	4295      	cmp	r5, r2
 801b414:	dc15      	bgt.n	801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b416:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b41a:	1a5b      	subs	r3, r3, r1
 801b41c:	1ad3      	subs	r3, r2, r3
 801b41e:	429a      	cmp	r2, r3
 801b420:	db0f      	blt.n	801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b422:	429d      	cmp	r5, r3
 801b424:	ddec      	ble.n	801b400 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b426:	1953      	adds	r3, r2, r5
 801b428:	105b      	asrs	r3, r3, #1
 801b42a:	e7e9      	b.n	801b400 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b42c:	1c5d      	adds	r5, r3, #1
 801b42e:	42aa      	cmp	r2, r5
 801b430:	db07      	blt.n	801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b432:	8a43      	ldrh	r3, [r0, #18]
 801b434:	1acb      	subs	r3, r1, r3
 801b436:	442b      	add	r3, r5
 801b438:	429d      	cmp	r5, r3
 801b43a:	dc02      	bgt.n	801b442 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b43c:	429a      	cmp	r2, r3
 801b43e:	dadf      	bge.n	801b400 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b440:	e7f1      	b.n	801b426 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b442:	2000      	movs	r0, #0
 801b444:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b446 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b448:	4604      	mov	r4, r0
 801b44a:	4617      	mov	r7, r2
 801b44c:	461e      	mov	r6, r3
 801b44e:	b911      	cbnz	r1, 801b456 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b450:	2500      	movs	r5, #0
 801b452:	4628      	mov	r0, r5
 801b454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b456:	290a      	cmp	r1, #10
 801b458:	d0fa      	beq.n	801b450 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b45a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b45e:	4291      	cmp	r1, r2
 801b460:	d0f6      	beq.n	801b450 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b462:	f242 020b 	movw	r2, #8203	; 0x200b
 801b466:	4291      	cmp	r1, r2
 801b468:	d0f2      	beq.n	801b450 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b46a:	f7ff ffaf 	bl	801b3cc <_ZNK8touchgfx9ConstFont4findEt>
 801b46e:	4605      	mov	r5, r0
 801b470:	b950      	cbnz	r0, 801b488 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b472:	6823      	ldr	r3, [r4, #0]
 801b474:	4620      	mov	r0, r4
 801b476:	691b      	ldr	r3, [r3, #16]
 801b478:	4798      	blx	r3
 801b47a:	4601      	mov	r1, r0
 801b47c:	4620      	mov	r0, r4
 801b47e:	f7ff ffa5 	bl	801b3cc <_ZNK8touchgfx9ConstFont4findEt>
 801b482:	4605      	mov	r5, r0
 801b484:	2800      	cmp	r0, #0
 801b486:	d0e3      	beq.n	801b450 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b488:	6823      	ldr	r3, [r4, #0]
 801b48a:	4629      	mov	r1, r5
 801b48c:	4620      	mov	r0, r4
 801b48e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b490:	4798      	blx	r3
 801b492:	6038      	str	r0, [r7, #0]
 801b494:	6823      	ldr	r3, [r4, #0]
 801b496:	4620      	mov	r0, r4
 801b498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b49a:	4798      	blx	r3
 801b49c:	7030      	strb	r0, [r6, #0]
 801b49e:	e7d8      	b.n	801b452 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b4a0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b4a0:	2002      	movs	r0, #2
 801b4a2:	4770      	bx	lr

0801b4a4 <_ZN8touchgfx12GestureEventD1Ev>:
 801b4a4:	4770      	bx	lr

0801b4a6 <_ZN8touchgfx12GestureEventD0Ev>:
 801b4a6:	b510      	push	{r4, lr}
 801b4a8:	4604      	mov	r4, r0
 801b4aa:	210c      	movs	r1, #12
 801b4ac:	f003 f9c0 	bl	801e830 <_ZdlPvj>
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	bd10      	pop	{r4, pc}

0801b4b4 <_ZN8touchgfx12TextProviderC1Ev>:
 801b4b4:	b538      	push	{r3, r4, r5, lr}
 801b4b6:	2500      	movs	r5, #0
 801b4b8:	2302      	movs	r3, #2
 801b4ba:	4604      	mov	r4, r0
 801b4bc:	220e      	movs	r2, #14
 801b4be:	7403      	strb	r3, [r0, #16]
 801b4c0:	4629      	mov	r1, r5
 801b4c2:	6145      	str	r5, [r0, #20]
 801b4c4:	7605      	strb	r5, [r0, #24]
 801b4c6:	83c5      	strh	r5, [r0, #30]
 801b4c8:	8405      	strh	r5, [r0, #32]
 801b4ca:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b4cc:	8705      	strh	r5, [r0, #56]	; 0x38
 801b4ce:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801b4d0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801b4d4:	e9c0 5500 	strd	r5, r5, [r0]
 801b4d8:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801b4dc:	304c      	adds	r0, #76	; 0x4c
 801b4de:	f003 fb51 	bl	801eb84 <memset>
 801b4e2:	2301      	movs	r3, #1
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801b4ea:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b4ee:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801b4f2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801b4f6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801b4fa:	f7fb f833 	bl	8016564 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b4fe:	4620      	mov	r0, r4
 801b500:	bd38      	pop	{r3, r4, r5, pc}

0801b502 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b502:	b530      	push	{r4, r5, lr}
 801b504:	2500      	movs	r5, #0
 801b506:	2401      	movs	r4, #1
 801b508:	6843      	ldr	r3, [r0, #4]
 801b50a:	b913      	cbnz	r3, 801b512 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b50c:	6803      	ldr	r3, [r0, #0]
 801b50e:	b313      	cbz	r3, 801b556 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b510:	6043      	str	r3, [r0, #4]
 801b512:	7e03      	ldrb	r3, [r0, #24]
 801b514:	b143      	cbz	r3, 801b528 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b516:	6943      	ldr	r3, [r0, #20]
 801b518:	b12b      	cbz	r3, 801b526 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b51a:	881a      	ldrh	r2, [r3, #0]
 801b51c:	b11a      	cbz	r2, 801b526 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b51e:	1c9a      	adds	r2, r3, #2
 801b520:	6142      	str	r2, [r0, #20]
 801b522:	8818      	ldrh	r0, [r3, #0]
 801b524:	bd30      	pop	{r4, r5, pc}
 801b526:	7605      	strb	r5, [r0, #24]
 801b528:	6843      	ldr	r3, [r0, #4]
 801b52a:	8819      	ldrh	r1, [r3, #0]
 801b52c:	b199      	cbz	r1, 801b556 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b52e:	1c9a      	adds	r2, r3, #2
 801b530:	2902      	cmp	r1, #2
 801b532:	6042      	str	r2, [r0, #4]
 801b534:	d1f5      	bne.n	801b522 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b536:	7c03      	ldrb	r3, [r0, #16]
 801b538:	2b01      	cmp	r3, #1
 801b53a:	d8e5      	bhi.n	801b508 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b53c:	1c5a      	adds	r2, r3, #1
 801b53e:	3302      	adds	r3, #2
 801b540:	7402      	strb	r2, [r0, #16]
 801b542:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801b546:	6143      	str	r3, [r0, #20]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d0dd      	beq.n	801b508 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b54c:	881b      	ldrh	r3, [r3, #0]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d0da      	beq.n	801b508 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b552:	7604      	strb	r4, [r0, #24]
 801b554:	e7d8      	b.n	801b508 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b556:	2000      	movs	r0, #0
 801b558:	e7e4      	b.n	801b524 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b55a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801b55a:	6001      	str	r1, [r0, #0]
 801b55c:	2100      	movs	r1, #0
 801b55e:	b430      	push	{r4, r5}
 801b560:	6041      	str	r1, [r0, #4]
 801b562:	6815      	ldr	r5, [r2, #0]
 801b564:	6085      	str	r5, [r0, #8]
 801b566:	6852      	ldr	r2, [r2, #4]
 801b568:	6443      	str	r3, [r0, #68]	; 0x44
 801b56a:	9b02      	ldr	r3, [sp, #8]
 801b56c:	60c2      	str	r2, [r0, #12]
 801b56e:	7401      	strb	r1, [r0, #16]
 801b570:	6141      	str	r1, [r0, #20]
 801b572:	7601      	strb	r1, [r0, #24]
 801b574:	8701      	strh	r1, [r0, #56]	; 0x38
 801b576:	8401      	strh	r1, [r0, #32]
 801b578:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b57c:	6483      	str	r3, [r0, #72]	; 0x48
 801b57e:	bc30      	pop	{r4, r5}
 801b580:	f7fa bff0 	b.w	8016564 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801b584 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b584:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b586:	4605      	mov	r5, r0
 801b588:	4608      	mov	r0, r1
 801b58a:	b1f1      	cbz	r1, 801b5ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b58c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801b590:	460b      	mov	r3, r1
 801b592:	f101 0708 	add.w	r7, r1, #8
 801b596:	4622      	mov	r2, r4
 801b598:	6818      	ldr	r0, [r3, #0]
 801b59a:	3308      	adds	r3, #8
 801b59c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b5a0:	4626      	mov	r6, r4
 801b5a2:	42bb      	cmp	r3, r7
 801b5a4:	c603      	stmia	r6!, {r0, r1}
 801b5a6:	4634      	mov	r4, r6
 801b5a8:	d1f6      	bne.n	801b598 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b5aa:	6818      	ldr	r0, [r3, #0]
 801b5ac:	6030      	str	r0, [r6, #0]
 801b5ae:	4610      	mov	r0, r2
 801b5b0:	889b      	ldrh	r3, [r3, #4]
 801b5b2:	80b3      	strh	r3, [r6, #4]
 801b5b4:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801b5b8:	015b      	lsls	r3, r3, #5
 801b5ba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b5be:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801b5c2:	430b      	orrs	r3, r1
 801b5c4:	425b      	negs	r3, r3
 801b5c6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b5cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b5cc:	b538      	push	{r3, r4, r5, lr}
 801b5ce:	460c      	mov	r4, r1
 801b5d0:	6811      	ldr	r1, [r2, #0]
 801b5d2:	4610      	mov	r0, r2
 801b5d4:	68cd      	ldr	r5, [r1, #12]
 801b5d6:	4619      	mov	r1, r3
 801b5d8:	47a8      	blx	r5
 801b5da:	2800      	cmp	r0, #0
 801b5dc:	bf08      	it	eq
 801b5de:	4620      	moveq	r0, r4
 801b5e0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b5e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5e6:	4604      	mov	r4, r0
 801b5e8:	4615      	mov	r5, r2
 801b5ea:	4608      	mov	r0, r1
 801b5ec:	b93a      	cbnz	r2, 801b5fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b5ee:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801b5f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801b5f6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801b5fa:	4628      	mov	r0, r5
 801b5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b5fe:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801b602:	8893      	ldrh	r3, [r2, #4]
 801b604:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801b608:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b60c:	79ee      	ldrb	r6, [r5, #7]
 801b60e:	4316      	orrs	r6, r2
 801b610:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801b614:	189a      	adds	r2, r3, r2
 801b616:	b2b7      	uxth	r7, r6
 801b618:	b291      	uxth	r1, r2
 801b61a:	291d      	cmp	r1, #29
 801b61c:	f200 8084 	bhi.w	801b728 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801b620:	2201      	movs	r2, #1
 801b622:	10f6      	asrs	r6, r6, #3
 801b624:	408a      	lsls	r2, r1
 801b626:	4978      	ldr	r1, [pc, #480]	; (801b808 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801b628:	420a      	tst	r2, r1
 801b62a:	d12e      	bne.n	801b68a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801b62c:	f412 7f60 	tst.w	r2, #896	; 0x380
 801b630:	d07a      	beq.n	801b728 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801b632:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801b636:	462b      	mov	r3, r5
 801b638:	f105 0e08 	add.w	lr, r5, #8
 801b63c:	4615      	mov	r5, r2
 801b63e:	6818      	ldr	r0, [r3, #0]
 801b640:	3308      	adds	r3, #8
 801b642:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b646:	4694      	mov	ip, r2
 801b648:	4573      	cmp	r3, lr
 801b64a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b64e:	4662      	mov	r2, ip
 801b650:	d1f5      	bne.n	801b63e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801b652:	6818      	ldr	r0, [r3, #0]
 801b654:	f8cc 0000 	str.w	r0, [ip]
 801b658:	889b      	ldrh	r3, [r3, #4]
 801b65a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801b65e:	b2b3      	uxth	r3, r6
 801b660:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801b664:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801b668:	1aca      	subs	r2, r1, r3
 801b66a:	1bcf      	subs	r7, r1, r7
 801b66c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801b670:	b292      	uxth	r2, r2
 801b672:	1afb      	subs	r3, r7, r3
 801b674:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801b678:	10d2      	asrs	r2, r2, #3
 801b67a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801b67e:	4302      	orrs	r2, r0
 801b680:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801b684:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801b688:	e7b7      	b.n	801b5fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b68a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b68c:	b92b      	cbnz	r3, 801b69a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801b68e:	4b5f      	ldr	r3, [pc, #380]	; (801b80c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801b690:	21c0      	movs	r1, #192	; 0xc0
 801b692:	4a5f      	ldr	r2, [pc, #380]	; (801b810 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801b694:	485f      	ldr	r0, [pc, #380]	; (801b814 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801b696:	f003 f8f9 	bl	801e88c <__assert_func>
 801b69a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b69c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b6a0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801b6a2:	f640 6333 	movw	r3, #3635	; 0xe33
 801b6a6:	4299      	cmp	r1, r3
 801b6a8:	d110      	bne.n	801b6cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801b6aa:	6803      	ldr	r3, [r0, #0]
 801b6ac:	68db      	ldr	r3, [r3, #12]
 801b6ae:	4798      	blx	r3
 801b6b0:	7b41      	ldrb	r1, [r0, #13]
 801b6b2:	00cb      	lsls	r3, r1, #3
 801b6b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b6b8:	7a03      	ldrb	r3, [r0, #8]
 801b6ba:	0648      	lsls	r0, r1, #25
 801b6bc:	ea43 0302 	orr.w	r3, r3, r2
 801b6c0:	bf44      	itt	mi
 801b6c2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b6c6:	b21b      	sxthmi	r3, r3
 801b6c8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b6cc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801b6d0:	462a      	mov	r2, r5
 801b6d2:	f105 0c08 	add.w	ip, r5, #8
 801b6d6:	443b      	add	r3, r7
 801b6d8:	4433      	add	r3, r6
 801b6da:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801b6de:	b29b      	uxth	r3, r3
 801b6e0:	4635      	mov	r5, r6
 801b6e2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b6e6:	6810      	ldr	r0, [r2, #0]
 801b6e8:	3208      	adds	r2, #8
 801b6ea:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801b6ee:	4637      	mov	r7, r6
 801b6f0:	4562      	cmp	r2, ip
 801b6f2:	c703      	stmia	r7!, {r0, r1}
 801b6f4:	463e      	mov	r6, r7
 801b6f6:	d1f6      	bne.n	801b6e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801b6f8:	6810      	ldr	r0, [r2, #0]
 801b6fa:	6038      	str	r0, [r7, #0]
 801b6fc:	8892      	ldrh	r2, [r2, #4]
 801b6fe:	80ba      	strh	r2, [r7, #4]
 801b700:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801b704:	10db      	asrs	r3, r3, #3
 801b706:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801b70a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b70e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b712:	4313      	orrs	r3, r2
 801b714:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801b718:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b71c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801b720:	1a9b      	subs	r3, r3, r2
 801b722:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801b726:	e768      	b.n	801b5fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b728:	f023 0204 	bic.w	r2, r3, #4
 801b72c:	f640 611b 	movw	r1, #3611	; 0xe1b
 801b730:	428a      	cmp	r2, r1
 801b732:	d003      	beq.n	801b73c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801b734:	f640 621d 	movw	r2, #3613	; 0xe1d
 801b738:	4293      	cmp	r3, r2
 801b73a:	d120      	bne.n	801b77e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801b73c:	3b01      	subs	r3, #1
 801b73e:	4602      	mov	r2, r0
 801b740:	4629      	mov	r1, r5
 801b742:	4620      	mov	r0, r4
 801b744:	b29b      	uxth	r3, r3
 801b746:	f7ff ff41 	bl	801b5cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b74a:	7b41      	ldrb	r1, [r0, #13]
 801b74c:	00cb      	lsls	r3, r1, #3
 801b74e:	0649      	lsls	r1, r1, #25
 801b750:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b754:	7a03      	ldrb	r3, [r0, #8]
 801b756:	ea43 0302 	orr.w	r3, r3, r2
 801b75a:	bf44      	itt	mi
 801b75c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b760:	b21b      	sxthmi	r3, r3
 801b762:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b766:	7b6b      	ldrb	r3, [r5, #13]
 801b768:	7aaa      	ldrb	r2, [r5, #10]
 801b76a:	005b      	lsls	r3, r3, #1
 801b76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b770:	4313      	orrs	r3, r2
 801b772:	115a      	asrs	r2, r3, #5
 801b774:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801b778:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801b77c:	e035      	b.n	801b7ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801b77e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801b782:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801b786:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801b78a:	7a2a      	ldrb	r2, [r5, #8]
 801b78c:	ea42 0201 	orr.w	r2, r2, r1
 801b790:	f640 6109 	movw	r1, #3593	; 0xe09
 801b794:	bf1c      	itt	ne
 801b796:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801b79a:	b212      	sxthne	r2, r2
 801b79c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801b7a0:	f023 0210 	bic.w	r2, r3, #16
 801b7a4:	428a      	cmp	r2, r1
 801b7a6:	d003      	beq.n	801b7b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801b7a8:	f640 6213 	movw	r2, #3603	; 0xe13
 801b7ac:	4293      	cmp	r3, r2
 801b7ae:	d129      	bne.n	801b804 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801b7b0:	7b6e      	ldrb	r6, [r5, #13]
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	0076      	lsls	r6, r6, #1
 801b7b6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b7ba:	7aae      	ldrb	r6, [r5, #10]
 801b7bc:	4316      	orrs	r6, r2
 801b7be:	f640 6213 	movw	r2, #3603	; 0xe13
 801b7c2:	4293      	cmp	r3, r2
 801b7c4:	4602      	mov	r2, r0
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	bf16      	itet	ne
 801b7ca:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b7ce:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801b7d2:	b29b      	uxthne	r3, r3
 801b7d4:	f7ff fefa 	bl	801b5cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b7d8:	7b43      	ldrb	r3, [r0, #13]
 801b7da:	7a82      	ldrb	r2, [r0, #10]
 801b7dc:	005b      	lsls	r3, r3, #1
 801b7de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7e2:	4313      	orrs	r3, r2
 801b7e4:	1af6      	subs	r6, r6, r3
 801b7e6:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801b7ea:	7b69      	ldrb	r1, [r5, #13]
 801b7ec:	00cb      	lsls	r3, r1, #3
 801b7ee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b7f2:	7a2b      	ldrb	r3, [r5, #8]
 801b7f4:	4313      	orrs	r3, r2
 801b7f6:	064a      	lsls	r2, r1, #25
 801b7f8:	bf44      	itt	mi
 801b7fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b7fe:	b21b      	sxthmi	r3, r3
 801b800:	1bdb      	subs	r3, r3, r7
 801b802:	e73f      	b.n	801b684 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801b804:	2300      	movs	r3, #0
 801b806:	e7b7      	b.n	801b778 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801b808:	3fc00079 	.word	0x3fc00079
 801b80c:	08022e38 	.word	0x08022e38
 801b810:	080230aa 	.word	0x080230aa
 801b814:	08022e41 	.word	0x08022e41

0801b818 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801b818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b81c:	4604      	mov	r4, r0
 801b81e:	b942      	cbnz	r2, 801b832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801b820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b824:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801b828:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801b82c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801b830:	e046      	b.n	801b8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801b832:	7b51      	ldrb	r1, [r2, #13]
 801b834:	8893      	ldrh	r3, [r2, #4]
 801b836:	010f      	lsls	r7, r1, #4
 801b838:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b83c:	79d7      	ldrb	r7, [r2, #7]
 801b83e:	4307      	orrs	r7, r0
 801b840:	2f04      	cmp	r7, #4
 801b842:	b2bd      	uxth	r5, r7
 801b844:	bfcc      	ite	gt
 801b846:	08bf      	lsrgt	r7, r7, #2
 801b848:	2701      	movle	r7, #1
 801b84a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801b84e:	f200 80ab 	bhi.w	801b9a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801b852:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801b856:	4283      	cmp	r3, r0
 801b858:	d216      	bcs.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b85a:	f240 605b 	movw	r0, #1627	; 0x65b
 801b85e:	4283      	cmp	r3, r0
 801b860:	d859      	bhi.n	801b916 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801b862:	f240 6057 	movw	r0, #1623	; 0x657
 801b866:	4283      	cmp	r3, r0
 801b868:	d20e      	bcs.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b86a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b86e:	d24a      	bcs.n	801b906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801b870:	f240 604e 	movw	r0, #1614	; 0x64e
 801b874:	4283      	cmp	r3, r0
 801b876:	d207      	bcs.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b878:	f240 601a 	movw	r0, #1562	; 0x61a
 801b87c:	4283      	cmp	r3, r0
 801b87e:	d02a      	beq.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b880:	d821      	bhi.n	801b8c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801b882:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801b886:	d35b      	bcc.n	801b940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b888:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801b88c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b890:	f040 80d0 	bne.w	801ba34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b894:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801b898:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b89c:	f040 80ca 	bne.w	801ba34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b8a0:	00cb      	lsls	r3, r1, #3
 801b8a2:	0649      	lsls	r1, r1, #25
 801b8a4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b8a8:	7a13      	ldrb	r3, [r2, #8]
 801b8aa:	ea43 0300 	orr.w	r3, r3, r0
 801b8ae:	bf44      	itt	mi
 801b8b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b8b4:	b21b      	sxthmi	r3, r3
 801b8b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b8ba:	1b5d      	subs	r5, r3, r5
 801b8bc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b8c0:	4610      	mov	r0, r2
 801b8c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8c6:	f240 604b 	movw	r0, #1611	; 0x64b
 801b8ca:	4283      	cmp	r3, r0
 801b8cc:	d338      	bcc.n	801b940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b8ce:	f240 604c 	movw	r0, #1612	; 0x64c
 801b8d2:	4283      	cmp	r3, r0
 801b8d4:	d9d8      	bls.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b8d6:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801b8da:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801b8de:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b8e2:	f040 80f2 	bne.w	801baca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b8e6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b8ea:	f040 80ee 	bne.w	801baca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b8ee:	00cb      	lsls	r3, r1, #3
 801b8f0:	064e      	lsls	r6, r1, #25
 801b8f2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b8f6:	7a13      	ldrb	r3, [r2, #8]
 801b8f8:	ea43 0300 	orr.w	r3, r3, r0
 801b8fc:	bf44      	itt	mi
 801b8fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b902:	b21b      	sxthmi	r3, r3
 801b904:	e7d9      	b.n	801b8ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801b906:	f240 6054 	movw	r0, #1620	; 0x654
 801b90a:	4283      	cmp	r3, r0
 801b90c:	d8e3      	bhi.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b90e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b912:	d9e0      	bls.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b914:	e7b8      	b.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b916:	f240 6074 	movw	r0, #1652	; 0x674
 801b91a:	4283      	cmp	r3, r0
 801b91c:	d0b4      	beq.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b91e:	d82d      	bhi.n	801b97c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801b920:	f240 605e 	movw	r0, #1630	; 0x65e
 801b924:	4283      	cmp	r3, r0
 801b926:	d804      	bhi.n	801b932 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801b928:	f240 605d 	movw	r0, #1629	; 0x65d
 801b92c:	4283      	cmp	r3, r0
 801b92e:	d3d2      	bcc.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b930:	e7aa      	b.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b932:	f240 605f 	movw	r0, #1631	; 0x65f
 801b936:	4283      	cmp	r3, r0
 801b938:	d0cd      	beq.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b93a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801b93e:	d0a3      	beq.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b940:	00cb      	lsls	r3, r1, #3
 801b942:	0649      	lsls	r1, r1, #25
 801b944:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b948:	7a13      	ldrb	r3, [r2, #8]
 801b94a:	ea43 0300 	orr.w	r3, r3, r0
 801b94e:	bf44      	itt	mi
 801b950:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b954:	b21b      	sxthmi	r3, r3
 801b956:	1b5d      	subs	r5, r3, r5
 801b958:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b95c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b960:	7b53      	ldrb	r3, [r2, #13]
 801b962:	015b      	lsls	r3, r3, #5
 801b964:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b968:	7993      	ldrb	r3, [r2, #6]
 801b96a:	430b      	orrs	r3, r1
 801b96c:	2105      	movs	r1, #5
 801b96e:	005b      	lsls	r3, r3, #1
 801b970:	fb93 f3f1 	sdiv	r3, r3, r1
 801b974:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b978:	440b      	add	r3, r1
 801b97a:	e757      	b.n	801b82c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b97c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801b980:	4283      	cmp	r3, r0
 801b982:	d809      	bhi.n	801b998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801b984:	f240 60df 	movw	r0, #1759	; 0x6df
 801b988:	4283      	cmp	r3, r0
 801b98a:	f4bf af7d 	bcs.w	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b98e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801b992:	2b05      	cmp	r3, #5
 801b994:	d8d4      	bhi.n	801b940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b996:	e777      	b.n	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b998:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801b99c:	4283      	cmp	r3, r0
 801b99e:	d09a      	beq.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b9a0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801b9a4:	4283      	cmp	r3, r0
 801b9a6:	e7ca      	b.n	801b93e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801b9a8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801b9ac:	d22b      	bcs.n	801ba06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801b9ae:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801b9b2:	4283      	cmp	r3, r0
 801b9b4:	d28f      	bcs.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b9b6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b9ba:	4283      	cmp	r3, r0
 801b9bc:	d816      	bhi.n	801b9ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801b9be:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801b9c2:	4283      	cmp	r3, r0
 801b9c4:	f4bf af60 	bcs.w	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b9c8:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801b9cc:	4283      	cmp	r3, r0
 801b9ce:	d80a      	bhi.n	801b9e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801b9d0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801b9d4:	4283      	cmp	r3, r0
 801b9d6:	f4bf af57 	bcs.w	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b9da:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801b9de:	4283      	cmp	r3, r0
 801b9e0:	f43f af79 	beq.w	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b9e4:	e7ac      	b.n	801b940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b9e6:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801b9ea:	e7f8      	b.n	801b9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801b9ec:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801b9f0:	4283      	cmp	r3, r0
 801b9f2:	d802      	bhi.n	801b9fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801b9f4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b9f8:	e798      	b.n	801b92c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801b9fa:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801b9fe:	4283      	cmp	r3, r0
 801ba00:	f47f af42 	bne.w	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ba04:	e767      	b.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ba06:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ba0a:	4283      	cmp	r3, r0
 801ba0c:	f43f af63 	beq.w	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ba10:	d802      	bhi.n	801ba18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ba12:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ba16:	e7f2      	b.n	801b9fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801ba18:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ba1c:	4283      	cmp	r3, r0
 801ba1e:	d805      	bhi.n	801ba2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801ba20:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ba24:	4283      	cmp	r3, r0
 801ba26:	f4ff af2f 	bcc.w	801b888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ba2a:	e754      	b.n	801b8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ba2c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ba30:	4283      	cmp	r3, r0
 801ba32:	e7af      	b.n	801b994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ba34:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ba38:	4617      	mov	r7, r2
 801ba3a:	f102 0808 	add.w	r8, r2, #8
 801ba3e:	4666      	mov	r6, ip
 801ba40:	6838      	ldr	r0, [r7, #0]
 801ba42:	3708      	adds	r7, #8
 801ba44:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ba48:	46e6      	mov	lr, ip
 801ba4a:	4547      	cmp	r7, r8
 801ba4c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ba50:	46f4      	mov	ip, lr
 801ba52:	d1f5      	bne.n	801ba40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ba54:	6838      	ldr	r0, [r7, #0]
 801ba56:	f8ce 0000 	str.w	r0, [lr]
 801ba5a:	88b9      	ldrh	r1, [r7, #4]
 801ba5c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ba60:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ba64:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ba68:	d009      	beq.n	801ba7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ba6a:	7b51      	ldrb	r1, [r2, #13]
 801ba6c:	7992      	ldrb	r2, [r2, #6]
 801ba6e:	0149      	lsls	r1, r1, #5
 801ba70:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ba74:	4311      	orrs	r1, r2
 801ba76:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ba7a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ba7e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ba82:	d00d      	beq.n	801baa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ba84:	442b      	add	r3, r5
 801ba86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ba8a:	b29b      	uxth	r3, r3
 801ba8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ba90:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ba94:	10db      	asrs	r3, r3, #3
 801ba96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ba9a:	4313      	orrs	r3, r2
 801ba9c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801baa0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801baa4:	00cb      	lsls	r3, r1, #3
 801baa6:	064f      	lsls	r7, r1, #25
 801baa8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801baac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801bab0:	ea43 0302 	orr.w	r3, r3, r2
 801bab4:	bf44      	itt	mi
 801bab6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801baba:	b21b      	sxthmi	r3, r3
 801babc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bac0:	1b5d      	subs	r5, r3, r5
 801bac2:	4632      	mov	r2, r6
 801bac4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bac8:	e6fa      	b.n	801b8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801baca:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801bace:	4694      	mov	ip, r2
 801bad0:	f102 0908 	add.w	r9, r2, #8
 801bad4:	4676      	mov	r6, lr
 801bad6:	f8dc 0000 	ldr.w	r0, [ip]
 801bada:	f10c 0c08 	add.w	ip, ip, #8
 801bade:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801bae2:	46f0      	mov	r8, lr
 801bae4:	45cc      	cmp	ip, r9
 801bae6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801baea:	46c6      	mov	lr, r8
 801baec:	d1f3      	bne.n	801bad6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801baee:	f8dc 0000 	ldr.w	r0, [ip]
 801baf2:	f8c8 0000 	str.w	r0, [r8]
 801baf6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801bafa:	f8a8 1004 	strh.w	r1, [r8, #4]
 801bafe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801bb02:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bb06:	d009      	beq.n	801bb1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801bb08:	7b51      	ldrb	r1, [r2, #13]
 801bb0a:	7992      	ldrb	r2, [r2, #6]
 801bb0c:	0149      	lsls	r1, r1, #5
 801bb0e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bb12:	4311      	orrs	r1, r2
 801bb14:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bb18:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801bb1c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bb20:	d00d      	beq.n	801bb3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801bb22:	1bdb      	subs	r3, r3, r7
 801bb24:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801bb28:	b29b      	uxth	r3, r3
 801bb2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bb2e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bb32:	10db      	asrs	r3, r3, #3
 801bb34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bb38:	4313      	orrs	r3, r2
 801bb3a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801bb3e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801bb42:	00cb      	lsls	r3, r1, #3
 801bb44:	0648      	lsls	r0, r1, #25
 801bb46:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb4a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801bb4e:	ea43 0302 	orr.w	r3, r3, r2
 801bb52:	bf44      	itt	mi
 801bb54:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bb58:	b21b      	sxthmi	r3, r3
 801bb5a:	e7b1      	b.n	801bac0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801bb5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb60:	461e      	mov	r6, r3
 801bb62:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801bb64:	4604      	mov	r4, r0
 801bb66:	4617      	mov	r7, r2
 801bb68:	b92b      	cbnz	r3, 801bb76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801bb6a:	4b25      	ldr	r3, [pc, #148]	; (801bc00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801bb6c:	21c0      	movs	r1, #192	; 0xc0
 801bb6e:	4a25      	ldr	r2, [pc, #148]	; (801bc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801bb70:	4825      	ldr	r0, [pc, #148]	; (801bc08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801bb72:	f002 fe8b 	bl	801e88c <__assert_func>
 801bb76:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bb78:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bb7c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bb80:	f7fa fc4a 	bl	8016418 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bb84:	4605      	mov	r5, r0
 801bb86:	b918      	cbnz	r0, 801bb90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801bb88:	6030      	str	r0, [r6, #0]
 801bb8a:	4628      	mov	r0, r5
 801bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb90:	683b      	ldr	r3, [r7, #0]
 801bb92:	4601      	mov	r1, r0
 801bb94:	4638      	mov	r0, r7
 801bb96:	68db      	ldr	r3, [r3, #12]
 801bb98:	4798      	blx	r3
 801bb9a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801bb9e:	4602      	mov	r2, r0
 801bba0:	6030      	str	r0, [r6, #0]
 801bba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bba6:	d213      	bcs.n	801bbd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801bba8:	4643      	mov	r3, r8
 801bbaa:	4639      	mov	r1, r7
 801bbac:	4620      	mov	r0, r4
 801bbae:	f7ff fe33 	bl	801b818 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bbb2:	6030      	str	r0, [r6, #0]
 801bbb4:	6833      	ldr	r3, [r6, #0]
 801bbb6:	b143      	cbz	r3, 801bbca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801bbb8:	7b5a      	ldrb	r2, [r3, #13]
 801bbba:	7a9b      	ldrb	r3, [r3, #10]
 801bbbc:	0052      	lsls	r2, r2, #1
 801bbbe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bbc2:	4313      	orrs	r3, r2
 801bbc4:	bf0c      	ite	eq
 801bbc6:	2301      	moveq	r3, #1
 801bbc8:	2300      	movne	r3, #0
 801bbca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801bbce:	e7dc      	b.n	801bb8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801bbd0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801bbd4:	b29b      	uxth	r3, r3
 801bbd6:	2b7f      	cmp	r3, #127	; 0x7f
 801bbd8:	d804      	bhi.n	801bbe4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801bbda:	4639      	mov	r1, r7
 801bbdc:	4620      	mov	r0, r4
 801bbde:	f7ff fd01 	bl	801b5e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bbe2:	e7e6      	b.n	801bbb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801bbe4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d0e3      	beq.n	801bbb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801bbec:	f640 1302 	movw	r3, #2306	; 0x902
 801bbf0:	429d      	cmp	r5, r3
 801bbf2:	d1df      	bne.n	801bbb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801bbf4:	4601      	mov	r1, r0
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	f7ff fcc4 	bl	801b584 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bbfc:	e7d9      	b.n	801bbb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801bbfe:	bf00      	nop
 801bc00:	08022e38 	.word	0x08022e38
 801bc04:	080230aa 	.word	0x080230aa
 801bc08:	08022e41 	.word	0x08022e41

0801bc0c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801bc0c:	b510      	push	{r4, lr}
 801bc0e:	4604      	mov	r4, r0
 801bc10:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801bc14:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801bc16:	b9d9      	cbnz	r1, 801bc50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801bc18:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801bc1a:	2b0a      	cmp	r3, #10
 801bc1c:	d037      	beq.n	801bc8e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801bc1e:	4620      	mov	r0, r4
 801bc20:	f7ff fc6f 	bl	801b502 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bc24:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801bc26:	2b09      	cmp	r3, #9
 801bc28:	d906      	bls.n	801bc38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801bc2a:	4b19      	ldr	r3, [pc, #100]	; (801bc90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801bc2c:	f44f 7182 	mov.w	r1, #260	; 0x104
 801bc30:	4a18      	ldr	r2, [pc, #96]	; (801bc94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801bc32:	4819      	ldr	r0, [pc, #100]	; (801bc98 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801bc34:	f002 fe2a 	bl	801e88c <__assert_func>
 801bc38:	1c5a      	adds	r2, r3, #1
 801bc3a:	8722      	strh	r2, [r4, #56]	; 0x38
 801bc3c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801bc3e:	4413      	add	r3, r2
 801bc40:	b29b      	uxth	r3, r3
 801bc42:	2b09      	cmp	r3, #9
 801bc44:	bf88      	it	hi
 801bc46:	3b0a      	subhi	r3, #10
 801bc48:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bc4c:	8458      	strh	r0, [r3, #34]	; 0x22
 801bc4e:	e7e3      	b.n	801bc18 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801bc50:	2b0a      	cmp	r3, #10
 801bc52:	d01c      	beq.n	801bc8e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801bc54:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801bc56:	3901      	subs	r1, #1
 801bc58:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801bc5c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801bc5e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801bc62:	1c51      	adds	r1, r2, #1
 801bc64:	b289      	uxth	r1, r1
 801bc66:	2901      	cmp	r1, #1
 801bc68:	bf8a      	itet	hi
 801bc6a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801bc6e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801bc70:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801bc72:	2b09      	cmp	r3, #9
 801bc74:	d8d9      	bhi.n	801bc2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801bc76:	1c5a      	adds	r2, r3, #1
 801bc78:	8722      	strh	r2, [r4, #56]	; 0x38
 801bc7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801bc7c:	4413      	add	r3, r2
 801bc7e:	b29b      	uxth	r3, r3
 801bc80:	2b09      	cmp	r3, #9
 801bc82:	bf88      	it	hi
 801bc84:	3b0a      	subhi	r3, #10
 801bc86:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bc8a:	8458      	strh	r0, [r3, #34]	; 0x22
 801bc8c:	e7c0      	b.n	801bc10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801bc8e:	bd10      	pop	{r4, pc}
 801bc90:	08022e6d 	.word	0x08022e6d
 801bc94:	08023200 	.word	0x08023200
 801bc98:	08022e41 	.word	0x08022e41

0801bc9c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801bc9c:	b538      	push	{r3, r4, r5, lr}
 801bc9e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801bca0:	4604      	mov	r4, r0
 801bca2:	b92a      	cbnz	r2, 801bcb0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801bca4:	4b13      	ldr	r3, [pc, #76]	; (801bcf4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801bca6:	21d5      	movs	r1, #213	; 0xd5
 801bca8:	4a13      	ldr	r2, [pc, #76]	; (801bcf8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801bcaa:	4814      	ldr	r0, [pc, #80]	; (801bcfc <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801bcac:	f002 fdee 	bl	801e88c <__assert_func>
 801bcb0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bcb2:	3a01      	subs	r2, #1
 801bcb4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801bcb8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801bcba:	8702      	strh	r2, [r0, #56]	; 0x38
 801bcbc:	1c5a      	adds	r2, r3, #1
 801bcbe:	b292      	uxth	r2, r2
 801bcc0:	2a09      	cmp	r2, #9
 801bcc2:	bf8a      	itet	hi
 801bcc4:	3b09      	subhi	r3, #9
 801bcc6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801bcc8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801bcca:	f7ff ff9f 	bl	801bc0c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bcce:	8c23      	ldrh	r3, [r4, #32]
 801bcd0:	2b01      	cmp	r3, #1
 801bcd2:	bf9c      	itt	ls
 801bcd4:	3301      	addls	r3, #1
 801bcd6:	8423      	strhls	r3, [r4, #32]
 801bcd8:	8be3      	ldrh	r3, [r4, #30]
 801bcda:	b90b      	cbnz	r3, 801bce0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801bcdc:	2302      	movs	r3, #2
 801bcde:	83e3      	strh	r3, [r4, #30]
 801bce0:	8be3      	ldrh	r3, [r4, #30]
 801bce2:	4628      	mov	r0, r5
 801bce4:	3b01      	subs	r3, #1
 801bce6:	b29b      	uxth	r3, r3
 801bce8:	83e3      	strh	r3, [r4, #30]
 801bcea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bcee:	8365      	strh	r5, [r4, #26]
 801bcf0:	bd38      	pop	{r3, r4, r5, pc}
 801bcf2:	bf00      	nop
 801bcf4:	08022e38 	.word	0x08022e38
 801bcf8:	08023155 	.word	0x08023155
 801bcfc:	08022e41 	.word	0x08022e41

0801bd00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801bd00:	428a      	cmp	r2, r1
 801bd02:	b538      	push	{r3, r4, r5, lr}
 801bd04:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801bd06:	d90c      	bls.n	801bd22 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801bd08:	b92c      	cbnz	r4, 801bd16 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801bd0a:	4b1c      	ldr	r3, [pc, #112]	; (801bd7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801bd0c:	21e1      	movs	r1, #225	; 0xe1
 801bd0e:	4a1c      	ldr	r2, [pc, #112]	; (801bd80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801bd10:	481c      	ldr	r0, [pc, #112]	; (801bd84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801bd12:	f002 fdbb 	bl	801e88c <__assert_func>
 801bd16:	3c01      	subs	r4, #1
 801bd18:	4b1b      	ldr	r3, [pc, #108]	; (801bd88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801bd1a:	4a1c      	ldr	r2, [pc, #112]	; (801bd8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801bd1c:	21c5      	movs	r1, #197	; 0xc5
 801bd1e:	8704      	strh	r4, [r0, #56]	; 0x38
 801bd20:	e7f6      	b.n	801bd10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801bd22:	428c      	cmp	r4, r1
 801bd24:	d203      	bcs.n	801bd2e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801bd26:	4b1a      	ldr	r3, [pc, #104]	; (801bd90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801bd28:	21cb      	movs	r1, #203	; 0xcb
 801bd2a:	4a1a      	ldr	r2, [pc, #104]	; (801bd94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801bd2c:	e7f0      	b.n	801bd10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801bd2e:	1a64      	subs	r4, r4, r1
 801bd30:	250a      	movs	r5, #10
 801bd32:	8704      	strh	r4, [r0, #56]	; 0x38
 801bd34:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801bd36:	4421      	add	r1, r4
 801bd38:	b289      	uxth	r1, r1
 801bd3a:	2909      	cmp	r1, #9
 801bd3c:	bf88      	it	hi
 801bd3e:	390a      	subhi	r1, #10
 801bd40:	86c1      	strh	r1, [r0, #54]	; 0x36
 801bd42:	b1ba      	cbz	r2, 801bd74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801bd44:	3a01      	subs	r2, #1
 801bd46:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801bd48:	b292      	uxth	r2, r2
 801bd4a:	2909      	cmp	r1, #9
 801bd4c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801bd50:	d903      	bls.n	801bd5a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801bd52:	4b11      	ldr	r3, [pc, #68]	; (801bd98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801bd54:	21e6      	movs	r1, #230	; 0xe6
 801bd56:	4a11      	ldr	r2, [pc, #68]	; (801bd9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801bd58:	e7da      	b.n	801bd10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801bd5a:	3101      	adds	r1, #1
 801bd5c:	8701      	strh	r1, [r0, #56]	; 0x38
 801bd5e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801bd60:	b901      	cbnz	r1, 801bd64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801bd62:	86c5      	strh	r5, [r0, #54]	; 0x36
 801bd64:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801bd66:	3901      	subs	r1, #1
 801bd68:	b289      	uxth	r1, r1
 801bd6a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801bd6c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801bd70:	844c      	strh	r4, [r1, #34]	; 0x22
 801bd72:	e7e6      	b.n	801bd42 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801bd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd78:	f7ff bf48 	b.w	801bc0c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bd7c:	08022e38 	.word	0x08022e38
 801bd80:	08022f2e 	.word	0x08022f2e
 801bd84:	08022e41 	.word	0x08022e41
 801bd88:	08022e79 	.word	0x08022e79
 801bd8c:	08022fd8 	.word	0x08022fd8
 801bd90:	08022e87 	.word	0x08022e87
 801bd94:	080232af 	.word	0x080232af
 801bd98:	08022e93 	.word	0x08022e93
 801bd9c:	08022ea6 	.word	0x08022ea6

0801bda0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801bda0:	3a01      	subs	r2, #1
 801bda2:	b570      	push	{r4, r5, r6, lr}
 801bda4:	b292      	uxth	r2, r2
 801bda6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801bdaa:	42b2      	cmp	r2, r6
 801bdac:	d019      	beq.n	801bde2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801bdae:	8c04      	ldrh	r4, [r0, #32]
 801bdb0:	f831 5b02 	ldrh.w	r5, [r1], #2
 801bdb4:	4294      	cmp	r4, r2
 801bdb6:	d805      	bhi.n	801bdc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801bdb8:	4b19      	ldr	r3, [pc, #100]	; (801be20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801bdba:	4a1a      	ldr	r2, [pc, #104]	; (801be24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801bdbc:	21c5      	movs	r1, #197	; 0xc5
 801bdbe:	481a      	ldr	r0, [pc, #104]	; (801be28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801bdc0:	f002 fd64 	bl	801e88c <__assert_func>
 801bdc4:	8bc4      	ldrh	r4, [r0, #30]
 801bdc6:	4414      	add	r4, r2
 801bdc8:	3a01      	subs	r2, #1
 801bdca:	b2a4      	uxth	r4, r4
 801bdcc:	b292      	uxth	r2, r2
 801bdce:	2c01      	cmp	r4, #1
 801bdd0:	bf88      	it	hi
 801bdd2:	3c02      	subhi	r4, #2
 801bdd4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bdd8:	8b64      	ldrh	r4, [r4, #26]
 801bdda:	42ac      	cmp	r4, r5
 801bddc:	d0e5      	beq.n	801bdaa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801bdde:	2000      	movs	r0, #0
 801bde0:	bd70      	pop	{r4, r5, r6, pc}
 801bde2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bde6:	2400      	movs	r4, #0
 801bde8:	4413      	add	r3, r2
 801bdea:	b2a2      	uxth	r2, r4
 801bdec:	429a      	cmp	r2, r3
 801bdee:	da14      	bge.n	801be1a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801bdf0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801bdf2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801bdf6:	4296      	cmp	r6, r2
 801bdf8:	d802      	bhi.n	801be00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801bdfa:	4b09      	ldr	r3, [pc, #36]	; (801be20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801bdfc:	4a0b      	ldr	r2, [pc, #44]	; (801be2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801bdfe:	e7dd      	b.n	801bdbc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801be00:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801be02:	3401      	adds	r4, #1
 801be04:	4432      	add	r2, r6
 801be06:	b292      	uxth	r2, r2
 801be08:	2a09      	cmp	r2, #9
 801be0a:	bf88      	it	hi
 801be0c:	3a0a      	subhi	r2, #10
 801be0e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801be12:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801be14:	42aa      	cmp	r2, r5
 801be16:	d0e8      	beq.n	801bdea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801be18:	e7e1      	b.n	801bdde <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801be1a:	2001      	movs	r0, #1
 801be1c:	e7e0      	b.n	801bde0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801be1e:	bf00      	nop
 801be20:	08022e79 	.word	0x08022e79
 801be24:	08023333 	.word	0x08023333
 801be28:	08022e41 	.word	0x08022e41
 801be2c:	08022fd8 	.word	0x08022fd8

0801be30 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801be30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be34:	4605      	mov	r5, r0
 801be36:	4616      	mov	r6, r2
 801be38:	1c8c      	adds	r4, r1, #2
 801be3a:	8809      	ldrh	r1, [r1, #0]
 801be3c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801be40:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801be44:	42b3      	cmp	r3, r6
 801be46:	d124      	bne.n	801be92 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801be48:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801be4c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801be50:	f001 070f 	and.w	r7, r1, #15
 801be54:	4652      	mov	r2, sl
 801be56:	f8cd 8000 	str.w	r8, [sp]
 801be5a:	464b      	mov	r3, r9
 801be5c:	4621      	mov	r1, r4
 801be5e:	4628      	mov	r0, r5
 801be60:	f7ff ff9e 	bl	801bda0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801be64:	4683      	mov	fp, r0
 801be66:	b168      	cbz	r0, 801be84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801be68:	eb0a 0109 	add.w	r1, sl, r9
 801be6c:	463a      	mov	r2, r7
 801be6e:	4628      	mov	r0, r5
 801be70:	4441      	add	r1, r8
 801be72:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801be76:	4649      	mov	r1, r9
 801be78:	f7ff ff42 	bl	801bd00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801be7c:	4658      	mov	r0, fp
 801be7e:	b003      	add	sp, #12
 801be80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be84:	eb07 010a 	add.w	r1, r7, sl
 801be88:	4449      	add	r1, r9
 801be8a:	4441      	add	r1, r8
 801be8c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801be90:	e7d2      	b.n	801be38 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801be92:	f04f 0b00 	mov.w	fp, #0
 801be96:	e7f1      	b.n	801be7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801be98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801be98:	b570      	push	{r4, r5, r6, lr}
 801be9a:	8810      	ldrh	r0, [r2, #0]
 801be9c:	4298      	cmp	r0, r3
 801be9e:	d817      	bhi.n	801bed0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bea0:	1e48      	subs	r0, r1, #1
 801bea2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801bea6:	4298      	cmp	r0, r3
 801bea8:	d312      	bcc.n	801bed0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801beaa:	2400      	movs	r4, #0
 801beac:	428c      	cmp	r4, r1
 801beae:	d20f      	bcs.n	801bed0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801beb0:	1860      	adds	r0, r4, r1
 801beb2:	1040      	asrs	r0, r0, #1
 801beb4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801beb8:	0085      	lsls	r5, r0, #2
 801beba:	42b3      	cmp	r3, r6
 801bebc:	d902      	bls.n	801bec4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801bebe:	3001      	adds	r0, #1
 801bec0:	b284      	uxth	r4, r0
 801bec2:	e7f3      	b.n	801beac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bec4:	d201      	bcs.n	801beca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801bec6:	b281      	uxth	r1, r0
 801bec8:	e7f0      	b.n	801beac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801beca:	442a      	add	r2, r5
 801becc:	8850      	ldrh	r0, [r2, #2]
 801bece:	bd70      	pop	{r4, r5, r6, pc}
 801bed0:	2000      	movs	r0, #0
 801bed2:	e7fc      	b.n	801bece <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801bed4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801bed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bed8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801beda:	4604      	mov	r4, r0
 801bedc:	260b      	movs	r6, #11
 801bede:	886f      	ldrh	r7, [r5, #2]
 801bee0:	087f      	lsrs	r7, r7, #1
 801bee2:	3e01      	subs	r6, #1
 801bee4:	d01b      	beq.n	801bf1e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801bee6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801bee8:	b92b      	cbnz	r3, 801bef6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801beea:	4b0e      	ldr	r3, [pc, #56]	; (801bf24 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801beec:	21c0      	movs	r1, #192	; 0xc0
 801beee:	4a0e      	ldr	r2, [pc, #56]	; (801bf28 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801bef0:	480e      	ldr	r0, [pc, #56]	; (801bf2c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801bef2:	f002 fccb 	bl	801e88c <__assert_func>
 801bef6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801bef8:	462a      	mov	r2, r5
 801befa:	4639      	mov	r1, r7
 801befc:	4620      	mov	r0, r4
 801befe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bf02:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bf06:	4643      	mov	r3, r8
 801bf08:	f7ff ffc6 	bl	801be98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801bf0c:	b138      	cbz	r0, 801bf1e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801bf0e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801bf12:	4642      	mov	r2, r8
 801bf14:	4620      	mov	r0, r4
 801bf16:	f7ff ff8b 	bl	801be30 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801bf1a:	2800      	cmp	r0, #0
 801bf1c:	d1e1      	bne.n	801bee2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801bf1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf22:	bf00      	nop
 801bf24:	08022e38 	.word	0x08022e38
 801bf28:	080230aa 	.word	0x080230aa
 801bf2c:	08022e41 	.word	0x08022e41

0801bf30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801bf30:	b570      	push	{r4, r5, r6, lr}
 801bf32:	694a      	ldr	r2, [r1, #20]
 801bf34:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801bf36:	684b      	ldr	r3, [r1, #4]
 801bf38:	1b54      	subs	r4, r2, r5
 801bf3a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801bf3c:	f000 8106 	beq.w	801c14c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801bf40:	1b9b      	subs	r3, r3, r6
 801bf42:	d003      	beq.n	801bf4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bf44:	4363      	muls	r3, r4
 801bf46:	2210      	movs	r2, #16
 801bf48:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf4c:	680c      	ldr	r4, [r1, #0]
 801bf4e:	698a      	ldr	r2, [r1, #24]
 801bf50:	1b65      	subs	r5, r4, r5
 801bf52:	f000 80fd 	beq.w	801c150 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801bf56:	1b92      	subs	r2, r2, r6
 801bf58:	d003      	beq.n	801bf62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bf5a:	436a      	muls	r2, r5
 801bf5c:	2410      	movs	r4, #16
 801bf5e:	fb92 f2f4 	sdiv	r2, r2, r4
 801bf62:	1a9b      	subs	r3, r3, r2
 801bf64:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c18c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801bf68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bf6c:	460a      	mov	r2, r1
 801bf6e:	ee07 3a90 	vmov	s15, r3
 801bf72:	f100 040c 	add.w	r4, r0, #12
 801bf76:	4603      	mov	r3, r0
 801bf78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bf80:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801bf84:	eeb1 6a43 	vneg.f32	s12, s6
 801bf88:	edd2 7a02 	vldr	s15, [r2, #8]
 801bf8c:	3214      	adds	r2, #20
 801bf8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bf92:	ece3 6a01 	vstmia	r3!, {s13}
 801bf96:	429c      	cmp	r4, r3
 801bf98:	ed52 7a02 	vldr	s15, [r2, #-8]
 801bf9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bfa0:	edc3 7a02 	vstr	s15, [r3, #8]
 801bfa4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801bfa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bfac:	edc3 7a05 	vstr	s15, [r3, #20]
 801bfb0:	d1ea      	bne.n	801bf88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801bfb2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801bfb4:	698b      	ldr	r3, [r1, #24]
 801bfb6:	edd0 4a02 	vldr	s9, [r0, #8]
 801bfba:	1a9b      	subs	r3, r3, r2
 801bfbc:	edd0 3a00 	vldr	s7, [r0]
 801bfc0:	edd0 6a01 	vldr	s13, [r0, #4]
 801bfc4:	ee07 3a90 	vmov	s15, r3
 801bfc8:	684b      	ldr	r3, [r1, #4]
 801bfca:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801bfce:	ed90 5a05 	vldr	s10, [r0, #20]
 801bfd2:	1a9b      	subs	r3, r3, r2
 801bfd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bfd8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801bfdc:	ed90 2a03 	vldr	s4, [r0, #12]
 801bfe0:	ee07 3a10 	vmov	s14, r3
 801bfe4:	edd0 5a04 	vldr	s11, [r0, #16]
 801bfe8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bfec:	ed90 1a07 	vldr	s2, [r0, #28]
 801bff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bff4:	edd0 2a06 	vldr	s5, [r0, #24]
 801bff8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801bffc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c000:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c004:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c008:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c00c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c010:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c014:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c016:	694a      	ldr	r2, [r1, #20]
 801c018:	1b13      	subs	r3, r2, r4
 801c01a:	ee07 3a10 	vmov	s14, r3
 801c01e:	680b      	ldr	r3, [r1, #0]
 801c020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c024:	1b1b      	subs	r3, r3, r4
 801c026:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c02a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c02e:	ee07 3a10 	vmov	s14, r3
 801c032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c036:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c03a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c03e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c042:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c046:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c048:	698b      	ldr	r3, [r1, #24]
 801c04a:	1a9b      	subs	r3, r3, r2
 801c04c:	ee06 3a90 	vmov	s13, r3
 801c050:	684b      	ldr	r3, [r1, #4]
 801c052:	1a9b      	subs	r3, r3, r2
 801c054:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c058:	ee07 3a10 	vmov	s14, r3
 801c05c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c060:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c064:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c068:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c06c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c070:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c074:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c078:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c07a:	694a      	ldr	r2, [r1, #20]
 801c07c:	1b13      	subs	r3, r2, r4
 801c07e:	ee07 3a10 	vmov	s14, r3
 801c082:	680b      	ldr	r3, [r1, #0]
 801c084:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c088:	1b1b      	subs	r3, r3, r4
 801c08a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c08e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c092:	ee07 3a10 	vmov	s14, r3
 801c096:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c09a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c09e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c0a2:	edd0 5a08 	vldr	s11, [r0, #32]
 801c0a6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c0aa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c0ae:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c0b2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c0b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c0b8:	698b      	ldr	r3, [r1, #24]
 801c0ba:	1a9b      	subs	r3, r3, r2
 801c0bc:	ee07 3a10 	vmov	s14, r3
 801c0c0:	684b      	ldr	r3, [r1, #4]
 801c0c2:	1a9b      	subs	r3, r3, r2
 801c0c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c0c8:	ee01 3a90 	vmov	s3, r3
 801c0cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c0d0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c0d4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c0d8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c0dc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c0e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c0e4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c0e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c0ea:	694a      	ldr	r2, [r1, #20]
 801c0ec:	1b13      	subs	r3, r2, r4
 801c0ee:	ee03 3a10 	vmov	s6, r3
 801c0f2:	680b      	ldr	r3, [r1, #0]
 801c0f4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c0f8:	1b1b      	subs	r3, r3, r4
 801c0fa:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c0fe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c102:	ee03 3a10 	vmov	s6, r3
 801c106:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c10a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c10e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c112:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c116:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c11a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c11e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c122:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c12a:	dd13      	ble.n	801c154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c12c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c130:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c134:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c136:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c13a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c142:	dd15      	ble.n	801c170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c148:	6403      	str	r3, [r0, #64]	; 0x40
 801c14a:	bd70      	pop	{r4, r5, r6, pc}
 801c14c:	4623      	mov	r3, r4
 801c14e:	e6fd      	b.n	801bf4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c150:	462a      	mov	r2, r5
 801c152:	e706      	b.n	801bf62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c154:	d502      	bpl.n	801c15c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c156:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c15a:	e7e9      	b.n	801c130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c15c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c160:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c164:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c16c:	dade      	bge.n	801c12c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c16e:	e7f2      	b.n	801c156 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c170:	d502      	bpl.n	801c178 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c172:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c176:	e7e7      	b.n	801c148 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c178:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c17c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c180:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c188:	dadc      	bge.n	801c144 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c18a:	e7f2      	b.n	801c172 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c18c:	3d800000 	.word	0x3d800000

0801c190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c194:	2714      	movs	r7, #20
 801c196:	435f      	muls	r7, r3
 801c198:	eb02 0c07 	add.w	ip, r2, r7
 801c19c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c1a0:	f115 0e0f 	adds.w	lr, r5, #15
 801c1a4:	d433      	bmi.n	801c20e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 801c1a6:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c1aa:	9c08      	ldr	r4, [sp, #32]
 801c1ac:	2614      	movs	r6, #20
 801c1ae:	f8c0 e014 	str.w	lr, [r0, #20]
 801c1b2:	4366      	muls	r6, r4
 801c1b4:	eb02 0806 	add.w	r8, r2, r6
 801c1b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c1bc:	f115 040f 	adds.w	r4, r5, #15
 801c1c0:	d431      	bmi.n	801c226 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 801c1c2:	1124      	asrs	r4, r4, #4
 801c1c4:	eba4 040e 	sub.w	r4, r4, lr
 801c1c8:	6184      	str	r4, [r0, #24]
 801c1ca:	2c00      	cmp	r4, #0
 801c1cc:	f000 80aa 	beq.w	801c324 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 801c1d0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c1d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c1d8:	5995      	ldr	r5, [r2, r6]
 801c1da:	eba4 0809 	sub.w	r8, r4, r9
 801c1de:	59d4      	ldr	r4, [r2, r7]
 801c1e0:	eba5 0a04 	sub.w	sl, r5, r4
 801c1e4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c1e8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c1ec:	2e00      	cmp	r6, #0
 801c1ee:	fb0e fe05 	mul.w	lr, lr, r5
 801c1f2:	fb0a ee19 	mls	lr, sl, r9, lr
 801c1f6:	fb08 e404 	mla	r4, r8, r4, lr
 801c1fa:	f104 34ff 	add.w	r4, r4, #4294967295
 801c1fe:	4434      	add	r4, r6
 801c200:	dc1d      	bgt.n	801c23e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 801c202:	4b5b      	ldr	r3, [pc, #364]	; (801c370 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 801c204:	21f7      	movs	r1, #247	; 0xf7
 801c206:	4a5b      	ldr	r2, [pc, #364]	; (801c374 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 801c208:	485b      	ldr	r0, [pc, #364]	; (801c378 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 801c20a:	f002 fb3f 	bl	801e88c <__assert_func>
 801c20e:	2410      	movs	r4, #16
 801c210:	f1c5 0501 	rsb	r5, r5, #1
 801c214:	fb9e fef4 	sdiv	lr, lr, r4
 801c218:	f015 050f 	ands.w	r5, r5, #15
 801c21c:	bf18      	it	ne
 801c21e:	2501      	movne	r5, #1
 801c220:	ebae 0e05 	sub.w	lr, lr, r5
 801c224:	e7c1      	b.n	801c1aa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 801c226:	f04f 0910 	mov.w	r9, #16
 801c22a:	f1c5 0501 	rsb	r5, r5, #1
 801c22e:	fb94 f4f9 	sdiv	r4, r4, r9
 801c232:	f015 050f 	ands.w	r5, r5, #15
 801c236:	bf18      	it	ne
 801c238:	2501      	movne	r5, #1
 801c23a:	1b64      	subs	r4, r4, r5
 801c23c:	e7c2      	b.n	801c1c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 801c23e:	2c00      	cmp	r4, #0
 801c240:	db72      	blt.n	801c328 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 801c242:	fb94 fef6 	sdiv	lr, r4, r6
 801c246:	fb06 441e 	mls	r4, r6, lr, r4
 801c24a:	f8c0 e000 	str.w	lr, [r0]
 801c24e:	6104      	str	r4, [r0, #16]
 801c250:	2d00      	cmp	r5, #0
 801c252:	db7b      	blt.n	801c34c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 801c254:	fb95 f4f6 	sdiv	r4, r5, r6
 801c258:	fb06 5514 	mls	r5, r6, r4, r5
 801c25c:	6044      	str	r4, [r0, #4]
 801c25e:	6085      	str	r5, [r0, #8]
 801c260:	60c6      	str	r6, [r0, #12]
 801c262:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c266:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c26a:	6945      	ldr	r5, [r0, #20]
 801c26c:	59d2      	ldr	r2, [r2, r7]
 801c26e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c272:	eddf 6a42 	vldr	s13, [pc, #264]	; 801c37c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 801c276:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c27a:	ee07 4a10 	vmov	s14, r4
 801c27e:	6804      	ldr	r4, [r0, #0]
 801c280:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c288:	ee07 2a90 	vmov	s15, r2
 801c28c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c294:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c298:	edd3 6a00 	vldr	s13, [r3]
 801c29c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c2a0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801c2a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c2a8:	edc0 6a07 	vstr	s13, [r0, #28]
 801c2ac:	edd0 6a01 	vldr	s13, [r0, #4]
 801c2b0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801c2b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c2b8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c2bc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c2c0:	ed80 6a08 	vstr	s12, [r0, #32]
 801c2c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801c2c6:	6242      	str	r2, [r0, #36]	; 0x24
 801c2c8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801c2cc:	ed93 6a03 	vldr	s12, [r3, #12]
 801c2d0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c2d4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c2d8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c2dc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801c2e0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c2e4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801c2e8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c2ec:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801c2f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c2f2:	6302      	str	r2, [r0, #48]	; 0x30
 801c2f4:	ed93 6a06 	vldr	s12, [r3, #24]
 801c2f8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801c2fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c300:	eeb0 7a46 	vmov.f32	s14, s12
 801c304:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801c308:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c30c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c310:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801c314:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801c318:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c31c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801c320:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801c322:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c328:	4264      	negs	r4, r4
 801c32a:	fb94 fef6 	sdiv	lr, r4, r6
 801c32e:	f1ce 0800 	rsb	r8, lr, #0
 801c332:	fb06 441e 	mls	r4, r6, lr, r4
 801c336:	f8c0 8000 	str.w	r8, [r0]
 801c33a:	6104      	str	r4, [r0, #16]
 801c33c:	2c00      	cmp	r4, #0
 801c33e:	d087      	beq.n	801c250 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 801c340:	ea6f 0e0e 	mvn.w	lr, lr
 801c344:	1b34      	subs	r4, r6, r4
 801c346:	f8c0 e000 	str.w	lr, [r0]
 801c34a:	e780      	b.n	801c24e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 801c34c:	426d      	negs	r5, r5
 801c34e:	fb95 f4f6 	sdiv	r4, r5, r6
 801c352:	f1c4 0e00 	rsb	lr, r4, #0
 801c356:	fb06 5514 	mls	r5, r6, r4, r5
 801c35a:	f8c0 e004 	str.w	lr, [r0, #4]
 801c35e:	6085      	str	r5, [r0, #8]
 801c360:	2d00      	cmp	r5, #0
 801c362:	f43f af7d 	beq.w	801c260 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 801c366:	43e4      	mvns	r4, r4
 801c368:	1b75      	subs	r5, r6, r5
 801c36a:	6044      	str	r4, [r0, #4]
 801c36c:	e777      	b.n	801c25e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 801c36e:	bf00      	nop
 801c370:	08023404 	.word	0x08023404
 801c374:	08023443 	.word	0x08023443
 801c378:	08023414 	.word	0x08023414
 801c37c:	3d800000 	.word	0x3d800000

0801c380 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c380:	4b06      	ldr	r3, [pc, #24]	; (801c39c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c382:	881a      	ldrh	r2, [r3, #0]
 801c384:	4282      	cmp	r2, r0
 801c386:	d807      	bhi.n	801c398 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c388:	4b05      	ldr	r3, [pc, #20]	; (801c3a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c38a:	881b      	ldrh	r3, [r3, #0]
 801c38c:	4413      	add	r3, r2
 801c38e:	4298      	cmp	r0, r3
 801c390:	bfac      	ite	ge
 801c392:	2000      	movge	r0, #0
 801c394:	2001      	movlt	r0, #1
 801c396:	4770      	bx	lr
 801c398:	2000      	movs	r0, #0
 801c39a:	4770      	bx	lr
 801c39c:	20006f60 	.word	0x20006f60
 801c3a0:	20006f62 	.word	0x20006f62

0801c3a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c3a4:	b508      	push	{r3, lr}
 801c3a6:	4601      	mov	r1, r0
 801c3a8:	f7ff ffea 	bl	801c380 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c3ac:	b118      	cbz	r0, 801c3b6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c3ae:	4b02      	ldr	r3, [pc, #8]	; (801c3b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c3b6:	bd08      	pop	{r3, pc}
 801c3b8:	20006f58 	.word	0x20006f58

0801c3bc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c3bc:	b508      	push	{r3, lr}
 801c3be:	4b17      	ldr	r3, [pc, #92]	; (801c41c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c3c0:	6819      	ldr	r1, [r3, #0]
 801c3c2:	b931      	cbnz	r1, 801c3d2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801c3c4:	4b16      	ldr	r3, [pc, #88]	; (801c420 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c3c6:	f240 4184 	movw	r1, #1156	; 0x484
 801c3ca:	4a16      	ldr	r2, [pc, #88]	; (801c424 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801c3cc:	4816      	ldr	r0, [pc, #88]	; (801c428 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801c3ce:	f002 fa5d 	bl	801e88c <__assert_func>
 801c3d2:	4a16      	ldr	r2, [pc, #88]	; (801c42c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801c3d4:	8803      	ldrh	r3, [r0, #0]
 801c3d6:	8812      	ldrh	r2, [r2, #0]
 801c3d8:	4293      	cmp	r3, r2
 801c3da:	d204      	bcs.n	801c3e6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801c3dc:	2214      	movs	r2, #20
 801c3de:	fb02 1303 	mla	r3, r2, r3, r1
 801c3e2:	8918      	ldrh	r0, [r3, #8]
 801c3e4:	bd08      	pop	{r3, pc}
 801c3e6:	4912      	ldr	r1, [pc, #72]	; (801c430 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 801c3e8:	8809      	ldrh	r1, [r1, #0]
 801c3ea:	4411      	add	r1, r2
 801c3ec:	428b      	cmp	r3, r1
 801c3ee:	da06      	bge.n	801c3fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801c3f0:	1a9b      	subs	r3, r3, r2
 801c3f2:	4a10      	ldr	r2, [pc, #64]	; (801c434 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 801c3f4:	210e      	movs	r1, #14
 801c3f6:	6812      	ldr	r2, [r2, #0]
 801c3f8:	fb01 2303 	mla	r3, r1, r3, r2
 801c3fc:	e7f1      	b.n	801c3e2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801c3fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c402:	4293      	cmp	r3, r2
 801c404:	d107      	bne.n	801c416 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 801c406:	4b0c      	ldr	r3, [pc, #48]	; (801c438 <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	b913      	cbnz	r3, 801c412 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 801c40c:	4b0b      	ldr	r3, [pc, #44]	; (801c43c <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 801c40e:	8818      	ldrh	r0, [r3, #0]
 801c410:	e7e8      	b.n	801c3e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801c412:	4b0b      	ldr	r3, [pc, #44]	; (801c440 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 801c414:	e7fb      	b.n	801c40e <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 801c416:	2000      	movs	r0, #0
 801c418:	e7e4      	b.n	801c3e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801c41a:	bf00      	nop
 801c41c:	20006f64 	.word	0x20006f64
 801c420:	080234e1 	.word	0x080234e1
 801c424:	08023584 	.word	0x08023584
 801c428:	080234bc 	.word	0x080234bc
 801c42c:	20006f60 	.word	0x20006f60
 801c430:	20006f62 	.word	0x20006f62
 801c434:	20006f5c 	.word	0x20006f5c
 801c438:	20006f0a 	.word	0x20006f0a
 801c43c:	20006f0c 	.word	0x20006f0c
 801c440:	20006f0e 	.word	0x20006f0e

0801c444 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c444:	b508      	push	{r3, lr}
 801c446:	4b17      	ldr	r3, [pc, #92]	; (801c4a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c448:	6819      	ldr	r1, [r3, #0]
 801c44a:	b931      	cbnz	r1, 801c45a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801c44c:	4b16      	ldr	r3, [pc, #88]	; (801c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c44e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 801c452:	4a16      	ldr	r2, [pc, #88]	; (801c4ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801c454:	4816      	ldr	r0, [pc, #88]	; (801c4b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801c456:	f002 fa19 	bl	801e88c <__assert_func>
 801c45a:	4a16      	ldr	r2, [pc, #88]	; (801c4b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801c45c:	8803      	ldrh	r3, [r0, #0]
 801c45e:	8812      	ldrh	r2, [r2, #0]
 801c460:	4293      	cmp	r3, r2
 801c462:	d204      	bcs.n	801c46e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801c464:	2214      	movs	r2, #20
 801c466:	fb02 1303 	mla	r3, r2, r3, r1
 801c46a:	8958      	ldrh	r0, [r3, #10]
 801c46c:	bd08      	pop	{r3, pc}
 801c46e:	4912      	ldr	r1, [pc, #72]	; (801c4b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 801c470:	8809      	ldrh	r1, [r1, #0]
 801c472:	4411      	add	r1, r2
 801c474:	428b      	cmp	r3, r1
 801c476:	da06      	bge.n	801c486 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801c478:	1a9b      	subs	r3, r3, r2
 801c47a:	4a10      	ldr	r2, [pc, #64]	; (801c4bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 801c47c:	210e      	movs	r1, #14
 801c47e:	6812      	ldr	r2, [r2, #0]
 801c480:	fb01 2303 	mla	r3, r1, r3, r2
 801c484:	e7f1      	b.n	801c46a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801c486:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c48a:	4293      	cmp	r3, r2
 801c48c:	d107      	bne.n	801c49e <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 801c48e:	4b0c      	ldr	r3, [pc, #48]	; (801c4c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 801c490:	781b      	ldrb	r3, [r3, #0]
 801c492:	b913      	cbnz	r3, 801c49a <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 801c494:	4b0b      	ldr	r3, [pc, #44]	; (801c4c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 801c496:	8818      	ldrh	r0, [r3, #0]
 801c498:	e7e8      	b.n	801c46c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801c49a:	4b0b      	ldr	r3, [pc, #44]	; (801c4c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 801c49c:	e7fb      	b.n	801c496 <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 801c49e:	2000      	movs	r0, #0
 801c4a0:	e7e4      	b.n	801c46c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801c4a2:	bf00      	nop
 801c4a4:	20006f64 	.word	0x20006f64
 801c4a8:	080234e1 	.word	0x080234e1
 801c4ac:	080235b0 	.word	0x080235b0
 801c4b0:	080234bc 	.word	0x080234bc
 801c4b4:	20006f60 	.word	0x20006f60
 801c4b8:	20006f62 	.word	0x20006f62
 801c4bc:	20006f5c 	.word	0x20006f5c
 801c4c0:	20006f0a 	.word	0x20006f0a
 801c4c4:	20006f0e 	.word	0x20006f0e
 801c4c8:	20006f0c 	.word	0x20006f0c

0801c4cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801c4cc:	4b23      	ldr	r3, [pc, #140]	; (801c55c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801c4ce:	b510      	push	{r4, lr}
 801c4d0:	681c      	ldr	r4, [r3, #0]
 801c4d2:	b934      	cbnz	r4, 801c4e2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801c4d4:	4b22      	ldr	r3, [pc, #136]	; (801c560 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801c4d6:	f240 41ac 	movw	r1, #1196	; 0x4ac
 801c4da:	4a22      	ldr	r2, [pc, #136]	; (801c564 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801c4dc:	4822      	ldr	r0, [pc, #136]	; (801c568 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801c4de:	f002 f9d5 	bl	801e88c <__assert_func>
 801c4e2:	4a22      	ldr	r2, [pc, #136]	; (801c56c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801c4e4:	880b      	ldrh	r3, [r1, #0]
 801c4e6:	8812      	ldrh	r2, [r2, #0]
 801c4e8:	4293      	cmp	r3, r2
 801c4ea:	d211      	bcs.n	801c510 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801c4ec:	2214      	movs	r2, #20
 801c4ee:	fb02 4303 	mla	r3, r2, r3, r4
 801c4f2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801c4f6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801c4fa:	8a1a      	ldrh	r2, [r3, #16]
 801c4fc:	8a5b      	ldrh	r3, [r3, #18]
 801c4fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c502:	8004      	strh	r4, [r0, #0]
 801c504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c508:	8041      	strh	r1, [r0, #2]
 801c50a:	8082      	strh	r2, [r0, #4]
 801c50c:	80c3      	strh	r3, [r0, #6]
 801c50e:	e00e      	b.n	801c52e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801c510:	4917      	ldr	r1, [pc, #92]	; (801c570 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801c512:	8809      	ldrh	r1, [r1, #0]
 801c514:	4411      	add	r1, r2
 801c516:	428b      	cmp	r3, r1
 801c518:	da0a      	bge.n	801c530 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801c51a:	1a9b      	subs	r3, r3, r2
 801c51c:	4a15      	ldr	r2, [pc, #84]	; (801c574 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801c51e:	210e      	movs	r1, #14
 801c520:	6812      	ldr	r2, [r2, #0]
 801c522:	fb01 2303 	mla	r3, r1, r3, r2
 801c526:	681a      	ldr	r2, [r3, #0]
 801c528:	6002      	str	r2, [r0, #0]
 801c52a:	685a      	ldr	r2, [r3, #4]
 801c52c:	6042      	str	r2, [r0, #4]
 801c52e:	bd10      	pop	{r4, pc}
 801c530:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c534:	4293      	cmp	r3, r2
 801c536:	d10b      	bne.n	801c550 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801c538:	4b0f      	ldr	r3, [pc, #60]	; (801c578 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801c53a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c53e:	4b0f      	ldr	r3, [pc, #60]	; (801c57c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801c540:	8081      	strh	r1, [r0, #4]
 801c542:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c546:	2300      	movs	r3, #0
 801c548:	80c2      	strh	r2, [r0, #6]
 801c54a:	8003      	strh	r3, [r0, #0]
 801c54c:	8043      	strh	r3, [r0, #2]
 801c54e:	e7ee      	b.n	801c52e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801c550:	2300      	movs	r3, #0
 801c552:	8003      	strh	r3, [r0, #0]
 801c554:	8043      	strh	r3, [r0, #2]
 801c556:	8083      	strh	r3, [r0, #4]
 801c558:	e7d8      	b.n	801c50c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801c55a:	bf00      	nop
 801c55c:	20006f64 	.word	0x20006f64
 801c560:	080234e1 	.word	0x080234e1
 801c564:	0802351d 	.word	0x0802351d
 801c568:	080234bc 	.word	0x080234bc
 801c56c:	20006f60 	.word	0x20006f60
 801c570:	20006f62 	.word	0x20006f62
 801c574:	20006f5c 	.word	0x20006f5c
 801c578:	20006f06 	.word	0x20006f06
 801c57c:	20006f08 	.word	0x20006f08

0801c580 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801c580:	4b18      	ldr	r3, [pc, #96]	; (801c5e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	b34b      	cbz	r3, 801c5da <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801c586:	4a18      	ldr	r2, [pc, #96]	; (801c5e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801c588:	8800      	ldrh	r0, [r0, #0]
 801c58a:	8812      	ldrh	r2, [r2, #0]
 801c58c:	4290      	cmp	r0, r2
 801c58e:	d211      	bcs.n	801c5b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801c590:	2214      	movs	r2, #20
 801c592:	fb02 3300 	mla	r3, r2, r0, r3
 801c596:	8a1a      	ldrh	r2, [r3, #16]
 801c598:	8919      	ldrh	r1, [r3, #8]
 801c59a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c59e:	428a      	cmp	r2, r1
 801c5a0:	db1d      	blt.n	801c5de <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801c5a2:	8a58      	ldrh	r0, [r3, #18]
 801c5a4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c5a8:	895b      	ldrh	r3, [r3, #10]
 801c5aa:	4298      	cmp	r0, r3
 801c5ac:	bfac      	ite	ge
 801c5ae:	2000      	movge	r0, #0
 801c5b0:	2001      	movlt	r0, #1
 801c5b2:	4770      	bx	lr
 801c5b4:	4b0d      	ldr	r3, [pc, #52]	; (801c5ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801c5b6:	881b      	ldrh	r3, [r3, #0]
 801c5b8:	4413      	add	r3, r2
 801c5ba:	4298      	cmp	r0, r3
 801c5bc:	da0d      	bge.n	801c5da <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801c5be:	4b0c      	ldr	r3, [pc, #48]	; (801c5f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801c5c0:	1a80      	subs	r0, r0, r2
 801c5c2:	220e      	movs	r2, #14
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	fb02 3300 	mla	r3, r2, r0, r3
 801c5ca:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801c5ce:	891a      	ldrh	r2, [r3, #8]
 801c5d0:	4291      	cmp	r1, r2
 801c5d2:	db04      	blt.n	801c5de <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801c5d4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801c5d8:	e7e6      	b.n	801c5a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801c5da:	2000      	movs	r0, #0
 801c5dc:	4770      	bx	lr
 801c5de:	2001      	movs	r0, #1
 801c5e0:	4770      	bx	lr
 801c5e2:	bf00      	nop
 801c5e4:	20006f64 	.word	0x20006f64
 801c5e8:	20006f60 	.word	0x20006f60
 801c5ec:	20006f62 	.word	0x20006f62
 801c5f0:	20006f5c 	.word	0x20006f5c

0801c5f4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801c5f4:	b508      	push	{r3, lr}
 801c5f6:	4b12      	ldr	r3, [pc, #72]	; (801c640 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801c5f8:	6819      	ldr	r1, [r3, #0]
 801c5fa:	b931      	cbnz	r1, 801c60a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801c5fc:	4b11      	ldr	r3, [pc, #68]	; (801c644 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801c5fe:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 801c602:	4a11      	ldr	r2, [pc, #68]	; (801c648 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801c604:	4811      	ldr	r0, [pc, #68]	; (801c64c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801c606:	f002 f941 	bl	801e88c <__assert_func>
 801c60a:	8803      	ldrh	r3, [r0, #0]
 801c60c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c610:	4293      	cmp	r3, r2
 801c612:	d012      	beq.n	801c63a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801c614:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c618:	4293      	cmp	r3, r2
 801c61a:	d103      	bne.n	801c624 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801c61c:	4b0c      	ldr	r3, [pc, #48]	; (801c650 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801c622:	bd08      	pop	{r3, pc}
 801c624:	4a0b      	ldr	r2, [pc, #44]	; (801c654 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801c626:	6812      	ldr	r2, [r2, #0]
 801c628:	b11a      	cbz	r2, 801c632 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801c62a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c62e:	2800      	cmp	r0, #0
 801c630:	d1f7      	bne.n	801c622 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c632:	2214      	movs	r2, #20
 801c634:	4353      	muls	r3, r2
 801c636:	58c8      	ldr	r0, [r1, r3]
 801c638:	e7f3      	b.n	801c622 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c63a:	2000      	movs	r0, #0
 801c63c:	e7f1      	b.n	801c622 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c63e:	bf00      	nop
 801c640:	20006f64 	.word	0x20006f64
 801c644:	080234e1 	.word	0x080234e1
 801c648:	08023553 	.word	0x08023553
 801c64c:	080234bc 	.word	0x080234bc
 801c650:	20006f14 	.word	0x20006f14
 801c654:	20006f58 	.word	0x20006f58

0801c658 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801c658:	8802      	ldrh	r2, [r0, #0]
 801c65a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801c65e:	429a      	cmp	r2, r3
 801c660:	d845      	bhi.n	801c6ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c662:	4b24      	ldr	r3, [pc, #144]	; (801c6f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c664:	8818      	ldrh	r0, [r3, #0]
 801c666:	4282      	cmp	r2, r0
 801c668:	d221      	bcs.n	801c6ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801c66a:	4b23      	ldr	r3, [pc, #140]	; (801c6f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c66c:	6819      	ldr	r1, [r3, #0]
 801c66e:	2314      	movs	r3, #20
 801c670:	fb03 1302 	mla	r3, r3, r2, r1
 801c674:	6858      	ldr	r0, [r3, #4]
 801c676:	2800      	cmp	r0, #0
 801c678:	d03a      	beq.n	801c6f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c67a:	4920      	ldr	r1, [pc, #128]	; (801c6fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c67c:	6809      	ldr	r1, [r1, #0]
 801c67e:	2900      	cmp	r1, #0
 801c680:	d036      	beq.n	801c6f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c682:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c686:	2900      	cmp	r1, #0
 801c688:	d032      	beq.n	801c6f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c68a:	891a      	ldrh	r2, [r3, #8]
 801c68c:	8958      	ldrh	r0, [r3, #10]
 801c68e:	4350      	muls	r0, r2
 801c690:	7c5a      	ldrb	r2, [r3, #17]
 801c692:	7cdb      	ldrb	r3, [r3, #19]
 801c694:	0952      	lsrs	r2, r2, #5
 801c696:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801c69a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c69e:	2b0b      	cmp	r3, #11
 801c6a0:	bf18      	it	ne
 801c6a2:	0040      	lslne	r0, r0, #1
 801c6a4:	3003      	adds	r0, #3
 801c6a6:	f020 0003 	bic.w	r0, r0, #3
 801c6aa:	4408      	add	r0, r1
 801c6ac:	4770      	bx	lr
 801c6ae:	4b14      	ldr	r3, [pc, #80]	; (801c700 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801c6b0:	881b      	ldrh	r3, [r3, #0]
 801c6b2:	4403      	add	r3, r0
 801c6b4:	429a      	cmp	r2, r3
 801c6b6:	da1a      	bge.n	801c6ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c6b8:	4b12      	ldr	r3, [pc, #72]	; (801c704 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801c6ba:	1a10      	subs	r0, r2, r0
 801c6bc:	210e      	movs	r1, #14
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	fb01 3000 	mla	r0, r1, r0, r3
 801c6c4:	7b03      	ldrb	r3, [r0, #12]
 801c6c6:	f003 031f 	and.w	r3, r3, #31
 801c6ca:	2b0b      	cmp	r3, #11
 801c6cc:	d10b      	bne.n	801c6e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c6ce:	8903      	ldrh	r3, [r0, #8]
 801c6d0:	8940      	ldrh	r0, [r0, #10]
 801c6d2:	4358      	muls	r0, r3
 801c6d4:	4b09      	ldr	r3, [pc, #36]	; (801c6fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c6d6:	3003      	adds	r0, #3
 801c6d8:	6819      	ldr	r1, [r3, #0]
 801c6da:	f020 0303 	bic.w	r3, r0, #3
 801c6de:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c6e2:	4418      	add	r0, r3
 801c6e4:	4770      	bx	lr
 801c6e6:	2b0d      	cmp	r3, #13
 801c6e8:	d101      	bne.n	801c6ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c6ea:	300d      	adds	r0, #13
 801c6ec:	4770      	bx	lr
 801c6ee:	2000      	movs	r0, #0
 801c6f0:	4770      	bx	lr
 801c6f2:	bf00      	nop
 801c6f4:	20006f60 	.word	0x20006f60
 801c6f8:	20006f64 	.word	0x20006f64
 801c6fc:	20006f58 	.word	0x20006f58
 801c700:	20006f62 	.word	0x20006f62
 801c704:	20006f5c 	.word	0x20006f5c

0801c708 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c708:	4b17      	ldr	r3, [pc, #92]	; (801c768 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801c70a:	b510      	push	{r4, lr}
 801c70c:	6819      	ldr	r1, [r3, #0]
 801c70e:	8803      	ldrh	r3, [r0, #0]
 801c710:	b1e9      	cbz	r1, 801c74e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c712:	4a16      	ldr	r2, [pc, #88]	; (801c76c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801c714:	8812      	ldrh	r2, [r2, #0]
 801c716:	429a      	cmp	r2, r3
 801c718:	d90a      	bls.n	801c730 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801c71a:	2214      	movs	r2, #20
 801c71c:	fb02 1303 	mla	r3, r2, r3, r1
 801c720:	7c58      	ldrb	r0, [r3, #17]
 801c722:	0942      	lsrs	r2, r0, #5
 801c724:	7cd8      	ldrb	r0, [r3, #19]
 801c726:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c72a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c72e:	bd10      	pop	{r4, pc}
 801c730:	490f      	ldr	r1, [pc, #60]	; (801c770 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c732:	8809      	ldrh	r1, [r1, #0]
 801c734:	4411      	add	r1, r2
 801c736:	428b      	cmp	r3, r1
 801c738:	da09      	bge.n	801c74e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c73a:	1a9b      	subs	r3, r3, r2
 801c73c:	4a0d      	ldr	r2, [pc, #52]	; (801c774 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c73e:	210e      	movs	r1, #14
 801c740:	6812      	ldr	r2, [r2, #0]
 801c742:	fb01 2303 	mla	r3, r1, r3, r2
 801c746:	7b18      	ldrb	r0, [r3, #12]
 801c748:	f000 001f 	and.w	r0, r0, #31
 801c74c:	e7ef      	b.n	801c72e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c74e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c752:	4293      	cmp	r3, r2
 801c754:	d106      	bne.n	801c764 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c756:	f7f9 fbd9 	bl	8015f0c <_ZN8touchgfx3HAL3lcdEv>
 801c75a:	6803      	ldr	r3, [r0, #0]
 801c75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c762:	4718      	bx	r3
 801c764:	2000      	movs	r0, #0
 801c766:	e7e2      	b.n	801c72e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c768:	20006f64 	.word	0x20006f64
 801c76c:	20006f60 	.word	0x20006f60
 801c770:	20006f62 	.word	0x20006f62
 801c774:	20006f5c 	.word	0x20006f5c

0801c778 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801c778:	2010      	movs	r0, #16
 801c77a:	4770      	bx	lr

0801c77c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801c77c:	2000      	movs	r0, #0
 801c77e:	4770      	bx	lr

0801c780 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c780:	2bff      	cmp	r3, #255	; 0xff
 801c782:	d050      	beq.n	801c826 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801c784:	2a0b      	cmp	r2, #11
 801c786:	d04a      	beq.n	801c81e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c788:	d80e      	bhi.n	801c7a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801c78a:	2a03      	cmp	r2, #3
 801c78c:	d03f      	beq.n	801c80e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801c78e:	d804      	bhi.n	801c79a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c790:	2a01      	cmp	r2, #1
 801c792:	d03e      	beq.n	801c812 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801c794:	d93f      	bls.n	801c816 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801c796:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c798:	4770      	bx	lr
 801c79a:	2a09      	cmp	r2, #9
 801c79c:	d03f      	beq.n	801c81e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c79e:	d83c      	bhi.n	801c81a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c7a0:	2a08      	cmp	r2, #8
 801c7a2:	d03a      	beq.n	801c81a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c7a4:	2000      	movs	r0, #0
 801c7a6:	4770      	bx	lr
 801c7a8:	2a2f      	cmp	r2, #47	; 0x2f
 801c7aa:	d024      	beq.n	801c7f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801c7ac:	d80d      	bhi.n	801c7ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801c7ae:	2a2d      	cmp	r2, #45	; 0x2d
 801c7b0:	d014      	beq.n	801c7dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801c7b2:	d826      	bhi.n	801c802 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801c7b4:	2a2c      	cmp	r2, #44	; 0x2c
 801c7b6:	d1f5      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c7b8:	684b      	ldr	r3, [r1, #4]
 801c7ba:	781b      	ldrb	r3, [r3, #0]
 801c7bc:	2b01      	cmp	r3, #1
 801c7be:	d018      	beq.n	801c7f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801c7c0:	d323      	bcc.n	801c80a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801c7c2:	2b02      	cmp	r3, #2
 801c7c4:	d1ee      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c7c6:	6880      	ldr	r0, [r0, #8]
 801c7c8:	4770      	bx	lr
 801c7ca:	2a31      	cmp	r2, #49	; 0x31
 801c7cc:	d004      	beq.n	801c7d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801c7ce:	d328      	bcc.n	801c822 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c7d0:	2a32      	cmp	r2, #50	; 0x32
 801c7d2:	d026      	beq.n	801c822 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c7d4:	2a33      	cmp	r2, #51	; 0x33
 801c7d6:	d1e5      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c7d8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801c7da:	4770      	bx	lr
 801c7dc:	684b      	ldr	r3, [r1, #4]
 801c7de:	781b      	ldrb	r3, [r3, #0]
 801c7e0:	2b01      	cmp	r3, #1
 801c7e2:	d004      	beq.n	801c7ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c7e4:	d30b      	bcc.n	801c7fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c7e6:	2b02      	cmp	r3, #2
 801c7e8:	d1dc      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c7ea:	6900      	ldr	r0, [r0, #16]
 801c7ec:	4770      	bx	lr
 801c7ee:	6a00      	ldr	r0, [r0, #32]
 801c7f0:	4770      	bx	lr
 801c7f2:	6980      	ldr	r0, [r0, #24]
 801c7f4:	4770      	bx	lr
 801c7f6:	684b      	ldr	r3, [r1, #4]
 801c7f8:	781b      	ldrb	r3, [r3, #0]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d1d2      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c7fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c800:	4770      	bx	lr
 801c802:	684b      	ldr	r3, [r1, #4]
 801c804:	781b      	ldrb	r3, [r3, #0]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d1cc      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c80a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c80c:	4770      	bx	lr
 801c80e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c810:	4770      	bx	lr
 801c812:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801c814:	4770      	bx	lr
 801c816:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801c818:	4770      	bx	lr
 801c81a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801c81c:	4770      	bx	lr
 801c81e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801c820:	4770      	bx	lr
 801c822:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801c824:	4770      	bx	lr
 801c826:	2a0b      	cmp	r2, #11
 801c828:	d049      	beq.n	801c8be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c82a:	d80e      	bhi.n	801c84a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801c82c:	2a03      	cmp	r2, #3
 801c82e:	d040      	beq.n	801c8b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801c830:	d804      	bhi.n	801c83c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801c832:	2a01      	cmp	r2, #1
 801c834:	d03f      	beq.n	801c8b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801c836:	d940      	bls.n	801c8ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c838:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c83a:	4770      	bx	lr
 801c83c:	2a09      	cmp	r2, #9
 801c83e:	d03e      	beq.n	801c8be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c840:	d801      	bhi.n	801c846 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801c842:	2a08      	cmp	r2, #8
 801c844:	d1ae      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c846:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801c848:	4770      	bx	lr
 801c84a:	2a2f      	cmp	r2, #47	; 0x2f
 801c84c:	d024      	beq.n	801c898 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801c84e:	d80d      	bhi.n	801c86c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801c850:	2a2d      	cmp	r2, #45	; 0x2d
 801c852:	d014      	beq.n	801c87e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801c854:	d826      	bhi.n	801c8a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801c856:	2a2c      	cmp	r2, #44	; 0x2c
 801c858:	d1a4      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c85a:	684b      	ldr	r3, [r1, #4]
 801c85c:	781b      	ldrb	r3, [r3, #0]
 801c85e:	2b01      	cmp	r3, #1
 801c860:	d018      	beq.n	801c894 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801c862:	d324      	bcc.n	801c8ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801c864:	2b02      	cmp	r3, #2
 801c866:	d19d      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c868:	68c0      	ldr	r0, [r0, #12]
 801c86a:	4770      	bx	lr
 801c86c:	2a31      	cmp	r2, #49	; 0x31
 801c86e:	d004      	beq.n	801c87a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801c870:	d327      	bcc.n	801c8c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801c872:	2a32      	cmp	r2, #50	; 0x32
 801c874:	d025      	beq.n	801c8c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801c876:	2a33      	cmp	r2, #51	; 0x33
 801c878:	d194      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c87a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801c87c:	4770      	bx	lr
 801c87e:	684b      	ldr	r3, [r1, #4]
 801c880:	781b      	ldrb	r3, [r3, #0]
 801c882:	2b01      	cmp	r3, #1
 801c884:	d004      	beq.n	801c890 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801c886:	d30b      	bcc.n	801c8a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801c888:	2b02      	cmp	r3, #2
 801c88a:	d18b      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c88c:	6940      	ldr	r0, [r0, #20]
 801c88e:	4770      	bx	lr
 801c890:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c892:	4770      	bx	lr
 801c894:	69c0      	ldr	r0, [r0, #28]
 801c896:	4770      	bx	lr
 801c898:	684b      	ldr	r3, [r1, #4]
 801c89a:	781b      	ldrb	r3, [r3, #0]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d181      	bne.n	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c8a0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c8a2:	4770      	bx	lr
 801c8a4:	684b      	ldr	r3, [r1, #4]
 801c8a6:	781b      	ldrb	r3, [r3, #0]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	f47f af7b 	bne.w	801c7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c8ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c8b0:	4770      	bx	lr
 801c8b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c8b4:	4770      	bx	lr
 801c8b6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c8b8:	4770      	bx	lr
 801c8ba:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c8bc:	4770      	bx	lr
 801c8be:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801c8c0:	4770      	bx	lr
 801c8c2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801c8c4:	4770      	bx	lr
	...

0801c8c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8cc:	4692      	mov	sl, r2
 801c8ce:	4a22      	ldr	r2, [pc, #136]	; (801c958 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x90>)
 801c8d0:	b088      	sub	sp, #32
 801c8d2:	4605      	mov	r5, r0
 801c8d4:	6812      	ldr	r2, [r2, #0]
 801c8d6:	4689      	mov	r9, r1
 801c8d8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c8dc:	2a02      	cmp	r2, #2
 801c8de:	d106      	bne.n	801c8ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c8e0:	4b1e      	ldr	r3, [pc, #120]	; (801c95c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x94>)
 801c8e2:	f44f 7158 	mov.w	r1, #864	; 0x360
 801c8e6:	4a1e      	ldr	r2, [pc, #120]	; (801c960 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 801c8e8:	481e      	ldr	r0, [pc, #120]	; (801c964 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 801c8ea:	f001 ffcf 	bl	801e88c <__assert_func>
 801c8ee:	ac08      	add	r4, sp, #32
 801c8f0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	f7ff ff07 	bl	801c708 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c8fa:	682b      	ldr	r3, [r5, #0]
 801c8fc:	4606      	mov	r6, r0
 801c8fe:	4628      	mov	r0, r5
 801c900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c902:	4798      	blx	r3
 801c904:	4286      	cmp	r6, r0
 801c906:	d004      	beq.n	801c912 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c908:	4b17      	ldr	r3, [pc, #92]	; (801c968 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 801c90a:	f240 3162 	movw	r1, #866	; 0x362
 801c90e:	4a14      	ldr	r2, [pc, #80]	; (801c960 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 801c910:	e7ea      	b.n	801c8e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c912:	4620      	mov	r0, r4
 801c914:	f7ff fe6e 	bl	801c5f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c918:	4606      	mov	r6, r0
 801c91a:	b920      	cbnz	r0, 801c926 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c91c:	4b13      	ldr	r3, [pc, #76]	; (801c96c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 801c91e:	f44f 7159 	mov.w	r1, #868	; 0x364
 801c922:	4a0f      	ldr	r2, [pc, #60]	; (801c960 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 801c924:	e7e0      	b.n	801c8e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c926:	682b      	ldr	r3, [r5, #0]
 801c928:	4620      	mov	r0, r4
 801c92a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801c92e:	f7ff fd45 	bl	801c3bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c932:	4607      	mov	r7, r0
 801c934:	4620      	mov	r0, r4
 801c936:	f7ff fd85 	bl	801c444 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c93a:	4653      	mov	r3, sl
 801c93c:	b200      	sxth	r0, r0
 801c93e:	464a      	mov	r2, r9
 801c940:	b23f      	sxth	r7, r7
 801c942:	4629      	mov	r1, r5
 801c944:	9002      	str	r0, [sp, #8]
 801c946:	a806      	add	r0, sp, #24
 801c948:	e9cd 6700 	strd	r6, r7, [sp]
 801c94c:	47c0      	blx	r8
 801c94e:	4630      	mov	r0, r6
 801c950:	b008      	add	sp, #32
 801c952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c956:	bf00      	nop
 801c958:	20006f14 	.word	0x20006f14
 801c95c:	0802377a 	.word	0x0802377a
 801c960:	08023d54 	.word	0x08023d54
 801c964:	0802382c 	.word	0x0802382c
 801c968:	0802385e 	.word	0x0802385e
 801c96c:	080238b3 	.word	0x080238b3

0801c970 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801c970:	b508      	push	{r3, lr}
 801c972:	4b06      	ldr	r3, [pc, #24]	; (801c98c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801c974:	8818      	ldrh	r0, [r3, #0]
 801c976:	b928      	cbnz	r0, 801c984 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801c978:	4b05      	ldr	r3, [pc, #20]	; (801c990 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801c97a:	2153      	movs	r1, #83	; 0x53
 801c97c:	4a05      	ldr	r2, [pc, #20]	; (801c994 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801c97e:	4806      	ldr	r0, [pc, #24]	; (801c998 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801c980:	f001 ff84 	bl	801e88c <__assert_func>
 801c984:	0040      	lsls	r0, r0, #1
 801c986:	b280      	uxth	r0, r0
 801c988:	bd08      	pop	{r3, pc}
 801c98a:	bf00      	nop
 801c98c:	20006f0c 	.word	0x20006f0c
 801c990:	08023922 	.word	0x08023922
 801c994:	08023c86 	.word	0x08023c86
 801c998:	08023964 	.word	0x08023964

0801c99c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c99c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	9300      	str	r3, [sp, #0]
 801c9a4:	4b3d      	ldr	r3, [pc, #244]	; (801ca9c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801c9a6:	781b      	ldrb	r3, [r3, #0]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d137      	bne.n	801ca1c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801c9ac:	4a3c      	ldr	r2, [pc, #240]	; (801caa0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c9ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c9b2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d132      	bne.n	801ca20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801c9ba:	4b3a      	ldr	r3, [pc, #232]	; (801caa4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9c0:	ac02      	add	r4, sp, #8
 801c9c2:	6808      	ldr	r0, [r1, #0]
 801c9c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c9c8:	ab02      	add	r3, sp, #8
 801c9ca:	6849      	ldr	r1, [r1, #4]
 801c9cc:	4d36      	ldr	r5, [pc, #216]	; (801caa8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c9ce:	c303      	stmia	r3!, {r0, r1}
 801c9d0:	4669      	mov	r1, sp
 801c9d2:	4620      	mov	r0, r4
 801c9d4:	f7fe fb8e 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c9d8:	4668      	mov	r0, sp
 801c9da:	f7fe fb63 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c9e2:	f8bd 2000 	ldrh.w	r2, [sp]
 801c9e6:	462f      	mov	r7, r5
 801c9e8:	6828      	ldr	r0, [r5, #0]
 801c9ea:	4413      	add	r3, r2
 801c9ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c9f0:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c9f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c9f8:	4413      	add	r3, r2
 801c9fa:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c9fe:	6803      	ldr	r3, [r0, #0]
 801ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca02:	4798      	blx	r3
 801ca04:	f010 0f01 	tst.w	r0, #1
 801ca08:	d00c      	beq.n	801ca24 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801ca0a:	6828      	ldr	r0, [r5, #0]
 801ca0c:	6803      	ldr	r3, [r0, #0]
 801ca0e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801ca12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca14:	4798      	blx	r3
 801ca16:	b004      	add	sp, #16
 801ca18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca1c:	4a21      	ldr	r2, [pc, #132]	; (801caa4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801ca1e:	e7c6      	b.n	801c9ae <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801ca20:	4b1f      	ldr	r3, [pc, #124]	; (801caa0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801ca22:	e7cb      	b.n	801c9bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801ca24:	6838      	ldr	r0, [r7, #0]
 801ca26:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801ca2a:	6803      	ldr	r3, [r0, #0]
 801ca2c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801ca30:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801ca34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca36:	4798      	blx	r3
 801ca38:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801ca3c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ca40:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801ca44:	fb16 3602 	smlabb	r6, r6, r2, r3
 801ca48:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ca4c:	6838      	ldr	r0, [r7, #0]
 801ca4e:	6803      	ldr	r3, [r0, #0]
 801ca50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca52:	4798      	blx	r3
 801ca54:	4a12      	ldr	r2, [pc, #72]	; (801caa0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801ca56:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801ca5a:	8813      	ldrh	r3, [r2, #0]
 801ca5c:	4691      	mov	r9, r2
 801ca5e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801ca62:	435d      	muls	r5, r3
 801ca64:	fb03 1404 	mla	r4, r3, r4, r1
 801ca68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ca6c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801ca70:	6838      	ldr	r0, [r7, #0]
 801ca72:	42ac      	cmp	r4, r5
 801ca74:	6803      	ldr	r3, [r0, #0]
 801ca76:	d20e      	bcs.n	801ca96 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801ca78:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801ca7c:	4632      	mov	r2, r6
 801ca7e:	4643      	mov	r3, r8
 801ca80:	4621      	mov	r1, r4
 801ca82:	47d0      	blx	sl
 801ca84:	f8b9 3000 	ldrh.w	r3, [r9]
 801ca88:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ca8c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801ca90:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801ca94:	e7ec      	b.n	801ca70 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801ca96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca98:	4798      	blx	r3
 801ca9a:	e7bc      	b.n	801ca16 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801ca9c:	20006f0a 	.word	0x20006f0a
 801caa0:	20006f0c 	.word	0x20006f0c
 801caa4:	20006f0e 	.word	0x20006f0e
 801caa8:	20006f14 	.word	0x20006f14

0801caac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801caac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab0:	b08b      	sub	sp, #44	; 0x2c
 801cab2:	460f      	mov	r7, r1
 801cab4:	4616      	mov	r6, r2
 801cab6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801caba:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801cabe:	f1bb 0f00 	cmp.w	fp, #0
 801cac2:	d049      	beq.n	801cb58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801cac4:	6810      	ldr	r0, [r2, #0]
 801cac6:	ad06      	add	r5, sp, #24
 801cac8:	6851      	ldr	r1, [r2, #4]
 801caca:	c503      	stmia	r5!, {r0, r1}
 801cacc:	6818      	ldr	r0, [r3, #0]
 801cace:	ad08      	add	r5, sp, #32
 801cad0:	6859      	ldr	r1, [r3, #4]
 801cad2:	c503      	stmia	r5!, {r0, r1}
 801cad4:	a806      	add	r0, sp, #24
 801cad6:	f7fe fae5 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cada:	4631      	mov	r1, r6
 801cadc:	a808      	add	r0, sp, #32
 801cade:	f7fe fb09 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cae2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cae6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801caea:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801caee:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801caf2:	fb16 2103 	smlabb	r1, r6, r3, r2
 801caf6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801cafa:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801cafe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801cb02:	4f5f      	ldr	r7, [pc, #380]	; (801cc80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801cb04:	440a      	add	r2, r1
 801cb06:	6838      	ldr	r0, [r7, #0]
 801cb08:	46b9      	mov	r9, r7
 801cb0a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801cb0e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801cb12:	4413      	add	r3, r2
 801cb14:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801cb18:	6803      	ldr	r3, [r0, #0]
 801cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb1c:	4798      	blx	r3
 801cb1e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cb22:	d01c      	beq.n	801cb5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801cb24:	f010 0f04 	tst.w	r0, #4
 801cb28:	d01d      	beq.n	801cb66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801cb2a:	f8d9 0000 	ldr.w	r0, [r9]
 801cb2e:	2700      	movs	r7, #0
 801cb30:	b2ad      	uxth	r5, r5
 801cb32:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801cb36:	6801      	ldr	r1, [r0, #0]
 801cb38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cb3c:	f8cd b00c 	str.w	fp, [sp, #12]
 801cb40:	9501      	str	r5, [sp, #4]
 801cb42:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801cb46:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801cb4a:	9402      	str	r4, [sp, #8]
 801cb4c:	fa1f f488 	uxth.w	r4, r8
 801cb50:	9400      	str	r4, [sp, #0]
 801cb52:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801cb54:	4631      	mov	r1, r6
 801cb56:	47a0      	blx	r4
 801cb58:	b00b      	add	sp, #44	; 0x2c
 801cb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb5e:	b914      	cbnz	r4, 801cb66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801cb60:	f010 0f01 	tst.w	r0, #1
 801cb64:	e7e0      	b.n	801cb28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801cb66:	f8d9 0000 	ldr.w	r0, [r9]
 801cb6a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801cb6e:	6803      	ldr	r3, [r0, #0]
 801cb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb72:	4798      	blx	r3
 801cb74:	4b43      	ldr	r3, [pc, #268]	; (801cc84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801cb76:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801cb7a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cb7e:	881a      	ldrh	r2, [r3, #0]
 801cb80:	469a      	mov	sl, r3
 801cb82:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801cb86:	fb05 f502 	mul.w	r5, r5, r2
 801cb8a:	fb02 1404 	mla	r4, r2, r4, r1
 801cb8e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cb92:	d059      	beq.n	801cc48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801cb94:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801cb98:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801cb9c:	fa1f f28b 	uxth.w	r2, fp
 801cba0:	469e      	mov	lr, r3
 801cba2:	fa1f f989 	uxth.w	r9, r9
 801cba6:	42ac      	cmp	r4, r5
 801cba8:	d264      	bcs.n	801cc74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801cbaa:	eb04 0a07 	add.w	sl, r4, r7
 801cbae:	4554      	cmp	r4, sl
 801cbb0:	d23d      	bcs.n	801cc2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801cbb2:	8821      	ldrh	r1, [r4, #0]
 801cbb4:	f836 3b02 	ldrh.w	r3, [r6], #2
 801cbb8:	1208      	asrs	r0, r1, #8
 801cbba:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801cbbe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cbc2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801cbc6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cbca:	00c9      	lsls	r1, r1, #3
 801cbcc:	fb10 f009 	smulbb	r0, r0, r9
 801cbd0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801cbd4:	b2c9      	uxtb	r1, r1
 801cbd6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801cbda:	10d8      	asrs	r0, r3, #3
 801cbdc:	fb1b fb09 	smulbb	fp, fp, r9
 801cbe0:	00db      	lsls	r3, r3, #3
 801cbe2:	fa1f fc8c 	uxth.w	ip, ip
 801cbe6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801cbea:	fb11 f109 	smulbb	r1, r1, r9
 801cbee:	b2db      	uxtb	r3, r3
 801cbf0:	fb00 b002 	mla	r0, r0, r2, fp
 801cbf4:	f10c 0b01 	add.w	fp, ip, #1
 801cbf8:	fb03 1302 	mla	r3, r3, r2, r1
 801cbfc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cc00:	b29b      	uxth	r3, r3
 801cc02:	b280      	uxth	r0, r0
 801cc04:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801cc08:	f103 0c01 	add.w	ip, r3, #1
 801cc0c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801cc10:	1c43      	adds	r3, r0, #1
 801cc12:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cc16:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cc1a:	0940      	lsrs	r0, r0, #5
 801cc1c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801cc20:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cc24:	ea4c 0c00 	orr.w	ip, ip, r0
 801cc28:	f824 cb02 	strh.w	ip, [r4], #2
 801cc2c:	e7bf      	b.n	801cbae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801cc2e:	f8be 3000 	ldrh.w	r3, [lr]
 801cc32:	eba3 0308 	sub.w	r3, r3, r8
 801cc36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cc3e:	eba3 0308 	sub.w	r3, r3, r8
 801cc42:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801cc46:	e7ae      	b.n	801cba6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801cc48:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801cc4c:	f8d9 0000 	ldr.w	r0, [r9]
 801cc50:	42ac      	cmp	r4, r5
 801cc52:	6803      	ldr	r3, [r0, #0]
 801cc54:	d20e      	bcs.n	801cc74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801cc56:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801cc5a:	4632      	mov	r2, r6
 801cc5c:	463b      	mov	r3, r7
 801cc5e:	4621      	mov	r1, r4
 801cc60:	47c0      	blx	r8
 801cc62:	f8ba 3000 	ldrh.w	r3, [sl]
 801cc66:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc6a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cc6e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801cc72:	e7eb      	b.n	801cc4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801cc74:	4b02      	ldr	r3, [pc, #8]	; (801cc80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801cc76:	6818      	ldr	r0, [r3, #0]
 801cc78:	6803      	ldr	r3, [r0, #0]
 801cc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc7c:	4798      	blx	r3
 801cc7e:	e76b      	b.n	801cb58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801cc80:	20006f14 	.word	0x20006f14
 801cc84:	20006f0c 	.word	0x20006f0c

0801cc88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc8a:	4606      	mov	r6, r0
 801cc8c:	b087      	sub	sp, #28
 801cc8e:	460c      	mov	r4, r1
 801cc90:	4617      	mov	r7, r2
 801cc92:	461d      	mov	r5, r3
 801cc94:	b333      	cbz	r3, 801cce4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cc96:	4608      	mov	r0, r1
 801cc98:	f7fc fb71 	bl	801937e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc9c:	bb10      	cbnz	r0, 801cce4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cc9e:	6820      	ldr	r0, [r4, #0]
 801cca0:	ab04      	add	r3, sp, #16
 801cca2:	6861      	ldr	r1, [r4, #4]
 801cca4:	4c1b      	ldr	r4, [pc, #108]	; (801cd14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801cca6:	c303      	stmia	r3!, {r0, r1}
 801cca8:	a804      	add	r0, sp, #16
 801ccaa:	f7fe f9fb 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ccae:	6820      	ldr	r0, [r4, #0]
 801ccb0:	6803      	ldr	r3, [r0, #0]
 801ccb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ccb4:	4798      	blx	r3
 801ccb6:	2dff      	cmp	r5, #255	; 0xff
 801ccb8:	d016      	beq.n	801cce8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ccba:	f010 0f08 	tst.w	r0, #8
 801ccbe:	6820      	ldr	r0, [r4, #0]
 801ccc0:	d015      	beq.n	801ccee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801ccc2:	2400      	movs	r4, #0
 801ccc4:	6801      	ldr	r1, [r0, #0]
 801ccc6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ccca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ccce:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801ccd2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801ccd6:	9401      	str	r4, [sp, #4]
 801ccd8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801ccdc:	9400      	str	r4, [sp, #0]
 801ccde:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801cce0:	4639      	mov	r1, r7
 801cce2:	47a0      	blx	r4
 801cce4:	b007      	add	sp, #28
 801cce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cce8:	f010 0f02 	tst.w	r0, #2
 801ccec:	e7e7      	b.n	801ccbe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801ccee:	6803      	ldr	r3, [r0, #0]
 801ccf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccf2:	4798      	blx	r3
 801ccf4:	4b08      	ldr	r3, [pc, #32]	; (801cd18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801ccf6:	4601      	mov	r1, r0
 801ccf8:	4630      	mov	r0, r6
 801ccfa:	881a      	ldrh	r2, [r3, #0]
 801ccfc:	6833      	ldr	r3, [r6, #0]
 801ccfe:	e9cd 7500 	strd	r7, r5, [sp]
 801cd02:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cd04:	ab04      	add	r3, sp, #16
 801cd06:	47a8      	blx	r5
 801cd08:	6820      	ldr	r0, [r4, #0]
 801cd0a:	6803      	ldr	r3, [r0, #0]
 801cd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd0e:	4798      	blx	r3
 801cd10:	e7e8      	b.n	801cce4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cd12:	bf00      	nop
 801cd14:	20006f14 	.word	0x20006f14
 801cd18:	20006f0c 	.word	0x20006f0c

0801cd1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd20:	4690      	mov	r8, r2
 801cd22:	4a8d      	ldr	r2, [pc, #564]	; (801cf58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>)
 801cd24:	b091      	sub	sp, #68	; 0x44
 801cd26:	4606      	mov	r6, r0
 801cd28:	6812      	ldr	r2, [r2, #0]
 801cd2a:	460d      	mov	r5, r1
 801cd2c:	461c      	mov	r4, r3
 801cd2e:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 801cd32:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801cd36:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801cd3a:	2a02      	cmp	r2, #2
 801cd3c:	d106      	bne.n	801cd4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x30>
 801cd3e:	4b87      	ldr	r3, [pc, #540]	; (801cf5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x240>)
 801cd40:	f240 316b 	movw	r1, #875	; 0x36b
 801cd44:	4a86      	ldr	r2, [pc, #536]	; (801cf60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 801cd46:	4887      	ldr	r0, [pc, #540]	; (801cf64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 801cd48:	f001 fda0 	bl	801e88c <__assert_func>
 801cd4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801cd4e:	b923      	cbnz	r3, 801cd5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e>
 801cd50:	4b85      	ldr	r3, [pc, #532]	; (801cf68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 801cd52:	f44f 715b 	mov.w	r1, #876	; 0x36c
 801cd56:	4a82      	ldr	r2, [pc, #520]	; (801cf60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 801cd58:	e7f5      	b.n	801cd46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2a>
 801cd5a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cd5e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 801cd62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cd66:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 801cd6a:	4648      	mov	r0, r9
 801cd6c:	4621      	mov	r1, r4
 801cd6e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801cd72:	f8ad b02c 	strh.w	fp, [sp, #44]	; 0x2c
 801cd76:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801cd7a:	f7fc fabd 	bl	80192f8 <_ZN8touchgfx4RectaNERKS0_>
 801cd7e:	4641      	mov	r1, r8
 801cd80:	4648      	mov	r0, r9
 801cd82:	f7fc fab9 	bl	80192f8 <_ZN8touchgfx4RectaNERKS0_>
 801cd86:	4a79      	ldr	r2, [pc, #484]	; (801cf6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 801cd88:	f8b2 c000 	ldrh.w	ip, [r2]
 801cd8c:	4a78      	ldr	r2, [pc, #480]	; (801cf70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 801cd8e:	fa0f f18c 	sxth.w	r1, ip
 801cd92:	8810      	ldrh	r0, [r2, #0]
 801cd94:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801cd98:	fa0f fe80 	sxth.w	lr, r0
 801cd9c:	2a00      	cmp	r2, #0
 801cd9e:	da07      	bge.n	801cdb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 801cda0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 801cda4:	4442      	add	r2, r8
 801cda6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801cdaa:	2200      	movs	r2, #0
 801cdac:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cdb0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801cdb4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801cdb8:	1a89      	subs	r1, r1, r2
 801cdba:	4588      	cmp	r8, r1
 801cdbc:	bfc4      	itt	gt
 801cdbe:	ebac 0102 	subgt.w	r1, ip, r2
 801cdc2:	f8ad 102c 	strhgt.w	r1, [sp, #44]	; 0x2c
 801cdc6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801cdca:	2900      	cmp	r1, #0
 801cdcc:	da07      	bge.n	801cdde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xc2>
 801cdce:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 801cdd2:	4441      	add	r1, r8
 801cdd4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801cdd8:	2100      	movs	r1, #0
 801cdda:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801cdde:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801cde2:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 801cde6:	ebae 0e0a 	sub.w	lr, lr, sl
 801cdea:	4571      	cmp	r1, lr
 801cdec:	bfc4      	itt	gt
 801cdee:	eba0 010a 	subgt.w	r1, r0, sl
 801cdf2:	f8ad 102e 	strhgt.w	r1, [sp, #46]	; 0x2e
 801cdf6:	495f      	ldr	r1, [pc, #380]	; (801cf74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 801cdf8:	7809      	ldrb	r1, [r1, #0]
 801cdfa:	b9a9      	cbnz	r1, 801ce28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x10c>
 801cdfc:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801ce00:	45e0      	cmp	r8, ip
 801ce02:	bf14      	ite	ne
 801ce04:	2300      	movne	r3, #0
 801ce06:	2301      	moveq	r3, #1
 801ce08:	4648      	mov	r0, r9
 801ce0a:	9202      	str	r2, [sp, #8]
 801ce0c:	9305      	str	r3, [sp, #20]
 801ce0e:	f7fc fab6 	bl	801937e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ce12:	9a02      	ldr	r2, [sp, #8]
 801ce14:	b160      	cbz	r0, 801ce30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x114>
 801ce16:	2300      	movs	r3, #0
 801ce18:	8033      	strh	r3, [r6, #0]
 801ce1a:	8073      	strh	r3, [r6, #2]
 801ce1c:	80b3      	strh	r3, [r6, #4]
 801ce1e:	4630      	mov	r0, r6
 801ce20:	80f3      	strh	r3, [r6, #6]
 801ce22:	b011      	add	sp, #68	; 0x44
 801ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce28:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ce2c:	4580      	cmp	r8, r0
 801ce2e:	e7e8      	b.n	801ce02 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe6>
 801ce30:	8821      	ldrh	r1, [r4, #0]
 801ce32:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801ce36:	1a52      	subs	r2, r2, r1
 801ce38:	900e      	str	r0, [sp, #56]	; 0x38
 801ce3a:	9304      	str	r3, [sp, #16]
 801ce3c:	a90e      	add	r1, sp, #56	; 0x38
 801ce3e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801ce42:	a80c      	add	r0, sp, #48	; 0x30
 801ce44:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801ce48:	9306      	str	r3, [sp, #24]
 801ce4a:	b213      	sxth	r3, r2
 801ce4c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
 801ce50:	9302      	str	r3, [sp, #8]
 801ce52:	8863      	ldrh	r3, [r4, #2]
 801ce54:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801cf58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 801ce58:	ebaa 0a03 	sub.w	sl, sl, r3
 801ce5c:	fa0f f38a 	sxth.w	r3, sl
 801ce60:	9303      	str	r3, [sp, #12]
 801ce62:	9b02      	ldr	r3, [sp, #8]
 801ce64:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801ce68:	9b03      	ldr	r3, [sp, #12]
 801ce6a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ce6e:	9b04      	ldr	r3, [sp, #16]
 801ce70:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ce74:	9b06      	ldr	r3, [sp, #24]
 801ce76:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801ce7a:	f7fe f93b 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ce7e:	4648      	mov	r0, r9
 801ce80:	f7fe f910 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce84:	a80e      	add	r0, sp, #56	; 0x38
 801ce86:	f7fe f90d 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce8a:	4b3b      	ldr	r3, [pc, #236]	; (801cf78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 801ce8c:	4628      	mov	r0, r5
 801ce8e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 801ce92:	881b      	ldrh	r3, [r3, #0]
 801ce94:	9307      	str	r3, [sp, #28]
 801ce96:	682b      	ldr	r3, [r5, #0]
 801ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ce9a:	4798      	blx	r3
 801ce9c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cea0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801cea4:	4682      	mov	sl, r0
 801cea6:	f8d8 0000 	ldr.w	r0, [r8]
 801ceaa:	fb17 2303 	smlabb	r3, r7, r3, r2
 801ceae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ceb0:	eb02 0443 	add.w	r4, r2, r3, lsl #1
 801ceb4:	6803      	ldr	r3, [r0, #0]
 801ceb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ceb8:	4798      	blx	r3
 801ceba:	9009      	str	r0, [sp, #36]	; 0x24
 801cebc:	f8d8 0000 	ldr.w	r0, [r8]
 801cec0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cec4:	6802      	ldr	r2, [r0, #0]
 801cec6:	9308      	str	r3, [sp, #32]
 801cec8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801ceca:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 801cece:	4790      	blx	r2
 801ced0:	f010 0f01 	tst.w	r0, #1
 801ced4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ced6:	d011      	beq.n	801cefc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 801ced8:	f8d8 0000 	ldr.w	r0, [r8]
 801cedc:	6803      	ldr	r3, [r0, #0]
 801cede:	f8cd b000 	str.w	fp, [sp]
 801cee2:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801cee4:	4623      	mov	r3, r4
 801cee6:	e899 0006 	ldmia.w	r9, {r1, r2}
 801ceea:	47a8      	blx	r5
 801ceec:	9b02      	ldr	r3, [sp, #8]
 801ceee:	8033      	strh	r3, [r6, #0]
 801cef0:	9b03      	ldr	r3, [sp, #12]
 801cef2:	8073      	strh	r3, [r6, #2]
 801cef4:	9b04      	ldr	r3, [sp, #16]
 801cef6:	80b3      	strh	r3, [r6, #4]
 801cef8:	9b06      	ldr	r3, [sp, #24]
 801cefa:	e790      	b.n	801ce1e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x102>
 801cefc:	9a08      	ldr	r2, [sp, #32]
 801cefe:	fb0a f505 	mul.w	r5, sl, r5
 801cf02:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801cf06:	9a05      	ldr	r2, [sp, #20]
 801cf08:	441d      	add	r5, r3
 801cf0a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801cf0e:	b162      	cbz	r2, 801cf2a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 801cf10:	9a07      	ldr	r2, [sp, #28]
 801cf12:	4297      	cmp	r7, r2
 801cf14:	d109      	bne.n	801cf2a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 801cf16:	f8d8 0000 	ldr.w	r0, [r8]
 801cf1a:	fb03 f30a 	mul.w	r3, r3, sl
 801cf1e:	4621      	mov	r1, r4
 801cf20:	6802      	ldr	r2, [r0, #0]
 801cf22:	6b57      	ldr	r7, [r2, #52]	; 0x34
 801cf24:	462a      	mov	r2, r5
 801cf26:	47b8      	blx	r7
 801cf28:	e7e0      	b.n	801ceec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 801cf2a:	437b      	muls	r3, r7
 801cf2c:	f8df b028 	ldr.w	fp, [pc, #40]	; 801cf58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 801cf30:	007f      	lsls	r7, r7, #1
 801cf32:	eb04 0843 	add.w	r8, r4, r3, lsl #1
 801cf36:	4544      	cmp	r4, r8
 801cf38:	d2d8      	bcs.n	801ceec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 801cf3a:	f8db 0000 	ldr.w	r0, [fp]
 801cf3e:	4621      	mov	r1, r4
 801cf40:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cf44:	443c      	add	r4, r7
 801cf46:	6802      	ldr	r2, [r0, #0]
 801cf48:	005b      	lsls	r3, r3, #1
 801cf4a:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 801cf4e:	462a      	mov	r2, r5
 801cf50:	47c8      	blx	r9
 801cf52:	4455      	add	r5, sl
 801cf54:	e7ef      	b.n	801cf36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 801cf56:	bf00      	nop
 801cf58:	20006f14 	.word	0x20006f14
 801cf5c:	0802377a 	.word	0x0802377a
 801cf60:	08023cc1 	.word	0x08023cc1
 801cf64:	0802382c 	.word	0x0802382c
 801cf68:	0802372c 	.word	0x0802372c
 801cf6c:	20006f06 	.word	0x20006f06
 801cf70:	20006f08 	.word	0x20006f08
 801cf74:	20006f0a 	.word	0x20006f0a
 801cf78:	20006f0c 	.word	0x20006f0c

0801cf7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf80:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801cf84:	4688      	mov	r8, r1
 801cf86:	4614      	mov	r4, r2
 801cf88:	461d      	mov	r5, r3
 801cf8a:	9e08      	ldr	r6, [sp, #32]
 801cf8c:	2f00      	cmp	r7, #0
 801cf8e:	f000 80b4 	beq.w	801d0fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cf92:	4618      	mov	r0, r3
 801cf94:	f7fc f9f3 	bl	801937e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf98:	2800      	cmp	r0, #0
 801cf9a:	f040 80ae 	bne.w	801d0fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cf9e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801cfa2:	2fff      	cmp	r7, #255	; 0xff
 801cfa4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801cfa8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801cfac:	fb04 1303 	mla	r3, r4, r3, r1
 801cfb0:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801cfb4:	eba4 0200 	sub.w	r2, r4, r0
 801cfb8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801cfbc:	fb04 f505 	mul.w	r5, r4, r5
 801cfc0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801cfc4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801cfc8:	d04b      	beq.n	801d062 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801cfca:	b2bc      	uxth	r4, r7
 801cfcc:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801cfd0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801cfd4:	fa5f f788 	uxtb.w	r7, r8
 801cfd8:	b2f3      	uxtb	r3, r6
 801cfda:	0040      	lsls	r0, r0, #1
 801cfdc:	fb0e fe04 	mul.w	lr, lr, r4
 801cfe0:	4367      	muls	r7, r4
 801cfe2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801cfe6:	4363      	muls	r3, r4
 801cfe8:	fa1f fc8c 	uxth.w	ip, ip
 801cfec:	42a9      	cmp	r1, r5
 801cfee:	f080 8084 	bcs.w	801d0fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cff2:	eb01 0900 	add.w	r9, r1, r0
 801cff6:	4549      	cmp	r1, r9
 801cff8:	d231      	bcs.n	801d05e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801cffa:	880a      	ldrh	r2, [r1, #0]
 801cffc:	1214      	asrs	r4, r2, #8
 801cffe:	10d6      	asrs	r6, r2, #3
 801d000:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d004:	00d2      	lsls	r2, r2, #3
 801d006:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d00a:	b2d2      	uxtb	r2, r2
 801d00c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801d010:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d014:	fb14 f40c 	smulbb	r4, r4, ip
 801d018:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801d01c:	fb12 f20c 	smulbb	r2, r2, ip
 801d020:	fb16 f60c 	smulbb	r6, r6, ip
 801d024:	4474      	add	r4, lr
 801d026:	441a      	add	r2, r3
 801d028:	b2a4      	uxth	r4, r4
 801d02a:	443e      	add	r6, r7
 801d02c:	b292      	uxth	r2, r2
 801d02e:	f104 0a01 	add.w	sl, r4, #1
 801d032:	b2b6      	uxth	r6, r6
 801d034:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d038:	f102 0a01 	add.w	sl, r2, #1
 801d03c:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801d040:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d044:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d048:	4322      	orrs	r2, r4
 801d04a:	1c74      	adds	r4, r6, #1
 801d04c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801d050:	0976      	lsrs	r6, r6, #5
 801d052:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d056:	4332      	orrs	r2, r6
 801d058:	f821 2b02 	strh.w	r2, [r1], #2
 801d05c:	e7cb      	b.n	801cff6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801d05e:	4441      	add	r1, r8
 801d060:	e7c4      	b.n	801cfec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801d062:	0973      	lsrs	r3, r6, #5
 801d064:	4f26      	ldr	r7, [pc, #152]	; (801d100 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801d066:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d06a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d06e:	ea08 0707 	and.w	r7, r8, r7
 801d072:	433b      	orrs	r3, r7
 801d074:	4333      	orrs	r3, r6
 801d076:	07e6      	lsls	r6, r4, #31
 801d078:	b29b      	uxth	r3, r3
 801d07a:	d50b      	bpl.n	801d094 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801d07c:	0040      	lsls	r0, r0, #1
 801d07e:	0052      	lsls	r2, r2, #1
 801d080:	42a9      	cmp	r1, r5
 801d082:	d23a      	bcs.n	801d0fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801d084:	180c      	adds	r4, r1, r0
 801d086:	42a1      	cmp	r1, r4
 801d088:	d202      	bcs.n	801d090 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801d08a:	f821 3b02 	strh.w	r3, [r1], #2
 801d08e:	e7fa      	b.n	801d086 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801d090:	4411      	add	r1, r2
 801d092:	e7f5      	b.n	801d080 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801d094:	078f      	lsls	r7, r1, #30
 801d096:	d008      	beq.n	801d0aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801d098:	0066      	lsls	r6, r4, #1
 801d09a:	460a      	mov	r2, r1
 801d09c:	42aa      	cmp	r2, r5
 801d09e:	d202      	bcs.n	801d0a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801d0a0:	8013      	strh	r3, [r2, #0]
 801d0a2:	4432      	add	r2, r6
 801d0a4:	e7fa      	b.n	801d09c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801d0a6:	3102      	adds	r1, #2
 801d0a8:	3801      	subs	r0, #1
 801d0aa:	07c6      	lsls	r6, r0, #31
 801d0ac:	d50b      	bpl.n	801d0c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801d0ae:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801d0b2:	0066      	lsls	r6, r4, #1
 801d0b4:	3a01      	subs	r2, #1
 801d0b6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801d0ba:	42aa      	cmp	r2, r5
 801d0bc:	d202      	bcs.n	801d0c4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801d0be:	8013      	strh	r3, [r2, #0]
 801d0c0:	4432      	add	r2, r6
 801d0c2:	e7fa      	b.n	801d0ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801d0c4:	3801      	subs	r0, #1
 801d0c6:	b1c0      	cbz	r0, 801d0fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801d0c8:	1040      	asrs	r0, r0, #1
 801d0ca:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801d0ce:	0080      	lsls	r0, r0, #2
 801d0d0:	0064      	lsls	r4, r4, #1
 801d0d2:	42a9      	cmp	r1, r5
 801d0d4:	d211      	bcs.n	801d0fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801d0d6:	078a      	lsls	r2, r1, #30
 801d0d8:	d006      	beq.n	801d0e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801d0da:	4b0a      	ldr	r3, [pc, #40]	; (801d104 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801d0dc:	f240 4137 	movw	r1, #1079	; 0x437
 801d0e0:	4a09      	ldr	r2, [pc, #36]	; (801d108 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801d0e2:	480a      	ldr	r0, [pc, #40]	; (801d10c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801d0e4:	f001 fbd2 	bl	801e88c <__assert_func>
 801d0e8:	180e      	adds	r6, r1, r0
 801d0ea:	460a      	mov	r2, r1
 801d0ec:	42b2      	cmp	r2, r6
 801d0ee:	d202      	bcs.n	801d0f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801d0f0:	f842 3b04 	str.w	r3, [r2], #4
 801d0f4:	e7fa      	b.n	801d0ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801d0f6:	4421      	add	r1, r4
 801d0f8:	e7eb      	b.n	801d0d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801d0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0fe:	bf00      	nop
 801d100:	00fff800 	.word	0x00fff800
 801d104:	080235dd 	.word	0x080235dd
 801d108:	080239f0 	.word	0x080239f0
 801d10c:	0802382c 	.word	0x0802382c

0801d110 <_ZN8touchgfx8LCD16bppC1Ev>:
 801d110:	2200      	movs	r2, #0
 801d112:	4910      	ldr	r1, [pc, #64]	; (801d154 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801d114:	6042      	str	r2, [r0, #4]
 801d116:	6001      	str	r1, [r0, #0]
 801d118:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d11c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d120:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d124:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d128:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d12c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d130:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d134:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d138:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d13c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d140:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d144:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d148:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801d14c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801d150:	4770      	bx	lr
 801d152:	bf00      	nop
 801d154:	080239a0 	.word	0x080239a0

0801d158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d15c:	b08d      	sub	sp, #52	; 0x34
 801d15e:	460d      	mov	r5, r1
 801d160:	4604      	mov	r4, r0
 801d162:	4699      	mov	r9, r3
 801d164:	6808      	ldr	r0, [r1, #0]
 801d166:	ab08      	add	r3, sp, #32
 801d168:	6849      	ldr	r1, [r1, #4]
 801d16a:	c303      	stmia	r3!, {r0, r1}
 801d16c:	6810      	ldr	r0, [r2, #0]
 801d16e:	ab0a      	add	r3, sp, #40	; 0x28
 801d170:	6851      	ldr	r1, [r2, #4]
 801d172:	c303      	stmia	r3!, {r0, r1}
 801d174:	a808      	add	r0, sp, #32
 801d176:	f7fd ff95 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d17a:	4629      	mov	r1, r5
 801d17c:	a80a      	add	r0, sp, #40	; 0x28
 801d17e:	4d67      	ldr	r5, [pc, #412]	; (801d31c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d180:	f7fd ffb8 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d184:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d188:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d18c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d190:	6828      	ldr	r0, [r5, #0]
 801d192:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d196:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801d19a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d19e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d1a2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d1a6:	440a      	add	r2, r1
 801d1a8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d1ac:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d1b0:	4413      	add	r3, r2
 801d1b2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d1b6:	6803      	ldr	r3, [r0, #0]
 801d1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1ba:	4798      	blx	r3
 801d1bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d1c0:	d119      	bne.n	801d1f6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d1c2:	f010 0f20 	tst.w	r0, #32
 801d1c6:	6828      	ldr	r0, [r5, #0]
 801d1c8:	d018      	beq.n	801d1fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d1ca:	2500      	movs	r5, #0
 801d1cc:	6801      	ldr	r1, [r0, #0]
 801d1ce:	b2b6      	uxth	r6, r6
 801d1d0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d1d4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d1d8:	9601      	str	r6, [sp, #4]
 801d1da:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801d1de:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d1e2:	9502      	str	r5, [sp, #8]
 801d1e4:	fa1f f588 	uxth.w	r5, r8
 801d1e8:	9500      	str	r5, [sp, #0]
 801d1ea:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d1ec:	4621      	mov	r1, r4
 801d1ee:	47a8      	blx	r5
 801d1f0:	b00d      	add	sp, #52	; 0x34
 801d1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d1fa:	e7e4      	b.n	801d1c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d1fc:	6803      	ldr	r3, [r0, #0]
 801d1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d200:	4798      	blx	r3
 801d202:	4947      	ldr	r1, [pc, #284]	; (801d320 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801d204:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d208:	880b      	ldrh	r3, [r1, #0]
 801d20a:	468a      	mov	sl, r1
 801d20c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d210:	fb03 5202 	mla	r2, r3, r2, r5
 801d214:	4373      	muls	r3, r6
 801d216:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d21a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d21e:	9307      	str	r3, [sp, #28]
 801d220:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d224:	9306      	str	r3, [sp, #24]
 801d226:	9b07      	ldr	r3, [sp, #28]
 801d228:	4298      	cmp	r0, r3
 801d22a:	d270      	bcs.n	801d30e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801d22c:	9b06      	ldr	r3, [sp, #24]
 801d22e:	4621      	mov	r1, r4
 801d230:	eb00 0b03 	add.w	fp, r0, r3
 801d234:	4558      	cmp	r0, fp
 801d236:	d25d      	bcs.n	801d2f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801d238:	f851 4b04 	ldr.w	r4, [r1], #4
 801d23c:	0e23      	lsrs	r3, r4, #24
 801d23e:	d014      	beq.n	801d26a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d240:	2bff      	cmp	r3, #255	; 0xff
 801d242:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801d246:	d112      	bne.n	801d26e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d248:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d24c:	d10f      	bne.n	801d26e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d24e:	0963      	lsrs	r3, r4, #5
 801d250:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801d254:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d258:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d25c:	f02c 0c07 	bic.w	ip, ip, #7
 801d260:	ea43 0c0c 	orr.w	ip, r3, ip
 801d264:	ea4c 0404 	orr.w	r4, ip, r4
 801d268:	8004      	strh	r4, [r0, #0]
 801d26a:	3002      	adds	r0, #2
 801d26c:	e7e2      	b.n	801d234 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801d26e:	fb09 f303 	mul.w	r3, r9, r3
 801d272:	8807      	ldrh	r7, [r0, #0]
 801d274:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d278:	fa5f fc8c 	uxtb.w	ip, ip
 801d27c:	1c5a      	adds	r2, r3, #1
 801d27e:	123e      	asrs	r6, r7, #8
 801d280:	10fd      	asrs	r5, r7, #3
 801d282:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d286:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d28a:	00ff      	lsls	r7, r7, #3
 801d28c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d290:	1212      	asrs	r2, r2, #8
 801d292:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d296:	b293      	uxth	r3, r2
 801d298:	43d2      	mvns	r2, r2
 801d29a:	b2ff      	uxtb	r7, r7
 801d29c:	fb1e fe03 	smulbb	lr, lr, r3
 801d2a0:	b2d2      	uxtb	r2, r2
 801d2a2:	fb1c fc03 	smulbb	ip, ip, r3
 801d2a6:	b2e4      	uxtb	r4, r4
 801d2a8:	fb06 e602 	mla	r6, r6, r2, lr
 801d2ac:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d2b0:	fb14 f403 	smulbb	r4, r4, r3
 801d2b4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d2b8:	b2b6      	uxth	r6, r6
 801d2ba:	fb05 c502 	mla	r5, r5, r2, ip
 801d2be:	fb07 4702 	mla	r7, r7, r2, r4
 801d2c2:	f106 0e01 	add.w	lr, r6, #1
 801d2c6:	b2ad      	uxth	r5, r5
 801d2c8:	b2bf      	uxth	r7, r7
 801d2ca:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d2ce:	f105 0c01 	add.w	ip, r5, #1
 801d2d2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d2d6:	1c7e      	adds	r6, r7, #1
 801d2d8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d2dc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d2e0:	096d      	lsrs	r5, r5, #5
 801d2e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d2e6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d2ea:	ea46 060e 	orr.w	r6, r6, lr
 801d2ee:	432e      	orrs	r6, r5
 801d2f0:	8006      	strh	r6, [r0, #0]
 801d2f2:	e7ba      	b.n	801d26a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d2f4:	f8ba 3000 	ldrh.w	r3, [sl]
 801d2f8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d2fc:	eba3 0308 	sub.w	r3, r3, r8
 801d300:	eba4 0408 	sub.w	r4, r4, r8
 801d304:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d308:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d30c:	e78b      	b.n	801d226 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801d30e:	4b03      	ldr	r3, [pc, #12]	; (801d31c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d310:	6818      	ldr	r0, [r3, #0]
 801d312:	6803      	ldr	r3, [r0, #0]
 801d314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d316:	4798      	blx	r3
 801d318:	e76a      	b.n	801d1f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d31a:	bf00      	nop
 801d31c:	20006f14 	.word	0x20006f14
 801d320:	20006f0c 	.word	0x20006f0c

0801d324 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801d324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d328:	b085      	sub	sp, #20
 801d32a:	6810      	ldr	r0, [r2, #0]
 801d32c:	460c      	mov	r4, r1
 801d32e:	6851      	ldr	r1, [r2, #4]
 801d330:	466d      	mov	r5, sp
 801d332:	4616      	mov	r6, r2
 801d334:	c503      	stmia	r5!, {r0, r1}
 801d336:	6818      	ldr	r0, [r3, #0]
 801d338:	6859      	ldr	r1, [r3, #4]
 801d33a:	c503      	stmia	r5!, {r0, r1}
 801d33c:	4668      	mov	r0, sp
 801d33e:	4d2e      	ldr	r5, [pc, #184]	; (801d3f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801d340:	f7fd feb0 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d344:	4631      	mov	r1, r6
 801d346:	a802      	add	r0, sp, #8
 801d348:	4e2c      	ldr	r6, [pc, #176]	; (801d3fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801d34a:	f7fd fed3 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d34e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d352:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801d356:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d35a:	6828      	ldr	r0, [r5, #0]
 801d35c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d360:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d364:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d368:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d36c:	f8bd 1000 	ldrh.w	r1, [sp]
 801d370:	440a      	add	r2, r1
 801d372:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d376:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d37a:	4413      	add	r3, r2
 801d37c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d380:	6803      	ldr	r3, [r0, #0]
 801d382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d384:	4798      	blx	r3
 801d386:	8833      	ldrh	r3, [r6, #0]
 801d388:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d38c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801d390:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d394:	f8df e068 	ldr.w	lr, [pc, #104]	; 801d400 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801d398:	fb03 1202 	mla	r2, r3, r2, r1
 801d39c:	fb08 f303 	mul.w	r3, r8, r3
 801d3a0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d3a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d3a8:	4298      	cmp	r0, r3
 801d3aa:	d21d      	bcs.n	801d3e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801d3ac:	eb00 080c 	add.w	r8, r0, ip
 801d3b0:	4540      	cmp	r0, r8
 801d3b2:	d20f      	bcs.n	801d3d4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801d3b4:	f854 1b04 	ldr.w	r1, [r4], #4
 801d3b8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801d3bc:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801d3c0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d3c4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d3c8:	ea42 0209 	orr.w	r2, r2, r9
 801d3cc:	430a      	orrs	r2, r1
 801d3ce:	f820 2b02 	strh.w	r2, [r0], #2
 801d3d2:	e7ed      	b.n	801d3b0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801d3d4:	8832      	ldrh	r2, [r6, #0]
 801d3d6:	1bd2      	subs	r2, r2, r7
 801d3d8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d3dc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d3e0:	1bd2      	subs	r2, r2, r7
 801d3e2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d3e6:	e7df      	b.n	801d3a8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801d3e8:	6828      	ldr	r0, [r5, #0]
 801d3ea:	6803      	ldr	r3, [r0, #0]
 801d3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3ee:	4798      	blx	r3
 801d3f0:	b005      	add	sp, #20
 801d3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3f6:	bf00      	nop
 801d3f8:	20006f14 	.word	0x20006f14
 801d3fc:	20006f0c 	.word	0x20006f0c
 801d400:	fffff800 	.word	0xfffff800

0801d404 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d408:	b08e      	sub	sp, #56	; 0x38
 801d40a:	460e      	mov	r6, r1
 801d40c:	4604      	mov	r4, r0
 801d40e:	461d      	mov	r5, r3
 801d410:	6808      	ldr	r0, [r1, #0]
 801d412:	ab0a      	add	r3, sp, #40	; 0x28
 801d414:	6849      	ldr	r1, [r1, #4]
 801d416:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801d5ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d41a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801d5f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d41e:	c303      	stmia	r3!, {r0, r1}
 801d420:	6810      	ldr	r0, [r2, #0]
 801d422:	ab0c      	add	r3, sp, #48	; 0x30
 801d424:	6851      	ldr	r1, [r2, #4]
 801d426:	c303      	stmia	r3!, {r0, r1}
 801d428:	a80a      	add	r0, sp, #40	; 0x28
 801d42a:	f7fd fe3b 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d42e:	4631      	mov	r1, r6
 801d430:	a80c      	add	r0, sp, #48	; 0x30
 801d432:	f7fd fe5f 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d436:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d43a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d43e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d442:	f8d8 0000 	ldr.w	r0, [r8]
 801d446:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d44a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d44e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d452:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d456:	440c      	add	r4, r1
 801d458:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d45c:	440a      	add	r2, r1
 801d45e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d462:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d466:	4413      	add	r3, r2
 801d468:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d46c:	6803      	ldr	r3, [r0, #0]
 801d46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d470:	4798      	blx	r3
 801d472:	2dff      	cmp	r5, #255	; 0xff
 801d474:	d124      	bne.n	801d4c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d476:	f010 0f01 	tst.w	r0, #1
 801d47a:	f8d8 0000 	ldr.w	r0, [r8]
 801d47e:	d022      	beq.n	801d4c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d480:	2100      	movs	r1, #0
 801d482:	f04f 0e01 	mov.w	lr, #1
 801d486:	f8d0 c000 	ldr.w	ip, [r0]
 801d48a:	b2b6      	uxth	r6, r6
 801d48c:	f8cd e018 	str.w	lr, [sp, #24]
 801d490:	b2bf      	uxth	r7, r7
 801d492:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d496:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d49a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d49e:	f8b9 e000 	ldrh.w	lr, [r9]
 801d4a2:	9503      	str	r5, [sp, #12]
 801d4a4:	9601      	str	r6, [sp, #4]
 801d4a6:	9700      	str	r7, [sp, #0]
 801d4a8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d4ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d4b0:	9102      	str	r1, [sp, #8]
 801d4b2:	4621      	mov	r1, r4
 801d4b4:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d4b8:	47a8      	blx	r5
 801d4ba:	b00e      	add	sp, #56	; 0x38
 801d4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4c0:	f010 0f04 	tst.w	r0, #4
 801d4c4:	e7d9      	b.n	801d47a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d4c6:	6803      	ldr	r3, [r0, #0]
 801d4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4ca:	4798      	blx	r3
 801d4cc:	f8b9 3000 	ldrh.w	r3, [r9]
 801d4d0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d4d4:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d4d8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d4dc:	435e      	muls	r6, r3
 801d4de:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d4e2:	2dff      	cmp	r5, #255	; 0xff
 801d4e4:	fb03 1202 	mla	r2, r3, r2, r1
 801d4e8:	ebac 0c07 	sub.w	ip, ip, r7
 801d4ec:	eba3 0707 	sub.w	r7, r3, r7
 801d4f0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d4f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d4f8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d4fc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d500:	d049      	beq.n	801d596 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d502:	43eb      	mvns	r3, r5
 801d504:	fa1f f985 	uxth.w	r9, r5
 801d508:	b2db      	uxtb	r3, r3
 801d50a:	42b0      	cmp	r0, r6
 801d50c:	d266      	bcs.n	801d5dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d50e:	eb00 0a0e 	add.w	sl, r0, lr
 801d512:	4550      	cmp	r0, sl
 801d514:	4621      	mov	r1, r4
 801d516:	f104 0403 	add.w	r4, r4, #3
 801d51a:	d25b      	bcs.n	801d5d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d51c:	8802      	ldrh	r2, [r0, #0]
 801d51e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d522:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d526:	fb11 f109 	smulbb	r1, r1, r9
 801d52a:	10d5      	asrs	r5, r2, #3
 801d52c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d530:	00d2      	lsls	r2, r2, #3
 801d532:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d536:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d53a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d53e:	fb08 1803 	mla	r8, r8, r3, r1
 801d542:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d546:	b2d2      	uxtb	r2, r2
 801d548:	fb11 f109 	smulbb	r1, r1, r9
 801d54c:	fa1f f888 	uxth.w	r8, r8
 801d550:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d554:	fb05 1503 	mla	r5, r5, r3, r1
 801d558:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d55c:	fb11 f109 	smulbb	r1, r1, r9
 801d560:	b2ad      	uxth	r5, r5
 801d562:	fb02 1203 	mla	r2, r2, r3, r1
 801d566:	f108 0101 	add.w	r1, r8, #1
 801d56a:	b292      	uxth	r2, r2
 801d56c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d570:	1c51      	adds	r1, r2, #1
 801d572:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d576:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d57a:	1c69      	adds	r1, r5, #1
 801d57c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d580:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d584:	096d      	lsrs	r5, r5, #5
 801d586:	ea42 0208 	orr.w	r2, r2, r8
 801d58a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d58e:	432a      	orrs	r2, r5
 801d590:	f820 2b02 	strh.w	r2, [r0], #2
 801d594:	e7bd      	b.n	801d512 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d596:	4a14      	ldr	r2, [pc, #80]	; (801d5e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d598:	42b0      	cmp	r0, r6
 801d59a:	d21f      	bcs.n	801d5dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d59c:	eb00 050e 	add.w	r5, r0, lr
 801d5a0:	42a8      	cmp	r0, r5
 801d5a2:	4621      	mov	r1, r4
 801d5a4:	f104 0403 	add.w	r4, r4, #3
 801d5a8:	d210      	bcs.n	801d5cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d5aa:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d5ae:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d5b2:	00db      	lsls	r3, r3, #3
 801d5b4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d5b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d5bc:	430b      	orrs	r3, r1
 801d5be:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d5c2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d5c6:	f820 3b02 	strh.w	r3, [r0], #2
 801d5ca:	e7e9      	b.n	801d5a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d5cc:	4438      	add	r0, r7
 801d5ce:	eb01 040c 	add.w	r4, r1, ip
 801d5d2:	e7e1      	b.n	801d598 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d5d4:	4438      	add	r0, r7
 801d5d6:	eb01 040c 	add.w	r4, r1, ip
 801d5da:	e796      	b.n	801d50a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d5dc:	4b03      	ldr	r3, [pc, #12]	; (801d5ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d5de:	6818      	ldr	r0, [r3, #0]
 801d5e0:	6803      	ldr	r3, [r0, #0]
 801d5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5e4:	4798      	blx	r3
 801d5e6:	e768      	b.n	801d4ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d5e8:	fffff800 	.word	0xfffff800
 801d5ec:	20006f14 	.word	0x20006f14
 801d5f0:	20006f0c 	.word	0x20006f0c

0801d5f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d5f4:	b570      	push	{r4, r5, r6, lr}
 801d5f6:	9c04      	ldr	r4, [sp, #16]
 801d5f8:	4605      	mov	r5, r0
 801d5fa:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801d5fe:	4608      	mov	r0, r1
 801d600:	4619      	mov	r1, r3
 801d602:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d606:	2a0d      	cmp	r2, #13
 801d608:	d825      	bhi.n	801d656 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801d60a:	e8df f002 	tbb	[pc, r2]
 801d60e:	1807      	.short	0x1807
 801d610:	1d1d1d13 	.word	0x1d1d1d13
 801d614:	1d1d1d1d 	.word	0x1d1d1d1d
 801d618:	1d1d1d1d 	.word	0x1d1d1d1d
 801d61c:	682a      	ldr	r2, [r5, #0]
 801d61e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d622:	68d6      	ldr	r6, [r2, #12]
 801d624:	4623      	mov	r3, r4
 801d626:	460a      	mov	r2, r1
 801d628:	4601      	mov	r1, r0
 801d62a:	46b4      	mov	ip, r6
 801d62c:	4628      	mov	r0, r5
 801d62e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d632:	4760      	bx	ip
 801d634:	4622      	mov	r2, r4
 801d636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d63a:	f7ff bd8d 	b.w	801d158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d63e:	4622      	mov	r2, r4
 801d640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d644:	f7ff bede 	b.w	801d404 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d648:	4b03      	ldr	r3, [pc, #12]	; (801d658 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d64a:	f240 3159 	movw	r1, #857	; 0x359
 801d64e:	4a03      	ldr	r2, [pc, #12]	; (801d65c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801d650:	4803      	ldr	r0, [pc, #12]	; (801d660 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801d652:	f001 f91b 	bl	801e88c <__assert_func>
 801d656:	bd70      	pop	{r4, r5, r6, pc}
 801d658:	080238f1 	.word	0x080238f1
 801d65c:	08023dda 	.word	0x08023dda
 801d660:	0802382c 	.word	0x0802382c

0801d664 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d668:	b093      	sub	sp, #76	; 0x4c
 801d66a:	880e      	ldrh	r6, [r1, #0]
 801d66c:	4681      	mov	r9, r0
 801d66e:	4688      	mov	r8, r1
 801d670:	4615      	mov	r5, r2
 801d672:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d676:	b136      	cbz	r6, 801d686 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801d678:	4b70      	ldr	r3, [pc, #448]	; (801d83c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d67a:	f44f 71c3 	mov.w	r1, #390	; 0x186
 801d67e:	4a70      	ldr	r2, [pc, #448]	; (801d840 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d680:	4870      	ldr	r0, [pc, #448]	; (801d844 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d682:	f001 f903 	bl	801e88c <__assert_func>
 801d686:	6810      	ldr	r0, [r2, #0]
 801d688:	ac0e      	add	r4, sp, #56	; 0x38
 801d68a:	6851      	ldr	r1, [r2, #4]
 801d68c:	4f6e      	ldr	r7, [pc, #440]	; (801d848 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d68e:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801d84c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d692:	c403      	stmia	r4!, {r0, r1}
 801d694:	6818      	ldr	r0, [r3, #0]
 801d696:	ac10      	add	r4, sp, #64	; 0x40
 801d698:	6859      	ldr	r1, [r3, #4]
 801d69a:	c403      	stmia	r4!, {r0, r1}
 801d69c:	a80e      	add	r0, sp, #56	; 0x38
 801d69e:	f7fd fd01 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d6a2:	4629      	mov	r1, r5
 801d6a4:	a810      	add	r0, sp, #64	; 0x40
 801d6a6:	f7fd fd25 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d6aa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d6ae:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d6b2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d6b6:	6838      	ldr	r0, [r7, #0]
 801d6b8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d6bc:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d6c0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d6c4:	4489      	add	r9, r1
 801d6c6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d6ca:	440a      	add	r2, r1
 801d6cc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d6d0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d6d4:	4413      	add	r3, r2
 801d6d6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d6da:	6803      	ldr	r3, [r0, #0]
 801d6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6de:	4798      	blx	r3
 801d6e0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d6e4:	6838      	ldr	r0, [r7, #0]
 801d6e6:	d01d      	beq.n	801d724 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d6e8:	210b      	movs	r1, #11
 801d6ea:	6802      	ldr	r2, [r0, #0]
 801d6ec:	b2a4      	uxth	r4, r4
 801d6ee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d6f2:	9107      	str	r1, [sp, #28]
 801d6f4:	b2ad      	uxth	r5, r5
 801d6f6:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801d6fa:	f8bb 1000 	ldrh.w	r1, [fp]
 801d6fe:	9502      	str	r5, [sp, #8]
 801d700:	9106      	str	r1, [sp, #24]
 801d702:	2101      	movs	r1, #1
 801d704:	9401      	str	r4, [sp, #4]
 801d706:	e9cd a104 	strd	sl, r1, [sp, #16]
 801d70a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d70e:	9103      	str	r1, [sp, #12]
 801d710:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801d714:	9100      	str	r1, [sp, #0]
 801d716:	4649      	mov	r1, r9
 801d718:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801d71a:	4642      	mov	r2, r8
 801d71c:	47a0      	blx	r4
 801d71e:	b013      	add	sp, #76	; 0x4c
 801d720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d724:	6803      	ldr	r3, [r0, #0]
 801d726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d728:	4798      	blx	r3
 801d72a:	f8bb 3000 	ldrh.w	r3, [fp]
 801d72e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d732:	f04f 0e04 	mov.w	lr, #4
 801d736:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d73a:	435d      	muls	r5, r3
 801d73c:	fb03 1202 	mla	r2, r3, r2, r1
 801d740:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d744:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d748:	920c      	str	r2, [sp, #48]	; 0x30
 801d74a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d74e:	1b12      	subs	r2, r2, r4
 801d750:	920d      	str	r2, [sp, #52]	; 0x34
 801d752:	0062      	lsls	r2, r4, #1
 801d754:	1b1c      	subs	r4, r3, r4
 801d756:	920a      	str	r2, [sp, #40]	; 0x28
 801d758:	0063      	lsls	r3, r4, #1
 801d75a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d75c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d75e:	4298      	cmp	r0, r3
 801d760:	d266      	bcs.n	801d830 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801d762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d764:	eb00 0b03 	add.w	fp, r0, r3
 801d768:	4558      	cmp	r0, fp
 801d76a:	d25c      	bcs.n	801d826 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801d76c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d770:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d774:	f858 2003 	ldr.w	r2, [r8, r3]
 801d778:	0e11      	lsrs	r1, r2, #24
 801d77a:	d012      	beq.n	801d7a2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801d77c:	29ff      	cmp	r1, #255	; 0xff
 801d77e:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d782:	d110      	bne.n	801d7a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801d784:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d788:	d10d      	bne.n	801d7a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801d78a:	0953      	lsrs	r3, r2, #5
 801d78c:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d790:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d794:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d798:	f027 0707 	bic.w	r7, r7, #7
 801d79c:	431f      	orrs	r7, r3
 801d79e:	433a      	orrs	r2, r7
 801d7a0:	8002      	strh	r2, [r0, #0]
 801d7a2:	3002      	adds	r0, #2
 801d7a4:	e7e0      	b.n	801d768 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801d7a6:	fb0a f101 	mul.w	r1, sl, r1
 801d7aa:	8806      	ldrh	r6, [r0, #0]
 801d7ac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d7b0:	b2d2      	uxtb	r2, r2
 801d7b2:	1c4b      	adds	r3, r1, #1
 801d7b4:	1235      	asrs	r5, r6, #8
 801d7b6:	10f4      	asrs	r4, r6, #3
 801d7b8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d7bc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d7c0:	00f6      	lsls	r6, r6, #3
 801d7c2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d7c6:	121b      	asrs	r3, r3, #8
 801d7c8:	b2f6      	uxtb	r6, r6
 801d7ca:	b299      	uxth	r1, r3
 801d7cc:	43db      	mvns	r3, r3
 801d7ce:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d7d2:	fb1c fc01 	smulbb	ip, ip, r1
 801d7d6:	b2db      	uxtb	r3, r3
 801d7d8:	fb12 f201 	smulbb	r2, r2, r1
 801d7dc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d7e0:	fb05 c503 	mla	r5, r5, r3, ip
 801d7e4:	b2ff      	uxtb	r7, r7
 801d7e6:	fb06 2203 	mla	r2, r6, r3, r2
 801d7ea:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d7ee:	fb17 f701 	smulbb	r7, r7, r1
 801d7f2:	b2ad      	uxth	r5, r5
 801d7f4:	b292      	uxth	r2, r2
 801d7f6:	fb04 7403 	mla	r4, r4, r3, r7
 801d7fa:	f105 0c01 	add.w	ip, r5, #1
 801d7fe:	1c57      	adds	r7, r2, #1
 801d800:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d804:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d808:	b2a4      	uxth	r4, r4
 801d80a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d80e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d812:	433d      	orrs	r5, r7
 801d814:	1c67      	adds	r7, r4, #1
 801d816:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d81a:	0964      	lsrs	r4, r4, #5
 801d81c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d820:	4325      	orrs	r5, r4
 801d822:	8005      	strh	r5, [r0, #0]
 801d824:	e7bd      	b.n	801d7a2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801d826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d828:	4418      	add	r0, r3
 801d82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d82c:	4499      	add	r9, r3
 801d82e:	e795      	b.n	801d75c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d830:	4b05      	ldr	r3, [pc, #20]	; (801d848 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d832:	6818      	ldr	r0, [r3, #0]
 801d834:	6803      	ldr	r3, [r0, #0]
 801d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d838:	4798      	blx	r3
 801d83a:	e770      	b.n	801d71e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801d83c:	080236dc 	.word	0x080236dc
 801d840:	08023bfb 	.word	0x08023bfb
 801d844:	0802382c 	.word	0x0802382c
 801d848:	20006f14 	.word	0x20006f14
 801d84c:	20006f0c 	.word	0x20006f0c

0801d850 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d854:	4614      	mov	r4, r2
 801d856:	880a      	ldrh	r2, [r1, #0]
 801d858:	b087      	sub	sp, #28
 801d85a:	4680      	mov	r8, r0
 801d85c:	2a02      	cmp	r2, #2
 801d85e:	460d      	mov	r5, r1
 801d860:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d864:	d006      	beq.n	801d874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801d866:	4b63      	ldr	r3, [pc, #396]	; (801d9f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801d868:	f240 11dd 	movw	r1, #477	; 0x1dd
 801d86c:	4a62      	ldr	r2, [pc, #392]	; (801d9f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d86e:	4863      	ldr	r0, [pc, #396]	; (801d9fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801d870:	f001 f80c 	bl	801e88c <__assert_func>
 801d874:	2e00      	cmp	r6, #0
 801d876:	f000 80b9 	beq.w	801d9ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801d87a:	6820      	ldr	r0, [r4, #0]
 801d87c:	af02      	add	r7, sp, #8
 801d87e:	6861      	ldr	r1, [r4, #4]
 801d880:	c703      	stmia	r7!, {r0, r1}
 801d882:	6818      	ldr	r0, [r3, #0]
 801d884:	af04      	add	r7, sp, #16
 801d886:	6859      	ldr	r1, [r3, #4]
 801d888:	c703      	stmia	r7!, {r0, r1}
 801d88a:	a802      	add	r0, sp, #8
 801d88c:	f7fd fc0a 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d890:	4621      	mov	r1, r4
 801d892:	a804      	add	r0, sp, #16
 801d894:	f7fd fc2e 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d898:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d89c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d8a0:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d8a4:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d8a8:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d8ac:	eb08 0401 	add.w	r4, r8, r1
 801d8b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d8b4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d8b8:	440a      	add	r2, r1
 801d8ba:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d8be:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d8c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d8c6:	4413      	add	r3, r2
 801d8c8:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d8cc:	4b4c      	ldr	r3, [pc, #304]	; (801da00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d8ce:	6818      	ldr	r0, [r3, #0]
 801d8d0:	6803      	ldr	r3, [r0, #0]
 801d8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d8d4:	4798      	blx	r3
 801d8d6:	4b4b      	ldr	r3, [pc, #300]	; (801da04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801d8d8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d8dc:	2eff      	cmp	r6, #255	; 0xff
 801d8de:	881a      	ldrh	r2, [r3, #0]
 801d8e0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d8e4:	fb02 c101 	mla	r1, r2, r1, ip
 801d8e8:	fb02 f207 	mul.w	r2, r2, r7
 801d8ec:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d8f0:	f105 0104 	add.w	r1, r5, #4
 801d8f4:	461d      	mov	r5, r3
 801d8f6:	d05a      	beq.n	801d9ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801d8f8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d8fc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d900:	b2b6      	uxth	r6, r6
 801d902:	9301      	str	r3, [sp, #4]
 801d904:	fa1f fe8e 	uxth.w	lr, lr
 801d908:	4282      	cmp	r2, r0
 801d90a:	d96a      	bls.n	801d9e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801d90c:	eb00 0b0a 	add.w	fp, r0, sl
 801d910:	4583      	cmp	fp, r0
 801d912:	d940      	bls.n	801d996 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801d914:	8805      	ldrh	r5, [r0, #0]
 801d916:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d91a:	122f      	asrs	r7, r5, #8
 801d91c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d920:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d924:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d928:	00ed      	lsls	r5, r5, #3
 801d92a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d92e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d932:	fb17 f70e 	smulbb	r7, r7, lr
 801d936:	b2ed      	uxtb	r5, r5
 801d938:	fb19 f90e 	smulbb	r9, r9, lr
 801d93c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d940:	fb15 f50e 	smulbb	r5, r5, lr
 801d944:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d948:	10df      	asrs	r7, r3, #3
 801d94a:	00db      	lsls	r3, r3, #3
 801d94c:	fa1f fc8c 	uxth.w	ip, ip
 801d950:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d954:	b2db      	uxtb	r3, r3
 801d956:	fb07 9706 	mla	r7, r7, r6, r9
 801d95a:	f10c 0901 	add.w	r9, ip, #1
 801d95e:	fb03 5306 	mla	r3, r3, r6, r5
 801d962:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d966:	b29b      	uxth	r3, r3
 801d968:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d96c:	b2bf      	uxth	r7, r7
 801d96e:	f103 0c01 	add.w	ip, r3, #1
 801d972:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d976:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d97a:	ea4c 0c09 	orr.w	ip, ip, r9
 801d97e:	f107 0901 	add.w	r9, r7, #1
 801d982:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d986:	097f      	lsrs	r7, r7, #5
 801d988:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d98c:	ea4c 0c07 	orr.w	ip, ip, r7
 801d990:	f820 cb02 	strh.w	ip, [r0], #2
 801d994:	e7bc      	b.n	801d910 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801d996:	9b01      	ldr	r3, [sp, #4]
 801d998:	881b      	ldrh	r3, [r3, #0]
 801d99a:	eba3 0308 	sub.w	r3, r3, r8
 801d99e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d9a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d9a6:	eba3 0308 	sub.w	r3, r3, r8
 801d9aa:	441c      	add	r4, r3
 801d9ac:	e7ac      	b.n	801d908 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801d9ae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d9b2:	4282      	cmp	r2, r0
 801d9b4:	d915      	bls.n	801d9e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801d9b6:	eb00 060a 	add.w	r6, r0, sl
 801d9ba:	4286      	cmp	r6, r0
 801d9bc:	d906      	bls.n	801d9cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801d9be:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d9c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d9c6:	f820 3b02 	strh.w	r3, [r0], #2
 801d9ca:	e7f6      	b.n	801d9ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801d9cc:	882b      	ldrh	r3, [r5, #0]
 801d9ce:	eba3 0308 	sub.w	r3, r3, r8
 801d9d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d9d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d9da:	eba3 0308 	sub.w	r3, r3, r8
 801d9de:	441c      	add	r4, r3
 801d9e0:	e7e7      	b.n	801d9b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801d9e2:	4b07      	ldr	r3, [pc, #28]	; (801da00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d9e4:	6818      	ldr	r0, [r3, #0]
 801d9e6:	6803      	ldr	r3, [r0, #0]
 801d9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9ea:	4798      	blx	r3
 801d9ec:	b007      	add	sp, #28
 801d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9f2:	bf00      	nop
 801d9f4:	0802360c 	.word	0x0802360c
 801d9f8:	08023a65 	.word	0x08023a65
 801d9fc:	0802382c 	.word	0x0802382c
 801da00:	20006f14 	.word	0x20006f14
 801da04:	20006f0c 	.word	0x20006f0c

0801da08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da0c:	f8b1 9000 	ldrh.w	r9, [r1]
 801da10:	b091      	sub	sp, #68	; 0x44
 801da12:	4604      	mov	r4, r0
 801da14:	460f      	mov	r7, r1
 801da16:	f1b9 0f01 	cmp.w	r9, #1
 801da1a:	4690      	mov	r8, r2
 801da1c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801da20:	d006      	beq.n	801da30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801da22:	4b84      	ldr	r3, [pc, #528]	; (801dc34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801da24:	f240 212b 	movw	r1, #555	; 0x22b
 801da28:	4a83      	ldr	r2, [pc, #524]	; (801dc38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801da2a:	4884      	ldr	r0, [pc, #528]	; (801dc3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801da2c:	f000 ff2e 	bl	801e88c <__assert_func>
 801da30:	2d00      	cmp	r5, #0
 801da32:	d04f      	beq.n	801dad4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801da34:	6810      	ldr	r0, [r2, #0]
 801da36:	ae0c      	add	r6, sp, #48	; 0x30
 801da38:	6851      	ldr	r1, [r2, #4]
 801da3a:	f8df b208 	ldr.w	fp, [pc, #520]	; 801dc44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801da3e:	c603      	stmia	r6!, {r0, r1}
 801da40:	6818      	ldr	r0, [r3, #0]
 801da42:	ae0e      	add	r6, sp, #56	; 0x38
 801da44:	6859      	ldr	r1, [r3, #4]
 801da46:	c603      	stmia	r6!, {r0, r1}
 801da48:	a80c      	add	r0, sp, #48	; 0x30
 801da4a:	f7fd fb2b 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da4e:	4641      	mov	r1, r8
 801da50:	a80e      	add	r0, sp, #56	; 0x38
 801da52:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801dc48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801da56:	f7fd fb4d 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da5a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801da5e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801da62:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801da66:	f8db 0000 	ldr.w	r0, [fp]
 801da6a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da6e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801da72:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801da76:	440c      	add	r4, r1
 801da78:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801da7c:	440a      	add	r2, r1
 801da7e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801da82:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801da86:	4413      	add	r3, r2
 801da88:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801da8c:	6803      	ldr	r3, [r0, #0]
 801da8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da90:	4798      	blx	r3
 801da92:	f010 0f80 	tst.w	r0, #128	; 0x80
 801da96:	f8db 0000 	ldr.w	r0, [fp]
 801da9a:	d01e      	beq.n	801dada <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801da9c:	2200      	movs	r2, #0
 801da9e:	6801      	ldr	r1, [r0, #0]
 801daa0:	b2b6      	uxth	r6, r6
 801daa2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801daa6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801daaa:	220b      	movs	r2, #11
 801daac:	9207      	str	r2, [sp, #28]
 801daae:	f8b8 2000 	ldrh.w	r2, [r8]
 801dab2:	9504      	str	r5, [sp, #16]
 801dab4:	9601      	str	r6, [sp, #4]
 801dab6:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801daba:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801dabe:	9203      	str	r2, [sp, #12]
 801dac0:	fa1f f28a 	uxth.w	r2, sl
 801dac4:	9202      	str	r2, [sp, #8]
 801dac6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801daca:	9200      	str	r2, [sp, #0]
 801dacc:	463a      	mov	r2, r7
 801dace:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801dad0:	4621      	mov	r1, r4
 801dad2:	47a8      	blx	r5
 801dad4:	b011      	add	sp, #68	; 0x44
 801dad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dada:	6803      	ldr	r3, [r0, #0]
 801dadc:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801dae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dae2:	4798      	blx	r3
 801dae4:	f8b8 2000 	ldrh.w	r2, [r8]
 801dae8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801daec:	2dff      	cmp	r5, #255	; 0xff
 801daee:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801daf2:	fb0a fa02 	mul.w	sl, sl, r2
 801daf6:	fb02 1303 	mla	r3, r2, r3, r1
 801dafa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dafe:	d062      	beq.n	801dbc6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801db00:	ea6f 0c05 	mvn.w	ip, r5
 801db04:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801db08:	b2ad      	uxth	r5, r5
 801db0a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801db0e:	fa5f fc8c 	uxtb.w	ip, ip
 801db12:	930a      	str	r3, [sp, #40]	; 0x28
 801db14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db16:	4298      	cmp	r0, r3
 801db18:	f080 8085 	bcs.w	801dc26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801db1c:	eb00 0b09 	add.w	fp, r0, r9
 801db20:	4558      	cmp	r0, fp
 801db22:	d246      	bcs.n	801dbb2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801db24:	f814 eb01 	ldrb.w	lr, [r4], #1
 801db28:	2303      	movs	r3, #3
 801db2a:	2204      	movs	r2, #4
 801db2c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801db30:	8803      	ldrh	r3, [r0, #0]
 801db32:	eb07 0a0e 	add.w	sl, r7, lr
 801db36:	1219      	asrs	r1, r3, #8
 801db38:	10da      	asrs	r2, r3, #3
 801db3a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801db3e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801db42:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801db46:	00db      	lsls	r3, r3, #3
 801db48:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801db4c:	fb18 f805 	smulbb	r8, r8, r5
 801db50:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801db54:	fb1e fe05 	smulbb	lr, lr, r5
 801db58:	b2db      	uxtb	r3, r3
 801db5a:	fb01 810c 	mla	r1, r1, ip, r8
 801db5e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801db62:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801db66:	fb18 f805 	smulbb	r8, r8, r5
 801db6a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801db6e:	b289      	uxth	r1, r1
 801db70:	fb02 820c 	mla	r2, r2, ip, r8
 801db74:	fb03 e30c 	mla	r3, r3, ip, lr
 801db78:	f101 0801 	add.w	r8, r1, #1
 801db7c:	b292      	uxth	r2, r2
 801db7e:	b29b      	uxth	r3, r3
 801db80:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801db84:	f102 0801 	add.w	r8, r2, #1
 801db88:	f103 0e01 	add.w	lr, r3, #1
 801db8c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801db90:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801db94:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801db98:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801db9c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801dba0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801dba4:	ea4e 0101 	orr.w	r1, lr, r1
 801dba8:	ea41 0108 	orr.w	r1, r1, r8
 801dbac:	f820 1b02 	strh.w	r1, [r0], #2
 801dbb0:	e7b6      	b.n	801db20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801dbb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dbb4:	881b      	ldrh	r3, [r3, #0]
 801dbb6:	1b9b      	subs	r3, r3, r6
 801dbb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dbbc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dbc0:	1b9b      	subs	r3, r3, r6
 801dbc2:	441c      	add	r4, r3
 801dbc4:	e7a6      	b.n	801db14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801dbc6:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801dbca:	2203      	movs	r2, #3
 801dbcc:	2504      	movs	r5, #4
 801dbce:	491c      	ldr	r1, [pc, #112]	; (801dc40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801dbd0:	4550      	cmp	r0, sl
 801dbd2:	d228      	bcs.n	801dc26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801dbd4:	eb00 0c09 	add.w	ip, r0, r9
 801dbd8:	4560      	cmp	r0, ip
 801dbda:	4623      	mov	r3, r4
 801dbdc:	d219      	bcs.n	801dc12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801dbde:	f893 e000 	ldrb.w	lr, [r3]
 801dbe2:	3401      	adds	r4, #1
 801dbe4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801dbe8:	eb07 0b0e 	add.w	fp, r7, lr
 801dbec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801dbf0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801dbf4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dbf8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801dbfc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801dc00:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801dc04:	ea43 030b 	orr.w	r3, r3, fp
 801dc08:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801dc0c:	f820 3b02 	strh.w	r3, [r0], #2
 801dc10:	e7e2      	b.n	801dbd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801dc12:	f8b8 3000 	ldrh.w	r3, [r8]
 801dc16:	1b9b      	subs	r3, r3, r6
 801dc18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc1c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dc20:	1b9b      	subs	r3, r3, r6
 801dc22:	441c      	add	r4, r3
 801dc24:	e7d4      	b.n	801dbd0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801dc26:	4b07      	ldr	r3, [pc, #28]	; (801dc44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801dc28:	6818      	ldr	r0, [r3, #0]
 801dc2a:	6803      	ldr	r3, [r0, #0]
 801dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc2e:	4798      	blx	r3
 801dc30:	e750      	b.n	801dad4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801dc32:	bf00      	nop
 801dc34:	0802365a 	.word	0x0802365a
 801dc38:	08023aee 	.word	0x08023aee
 801dc3c:	0802382c 	.word	0x0802382c
 801dc40:	fffff800 	.word	0xfffff800
 801dc44:	20006f14 	.word	0x20006f14
 801dc48:	20006f0c 	.word	0x20006f0c

0801dc4c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dc4c:	b430      	push	{r4, r5}
 801dc4e:	780d      	ldrb	r5, [r1, #0]
 801dc50:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801dc54:	2d01      	cmp	r5, #1
 801dc56:	d00a      	beq.n	801dc6e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801dc58:	d305      	bcc.n	801dc66 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801dc5a:	2d02      	cmp	r5, #2
 801dc5c:	d10b      	bne.n	801dc76 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801dc5e:	9402      	str	r4, [sp, #8]
 801dc60:	bc30      	pop	{r4, r5}
 801dc62:	f7ff bdf5 	b.w	801d850 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801dc66:	9402      	str	r4, [sp, #8]
 801dc68:	bc30      	pop	{r4, r5}
 801dc6a:	f7ff bcfb 	b.w	801d664 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dc6e:	9402      	str	r4, [sp, #8]
 801dc70:	bc30      	pop	{r4, r5}
 801dc72:	f7ff bec9 	b.w	801da08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801dc76:	bc30      	pop	{r4, r5}
 801dc78:	4770      	bx	lr
	...

0801dc7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801dc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc80:	b087      	sub	sp, #28
 801dc82:	4604      	mov	r4, r0
 801dc84:	460e      	mov	r6, r1
 801dc86:	6810      	ldr	r0, [r2, #0]
 801dc88:	6851      	ldr	r1, [r2, #4]
 801dc8a:	ad02      	add	r5, sp, #8
 801dc8c:	4617      	mov	r7, r2
 801dc8e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801dc92:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801dec4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801dc96:	c503      	stmia	r5!, {r0, r1}
 801dc98:	6818      	ldr	r0, [r3, #0]
 801dc9a:	ad04      	add	r5, sp, #16
 801dc9c:	6859      	ldr	r1, [r3, #4]
 801dc9e:	c503      	stmia	r5!, {r0, r1}
 801dca0:	a802      	add	r0, sp, #8
 801dca2:	f7fd f9ff 	bl	801b0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dca6:	4639      	mov	r1, r7
 801dca8:	a804      	add	r0, sp, #16
 801dcaa:	f7fd fa23 	bl	801b0f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dcae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dcb2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dcb6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801dcba:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801dcbe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dcc2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801dcc6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801dcca:	440e      	add	r6, r1
 801dccc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801dcd0:	440a      	add	r2, r1
 801dcd2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dcd6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dcda:	4413      	add	r3, r2
 801dcdc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dce0:	4b77      	ldr	r3, [pc, #476]	; (801dec0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801dce2:	6818      	ldr	r0, [r3, #0]
 801dce4:	6803      	ldr	r3, [r0, #0]
 801dce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dce8:	4798      	blx	r3
 801dcea:	f8b9 b000 	ldrh.w	fp, [r9]
 801dcee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dcf2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dcf6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dcfa:	fb05 f50b 	mul.w	r5, r5, fp
 801dcfe:	fb0b 2303 	mla	r3, fp, r3, r2
 801dd02:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dd06:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dd0a:	9300      	str	r3, [sp, #0]
 801dd0c:	d069      	beq.n	801dde2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801dd0e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801dd12:	4558      	cmp	r0, fp
 801dd14:	f080 80cc 	bcs.w	801deb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801dd18:	9b00      	ldr	r3, [sp, #0]
 801dd1a:	4631      	mov	r1, r6
 801dd1c:	18c3      	adds	r3, r0, r3
 801dd1e:	9301      	str	r3, [sp, #4]
 801dd20:	9b01      	ldr	r3, [sp, #4]
 801dd22:	4298      	cmp	r0, r3
 801dd24:	d24f      	bcs.n	801ddc6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801dd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd2a:	2a00      	cmp	r2, #0
 801dd2c:	d048      	beq.n	801ddc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dd2e:	fb0a f202 	mul.w	r2, sl, r2
 801dd32:	1c53      	adds	r3, r2, #1
 801dd34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dd38:	121b      	asrs	r3, r3, #8
 801dd3a:	d041      	beq.n	801ddc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dd3c:	8802      	ldrh	r2, [r0, #0]
 801dd3e:	b29e      	uxth	r6, r3
 801dd40:	f8b4 c000 	ldrh.w	ip, [r4]
 801dd44:	43db      	mvns	r3, r3
 801dd46:	1215      	asrs	r5, r2, #8
 801dd48:	b2db      	uxtb	r3, r3
 801dd4a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dd4e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dd52:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801dd56:	fb15 f503 	smulbb	r5, r5, r3
 801dd5a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dd5e:	00d2      	lsls	r2, r2, #3
 801dd60:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801dd64:	fb07 5706 	mla	r7, r7, r6, r5
 801dd68:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801dd6c:	b2d2      	uxtb	r2, r2
 801dd6e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dd72:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dd76:	fb1e fe03 	smulbb	lr, lr, r3
 801dd7a:	b2bf      	uxth	r7, r7
 801dd7c:	fb12 f203 	smulbb	r2, r2, r3
 801dd80:	fa5f fc8c 	uxtb.w	ip, ip
 801dd84:	fb05 e506 	mla	r5, r5, r6, lr
 801dd88:	f107 0e01 	add.w	lr, r7, #1
 801dd8c:	fb0c 2c06 	mla	ip, ip, r6, r2
 801dd90:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801dd94:	fa1f fc8c 	uxth.w	ip, ip
 801dd98:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801dd9c:	b2ad      	uxth	r5, r5
 801dd9e:	f10c 0701 	add.w	r7, ip, #1
 801dda2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dda6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ddaa:	ea47 070e 	orr.w	r7, r7, lr
 801ddae:	f105 0e01 	add.w	lr, r5, #1
 801ddb2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801ddb6:	096d      	lsrs	r5, r5, #5
 801ddb8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ddbc:	432f      	orrs	r7, r5
 801ddbe:	8007      	strh	r7, [r0, #0]
 801ddc0:	3002      	adds	r0, #2
 801ddc2:	3402      	adds	r4, #2
 801ddc4:	e7ac      	b.n	801dd20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801ddc6:	f8b9 3000 	ldrh.w	r3, [r9]
 801ddca:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801ddce:	eba3 0308 	sub.w	r3, r3, r8
 801ddd2:	eba6 0608 	sub.w	r6, r6, r8
 801ddd6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ddda:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801ddde:	440e      	add	r6, r1
 801dde0:	e797      	b.n	801dd12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801dde2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801dde6:	42a8      	cmp	r0, r5
 801dde8:	d262      	bcs.n	801deb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801ddea:	9b00      	ldr	r3, [sp, #0]
 801ddec:	4631      	mov	r1, r6
 801ddee:	eb00 0b03 	add.w	fp, r0, r3
 801ddf2:	4558      	cmp	r0, fp
 801ddf4:	d24e      	bcs.n	801de94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801ddf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ddfa:	b12b      	cbz	r3, 801de08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801ddfc:	2bff      	cmp	r3, #255	; 0xff
 801ddfe:	f8b4 e000 	ldrh.w	lr, [r4]
 801de02:	d104      	bne.n	801de0e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801de04:	f8a0 e000 	strh.w	lr, [r0]
 801de08:	3002      	adds	r0, #2
 801de0a:	3402      	adds	r4, #2
 801de0c:	e7f1      	b.n	801ddf2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801de0e:	8802      	ldrh	r2, [r0, #0]
 801de10:	b29f      	uxth	r7, r3
 801de12:	43db      	mvns	r3, r3
 801de14:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801de18:	1216      	asrs	r6, r2, #8
 801de1a:	b2db      	uxtb	r3, r3
 801de1c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801de20:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801de24:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801de28:	00d2      	lsls	r2, r2, #3
 801de2a:	fb16 f603 	smulbb	r6, r6, r3
 801de2e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801de32:	b2d2      	uxtb	r2, r2
 801de34:	fb0c 6c07 	mla	ip, ip, r7, r6
 801de38:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801de3c:	fb1a fa03 	smulbb	sl, sl, r3
 801de40:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801de44:	fa1f fc8c 	uxth.w	ip, ip
 801de48:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de4c:	fb12 f303 	smulbb	r3, r2, r3
 801de50:	fa5f fe8e 	uxtb.w	lr, lr
 801de54:	fb06 a607 	mla	r6, r6, r7, sl
 801de58:	f10c 0201 	add.w	r2, ip, #1
 801de5c:	fb0e 3307 	mla	r3, lr, r7, r3
 801de60:	b2b6      	uxth	r6, r6
 801de62:	b29b      	uxth	r3, r3
 801de64:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801de68:	f106 0a01 	add.w	sl, r6, #1
 801de6c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801de70:	f103 0c01 	add.w	ip, r3, #1
 801de74:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801de78:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801de7c:	0976      	lsrs	r6, r6, #5
 801de7e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801de82:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801de86:	ea4c 0c02 	orr.w	ip, ip, r2
 801de8a:	ea4c 0c06 	orr.w	ip, ip, r6
 801de8e:	f8a0 c000 	strh.w	ip, [r0]
 801de92:	e7b9      	b.n	801de08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801de94:	f8b9 3000 	ldrh.w	r3, [r9]
 801de98:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801de9c:	eba3 0308 	sub.w	r3, r3, r8
 801dea0:	eba6 0608 	sub.w	r6, r6, r8
 801dea4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dea8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801deac:	440e      	add	r6, r1
 801deae:	e79a      	b.n	801dde6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801deb0:	4b03      	ldr	r3, [pc, #12]	; (801dec0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801deb2:	6818      	ldr	r0, [r3, #0]
 801deb4:	6803      	ldr	r3, [r0, #0]
 801deb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801deb8:	4798      	blx	r3
 801deba:	b007      	add	sp, #28
 801debc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dec0:	20006f14 	.word	0x20006f14
 801dec4:	20006f0c 	.word	0x20006f0c

0801dec8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801decc:	b089      	sub	sp, #36	; 0x24
 801dece:	4682      	mov	sl, r0
 801ded0:	460f      	mov	r7, r1
 801ded2:	4691      	mov	r9, r2
 801ded4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801ded8:	4698      	mov	r8, r3
 801deda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dedc:	2e00      	cmp	r6, #0
 801dede:	d03d      	beq.n	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dee0:	4608      	mov	r0, r1
 801dee2:	f7fe fa6b 	bl	801c3bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dee6:	4605      	mov	r5, r0
 801dee8:	4638      	mov	r0, r7
 801deea:	f7fe faab 	bl	801c444 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801deee:	f8ad 000e 	strh.w	r0, [sp, #14]
 801def2:	4638      	mov	r0, r7
 801def4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801def8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801defc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801df00:	f7fe fb78 	bl	801c5f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df04:	4605      	mov	r5, r0
 801df06:	4638      	mov	r0, r7
 801df08:	f7fe fba6 	bl	801c658 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801df0c:	4681      	mov	r9, r0
 801df0e:	4638      	mov	r0, r7
 801df10:	f7fe fbfa 	bl	801c708 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801df14:	280b      	cmp	r0, #11
 801df16:	f200 816f 	bhi.w	801e1f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801df1a:	e8df f010 	tbh	[pc, r0, lsl #1]
 801df1e:	00c3      	.short	0x00c3
 801df20:	000c00b4 	.word	0x000c00b4
 801df24:	016d016d 	.word	0x016d016d
 801df28:	016d016d 	.word	0x016d016d
 801df2c:	016d016d 	.word	0x016d016d
 801df30:	016d016d 	.word	0x016d016d
 801df34:	00bb      	.short	0x00bb
 801df36:	4bb3      	ldr	r3, [pc, #716]	; (801e204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801df38:	6818      	ldr	r0, [r3, #0]
 801df3a:	6803      	ldr	r3, [r0, #0]
 801df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df3e:	4798      	blx	r3
 801df40:	2eff      	cmp	r6, #255	; 0xff
 801df42:	d121      	bne.n	801df88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801df44:	0683      	lsls	r3, r0, #26
 801df46:	d41f      	bmi.n	801df88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801df48:	4638      	mov	r0, r7
 801df4a:	f7fe fb19 	bl	801c580 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801df4e:	b940      	cbnz	r0, 801df62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801df50:	4623      	mov	r3, r4
 801df52:	aa02      	add	r2, sp, #8
 801df54:	4629      	mov	r1, r5
 801df56:	4650      	mov	r0, sl
 801df58:	f7ff f9e4 	bl	801d324 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801df5c:	b009      	add	sp, #36	; 0x24
 801df5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df62:	f10d 0818 	add.w	r8, sp, #24
 801df66:	4639      	mov	r1, r7
 801df68:	af04      	add	r7, sp, #16
 801df6a:	4640      	mov	r0, r8
 801df6c:	f7fe faae 	bl	801c4cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801df70:	e898 0003 	ldmia.w	r8, {r0, r1}
 801df74:	e887 0003 	stmia.w	r7, {r0, r1}
 801df78:	4638      	mov	r0, r7
 801df7a:	4621      	mov	r1, r4
 801df7c:	f7fb f9bc 	bl	80192f8 <_ZN8touchgfx4RectaNERKS0_>
 801df80:	4638      	mov	r0, r7
 801df82:	f7fb f9fc 	bl	801937e <_ZNK8touchgfx4Rect7isEmptyEv>
 801df86:	b130      	cbz	r0, 801df96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801df88:	4633      	mov	r3, r6
 801df8a:	4622      	mov	r2, r4
 801df8c:	a902      	add	r1, sp, #8
 801df8e:	4628      	mov	r0, r5
 801df90:	f7ff f8e2 	bl	801d158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801df94:	e7e2      	b.n	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801df96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df9a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801df9e:	4293      	cmp	r3, r2
 801dfa0:	dd12      	ble.n	801dfc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801dfa2:	1a9b      	subs	r3, r3, r2
 801dfa4:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dfa8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dfac:	f8ad 0018 	strh.w	r0, [sp, #24]
 801dfb0:	4628      	mov	r0, r5
 801dfb2:	f8ad 201a 	strh.w	r2, [sp, #26]
 801dfb6:	4642      	mov	r2, r8
 801dfb8:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dfbc:	a902      	add	r1, sp, #8
 801dfbe:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dfc2:	4633      	mov	r3, r6
 801dfc4:	f7ff f8c8 	bl	801d158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dfc8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dfcc:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dfd0:	4293      	cmp	r3, r2
 801dfd2:	dd12      	ble.n	801dffa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801dfd4:	1a9b      	subs	r3, r3, r2
 801dfd6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dfda:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dfde:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dfe2:	4642      	mov	r2, r8
 801dfe4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dfe8:	4628      	mov	r0, r5
 801dfea:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dfee:	23ff      	movs	r3, #255	; 0xff
 801dff0:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dff4:	a902      	add	r1, sp, #8
 801dff6:	f7ff f8af 	bl	801d158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dffa:	463b      	mov	r3, r7
 801dffc:	aa02      	add	r2, sp, #8
 801dffe:	4629      	mov	r1, r5
 801e000:	4650      	mov	r0, sl
 801e002:	f7ff f98f 	bl	801d324 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e006:	88a2      	ldrh	r2, [r4, #4]
 801e008:	8823      	ldrh	r3, [r4, #0]
 801e00a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e00e:	4413      	add	r3, r2
 801e010:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e014:	440a      	add	r2, r1
 801e016:	b29b      	uxth	r3, r3
 801e018:	b292      	uxth	r2, r2
 801e01a:	b218      	sxth	r0, r3
 801e01c:	b211      	sxth	r1, r2
 801e01e:	4288      	cmp	r0, r1
 801e020:	dd12      	ble.n	801e048 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801e022:	1a9b      	subs	r3, r3, r2
 801e024:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e028:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801e02c:	4642      	mov	r2, r8
 801e02e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e032:	a902      	add	r1, sp, #8
 801e034:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e038:	23ff      	movs	r3, #255	; 0xff
 801e03a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e03e:	4628      	mov	r0, r5
 801e040:	f8ad 601a 	strh.w	r6, [sp, #26]
 801e044:	f7ff f888 	bl	801d158 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e048:	88e2      	ldrh	r2, [r4, #6]
 801e04a:	8863      	ldrh	r3, [r4, #2]
 801e04c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e050:	4413      	add	r3, r2
 801e052:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e056:	440a      	add	r2, r1
 801e058:	b29b      	uxth	r3, r3
 801e05a:	b292      	uxth	r2, r2
 801e05c:	b218      	sxth	r0, r3
 801e05e:	b211      	sxth	r1, r2
 801e060:	4288      	cmp	r0, r1
 801e062:	f77f af7b 	ble.w	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e066:	1a9b      	subs	r3, r3, r2
 801e068:	f9b4 6000 	ldrsh.w	r6, [r4]
 801e06c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e070:	4642      	mov	r2, r8
 801e072:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e076:	23ff      	movs	r3, #255	; 0xff
 801e078:	f8ad 6018 	strh.w	r6, [sp, #24]
 801e07c:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e080:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e084:	e782      	b.n	801df8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801e086:	4633      	mov	r3, r6
 801e088:	4622      	mov	r2, r4
 801e08a:	a902      	add	r1, sp, #8
 801e08c:	4628      	mov	r0, r5
 801e08e:	f7ff f9b9 	bl	801d404 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e092:	e763      	b.n	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e094:	9600      	str	r6, [sp, #0]
 801e096:	4623      	mov	r3, r4
 801e098:	aa02      	add	r2, sp, #8
 801e09a:	4649      	mov	r1, r9
 801e09c:	4628      	mov	r0, r5
 801e09e:	f7ff fdd5 	bl	801dc4c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e0a2:	e75b      	b.n	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e0a4:	4638      	mov	r0, r7
 801e0a6:	f7fe fa6b 	bl	801c580 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e0aa:	b950      	cbnz	r0, 801e0c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801e0ac:	f8da 3000 	ldr.w	r3, [sl]
 801e0b0:	aa02      	add	r2, sp, #8
 801e0b2:	4629      	mov	r1, r5
 801e0b4:	e9cd 6000 	strd	r6, r0, [sp]
 801e0b8:	4650      	mov	r0, sl
 801e0ba:	68de      	ldr	r6, [r3, #12]
 801e0bc:	4623      	mov	r3, r4
 801e0be:	47b0      	blx	r6
 801e0c0:	e74c      	b.n	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e0c2:	f10d 0818 	add.w	r8, sp, #24
 801e0c6:	4639      	mov	r1, r7
 801e0c8:	af04      	add	r7, sp, #16
 801e0ca:	4640      	mov	r0, r8
 801e0cc:	f7fe f9fe 	bl	801c4cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e0d0:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e0d4:	e887 0003 	stmia.w	r7, {r0, r1}
 801e0d8:	4638      	mov	r0, r7
 801e0da:	4621      	mov	r1, r4
 801e0dc:	f7fb f90c 	bl	80192f8 <_ZN8touchgfx4RectaNERKS0_>
 801e0e0:	4638      	mov	r0, r7
 801e0e2:	f7fb f94c 	bl	801937e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e0e6:	b138      	cbz	r0, 801e0f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801e0e8:	4623      	mov	r3, r4
 801e0ea:	9600      	str	r6, [sp, #0]
 801e0ec:	aa02      	add	r2, sp, #8
 801e0ee:	4649      	mov	r1, r9
 801e0f0:	4628      	mov	r0, r5
 801e0f2:	f7ff fdc3 	bl	801dc7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e0f6:	e731      	b.n	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e0f8:	f8da 3000 	ldr.w	r3, [sl]
 801e0fc:	aa02      	add	r2, sp, #8
 801e0fe:	4629      	mov	r1, r5
 801e100:	e9cd 6000 	strd	r6, r0, [sp]
 801e104:	4650      	mov	r0, sl
 801e106:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801e10a:	463b      	mov	r3, r7
 801e10c:	47d8      	blx	fp
 801e10e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e112:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e116:	4293      	cmp	r3, r2
 801e118:	dd13      	ble.n	801e142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801e11a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e11e:	1a9b      	subs	r3, r3, r2
 801e120:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e124:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e128:	4628      	mov	r0, r5
 801e12a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e12e:	aa02      	add	r2, sp, #8
 801e130:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e134:	4649      	mov	r1, r9
 801e136:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e13a:	4643      	mov	r3, r8
 801e13c:	9600      	str	r6, [sp, #0]
 801e13e:	f7ff fd9d 	bl	801dc7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e142:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e146:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e14a:	4293      	cmp	r3, r2
 801e14c:	dd13      	ble.n	801e176 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801e14e:	1a9b      	subs	r3, r3, r2
 801e150:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e154:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e158:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e15c:	aa02      	add	r2, sp, #8
 801e15e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e162:	4628      	mov	r0, r5
 801e164:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e168:	4643      	mov	r3, r8
 801e16a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e16e:	4649      	mov	r1, r9
 801e170:	9600      	str	r6, [sp, #0]
 801e172:	f7ff fd83 	bl	801dc7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e176:	88a2      	ldrh	r2, [r4, #4]
 801e178:	8823      	ldrh	r3, [r4, #0]
 801e17a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e17e:	4413      	add	r3, r2
 801e180:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e184:	440a      	add	r2, r1
 801e186:	b29b      	uxth	r3, r3
 801e188:	b292      	uxth	r2, r2
 801e18a:	b218      	sxth	r0, r3
 801e18c:	b211      	sxth	r1, r2
 801e18e:	4288      	cmp	r0, r1
 801e190:	dd13      	ble.n	801e1ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801e192:	1a9b      	subs	r3, r3, r2
 801e194:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e198:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801e19c:	aa02      	add	r2, sp, #8
 801e19e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e1a2:	4649      	mov	r1, r9
 801e1a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e1a8:	4643      	mov	r3, r8
 801e1aa:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e1ae:	4628      	mov	r0, r5
 801e1b0:	9600      	str	r6, [sp, #0]
 801e1b2:	f8ad 701a 	strh.w	r7, [sp, #26]
 801e1b6:	f7ff fd61 	bl	801dc7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e1ba:	88e2      	ldrh	r2, [r4, #6]
 801e1bc:	8863      	ldrh	r3, [r4, #2]
 801e1be:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e1c2:	4413      	add	r3, r2
 801e1c4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e1c8:	440a      	add	r2, r1
 801e1ca:	b29b      	uxth	r3, r3
 801e1cc:	b292      	uxth	r2, r2
 801e1ce:	b218      	sxth	r0, r3
 801e1d0:	b211      	sxth	r1, r2
 801e1d2:	4288      	cmp	r0, r1
 801e1d4:	f77f aec2 	ble.w	801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e1d8:	f9b4 7000 	ldrsh.w	r7, [r4]
 801e1dc:	1a9b      	subs	r3, r3, r2
 801e1de:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e1e2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e1e6:	4643      	mov	r3, r8
 801e1e8:	f8ad 7018 	strh.w	r7, [sp, #24]
 801e1ec:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e1f0:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e1f4:	9600      	str	r6, [sp, #0]
 801e1f6:	e779      	b.n	801e0ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801e1f8:	4b03      	ldr	r3, [pc, #12]	; (801e208 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801e1fa:	21b0      	movs	r1, #176	; 0xb0
 801e1fc:	4a03      	ldr	r2, [pc, #12]	; (801e20c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801e1fe:	4804      	ldr	r0, [pc, #16]	; (801e210 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801e200:	f000 fb44 	bl	801e88c <__assert_func>
 801e204:	20006f14 	.word	0x20006f14
 801e208:	080236a8 	.word	0x080236a8
 801e20c:	08023b77 	.word	0x08023b77
 801e210:	0802382c 	.word	0x0802382c

0801e214 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e214:	b508      	push	{r3, lr}
 801e216:	b180      	cbz	r0, 801e23a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e218:	2902      	cmp	r1, #2
 801e21a:	d014      	beq.n	801e246 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801e21c:	2903      	cmp	r1, #3
 801e21e:	d01d      	beq.n	801e25c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801e220:	2901      	cmp	r1, #1
 801e222:	d101      	bne.n	801e228 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801e224:	2001      	movs	r0, #1
 801e226:	bd08      	pop	{r3, pc}
 801e228:	4b0e      	ldr	r3, [pc, #56]	; (801e264 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e22a:	8818      	ldrh	r0, [r3, #0]
 801e22c:	b990      	cbnz	r0, 801e254 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e22e:	4b0e      	ldr	r3, [pc, #56]	; (801e268 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801e230:	2153      	movs	r1, #83	; 0x53
 801e232:	4a0e      	ldr	r2, [pc, #56]	; (801e26c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801e234:	480e      	ldr	r0, [pc, #56]	; (801e270 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801e236:	f000 fb29 	bl	801e88c <__assert_func>
 801e23a:	2902      	cmp	r1, #2
 801e23c:	d00e      	beq.n	801e25c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801e23e:	2903      	cmp	r1, #3
 801e240:	d0f2      	beq.n	801e228 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801e242:	2901      	cmp	r1, #1
 801e244:	d1ee      	bne.n	801e224 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801e246:	4b07      	ldr	r3, [pc, #28]	; (801e264 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e248:	8818      	ldrh	r0, [r3, #0]
 801e24a:	2800      	cmp	r0, #0
 801e24c:	d0ef      	beq.n	801e22e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e24e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e252:	e7e8      	b.n	801e226 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e254:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e258:	4240      	negs	r0, r0
 801e25a:	e7e4      	b.n	801e226 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e25c:	f04f 30ff 	mov.w	r0, #4294967295
 801e260:	e7e1      	b.n	801e226 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e262:	bf00      	nop
 801e264:	20006f0c 	.word	0x20006f0c
 801e268:	08023922 	.word	0x08023922
 801e26c:	08023c86 	.word	0x08023c86
 801e270:	08023964 	.word	0x08023964

0801e274 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e274:	b508      	push	{r3, lr}
 801e276:	b180      	cbz	r0, 801e29a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801e278:	2902      	cmp	r1, #2
 801e27a:	d014      	beq.n	801e2a6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801e27c:	2903      	cmp	r1, #3
 801e27e:	d018      	beq.n	801e2b2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801e280:	2901      	cmp	r1, #1
 801e282:	d001      	beq.n	801e288 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801e284:	2001      	movs	r0, #1
 801e286:	e013      	b.n	801e2b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801e288:	4b0e      	ldr	r3, [pc, #56]	; (801e2c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e28a:	8818      	ldrh	r0, [r3, #0]
 801e28c:	b970      	cbnz	r0, 801e2ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801e28e:	4b0e      	ldr	r3, [pc, #56]	; (801e2c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801e290:	2153      	movs	r1, #83	; 0x53
 801e292:	4a0e      	ldr	r2, [pc, #56]	; (801e2cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801e294:	480e      	ldr	r0, [pc, #56]	; (801e2d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801e296:	f000 faf9 	bl	801e88c <__assert_func>
 801e29a:	2902      	cmp	r1, #2
 801e29c:	d009      	beq.n	801e2b2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801e29e:	2903      	cmp	r1, #3
 801e2a0:	d0f0      	beq.n	801e284 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801e2a2:	2901      	cmp	r1, #1
 801e2a4:	d1f0      	bne.n	801e288 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801e2a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e2aa:	e001      	b.n	801e2b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801e2ac:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e2b0:	bd08      	pop	{r3, pc}
 801e2b2:	4b04      	ldr	r3, [pc, #16]	; (801e2c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e2b4:	8818      	ldrh	r0, [r3, #0]
 801e2b6:	2800      	cmp	r0, #0
 801e2b8:	d0e9      	beq.n	801e28e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801e2ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e2be:	4240      	negs	r0, r0
 801e2c0:	e7f6      	b.n	801e2b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801e2c2:	bf00      	nop
 801e2c4:	20006f0c 	.word	0x20006f0c
 801e2c8:	08023922 	.word	0x08023922
 801e2cc:	08023c86 	.word	0x08023c86
 801e2d0:	08023964 	.word	0x08023964

0801e2d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2d8:	b099      	sub	sp, #100	; 0x64
 801e2da:	910b      	str	r1, [sp, #44]	; 0x2c
 801e2dc:	a914      	add	r1, sp, #80	; 0x50
 801e2de:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801e2e2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801e2e6:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801e2ea:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801e2ee:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801e2f2:	e881 000c 	stmia.w	r1, {r2, r3}
 801e2f6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801e2fa:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801e2fe:	930a      	str	r3, [sp, #40]	; 0x28
 801e300:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e304:	f891 900d 	ldrb.w	r9, [r1, #13]
 801e308:	9311      	str	r3, [sp, #68]	; 0x44
 801e30a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801e30e:	7988      	ldrb	r0, [r1, #6]
 801e310:	930c      	str	r3, [sp, #48]	; 0x30
 801e312:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801e316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e31a:	4303      	orrs	r3, r0
 801e31c:	9309      	str	r3, [sp, #36]	; 0x24
 801e31e:	f000 81a1 	beq.w	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e322:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801e326:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e32a:	f891 9007 	ldrb.w	r9, [r1, #7]
 801e32e:	ea59 0903 	orrs.w	r9, r9, r3
 801e332:	f000 8197 	beq.w	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e336:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e33a:	b29b      	uxth	r3, r3
 801e33c:	2e00      	cmp	r6, #0
 801e33e:	f000 813a 	beq.w	801e5b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801e342:	1af6      	subs	r6, r6, r3
 801e344:	b2b6      	uxth	r6, r6
 801e346:	0433      	lsls	r3, r6, #16
 801e348:	d502      	bpl.n	801e350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801e34a:	1bad      	subs	r5, r5, r6
 801e34c:	2600      	movs	r6, #0
 801e34e:	b22d      	sxth	r5, r5
 801e350:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e354:	a814      	add	r0, sp, #80	; 0x50
 801e356:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801e35a:	428d      	cmp	r5, r1
 801e35c:	b28b      	uxth	r3, r1
 801e35e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801e362:	bfbf      	itttt	lt
 801e364:	18f6      	addlt	r6, r6, r3
 801e366:	1b75      	sublt	r5, r6, r5
 801e368:	b2ae      	uxthlt	r6, r5
 801e36a:	460d      	movlt	r5, r1
 801e36c:	8891      	ldrh	r1, [r2, #4]
 801e36e:	440b      	add	r3, r1
 801e370:	4629      	mov	r1, r5
 801e372:	b21b      	sxth	r3, r3
 801e374:	9310      	str	r3, [sp, #64]	; 0x40
 801e376:	88d3      	ldrh	r3, [r2, #6]
 801e378:	8852      	ldrh	r2, [r2, #2]
 801e37a:	4413      	add	r3, r2
 801e37c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e37e:	b21b      	sxth	r3, r3
 801e380:	930f      	str	r3, [sp, #60]	; 0x3c
 801e382:	4bbd      	ldr	r3, [pc, #756]	; (801e678 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e384:	f893 b000 	ldrb.w	fp, [r3]
 801e388:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e38c:	f1dc 0300 	rsbs	r3, ip, #0
 801e390:	eb43 030c 	adc.w	r3, r3, ip
 801e394:	930e      	str	r3, [sp, #56]	; 0x38
 801e396:	4653      	mov	r3, sl
 801e398:	f7fc fd22 	bl	801ade0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e39c:	4629      	mov	r1, r5
 801e39e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e3a2:	4653      	mov	r3, sl
 801e3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3a6:	a814      	add	r0, sp, #80	; 0x50
 801e3a8:	f7fc fd32 	bl	801ae10 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e3ac:	a918      	add	r1, sp, #96	; 0x60
 801e3ae:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e3b2:	a817      	add	r0, sp, #92	; 0x5c
 801e3b4:	f7fc fe4e 	bl	801b054 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e3b8:	f1ba 0f00 	cmp.w	sl, #0
 801e3bc:	f040 80fe 	bne.w	801e5bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801e3c0:	f1bb 0f01 	cmp.w	fp, #1
 801e3c4:	f040 8102 	bne.w	801e5cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801e3c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e3ca:	b153      	cbz	r3, 801e3e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801e3cc:	2408      	movs	r4, #8
 801e3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3d0:	fb94 f3f8 	sdiv	r3, r4, r8
 801e3d4:	1e5c      	subs	r4, r3, #1
 801e3d6:	4414      	add	r4, r2
 801e3d8:	fb94 f4f3 	sdiv	r4, r4, r3
 801e3dc:	fb14 f403 	smulbb	r4, r4, r3
 801e3e0:	b2a4      	uxth	r4, r4
 801e3e2:	b906      	cbnz	r6, 801e3e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801e3e4:	b16f      	cbz	r7, 801e402 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801e3e6:	fb07 6304 	mla	r3, r7, r4, r6
 801e3ea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e3ec:	463a      	mov	r2, r7
 801e3ee:	fb08 f303 	mul.w	r3, r8, r3
 801e3f2:	f003 0707 	and.w	r7, r3, #7
 801e3f6:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801e3fa:	9328      	str	r3, [sp, #160]	; 0xa0
 801e3fc:	eba9 0302 	sub.w	r3, r9, r2
 801e400:	930d      	str	r3, [sp, #52]	; 0x34
 801e402:	4651      	mov	r1, sl
 801e404:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e406:	f7ff ff05 	bl	801e214 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e40a:	4651      	mov	r1, sl
 801e40c:	4681      	mov	r9, r0
 801e40e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e410:	f7ff ff30 	bl	801e274 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e418:	4683      	mov	fp, r0
 801e41a:	eba3 0a02 	sub.w	sl, r3, r2
 801e41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e420:	459a      	cmp	sl, r3
 801e422:	bfa8      	it	ge
 801e424:	469a      	movge	sl, r3
 801e426:	f1ba 0f00 	cmp.w	sl, #0
 801e42a:	f340 811b 	ble.w	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e42e:	1bad      	subs	r5, r5, r6
 801e430:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e432:	1b5d      	subs	r5, r3, r5
 801e434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e436:	429d      	cmp	r5, r3
 801e438:	bfd4      	ite	le
 801e43a:	ebc6 0605 	rsble	r6, r6, r5
 801e43e:	ebc6 0603 	rsbgt	r6, r6, r3
 801e442:	2e00      	cmp	r6, #0
 801e444:	f340 810e 	ble.w	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e448:	1ba4      	subs	r4, r4, r6
 801e44a:	fb08 f304 	mul.w	r3, r8, r4
 801e44e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e452:	2b00      	cmp	r3, #0
 801e454:	f040 810b 	bne.w	801e66e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801e458:	4b88      	ldr	r3, [pc, #544]	; (801e67c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e45a:	6818      	ldr	r0, [r3, #0]
 801e45c:	6803      	ldr	r3, [r0, #0]
 801e45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e460:	4798      	blx	r3
 801e462:	2301      	movs	r3, #1
 801e464:	4a86      	ldr	r2, [pc, #536]	; (801e680 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e466:	fa03 f308 	lsl.w	r3, r3, r8
 801e46a:	8811      	ldrh	r1, [r2, #0]
 801e46c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e470:	3b01      	subs	r3, #1
 801e472:	b2db      	uxtb	r3, r3
 801e474:	930e      	str	r3, [sp, #56]	; 0x38
 801e476:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e47a:	fb01 2303 	mla	r3, r1, r3, r2
 801e47e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e482:	930a      	str	r3, [sp, #40]	; 0x28
 801e484:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e486:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e48a:	9313      	str	r3, [sp, #76]	; 0x4c
 801e48c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e48e:	0a19      	lsrs	r1, r3, #8
 801e490:	b2cb      	uxtb	r3, r1
 801e492:	9312      	str	r3, [sp, #72]	; 0x48
 801e494:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e496:	b2db      	uxtb	r3, r3
 801e498:	9311      	str	r3, [sp, #68]	; 0x44
 801e49a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e49c:	095a      	lsrs	r2, r3, #5
 801e49e:	4b79      	ldr	r3, [pc, #484]	; (801e684 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801e4a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e4a4:	400b      	ands	r3, r1
 801e4a6:	4313      	orrs	r3, r2
 801e4a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e4aa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e4ae:	4313      	orrs	r3, r2
 801e4b0:	b29b      	uxth	r3, r3
 801e4b2:	9310      	str	r3, [sp, #64]	; 0x40
 801e4b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e4b6:	781a      	ldrb	r2, [r3, #0]
 801e4b8:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e4bc:	fb06 b919 	mls	r9, r6, r9, fp
 801e4c0:	413a      	asrs	r2, r7
 801e4c2:	fb03 fb06 	mul.w	fp, r3, r6
 801e4c6:	930d      	str	r3, [sp, #52]	; 0x34
 801e4c8:	b2d2      	uxtb	r2, r2
 801e4ca:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e4ce:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e4d2:	f0c0 80ea 	bcc.w	801e6aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801e4d6:	46b6      	mov	lr, r6
 801e4d8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e4dc:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e4e0:	f0c0 80d2 	bcc.w	801e688 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801e4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4e6:	4013      	ands	r3, r2
 801e4e8:	d055      	beq.n	801e596 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801e4ea:	20ff      	movs	r0, #255	; 0xff
 801e4ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e4ee:	fb90 f1f1 	sdiv	r1, r0, r1
 801e4f2:	434b      	muls	r3, r1
 801e4f4:	2bfe      	cmp	r3, #254	; 0xfe
 801e4f6:	dd03      	ble.n	801e500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801e4f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e4fa:	4281      	cmp	r1, r0
 801e4fc:	f000 80b9 	beq.w	801e672 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e500:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e502:	f8bc 4000 	ldrh.w	r4, [ip]
 801e506:	fb11 f303 	smulbb	r3, r1, r3
 801e50a:	1220      	asrs	r0, r4, #8
 801e50c:	b29b      	uxth	r3, r3
 801e50e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e512:	1c59      	adds	r1, r3, #1
 801e514:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e518:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e51c:	10e1      	asrs	r1, r4, #3
 801e51e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e522:	00e4      	lsls	r4, r4, #3
 801e524:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e528:	b29d      	uxth	r5, r3
 801e52a:	43db      	mvns	r3, r3
 801e52c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e530:	b2db      	uxtb	r3, r3
 801e532:	b2e4      	uxtb	r4, r4
 801e534:	9309      	str	r3, [sp, #36]	; 0x24
 801e536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e538:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e53c:	fb13 f905 	smulbb	r9, r3, r5
 801e540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e542:	fb00 9003 	mla	r0, r0, r3, r9
 801e546:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e548:	fb13 f905 	smulbb	r9, r3, r5
 801e54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e54e:	b280      	uxth	r0, r0
 801e550:	fb01 9103 	mla	r1, r1, r3, r9
 801e554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e556:	fb13 f505 	smulbb	r5, r3, r5
 801e55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e55c:	b289      	uxth	r1, r1
 801e55e:	fb04 5403 	mla	r4, r4, r3, r5
 801e562:	1c43      	adds	r3, r0, #1
 801e564:	b2a4      	uxth	r4, r4
 801e566:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e56a:	f104 0901 	add.w	r9, r4, #1
 801e56e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e572:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e576:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e57a:	ea49 0000 	orr.w	r0, r9, r0
 801e57e:	f101 0901 	add.w	r9, r1, #1
 801e582:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e586:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e58a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e58e:	ea40 0009 	orr.w	r0, r0, r9
 801e592:	f8ac 0000 	strh.w	r0, [ip]
 801e596:	4447      	add	r7, r8
 801e598:	b2bf      	uxth	r7, r7
 801e59a:	2f07      	cmp	r7, #7
 801e59c:	bf89      	itett	hi
 801e59e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e5a0:	fa42 f208 	asrls.w	r2, r2, r8
 801e5a4:	2700      	movhi	r7, #0
 801e5a6:	785a      	ldrbhi	r2, [r3, #1]
 801e5a8:	bf8a      	itet	hi
 801e5aa:	3301      	addhi	r3, #1
 801e5ac:	b2d2      	uxtbls	r2, r2
 801e5ae:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e5b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5b2:	449c      	add	ip, r3
 801e5b4:	e792      	b.n	801e4dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801e5b6:	441d      	add	r5, r3
 801e5b8:	b22d      	sxth	r5, r5
 801e5ba:	e6c9      	b.n	801e350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801e5bc:	f1ba 0f01 	cmp.w	sl, #1
 801e5c0:	f47f af02 	bne.w	801e3c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e5c4:	f1bb 0f01 	cmp.w	fp, #1
 801e5c8:	f47f aefe 	bne.w	801e3c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e5cc:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801e67c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801e5d0:	f8db 0000 	ldr.w	r0, [fp]
 801e5d4:	6803      	ldr	r3, [r0, #0]
 801e5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5d8:	4798      	blx	r3
 801e5da:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e5de:	465a      	mov	r2, fp
 801e5e0:	d006      	beq.n	801e5f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801e5e2:	f1b8 0f04 	cmp.w	r8, #4
 801e5e6:	d140      	bne.n	801e66a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801e5e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e5ea:	3300      	adds	r3, #0
 801e5ec:	bf18      	it	ne
 801e5ee:	2301      	movne	r3, #1
 801e5f0:	0580      	lsls	r0, r0, #22
 801e5f2:	d563      	bpl.n	801e6bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801e5f4:	f1b8 0f08 	cmp.w	r8, #8
 801e5f8:	d160      	bne.n	801e6bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	bf0c      	ite	eq
 801e5fe:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e602:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e606:	2e00      	cmp	r6, #0
 801e608:	f47f aede 	bne.w	801e3c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e60c:	2f00      	cmp	r7, #0
 801e60e:	f47f aedb 	bne.w	801e3c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e614:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e616:	18eb      	adds	r3, r5, r3
 801e618:	4283      	cmp	r3, r0
 801e61a:	f73f aed5 	bgt.w	801e3c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e620:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e622:	444b      	add	r3, r9
 801e624:	4283      	cmp	r3, r0
 801e626:	f73f aecf 	bgt.w	801e3c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e62a:	f1b8 0f08 	cmp.w	r8, #8
 801e62e:	6810      	ldr	r0, [r2, #0]
 801e630:	f04f 0600 	mov.w	r6, #0
 801e634:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e638:	bf18      	it	ne
 801e63a:	3401      	addne	r4, #1
 801e63c:	6805      	ldr	r5, [r0, #0]
 801e63e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e642:	bf18      	it	ne
 801e644:	f024 0401 	bicne.w	r4, r4, #1
 801e648:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e64c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e64e:	bf18      	it	ne
 801e650:	b2a4      	uxthne	r4, r4
 801e652:	9104      	str	r1, [sp, #16]
 801e654:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e656:	e9cd 4900 	strd	r4, r9, [sp]
 801e65a:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801e65e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e660:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801e662:	47a0      	blx	r4
 801e664:	b019      	add	sp, #100	; 0x64
 801e666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e66a:	2300      	movs	r3, #0
 801e66c:	e7c0      	b.n	801e5f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801e66e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e670:	e6f7      	b.n	801e462 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801e672:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e674:	e78d      	b.n	801e592 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801e676:	bf00      	nop
 801e678:	20006f0a 	.word	0x20006f0a
 801e67c:	20006f14 	.word	0x20006f14
 801e680:	20006f0c 	.word	0x20006f0c
 801e684:	00fff800 	.word	0x00fff800
 801e688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e68a:	b153      	cbz	r3, 801e6a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801e68c:	441f      	add	r7, r3
 801e68e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e690:	b2bf      	uxth	r7, r7
 801e692:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801e696:	f007 0707 	and.w	r7, r7, #7
 801e69a:	781a      	ldrb	r2, [r3, #0]
 801e69c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e69e:	413a      	asrs	r2, r7
 801e6a0:	b2d2      	uxtb	r2, r2
 801e6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6a4:	445b      	add	r3, fp
 801e6a6:	930a      	str	r3, [sp, #40]	; 0x28
 801e6a8:	e711      	b.n	801e4ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801e6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d1d9      	bne.n	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e6b0:	4b05      	ldr	r3, [pc, #20]	; (801e6c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801e6b2:	6818      	ldr	r0, [r3, #0]
 801e6b4:	6803      	ldr	r3, [r0, #0]
 801e6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6b8:	4798      	blx	r3
 801e6ba:	e7d3      	b.n	801e664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	f43f ae83 	beq.w	801e3c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e6c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e6c6:	e79e      	b.n	801e606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e6c8:	20006f14 	.word	0x20006f14

0801e6cc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801e6cc:	6101      	str	r1, [r0, #16]
 801e6ce:	4770      	bx	lr

0801e6d0 <_ZN8touchgfx8Gestures4tickEv>:
 801e6d0:	7b83      	ldrb	r3, [r0, #14]
 801e6d2:	b14b      	cbz	r3, 801e6e8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801e6d4:	8903      	ldrh	r3, [r0, #8]
 801e6d6:	3301      	adds	r3, #1
 801e6d8:	b29b      	uxth	r3, r3
 801e6da:	2b07      	cmp	r3, #7
 801e6dc:	8103      	strh	r3, [r0, #8]
 801e6de:	bf81      	itttt	hi
 801e6e0:	2300      	movhi	r3, #0
 801e6e2:	8143      	strhhi	r3, [r0, #10]
 801e6e4:	8183      	strhhi	r3, [r0, #12]
 801e6e6:	7383      	strbhi	r3, [r0, #14]
 801e6e8:	4770      	bx	lr
	...

0801e6ec <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801e6ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e6f0:	4698      	mov	r8, r3
 801e6f2:	8883      	ldrh	r3, [r0, #4]
 801e6f4:	4604      	mov	r4, r0
 801e6f6:	4617      	mov	r7, r2
 801e6f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e6fc:	eba8 0303 	sub.w	r3, r8, r3
 801e700:	4a19      	ldr	r2, [pc, #100]	; (801e768 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801e702:	460e      	mov	r6, r1
 801e704:	b21b      	sxth	r3, r3
 801e706:	88c1      	ldrh	r1, [r0, #6]
 801e708:	9200      	str	r2, [sp, #0]
 801e70a:	2000      	movs	r0, #0
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	8aa2      	ldrh	r2, [r4, #20]
 801e710:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801e714:	bfb8      	it	lt
 801e716:	425b      	neglt	r3, r3
 801e718:	f88d 0004 	strb.w	r0, [sp, #4]
 801e71c:	f8ad 1008 	strh.w	r1, [sp, #8]
 801e720:	b21b      	sxth	r3, r3
 801e722:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e726:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e72a:	4293      	cmp	r3, r2
 801e72c:	dc07      	bgt.n	801e73e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801e72e:	1a69      	subs	r1, r5, r1
 801e730:	b209      	sxth	r1, r1
 801e732:	2900      	cmp	r1, #0
 801e734:	bfb8      	it	lt
 801e736:	4249      	neglt	r1, r1
 801e738:	b209      	sxth	r1, r1
 801e73a:	428a      	cmp	r2, r1
 801e73c:	da10      	bge.n	801e760 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801e73e:	6920      	ldr	r0, [r4, #16]
 801e740:	4669      	mov	r1, sp
 801e742:	eba8 0606 	sub.w	r6, r8, r6
 801e746:	1bef      	subs	r7, r5, r7
 801e748:	6803      	ldr	r3, [r0, #0]
 801e74a:	685b      	ldr	r3, [r3, #4]
 801e74c:	4798      	blx	r3
 801e74e:	2300      	movs	r3, #0
 801e750:	2001      	movs	r0, #1
 801e752:	8166      	strh	r6, [r4, #10]
 801e754:	8123      	strh	r3, [r4, #8]
 801e756:	81a7      	strh	r7, [r4, #12]
 801e758:	f8a4 8004 	strh.w	r8, [r4, #4]
 801e75c:	80e5      	strh	r5, [r4, #6]
 801e75e:	73a0      	strb	r0, [r4, #14]
 801e760:	b004      	add	sp, #16
 801e762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e766:	bf00      	nop
 801e768:	08022488 	.word	0x08022488

0801e76c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801e76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e76e:	461e      	mov	r6, r3
 801e770:	1e4b      	subs	r3, r1, #1
 801e772:	b085      	sub	sp, #20
 801e774:	4604      	mov	r4, r0
 801e776:	2b01      	cmp	r3, #1
 801e778:	460d      	mov	r5, r1
 801e77a:	4617      	mov	r7, r2
 801e77c:	d84b      	bhi.n	801e816 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801e77e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e782:	1cd3      	adds	r3, r2, #3
 801e784:	b29b      	uxth	r3, r3
 801e786:	2b06      	cmp	r3, #6
 801e788:	d916      	bls.n	801e7b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801e78a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801e82c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801e78e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e792:	f8cd c004 	str.w	ip, [sp, #4]
 801e796:	f04f 0c00 	mov.w	ip, #0
 801e79a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e79e:	6900      	ldr	r0, [r0, #16]
 801e7a0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e7a4:	a901      	add	r1, sp, #4
 801e7a6:	f88d c008 	strb.w	ip, [sp, #8]
 801e7aa:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e7ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e7b2:	6803      	ldr	r3, [r0, #0]
 801e7b4:	689b      	ldr	r3, [r3, #8]
 801e7b6:	4798      	blx	r3
 801e7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e7bc:	1cd3      	adds	r3, r2, #3
 801e7be:	b29b      	uxth	r3, r3
 801e7c0:	2b06      	cmp	r3, #6
 801e7c2:	d916      	bls.n	801e7f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e7c4:	f8df c064 	ldr.w	ip, [pc, #100]	; 801e82c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801e7c8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e7cc:	f8cd c004 	str.w	ip, [sp, #4]
 801e7d0:	f04f 0c01 	mov.w	ip, #1
 801e7d4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e7d8:	6920      	ldr	r0, [r4, #16]
 801e7da:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e7de:	a901      	add	r1, sp, #4
 801e7e0:	f88d c008 	strb.w	ip, [sp, #8]
 801e7e4:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e7e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e7ec:	6803      	ldr	r3, [r0, #0]
 801e7ee:	689b      	ldr	r3, [r3, #8]
 801e7f0:	4798      	blx	r3
 801e7f2:	4b0d      	ldr	r3, [pc, #52]	; (801e828 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801e7f4:	a901      	add	r1, sp, #4
 801e7f6:	6920      	ldr	r0, [r4, #16]
 801e7f8:	9301      	str	r3, [sp, #4]
 801e7fa:	2300      	movs	r3, #0
 801e7fc:	f88d 5008 	strb.w	r5, [sp, #8]
 801e800:	f8ad 700a 	strh.w	r7, [sp, #10]
 801e804:	f8ad 600c 	strh.w	r6, [sp, #12]
 801e808:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e80c:	6803      	ldr	r3, [r0, #0]
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	4798      	blx	r3
 801e812:	b005      	add	sp, #20
 801e814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e816:	2900      	cmp	r1, #0
 801e818:	d1eb      	bne.n	801e7f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e81a:	80a2      	strh	r2, [r4, #4]
 801e81c:	80c6      	strh	r6, [r0, #6]
 801e81e:	60a1      	str	r1, [r4, #8]
 801e820:	81a1      	strh	r1, [r4, #12]
 801e822:	73a1      	strb	r1, [r4, #14]
 801e824:	e7e5      	b.n	801e7f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e826:	bf00      	nop
 801e828:	08022474 	.word	0x08022474
 801e82c:	08022e2c 	.word	0x08022e2c

0801e830 <_ZdlPvj>:
 801e830:	f000 b812 	b.w	801e858 <_ZdlPv>

0801e834 <__cxa_guard_acquire>:
 801e834:	6803      	ldr	r3, [r0, #0]
 801e836:	07db      	lsls	r3, r3, #31
 801e838:	d406      	bmi.n	801e848 <__cxa_guard_acquire+0x14>
 801e83a:	7843      	ldrb	r3, [r0, #1]
 801e83c:	b103      	cbz	r3, 801e840 <__cxa_guard_acquire+0xc>
 801e83e:	deff      	udf	#255	; 0xff
 801e840:	2301      	movs	r3, #1
 801e842:	7043      	strb	r3, [r0, #1]
 801e844:	4618      	mov	r0, r3
 801e846:	4770      	bx	lr
 801e848:	2000      	movs	r0, #0
 801e84a:	4770      	bx	lr

0801e84c <__cxa_guard_release>:
 801e84c:	2301      	movs	r3, #1
 801e84e:	6003      	str	r3, [r0, #0]
 801e850:	4770      	bx	lr

0801e852 <__cxa_pure_virtual>:
 801e852:	b508      	push	{r3, lr}
 801e854:	f000 f80e 	bl	801e874 <_ZSt9terminatev>

0801e858 <_ZdlPv>:
 801e858:	f000 b97e 	b.w	801eb58 <free>

0801e85c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e85c:	b508      	push	{r3, lr}
 801e85e:	4780      	blx	r0
 801e860:	f000 f80d 	bl	801e87e <abort>

0801e864 <_ZSt13get_terminatev>:
 801e864:	4b02      	ldr	r3, [pc, #8]	; (801e870 <_ZSt13get_terminatev+0xc>)
 801e866:	6818      	ldr	r0, [r3, #0]
 801e868:	f3bf 8f5b 	dmb	ish
 801e86c:	4770      	bx	lr
 801e86e:	bf00      	nop
 801e870:	2000013c 	.word	0x2000013c

0801e874 <_ZSt9terminatev>:
 801e874:	b508      	push	{r3, lr}
 801e876:	f7ff fff5 	bl	801e864 <_ZSt13get_terminatev>
 801e87a:	f7ff ffef 	bl	801e85c <_ZN10__cxxabiv111__terminateEPFvvE>

0801e87e <abort>:
 801e87e:	b508      	push	{r3, lr}
 801e880:	2006      	movs	r0, #6
 801e882:	f001 f8a5 	bl	801f9d0 <raise>
 801e886:	2001      	movs	r0, #1
 801e888:	f7e5 faec 	bl	8003e64 <_exit>

0801e88c <__assert_func>:
 801e88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e88e:	4614      	mov	r4, r2
 801e890:	461a      	mov	r2, r3
 801e892:	4b09      	ldr	r3, [pc, #36]	; (801e8b8 <__assert_func+0x2c>)
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	4605      	mov	r5, r0
 801e898:	68d8      	ldr	r0, [r3, #12]
 801e89a:	b14c      	cbz	r4, 801e8b0 <__assert_func+0x24>
 801e89c:	4b07      	ldr	r3, [pc, #28]	; (801e8bc <__assert_func+0x30>)
 801e89e:	9100      	str	r1, [sp, #0]
 801e8a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e8a4:	4906      	ldr	r1, [pc, #24]	; (801e8c0 <__assert_func+0x34>)
 801e8a6:	462b      	mov	r3, r5
 801e8a8:	f000 f8f4 	bl	801ea94 <fiprintf>
 801e8ac:	f7ff ffe7 	bl	801e87e <abort>
 801e8b0:	4b04      	ldr	r3, [pc, #16]	; (801e8c4 <__assert_func+0x38>)
 801e8b2:	461c      	mov	r4, r3
 801e8b4:	e7f3      	b.n	801e89e <__assert_func+0x12>
 801e8b6:	bf00      	nop
 801e8b8:	20000140 	.word	0x20000140
 801e8bc:	08023e71 	.word	0x08023e71
 801e8c0:	08023e7e 	.word	0x08023e7e
 801e8c4:	08023eac 	.word	0x08023eac

0801e8c8 <atexit>:
 801e8c8:	2300      	movs	r3, #0
 801e8ca:	4601      	mov	r1, r0
 801e8cc:	461a      	mov	r2, r3
 801e8ce:	4618      	mov	r0, r3
 801e8d0:	f001 ba5c 	b.w	801fd8c <__register_exitproc>

0801e8d4 <atoi>:
 801e8d4:	220a      	movs	r2, #10
 801e8d6:	2100      	movs	r1, #0
 801e8d8:	f001 b97c 	b.w	801fbd4 <strtol>

0801e8dc <__errno>:
 801e8dc:	4b01      	ldr	r3, [pc, #4]	; (801e8e4 <__errno+0x8>)
 801e8de:	6818      	ldr	r0, [r3, #0]
 801e8e0:	4770      	bx	lr
 801e8e2:	bf00      	nop
 801e8e4:	20000140 	.word	0x20000140

0801e8e8 <std>:
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	b510      	push	{r4, lr}
 801e8ec:	4604      	mov	r4, r0
 801e8ee:	e9c0 3300 	strd	r3, r3, [r0]
 801e8f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e8f6:	6083      	str	r3, [r0, #8]
 801e8f8:	8181      	strh	r1, [r0, #12]
 801e8fa:	6643      	str	r3, [r0, #100]	; 0x64
 801e8fc:	81c2      	strh	r2, [r0, #14]
 801e8fe:	6183      	str	r3, [r0, #24]
 801e900:	4619      	mov	r1, r3
 801e902:	2208      	movs	r2, #8
 801e904:	305c      	adds	r0, #92	; 0x5c
 801e906:	f000 f93d 	bl	801eb84 <memset>
 801e90a:	4b05      	ldr	r3, [pc, #20]	; (801e920 <std+0x38>)
 801e90c:	6263      	str	r3, [r4, #36]	; 0x24
 801e90e:	4b05      	ldr	r3, [pc, #20]	; (801e924 <std+0x3c>)
 801e910:	62a3      	str	r3, [r4, #40]	; 0x28
 801e912:	4b05      	ldr	r3, [pc, #20]	; (801e928 <std+0x40>)
 801e914:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e916:	4b05      	ldr	r3, [pc, #20]	; (801e92c <std+0x44>)
 801e918:	6224      	str	r4, [r4, #32]
 801e91a:	6323      	str	r3, [r4, #48]	; 0x30
 801e91c:	bd10      	pop	{r4, pc}
 801e91e:	bf00      	nop
 801e920:	0801fa49 	.word	0x0801fa49
 801e924:	0801fa6b 	.word	0x0801fa6b
 801e928:	0801faa3 	.word	0x0801faa3
 801e92c:	0801fac7 	.word	0x0801fac7

0801e930 <_cleanup_r>:
 801e930:	4901      	ldr	r1, [pc, #4]	; (801e938 <_cleanup_r+0x8>)
 801e932:	f000 b8c1 	b.w	801eab8 <_fwalk_reent>
 801e936:	bf00      	nop
 801e938:	08020b71 	.word	0x08020b71

0801e93c <__sfmoreglue>:
 801e93c:	b570      	push	{r4, r5, r6, lr}
 801e93e:	2268      	movs	r2, #104	; 0x68
 801e940:	1e4d      	subs	r5, r1, #1
 801e942:	4355      	muls	r5, r2
 801e944:	460e      	mov	r6, r1
 801e946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e94a:	f000 f98f 	bl	801ec6c <_malloc_r>
 801e94e:	4604      	mov	r4, r0
 801e950:	b140      	cbz	r0, 801e964 <__sfmoreglue+0x28>
 801e952:	2100      	movs	r1, #0
 801e954:	e9c0 1600 	strd	r1, r6, [r0]
 801e958:	300c      	adds	r0, #12
 801e95a:	60a0      	str	r0, [r4, #8]
 801e95c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e960:	f000 f910 	bl	801eb84 <memset>
 801e964:	4620      	mov	r0, r4
 801e966:	bd70      	pop	{r4, r5, r6, pc}

0801e968 <__sfp_lock_acquire>:
 801e968:	4801      	ldr	r0, [pc, #4]	; (801e970 <__sfp_lock_acquire+0x8>)
 801e96a:	f000 b8ea 	b.w	801eb42 <__retarget_lock_acquire_recursive>
 801e96e:	bf00      	nop
 801e970:	20006f6a 	.word	0x20006f6a

0801e974 <__sfp_lock_release>:
 801e974:	4801      	ldr	r0, [pc, #4]	; (801e97c <__sfp_lock_release+0x8>)
 801e976:	f000 b8e6 	b.w	801eb46 <__retarget_lock_release_recursive>
 801e97a:	bf00      	nop
 801e97c:	20006f6a 	.word	0x20006f6a

0801e980 <__sinit_lock_acquire>:
 801e980:	4801      	ldr	r0, [pc, #4]	; (801e988 <__sinit_lock_acquire+0x8>)
 801e982:	f000 b8de 	b.w	801eb42 <__retarget_lock_acquire_recursive>
 801e986:	bf00      	nop
 801e988:	20006f6b 	.word	0x20006f6b

0801e98c <__sinit_lock_release>:
 801e98c:	4801      	ldr	r0, [pc, #4]	; (801e994 <__sinit_lock_release+0x8>)
 801e98e:	f000 b8da 	b.w	801eb46 <__retarget_lock_release_recursive>
 801e992:	bf00      	nop
 801e994:	20006f6b 	.word	0x20006f6b

0801e998 <__sinit>:
 801e998:	b510      	push	{r4, lr}
 801e99a:	4604      	mov	r4, r0
 801e99c:	f7ff fff0 	bl	801e980 <__sinit_lock_acquire>
 801e9a0:	69a3      	ldr	r3, [r4, #24]
 801e9a2:	b11b      	cbz	r3, 801e9ac <__sinit+0x14>
 801e9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9a8:	f7ff bff0 	b.w	801e98c <__sinit_lock_release>
 801e9ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e9b0:	6523      	str	r3, [r4, #80]	; 0x50
 801e9b2:	4b13      	ldr	r3, [pc, #76]	; (801ea00 <__sinit+0x68>)
 801e9b4:	4a13      	ldr	r2, [pc, #76]	; (801ea04 <__sinit+0x6c>)
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	62a2      	str	r2, [r4, #40]	; 0x28
 801e9ba:	42a3      	cmp	r3, r4
 801e9bc:	bf04      	itt	eq
 801e9be:	2301      	moveq	r3, #1
 801e9c0:	61a3      	streq	r3, [r4, #24]
 801e9c2:	4620      	mov	r0, r4
 801e9c4:	f000 f820 	bl	801ea08 <__sfp>
 801e9c8:	6060      	str	r0, [r4, #4]
 801e9ca:	4620      	mov	r0, r4
 801e9cc:	f000 f81c 	bl	801ea08 <__sfp>
 801e9d0:	60a0      	str	r0, [r4, #8]
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	f000 f818 	bl	801ea08 <__sfp>
 801e9d8:	2200      	movs	r2, #0
 801e9da:	60e0      	str	r0, [r4, #12]
 801e9dc:	2104      	movs	r1, #4
 801e9de:	6860      	ldr	r0, [r4, #4]
 801e9e0:	f7ff ff82 	bl	801e8e8 <std>
 801e9e4:	68a0      	ldr	r0, [r4, #8]
 801e9e6:	2201      	movs	r2, #1
 801e9e8:	2109      	movs	r1, #9
 801e9ea:	f7ff ff7d 	bl	801e8e8 <std>
 801e9ee:	68e0      	ldr	r0, [r4, #12]
 801e9f0:	2202      	movs	r2, #2
 801e9f2:	2112      	movs	r1, #18
 801e9f4:	f7ff ff78 	bl	801e8e8 <std>
 801e9f8:	2301      	movs	r3, #1
 801e9fa:	61a3      	str	r3, [r4, #24]
 801e9fc:	e7d2      	b.n	801e9a4 <__sinit+0xc>
 801e9fe:	bf00      	nop
 801ea00:	08023f10 	.word	0x08023f10
 801ea04:	0801e931 	.word	0x0801e931

0801ea08 <__sfp>:
 801ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea0a:	4607      	mov	r7, r0
 801ea0c:	f7ff ffac 	bl	801e968 <__sfp_lock_acquire>
 801ea10:	4b1e      	ldr	r3, [pc, #120]	; (801ea8c <__sfp+0x84>)
 801ea12:	681e      	ldr	r6, [r3, #0]
 801ea14:	69b3      	ldr	r3, [r6, #24]
 801ea16:	b913      	cbnz	r3, 801ea1e <__sfp+0x16>
 801ea18:	4630      	mov	r0, r6
 801ea1a:	f7ff ffbd 	bl	801e998 <__sinit>
 801ea1e:	3648      	adds	r6, #72	; 0x48
 801ea20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ea24:	3b01      	subs	r3, #1
 801ea26:	d503      	bpl.n	801ea30 <__sfp+0x28>
 801ea28:	6833      	ldr	r3, [r6, #0]
 801ea2a:	b30b      	cbz	r3, 801ea70 <__sfp+0x68>
 801ea2c:	6836      	ldr	r6, [r6, #0]
 801ea2e:	e7f7      	b.n	801ea20 <__sfp+0x18>
 801ea30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ea34:	b9d5      	cbnz	r5, 801ea6c <__sfp+0x64>
 801ea36:	4b16      	ldr	r3, [pc, #88]	; (801ea90 <__sfp+0x88>)
 801ea38:	60e3      	str	r3, [r4, #12]
 801ea3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ea3e:	6665      	str	r5, [r4, #100]	; 0x64
 801ea40:	f000 f87e 	bl	801eb40 <__retarget_lock_init_recursive>
 801ea44:	f7ff ff96 	bl	801e974 <__sfp_lock_release>
 801ea48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ea4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ea50:	6025      	str	r5, [r4, #0]
 801ea52:	61a5      	str	r5, [r4, #24]
 801ea54:	2208      	movs	r2, #8
 801ea56:	4629      	mov	r1, r5
 801ea58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ea5c:	f000 f892 	bl	801eb84 <memset>
 801ea60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ea64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ea68:	4620      	mov	r0, r4
 801ea6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea6c:	3468      	adds	r4, #104	; 0x68
 801ea6e:	e7d9      	b.n	801ea24 <__sfp+0x1c>
 801ea70:	2104      	movs	r1, #4
 801ea72:	4638      	mov	r0, r7
 801ea74:	f7ff ff62 	bl	801e93c <__sfmoreglue>
 801ea78:	4604      	mov	r4, r0
 801ea7a:	6030      	str	r0, [r6, #0]
 801ea7c:	2800      	cmp	r0, #0
 801ea7e:	d1d5      	bne.n	801ea2c <__sfp+0x24>
 801ea80:	f7ff ff78 	bl	801e974 <__sfp_lock_release>
 801ea84:	230c      	movs	r3, #12
 801ea86:	603b      	str	r3, [r7, #0]
 801ea88:	e7ee      	b.n	801ea68 <__sfp+0x60>
 801ea8a:	bf00      	nop
 801ea8c:	08023f10 	.word	0x08023f10
 801ea90:	ffff0001 	.word	0xffff0001

0801ea94 <fiprintf>:
 801ea94:	b40e      	push	{r1, r2, r3}
 801ea96:	b503      	push	{r0, r1, lr}
 801ea98:	4601      	mov	r1, r0
 801ea9a:	ab03      	add	r3, sp, #12
 801ea9c:	4805      	ldr	r0, [pc, #20]	; (801eab4 <fiprintf+0x20>)
 801ea9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801eaa2:	6800      	ldr	r0, [r0, #0]
 801eaa4:	9301      	str	r3, [sp, #4]
 801eaa6:	f000 f97f 	bl	801eda8 <_vfiprintf_r>
 801eaaa:	b002      	add	sp, #8
 801eaac:	f85d eb04 	ldr.w	lr, [sp], #4
 801eab0:	b003      	add	sp, #12
 801eab2:	4770      	bx	lr
 801eab4:	20000140 	.word	0x20000140

0801eab8 <_fwalk_reent>:
 801eab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eabc:	4606      	mov	r6, r0
 801eabe:	4688      	mov	r8, r1
 801eac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801eac4:	2700      	movs	r7, #0
 801eac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801eaca:	f1b9 0901 	subs.w	r9, r9, #1
 801eace:	d505      	bpl.n	801eadc <_fwalk_reent+0x24>
 801ead0:	6824      	ldr	r4, [r4, #0]
 801ead2:	2c00      	cmp	r4, #0
 801ead4:	d1f7      	bne.n	801eac6 <_fwalk_reent+0xe>
 801ead6:	4638      	mov	r0, r7
 801ead8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eadc:	89ab      	ldrh	r3, [r5, #12]
 801eade:	2b01      	cmp	r3, #1
 801eae0:	d907      	bls.n	801eaf2 <_fwalk_reent+0x3a>
 801eae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801eae6:	3301      	adds	r3, #1
 801eae8:	d003      	beq.n	801eaf2 <_fwalk_reent+0x3a>
 801eaea:	4629      	mov	r1, r5
 801eaec:	4630      	mov	r0, r6
 801eaee:	47c0      	blx	r8
 801eaf0:	4307      	orrs	r7, r0
 801eaf2:	3568      	adds	r5, #104	; 0x68
 801eaf4:	e7e9      	b.n	801eaca <_fwalk_reent+0x12>
	...

0801eaf8 <__libc_init_array>:
 801eaf8:	b570      	push	{r4, r5, r6, lr}
 801eafa:	4d0d      	ldr	r5, [pc, #52]	; (801eb30 <__libc_init_array+0x38>)
 801eafc:	4c0d      	ldr	r4, [pc, #52]	; (801eb34 <__libc_init_array+0x3c>)
 801eafe:	1b64      	subs	r4, r4, r5
 801eb00:	10a4      	asrs	r4, r4, #2
 801eb02:	2600      	movs	r6, #0
 801eb04:	42a6      	cmp	r6, r4
 801eb06:	d109      	bne.n	801eb1c <__libc_init_array+0x24>
 801eb08:	4d0b      	ldr	r5, [pc, #44]	; (801eb38 <__libc_init_array+0x40>)
 801eb0a:	4c0c      	ldr	r4, [pc, #48]	; (801eb3c <__libc_init_array+0x44>)
 801eb0c:	f002 fe8e 	bl	802182c <_init>
 801eb10:	1b64      	subs	r4, r4, r5
 801eb12:	10a4      	asrs	r4, r4, #2
 801eb14:	2600      	movs	r6, #0
 801eb16:	42a6      	cmp	r6, r4
 801eb18:	d105      	bne.n	801eb26 <__libc_init_array+0x2e>
 801eb1a:	bd70      	pop	{r4, r5, r6, pc}
 801eb1c:	f855 3b04 	ldr.w	r3, [r5], #4
 801eb20:	4798      	blx	r3
 801eb22:	3601      	adds	r6, #1
 801eb24:	e7ee      	b.n	801eb04 <__libc_init_array+0xc>
 801eb26:	f855 3b04 	ldr.w	r3, [r5], #4
 801eb2a:	4798      	blx	r3
 801eb2c:	3601      	adds	r6, #1
 801eb2e:	e7f2      	b.n	801eb16 <__libc_init_array+0x1e>
 801eb30:	0803b3d8 	.word	0x0803b3d8
 801eb34:	0803b3d8 	.word	0x0803b3d8
 801eb38:	0803b3d8 	.word	0x0803b3d8
 801eb3c:	0803b400 	.word	0x0803b400

0801eb40 <__retarget_lock_init_recursive>:
 801eb40:	4770      	bx	lr

0801eb42 <__retarget_lock_acquire_recursive>:
 801eb42:	4770      	bx	lr

0801eb44 <__retarget_lock_release>:
 801eb44:	4770      	bx	lr

0801eb46 <__retarget_lock_release_recursive>:
 801eb46:	4770      	bx	lr

0801eb48 <malloc>:
 801eb48:	4b02      	ldr	r3, [pc, #8]	; (801eb54 <malloc+0xc>)
 801eb4a:	4601      	mov	r1, r0
 801eb4c:	6818      	ldr	r0, [r3, #0]
 801eb4e:	f000 b88d 	b.w	801ec6c <_malloc_r>
 801eb52:	bf00      	nop
 801eb54:	20000140 	.word	0x20000140

0801eb58 <free>:
 801eb58:	4b02      	ldr	r3, [pc, #8]	; (801eb64 <free+0xc>)
 801eb5a:	4601      	mov	r1, r0
 801eb5c:	6818      	ldr	r0, [r3, #0]
 801eb5e:	f000 b819 	b.w	801eb94 <_free_r>
 801eb62:	bf00      	nop
 801eb64:	20000140 	.word	0x20000140

0801eb68 <memcpy>:
 801eb68:	440a      	add	r2, r1
 801eb6a:	4291      	cmp	r1, r2
 801eb6c:	f100 33ff 	add.w	r3, r0, #4294967295
 801eb70:	d100      	bne.n	801eb74 <memcpy+0xc>
 801eb72:	4770      	bx	lr
 801eb74:	b510      	push	{r4, lr}
 801eb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eb7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eb7e:	4291      	cmp	r1, r2
 801eb80:	d1f9      	bne.n	801eb76 <memcpy+0xe>
 801eb82:	bd10      	pop	{r4, pc}

0801eb84 <memset>:
 801eb84:	4402      	add	r2, r0
 801eb86:	4603      	mov	r3, r0
 801eb88:	4293      	cmp	r3, r2
 801eb8a:	d100      	bne.n	801eb8e <memset+0xa>
 801eb8c:	4770      	bx	lr
 801eb8e:	f803 1b01 	strb.w	r1, [r3], #1
 801eb92:	e7f9      	b.n	801eb88 <memset+0x4>

0801eb94 <_free_r>:
 801eb94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb96:	2900      	cmp	r1, #0
 801eb98:	d044      	beq.n	801ec24 <_free_r+0x90>
 801eb9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb9e:	9001      	str	r0, [sp, #4]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	f1a1 0404 	sub.w	r4, r1, #4
 801eba6:	bfb8      	it	lt
 801eba8:	18e4      	addlt	r4, r4, r3
 801ebaa:	f002 f8b3 	bl	8020d14 <__malloc_lock>
 801ebae:	4a1e      	ldr	r2, [pc, #120]	; (801ec28 <_free_r+0x94>)
 801ebb0:	9801      	ldr	r0, [sp, #4]
 801ebb2:	6813      	ldr	r3, [r2, #0]
 801ebb4:	b933      	cbnz	r3, 801ebc4 <_free_r+0x30>
 801ebb6:	6063      	str	r3, [r4, #4]
 801ebb8:	6014      	str	r4, [r2, #0]
 801ebba:	b003      	add	sp, #12
 801ebbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ebc0:	f002 b8ae 	b.w	8020d20 <__malloc_unlock>
 801ebc4:	42a3      	cmp	r3, r4
 801ebc6:	d908      	bls.n	801ebda <_free_r+0x46>
 801ebc8:	6825      	ldr	r5, [r4, #0]
 801ebca:	1961      	adds	r1, r4, r5
 801ebcc:	428b      	cmp	r3, r1
 801ebce:	bf01      	itttt	eq
 801ebd0:	6819      	ldreq	r1, [r3, #0]
 801ebd2:	685b      	ldreq	r3, [r3, #4]
 801ebd4:	1949      	addeq	r1, r1, r5
 801ebd6:	6021      	streq	r1, [r4, #0]
 801ebd8:	e7ed      	b.n	801ebb6 <_free_r+0x22>
 801ebda:	461a      	mov	r2, r3
 801ebdc:	685b      	ldr	r3, [r3, #4]
 801ebde:	b10b      	cbz	r3, 801ebe4 <_free_r+0x50>
 801ebe0:	42a3      	cmp	r3, r4
 801ebe2:	d9fa      	bls.n	801ebda <_free_r+0x46>
 801ebe4:	6811      	ldr	r1, [r2, #0]
 801ebe6:	1855      	adds	r5, r2, r1
 801ebe8:	42a5      	cmp	r5, r4
 801ebea:	d10b      	bne.n	801ec04 <_free_r+0x70>
 801ebec:	6824      	ldr	r4, [r4, #0]
 801ebee:	4421      	add	r1, r4
 801ebf0:	1854      	adds	r4, r2, r1
 801ebf2:	42a3      	cmp	r3, r4
 801ebf4:	6011      	str	r1, [r2, #0]
 801ebf6:	d1e0      	bne.n	801ebba <_free_r+0x26>
 801ebf8:	681c      	ldr	r4, [r3, #0]
 801ebfa:	685b      	ldr	r3, [r3, #4]
 801ebfc:	6053      	str	r3, [r2, #4]
 801ebfe:	4421      	add	r1, r4
 801ec00:	6011      	str	r1, [r2, #0]
 801ec02:	e7da      	b.n	801ebba <_free_r+0x26>
 801ec04:	d902      	bls.n	801ec0c <_free_r+0x78>
 801ec06:	230c      	movs	r3, #12
 801ec08:	6003      	str	r3, [r0, #0]
 801ec0a:	e7d6      	b.n	801ebba <_free_r+0x26>
 801ec0c:	6825      	ldr	r5, [r4, #0]
 801ec0e:	1961      	adds	r1, r4, r5
 801ec10:	428b      	cmp	r3, r1
 801ec12:	bf04      	itt	eq
 801ec14:	6819      	ldreq	r1, [r3, #0]
 801ec16:	685b      	ldreq	r3, [r3, #4]
 801ec18:	6063      	str	r3, [r4, #4]
 801ec1a:	bf04      	itt	eq
 801ec1c:	1949      	addeq	r1, r1, r5
 801ec1e:	6021      	streq	r1, [r4, #0]
 801ec20:	6054      	str	r4, [r2, #4]
 801ec22:	e7ca      	b.n	801ebba <_free_r+0x26>
 801ec24:	b003      	add	sp, #12
 801ec26:	bd30      	pop	{r4, r5, pc}
 801ec28:	20006f6c 	.word	0x20006f6c

0801ec2c <sbrk_aligned>:
 801ec2c:	b570      	push	{r4, r5, r6, lr}
 801ec2e:	4e0e      	ldr	r6, [pc, #56]	; (801ec68 <sbrk_aligned+0x3c>)
 801ec30:	460c      	mov	r4, r1
 801ec32:	6831      	ldr	r1, [r6, #0]
 801ec34:	4605      	mov	r5, r0
 801ec36:	b911      	cbnz	r1, 801ec3e <sbrk_aligned+0x12>
 801ec38:	f000 fe92 	bl	801f960 <_sbrk_r>
 801ec3c:	6030      	str	r0, [r6, #0]
 801ec3e:	4621      	mov	r1, r4
 801ec40:	4628      	mov	r0, r5
 801ec42:	f000 fe8d 	bl	801f960 <_sbrk_r>
 801ec46:	1c43      	adds	r3, r0, #1
 801ec48:	d00a      	beq.n	801ec60 <sbrk_aligned+0x34>
 801ec4a:	1cc4      	adds	r4, r0, #3
 801ec4c:	f024 0403 	bic.w	r4, r4, #3
 801ec50:	42a0      	cmp	r0, r4
 801ec52:	d007      	beq.n	801ec64 <sbrk_aligned+0x38>
 801ec54:	1a21      	subs	r1, r4, r0
 801ec56:	4628      	mov	r0, r5
 801ec58:	f000 fe82 	bl	801f960 <_sbrk_r>
 801ec5c:	3001      	adds	r0, #1
 801ec5e:	d101      	bne.n	801ec64 <sbrk_aligned+0x38>
 801ec60:	f04f 34ff 	mov.w	r4, #4294967295
 801ec64:	4620      	mov	r0, r4
 801ec66:	bd70      	pop	{r4, r5, r6, pc}
 801ec68:	20006f70 	.word	0x20006f70

0801ec6c <_malloc_r>:
 801ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec70:	1ccd      	adds	r5, r1, #3
 801ec72:	f025 0503 	bic.w	r5, r5, #3
 801ec76:	3508      	adds	r5, #8
 801ec78:	2d0c      	cmp	r5, #12
 801ec7a:	bf38      	it	cc
 801ec7c:	250c      	movcc	r5, #12
 801ec7e:	2d00      	cmp	r5, #0
 801ec80:	4607      	mov	r7, r0
 801ec82:	db01      	blt.n	801ec88 <_malloc_r+0x1c>
 801ec84:	42a9      	cmp	r1, r5
 801ec86:	d905      	bls.n	801ec94 <_malloc_r+0x28>
 801ec88:	230c      	movs	r3, #12
 801ec8a:	603b      	str	r3, [r7, #0]
 801ec8c:	2600      	movs	r6, #0
 801ec8e:	4630      	mov	r0, r6
 801ec90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec94:	4e2e      	ldr	r6, [pc, #184]	; (801ed50 <_malloc_r+0xe4>)
 801ec96:	f002 f83d 	bl	8020d14 <__malloc_lock>
 801ec9a:	6833      	ldr	r3, [r6, #0]
 801ec9c:	461c      	mov	r4, r3
 801ec9e:	bb34      	cbnz	r4, 801ecee <_malloc_r+0x82>
 801eca0:	4629      	mov	r1, r5
 801eca2:	4638      	mov	r0, r7
 801eca4:	f7ff ffc2 	bl	801ec2c <sbrk_aligned>
 801eca8:	1c43      	adds	r3, r0, #1
 801ecaa:	4604      	mov	r4, r0
 801ecac:	d14d      	bne.n	801ed4a <_malloc_r+0xde>
 801ecae:	6834      	ldr	r4, [r6, #0]
 801ecb0:	4626      	mov	r6, r4
 801ecb2:	2e00      	cmp	r6, #0
 801ecb4:	d140      	bne.n	801ed38 <_malloc_r+0xcc>
 801ecb6:	6823      	ldr	r3, [r4, #0]
 801ecb8:	4631      	mov	r1, r6
 801ecba:	4638      	mov	r0, r7
 801ecbc:	eb04 0803 	add.w	r8, r4, r3
 801ecc0:	f000 fe4e 	bl	801f960 <_sbrk_r>
 801ecc4:	4580      	cmp	r8, r0
 801ecc6:	d13a      	bne.n	801ed3e <_malloc_r+0xd2>
 801ecc8:	6821      	ldr	r1, [r4, #0]
 801ecca:	3503      	adds	r5, #3
 801eccc:	1a6d      	subs	r5, r5, r1
 801ecce:	f025 0503 	bic.w	r5, r5, #3
 801ecd2:	3508      	adds	r5, #8
 801ecd4:	2d0c      	cmp	r5, #12
 801ecd6:	bf38      	it	cc
 801ecd8:	250c      	movcc	r5, #12
 801ecda:	4629      	mov	r1, r5
 801ecdc:	4638      	mov	r0, r7
 801ecde:	f7ff ffa5 	bl	801ec2c <sbrk_aligned>
 801ece2:	3001      	adds	r0, #1
 801ece4:	d02b      	beq.n	801ed3e <_malloc_r+0xd2>
 801ece6:	6823      	ldr	r3, [r4, #0]
 801ece8:	442b      	add	r3, r5
 801ecea:	6023      	str	r3, [r4, #0]
 801ecec:	e00e      	b.n	801ed0c <_malloc_r+0xa0>
 801ecee:	6822      	ldr	r2, [r4, #0]
 801ecf0:	1b52      	subs	r2, r2, r5
 801ecf2:	d41e      	bmi.n	801ed32 <_malloc_r+0xc6>
 801ecf4:	2a0b      	cmp	r2, #11
 801ecf6:	d916      	bls.n	801ed26 <_malloc_r+0xba>
 801ecf8:	1961      	adds	r1, r4, r5
 801ecfa:	42a3      	cmp	r3, r4
 801ecfc:	6025      	str	r5, [r4, #0]
 801ecfe:	bf18      	it	ne
 801ed00:	6059      	strne	r1, [r3, #4]
 801ed02:	6863      	ldr	r3, [r4, #4]
 801ed04:	bf08      	it	eq
 801ed06:	6031      	streq	r1, [r6, #0]
 801ed08:	5162      	str	r2, [r4, r5]
 801ed0a:	604b      	str	r3, [r1, #4]
 801ed0c:	4638      	mov	r0, r7
 801ed0e:	f104 060b 	add.w	r6, r4, #11
 801ed12:	f002 f805 	bl	8020d20 <__malloc_unlock>
 801ed16:	f026 0607 	bic.w	r6, r6, #7
 801ed1a:	1d23      	adds	r3, r4, #4
 801ed1c:	1af2      	subs	r2, r6, r3
 801ed1e:	d0b6      	beq.n	801ec8e <_malloc_r+0x22>
 801ed20:	1b9b      	subs	r3, r3, r6
 801ed22:	50a3      	str	r3, [r4, r2]
 801ed24:	e7b3      	b.n	801ec8e <_malloc_r+0x22>
 801ed26:	6862      	ldr	r2, [r4, #4]
 801ed28:	42a3      	cmp	r3, r4
 801ed2a:	bf0c      	ite	eq
 801ed2c:	6032      	streq	r2, [r6, #0]
 801ed2e:	605a      	strne	r2, [r3, #4]
 801ed30:	e7ec      	b.n	801ed0c <_malloc_r+0xa0>
 801ed32:	4623      	mov	r3, r4
 801ed34:	6864      	ldr	r4, [r4, #4]
 801ed36:	e7b2      	b.n	801ec9e <_malloc_r+0x32>
 801ed38:	4634      	mov	r4, r6
 801ed3a:	6876      	ldr	r6, [r6, #4]
 801ed3c:	e7b9      	b.n	801ecb2 <_malloc_r+0x46>
 801ed3e:	230c      	movs	r3, #12
 801ed40:	603b      	str	r3, [r7, #0]
 801ed42:	4638      	mov	r0, r7
 801ed44:	f001 ffec 	bl	8020d20 <__malloc_unlock>
 801ed48:	e7a1      	b.n	801ec8e <_malloc_r+0x22>
 801ed4a:	6025      	str	r5, [r4, #0]
 801ed4c:	e7de      	b.n	801ed0c <_malloc_r+0xa0>
 801ed4e:	bf00      	nop
 801ed50:	20006f6c 	.word	0x20006f6c

0801ed54 <__sfputc_r>:
 801ed54:	6893      	ldr	r3, [r2, #8]
 801ed56:	3b01      	subs	r3, #1
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	b410      	push	{r4}
 801ed5c:	6093      	str	r3, [r2, #8]
 801ed5e:	da08      	bge.n	801ed72 <__sfputc_r+0x1e>
 801ed60:	6994      	ldr	r4, [r2, #24]
 801ed62:	42a3      	cmp	r3, r4
 801ed64:	db01      	blt.n	801ed6a <__sfputc_r+0x16>
 801ed66:	290a      	cmp	r1, #10
 801ed68:	d103      	bne.n	801ed72 <__sfputc_r+0x1e>
 801ed6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed6e:	f000 bf3b 	b.w	801fbe8 <__swbuf_r>
 801ed72:	6813      	ldr	r3, [r2, #0]
 801ed74:	1c58      	adds	r0, r3, #1
 801ed76:	6010      	str	r0, [r2, #0]
 801ed78:	7019      	strb	r1, [r3, #0]
 801ed7a:	4608      	mov	r0, r1
 801ed7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed80:	4770      	bx	lr

0801ed82 <__sfputs_r>:
 801ed82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed84:	4606      	mov	r6, r0
 801ed86:	460f      	mov	r7, r1
 801ed88:	4614      	mov	r4, r2
 801ed8a:	18d5      	adds	r5, r2, r3
 801ed8c:	42ac      	cmp	r4, r5
 801ed8e:	d101      	bne.n	801ed94 <__sfputs_r+0x12>
 801ed90:	2000      	movs	r0, #0
 801ed92:	e007      	b.n	801eda4 <__sfputs_r+0x22>
 801ed94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed98:	463a      	mov	r2, r7
 801ed9a:	4630      	mov	r0, r6
 801ed9c:	f7ff ffda 	bl	801ed54 <__sfputc_r>
 801eda0:	1c43      	adds	r3, r0, #1
 801eda2:	d1f3      	bne.n	801ed8c <__sfputs_r+0xa>
 801eda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eda8 <_vfiprintf_r>:
 801eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edac:	460d      	mov	r5, r1
 801edae:	b09d      	sub	sp, #116	; 0x74
 801edb0:	4614      	mov	r4, r2
 801edb2:	4698      	mov	r8, r3
 801edb4:	4606      	mov	r6, r0
 801edb6:	b118      	cbz	r0, 801edc0 <_vfiprintf_r+0x18>
 801edb8:	6983      	ldr	r3, [r0, #24]
 801edba:	b90b      	cbnz	r3, 801edc0 <_vfiprintf_r+0x18>
 801edbc:	f7ff fdec 	bl	801e998 <__sinit>
 801edc0:	4b89      	ldr	r3, [pc, #548]	; (801efe8 <_vfiprintf_r+0x240>)
 801edc2:	429d      	cmp	r5, r3
 801edc4:	d11b      	bne.n	801edfe <_vfiprintf_r+0x56>
 801edc6:	6875      	ldr	r5, [r6, #4]
 801edc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801edca:	07d9      	lsls	r1, r3, #31
 801edcc:	d405      	bmi.n	801edda <_vfiprintf_r+0x32>
 801edce:	89ab      	ldrh	r3, [r5, #12]
 801edd0:	059a      	lsls	r2, r3, #22
 801edd2:	d402      	bmi.n	801edda <_vfiprintf_r+0x32>
 801edd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801edd6:	f7ff feb4 	bl	801eb42 <__retarget_lock_acquire_recursive>
 801edda:	89ab      	ldrh	r3, [r5, #12]
 801eddc:	071b      	lsls	r3, r3, #28
 801edde:	d501      	bpl.n	801ede4 <_vfiprintf_r+0x3c>
 801ede0:	692b      	ldr	r3, [r5, #16]
 801ede2:	b9eb      	cbnz	r3, 801ee20 <_vfiprintf_r+0x78>
 801ede4:	4629      	mov	r1, r5
 801ede6:	4630      	mov	r0, r6
 801ede8:	f000 ff62 	bl	801fcb0 <__swsetup_r>
 801edec:	b1c0      	cbz	r0, 801ee20 <_vfiprintf_r+0x78>
 801edee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801edf0:	07dc      	lsls	r4, r3, #31
 801edf2:	d50e      	bpl.n	801ee12 <_vfiprintf_r+0x6a>
 801edf4:	f04f 30ff 	mov.w	r0, #4294967295
 801edf8:	b01d      	add	sp, #116	; 0x74
 801edfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edfe:	4b7b      	ldr	r3, [pc, #492]	; (801efec <_vfiprintf_r+0x244>)
 801ee00:	429d      	cmp	r5, r3
 801ee02:	d101      	bne.n	801ee08 <_vfiprintf_r+0x60>
 801ee04:	68b5      	ldr	r5, [r6, #8]
 801ee06:	e7df      	b.n	801edc8 <_vfiprintf_r+0x20>
 801ee08:	4b79      	ldr	r3, [pc, #484]	; (801eff0 <_vfiprintf_r+0x248>)
 801ee0a:	429d      	cmp	r5, r3
 801ee0c:	bf08      	it	eq
 801ee0e:	68f5      	ldreq	r5, [r6, #12]
 801ee10:	e7da      	b.n	801edc8 <_vfiprintf_r+0x20>
 801ee12:	89ab      	ldrh	r3, [r5, #12]
 801ee14:	0598      	lsls	r0, r3, #22
 801ee16:	d4ed      	bmi.n	801edf4 <_vfiprintf_r+0x4c>
 801ee18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ee1a:	f7ff fe94 	bl	801eb46 <__retarget_lock_release_recursive>
 801ee1e:	e7e9      	b.n	801edf4 <_vfiprintf_r+0x4c>
 801ee20:	2300      	movs	r3, #0
 801ee22:	9309      	str	r3, [sp, #36]	; 0x24
 801ee24:	2320      	movs	r3, #32
 801ee26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ee2a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee2e:	2330      	movs	r3, #48	; 0x30
 801ee30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801eff4 <_vfiprintf_r+0x24c>
 801ee34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ee38:	f04f 0901 	mov.w	r9, #1
 801ee3c:	4623      	mov	r3, r4
 801ee3e:	469a      	mov	sl, r3
 801ee40:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee44:	b10a      	cbz	r2, 801ee4a <_vfiprintf_r+0xa2>
 801ee46:	2a25      	cmp	r2, #37	; 0x25
 801ee48:	d1f9      	bne.n	801ee3e <_vfiprintf_r+0x96>
 801ee4a:	ebba 0b04 	subs.w	fp, sl, r4
 801ee4e:	d00b      	beq.n	801ee68 <_vfiprintf_r+0xc0>
 801ee50:	465b      	mov	r3, fp
 801ee52:	4622      	mov	r2, r4
 801ee54:	4629      	mov	r1, r5
 801ee56:	4630      	mov	r0, r6
 801ee58:	f7ff ff93 	bl	801ed82 <__sfputs_r>
 801ee5c:	3001      	adds	r0, #1
 801ee5e:	f000 80aa 	beq.w	801efb6 <_vfiprintf_r+0x20e>
 801ee62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee64:	445a      	add	r2, fp
 801ee66:	9209      	str	r2, [sp, #36]	; 0x24
 801ee68:	f89a 3000 	ldrb.w	r3, [sl]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	f000 80a2 	beq.w	801efb6 <_vfiprintf_r+0x20e>
 801ee72:	2300      	movs	r3, #0
 801ee74:	f04f 32ff 	mov.w	r2, #4294967295
 801ee78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee7c:	f10a 0a01 	add.w	sl, sl, #1
 801ee80:	9304      	str	r3, [sp, #16]
 801ee82:	9307      	str	r3, [sp, #28]
 801ee84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ee88:	931a      	str	r3, [sp, #104]	; 0x68
 801ee8a:	4654      	mov	r4, sl
 801ee8c:	2205      	movs	r2, #5
 801ee8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee92:	4858      	ldr	r0, [pc, #352]	; (801eff4 <_vfiprintf_r+0x24c>)
 801ee94:	f7e1 fa2c 	bl	80002f0 <memchr>
 801ee98:	9a04      	ldr	r2, [sp, #16]
 801ee9a:	b9d8      	cbnz	r0, 801eed4 <_vfiprintf_r+0x12c>
 801ee9c:	06d1      	lsls	r1, r2, #27
 801ee9e:	bf44      	itt	mi
 801eea0:	2320      	movmi	r3, #32
 801eea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eea6:	0713      	lsls	r3, r2, #28
 801eea8:	bf44      	itt	mi
 801eeaa:	232b      	movmi	r3, #43	; 0x2b
 801eeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eeb0:	f89a 3000 	ldrb.w	r3, [sl]
 801eeb4:	2b2a      	cmp	r3, #42	; 0x2a
 801eeb6:	d015      	beq.n	801eee4 <_vfiprintf_r+0x13c>
 801eeb8:	9a07      	ldr	r2, [sp, #28]
 801eeba:	4654      	mov	r4, sl
 801eebc:	2000      	movs	r0, #0
 801eebe:	f04f 0c0a 	mov.w	ip, #10
 801eec2:	4621      	mov	r1, r4
 801eec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eec8:	3b30      	subs	r3, #48	; 0x30
 801eeca:	2b09      	cmp	r3, #9
 801eecc:	d94e      	bls.n	801ef6c <_vfiprintf_r+0x1c4>
 801eece:	b1b0      	cbz	r0, 801eefe <_vfiprintf_r+0x156>
 801eed0:	9207      	str	r2, [sp, #28]
 801eed2:	e014      	b.n	801eefe <_vfiprintf_r+0x156>
 801eed4:	eba0 0308 	sub.w	r3, r0, r8
 801eed8:	fa09 f303 	lsl.w	r3, r9, r3
 801eedc:	4313      	orrs	r3, r2
 801eede:	9304      	str	r3, [sp, #16]
 801eee0:	46a2      	mov	sl, r4
 801eee2:	e7d2      	b.n	801ee8a <_vfiprintf_r+0xe2>
 801eee4:	9b03      	ldr	r3, [sp, #12]
 801eee6:	1d19      	adds	r1, r3, #4
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	9103      	str	r1, [sp, #12]
 801eeec:	2b00      	cmp	r3, #0
 801eeee:	bfbb      	ittet	lt
 801eef0:	425b      	neglt	r3, r3
 801eef2:	f042 0202 	orrlt.w	r2, r2, #2
 801eef6:	9307      	strge	r3, [sp, #28]
 801eef8:	9307      	strlt	r3, [sp, #28]
 801eefa:	bfb8      	it	lt
 801eefc:	9204      	strlt	r2, [sp, #16]
 801eefe:	7823      	ldrb	r3, [r4, #0]
 801ef00:	2b2e      	cmp	r3, #46	; 0x2e
 801ef02:	d10c      	bne.n	801ef1e <_vfiprintf_r+0x176>
 801ef04:	7863      	ldrb	r3, [r4, #1]
 801ef06:	2b2a      	cmp	r3, #42	; 0x2a
 801ef08:	d135      	bne.n	801ef76 <_vfiprintf_r+0x1ce>
 801ef0a:	9b03      	ldr	r3, [sp, #12]
 801ef0c:	1d1a      	adds	r2, r3, #4
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	9203      	str	r2, [sp, #12]
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	bfb8      	it	lt
 801ef16:	f04f 33ff 	movlt.w	r3, #4294967295
 801ef1a:	3402      	adds	r4, #2
 801ef1c:	9305      	str	r3, [sp, #20]
 801ef1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f004 <_vfiprintf_r+0x25c>
 801ef22:	7821      	ldrb	r1, [r4, #0]
 801ef24:	2203      	movs	r2, #3
 801ef26:	4650      	mov	r0, sl
 801ef28:	f7e1 f9e2 	bl	80002f0 <memchr>
 801ef2c:	b140      	cbz	r0, 801ef40 <_vfiprintf_r+0x198>
 801ef2e:	2340      	movs	r3, #64	; 0x40
 801ef30:	eba0 000a 	sub.w	r0, r0, sl
 801ef34:	fa03 f000 	lsl.w	r0, r3, r0
 801ef38:	9b04      	ldr	r3, [sp, #16]
 801ef3a:	4303      	orrs	r3, r0
 801ef3c:	3401      	adds	r4, #1
 801ef3e:	9304      	str	r3, [sp, #16]
 801ef40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef44:	482c      	ldr	r0, [pc, #176]	; (801eff8 <_vfiprintf_r+0x250>)
 801ef46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ef4a:	2206      	movs	r2, #6
 801ef4c:	f7e1 f9d0 	bl	80002f0 <memchr>
 801ef50:	2800      	cmp	r0, #0
 801ef52:	d03f      	beq.n	801efd4 <_vfiprintf_r+0x22c>
 801ef54:	4b29      	ldr	r3, [pc, #164]	; (801effc <_vfiprintf_r+0x254>)
 801ef56:	bb1b      	cbnz	r3, 801efa0 <_vfiprintf_r+0x1f8>
 801ef58:	9b03      	ldr	r3, [sp, #12]
 801ef5a:	3307      	adds	r3, #7
 801ef5c:	f023 0307 	bic.w	r3, r3, #7
 801ef60:	3308      	adds	r3, #8
 801ef62:	9303      	str	r3, [sp, #12]
 801ef64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef66:	443b      	add	r3, r7
 801ef68:	9309      	str	r3, [sp, #36]	; 0x24
 801ef6a:	e767      	b.n	801ee3c <_vfiprintf_r+0x94>
 801ef6c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef70:	460c      	mov	r4, r1
 801ef72:	2001      	movs	r0, #1
 801ef74:	e7a5      	b.n	801eec2 <_vfiprintf_r+0x11a>
 801ef76:	2300      	movs	r3, #0
 801ef78:	3401      	adds	r4, #1
 801ef7a:	9305      	str	r3, [sp, #20]
 801ef7c:	4619      	mov	r1, r3
 801ef7e:	f04f 0c0a 	mov.w	ip, #10
 801ef82:	4620      	mov	r0, r4
 801ef84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef88:	3a30      	subs	r2, #48	; 0x30
 801ef8a:	2a09      	cmp	r2, #9
 801ef8c:	d903      	bls.n	801ef96 <_vfiprintf_r+0x1ee>
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d0c5      	beq.n	801ef1e <_vfiprintf_r+0x176>
 801ef92:	9105      	str	r1, [sp, #20]
 801ef94:	e7c3      	b.n	801ef1e <_vfiprintf_r+0x176>
 801ef96:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef9a:	4604      	mov	r4, r0
 801ef9c:	2301      	movs	r3, #1
 801ef9e:	e7f0      	b.n	801ef82 <_vfiprintf_r+0x1da>
 801efa0:	ab03      	add	r3, sp, #12
 801efa2:	9300      	str	r3, [sp, #0]
 801efa4:	462a      	mov	r2, r5
 801efa6:	4b16      	ldr	r3, [pc, #88]	; (801f000 <_vfiprintf_r+0x258>)
 801efa8:	a904      	add	r1, sp, #16
 801efaa:	4630      	mov	r0, r6
 801efac:	f000 f8bc 	bl	801f128 <_printf_float>
 801efb0:	4607      	mov	r7, r0
 801efb2:	1c78      	adds	r0, r7, #1
 801efb4:	d1d6      	bne.n	801ef64 <_vfiprintf_r+0x1bc>
 801efb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801efb8:	07d9      	lsls	r1, r3, #31
 801efba:	d405      	bmi.n	801efc8 <_vfiprintf_r+0x220>
 801efbc:	89ab      	ldrh	r3, [r5, #12]
 801efbe:	059a      	lsls	r2, r3, #22
 801efc0:	d402      	bmi.n	801efc8 <_vfiprintf_r+0x220>
 801efc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801efc4:	f7ff fdbf 	bl	801eb46 <__retarget_lock_release_recursive>
 801efc8:	89ab      	ldrh	r3, [r5, #12]
 801efca:	065b      	lsls	r3, r3, #25
 801efcc:	f53f af12 	bmi.w	801edf4 <_vfiprintf_r+0x4c>
 801efd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801efd2:	e711      	b.n	801edf8 <_vfiprintf_r+0x50>
 801efd4:	ab03      	add	r3, sp, #12
 801efd6:	9300      	str	r3, [sp, #0]
 801efd8:	462a      	mov	r2, r5
 801efda:	4b09      	ldr	r3, [pc, #36]	; (801f000 <_vfiprintf_r+0x258>)
 801efdc:	a904      	add	r1, sp, #16
 801efde:	4630      	mov	r0, r6
 801efe0:	f000 fb2e 	bl	801f640 <_printf_i>
 801efe4:	e7e4      	b.n	801efb0 <_vfiprintf_r+0x208>
 801efe6:	bf00      	nop
 801efe8:	08023ed0 	.word	0x08023ed0
 801efec:	08023ef0 	.word	0x08023ef0
 801eff0:	08023eb0 	.word	0x08023eb0
 801eff4:	08023f14 	.word	0x08023f14
 801eff8:	08023f1e 	.word	0x08023f1e
 801effc:	0801f129 	.word	0x0801f129
 801f000:	0801ed83 	.word	0x0801ed83
 801f004:	08023f1a 	.word	0x08023f1a

0801f008 <__cvt>:
 801f008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f00a:	ed2d 8b02 	vpush	{d8}
 801f00e:	eeb0 8b40 	vmov.f64	d8, d0
 801f012:	b085      	sub	sp, #20
 801f014:	4617      	mov	r7, r2
 801f016:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f018:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f01a:	ee18 2a90 	vmov	r2, s17
 801f01e:	f025 0520 	bic.w	r5, r5, #32
 801f022:	2a00      	cmp	r2, #0
 801f024:	bfb6      	itet	lt
 801f026:	222d      	movlt	r2, #45	; 0x2d
 801f028:	2200      	movge	r2, #0
 801f02a:	eeb1 8b40 	vneglt.f64	d8, d0
 801f02e:	2d46      	cmp	r5, #70	; 0x46
 801f030:	460c      	mov	r4, r1
 801f032:	701a      	strb	r2, [r3, #0]
 801f034:	d004      	beq.n	801f040 <__cvt+0x38>
 801f036:	2d45      	cmp	r5, #69	; 0x45
 801f038:	d100      	bne.n	801f03c <__cvt+0x34>
 801f03a:	3401      	adds	r4, #1
 801f03c:	2102      	movs	r1, #2
 801f03e:	e000      	b.n	801f042 <__cvt+0x3a>
 801f040:	2103      	movs	r1, #3
 801f042:	ab03      	add	r3, sp, #12
 801f044:	9301      	str	r3, [sp, #4]
 801f046:	ab02      	add	r3, sp, #8
 801f048:	9300      	str	r3, [sp, #0]
 801f04a:	4622      	mov	r2, r4
 801f04c:	4633      	mov	r3, r6
 801f04e:	eeb0 0b48 	vmov.f64	d0, d8
 801f052:	f000 ff99 	bl	801ff88 <_dtoa_r>
 801f056:	2d47      	cmp	r5, #71	; 0x47
 801f058:	d101      	bne.n	801f05e <__cvt+0x56>
 801f05a:	07fb      	lsls	r3, r7, #31
 801f05c:	d51a      	bpl.n	801f094 <__cvt+0x8c>
 801f05e:	2d46      	cmp	r5, #70	; 0x46
 801f060:	eb00 0204 	add.w	r2, r0, r4
 801f064:	d10c      	bne.n	801f080 <__cvt+0x78>
 801f066:	7803      	ldrb	r3, [r0, #0]
 801f068:	2b30      	cmp	r3, #48	; 0x30
 801f06a:	d107      	bne.n	801f07c <__cvt+0x74>
 801f06c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f074:	bf1c      	itt	ne
 801f076:	f1c4 0401 	rsbne	r4, r4, #1
 801f07a:	6034      	strne	r4, [r6, #0]
 801f07c:	6833      	ldr	r3, [r6, #0]
 801f07e:	441a      	add	r2, r3
 801f080:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f088:	bf08      	it	eq
 801f08a:	9203      	streq	r2, [sp, #12]
 801f08c:	2130      	movs	r1, #48	; 0x30
 801f08e:	9b03      	ldr	r3, [sp, #12]
 801f090:	4293      	cmp	r3, r2
 801f092:	d307      	bcc.n	801f0a4 <__cvt+0x9c>
 801f094:	9b03      	ldr	r3, [sp, #12]
 801f096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f098:	1a1b      	subs	r3, r3, r0
 801f09a:	6013      	str	r3, [r2, #0]
 801f09c:	b005      	add	sp, #20
 801f09e:	ecbd 8b02 	vpop	{d8}
 801f0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0a4:	1c5c      	adds	r4, r3, #1
 801f0a6:	9403      	str	r4, [sp, #12]
 801f0a8:	7019      	strb	r1, [r3, #0]
 801f0aa:	e7f0      	b.n	801f08e <__cvt+0x86>

0801f0ac <__exponent>:
 801f0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f0ae:	4603      	mov	r3, r0
 801f0b0:	2900      	cmp	r1, #0
 801f0b2:	bfb8      	it	lt
 801f0b4:	4249      	neglt	r1, r1
 801f0b6:	f803 2b02 	strb.w	r2, [r3], #2
 801f0ba:	bfb4      	ite	lt
 801f0bc:	222d      	movlt	r2, #45	; 0x2d
 801f0be:	222b      	movge	r2, #43	; 0x2b
 801f0c0:	2909      	cmp	r1, #9
 801f0c2:	7042      	strb	r2, [r0, #1]
 801f0c4:	dd2a      	ble.n	801f11c <__exponent+0x70>
 801f0c6:	f10d 0407 	add.w	r4, sp, #7
 801f0ca:	46a4      	mov	ip, r4
 801f0cc:	270a      	movs	r7, #10
 801f0ce:	46a6      	mov	lr, r4
 801f0d0:	460a      	mov	r2, r1
 801f0d2:	fb91 f6f7 	sdiv	r6, r1, r7
 801f0d6:	fb07 1516 	mls	r5, r7, r6, r1
 801f0da:	3530      	adds	r5, #48	; 0x30
 801f0dc:	2a63      	cmp	r2, #99	; 0x63
 801f0de:	f104 34ff 	add.w	r4, r4, #4294967295
 801f0e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f0e6:	4631      	mov	r1, r6
 801f0e8:	dcf1      	bgt.n	801f0ce <__exponent+0x22>
 801f0ea:	3130      	adds	r1, #48	; 0x30
 801f0ec:	f1ae 0502 	sub.w	r5, lr, #2
 801f0f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f0f4:	1c44      	adds	r4, r0, #1
 801f0f6:	4629      	mov	r1, r5
 801f0f8:	4561      	cmp	r1, ip
 801f0fa:	d30a      	bcc.n	801f112 <__exponent+0x66>
 801f0fc:	f10d 0209 	add.w	r2, sp, #9
 801f100:	eba2 020e 	sub.w	r2, r2, lr
 801f104:	4565      	cmp	r5, ip
 801f106:	bf88      	it	hi
 801f108:	2200      	movhi	r2, #0
 801f10a:	4413      	add	r3, r2
 801f10c:	1a18      	subs	r0, r3, r0
 801f10e:	b003      	add	sp, #12
 801f110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f112:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f116:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f11a:	e7ed      	b.n	801f0f8 <__exponent+0x4c>
 801f11c:	2330      	movs	r3, #48	; 0x30
 801f11e:	3130      	adds	r1, #48	; 0x30
 801f120:	7083      	strb	r3, [r0, #2]
 801f122:	70c1      	strb	r1, [r0, #3]
 801f124:	1d03      	adds	r3, r0, #4
 801f126:	e7f1      	b.n	801f10c <__exponent+0x60>

0801f128 <_printf_float>:
 801f128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f12c:	b08b      	sub	sp, #44	; 0x2c
 801f12e:	460c      	mov	r4, r1
 801f130:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801f134:	4616      	mov	r6, r2
 801f136:	461f      	mov	r7, r3
 801f138:	4605      	mov	r5, r0
 801f13a:	f001 fd55 	bl	8020be8 <_localeconv_r>
 801f13e:	f8d0 b000 	ldr.w	fp, [r0]
 801f142:	4658      	mov	r0, fp
 801f144:	f7e1 f8cc 	bl	80002e0 <strlen>
 801f148:	2300      	movs	r3, #0
 801f14a:	9308      	str	r3, [sp, #32]
 801f14c:	f8d8 3000 	ldr.w	r3, [r8]
 801f150:	f894 9018 	ldrb.w	r9, [r4, #24]
 801f154:	6822      	ldr	r2, [r4, #0]
 801f156:	3307      	adds	r3, #7
 801f158:	f023 0307 	bic.w	r3, r3, #7
 801f15c:	f103 0108 	add.w	r1, r3, #8
 801f160:	f8c8 1000 	str.w	r1, [r8]
 801f164:	4682      	mov	sl, r0
 801f166:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f16a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801f16e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801f3d0 <_printf_float+0x2a8>
 801f172:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801f176:	eeb0 6bc0 	vabs.f64	d6, d0
 801f17a:	eeb4 6b47 	vcmp.f64	d6, d7
 801f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f182:	dd24      	ble.n	801f1ce <_printf_float+0xa6>
 801f184:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f18c:	d502      	bpl.n	801f194 <_printf_float+0x6c>
 801f18e:	232d      	movs	r3, #45	; 0x2d
 801f190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f194:	4b90      	ldr	r3, [pc, #576]	; (801f3d8 <_printf_float+0x2b0>)
 801f196:	4891      	ldr	r0, [pc, #580]	; (801f3dc <_printf_float+0x2b4>)
 801f198:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801f19c:	bf94      	ite	ls
 801f19e:	4698      	movls	r8, r3
 801f1a0:	4680      	movhi	r8, r0
 801f1a2:	2303      	movs	r3, #3
 801f1a4:	6123      	str	r3, [r4, #16]
 801f1a6:	f022 0204 	bic.w	r2, r2, #4
 801f1aa:	2300      	movs	r3, #0
 801f1ac:	6022      	str	r2, [r4, #0]
 801f1ae:	9304      	str	r3, [sp, #16]
 801f1b0:	9700      	str	r7, [sp, #0]
 801f1b2:	4633      	mov	r3, r6
 801f1b4:	aa09      	add	r2, sp, #36	; 0x24
 801f1b6:	4621      	mov	r1, r4
 801f1b8:	4628      	mov	r0, r5
 801f1ba:	f000 f9d3 	bl	801f564 <_printf_common>
 801f1be:	3001      	adds	r0, #1
 801f1c0:	f040 808a 	bne.w	801f2d8 <_printf_float+0x1b0>
 801f1c4:	f04f 30ff 	mov.w	r0, #4294967295
 801f1c8:	b00b      	add	sp, #44	; 0x2c
 801f1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ce:	eeb4 0b40 	vcmp.f64	d0, d0
 801f1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1d6:	d709      	bvc.n	801f1ec <_printf_float+0xc4>
 801f1d8:	ee10 3a90 	vmov	r3, s1
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	bfbc      	itt	lt
 801f1e0:	232d      	movlt	r3, #45	; 0x2d
 801f1e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f1e6:	487e      	ldr	r0, [pc, #504]	; (801f3e0 <_printf_float+0x2b8>)
 801f1e8:	4b7e      	ldr	r3, [pc, #504]	; (801f3e4 <_printf_float+0x2bc>)
 801f1ea:	e7d5      	b.n	801f198 <_printf_float+0x70>
 801f1ec:	6863      	ldr	r3, [r4, #4]
 801f1ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801f1f2:	9104      	str	r1, [sp, #16]
 801f1f4:	1c59      	adds	r1, r3, #1
 801f1f6:	d13c      	bne.n	801f272 <_printf_float+0x14a>
 801f1f8:	2306      	movs	r3, #6
 801f1fa:	6063      	str	r3, [r4, #4]
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	9303      	str	r3, [sp, #12]
 801f200:	ab08      	add	r3, sp, #32
 801f202:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801f206:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f20a:	ab07      	add	r3, sp, #28
 801f20c:	6861      	ldr	r1, [r4, #4]
 801f20e:	9300      	str	r3, [sp, #0]
 801f210:	6022      	str	r2, [r4, #0]
 801f212:	f10d 031b 	add.w	r3, sp, #27
 801f216:	4628      	mov	r0, r5
 801f218:	f7ff fef6 	bl	801f008 <__cvt>
 801f21c:	9b04      	ldr	r3, [sp, #16]
 801f21e:	9907      	ldr	r1, [sp, #28]
 801f220:	2b47      	cmp	r3, #71	; 0x47
 801f222:	4680      	mov	r8, r0
 801f224:	d108      	bne.n	801f238 <_printf_float+0x110>
 801f226:	1cc8      	adds	r0, r1, #3
 801f228:	db02      	blt.n	801f230 <_printf_float+0x108>
 801f22a:	6863      	ldr	r3, [r4, #4]
 801f22c:	4299      	cmp	r1, r3
 801f22e:	dd41      	ble.n	801f2b4 <_printf_float+0x18c>
 801f230:	f1a9 0902 	sub.w	r9, r9, #2
 801f234:	fa5f f989 	uxtb.w	r9, r9
 801f238:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f23c:	d820      	bhi.n	801f280 <_printf_float+0x158>
 801f23e:	3901      	subs	r1, #1
 801f240:	464a      	mov	r2, r9
 801f242:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f246:	9107      	str	r1, [sp, #28]
 801f248:	f7ff ff30 	bl	801f0ac <__exponent>
 801f24c:	9a08      	ldr	r2, [sp, #32]
 801f24e:	9004      	str	r0, [sp, #16]
 801f250:	1813      	adds	r3, r2, r0
 801f252:	2a01      	cmp	r2, #1
 801f254:	6123      	str	r3, [r4, #16]
 801f256:	dc02      	bgt.n	801f25e <_printf_float+0x136>
 801f258:	6822      	ldr	r2, [r4, #0]
 801f25a:	07d2      	lsls	r2, r2, #31
 801f25c:	d501      	bpl.n	801f262 <_printf_float+0x13a>
 801f25e:	3301      	adds	r3, #1
 801f260:	6123      	str	r3, [r4, #16]
 801f262:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801f266:	2b00      	cmp	r3, #0
 801f268:	d0a2      	beq.n	801f1b0 <_printf_float+0x88>
 801f26a:	232d      	movs	r3, #45	; 0x2d
 801f26c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f270:	e79e      	b.n	801f1b0 <_printf_float+0x88>
 801f272:	9904      	ldr	r1, [sp, #16]
 801f274:	2947      	cmp	r1, #71	; 0x47
 801f276:	d1c1      	bne.n	801f1fc <_printf_float+0xd4>
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d1bf      	bne.n	801f1fc <_printf_float+0xd4>
 801f27c:	2301      	movs	r3, #1
 801f27e:	e7bc      	b.n	801f1fa <_printf_float+0xd2>
 801f280:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801f284:	d118      	bne.n	801f2b8 <_printf_float+0x190>
 801f286:	2900      	cmp	r1, #0
 801f288:	6863      	ldr	r3, [r4, #4]
 801f28a:	dd0b      	ble.n	801f2a4 <_printf_float+0x17c>
 801f28c:	6121      	str	r1, [r4, #16]
 801f28e:	b913      	cbnz	r3, 801f296 <_printf_float+0x16e>
 801f290:	6822      	ldr	r2, [r4, #0]
 801f292:	07d0      	lsls	r0, r2, #31
 801f294:	d502      	bpl.n	801f29c <_printf_float+0x174>
 801f296:	3301      	adds	r3, #1
 801f298:	440b      	add	r3, r1
 801f29a:	6123      	str	r3, [r4, #16]
 801f29c:	2300      	movs	r3, #0
 801f29e:	65a1      	str	r1, [r4, #88]	; 0x58
 801f2a0:	9304      	str	r3, [sp, #16]
 801f2a2:	e7de      	b.n	801f262 <_printf_float+0x13a>
 801f2a4:	b913      	cbnz	r3, 801f2ac <_printf_float+0x184>
 801f2a6:	6822      	ldr	r2, [r4, #0]
 801f2a8:	07d2      	lsls	r2, r2, #31
 801f2aa:	d501      	bpl.n	801f2b0 <_printf_float+0x188>
 801f2ac:	3302      	adds	r3, #2
 801f2ae:	e7f4      	b.n	801f29a <_printf_float+0x172>
 801f2b0:	2301      	movs	r3, #1
 801f2b2:	e7f2      	b.n	801f29a <_printf_float+0x172>
 801f2b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 801f2b8:	9b08      	ldr	r3, [sp, #32]
 801f2ba:	4299      	cmp	r1, r3
 801f2bc:	db05      	blt.n	801f2ca <_printf_float+0x1a2>
 801f2be:	6823      	ldr	r3, [r4, #0]
 801f2c0:	6121      	str	r1, [r4, #16]
 801f2c2:	07d8      	lsls	r0, r3, #31
 801f2c4:	d5ea      	bpl.n	801f29c <_printf_float+0x174>
 801f2c6:	1c4b      	adds	r3, r1, #1
 801f2c8:	e7e7      	b.n	801f29a <_printf_float+0x172>
 801f2ca:	2900      	cmp	r1, #0
 801f2cc:	bfd4      	ite	le
 801f2ce:	f1c1 0202 	rsble	r2, r1, #2
 801f2d2:	2201      	movgt	r2, #1
 801f2d4:	4413      	add	r3, r2
 801f2d6:	e7e0      	b.n	801f29a <_printf_float+0x172>
 801f2d8:	6823      	ldr	r3, [r4, #0]
 801f2da:	055a      	lsls	r2, r3, #21
 801f2dc:	d407      	bmi.n	801f2ee <_printf_float+0x1c6>
 801f2de:	6923      	ldr	r3, [r4, #16]
 801f2e0:	4642      	mov	r2, r8
 801f2e2:	4631      	mov	r1, r6
 801f2e4:	4628      	mov	r0, r5
 801f2e6:	47b8      	blx	r7
 801f2e8:	3001      	adds	r0, #1
 801f2ea:	d12a      	bne.n	801f342 <_printf_float+0x21a>
 801f2ec:	e76a      	b.n	801f1c4 <_printf_float+0x9c>
 801f2ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f2f2:	f240 80e2 	bls.w	801f4ba <_printf_float+0x392>
 801f2f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f2fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f302:	d133      	bne.n	801f36c <_printf_float+0x244>
 801f304:	4a38      	ldr	r2, [pc, #224]	; (801f3e8 <_printf_float+0x2c0>)
 801f306:	2301      	movs	r3, #1
 801f308:	4631      	mov	r1, r6
 801f30a:	4628      	mov	r0, r5
 801f30c:	47b8      	blx	r7
 801f30e:	3001      	adds	r0, #1
 801f310:	f43f af58 	beq.w	801f1c4 <_printf_float+0x9c>
 801f314:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f318:	429a      	cmp	r2, r3
 801f31a:	db02      	blt.n	801f322 <_printf_float+0x1fa>
 801f31c:	6823      	ldr	r3, [r4, #0]
 801f31e:	07d8      	lsls	r0, r3, #31
 801f320:	d50f      	bpl.n	801f342 <_printf_float+0x21a>
 801f322:	4653      	mov	r3, sl
 801f324:	465a      	mov	r2, fp
 801f326:	4631      	mov	r1, r6
 801f328:	4628      	mov	r0, r5
 801f32a:	47b8      	blx	r7
 801f32c:	3001      	adds	r0, #1
 801f32e:	f43f af49 	beq.w	801f1c4 <_printf_float+0x9c>
 801f332:	f04f 0800 	mov.w	r8, #0
 801f336:	f104 091a 	add.w	r9, r4, #26
 801f33a:	9b08      	ldr	r3, [sp, #32]
 801f33c:	3b01      	subs	r3, #1
 801f33e:	4543      	cmp	r3, r8
 801f340:	dc09      	bgt.n	801f356 <_printf_float+0x22e>
 801f342:	6823      	ldr	r3, [r4, #0]
 801f344:	079b      	lsls	r3, r3, #30
 801f346:	f100 8108 	bmi.w	801f55a <_printf_float+0x432>
 801f34a:	68e0      	ldr	r0, [r4, #12]
 801f34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f34e:	4298      	cmp	r0, r3
 801f350:	bfb8      	it	lt
 801f352:	4618      	movlt	r0, r3
 801f354:	e738      	b.n	801f1c8 <_printf_float+0xa0>
 801f356:	2301      	movs	r3, #1
 801f358:	464a      	mov	r2, r9
 801f35a:	4631      	mov	r1, r6
 801f35c:	4628      	mov	r0, r5
 801f35e:	47b8      	blx	r7
 801f360:	3001      	adds	r0, #1
 801f362:	f43f af2f 	beq.w	801f1c4 <_printf_float+0x9c>
 801f366:	f108 0801 	add.w	r8, r8, #1
 801f36a:	e7e6      	b.n	801f33a <_printf_float+0x212>
 801f36c:	9b07      	ldr	r3, [sp, #28]
 801f36e:	2b00      	cmp	r3, #0
 801f370:	dc3c      	bgt.n	801f3ec <_printf_float+0x2c4>
 801f372:	4a1d      	ldr	r2, [pc, #116]	; (801f3e8 <_printf_float+0x2c0>)
 801f374:	2301      	movs	r3, #1
 801f376:	4631      	mov	r1, r6
 801f378:	4628      	mov	r0, r5
 801f37a:	47b8      	blx	r7
 801f37c:	3001      	adds	r0, #1
 801f37e:	f43f af21 	beq.w	801f1c4 <_printf_float+0x9c>
 801f382:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f386:	4313      	orrs	r3, r2
 801f388:	d102      	bne.n	801f390 <_printf_float+0x268>
 801f38a:	6823      	ldr	r3, [r4, #0]
 801f38c:	07d9      	lsls	r1, r3, #31
 801f38e:	d5d8      	bpl.n	801f342 <_printf_float+0x21a>
 801f390:	4653      	mov	r3, sl
 801f392:	465a      	mov	r2, fp
 801f394:	4631      	mov	r1, r6
 801f396:	4628      	mov	r0, r5
 801f398:	47b8      	blx	r7
 801f39a:	3001      	adds	r0, #1
 801f39c:	f43f af12 	beq.w	801f1c4 <_printf_float+0x9c>
 801f3a0:	f04f 0900 	mov.w	r9, #0
 801f3a4:	f104 0a1a 	add.w	sl, r4, #26
 801f3a8:	9b07      	ldr	r3, [sp, #28]
 801f3aa:	425b      	negs	r3, r3
 801f3ac:	454b      	cmp	r3, r9
 801f3ae:	dc01      	bgt.n	801f3b4 <_printf_float+0x28c>
 801f3b0:	9b08      	ldr	r3, [sp, #32]
 801f3b2:	e795      	b.n	801f2e0 <_printf_float+0x1b8>
 801f3b4:	2301      	movs	r3, #1
 801f3b6:	4652      	mov	r2, sl
 801f3b8:	4631      	mov	r1, r6
 801f3ba:	4628      	mov	r0, r5
 801f3bc:	47b8      	blx	r7
 801f3be:	3001      	adds	r0, #1
 801f3c0:	f43f af00 	beq.w	801f1c4 <_printf_float+0x9c>
 801f3c4:	f109 0901 	add.w	r9, r9, #1
 801f3c8:	e7ee      	b.n	801f3a8 <_printf_float+0x280>
 801f3ca:	bf00      	nop
 801f3cc:	f3af 8000 	nop.w
 801f3d0:	ffffffff 	.word	0xffffffff
 801f3d4:	7fefffff 	.word	0x7fefffff
 801f3d8:	08023f25 	.word	0x08023f25
 801f3dc:	08023f29 	.word	0x08023f29
 801f3e0:	08023f31 	.word	0x08023f31
 801f3e4:	08023f2d 	.word	0x08023f2d
 801f3e8:	0802360a 	.word	0x0802360a
 801f3ec:	9a08      	ldr	r2, [sp, #32]
 801f3ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f3f0:	429a      	cmp	r2, r3
 801f3f2:	bfa8      	it	ge
 801f3f4:	461a      	movge	r2, r3
 801f3f6:	2a00      	cmp	r2, #0
 801f3f8:	4691      	mov	r9, r2
 801f3fa:	dc38      	bgt.n	801f46e <_printf_float+0x346>
 801f3fc:	2300      	movs	r3, #0
 801f3fe:	9305      	str	r3, [sp, #20]
 801f400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f404:	f104 021a 	add.w	r2, r4, #26
 801f408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f40a:	9905      	ldr	r1, [sp, #20]
 801f40c:	9304      	str	r3, [sp, #16]
 801f40e:	eba3 0309 	sub.w	r3, r3, r9
 801f412:	428b      	cmp	r3, r1
 801f414:	dc33      	bgt.n	801f47e <_printf_float+0x356>
 801f416:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f41a:	429a      	cmp	r2, r3
 801f41c:	db3c      	blt.n	801f498 <_printf_float+0x370>
 801f41e:	6823      	ldr	r3, [r4, #0]
 801f420:	07da      	lsls	r2, r3, #31
 801f422:	d439      	bmi.n	801f498 <_printf_float+0x370>
 801f424:	9b08      	ldr	r3, [sp, #32]
 801f426:	9a04      	ldr	r2, [sp, #16]
 801f428:	9907      	ldr	r1, [sp, #28]
 801f42a:	1a9a      	subs	r2, r3, r2
 801f42c:	eba3 0901 	sub.w	r9, r3, r1
 801f430:	4591      	cmp	r9, r2
 801f432:	bfa8      	it	ge
 801f434:	4691      	movge	r9, r2
 801f436:	f1b9 0f00 	cmp.w	r9, #0
 801f43a:	dc35      	bgt.n	801f4a8 <_printf_float+0x380>
 801f43c:	f04f 0800 	mov.w	r8, #0
 801f440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f444:	f104 0a1a 	add.w	sl, r4, #26
 801f448:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f44c:	1a9b      	subs	r3, r3, r2
 801f44e:	eba3 0309 	sub.w	r3, r3, r9
 801f452:	4543      	cmp	r3, r8
 801f454:	f77f af75 	ble.w	801f342 <_printf_float+0x21a>
 801f458:	2301      	movs	r3, #1
 801f45a:	4652      	mov	r2, sl
 801f45c:	4631      	mov	r1, r6
 801f45e:	4628      	mov	r0, r5
 801f460:	47b8      	blx	r7
 801f462:	3001      	adds	r0, #1
 801f464:	f43f aeae 	beq.w	801f1c4 <_printf_float+0x9c>
 801f468:	f108 0801 	add.w	r8, r8, #1
 801f46c:	e7ec      	b.n	801f448 <_printf_float+0x320>
 801f46e:	4613      	mov	r3, r2
 801f470:	4631      	mov	r1, r6
 801f472:	4642      	mov	r2, r8
 801f474:	4628      	mov	r0, r5
 801f476:	47b8      	blx	r7
 801f478:	3001      	adds	r0, #1
 801f47a:	d1bf      	bne.n	801f3fc <_printf_float+0x2d4>
 801f47c:	e6a2      	b.n	801f1c4 <_printf_float+0x9c>
 801f47e:	2301      	movs	r3, #1
 801f480:	4631      	mov	r1, r6
 801f482:	4628      	mov	r0, r5
 801f484:	9204      	str	r2, [sp, #16]
 801f486:	47b8      	blx	r7
 801f488:	3001      	adds	r0, #1
 801f48a:	f43f ae9b 	beq.w	801f1c4 <_printf_float+0x9c>
 801f48e:	9b05      	ldr	r3, [sp, #20]
 801f490:	9a04      	ldr	r2, [sp, #16]
 801f492:	3301      	adds	r3, #1
 801f494:	9305      	str	r3, [sp, #20]
 801f496:	e7b7      	b.n	801f408 <_printf_float+0x2e0>
 801f498:	4653      	mov	r3, sl
 801f49a:	465a      	mov	r2, fp
 801f49c:	4631      	mov	r1, r6
 801f49e:	4628      	mov	r0, r5
 801f4a0:	47b8      	blx	r7
 801f4a2:	3001      	adds	r0, #1
 801f4a4:	d1be      	bne.n	801f424 <_printf_float+0x2fc>
 801f4a6:	e68d      	b.n	801f1c4 <_printf_float+0x9c>
 801f4a8:	9a04      	ldr	r2, [sp, #16]
 801f4aa:	464b      	mov	r3, r9
 801f4ac:	4442      	add	r2, r8
 801f4ae:	4631      	mov	r1, r6
 801f4b0:	4628      	mov	r0, r5
 801f4b2:	47b8      	blx	r7
 801f4b4:	3001      	adds	r0, #1
 801f4b6:	d1c1      	bne.n	801f43c <_printf_float+0x314>
 801f4b8:	e684      	b.n	801f1c4 <_printf_float+0x9c>
 801f4ba:	9a08      	ldr	r2, [sp, #32]
 801f4bc:	2a01      	cmp	r2, #1
 801f4be:	dc01      	bgt.n	801f4c4 <_printf_float+0x39c>
 801f4c0:	07db      	lsls	r3, r3, #31
 801f4c2:	d537      	bpl.n	801f534 <_printf_float+0x40c>
 801f4c4:	2301      	movs	r3, #1
 801f4c6:	4642      	mov	r2, r8
 801f4c8:	4631      	mov	r1, r6
 801f4ca:	4628      	mov	r0, r5
 801f4cc:	47b8      	blx	r7
 801f4ce:	3001      	adds	r0, #1
 801f4d0:	f43f ae78 	beq.w	801f1c4 <_printf_float+0x9c>
 801f4d4:	4653      	mov	r3, sl
 801f4d6:	465a      	mov	r2, fp
 801f4d8:	4631      	mov	r1, r6
 801f4da:	4628      	mov	r0, r5
 801f4dc:	47b8      	blx	r7
 801f4de:	3001      	adds	r0, #1
 801f4e0:	f43f ae70 	beq.w	801f1c4 <_printf_float+0x9c>
 801f4e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f4e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4f0:	d01b      	beq.n	801f52a <_printf_float+0x402>
 801f4f2:	9b08      	ldr	r3, [sp, #32]
 801f4f4:	f108 0201 	add.w	r2, r8, #1
 801f4f8:	3b01      	subs	r3, #1
 801f4fa:	4631      	mov	r1, r6
 801f4fc:	4628      	mov	r0, r5
 801f4fe:	47b8      	blx	r7
 801f500:	3001      	adds	r0, #1
 801f502:	d10e      	bne.n	801f522 <_printf_float+0x3fa>
 801f504:	e65e      	b.n	801f1c4 <_printf_float+0x9c>
 801f506:	2301      	movs	r3, #1
 801f508:	464a      	mov	r2, r9
 801f50a:	4631      	mov	r1, r6
 801f50c:	4628      	mov	r0, r5
 801f50e:	47b8      	blx	r7
 801f510:	3001      	adds	r0, #1
 801f512:	f43f ae57 	beq.w	801f1c4 <_printf_float+0x9c>
 801f516:	f108 0801 	add.w	r8, r8, #1
 801f51a:	9b08      	ldr	r3, [sp, #32]
 801f51c:	3b01      	subs	r3, #1
 801f51e:	4543      	cmp	r3, r8
 801f520:	dcf1      	bgt.n	801f506 <_printf_float+0x3de>
 801f522:	9b04      	ldr	r3, [sp, #16]
 801f524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f528:	e6db      	b.n	801f2e2 <_printf_float+0x1ba>
 801f52a:	f04f 0800 	mov.w	r8, #0
 801f52e:	f104 091a 	add.w	r9, r4, #26
 801f532:	e7f2      	b.n	801f51a <_printf_float+0x3f2>
 801f534:	2301      	movs	r3, #1
 801f536:	4642      	mov	r2, r8
 801f538:	e7df      	b.n	801f4fa <_printf_float+0x3d2>
 801f53a:	2301      	movs	r3, #1
 801f53c:	464a      	mov	r2, r9
 801f53e:	4631      	mov	r1, r6
 801f540:	4628      	mov	r0, r5
 801f542:	47b8      	blx	r7
 801f544:	3001      	adds	r0, #1
 801f546:	f43f ae3d 	beq.w	801f1c4 <_printf_float+0x9c>
 801f54a:	f108 0801 	add.w	r8, r8, #1
 801f54e:	68e3      	ldr	r3, [r4, #12]
 801f550:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f552:	1a5b      	subs	r3, r3, r1
 801f554:	4543      	cmp	r3, r8
 801f556:	dcf0      	bgt.n	801f53a <_printf_float+0x412>
 801f558:	e6f7      	b.n	801f34a <_printf_float+0x222>
 801f55a:	f04f 0800 	mov.w	r8, #0
 801f55e:	f104 0919 	add.w	r9, r4, #25
 801f562:	e7f4      	b.n	801f54e <_printf_float+0x426>

0801f564 <_printf_common>:
 801f564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f568:	4616      	mov	r6, r2
 801f56a:	4699      	mov	r9, r3
 801f56c:	688a      	ldr	r2, [r1, #8]
 801f56e:	690b      	ldr	r3, [r1, #16]
 801f570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f574:	4293      	cmp	r3, r2
 801f576:	bfb8      	it	lt
 801f578:	4613      	movlt	r3, r2
 801f57a:	6033      	str	r3, [r6, #0]
 801f57c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f580:	4607      	mov	r7, r0
 801f582:	460c      	mov	r4, r1
 801f584:	b10a      	cbz	r2, 801f58a <_printf_common+0x26>
 801f586:	3301      	adds	r3, #1
 801f588:	6033      	str	r3, [r6, #0]
 801f58a:	6823      	ldr	r3, [r4, #0]
 801f58c:	0699      	lsls	r1, r3, #26
 801f58e:	bf42      	ittt	mi
 801f590:	6833      	ldrmi	r3, [r6, #0]
 801f592:	3302      	addmi	r3, #2
 801f594:	6033      	strmi	r3, [r6, #0]
 801f596:	6825      	ldr	r5, [r4, #0]
 801f598:	f015 0506 	ands.w	r5, r5, #6
 801f59c:	d106      	bne.n	801f5ac <_printf_common+0x48>
 801f59e:	f104 0a19 	add.w	sl, r4, #25
 801f5a2:	68e3      	ldr	r3, [r4, #12]
 801f5a4:	6832      	ldr	r2, [r6, #0]
 801f5a6:	1a9b      	subs	r3, r3, r2
 801f5a8:	42ab      	cmp	r3, r5
 801f5aa:	dc26      	bgt.n	801f5fa <_printf_common+0x96>
 801f5ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f5b0:	1e13      	subs	r3, r2, #0
 801f5b2:	6822      	ldr	r2, [r4, #0]
 801f5b4:	bf18      	it	ne
 801f5b6:	2301      	movne	r3, #1
 801f5b8:	0692      	lsls	r2, r2, #26
 801f5ba:	d42b      	bmi.n	801f614 <_printf_common+0xb0>
 801f5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f5c0:	4649      	mov	r1, r9
 801f5c2:	4638      	mov	r0, r7
 801f5c4:	47c0      	blx	r8
 801f5c6:	3001      	adds	r0, #1
 801f5c8:	d01e      	beq.n	801f608 <_printf_common+0xa4>
 801f5ca:	6823      	ldr	r3, [r4, #0]
 801f5cc:	68e5      	ldr	r5, [r4, #12]
 801f5ce:	6832      	ldr	r2, [r6, #0]
 801f5d0:	f003 0306 	and.w	r3, r3, #6
 801f5d4:	2b04      	cmp	r3, #4
 801f5d6:	bf08      	it	eq
 801f5d8:	1aad      	subeq	r5, r5, r2
 801f5da:	68a3      	ldr	r3, [r4, #8]
 801f5dc:	6922      	ldr	r2, [r4, #16]
 801f5de:	bf0c      	ite	eq
 801f5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f5e4:	2500      	movne	r5, #0
 801f5e6:	4293      	cmp	r3, r2
 801f5e8:	bfc4      	itt	gt
 801f5ea:	1a9b      	subgt	r3, r3, r2
 801f5ec:	18ed      	addgt	r5, r5, r3
 801f5ee:	2600      	movs	r6, #0
 801f5f0:	341a      	adds	r4, #26
 801f5f2:	42b5      	cmp	r5, r6
 801f5f4:	d11a      	bne.n	801f62c <_printf_common+0xc8>
 801f5f6:	2000      	movs	r0, #0
 801f5f8:	e008      	b.n	801f60c <_printf_common+0xa8>
 801f5fa:	2301      	movs	r3, #1
 801f5fc:	4652      	mov	r2, sl
 801f5fe:	4649      	mov	r1, r9
 801f600:	4638      	mov	r0, r7
 801f602:	47c0      	blx	r8
 801f604:	3001      	adds	r0, #1
 801f606:	d103      	bne.n	801f610 <_printf_common+0xac>
 801f608:	f04f 30ff 	mov.w	r0, #4294967295
 801f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f610:	3501      	adds	r5, #1
 801f612:	e7c6      	b.n	801f5a2 <_printf_common+0x3e>
 801f614:	18e1      	adds	r1, r4, r3
 801f616:	1c5a      	adds	r2, r3, #1
 801f618:	2030      	movs	r0, #48	; 0x30
 801f61a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f61e:	4422      	add	r2, r4
 801f620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f628:	3302      	adds	r3, #2
 801f62a:	e7c7      	b.n	801f5bc <_printf_common+0x58>
 801f62c:	2301      	movs	r3, #1
 801f62e:	4622      	mov	r2, r4
 801f630:	4649      	mov	r1, r9
 801f632:	4638      	mov	r0, r7
 801f634:	47c0      	blx	r8
 801f636:	3001      	adds	r0, #1
 801f638:	d0e6      	beq.n	801f608 <_printf_common+0xa4>
 801f63a:	3601      	adds	r6, #1
 801f63c:	e7d9      	b.n	801f5f2 <_printf_common+0x8e>
	...

0801f640 <_printf_i>:
 801f640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f644:	7e0f      	ldrb	r7, [r1, #24]
 801f646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f648:	2f78      	cmp	r7, #120	; 0x78
 801f64a:	4691      	mov	r9, r2
 801f64c:	4680      	mov	r8, r0
 801f64e:	460c      	mov	r4, r1
 801f650:	469a      	mov	sl, r3
 801f652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f656:	d807      	bhi.n	801f668 <_printf_i+0x28>
 801f658:	2f62      	cmp	r7, #98	; 0x62
 801f65a:	d80a      	bhi.n	801f672 <_printf_i+0x32>
 801f65c:	2f00      	cmp	r7, #0
 801f65e:	f000 80d8 	beq.w	801f812 <_printf_i+0x1d2>
 801f662:	2f58      	cmp	r7, #88	; 0x58
 801f664:	f000 80a3 	beq.w	801f7ae <_printf_i+0x16e>
 801f668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f66c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f670:	e03a      	b.n	801f6e8 <_printf_i+0xa8>
 801f672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f676:	2b15      	cmp	r3, #21
 801f678:	d8f6      	bhi.n	801f668 <_printf_i+0x28>
 801f67a:	a101      	add	r1, pc, #4	; (adr r1, 801f680 <_printf_i+0x40>)
 801f67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f680:	0801f6d9 	.word	0x0801f6d9
 801f684:	0801f6ed 	.word	0x0801f6ed
 801f688:	0801f669 	.word	0x0801f669
 801f68c:	0801f669 	.word	0x0801f669
 801f690:	0801f669 	.word	0x0801f669
 801f694:	0801f669 	.word	0x0801f669
 801f698:	0801f6ed 	.word	0x0801f6ed
 801f69c:	0801f669 	.word	0x0801f669
 801f6a0:	0801f669 	.word	0x0801f669
 801f6a4:	0801f669 	.word	0x0801f669
 801f6a8:	0801f669 	.word	0x0801f669
 801f6ac:	0801f7f9 	.word	0x0801f7f9
 801f6b0:	0801f71d 	.word	0x0801f71d
 801f6b4:	0801f7db 	.word	0x0801f7db
 801f6b8:	0801f669 	.word	0x0801f669
 801f6bc:	0801f669 	.word	0x0801f669
 801f6c0:	0801f81b 	.word	0x0801f81b
 801f6c4:	0801f669 	.word	0x0801f669
 801f6c8:	0801f71d 	.word	0x0801f71d
 801f6cc:	0801f669 	.word	0x0801f669
 801f6d0:	0801f669 	.word	0x0801f669
 801f6d4:	0801f7e3 	.word	0x0801f7e3
 801f6d8:	682b      	ldr	r3, [r5, #0]
 801f6da:	1d1a      	adds	r2, r3, #4
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	602a      	str	r2, [r5, #0]
 801f6e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f6e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f6e8:	2301      	movs	r3, #1
 801f6ea:	e0a3      	b.n	801f834 <_printf_i+0x1f4>
 801f6ec:	6820      	ldr	r0, [r4, #0]
 801f6ee:	6829      	ldr	r1, [r5, #0]
 801f6f0:	0606      	lsls	r6, r0, #24
 801f6f2:	f101 0304 	add.w	r3, r1, #4
 801f6f6:	d50a      	bpl.n	801f70e <_printf_i+0xce>
 801f6f8:	680e      	ldr	r6, [r1, #0]
 801f6fa:	602b      	str	r3, [r5, #0]
 801f6fc:	2e00      	cmp	r6, #0
 801f6fe:	da03      	bge.n	801f708 <_printf_i+0xc8>
 801f700:	232d      	movs	r3, #45	; 0x2d
 801f702:	4276      	negs	r6, r6
 801f704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f708:	485e      	ldr	r0, [pc, #376]	; (801f884 <_printf_i+0x244>)
 801f70a:	230a      	movs	r3, #10
 801f70c:	e019      	b.n	801f742 <_printf_i+0x102>
 801f70e:	680e      	ldr	r6, [r1, #0]
 801f710:	602b      	str	r3, [r5, #0]
 801f712:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f716:	bf18      	it	ne
 801f718:	b236      	sxthne	r6, r6
 801f71a:	e7ef      	b.n	801f6fc <_printf_i+0xbc>
 801f71c:	682b      	ldr	r3, [r5, #0]
 801f71e:	6820      	ldr	r0, [r4, #0]
 801f720:	1d19      	adds	r1, r3, #4
 801f722:	6029      	str	r1, [r5, #0]
 801f724:	0601      	lsls	r1, r0, #24
 801f726:	d501      	bpl.n	801f72c <_printf_i+0xec>
 801f728:	681e      	ldr	r6, [r3, #0]
 801f72a:	e002      	b.n	801f732 <_printf_i+0xf2>
 801f72c:	0646      	lsls	r6, r0, #25
 801f72e:	d5fb      	bpl.n	801f728 <_printf_i+0xe8>
 801f730:	881e      	ldrh	r6, [r3, #0]
 801f732:	4854      	ldr	r0, [pc, #336]	; (801f884 <_printf_i+0x244>)
 801f734:	2f6f      	cmp	r7, #111	; 0x6f
 801f736:	bf0c      	ite	eq
 801f738:	2308      	moveq	r3, #8
 801f73a:	230a      	movne	r3, #10
 801f73c:	2100      	movs	r1, #0
 801f73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f742:	6865      	ldr	r5, [r4, #4]
 801f744:	60a5      	str	r5, [r4, #8]
 801f746:	2d00      	cmp	r5, #0
 801f748:	bfa2      	ittt	ge
 801f74a:	6821      	ldrge	r1, [r4, #0]
 801f74c:	f021 0104 	bicge.w	r1, r1, #4
 801f750:	6021      	strge	r1, [r4, #0]
 801f752:	b90e      	cbnz	r6, 801f758 <_printf_i+0x118>
 801f754:	2d00      	cmp	r5, #0
 801f756:	d04d      	beq.n	801f7f4 <_printf_i+0x1b4>
 801f758:	4615      	mov	r5, r2
 801f75a:	fbb6 f1f3 	udiv	r1, r6, r3
 801f75e:	fb03 6711 	mls	r7, r3, r1, r6
 801f762:	5dc7      	ldrb	r7, [r0, r7]
 801f764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f768:	4637      	mov	r7, r6
 801f76a:	42bb      	cmp	r3, r7
 801f76c:	460e      	mov	r6, r1
 801f76e:	d9f4      	bls.n	801f75a <_printf_i+0x11a>
 801f770:	2b08      	cmp	r3, #8
 801f772:	d10b      	bne.n	801f78c <_printf_i+0x14c>
 801f774:	6823      	ldr	r3, [r4, #0]
 801f776:	07de      	lsls	r6, r3, #31
 801f778:	d508      	bpl.n	801f78c <_printf_i+0x14c>
 801f77a:	6923      	ldr	r3, [r4, #16]
 801f77c:	6861      	ldr	r1, [r4, #4]
 801f77e:	4299      	cmp	r1, r3
 801f780:	bfde      	ittt	le
 801f782:	2330      	movle	r3, #48	; 0x30
 801f784:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f788:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f78c:	1b52      	subs	r2, r2, r5
 801f78e:	6122      	str	r2, [r4, #16]
 801f790:	f8cd a000 	str.w	sl, [sp]
 801f794:	464b      	mov	r3, r9
 801f796:	aa03      	add	r2, sp, #12
 801f798:	4621      	mov	r1, r4
 801f79a:	4640      	mov	r0, r8
 801f79c:	f7ff fee2 	bl	801f564 <_printf_common>
 801f7a0:	3001      	adds	r0, #1
 801f7a2:	d14c      	bne.n	801f83e <_printf_i+0x1fe>
 801f7a4:	f04f 30ff 	mov.w	r0, #4294967295
 801f7a8:	b004      	add	sp, #16
 801f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7ae:	4835      	ldr	r0, [pc, #212]	; (801f884 <_printf_i+0x244>)
 801f7b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f7b4:	6829      	ldr	r1, [r5, #0]
 801f7b6:	6823      	ldr	r3, [r4, #0]
 801f7b8:	f851 6b04 	ldr.w	r6, [r1], #4
 801f7bc:	6029      	str	r1, [r5, #0]
 801f7be:	061d      	lsls	r5, r3, #24
 801f7c0:	d514      	bpl.n	801f7ec <_printf_i+0x1ac>
 801f7c2:	07df      	lsls	r7, r3, #31
 801f7c4:	bf44      	itt	mi
 801f7c6:	f043 0320 	orrmi.w	r3, r3, #32
 801f7ca:	6023      	strmi	r3, [r4, #0]
 801f7cc:	b91e      	cbnz	r6, 801f7d6 <_printf_i+0x196>
 801f7ce:	6823      	ldr	r3, [r4, #0]
 801f7d0:	f023 0320 	bic.w	r3, r3, #32
 801f7d4:	6023      	str	r3, [r4, #0]
 801f7d6:	2310      	movs	r3, #16
 801f7d8:	e7b0      	b.n	801f73c <_printf_i+0xfc>
 801f7da:	6823      	ldr	r3, [r4, #0]
 801f7dc:	f043 0320 	orr.w	r3, r3, #32
 801f7e0:	6023      	str	r3, [r4, #0]
 801f7e2:	2378      	movs	r3, #120	; 0x78
 801f7e4:	4828      	ldr	r0, [pc, #160]	; (801f888 <_printf_i+0x248>)
 801f7e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f7ea:	e7e3      	b.n	801f7b4 <_printf_i+0x174>
 801f7ec:	0659      	lsls	r1, r3, #25
 801f7ee:	bf48      	it	mi
 801f7f0:	b2b6      	uxthmi	r6, r6
 801f7f2:	e7e6      	b.n	801f7c2 <_printf_i+0x182>
 801f7f4:	4615      	mov	r5, r2
 801f7f6:	e7bb      	b.n	801f770 <_printf_i+0x130>
 801f7f8:	682b      	ldr	r3, [r5, #0]
 801f7fa:	6826      	ldr	r6, [r4, #0]
 801f7fc:	6961      	ldr	r1, [r4, #20]
 801f7fe:	1d18      	adds	r0, r3, #4
 801f800:	6028      	str	r0, [r5, #0]
 801f802:	0635      	lsls	r5, r6, #24
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	d501      	bpl.n	801f80c <_printf_i+0x1cc>
 801f808:	6019      	str	r1, [r3, #0]
 801f80a:	e002      	b.n	801f812 <_printf_i+0x1d2>
 801f80c:	0670      	lsls	r0, r6, #25
 801f80e:	d5fb      	bpl.n	801f808 <_printf_i+0x1c8>
 801f810:	8019      	strh	r1, [r3, #0]
 801f812:	2300      	movs	r3, #0
 801f814:	6123      	str	r3, [r4, #16]
 801f816:	4615      	mov	r5, r2
 801f818:	e7ba      	b.n	801f790 <_printf_i+0x150>
 801f81a:	682b      	ldr	r3, [r5, #0]
 801f81c:	1d1a      	adds	r2, r3, #4
 801f81e:	602a      	str	r2, [r5, #0]
 801f820:	681d      	ldr	r5, [r3, #0]
 801f822:	6862      	ldr	r2, [r4, #4]
 801f824:	2100      	movs	r1, #0
 801f826:	4628      	mov	r0, r5
 801f828:	f7e0 fd62 	bl	80002f0 <memchr>
 801f82c:	b108      	cbz	r0, 801f832 <_printf_i+0x1f2>
 801f82e:	1b40      	subs	r0, r0, r5
 801f830:	6060      	str	r0, [r4, #4]
 801f832:	6863      	ldr	r3, [r4, #4]
 801f834:	6123      	str	r3, [r4, #16]
 801f836:	2300      	movs	r3, #0
 801f838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f83c:	e7a8      	b.n	801f790 <_printf_i+0x150>
 801f83e:	6923      	ldr	r3, [r4, #16]
 801f840:	462a      	mov	r2, r5
 801f842:	4649      	mov	r1, r9
 801f844:	4640      	mov	r0, r8
 801f846:	47d0      	blx	sl
 801f848:	3001      	adds	r0, #1
 801f84a:	d0ab      	beq.n	801f7a4 <_printf_i+0x164>
 801f84c:	6823      	ldr	r3, [r4, #0]
 801f84e:	079b      	lsls	r3, r3, #30
 801f850:	d413      	bmi.n	801f87a <_printf_i+0x23a>
 801f852:	68e0      	ldr	r0, [r4, #12]
 801f854:	9b03      	ldr	r3, [sp, #12]
 801f856:	4298      	cmp	r0, r3
 801f858:	bfb8      	it	lt
 801f85a:	4618      	movlt	r0, r3
 801f85c:	e7a4      	b.n	801f7a8 <_printf_i+0x168>
 801f85e:	2301      	movs	r3, #1
 801f860:	4632      	mov	r2, r6
 801f862:	4649      	mov	r1, r9
 801f864:	4640      	mov	r0, r8
 801f866:	47d0      	blx	sl
 801f868:	3001      	adds	r0, #1
 801f86a:	d09b      	beq.n	801f7a4 <_printf_i+0x164>
 801f86c:	3501      	adds	r5, #1
 801f86e:	68e3      	ldr	r3, [r4, #12]
 801f870:	9903      	ldr	r1, [sp, #12]
 801f872:	1a5b      	subs	r3, r3, r1
 801f874:	42ab      	cmp	r3, r5
 801f876:	dcf2      	bgt.n	801f85e <_printf_i+0x21e>
 801f878:	e7eb      	b.n	801f852 <_printf_i+0x212>
 801f87a:	2500      	movs	r5, #0
 801f87c:	f104 0619 	add.w	r6, r4, #25
 801f880:	e7f5      	b.n	801f86e <_printf_i+0x22e>
 801f882:	bf00      	nop
 801f884:	08023f35 	.word	0x08023f35
 801f888:	08023f46 	.word	0x08023f46

0801f88c <cleanup_glue>:
 801f88c:	b538      	push	{r3, r4, r5, lr}
 801f88e:	460c      	mov	r4, r1
 801f890:	6809      	ldr	r1, [r1, #0]
 801f892:	4605      	mov	r5, r0
 801f894:	b109      	cbz	r1, 801f89a <cleanup_glue+0xe>
 801f896:	f7ff fff9 	bl	801f88c <cleanup_glue>
 801f89a:	4621      	mov	r1, r4
 801f89c:	4628      	mov	r0, r5
 801f89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f8a2:	f7ff b977 	b.w	801eb94 <_free_r>
	...

0801f8a8 <_reclaim_reent>:
 801f8a8:	4b2c      	ldr	r3, [pc, #176]	; (801f95c <_reclaim_reent+0xb4>)
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	4283      	cmp	r3, r0
 801f8ae:	b570      	push	{r4, r5, r6, lr}
 801f8b0:	4604      	mov	r4, r0
 801f8b2:	d051      	beq.n	801f958 <_reclaim_reent+0xb0>
 801f8b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f8b6:	b143      	cbz	r3, 801f8ca <_reclaim_reent+0x22>
 801f8b8:	68db      	ldr	r3, [r3, #12]
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	d14a      	bne.n	801f954 <_reclaim_reent+0xac>
 801f8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f8c0:	6819      	ldr	r1, [r3, #0]
 801f8c2:	b111      	cbz	r1, 801f8ca <_reclaim_reent+0x22>
 801f8c4:	4620      	mov	r0, r4
 801f8c6:	f7ff f965 	bl	801eb94 <_free_r>
 801f8ca:	6961      	ldr	r1, [r4, #20]
 801f8cc:	b111      	cbz	r1, 801f8d4 <_reclaim_reent+0x2c>
 801f8ce:	4620      	mov	r0, r4
 801f8d0:	f7ff f960 	bl	801eb94 <_free_r>
 801f8d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f8d6:	b111      	cbz	r1, 801f8de <_reclaim_reent+0x36>
 801f8d8:	4620      	mov	r0, r4
 801f8da:	f7ff f95b 	bl	801eb94 <_free_r>
 801f8de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f8e0:	b111      	cbz	r1, 801f8e8 <_reclaim_reent+0x40>
 801f8e2:	4620      	mov	r0, r4
 801f8e4:	f7ff f956 	bl	801eb94 <_free_r>
 801f8e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f8ea:	b111      	cbz	r1, 801f8f2 <_reclaim_reent+0x4a>
 801f8ec:	4620      	mov	r0, r4
 801f8ee:	f7ff f951 	bl	801eb94 <_free_r>
 801f8f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f8f4:	b111      	cbz	r1, 801f8fc <_reclaim_reent+0x54>
 801f8f6:	4620      	mov	r0, r4
 801f8f8:	f7ff f94c 	bl	801eb94 <_free_r>
 801f8fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f8fe:	b111      	cbz	r1, 801f906 <_reclaim_reent+0x5e>
 801f900:	4620      	mov	r0, r4
 801f902:	f7ff f947 	bl	801eb94 <_free_r>
 801f906:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f908:	b111      	cbz	r1, 801f910 <_reclaim_reent+0x68>
 801f90a:	4620      	mov	r0, r4
 801f90c:	f7ff f942 	bl	801eb94 <_free_r>
 801f910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f912:	b111      	cbz	r1, 801f91a <_reclaim_reent+0x72>
 801f914:	4620      	mov	r0, r4
 801f916:	f7ff f93d 	bl	801eb94 <_free_r>
 801f91a:	69a3      	ldr	r3, [r4, #24]
 801f91c:	b1e3      	cbz	r3, 801f958 <_reclaim_reent+0xb0>
 801f91e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f920:	4620      	mov	r0, r4
 801f922:	4798      	blx	r3
 801f924:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f926:	b1b9      	cbz	r1, 801f958 <_reclaim_reent+0xb0>
 801f928:	4620      	mov	r0, r4
 801f92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f92e:	f7ff bfad 	b.w	801f88c <cleanup_glue>
 801f932:	5949      	ldr	r1, [r1, r5]
 801f934:	b941      	cbnz	r1, 801f948 <_reclaim_reent+0xa0>
 801f936:	3504      	adds	r5, #4
 801f938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f93a:	2d80      	cmp	r5, #128	; 0x80
 801f93c:	68d9      	ldr	r1, [r3, #12]
 801f93e:	d1f8      	bne.n	801f932 <_reclaim_reent+0x8a>
 801f940:	4620      	mov	r0, r4
 801f942:	f7ff f927 	bl	801eb94 <_free_r>
 801f946:	e7ba      	b.n	801f8be <_reclaim_reent+0x16>
 801f948:	680e      	ldr	r6, [r1, #0]
 801f94a:	4620      	mov	r0, r4
 801f94c:	f7ff f922 	bl	801eb94 <_free_r>
 801f950:	4631      	mov	r1, r6
 801f952:	e7ef      	b.n	801f934 <_reclaim_reent+0x8c>
 801f954:	2500      	movs	r5, #0
 801f956:	e7ef      	b.n	801f938 <_reclaim_reent+0x90>
 801f958:	bd70      	pop	{r4, r5, r6, pc}
 801f95a:	bf00      	nop
 801f95c:	20000140 	.word	0x20000140

0801f960 <_sbrk_r>:
 801f960:	b538      	push	{r3, r4, r5, lr}
 801f962:	4d06      	ldr	r5, [pc, #24]	; (801f97c <_sbrk_r+0x1c>)
 801f964:	2300      	movs	r3, #0
 801f966:	4604      	mov	r4, r0
 801f968:	4608      	mov	r0, r1
 801f96a:	602b      	str	r3, [r5, #0]
 801f96c:	f7e4 faf2 	bl	8003f54 <_sbrk>
 801f970:	1c43      	adds	r3, r0, #1
 801f972:	d102      	bne.n	801f97a <_sbrk_r+0x1a>
 801f974:	682b      	ldr	r3, [r5, #0]
 801f976:	b103      	cbz	r3, 801f97a <_sbrk_r+0x1a>
 801f978:	6023      	str	r3, [r4, #0]
 801f97a:	bd38      	pop	{r3, r4, r5, pc}
 801f97c:	2000707c 	.word	0x2000707c

0801f980 <_raise_r>:
 801f980:	291f      	cmp	r1, #31
 801f982:	b538      	push	{r3, r4, r5, lr}
 801f984:	4604      	mov	r4, r0
 801f986:	460d      	mov	r5, r1
 801f988:	d904      	bls.n	801f994 <_raise_r+0x14>
 801f98a:	2316      	movs	r3, #22
 801f98c:	6003      	str	r3, [r0, #0]
 801f98e:	f04f 30ff 	mov.w	r0, #4294967295
 801f992:	bd38      	pop	{r3, r4, r5, pc}
 801f994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f996:	b112      	cbz	r2, 801f99e <_raise_r+0x1e>
 801f998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f99c:	b94b      	cbnz	r3, 801f9b2 <_raise_r+0x32>
 801f99e:	4620      	mov	r0, r4
 801f9a0:	f000 f830 	bl	801fa04 <_getpid_r>
 801f9a4:	462a      	mov	r2, r5
 801f9a6:	4601      	mov	r1, r0
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f9ae:	f000 b817 	b.w	801f9e0 <_kill_r>
 801f9b2:	2b01      	cmp	r3, #1
 801f9b4:	d00a      	beq.n	801f9cc <_raise_r+0x4c>
 801f9b6:	1c59      	adds	r1, r3, #1
 801f9b8:	d103      	bne.n	801f9c2 <_raise_r+0x42>
 801f9ba:	2316      	movs	r3, #22
 801f9bc:	6003      	str	r3, [r0, #0]
 801f9be:	2001      	movs	r0, #1
 801f9c0:	e7e7      	b.n	801f992 <_raise_r+0x12>
 801f9c2:	2400      	movs	r4, #0
 801f9c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f9c8:	4628      	mov	r0, r5
 801f9ca:	4798      	blx	r3
 801f9cc:	2000      	movs	r0, #0
 801f9ce:	e7e0      	b.n	801f992 <_raise_r+0x12>

0801f9d0 <raise>:
 801f9d0:	4b02      	ldr	r3, [pc, #8]	; (801f9dc <raise+0xc>)
 801f9d2:	4601      	mov	r1, r0
 801f9d4:	6818      	ldr	r0, [r3, #0]
 801f9d6:	f7ff bfd3 	b.w	801f980 <_raise_r>
 801f9da:	bf00      	nop
 801f9dc:	20000140 	.word	0x20000140

0801f9e0 <_kill_r>:
 801f9e0:	b538      	push	{r3, r4, r5, lr}
 801f9e2:	4d07      	ldr	r5, [pc, #28]	; (801fa00 <_kill_r+0x20>)
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	4604      	mov	r4, r0
 801f9e8:	4608      	mov	r0, r1
 801f9ea:	4611      	mov	r1, r2
 801f9ec:	602b      	str	r3, [r5, #0]
 801f9ee:	f7e4 fa29 	bl	8003e44 <_kill>
 801f9f2:	1c43      	adds	r3, r0, #1
 801f9f4:	d102      	bne.n	801f9fc <_kill_r+0x1c>
 801f9f6:	682b      	ldr	r3, [r5, #0]
 801f9f8:	b103      	cbz	r3, 801f9fc <_kill_r+0x1c>
 801f9fa:	6023      	str	r3, [r4, #0]
 801f9fc:	bd38      	pop	{r3, r4, r5, pc}
 801f9fe:	bf00      	nop
 801fa00:	2000707c 	.word	0x2000707c

0801fa04 <_getpid_r>:
 801fa04:	f7e4 ba16 	b.w	8003e34 <_getpid>

0801fa08 <siprintf>:
 801fa08:	b40e      	push	{r1, r2, r3}
 801fa0a:	b500      	push	{lr}
 801fa0c:	b09c      	sub	sp, #112	; 0x70
 801fa0e:	ab1d      	add	r3, sp, #116	; 0x74
 801fa10:	9002      	str	r0, [sp, #8]
 801fa12:	9006      	str	r0, [sp, #24]
 801fa14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fa18:	4809      	ldr	r0, [pc, #36]	; (801fa40 <siprintf+0x38>)
 801fa1a:	9107      	str	r1, [sp, #28]
 801fa1c:	9104      	str	r1, [sp, #16]
 801fa1e:	4909      	ldr	r1, [pc, #36]	; (801fa44 <siprintf+0x3c>)
 801fa20:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa24:	9105      	str	r1, [sp, #20]
 801fa26:	6800      	ldr	r0, [r0, #0]
 801fa28:	9301      	str	r3, [sp, #4]
 801fa2a:	a902      	add	r1, sp, #8
 801fa2c:	f001 fda2 	bl	8021574 <_svfiprintf_r>
 801fa30:	9b02      	ldr	r3, [sp, #8]
 801fa32:	2200      	movs	r2, #0
 801fa34:	701a      	strb	r2, [r3, #0]
 801fa36:	b01c      	add	sp, #112	; 0x70
 801fa38:	f85d eb04 	ldr.w	lr, [sp], #4
 801fa3c:	b003      	add	sp, #12
 801fa3e:	4770      	bx	lr
 801fa40:	20000140 	.word	0x20000140
 801fa44:	ffff0208 	.word	0xffff0208

0801fa48 <__sread>:
 801fa48:	b510      	push	{r4, lr}
 801fa4a:	460c      	mov	r4, r1
 801fa4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa50:	f001 fe90 	bl	8021774 <_read_r>
 801fa54:	2800      	cmp	r0, #0
 801fa56:	bfab      	itete	ge
 801fa58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fa5a:	89a3      	ldrhlt	r3, [r4, #12]
 801fa5c:	181b      	addge	r3, r3, r0
 801fa5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fa62:	bfac      	ite	ge
 801fa64:	6563      	strge	r3, [r4, #84]	; 0x54
 801fa66:	81a3      	strhlt	r3, [r4, #12]
 801fa68:	bd10      	pop	{r4, pc}

0801fa6a <__swrite>:
 801fa6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa6e:	461f      	mov	r7, r3
 801fa70:	898b      	ldrh	r3, [r1, #12]
 801fa72:	05db      	lsls	r3, r3, #23
 801fa74:	4605      	mov	r5, r0
 801fa76:	460c      	mov	r4, r1
 801fa78:	4616      	mov	r6, r2
 801fa7a:	d505      	bpl.n	801fa88 <__swrite+0x1e>
 801fa7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa80:	2302      	movs	r3, #2
 801fa82:	2200      	movs	r2, #0
 801fa84:	f001 f8b4 	bl	8020bf0 <_lseek_r>
 801fa88:	89a3      	ldrh	r3, [r4, #12]
 801fa8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fa8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fa92:	81a3      	strh	r3, [r4, #12]
 801fa94:	4632      	mov	r2, r6
 801fa96:	463b      	mov	r3, r7
 801fa98:	4628      	mov	r0, r5
 801fa9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fa9e:	f000 b8f5 	b.w	801fc8c <_write_r>

0801faa2 <__sseek>:
 801faa2:	b510      	push	{r4, lr}
 801faa4:	460c      	mov	r4, r1
 801faa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801faaa:	f001 f8a1 	bl	8020bf0 <_lseek_r>
 801faae:	1c43      	adds	r3, r0, #1
 801fab0:	89a3      	ldrh	r3, [r4, #12]
 801fab2:	bf15      	itete	ne
 801fab4:	6560      	strne	r0, [r4, #84]	; 0x54
 801fab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801faba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fabe:	81a3      	strheq	r3, [r4, #12]
 801fac0:	bf18      	it	ne
 801fac2:	81a3      	strhne	r3, [r4, #12]
 801fac4:	bd10      	pop	{r4, pc}

0801fac6 <__sclose>:
 801fac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801faca:	f000 b9c1 	b.w	801fe50 <_close_r>
	...

0801fad0 <_strtol_l.constprop.0>:
 801fad0:	2b01      	cmp	r3, #1
 801fad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fad6:	d001      	beq.n	801fadc <_strtol_l.constprop.0+0xc>
 801fad8:	2b24      	cmp	r3, #36	; 0x24
 801fada:	d906      	bls.n	801faea <_strtol_l.constprop.0+0x1a>
 801fadc:	f7fe fefe 	bl	801e8dc <__errno>
 801fae0:	2316      	movs	r3, #22
 801fae2:	6003      	str	r3, [r0, #0]
 801fae4:	2000      	movs	r0, #0
 801fae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801faea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801fbd0 <_strtol_l.constprop.0+0x100>
 801faee:	460d      	mov	r5, r1
 801faf0:	462e      	mov	r6, r5
 801faf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801faf6:	f814 700c 	ldrb.w	r7, [r4, ip]
 801fafa:	f017 0708 	ands.w	r7, r7, #8
 801fafe:	d1f7      	bne.n	801faf0 <_strtol_l.constprop.0+0x20>
 801fb00:	2c2d      	cmp	r4, #45	; 0x2d
 801fb02:	d132      	bne.n	801fb6a <_strtol_l.constprop.0+0x9a>
 801fb04:	782c      	ldrb	r4, [r5, #0]
 801fb06:	2701      	movs	r7, #1
 801fb08:	1cb5      	adds	r5, r6, #2
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d05b      	beq.n	801fbc6 <_strtol_l.constprop.0+0xf6>
 801fb0e:	2b10      	cmp	r3, #16
 801fb10:	d109      	bne.n	801fb26 <_strtol_l.constprop.0+0x56>
 801fb12:	2c30      	cmp	r4, #48	; 0x30
 801fb14:	d107      	bne.n	801fb26 <_strtol_l.constprop.0+0x56>
 801fb16:	782c      	ldrb	r4, [r5, #0]
 801fb18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801fb1c:	2c58      	cmp	r4, #88	; 0x58
 801fb1e:	d14d      	bne.n	801fbbc <_strtol_l.constprop.0+0xec>
 801fb20:	786c      	ldrb	r4, [r5, #1]
 801fb22:	2310      	movs	r3, #16
 801fb24:	3502      	adds	r5, #2
 801fb26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801fb2a:	f108 38ff 	add.w	r8, r8, #4294967295
 801fb2e:	f04f 0c00 	mov.w	ip, #0
 801fb32:	fbb8 f9f3 	udiv	r9, r8, r3
 801fb36:	4666      	mov	r6, ip
 801fb38:	fb03 8a19 	mls	sl, r3, r9, r8
 801fb3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801fb40:	f1be 0f09 	cmp.w	lr, #9
 801fb44:	d816      	bhi.n	801fb74 <_strtol_l.constprop.0+0xa4>
 801fb46:	4674      	mov	r4, lr
 801fb48:	42a3      	cmp	r3, r4
 801fb4a:	dd24      	ble.n	801fb96 <_strtol_l.constprop.0+0xc6>
 801fb4c:	f1bc 0f00 	cmp.w	ip, #0
 801fb50:	db1e      	blt.n	801fb90 <_strtol_l.constprop.0+0xc0>
 801fb52:	45b1      	cmp	r9, r6
 801fb54:	d31c      	bcc.n	801fb90 <_strtol_l.constprop.0+0xc0>
 801fb56:	d101      	bne.n	801fb5c <_strtol_l.constprop.0+0x8c>
 801fb58:	45a2      	cmp	sl, r4
 801fb5a:	db19      	blt.n	801fb90 <_strtol_l.constprop.0+0xc0>
 801fb5c:	fb06 4603 	mla	r6, r6, r3, r4
 801fb60:	f04f 0c01 	mov.w	ip, #1
 801fb64:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fb68:	e7e8      	b.n	801fb3c <_strtol_l.constprop.0+0x6c>
 801fb6a:	2c2b      	cmp	r4, #43	; 0x2b
 801fb6c:	bf04      	itt	eq
 801fb6e:	782c      	ldrbeq	r4, [r5, #0]
 801fb70:	1cb5      	addeq	r5, r6, #2
 801fb72:	e7ca      	b.n	801fb0a <_strtol_l.constprop.0+0x3a>
 801fb74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801fb78:	f1be 0f19 	cmp.w	lr, #25
 801fb7c:	d801      	bhi.n	801fb82 <_strtol_l.constprop.0+0xb2>
 801fb7e:	3c37      	subs	r4, #55	; 0x37
 801fb80:	e7e2      	b.n	801fb48 <_strtol_l.constprop.0+0x78>
 801fb82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801fb86:	f1be 0f19 	cmp.w	lr, #25
 801fb8a:	d804      	bhi.n	801fb96 <_strtol_l.constprop.0+0xc6>
 801fb8c:	3c57      	subs	r4, #87	; 0x57
 801fb8e:	e7db      	b.n	801fb48 <_strtol_l.constprop.0+0x78>
 801fb90:	f04f 3cff 	mov.w	ip, #4294967295
 801fb94:	e7e6      	b.n	801fb64 <_strtol_l.constprop.0+0x94>
 801fb96:	f1bc 0f00 	cmp.w	ip, #0
 801fb9a:	da05      	bge.n	801fba8 <_strtol_l.constprop.0+0xd8>
 801fb9c:	2322      	movs	r3, #34	; 0x22
 801fb9e:	6003      	str	r3, [r0, #0]
 801fba0:	4646      	mov	r6, r8
 801fba2:	b942      	cbnz	r2, 801fbb6 <_strtol_l.constprop.0+0xe6>
 801fba4:	4630      	mov	r0, r6
 801fba6:	e79e      	b.n	801fae6 <_strtol_l.constprop.0+0x16>
 801fba8:	b107      	cbz	r7, 801fbac <_strtol_l.constprop.0+0xdc>
 801fbaa:	4276      	negs	r6, r6
 801fbac:	2a00      	cmp	r2, #0
 801fbae:	d0f9      	beq.n	801fba4 <_strtol_l.constprop.0+0xd4>
 801fbb0:	f1bc 0f00 	cmp.w	ip, #0
 801fbb4:	d000      	beq.n	801fbb8 <_strtol_l.constprop.0+0xe8>
 801fbb6:	1e69      	subs	r1, r5, #1
 801fbb8:	6011      	str	r1, [r2, #0]
 801fbba:	e7f3      	b.n	801fba4 <_strtol_l.constprop.0+0xd4>
 801fbbc:	2430      	movs	r4, #48	; 0x30
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	d1b1      	bne.n	801fb26 <_strtol_l.constprop.0+0x56>
 801fbc2:	2308      	movs	r3, #8
 801fbc4:	e7af      	b.n	801fb26 <_strtol_l.constprop.0+0x56>
 801fbc6:	2c30      	cmp	r4, #48	; 0x30
 801fbc8:	d0a5      	beq.n	801fb16 <_strtol_l.constprop.0+0x46>
 801fbca:	230a      	movs	r3, #10
 801fbcc:	e7ab      	b.n	801fb26 <_strtol_l.constprop.0+0x56>
 801fbce:	bf00      	nop
 801fbd0:	08023f5d 	.word	0x08023f5d

0801fbd4 <strtol>:
 801fbd4:	4613      	mov	r3, r2
 801fbd6:	460a      	mov	r2, r1
 801fbd8:	4601      	mov	r1, r0
 801fbda:	4802      	ldr	r0, [pc, #8]	; (801fbe4 <strtol+0x10>)
 801fbdc:	6800      	ldr	r0, [r0, #0]
 801fbde:	f7ff bf77 	b.w	801fad0 <_strtol_l.constprop.0>
 801fbe2:	bf00      	nop
 801fbe4:	20000140 	.word	0x20000140

0801fbe8 <__swbuf_r>:
 801fbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbea:	460e      	mov	r6, r1
 801fbec:	4614      	mov	r4, r2
 801fbee:	4605      	mov	r5, r0
 801fbf0:	b118      	cbz	r0, 801fbfa <__swbuf_r+0x12>
 801fbf2:	6983      	ldr	r3, [r0, #24]
 801fbf4:	b90b      	cbnz	r3, 801fbfa <__swbuf_r+0x12>
 801fbf6:	f7fe fecf 	bl	801e998 <__sinit>
 801fbfa:	4b21      	ldr	r3, [pc, #132]	; (801fc80 <__swbuf_r+0x98>)
 801fbfc:	429c      	cmp	r4, r3
 801fbfe:	d12b      	bne.n	801fc58 <__swbuf_r+0x70>
 801fc00:	686c      	ldr	r4, [r5, #4]
 801fc02:	69a3      	ldr	r3, [r4, #24]
 801fc04:	60a3      	str	r3, [r4, #8]
 801fc06:	89a3      	ldrh	r3, [r4, #12]
 801fc08:	071a      	lsls	r2, r3, #28
 801fc0a:	d52f      	bpl.n	801fc6c <__swbuf_r+0x84>
 801fc0c:	6923      	ldr	r3, [r4, #16]
 801fc0e:	b36b      	cbz	r3, 801fc6c <__swbuf_r+0x84>
 801fc10:	6923      	ldr	r3, [r4, #16]
 801fc12:	6820      	ldr	r0, [r4, #0]
 801fc14:	1ac0      	subs	r0, r0, r3
 801fc16:	6963      	ldr	r3, [r4, #20]
 801fc18:	b2f6      	uxtb	r6, r6
 801fc1a:	4283      	cmp	r3, r0
 801fc1c:	4637      	mov	r7, r6
 801fc1e:	dc04      	bgt.n	801fc2a <__swbuf_r+0x42>
 801fc20:	4621      	mov	r1, r4
 801fc22:	4628      	mov	r0, r5
 801fc24:	f000 ffa4 	bl	8020b70 <_fflush_r>
 801fc28:	bb30      	cbnz	r0, 801fc78 <__swbuf_r+0x90>
 801fc2a:	68a3      	ldr	r3, [r4, #8]
 801fc2c:	3b01      	subs	r3, #1
 801fc2e:	60a3      	str	r3, [r4, #8]
 801fc30:	6823      	ldr	r3, [r4, #0]
 801fc32:	1c5a      	adds	r2, r3, #1
 801fc34:	6022      	str	r2, [r4, #0]
 801fc36:	701e      	strb	r6, [r3, #0]
 801fc38:	6963      	ldr	r3, [r4, #20]
 801fc3a:	3001      	adds	r0, #1
 801fc3c:	4283      	cmp	r3, r0
 801fc3e:	d004      	beq.n	801fc4a <__swbuf_r+0x62>
 801fc40:	89a3      	ldrh	r3, [r4, #12]
 801fc42:	07db      	lsls	r3, r3, #31
 801fc44:	d506      	bpl.n	801fc54 <__swbuf_r+0x6c>
 801fc46:	2e0a      	cmp	r6, #10
 801fc48:	d104      	bne.n	801fc54 <__swbuf_r+0x6c>
 801fc4a:	4621      	mov	r1, r4
 801fc4c:	4628      	mov	r0, r5
 801fc4e:	f000 ff8f 	bl	8020b70 <_fflush_r>
 801fc52:	b988      	cbnz	r0, 801fc78 <__swbuf_r+0x90>
 801fc54:	4638      	mov	r0, r7
 801fc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc58:	4b0a      	ldr	r3, [pc, #40]	; (801fc84 <__swbuf_r+0x9c>)
 801fc5a:	429c      	cmp	r4, r3
 801fc5c:	d101      	bne.n	801fc62 <__swbuf_r+0x7a>
 801fc5e:	68ac      	ldr	r4, [r5, #8]
 801fc60:	e7cf      	b.n	801fc02 <__swbuf_r+0x1a>
 801fc62:	4b09      	ldr	r3, [pc, #36]	; (801fc88 <__swbuf_r+0xa0>)
 801fc64:	429c      	cmp	r4, r3
 801fc66:	bf08      	it	eq
 801fc68:	68ec      	ldreq	r4, [r5, #12]
 801fc6a:	e7ca      	b.n	801fc02 <__swbuf_r+0x1a>
 801fc6c:	4621      	mov	r1, r4
 801fc6e:	4628      	mov	r0, r5
 801fc70:	f000 f81e 	bl	801fcb0 <__swsetup_r>
 801fc74:	2800      	cmp	r0, #0
 801fc76:	d0cb      	beq.n	801fc10 <__swbuf_r+0x28>
 801fc78:	f04f 37ff 	mov.w	r7, #4294967295
 801fc7c:	e7ea      	b.n	801fc54 <__swbuf_r+0x6c>
 801fc7e:	bf00      	nop
 801fc80:	08023ed0 	.word	0x08023ed0
 801fc84:	08023ef0 	.word	0x08023ef0
 801fc88:	08023eb0 	.word	0x08023eb0

0801fc8c <_write_r>:
 801fc8c:	b538      	push	{r3, r4, r5, lr}
 801fc8e:	4d07      	ldr	r5, [pc, #28]	; (801fcac <_write_r+0x20>)
 801fc90:	4604      	mov	r4, r0
 801fc92:	4608      	mov	r0, r1
 801fc94:	4611      	mov	r1, r2
 801fc96:	2200      	movs	r2, #0
 801fc98:	602a      	str	r2, [r5, #0]
 801fc9a:	461a      	mov	r2, r3
 801fc9c:	f7e4 f909 	bl	8003eb2 <_write>
 801fca0:	1c43      	adds	r3, r0, #1
 801fca2:	d102      	bne.n	801fcaa <_write_r+0x1e>
 801fca4:	682b      	ldr	r3, [r5, #0]
 801fca6:	b103      	cbz	r3, 801fcaa <_write_r+0x1e>
 801fca8:	6023      	str	r3, [r4, #0]
 801fcaa:	bd38      	pop	{r3, r4, r5, pc}
 801fcac:	2000707c 	.word	0x2000707c

0801fcb0 <__swsetup_r>:
 801fcb0:	4b32      	ldr	r3, [pc, #200]	; (801fd7c <__swsetup_r+0xcc>)
 801fcb2:	b570      	push	{r4, r5, r6, lr}
 801fcb4:	681d      	ldr	r5, [r3, #0]
 801fcb6:	4606      	mov	r6, r0
 801fcb8:	460c      	mov	r4, r1
 801fcba:	b125      	cbz	r5, 801fcc6 <__swsetup_r+0x16>
 801fcbc:	69ab      	ldr	r3, [r5, #24]
 801fcbe:	b913      	cbnz	r3, 801fcc6 <__swsetup_r+0x16>
 801fcc0:	4628      	mov	r0, r5
 801fcc2:	f7fe fe69 	bl	801e998 <__sinit>
 801fcc6:	4b2e      	ldr	r3, [pc, #184]	; (801fd80 <__swsetup_r+0xd0>)
 801fcc8:	429c      	cmp	r4, r3
 801fcca:	d10f      	bne.n	801fcec <__swsetup_r+0x3c>
 801fccc:	686c      	ldr	r4, [r5, #4]
 801fcce:	89a3      	ldrh	r3, [r4, #12]
 801fcd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fcd4:	0719      	lsls	r1, r3, #28
 801fcd6:	d42c      	bmi.n	801fd32 <__swsetup_r+0x82>
 801fcd8:	06dd      	lsls	r5, r3, #27
 801fcda:	d411      	bmi.n	801fd00 <__swsetup_r+0x50>
 801fcdc:	2309      	movs	r3, #9
 801fcde:	6033      	str	r3, [r6, #0]
 801fce0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fce4:	81a3      	strh	r3, [r4, #12]
 801fce6:	f04f 30ff 	mov.w	r0, #4294967295
 801fcea:	e03e      	b.n	801fd6a <__swsetup_r+0xba>
 801fcec:	4b25      	ldr	r3, [pc, #148]	; (801fd84 <__swsetup_r+0xd4>)
 801fcee:	429c      	cmp	r4, r3
 801fcf0:	d101      	bne.n	801fcf6 <__swsetup_r+0x46>
 801fcf2:	68ac      	ldr	r4, [r5, #8]
 801fcf4:	e7eb      	b.n	801fcce <__swsetup_r+0x1e>
 801fcf6:	4b24      	ldr	r3, [pc, #144]	; (801fd88 <__swsetup_r+0xd8>)
 801fcf8:	429c      	cmp	r4, r3
 801fcfa:	bf08      	it	eq
 801fcfc:	68ec      	ldreq	r4, [r5, #12]
 801fcfe:	e7e6      	b.n	801fcce <__swsetup_r+0x1e>
 801fd00:	0758      	lsls	r0, r3, #29
 801fd02:	d512      	bpl.n	801fd2a <__swsetup_r+0x7a>
 801fd04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fd06:	b141      	cbz	r1, 801fd1a <__swsetup_r+0x6a>
 801fd08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fd0c:	4299      	cmp	r1, r3
 801fd0e:	d002      	beq.n	801fd16 <__swsetup_r+0x66>
 801fd10:	4630      	mov	r0, r6
 801fd12:	f7fe ff3f 	bl	801eb94 <_free_r>
 801fd16:	2300      	movs	r3, #0
 801fd18:	6363      	str	r3, [r4, #52]	; 0x34
 801fd1a:	89a3      	ldrh	r3, [r4, #12]
 801fd1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fd20:	81a3      	strh	r3, [r4, #12]
 801fd22:	2300      	movs	r3, #0
 801fd24:	6063      	str	r3, [r4, #4]
 801fd26:	6923      	ldr	r3, [r4, #16]
 801fd28:	6023      	str	r3, [r4, #0]
 801fd2a:	89a3      	ldrh	r3, [r4, #12]
 801fd2c:	f043 0308 	orr.w	r3, r3, #8
 801fd30:	81a3      	strh	r3, [r4, #12]
 801fd32:	6923      	ldr	r3, [r4, #16]
 801fd34:	b94b      	cbnz	r3, 801fd4a <__swsetup_r+0x9a>
 801fd36:	89a3      	ldrh	r3, [r4, #12]
 801fd38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fd3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fd40:	d003      	beq.n	801fd4a <__swsetup_r+0x9a>
 801fd42:	4621      	mov	r1, r4
 801fd44:	4630      	mov	r0, r6
 801fd46:	f000 ff8b 	bl	8020c60 <__smakebuf_r>
 801fd4a:	89a0      	ldrh	r0, [r4, #12]
 801fd4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fd50:	f010 0301 	ands.w	r3, r0, #1
 801fd54:	d00a      	beq.n	801fd6c <__swsetup_r+0xbc>
 801fd56:	2300      	movs	r3, #0
 801fd58:	60a3      	str	r3, [r4, #8]
 801fd5a:	6963      	ldr	r3, [r4, #20]
 801fd5c:	425b      	negs	r3, r3
 801fd5e:	61a3      	str	r3, [r4, #24]
 801fd60:	6923      	ldr	r3, [r4, #16]
 801fd62:	b943      	cbnz	r3, 801fd76 <__swsetup_r+0xc6>
 801fd64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fd68:	d1ba      	bne.n	801fce0 <__swsetup_r+0x30>
 801fd6a:	bd70      	pop	{r4, r5, r6, pc}
 801fd6c:	0781      	lsls	r1, r0, #30
 801fd6e:	bf58      	it	pl
 801fd70:	6963      	ldrpl	r3, [r4, #20]
 801fd72:	60a3      	str	r3, [r4, #8]
 801fd74:	e7f4      	b.n	801fd60 <__swsetup_r+0xb0>
 801fd76:	2000      	movs	r0, #0
 801fd78:	e7f7      	b.n	801fd6a <__swsetup_r+0xba>
 801fd7a:	bf00      	nop
 801fd7c:	20000140 	.word	0x20000140
 801fd80:	08023ed0 	.word	0x08023ed0
 801fd84:	08023ef0 	.word	0x08023ef0
 801fd88:	08023eb0 	.word	0x08023eb0

0801fd8c <__register_exitproc>:
 801fd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fd90:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801fe4c <__register_exitproc+0xc0>
 801fd94:	4606      	mov	r6, r0
 801fd96:	f8d8 0000 	ldr.w	r0, [r8]
 801fd9a:	461f      	mov	r7, r3
 801fd9c:	460d      	mov	r5, r1
 801fd9e:	4691      	mov	r9, r2
 801fda0:	f7fe fecf 	bl	801eb42 <__retarget_lock_acquire_recursive>
 801fda4:	4b25      	ldr	r3, [pc, #148]	; (801fe3c <__register_exitproc+0xb0>)
 801fda6:	681c      	ldr	r4, [r3, #0]
 801fda8:	b934      	cbnz	r4, 801fdb8 <__register_exitproc+0x2c>
 801fdaa:	4c25      	ldr	r4, [pc, #148]	; (801fe40 <__register_exitproc+0xb4>)
 801fdac:	601c      	str	r4, [r3, #0]
 801fdae:	4b25      	ldr	r3, [pc, #148]	; (801fe44 <__register_exitproc+0xb8>)
 801fdb0:	b113      	cbz	r3, 801fdb8 <__register_exitproc+0x2c>
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801fdb8:	6863      	ldr	r3, [r4, #4]
 801fdba:	2b1f      	cmp	r3, #31
 801fdbc:	dd07      	ble.n	801fdce <__register_exitproc+0x42>
 801fdbe:	f8d8 0000 	ldr.w	r0, [r8]
 801fdc2:	f7fe fec0 	bl	801eb46 <__retarget_lock_release_recursive>
 801fdc6:	f04f 30ff 	mov.w	r0, #4294967295
 801fdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fdce:	b34e      	cbz	r6, 801fe24 <__register_exitproc+0x98>
 801fdd0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801fdd4:	b988      	cbnz	r0, 801fdfa <__register_exitproc+0x6e>
 801fdd6:	4b1c      	ldr	r3, [pc, #112]	; (801fe48 <__register_exitproc+0xbc>)
 801fdd8:	b923      	cbnz	r3, 801fde4 <__register_exitproc+0x58>
 801fdda:	f8d8 0000 	ldr.w	r0, [r8]
 801fdde:	f7fe feb1 	bl	801eb44 <__retarget_lock_release>
 801fde2:	e7f0      	b.n	801fdc6 <__register_exitproc+0x3a>
 801fde4:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fde8:	f7fe feae 	bl	801eb48 <malloc>
 801fdec:	2800      	cmp	r0, #0
 801fdee:	d0f4      	beq.n	801fdda <__register_exitproc+0x4e>
 801fdf0:	2300      	movs	r3, #0
 801fdf2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801fdf6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801fdfa:	6863      	ldr	r3, [r4, #4]
 801fdfc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801fe00:	2201      	movs	r2, #1
 801fe02:	409a      	lsls	r2, r3
 801fe04:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801fe08:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801fe0c:	4313      	orrs	r3, r2
 801fe0e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801fe12:	2e02      	cmp	r6, #2
 801fe14:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801fe18:	bf02      	ittt	eq
 801fe1a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801fe1e:	4313      	orreq	r3, r2
 801fe20:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801fe24:	6863      	ldr	r3, [r4, #4]
 801fe26:	f8d8 0000 	ldr.w	r0, [r8]
 801fe2a:	1c5a      	adds	r2, r3, #1
 801fe2c:	3302      	adds	r3, #2
 801fe2e:	6062      	str	r2, [r4, #4]
 801fe30:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801fe34:	f7fe fe87 	bl	801eb46 <__retarget_lock_release_recursive>
 801fe38:	2000      	movs	r0, #0
 801fe3a:	e7c6      	b.n	801fdca <__register_exitproc+0x3e>
 801fe3c:	2000710c 	.word	0x2000710c
 801fe40:	20007080 	.word	0x20007080
 801fe44:	08023f58 	.word	0x08023f58
 801fe48:	0801eb49 	.word	0x0801eb49
 801fe4c:	200001a4 	.word	0x200001a4

0801fe50 <_close_r>:
 801fe50:	b538      	push	{r3, r4, r5, lr}
 801fe52:	4d06      	ldr	r5, [pc, #24]	; (801fe6c <_close_r+0x1c>)
 801fe54:	2300      	movs	r3, #0
 801fe56:	4604      	mov	r4, r0
 801fe58:	4608      	mov	r0, r1
 801fe5a:	602b      	str	r3, [r5, #0]
 801fe5c:	f7e4 f845 	bl	8003eea <_close>
 801fe60:	1c43      	adds	r3, r0, #1
 801fe62:	d102      	bne.n	801fe6a <_close_r+0x1a>
 801fe64:	682b      	ldr	r3, [r5, #0]
 801fe66:	b103      	cbz	r3, 801fe6a <_close_r+0x1a>
 801fe68:	6023      	str	r3, [r4, #0]
 801fe6a:	bd38      	pop	{r3, r4, r5, pc}
 801fe6c:	2000707c 	.word	0x2000707c

0801fe70 <quorem>:
 801fe70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe74:	6903      	ldr	r3, [r0, #16]
 801fe76:	690c      	ldr	r4, [r1, #16]
 801fe78:	42a3      	cmp	r3, r4
 801fe7a:	4607      	mov	r7, r0
 801fe7c:	f2c0 8081 	blt.w	801ff82 <quorem+0x112>
 801fe80:	3c01      	subs	r4, #1
 801fe82:	f101 0814 	add.w	r8, r1, #20
 801fe86:	f100 0514 	add.w	r5, r0, #20
 801fe8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fe8e:	9301      	str	r3, [sp, #4]
 801fe90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fe94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fe98:	3301      	adds	r3, #1
 801fe9a:	429a      	cmp	r2, r3
 801fe9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fea4:	fbb2 f6f3 	udiv	r6, r2, r3
 801fea8:	d331      	bcc.n	801ff0e <quorem+0x9e>
 801feaa:	f04f 0e00 	mov.w	lr, #0
 801feae:	4640      	mov	r0, r8
 801feb0:	46ac      	mov	ip, r5
 801feb2:	46f2      	mov	sl, lr
 801feb4:	f850 2b04 	ldr.w	r2, [r0], #4
 801feb8:	b293      	uxth	r3, r2
 801feba:	fb06 e303 	mla	r3, r6, r3, lr
 801febe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fec2:	b29b      	uxth	r3, r3
 801fec4:	ebaa 0303 	sub.w	r3, sl, r3
 801fec8:	f8dc a000 	ldr.w	sl, [ip]
 801fecc:	0c12      	lsrs	r2, r2, #16
 801fece:	fa13 f38a 	uxtah	r3, r3, sl
 801fed2:	fb06 e202 	mla	r2, r6, r2, lr
 801fed6:	9300      	str	r3, [sp, #0]
 801fed8:	9b00      	ldr	r3, [sp, #0]
 801feda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fede:	b292      	uxth	r2, r2
 801fee0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fee8:	f8bd 3000 	ldrh.w	r3, [sp]
 801feec:	4581      	cmp	r9, r0
 801feee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fef2:	f84c 3b04 	str.w	r3, [ip], #4
 801fef6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fefa:	d2db      	bcs.n	801feb4 <quorem+0x44>
 801fefc:	f855 300b 	ldr.w	r3, [r5, fp]
 801ff00:	b92b      	cbnz	r3, 801ff0e <quorem+0x9e>
 801ff02:	9b01      	ldr	r3, [sp, #4]
 801ff04:	3b04      	subs	r3, #4
 801ff06:	429d      	cmp	r5, r3
 801ff08:	461a      	mov	r2, r3
 801ff0a:	d32e      	bcc.n	801ff6a <quorem+0xfa>
 801ff0c:	613c      	str	r4, [r7, #16]
 801ff0e:	4638      	mov	r0, r7
 801ff10:	f001 f98e 	bl	8021230 <__mcmp>
 801ff14:	2800      	cmp	r0, #0
 801ff16:	db24      	blt.n	801ff62 <quorem+0xf2>
 801ff18:	3601      	adds	r6, #1
 801ff1a:	4628      	mov	r0, r5
 801ff1c:	f04f 0c00 	mov.w	ip, #0
 801ff20:	f858 2b04 	ldr.w	r2, [r8], #4
 801ff24:	f8d0 e000 	ldr.w	lr, [r0]
 801ff28:	b293      	uxth	r3, r2
 801ff2a:	ebac 0303 	sub.w	r3, ip, r3
 801ff2e:	0c12      	lsrs	r2, r2, #16
 801ff30:	fa13 f38e 	uxtah	r3, r3, lr
 801ff34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ff38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ff3c:	b29b      	uxth	r3, r3
 801ff3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ff42:	45c1      	cmp	r9, r8
 801ff44:	f840 3b04 	str.w	r3, [r0], #4
 801ff48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ff4c:	d2e8      	bcs.n	801ff20 <quorem+0xb0>
 801ff4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ff52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ff56:	b922      	cbnz	r2, 801ff62 <quorem+0xf2>
 801ff58:	3b04      	subs	r3, #4
 801ff5a:	429d      	cmp	r5, r3
 801ff5c:	461a      	mov	r2, r3
 801ff5e:	d30a      	bcc.n	801ff76 <quorem+0x106>
 801ff60:	613c      	str	r4, [r7, #16]
 801ff62:	4630      	mov	r0, r6
 801ff64:	b003      	add	sp, #12
 801ff66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff6a:	6812      	ldr	r2, [r2, #0]
 801ff6c:	3b04      	subs	r3, #4
 801ff6e:	2a00      	cmp	r2, #0
 801ff70:	d1cc      	bne.n	801ff0c <quorem+0x9c>
 801ff72:	3c01      	subs	r4, #1
 801ff74:	e7c7      	b.n	801ff06 <quorem+0x96>
 801ff76:	6812      	ldr	r2, [r2, #0]
 801ff78:	3b04      	subs	r3, #4
 801ff7a:	2a00      	cmp	r2, #0
 801ff7c:	d1f0      	bne.n	801ff60 <quorem+0xf0>
 801ff7e:	3c01      	subs	r4, #1
 801ff80:	e7eb      	b.n	801ff5a <quorem+0xea>
 801ff82:	2000      	movs	r0, #0
 801ff84:	e7ee      	b.n	801ff64 <quorem+0xf4>
	...

0801ff88 <_dtoa_r>:
 801ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff8c:	ed2d 8b02 	vpush	{d8}
 801ff90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ff92:	b091      	sub	sp, #68	; 0x44
 801ff94:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ff98:	ec59 8b10 	vmov	r8, r9, d0
 801ff9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ff9e:	9106      	str	r1, [sp, #24]
 801ffa0:	4606      	mov	r6, r0
 801ffa2:	9208      	str	r2, [sp, #32]
 801ffa4:	930c      	str	r3, [sp, #48]	; 0x30
 801ffa6:	b975      	cbnz	r5, 801ffc6 <_dtoa_r+0x3e>
 801ffa8:	2010      	movs	r0, #16
 801ffaa:	f7fe fdcd 	bl	801eb48 <malloc>
 801ffae:	4602      	mov	r2, r0
 801ffb0:	6270      	str	r0, [r6, #36]	; 0x24
 801ffb2:	b920      	cbnz	r0, 801ffbe <_dtoa_r+0x36>
 801ffb4:	4baa      	ldr	r3, [pc, #680]	; (8020260 <_dtoa_r+0x2d8>)
 801ffb6:	21ea      	movs	r1, #234	; 0xea
 801ffb8:	48aa      	ldr	r0, [pc, #680]	; (8020264 <_dtoa_r+0x2dc>)
 801ffba:	f7fe fc67 	bl	801e88c <__assert_func>
 801ffbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ffc2:	6005      	str	r5, [r0, #0]
 801ffc4:	60c5      	str	r5, [r0, #12]
 801ffc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ffc8:	6819      	ldr	r1, [r3, #0]
 801ffca:	b151      	cbz	r1, 801ffe2 <_dtoa_r+0x5a>
 801ffcc:	685a      	ldr	r2, [r3, #4]
 801ffce:	604a      	str	r2, [r1, #4]
 801ffd0:	2301      	movs	r3, #1
 801ffd2:	4093      	lsls	r3, r2
 801ffd4:	608b      	str	r3, [r1, #8]
 801ffd6:	4630      	mov	r0, r6
 801ffd8:	f000 fee8 	bl	8020dac <_Bfree>
 801ffdc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ffde:	2200      	movs	r2, #0
 801ffe0:	601a      	str	r2, [r3, #0]
 801ffe2:	f1b9 0300 	subs.w	r3, r9, #0
 801ffe6:	bfbb      	ittet	lt
 801ffe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ffec:	9303      	strlt	r3, [sp, #12]
 801ffee:	2300      	movge	r3, #0
 801fff0:	2201      	movlt	r2, #1
 801fff2:	bfac      	ite	ge
 801fff4:	6023      	strge	r3, [r4, #0]
 801fff6:	6022      	strlt	r2, [r4, #0]
 801fff8:	4b9b      	ldr	r3, [pc, #620]	; (8020268 <_dtoa_r+0x2e0>)
 801fffa:	9c03      	ldr	r4, [sp, #12]
 801fffc:	43a3      	bics	r3, r4
 801fffe:	d11c      	bne.n	802003a <_dtoa_r+0xb2>
 8020000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020002:	f242 730f 	movw	r3, #9999	; 0x270f
 8020006:	6013      	str	r3, [r2, #0]
 8020008:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802000c:	ea53 0308 	orrs.w	r3, r3, r8
 8020010:	f000 84fd 	beq.w	8020a0e <_dtoa_r+0xa86>
 8020014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020016:	b963      	cbnz	r3, 8020032 <_dtoa_r+0xaa>
 8020018:	4b94      	ldr	r3, [pc, #592]	; (802026c <_dtoa_r+0x2e4>)
 802001a:	e01f      	b.n	802005c <_dtoa_r+0xd4>
 802001c:	4b94      	ldr	r3, [pc, #592]	; (8020270 <_dtoa_r+0x2e8>)
 802001e:	9301      	str	r3, [sp, #4]
 8020020:	3308      	adds	r3, #8
 8020022:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020024:	6013      	str	r3, [r2, #0]
 8020026:	9801      	ldr	r0, [sp, #4]
 8020028:	b011      	add	sp, #68	; 0x44
 802002a:	ecbd 8b02 	vpop	{d8}
 802002e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020032:	4b8e      	ldr	r3, [pc, #568]	; (802026c <_dtoa_r+0x2e4>)
 8020034:	9301      	str	r3, [sp, #4]
 8020036:	3303      	adds	r3, #3
 8020038:	e7f3      	b.n	8020022 <_dtoa_r+0x9a>
 802003a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802003e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020046:	d10b      	bne.n	8020060 <_dtoa_r+0xd8>
 8020048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802004a:	2301      	movs	r3, #1
 802004c:	6013      	str	r3, [r2, #0]
 802004e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020050:	2b00      	cmp	r3, #0
 8020052:	f000 84d9 	beq.w	8020a08 <_dtoa_r+0xa80>
 8020056:	4887      	ldr	r0, [pc, #540]	; (8020274 <_dtoa_r+0x2ec>)
 8020058:	6018      	str	r0, [r3, #0]
 802005a:	1e43      	subs	r3, r0, #1
 802005c:	9301      	str	r3, [sp, #4]
 802005e:	e7e2      	b.n	8020026 <_dtoa_r+0x9e>
 8020060:	a90f      	add	r1, sp, #60	; 0x3c
 8020062:	aa0e      	add	r2, sp, #56	; 0x38
 8020064:	4630      	mov	r0, r6
 8020066:	eeb0 0b48 	vmov.f64	d0, d8
 802006a:	f001 f987 	bl	802137c <__d2b>
 802006e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8020072:	4605      	mov	r5, r0
 8020074:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020076:	2900      	cmp	r1, #0
 8020078:	d046      	beq.n	8020108 <_dtoa_r+0x180>
 802007a:	ee18 4a90 	vmov	r4, s17
 802007e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020082:	ec53 2b18 	vmov	r2, r3, d8
 8020086:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802008a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802008e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8020092:	2400      	movs	r4, #0
 8020094:	ec43 2b16 	vmov	d6, r2, r3
 8020098:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802009c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8020248 <_dtoa_r+0x2c0>
 80200a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80200a4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8020250 <_dtoa_r+0x2c8>
 80200a8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80200ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8020258 <_dtoa_r+0x2d0>
 80200b0:	ee07 1a90 	vmov	s15, r1
 80200b4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80200b8:	eeb0 7b46 	vmov.f64	d7, d6
 80200bc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80200c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80200c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80200c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200cc:	ee16 ba90 	vmov	fp, s13
 80200d0:	940a      	str	r4, [sp, #40]	; 0x28
 80200d2:	d508      	bpl.n	80200e6 <_dtoa_r+0x15e>
 80200d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80200d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80200dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200e0:	bf18      	it	ne
 80200e2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80200e6:	f1bb 0f16 	cmp.w	fp, #22
 80200ea:	d82f      	bhi.n	802014c <_dtoa_r+0x1c4>
 80200ec:	4b62      	ldr	r3, [pc, #392]	; (8020278 <_dtoa_r+0x2f0>)
 80200ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80200f2:	ed93 7b00 	vldr	d7, [r3]
 80200f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80200fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200fe:	d501      	bpl.n	8020104 <_dtoa_r+0x17c>
 8020100:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020104:	2300      	movs	r3, #0
 8020106:	e022      	b.n	802014e <_dtoa_r+0x1c6>
 8020108:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802010a:	4401      	add	r1, r0
 802010c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8020110:	2b20      	cmp	r3, #32
 8020112:	bfc1      	itttt	gt
 8020114:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020118:	fa04 f303 	lslgt.w	r3, r4, r3
 802011c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8020120:	fa28 f804 	lsrgt.w	r8, r8, r4
 8020124:	bfd6      	itet	le
 8020126:	f1c3 0320 	rsble	r3, r3, #32
 802012a:	ea43 0808 	orrgt.w	r8, r3, r8
 802012e:	fa08 f803 	lslle.w	r8, r8, r3
 8020132:	ee07 8a90 	vmov	s15, r8
 8020136:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802013a:	3901      	subs	r1, #1
 802013c:	ee17 4a90 	vmov	r4, s15
 8020140:	ec53 2b17 	vmov	r2, r3, d7
 8020144:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8020148:	2401      	movs	r4, #1
 802014a:	e7a3      	b.n	8020094 <_dtoa_r+0x10c>
 802014c:	2301      	movs	r3, #1
 802014e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020150:	1a43      	subs	r3, r0, r1
 8020152:	1e5a      	subs	r2, r3, #1
 8020154:	bf45      	ittet	mi
 8020156:	f1c3 0301 	rsbmi	r3, r3, #1
 802015a:	9304      	strmi	r3, [sp, #16]
 802015c:	2300      	movpl	r3, #0
 802015e:	2300      	movmi	r3, #0
 8020160:	9205      	str	r2, [sp, #20]
 8020162:	bf54      	ite	pl
 8020164:	9304      	strpl	r3, [sp, #16]
 8020166:	9305      	strmi	r3, [sp, #20]
 8020168:	f1bb 0f00 	cmp.w	fp, #0
 802016c:	db18      	blt.n	80201a0 <_dtoa_r+0x218>
 802016e:	9b05      	ldr	r3, [sp, #20]
 8020170:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8020174:	445b      	add	r3, fp
 8020176:	9305      	str	r3, [sp, #20]
 8020178:	2300      	movs	r3, #0
 802017a:	9a06      	ldr	r2, [sp, #24]
 802017c:	2a09      	cmp	r2, #9
 802017e:	d849      	bhi.n	8020214 <_dtoa_r+0x28c>
 8020180:	2a05      	cmp	r2, #5
 8020182:	bfc4      	itt	gt
 8020184:	3a04      	subgt	r2, #4
 8020186:	9206      	strgt	r2, [sp, #24]
 8020188:	9a06      	ldr	r2, [sp, #24]
 802018a:	f1a2 0202 	sub.w	r2, r2, #2
 802018e:	bfcc      	ite	gt
 8020190:	2400      	movgt	r4, #0
 8020192:	2401      	movle	r4, #1
 8020194:	2a03      	cmp	r2, #3
 8020196:	d848      	bhi.n	802022a <_dtoa_r+0x2a2>
 8020198:	e8df f002 	tbb	[pc, r2]
 802019c:	3a2c2e0b 	.word	0x3a2c2e0b
 80201a0:	9b04      	ldr	r3, [sp, #16]
 80201a2:	2200      	movs	r2, #0
 80201a4:	eba3 030b 	sub.w	r3, r3, fp
 80201a8:	9304      	str	r3, [sp, #16]
 80201aa:	9209      	str	r2, [sp, #36]	; 0x24
 80201ac:	f1cb 0300 	rsb	r3, fp, #0
 80201b0:	e7e3      	b.n	802017a <_dtoa_r+0x1f2>
 80201b2:	2200      	movs	r2, #0
 80201b4:	9207      	str	r2, [sp, #28]
 80201b6:	9a08      	ldr	r2, [sp, #32]
 80201b8:	2a00      	cmp	r2, #0
 80201ba:	dc39      	bgt.n	8020230 <_dtoa_r+0x2a8>
 80201bc:	f04f 0a01 	mov.w	sl, #1
 80201c0:	46d1      	mov	r9, sl
 80201c2:	4652      	mov	r2, sl
 80201c4:	f8cd a020 	str.w	sl, [sp, #32]
 80201c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80201ca:	2100      	movs	r1, #0
 80201cc:	6079      	str	r1, [r7, #4]
 80201ce:	2004      	movs	r0, #4
 80201d0:	f100 0c14 	add.w	ip, r0, #20
 80201d4:	4594      	cmp	ip, r2
 80201d6:	6879      	ldr	r1, [r7, #4]
 80201d8:	d92f      	bls.n	802023a <_dtoa_r+0x2b2>
 80201da:	4630      	mov	r0, r6
 80201dc:	930d      	str	r3, [sp, #52]	; 0x34
 80201de:	f000 fda5 	bl	8020d2c <_Balloc>
 80201e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201e4:	9001      	str	r0, [sp, #4]
 80201e6:	4602      	mov	r2, r0
 80201e8:	2800      	cmp	r0, #0
 80201ea:	d149      	bne.n	8020280 <_dtoa_r+0x2f8>
 80201ec:	4b23      	ldr	r3, [pc, #140]	; (802027c <_dtoa_r+0x2f4>)
 80201ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80201f2:	e6e1      	b.n	801ffb8 <_dtoa_r+0x30>
 80201f4:	2201      	movs	r2, #1
 80201f6:	e7dd      	b.n	80201b4 <_dtoa_r+0x22c>
 80201f8:	2200      	movs	r2, #0
 80201fa:	9207      	str	r2, [sp, #28]
 80201fc:	9a08      	ldr	r2, [sp, #32]
 80201fe:	eb0b 0a02 	add.w	sl, fp, r2
 8020202:	f10a 0901 	add.w	r9, sl, #1
 8020206:	464a      	mov	r2, r9
 8020208:	2a01      	cmp	r2, #1
 802020a:	bfb8      	it	lt
 802020c:	2201      	movlt	r2, #1
 802020e:	e7db      	b.n	80201c8 <_dtoa_r+0x240>
 8020210:	2201      	movs	r2, #1
 8020212:	e7f2      	b.n	80201fa <_dtoa_r+0x272>
 8020214:	2401      	movs	r4, #1
 8020216:	2200      	movs	r2, #0
 8020218:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802021c:	f04f 3aff 	mov.w	sl, #4294967295
 8020220:	2100      	movs	r1, #0
 8020222:	46d1      	mov	r9, sl
 8020224:	2212      	movs	r2, #18
 8020226:	9108      	str	r1, [sp, #32]
 8020228:	e7ce      	b.n	80201c8 <_dtoa_r+0x240>
 802022a:	2201      	movs	r2, #1
 802022c:	9207      	str	r2, [sp, #28]
 802022e:	e7f5      	b.n	802021c <_dtoa_r+0x294>
 8020230:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020234:	46d1      	mov	r9, sl
 8020236:	4652      	mov	r2, sl
 8020238:	e7c6      	b.n	80201c8 <_dtoa_r+0x240>
 802023a:	3101      	adds	r1, #1
 802023c:	6079      	str	r1, [r7, #4]
 802023e:	0040      	lsls	r0, r0, #1
 8020240:	e7c6      	b.n	80201d0 <_dtoa_r+0x248>
 8020242:	bf00      	nop
 8020244:	f3af 8000 	nop.w
 8020248:	636f4361 	.word	0x636f4361
 802024c:	3fd287a7 	.word	0x3fd287a7
 8020250:	8b60c8b3 	.word	0x8b60c8b3
 8020254:	3fc68a28 	.word	0x3fc68a28
 8020258:	509f79fb 	.word	0x509f79fb
 802025c:	3fd34413 	.word	0x3fd34413
 8020260:	0802406a 	.word	0x0802406a
 8020264:	08024081 	.word	0x08024081
 8020268:	7ff00000 	.word	0x7ff00000
 802026c:	08024066 	.word	0x08024066
 8020270:	0802405d 	.word	0x0802405d
 8020274:	0802360b 	.word	0x0802360b
 8020278:	08024178 	.word	0x08024178
 802027c:	080240dc 	.word	0x080240dc
 8020280:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8020282:	9901      	ldr	r1, [sp, #4]
 8020284:	6011      	str	r1, [r2, #0]
 8020286:	f1b9 0f0e 	cmp.w	r9, #14
 802028a:	d86c      	bhi.n	8020366 <_dtoa_r+0x3de>
 802028c:	2c00      	cmp	r4, #0
 802028e:	d06a      	beq.n	8020366 <_dtoa_r+0x3de>
 8020290:	f1bb 0f00 	cmp.w	fp, #0
 8020294:	f340 80a0 	ble.w	80203d8 <_dtoa_r+0x450>
 8020298:	49c1      	ldr	r1, [pc, #772]	; (80205a0 <_dtoa_r+0x618>)
 802029a:	f00b 020f 	and.w	r2, fp, #15
 802029e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80202a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80202a6:	ed92 7b00 	vldr	d7, [r2]
 80202aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80202ae:	f000 8087 	beq.w	80203c0 <_dtoa_r+0x438>
 80202b2:	4abc      	ldr	r2, [pc, #752]	; (80205a4 <_dtoa_r+0x61c>)
 80202b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80202b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80202bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80202c0:	f001 010f 	and.w	r1, r1, #15
 80202c4:	2203      	movs	r2, #3
 80202c6:	48b7      	ldr	r0, [pc, #732]	; (80205a4 <_dtoa_r+0x61c>)
 80202c8:	2900      	cmp	r1, #0
 80202ca:	d17b      	bne.n	80203c4 <_dtoa_r+0x43c>
 80202cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80202d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80202d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80202d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80202da:	2900      	cmp	r1, #0
 80202dc:	f000 80a2 	beq.w	8020424 <_dtoa_r+0x49c>
 80202e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80202e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80202e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80202ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202f0:	f140 8098 	bpl.w	8020424 <_dtoa_r+0x49c>
 80202f4:	f1b9 0f00 	cmp.w	r9, #0
 80202f8:	f000 8094 	beq.w	8020424 <_dtoa_r+0x49c>
 80202fc:	f1ba 0f00 	cmp.w	sl, #0
 8020300:	dd2f      	ble.n	8020362 <_dtoa_r+0x3da>
 8020302:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8020306:	ee27 7b06 	vmul.f64	d7, d7, d6
 802030a:	ed8d 7b02 	vstr	d7, [sp, #8]
 802030e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8020312:	3201      	adds	r2, #1
 8020314:	4650      	mov	r0, sl
 8020316:	ed9d 6b02 	vldr	d6, [sp, #8]
 802031a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802031e:	ee07 2a90 	vmov	s15, r2
 8020322:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8020326:	eea7 5b06 	vfma.f64	d5, d7, d6
 802032a:	ee15 4a90 	vmov	r4, s11
 802032e:	ec52 1b15 	vmov	r1, r2, d5
 8020332:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8020336:	2800      	cmp	r0, #0
 8020338:	d177      	bne.n	802042a <_dtoa_r+0x4a2>
 802033a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802033e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8020342:	ec42 1b17 	vmov	d7, r1, r2
 8020346:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802034e:	f300 8263 	bgt.w	8020818 <_dtoa_r+0x890>
 8020352:	eeb1 7b47 	vneg.f64	d7, d7
 8020356:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802035a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802035e:	f100 8258 	bmi.w	8020812 <_dtoa_r+0x88a>
 8020362:	ed8d 8b02 	vstr	d8, [sp, #8]
 8020366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020368:	2a00      	cmp	r2, #0
 802036a:	f2c0 811d 	blt.w	80205a8 <_dtoa_r+0x620>
 802036e:	f1bb 0f0e 	cmp.w	fp, #14
 8020372:	f300 8119 	bgt.w	80205a8 <_dtoa_r+0x620>
 8020376:	4b8a      	ldr	r3, [pc, #552]	; (80205a0 <_dtoa_r+0x618>)
 8020378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802037c:	ed93 6b00 	vldr	d6, [r3]
 8020380:	9b08      	ldr	r3, [sp, #32]
 8020382:	2b00      	cmp	r3, #0
 8020384:	f280 80b7 	bge.w	80204f6 <_dtoa_r+0x56e>
 8020388:	f1b9 0f00 	cmp.w	r9, #0
 802038c:	f300 80b3 	bgt.w	80204f6 <_dtoa_r+0x56e>
 8020390:	f040 823f 	bne.w	8020812 <_dtoa_r+0x88a>
 8020394:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8020398:	ee26 6b07 	vmul.f64	d6, d6, d7
 802039c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80203a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80203a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203a8:	464c      	mov	r4, r9
 80203aa:	464f      	mov	r7, r9
 80203ac:	f280 8215 	bge.w	80207da <_dtoa_r+0x852>
 80203b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80203b4:	2331      	movs	r3, #49	; 0x31
 80203b6:	f808 3b01 	strb.w	r3, [r8], #1
 80203ba:	f10b 0b01 	add.w	fp, fp, #1
 80203be:	e211      	b.n	80207e4 <_dtoa_r+0x85c>
 80203c0:	2202      	movs	r2, #2
 80203c2:	e780      	b.n	80202c6 <_dtoa_r+0x33e>
 80203c4:	07cc      	lsls	r4, r1, #31
 80203c6:	d504      	bpl.n	80203d2 <_dtoa_r+0x44a>
 80203c8:	ed90 6b00 	vldr	d6, [r0]
 80203cc:	3201      	adds	r2, #1
 80203ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80203d2:	1049      	asrs	r1, r1, #1
 80203d4:	3008      	adds	r0, #8
 80203d6:	e777      	b.n	80202c8 <_dtoa_r+0x340>
 80203d8:	d022      	beq.n	8020420 <_dtoa_r+0x498>
 80203da:	f1cb 0100 	rsb	r1, fp, #0
 80203de:	4a70      	ldr	r2, [pc, #448]	; (80205a0 <_dtoa_r+0x618>)
 80203e0:	f001 000f 	and.w	r0, r1, #15
 80203e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80203e8:	ed92 7b00 	vldr	d7, [r2]
 80203ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80203f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80203f4:	486b      	ldr	r0, [pc, #428]	; (80205a4 <_dtoa_r+0x61c>)
 80203f6:	1109      	asrs	r1, r1, #4
 80203f8:	2400      	movs	r4, #0
 80203fa:	2202      	movs	r2, #2
 80203fc:	b929      	cbnz	r1, 802040a <_dtoa_r+0x482>
 80203fe:	2c00      	cmp	r4, #0
 8020400:	f43f af6a 	beq.w	80202d8 <_dtoa_r+0x350>
 8020404:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020408:	e766      	b.n	80202d8 <_dtoa_r+0x350>
 802040a:	07cf      	lsls	r7, r1, #31
 802040c:	d505      	bpl.n	802041a <_dtoa_r+0x492>
 802040e:	ed90 6b00 	vldr	d6, [r0]
 8020412:	3201      	adds	r2, #1
 8020414:	2401      	movs	r4, #1
 8020416:	ee27 7b06 	vmul.f64	d7, d7, d6
 802041a:	1049      	asrs	r1, r1, #1
 802041c:	3008      	adds	r0, #8
 802041e:	e7ed      	b.n	80203fc <_dtoa_r+0x474>
 8020420:	2202      	movs	r2, #2
 8020422:	e759      	b.n	80202d8 <_dtoa_r+0x350>
 8020424:	465f      	mov	r7, fp
 8020426:	4648      	mov	r0, r9
 8020428:	e775      	b.n	8020316 <_dtoa_r+0x38e>
 802042a:	ec42 1b17 	vmov	d7, r1, r2
 802042e:	4a5c      	ldr	r2, [pc, #368]	; (80205a0 <_dtoa_r+0x618>)
 8020430:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8020434:	ed12 4b02 	vldr	d4, [r2, #-8]
 8020438:	9a01      	ldr	r2, [sp, #4]
 802043a:	1814      	adds	r4, r2, r0
 802043c:	9a07      	ldr	r2, [sp, #28]
 802043e:	b352      	cbz	r2, 8020496 <_dtoa_r+0x50e>
 8020440:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8020444:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8020448:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802044c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8020450:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020454:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020458:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802045c:	ee14 2a90 	vmov	r2, s9
 8020460:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020464:	3230      	adds	r2, #48	; 0x30
 8020466:	ee36 6b45 	vsub.f64	d6, d6, d5
 802046a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020472:	f808 2b01 	strb.w	r2, [r8], #1
 8020476:	d439      	bmi.n	80204ec <_dtoa_r+0x564>
 8020478:	ee32 5b46 	vsub.f64	d5, d2, d6
 802047c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8020480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020484:	d472      	bmi.n	802056c <_dtoa_r+0x5e4>
 8020486:	45a0      	cmp	r8, r4
 8020488:	f43f af6b 	beq.w	8020362 <_dtoa_r+0x3da>
 802048c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8020490:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020494:	e7e0      	b.n	8020458 <_dtoa_r+0x4d0>
 8020496:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802049a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802049e:	4621      	mov	r1, r4
 80204a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80204a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80204a8:	ee14 2a90 	vmov	r2, s9
 80204ac:	3230      	adds	r2, #48	; 0x30
 80204ae:	f808 2b01 	strb.w	r2, [r8], #1
 80204b2:	45a0      	cmp	r8, r4
 80204b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80204b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80204bc:	d118      	bne.n	80204f0 <_dtoa_r+0x568>
 80204be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80204c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80204c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80204ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204ce:	dc4d      	bgt.n	802056c <_dtoa_r+0x5e4>
 80204d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80204d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80204d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204dc:	f57f af41 	bpl.w	8020362 <_dtoa_r+0x3da>
 80204e0:	4688      	mov	r8, r1
 80204e2:	3901      	subs	r1, #1
 80204e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80204e8:	2b30      	cmp	r3, #48	; 0x30
 80204ea:	d0f9      	beq.n	80204e0 <_dtoa_r+0x558>
 80204ec:	46bb      	mov	fp, r7
 80204ee:	e02a      	b.n	8020546 <_dtoa_r+0x5be>
 80204f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80204f4:	e7d6      	b.n	80204a4 <_dtoa_r+0x51c>
 80204f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80204fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80204fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020502:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8020506:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802050a:	ee15 3a10 	vmov	r3, s10
 802050e:	3330      	adds	r3, #48	; 0x30
 8020510:	f808 3b01 	strb.w	r3, [r8], #1
 8020514:	9b01      	ldr	r3, [sp, #4]
 8020516:	eba8 0303 	sub.w	r3, r8, r3
 802051a:	4599      	cmp	r9, r3
 802051c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8020520:	eea3 7b46 	vfms.f64	d7, d3, d6
 8020524:	d133      	bne.n	802058e <_dtoa_r+0x606>
 8020526:	ee37 7b07 	vadd.f64	d7, d7, d7
 802052a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020532:	dc1a      	bgt.n	802056a <_dtoa_r+0x5e2>
 8020534:	eeb4 7b46 	vcmp.f64	d7, d6
 8020538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802053c:	d103      	bne.n	8020546 <_dtoa_r+0x5be>
 802053e:	ee15 3a10 	vmov	r3, s10
 8020542:	07d9      	lsls	r1, r3, #31
 8020544:	d411      	bmi.n	802056a <_dtoa_r+0x5e2>
 8020546:	4629      	mov	r1, r5
 8020548:	4630      	mov	r0, r6
 802054a:	f000 fc2f 	bl	8020dac <_Bfree>
 802054e:	2300      	movs	r3, #0
 8020550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020552:	f888 3000 	strb.w	r3, [r8]
 8020556:	f10b 0301 	add.w	r3, fp, #1
 802055a:	6013      	str	r3, [r2, #0]
 802055c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802055e:	2b00      	cmp	r3, #0
 8020560:	f43f ad61 	beq.w	8020026 <_dtoa_r+0x9e>
 8020564:	f8c3 8000 	str.w	r8, [r3]
 8020568:	e55d      	b.n	8020026 <_dtoa_r+0x9e>
 802056a:	465f      	mov	r7, fp
 802056c:	4643      	mov	r3, r8
 802056e:	4698      	mov	r8, r3
 8020570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020574:	2a39      	cmp	r2, #57	; 0x39
 8020576:	d106      	bne.n	8020586 <_dtoa_r+0x5fe>
 8020578:	9a01      	ldr	r2, [sp, #4]
 802057a:	429a      	cmp	r2, r3
 802057c:	d1f7      	bne.n	802056e <_dtoa_r+0x5e6>
 802057e:	9901      	ldr	r1, [sp, #4]
 8020580:	2230      	movs	r2, #48	; 0x30
 8020582:	3701      	adds	r7, #1
 8020584:	700a      	strb	r2, [r1, #0]
 8020586:	781a      	ldrb	r2, [r3, #0]
 8020588:	3201      	adds	r2, #1
 802058a:	701a      	strb	r2, [r3, #0]
 802058c:	e7ae      	b.n	80204ec <_dtoa_r+0x564>
 802058e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8020592:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802059a:	d1b2      	bne.n	8020502 <_dtoa_r+0x57a>
 802059c:	e7d3      	b.n	8020546 <_dtoa_r+0x5be>
 802059e:	bf00      	nop
 80205a0:	08024178 	.word	0x08024178
 80205a4:	08024150 	.word	0x08024150
 80205a8:	9907      	ldr	r1, [sp, #28]
 80205aa:	2900      	cmp	r1, #0
 80205ac:	f000 80d0 	beq.w	8020750 <_dtoa_r+0x7c8>
 80205b0:	9906      	ldr	r1, [sp, #24]
 80205b2:	2901      	cmp	r1, #1
 80205b4:	f300 80b4 	bgt.w	8020720 <_dtoa_r+0x798>
 80205b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80205ba:	2900      	cmp	r1, #0
 80205bc:	f000 80ac 	beq.w	8020718 <_dtoa_r+0x790>
 80205c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80205c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80205c8:	461c      	mov	r4, r3
 80205ca:	930a      	str	r3, [sp, #40]	; 0x28
 80205cc:	9b04      	ldr	r3, [sp, #16]
 80205ce:	4413      	add	r3, r2
 80205d0:	9304      	str	r3, [sp, #16]
 80205d2:	9b05      	ldr	r3, [sp, #20]
 80205d4:	2101      	movs	r1, #1
 80205d6:	4413      	add	r3, r2
 80205d8:	4630      	mov	r0, r6
 80205da:	9305      	str	r3, [sp, #20]
 80205dc:	f000 fc9e 	bl	8020f1c <__i2b>
 80205e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205e2:	4607      	mov	r7, r0
 80205e4:	f1b8 0f00 	cmp.w	r8, #0
 80205e8:	dd0d      	ble.n	8020606 <_dtoa_r+0x67e>
 80205ea:	9a05      	ldr	r2, [sp, #20]
 80205ec:	2a00      	cmp	r2, #0
 80205ee:	dd0a      	ble.n	8020606 <_dtoa_r+0x67e>
 80205f0:	4542      	cmp	r2, r8
 80205f2:	9904      	ldr	r1, [sp, #16]
 80205f4:	bfa8      	it	ge
 80205f6:	4642      	movge	r2, r8
 80205f8:	1a89      	subs	r1, r1, r2
 80205fa:	9104      	str	r1, [sp, #16]
 80205fc:	9905      	ldr	r1, [sp, #20]
 80205fe:	eba8 0802 	sub.w	r8, r8, r2
 8020602:	1a8a      	subs	r2, r1, r2
 8020604:	9205      	str	r2, [sp, #20]
 8020606:	b303      	cbz	r3, 802064a <_dtoa_r+0x6c2>
 8020608:	9a07      	ldr	r2, [sp, #28]
 802060a:	2a00      	cmp	r2, #0
 802060c:	f000 80a5 	beq.w	802075a <_dtoa_r+0x7d2>
 8020610:	2c00      	cmp	r4, #0
 8020612:	dd13      	ble.n	802063c <_dtoa_r+0x6b4>
 8020614:	4639      	mov	r1, r7
 8020616:	4622      	mov	r2, r4
 8020618:	4630      	mov	r0, r6
 802061a:	930d      	str	r3, [sp, #52]	; 0x34
 802061c:	f000 fd3e 	bl	802109c <__pow5mult>
 8020620:	462a      	mov	r2, r5
 8020622:	4601      	mov	r1, r0
 8020624:	4607      	mov	r7, r0
 8020626:	4630      	mov	r0, r6
 8020628:	f000 fc8e 	bl	8020f48 <__multiply>
 802062c:	4629      	mov	r1, r5
 802062e:	900a      	str	r0, [sp, #40]	; 0x28
 8020630:	4630      	mov	r0, r6
 8020632:	f000 fbbb 	bl	8020dac <_Bfree>
 8020636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802063a:	4615      	mov	r5, r2
 802063c:	1b1a      	subs	r2, r3, r4
 802063e:	d004      	beq.n	802064a <_dtoa_r+0x6c2>
 8020640:	4629      	mov	r1, r5
 8020642:	4630      	mov	r0, r6
 8020644:	f000 fd2a 	bl	802109c <__pow5mult>
 8020648:	4605      	mov	r5, r0
 802064a:	2101      	movs	r1, #1
 802064c:	4630      	mov	r0, r6
 802064e:	f000 fc65 	bl	8020f1c <__i2b>
 8020652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020654:	2b00      	cmp	r3, #0
 8020656:	4604      	mov	r4, r0
 8020658:	f340 8081 	ble.w	802075e <_dtoa_r+0x7d6>
 802065c:	461a      	mov	r2, r3
 802065e:	4601      	mov	r1, r0
 8020660:	4630      	mov	r0, r6
 8020662:	f000 fd1b 	bl	802109c <__pow5mult>
 8020666:	9b06      	ldr	r3, [sp, #24]
 8020668:	2b01      	cmp	r3, #1
 802066a:	4604      	mov	r4, r0
 802066c:	dd7a      	ble.n	8020764 <_dtoa_r+0x7dc>
 802066e:	2300      	movs	r3, #0
 8020670:	930a      	str	r3, [sp, #40]	; 0x28
 8020672:	6922      	ldr	r2, [r4, #16]
 8020674:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020678:	6910      	ldr	r0, [r2, #16]
 802067a:	f000 fbff 	bl	8020e7c <__hi0bits>
 802067e:	f1c0 0020 	rsb	r0, r0, #32
 8020682:	9b05      	ldr	r3, [sp, #20]
 8020684:	4418      	add	r0, r3
 8020686:	f010 001f 	ands.w	r0, r0, #31
 802068a:	f000 808c 	beq.w	80207a6 <_dtoa_r+0x81e>
 802068e:	f1c0 0220 	rsb	r2, r0, #32
 8020692:	2a04      	cmp	r2, #4
 8020694:	f340 8085 	ble.w	80207a2 <_dtoa_r+0x81a>
 8020698:	f1c0 001c 	rsb	r0, r0, #28
 802069c:	9b04      	ldr	r3, [sp, #16]
 802069e:	4403      	add	r3, r0
 80206a0:	9304      	str	r3, [sp, #16]
 80206a2:	9b05      	ldr	r3, [sp, #20]
 80206a4:	4403      	add	r3, r0
 80206a6:	4480      	add	r8, r0
 80206a8:	9305      	str	r3, [sp, #20]
 80206aa:	9b04      	ldr	r3, [sp, #16]
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	dd05      	ble.n	80206bc <_dtoa_r+0x734>
 80206b0:	4629      	mov	r1, r5
 80206b2:	461a      	mov	r2, r3
 80206b4:	4630      	mov	r0, r6
 80206b6:	f000 fd4b 	bl	8021150 <__lshift>
 80206ba:	4605      	mov	r5, r0
 80206bc:	9b05      	ldr	r3, [sp, #20]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	dd05      	ble.n	80206ce <_dtoa_r+0x746>
 80206c2:	4621      	mov	r1, r4
 80206c4:	461a      	mov	r2, r3
 80206c6:	4630      	mov	r0, r6
 80206c8:	f000 fd42 	bl	8021150 <__lshift>
 80206cc:	4604      	mov	r4, r0
 80206ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	d06a      	beq.n	80207aa <_dtoa_r+0x822>
 80206d4:	4621      	mov	r1, r4
 80206d6:	4628      	mov	r0, r5
 80206d8:	f000 fdaa 	bl	8021230 <__mcmp>
 80206dc:	2800      	cmp	r0, #0
 80206de:	da64      	bge.n	80207aa <_dtoa_r+0x822>
 80206e0:	2300      	movs	r3, #0
 80206e2:	4629      	mov	r1, r5
 80206e4:	220a      	movs	r2, #10
 80206e6:	4630      	mov	r0, r6
 80206e8:	f000 fb82 	bl	8020df0 <__multadd>
 80206ec:	9b07      	ldr	r3, [sp, #28]
 80206ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80206f2:	4605      	mov	r5, r0
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	f000 8191 	beq.w	8020a1c <_dtoa_r+0xa94>
 80206fa:	4639      	mov	r1, r7
 80206fc:	2300      	movs	r3, #0
 80206fe:	220a      	movs	r2, #10
 8020700:	4630      	mov	r0, r6
 8020702:	f000 fb75 	bl	8020df0 <__multadd>
 8020706:	f1ba 0f00 	cmp.w	sl, #0
 802070a:	4607      	mov	r7, r0
 802070c:	f300 808d 	bgt.w	802082a <_dtoa_r+0x8a2>
 8020710:	9b06      	ldr	r3, [sp, #24]
 8020712:	2b02      	cmp	r3, #2
 8020714:	dc50      	bgt.n	80207b8 <_dtoa_r+0x830>
 8020716:	e088      	b.n	802082a <_dtoa_r+0x8a2>
 8020718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802071a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802071e:	e751      	b.n	80205c4 <_dtoa_r+0x63c>
 8020720:	f109 34ff 	add.w	r4, r9, #4294967295
 8020724:	42a3      	cmp	r3, r4
 8020726:	bfbf      	itttt	lt
 8020728:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 802072a:	1ae3      	sublt	r3, r4, r3
 802072c:	18d2      	addlt	r2, r2, r3
 802072e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8020730:	bfb6      	itet	lt
 8020732:	4623      	movlt	r3, r4
 8020734:	1b1c      	subge	r4, r3, r4
 8020736:	2400      	movlt	r4, #0
 8020738:	f1b9 0f00 	cmp.w	r9, #0
 802073c:	bfb5      	itete	lt
 802073e:	9a04      	ldrlt	r2, [sp, #16]
 8020740:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8020744:	eba2 0809 	sublt.w	r8, r2, r9
 8020748:	464a      	movge	r2, r9
 802074a:	bfb8      	it	lt
 802074c:	2200      	movlt	r2, #0
 802074e:	e73c      	b.n	80205ca <_dtoa_r+0x642>
 8020750:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8020754:	9f07      	ldr	r7, [sp, #28]
 8020756:	461c      	mov	r4, r3
 8020758:	e744      	b.n	80205e4 <_dtoa_r+0x65c>
 802075a:	461a      	mov	r2, r3
 802075c:	e770      	b.n	8020640 <_dtoa_r+0x6b8>
 802075e:	9b06      	ldr	r3, [sp, #24]
 8020760:	2b01      	cmp	r3, #1
 8020762:	dc18      	bgt.n	8020796 <_dtoa_r+0x80e>
 8020764:	9b02      	ldr	r3, [sp, #8]
 8020766:	b9b3      	cbnz	r3, 8020796 <_dtoa_r+0x80e>
 8020768:	9b03      	ldr	r3, [sp, #12]
 802076a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802076e:	b9a2      	cbnz	r2, 802079a <_dtoa_r+0x812>
 8020770:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020774:	0d12      	lsrs	r2, r2, #20
 8020776:	0512      	lsls	r2, r2, #20
 8020778:	b18a      	cbz	r2, 802079e <_dtoa_r+0x816>
 802077a:	9b04      	ldr	r3, [sp, #16]
 802077c:	3301      	adds	r3, #1
 802077e:	9304      	str	r3, [sp, #16]
 8020780:	9b05      	ldr	r3, [sp, #20]
 8020782:	3301      	adds	r3, #1
 8020784:	9305      	str	r3, [sp, #20]
 8020786:	2301      	movs	r3, #1
 8020788:	930a      	str	r3, [sp, #40]	; 0x28
 802078a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802078c:	2b00      	cmp	r3, #0
 802078e:	f47f af70 	bne.w	8020672 <_dtoa_r+0x6ea>
 8020792:	2001      	movs	r0, #1
 8020794:	e775      	b.n	8020682 <_dtoa_r+0x6fa>
 8020796:	2300      	movs	r3, #0
 8020798:	e7f6      	b.n	8020788 <_dtoa_r+0x800>
 802079a:	9b02      	ldr	r3, [sp, #8]
 802079c:	e7f4      	b.n	8020788 <_dtoa_r+0x800>
 802079e:	920a      	str	r2, [sp, #40]	; 0x28
 80207a0:	e7f3      	b.n	802078a <_dtoa_r+0x802>
 80207a2:	d082      	beq.n	80206aa <_dtoa_r+0x722>
 80207a4:	4610      	mov	r0, r2
 80207a6:	301c      	adds	r0, #28
 80207a8:	e778      	b.n	802069c <_dtoa_r+0x714>
 80207aa:	f1b9 0f00 	cmp.w	r9, #0
 80207ae:	dc37      	bgt.n	8020820 <_dtoa_r+0x898>
 80207b0:	9b06      	ldr	r3, [sp, #24]
 80207b2:	2b02      	cmp	r3, #2
 80207b4:	dd34      	ble.n	8020820 <_dtoa_r+0x898>
 80207b6:	46ca      	mov	sl, r9
 80207b8:	f1ba 0f00 	cmp.w	sl, #0
 80207bc:	d10d      	bne.n	80207da <_dtoa_r+0x852>
 80207be:	4621      	mov	r1, r4
 80207c0:	4653      	mov	r3, sl
 80207c2:	2205      	movs	r2, #5
 80207c4:	4630      	mov	r0, r6
 80207c6:	f000 fb13 	bl	8020df0 <__multadd>
 80207ca:	4601      	mov	r1, r0
 80207cc:	4604      	mov	r4, r0
 80207ce:	4628      	mov	r0, r5
 80207d0:	f000 fd2e 	bl	8021230 <__mcmp>
 80207d4:	2800      	cmp	r0, #0
 80207d6:	f73f adeb 	bgt.w	80203b0 <_dtoa_r+0x428>
 80207da:	9b08      	ldr	r3, [sp, #32]
 80207dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80207e0:	ea6f 0b03 	mvn.w	fp, r3
 80207e4:	f04f 0900 	mov.w	r9, #0
 80207e8:	4621      	mov	r1, r4
 80207ea:	4630      	mov	r0, r6
 80207ec:	f000 fade 	bl	8020dac <_Bfree>
 80207f0:	2f00      	cmp	r7, #0
 80207f2:	f43f aea8 	beq.w	8020546 <_dtoa_r+0x5be>
 80207f6:	f1b9 0f00 	cmp.w	r9, #0
 80207fa:	d005      	beq.n	8020808 <_dtoa_r+0x880>
 80207fc:	45b9      	cmp	r9, r7
 80207fe:	d003      	beq.n	8020808 <_dtoa_r+0x880>
 8020800:	4649      	mov	r1, r9
 8020802:	4630      	mov	r0, r6
 8020804:	f000 fad2 	bl	8020dac <_Bfree>
 8020808:	4639      	mov	r1, r7
 802080a:	4630      	mov	r0, r6
 802080c:	f000 face 	bl	8020dac <_Bfree>
 8020810:	e699      	b.n	8020546 <_dtoa_r+0x5be>
 8020812:	2400      	movs	r4, #0
 8020814:	4627      	mov	r7, r4
 8020816:	e7e0      	b.n	80207da <_dtoa_r+0x852>
 8020818:	46bb      	mov	fp, r7
 802081a:	4604      	mov	r4, r0
 802081c:	4607      	mov	r7, r0
 802081e:	e5c7      	b.n	80203b0 <_dtoa_r+0x428>
 8020820:	9b07      	ldr	r3, [sp, #28]
 8020822:	46ca      	mov	sl, r9
 8020824:	2b00      	cmp	r3, #0
 8020826:	f000 8100 	beq.w	8020a2a <_dtoa_r+0xaa2>
 802082a:	f1b8 0f00 	cmp.w	r8, #0
 802082e:	dd05      	ble.n	802083c <_dtoa_r+0x8b4>
 8020830:	4639      	mov	r1, r7
 8020832:	4642      	mov	r2, r8
 8020834:	4630      	mov	r0, r6
 8020836:	f000 fc8b 	bl	8021150 <__lshift>
 802083a:	4607      	mov	r7, r0
 802083c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802083e:	2b00      	cmp	r3, #0
 8020840:	d05d      	beq.n	80208fe <_dtoa_r+0x976>
 8020842:	6879      	ldr	r1, [r7, #4]
 8020844:	4630      	mov	r0, r6
 8020846:	f000 fa71 	bl	8020d2c <_Balloc>
 802084a:	4680      	mov	r8, r0
 802084c:	b928      	cbnz	r0, 802085a <_dtoa_r+0x8d2>
 802084e:	4b82      	ldr	r3, [pc, #520]	; (8020a58 <_dtoa_r+0xad0>)
 8020850:	4602      	mov	r2, r0
 8020852:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020856:	f7ff bbaf 	b.w	801ffb8 <_dtoa_r+0x30>
 802085a:	693a      	ldr	r2, [r7, #16]
 802085c:	3202      	adds	r2, #2
 802085e:	0092      	lsls	r2, r2, #2
 8020860:	f107 010c 	add.w	r1, r7, #12
 8020864:	300c      	adds	r0, #12
 8020866:	f7fe f97f 	bl	801eb68 <memcpy>
 802086a:	2201      	movs	r2, #1
 802086c:	4641      	mov	r1, r8
 802086e:	4630      	mov	r0, r6
 8020870:	f000 fc6e 	bl	8021150 <__lshift>
 8020874:	9b01      	ldr	r3, [sp, #4]
 8020876:	3301      	adds	r3, #1
 8020878:	9304      	str	r3, [sp, #16]
 802087a:	9b01      	ldr	r3, [sp, #4]
 802087c:	4453      	add	r3, sl
 802087e:	9308      	str	r3, [sp, #32]
 8020880:	9b02      	ldr	r3, [sp, #8]
 8020882:	f003 0301 	and.w	r3, r3, #1
 8020886:	46b9      	mov	r9, r7
 8020888:	9307      	str	r3, [sp, #28]
 802088a:	4607      	mov	r7, r0
 802088c:	9b04      	ldr	r3, [sp, #16]
 802088e:	4621      	mov	r1, r4
 8020890:	3b01      	subs	r3, #1
 8020892:	4628      	mov	r0, r5
 8020894:	9302      	str	r3, [sp, #8]
 8020896:	f7ff faeb 	bl	801fe70 <quorem>
 802089a:	4603      	mov	r3, r0
 802089c:	3330      	adds	r3, #48	; 0x30
 802089e:	9005      	str	r0, [sp, #20]
 80208a0:	4649      	mov	r1, r9
 80208a2:	4628      	mov	r0, r5
 80208a4:	9309      	str	r3, [sp, #36]	; 0x24
 80208a6:	f000 fcc3 	bl	8021230 <__mcmp>
 80208aa:	463a      	mov	r2, r7
 80208ac:	4682      	mov	sl, r0
 80208ae:	4621      	mov	r1, r4
 80208b0:	4630      	mov	r0, r6
 80208b2:	f000 fcd9 	bl	8021268 <__mdiff>
 80208b6:	68c2      	ldr	r2, [r0, #12]
 80208b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208ba:	4680      	mov	r8, r0
 80208bc:	bb0a      	cbnz	r2, 8020902 <_dtoa_r+0x97a>
 80208be:	4601      	mov	r1, r0
 80208c0:	4628      	mov	r0, r5
 80208c2:	f000 fcb5 	bl	8021230 <__mcmp>
 80208c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208c8:	4602      	mov	r2, r0
 80208ca:	4641      	mov	r1, r8
 80208cc:	4630      	mov	r0, r6
 80208ce:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80208d2:	f000 fa6b 	bl	8020dac <_Bfree>
 80208d6:	9b06      	ldr	r3, [sp, #24]
 80208d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80208de:	ea43 0102 	orr.w	r1, r3, r2
 80208e2:	9b07      	ldr	r3, [sp, #28]
 80208e4:	430b      	orrs	r3, r1
 80208e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208e8:	d10d      	bne.n	8020906 <_dtoa_r+0x97e>
 80208ea:	2b39      	cmp	r3, #57	; 0x39
 80208ec:	d029      	beq.n	8020942 <_dtoa_r+0x9ba>
 80208ee:	f1ba 0f00 	cmp.w	sl, #0
 80208f2:	dd01      	ble.n	80208f8 <_dtoa_r+0x970>
 80208f4:	9b05      	ldr	r3, [sp, #20]
 80208f6:	3331      	adds	r3, #49	; 0x31
 80208f8:	9a02      	ldr	r2, [sp, #8]
 80208fa:	7013      	strb	r3, [r2, #0]
 80208fc:	e774      	b.n	80207e8 <_dtoa_r+0x860>
 80208fe:	4638      	mov	r0, r7
 8020900:	e7b8      	b.n	8020874 <_dtoa_r+0x8ec>
 8020902:	2201      	movs	r2, #1
 8020904:	e7e1      	b.n	80208ca <_dtoa_r+0x942>
 8020906:	f1ba 0f00 	cmp.w	sl, #0
 802090a:	db06      	blt.n	802091a <_dtoa_r+0x992>
 802090c:	9906      	ldr	r1, [sp, #24]
 802090e:	ea41 0a0a 	orr.w	sl, r1, sl
 8020912:	9907      	ldr	r1, [sp, #28]
 8020914:	ea5a 0101 	orrs.w	r1, sl, r1
 8020918:	d120      	bne.n	802095c <_dtoa_r+0x9d4>
 802091a:	2a00      	cmp	r2, #0
 802091c:	ddec      	ble.n	80208f8 <_dtoa_r+0x970>
 802091e:	4629      	mov	r1, r5
 8020920:	2201      	movs	r2, #1
 8020922:	4630      	mov	r0, r6
 8020924:	9304      	str	r3, [sp, #16]
 8020926:	f000 fc13 	bl	8021150 <__lshift>
 802092a:	4621      	mov	r1, r4
 802092c:	4605      	mov	r5, r0
 802092e:	f000 fc7f 	bl	8021230 <__mcmp>
 8020932:	2800      	cmp	r0, #0
 8020934:	9b04      	ldr	r3, [sp, #16]
 8020936:	dc02      	bgt.n	802093e <_dtoa_r+0x9b6>
 8020938:	d1de      	bne.n	80208f8 <_dtoa_r+0x970>
 802093a:	07da      	lsls	r2, r3, #31
 802093c:	d5dc      	bpl.n	80208f8 <_dtoa_r+0x970>
 802093e:	2b39      	cmp	r3, #57	; 0x39
 8020940:	d1d8      	bne.n	80208f4 <_dtoa_r+0x96c>
 8020942:	9a02      	ldr	r2, [sp, #8]
 8020944:	2339      	movs	r3, #57	; 0x39
 8020946:	7013      	strb	r3, [r2, #0]
 8020948:	4643      	mov	r3, r8
 802094a:	4698      	mov	r8, r3
 802094c:	3b01      	subs	r3, #1
 802094e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8020952:	2a39      	cmp	r2, #57	; 0x39
 8020954:	d051      	beq.n	80209fa <_dtoa_r+0xa72>
 8020956:	3201      	adds	r2, #1
 8020958:	701a      	strb	r2, [r3, #0]
 802095a:	e745      	b.n	80207e8 <_dtoa_r+0x860>
 802095c:	2a00      	cmp	r2, #0
 802095e:	dd03      	ble.n	8020968 <_dtoa_r+0x9e0>
 8020960:	2b39      	cmp	r3, #57	; 0x39
 8020962:	d0ee      	beq.n	8020942 <_dtoa_r+0x9ba>
 8020964:	3301      	adds	r3, #1
 8020966:	e7c7      	b.n	80208f8 <_dtoa_r+0x970>
 8020968:	9a04      	ldr	r2, [sp, #16]
 802096a:	9908      	ldr	r1, [sp, #32]
 802096c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020970:	428a      	cmp	r2, r1
 8020972:	d02b      	beq.n	80209cc <_dtoa_r+0xa44>
 8020974:	4629      	mov	r1, r5
 8020976:	2300      	movs	r3, #0
 8020978:	220a      	movs	r2, #10
 802097a:	4630      	mov	r0, r6
 802097c:	f000 fa38 	bl	8020df0 <__multadd>
 8020980:	45b9      	cmp	r9, r7
 8020982:	4605      	mov	r5, r0
 8020984:	f04f 0300 	mov.w	r3, #0
 8020988:	f04f 020a 	mov.w	r2, #10
 802098c:	4649      	mov	r1, r9
 802098e:	4630      	mov	r0, r6
 8020990:	d107      	bne.n	80209a2 <_dtoa_r+0xa1a>
 8020992:	f000 fa2d 	bl	8020df0 <__multadd>
 8020996:	4681      	mov	r9, r0
 8020998:	4607      	mov	r7, r0
 802099a:	9b04      	ldr	r3, [sp, #16]
 802099c:	3301      	adds	r3, #1
 802099e:	9304      	str	r3, [sp, #16]
 80209a0:	e774      	b.n	802088c <_dtoa_r+0x904>
 80209a2:	f000 fa25 	bl	8020df0 <__multadd>
 80209a6:	4639      	mov	r1, r7
 80209a8:	4681      	mov	r9, r0
 80209aa:	2300      	movs	r3, #0
 80209ac:	220a      	movs	r2, #10
 80209ae:	4630      	mov	r0, r6
 80209b0:	f000 fa1e 	bl	8020df0 <__multadd>
 80209b4:	4607      	mov	r7, r0
 80209b6:	e7f0      	b.n	802099a <_dtoa_r+0xa12>
 80209b8:	f1ba 0f00 	cmp.w	sl, #0
 80209bc:	9a01      	ldr	r2, [sp, #4]
 80209be:	bfcc      	ite	gt
 80209c0:	46d0      	movgt	r8, sl
 80209c2:	f04f 0801 	movle.w	r8, #1
 80209c6:	4490      	add	r8, r2
 80209c8:	f04f 0900 	mov.w	r9, #0
 80209cc:	4629      	mov	r1, r5
 80209ce:	2201      	movs	r2, #1
 80209d0:	4630      	mov	r0, r6
 80209d2:	9302      	str	r3, [sp, #8]
 80209d4:	f000 fbbc 	bl	8021150 <__lshift>
 80209d8:	4621      	mov	r1, r4
 80209da:	4605      	mov	r5, r0
 80209dc:	f000 fc28 	bl	8021230 <__mcmp>
 80209e0:	2800      	cmp	r0, #0
 80209e2:	dcb1      	bgt.n	8020948 <_dtoa_r+0x9c0>
 80209e4:	d102      	bne.n	80209ec <_dtoa_r+0xa64>
 80209e6:	9b02      	ldr	r3, [sp, #8]
 80209e8:	07db      	lsls	r3, r3, #31
 80209ea:	d4ad      	bmi.n	8020948 <_dtoa_r+0x9c0>
 80209ec:	4643      	mov	r3, r8
 80209ee:	4698      	mov	r8, r3
 80209f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80209f4:	2a30      	cmp	r2, #48	; 0x30
 80209f6:	d0fa      	beq.n	80209ee <_dtoa_r+0xa66>
 80209f8:	e6f6      	b.n	80207e8 <_dtoa_r+0x860>
 80209fa:	9a01      	ldr	r2, [sp, #4]
 80209fc:	429a      	cmp	r2, r3
 80209fe:	d1a4      	bne.n	802094a <_dtoa_r+0x9c2>
 8020a00:	f10b 0b01 	add.w	fp, fp, #1
 8020a04:	2331      	movs	r3, #49	; 0x31
 8020a06:	e778      	b.n	80208fa <_dtoa_r+0x972>
 8020a08:	4b14      	ldr	r3, [pc, #80]	; (8020a5c <_dtoa_r+0xad4>)
 8020a0a:	f7ff bb27 	b.w	802005c <_dtoa_r+0xd4>
 8020a0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	f47f ab03 	bne.w	802001c <_dtoa_r+0x94>
 8020a16:	4b12      	ldr	r3, [pc, #72]	; (8020a60 <_dtoa_r+0xad8>)
 8020a18:	f7ff bb20 	b.w	802005c <_dtoa_r+0xd4>
 8020a1c:	f1ba 0f00 	cmp.w	sl, #0
 8020a20:	dc03      	bgt.n	8020a2a <_dtoa_r+0xaa2>
 8020a22:	9b06      	ldr	r3, [sp, #24]
 8020a24:	2b02      	cmp	r3, #2
 8020a26:	f73f aec7 	bgt.w	80207b8 <_dtoa_r+0x830>
 8020a2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020a2e:	4621      	mov	r1, r4
 8020a30:	4628      	mov	r0, r5
 8020a32:	f7ff fa1d 	bl	801fe70 <quorem>
 8020a36:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020a3a:	f808 3b01 	strb.w	r3, [r8], #1
 8020a3e:	9a01      	ldr	r2, [sp, #4]
 8020a40:	eba8 0202 	sub.w	r2, r8, r2
 8020a44:	4592      	cmp	sl, r2
 8020a46:	ddb7      	ble.n	80209b8 <_dtoa_r+0xa30>
 8020a48:	4629      	mov	r1, r5
 8020a4a:	2300      	movs	r3, #0
 8020a4c:	220a      	movs	r2, #10
 8020a4e:	4630      	mov	r0, r6
 8020a50:	f000 f9ce 	bl	8020df0 <__multadd>
 8020a54:	4605      	mov	r5, r0
 8020a56:	e7ea      	b.n	8020a2e <_dtoa_r+0xaa6>
 8020a58:	080240dc 	.word	0x080240dc
 8020a5c:	0802360a 	.word	0x0802360a
 8020a60:	0802405d 	.word	0x0802405d

08020a64 <__sflush_r>:
 8020a64:	898a      	ldrh	r2, [r1, #12]
 8020a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a6a:	4605      	mov	r5, r0
 8020a6c:	0710      	lsls	r0, r2, #28
 8020a6e:	460c      	mov	r4, r1
 8020a70:	d458      	bmi.n	8020b24 <__sflush_r+0xc0>
 8020a72:	684b      	ldr	r3, [r1, #4]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	dc05      	bgt.n	8020a84 <__sflush_r+0x20>
 8020a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020a7a:	2b00      	cmp	r3, #0
 8020a7c:	dc02      	bgt.n	8020a84 <__sflush_r+0x20>
 8020a7e:	2000      	movs	r0, #0
 8020a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020a86:	2e00      	cmp	r6, #0
 8020a88:	d0f9      	beq.n	8020a7e <__sflush_r+0x1a>
 8020a8a:	2300      	movs	r3, #0
 8020a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020a90:	682f      	ldr	r7, [r5, #0]
 8020a92:	602b      	str	r3, [r5, #0]
 8020a94:	d032      	beq.n	8020afc <__sflush_r+0x98>
 8020a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020a98:	89a3      	ldrh	r3, [r4, #12]
 8020a9a:	075a      	lsls	r2, r3, #29
 8020a9c:	d505      	bpl.n	8020aaa <__sflush_r+0x46>
 8020a9e:	6863      	ldr	r3, [r4, #4]
 8020aa0:	1ac0      	subs	r0, r0, r3
 8020aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020aa4:	b10b      	cbz	r3, 8020aaa <__sflush_r+0x46>
 8020aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020aa8:	1ac0      	subs	r0, r0, r3
 8020aaa:	2300      	movs	r3, #0
 8020aac:	4602      	mov	r2, r0
 8020aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020ab0:	6a21      	ldr	r1, [r4, #32]
 8020ab2:	4628      	mov	r0, r5
 8020ab4:	47b0      	blx	r6
 8020ab6:	1c43      	adds	r3, r0, #1
 8020ab8:	89a3      	ldrh	r3, [r4, #12]
 8020aba:	d106      	bne.n	8020aca <__sflush_r+0x66>
 8020abc:	6829      	ldr	r1, [r5, #0]
 8020abe:	291d      	cmp	r1, #29
 8020ac0:	d82c      	bhi.n	8020b1c <__sflush_r+0xb8>
 8020ac2:	4a2a      	ldr	r2, [pc, #168]	; (8020b6c <__sflush_r+0x108>)
 8020ac4:	40ca      	lsrs	r2, r1
 8020ac6:	07d6      	lsls	r6, r2, #31
 8020ac8:	d528      	bpl.n	8020b1c <__sflush_r+0xb8>
 8020aca:	2200      	movs	r2, #0
 8020acc:	6062      	str	r2, [r4, #4]
 8020ace:	04d9      	lsls	r1, r3, #19
 8020ad0:	6922      	ldr	r2, [r4, #16]
 8020ad2:	6022      	str	r2, [r4, #0]
 8020ad4:	d504      	bpl.n	8020ae0 <__sflush_r+0x7c>
 8020ad6:	1c42      	adds	r2, r0, #1
 8020ad8:	d101      	bne.n	8020ade <__sflush_r+0x7a>
 8020ada:	682b      	ldr	r3, [r5, #0]
 8020adc:	b903      	cbnz	r3, 8020ae0 <__sflush_r+0x7c>
 8020ade:	6560      	str	r0, [r4, #84]	; 0x54
 8020ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020ae2:	602f      	str	r7, [r5, #0]
 8020ae4:	2900      	cmp	r1, #0
 8020ae6:	d0ca      	beq.n	8020a7e <__sflush_r+0x1a>
 8020ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020aec:	4299      	cmp	r1, r3
 8020aee:	d002      	beq.n	8020af6 <__sflush_r+0x92>
 8020af0:	4628      	mov	r0, r5
 8020af2:	f7fe f84f 	bl	801eb94 <_free_r>
 8020af6:	2000      	movs	r0, #0
 8020af8:	6360      	str	r0, [r4, #52]	; 0x34
 8020afa:	e7c1      	b.n	8020a80 <__sflush_r+0x1c>
 8020afc:	6a21      	ldr	r1, [r4, #32]
 8020afe:	2301      	movs	r3, #1
 8020b00:	4628      	mov	r0, r5
 8020b02:	47b0      	blx	r6
 8020b04:	1c41      	adds	r1, r0, #1
 8020b06:	d1c7      	bne.n	8020a98 <__sflush_r+0x34>
 8020b08:	682b      	ldr	r3, [r5, #0]
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d0c4      	beq.n	8020a98 <__sflush_r+0x34>
 8020b0e:	2b1d      	cmp	r3, #29
 8020b10:	d001      	beq.n	8020b16 <__sflush_r+0xb2>
 8020b12:	2b16      	cmp	r3, #22
 8020b14:	d101      	bne.n	8020b1a <__sflush_r+0xb6>
 8020b16:	602f      	str	r7, [r5, #0]
 8020b18:	e7b1      	b.n	8020a7e <__sflush_r+0x1a>
 8020b1a:	89a3      	ldrh	r3, [r4, #12]
 8020b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b20:	81a3      	strh	r3, [r4, #12]
 8020b22:	e7ad      	b.n	8020a80 <__sflush_r+0x1c>
 8020b24:	690f      	ldr	r7, [r1, #16]
 8020b26:	2f00      	cmp	r7, #0
 8020b28:	d0a9      	beq.n	8020a7e <__sflush_r+0x1a>
 8020b2a:	0793      	lsls	r3, r2, #30
 8020b2c:	680e      	ldr	r6, [r1, #0]
 8020b2e:	bf08      	it	eq
 8020b30:	694b      	ldreq	r3, [r1, #20]
 8020b32:	600f      	str	r7, [r1, #0]
 8020b34:	bf18      	it	ne
 8020b36:	2300      	movne	r3, #0
 8020b38:	eba6 0807 	sub.w	r8, r6, r7
 8020b3c:	608b      	str	r3, [r1, #8]
 8020b3e:	f1b8 0f00 	cmp.w	r8, #0
 8020b42:	dd9c      	ble.n	8020a7e <__sflush_r+0x1a>
 8020b44:	6a21      	ldr	r1, [r4, #32]
 8020b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020b48:	4643      	mov	r3, r8
 8020b4a:	463a      	mov	r2, r7
 8020b4c:	4628      	mov	r0, r5
 8020b4e:	47b0      	blx	r6
 8020b50:	2800      	cmp	r0, #0
 8020b52:	dc06      	bgt.n	8020b62 <__sflush_r+0xfe>
 8020b54:	89a3      	ldrh	r3, [r4, #12]
 8020b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b5a:	81a3      	strh	r3, [r4, #12]
 8020b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020b60:	e78e      	b.n	8020a80 <__sflush_r+0x1c>
 8020b62:	4407      	add	r7, r0
 8020b64:	eba8 0800 	sub.w	r8, r8, r0
 8020b68:	e7e9      	b.n	8020b3e <__sflush_r+0xda>
 8020b6a:	bf00      	nop
 8020b6c:	20400001 	.word	0x20400001

08020b70 <_fflush_r>:
 8020b70:	b538      	push	{r3, r4, r5, lr}
 8020b72:	690b      	ldr	r3, [r1, #16]
 8020b74:	4605      	mov	r5, r0
 8020b76:	460c      	mov	r4, r1
 8020b78:	b913      	cbnz	r3, 8020b80 <_fflush_r+0x10>
 8020b7a:	2500      	movs	r5, #0
 8020b7c:	4628      	mov	r0, r5
 8020b7e:	bd38      	pop	{r3, r4, r5, pc}
 8020b80:	b118      	cbz	r0, 8020b8a <_fflush_r+0x1a>
 8020b82:	6983      	ldr	r3, [r0, #24]
 8020b84:	b90b      	cbnz	r3, 8020b8a <_fflush_r+0x1a>
 8020b86:	f7fd ff07 	bl	801e998 <__sinit>
 8020b8a:	4b14      	ldr	r3, [pc, #80]	; (8020bdc <_fflush_r+0x6c>)
 8020b8c:	429c      	cmp	r4, r3
 8020b8e:	d11b      	bne.n	8020bc8 <_fflush_r+0x58>
 8020b90:	686c      	ldr	r4, [r5, #4]
 8020b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	d0ef      	beq.n	8020b7a <_fflush_r+0xa>
 8020b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020b9c:	07d0      	lsls	r0, r2, #31
 8020b9e:	d404      	bmi.n	8020baa <_fflush_r+0x3a>
 8020ba0:	0599      	lsls	r1, r3, #22
 8020ba2:	d402      	bmi.n	8020baa <_fflush_r+0x3a>
 8020ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ba6:	f7fd ffcc 	bl	801eb42 <__retarget_lock_acquire_recursive>
 8020baa:	4628      	mov	r0, r5
 8020bac:	4621      	mov	r1, r4
 8020bae:	f7ff ff59 	bl	8020a64 <__sflush_r>
 8020bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020bb4:	07da      	lsls	r2, r3, #31
 8020bb6:	4605      	mov	r5, r0
 8020bb8:	d4e0      	bmi.n	8020b7c <_fflush_r+0xc>
 8020bba:	89a3      	ldrh	r3, [r4, #12]
 8020bbc:	059b      	lsls	r3, r3, #22
 8020bbe:	d4dd      	bmi.n	8020b7c <_fflush_r+0xc>
 8020bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020bc2:	f7fd ffc0 	bl	801eb46 <__retarget_lock_release_recursive>
 8020bc6:	e7d9      	b.n	8020b7c <_fflush_r+0xc>
 8020bc8:	4b05      	ldr	r3, [pc, #20]	; (8020be0 <_fflush_r+0x70>)
 8020bca:	429c      	cmp	r4, r3
 8020bcc:	d101      	bne.n	8020bd2 <_fflush_r+0x62>
 8020bce:	68ac      	ldr	r4, [r5, #8]
 8020bd0:	e7df      	b.n	8020b92 <_fflush_r+0x22>
 8020bd2:	4b04      	ldr	r3, [pc, #16]	; (8020be4 <_fflush_r+0x74>)
 8020bd4:	429c      	cmp	r4, r3
 8020bd6:	bf08      	it	eq
 8020bd8:	68ec      	ldreq	r4, [r5, #12]
 8020bda:	e7da      	b.n	8020b92 <_fflush_r+0x22>
 8020bdc:	08023ed0 	.word	0x08023ed0
 8020be0:	08023ef0 	.word	0x08023ef0
 8020be4:	08023eb0 	.word	0x08023eb0

08020be8 <_localeconv_r>:
 8020be8:	4800      	ldr	r0, [pc, #0]	; (8020bec <_localeconv_r+0x4>)
 8020bea:	4770      	bx	lr
 8020bec:	20000298 	.word	0x20000298

08020bf0 <_lseek_r>:
 8020bf0:	b538      	push	{r3, r4, r5, lr}
 8020bf2:	4d07      	ldr	r5, [pc, #28]	; (8020c10 <_lseek_r+0x20>)
 8020bf4:	4604      	mov	r4, r0
 8020bf6:	4608      	mov	r0, r1
 8020bf8:	4611      	mov	r1, r2
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	602a      	str	r2, [r5, #0]
 8020bfe:	461a      	mov	r2, r3
 8020c00:	f7e3 f99a 	bl	8003f38 <_lseek>
 8020c04:	1c43      	adds	r3, r0, #1
 8020c06:	d102      	bne.n	8020c0e <_lseek_r+0x1e>
 8020c08:	682b      	ldr	r3, [r5, #0]
 8020c0a:	b103      	cbz	r3, 8020c0e <_lseek_r+0x1e>
 8020c0c:	6023      	str	r3, [r4, #0]
 8020c0e:	bd38      	pop	{r3, r4, r5, pc}
 8020c10:	2000707c 	.word	0x2000707c

08020c14 <__swhatbuf_r>:
 8020c14:	b570      	push	{r4, r5, r6, lr}
 8020c16:	460e      	mov	r6, r1
 8020c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c1c:	2900      	cmp	r1, #0
 8020c1e:	b096      	sub	sp, #88	; 0x58
 8020c20:	4614      	mov	r4, r2
 8020c22:	461d      	mov	r5, r3
 8020c24:	da08      	bge.n	8020c38 <__swhatbuf_r+0x24>
 8020c26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020c2a:	2200      	movs	r2, #0
 8020c2c:	602a      	str	r2, [r5, #0]
 8020c2e:	061a      	lsls	r2, r3, #24
 8020c30:	d410      	bmi.n	8020c54 <__swhatbuf_r+0x40>
 8020c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020c36:	e00e      	b.n	8020c56 <__swhatbuf_r+0x42>
 8020c38:	466a      	mov	r2, sp
 8020c3a:	f000 fdad 	bl	8021798 <_fstat_r>
 8020c3e:	2800      	cmp	r0, #0
 8020c40:	dbf1      	blt.n	8020c26 <__swhatbuf_r+0x12>
 8020c42:	9a01      	ldr	r2, [sp, #4]
 8020c44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020c48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020c4c:	425a      	negs	r2, r3
 8020c4e:	415a      	adcs	r2, r3
 8020c50:	602a      	str	r2, [r5, #0]
 8020c52:	e7ee      	b.n	8020c32 <__swhatbuf_r+0x1e>
 8020c54:	2340      	movs	r3, #64	; 0x40
 8020c56:	2000      	movs	r0, #0
 8020c58:	6023      	str	r3, [r4, #0]
 8020c5a:	b016      	add	sp, #88	; 0x58
 8020c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08020c60 <__smakebuf_r>:
 8020c60:	898b      	ldrh	r3, [r1, #12]
 8020c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020c64:	079d      	lsls	r5, r3, #30
 8020c66:	4606      	mov	r6, r0
 8020c68:	460c      	mov	r4, r1
 8020c6a:	d507      	bpl.n	8020c7c <__smakebuf_r+0x1c>
 8020c6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020c70:	6023      	str	r3, [r4, #0]
 8020c72:	6123      	str	r3, [r4, #16]
 8020c74:	2301      	movs	r3, #1
 8020c76:	6163      	str	r3, [r4, #20]
 8020c78:	b002      	add	sp, #8
 8020c7a:	bd70      	pop	{r4, r5, r6, pc}
 8020c7c:	ab01      	add	r3, sp, #4
 8020c7e:	466a      	mov	r2, sp
 8020c80:	f7ff ffc8 	bl	8020c14 <__swhatbuf_r>
 8020c84:	9900      	ldr	r1, [sp, #0]
 8020c86:	4605      	mov	r5, r0
 8020c88:	4630      	mov	r0, r6
 8020c8a:	f7fd ffef 	bl	801ec6c <_malloc_r>
 8020c8e:	b948      	cbnz	r0, 8020ca4 <__smakebuf_r+0x44>
 8020c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c94:	059a      	lsls	r2, r3, #22
 8020c96:	d4ef      	bmi.n	8020c78 <__smakebuf_r+0x18>
 8020c98:	f023 0303 	bic.w	r3, r3, #3
 8020c9c:	f043 0302 	orr.w	r3, r3, #2
 8020ca0:	81a3      	strh	r3, [r4, #12]
 8020ca2:	e7e3      	b.n	8020c6c <__smakebuf_r+0xc>
 8020ca4:	4b0d      	ldr	r3, [pc, #52]	; (8020cdc <__smakebuf_r+0x7c>)
 8020ca6:	62b3      	str	r3, [r6, #40]	; 0x28
 8020ca8:	89a3      	ldrh	r3, [r4, #12]
 8020caa:	6020      	str	r0, [r4, #0]
 8020cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020cb0:	81a3      	strh	r3, [r4, #12]
 8020cb2:	9b00      	ldr	r3, [sp, #0]
 8020cb4:	6163      	str	r3, [r4, #20]
 8020cb6:	9b01      	ldr	r3, [sp, #4]
 8020cb8:	6120      	str	r0, [r4, #16]
 8020cba:	b15b      	cbz	r3, 8020cd4 <__smakebuf_r+0x74>
 8020cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020cc0:	4630      	mov	r0, r6
 8020cc2:	f000 fd7b 	bl	80217bc <_isatty_r>
 8020cc6:	b128      	cbz	r0, 8020cd4 <__smakebuf_r+0x74>
 8020cc8:	89a3      	ldrh	r3, [r4, #12]
 8020cca:	f023 0303 	bic.w	r3, r3, #3
 8020cce:	f043 0301 	orr.w	r3, r3, #1
 8020cd2:	81a3      	strh	r3, [r4, #12]
 8020cd4:	89a0      	ldrh	r0, [r4, #12]
 8020cd6:	4305      	orrs	r5, r0
 8020cd8:	81a5      	strh	r5, [r4, #12]
 8020cda:	e7cd      	b.n	8020c78 <__smakebuf_r+0x18>
 8020cdc:	0801e931 	.word	0x0801e931

08020ce0 <memmove>:
 8020ce0:	4288      	cmp	r0, r1
 8020ce2:	b510      	push	{r4, lr}
 8020ce4:	eb01 0402 	add.w	r4, r1, r2
 8020ce8:	d902      	bls.n	8020cf0 <memmove+0x10>
 8020cea:	4284      	cmp	r4, r0
 8020cec:	4623      	mov	r3, r4
 8020cee:	d807      	bhi.n	8020d00 <memmove+0x20>
 8020cf0:	1e43      	subs	r3, r0, #1
 8020cf2:	42a1      	cmp	r1, r4
 8020cf4:	d008      	beq.n	8020d08 <memmove+0x28>
 8020cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020cfe:	e7f8      	b.n	8020cf2 <memmove+0x12>
 8020d00:	4402      	add	r2, r0
 8020d02:	4601      	mov	r1, r0
 8020d04:	428a      	cmp	r2, r1
 8020d06:	d100      	bne.n	8020d0a <memmove+0x2a>
 8020d08:	bd10      	pop	{r4, pc}
 8020d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d12:	e7f7      	b.n	8020d04 <memmove+0x24>

08020d14 <__malloc_lock>:
 8020d14:	4801      	ldr	r0, [pc, #4]	; (8020d1c <__malloc_lock+0x8>)
 8020d16:	f7fd bf14 	b.w	801eb42 <__retarget_lock_acquire_recursive>
 8020d1a:	bf00      	nop
 8020d1c:	20006f69 	.word	0x20006f69

08020d20 <__malloc_unlock>:
 8020d20:	4801      	ldr	r0, [pc, #4]	; (8020d28 <__malloc_unlock+0x8>)
 8020d22:	f7fd bf10 	b.w	801eb46 <__retarget_lock_release_recursive>
 8020d26:	bf00      	nop
 8020d28:	20006f69 	.word	0x20006f69

08020d2c <_Balloc>:
 8020d2c:	b570      	push	{r4, r5, r6, lr}
 8020d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020d30:	4604      	mov	r4, r0
 8020d32:	460d      	mov	r5, r1
 8020d34:	b976      	cbnz	r6, 8020d54 <_Balloc+0x28>
 8020d36:	2010      	movs	r0, #16
 8020d38:	f7fd ff06 	bl	801eb48 <malloc>
 8020d3c:	4602      	mov	r2, r0
 8020d3e:	6260      	str	r0, [r4, #36]	; 0x24
 8020d40:	b920      	cbnz	r0, 8020d4c <_Balloc+0x20>
 8020d42:	4b18      	ldr	r3, [pc, #96]	; (8020da4 <_Balloc+0x78>)
 8020d44:	4818      	ldr	r0, [pc, #96]	; (8020da8 <_Balloc+0x7c>)
 8020d46:	2166      	movs	r1, #102	; 0x66
 8020d48:	f7fd fda0 	bl	801e88c <__assert_func>
 8020d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020d50:	6006      	str	r6, [r0, #0]
 8020d52:	60c6      	str	r6, [r0, #12]
 8020d54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020d56:	68f3      	ldr	r3, [r6, #12]
 8020d58:	b183      	cbz	r3, 8020d7c <_Balloc+0x50>
 8020d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d5c:	68db      	ldr	r3, [r3, #12]
 8020d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020d62:	b9b8      	cbnz	r0, 8020d94 <_Balloc+0x68>
 8020d64:	2101      	movs	r1, #1
 8020d66:	fa01 f605 	lsl.w	r6, r1, r5
 8020d6a:	1d72      	adds	r2, r6, #5
 8020d6c:	0092      	lsls	r2, r2, #2
 8020d6e:	4620      	mov	r0, r4
 8020d70:	f000 fb60 	bl	8021434 <_calloc_r>
 8020d74:	b160      	cbz	r0, 8020d90 <_Balloc+0x64>
 8020d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020d7a:	e00e      	b.n	8020d9a <_Balloc+0x6e>
 8020d7c:	2221      	movs	r2, #33	; 0x21
 8020d7e:	2104      	movs	r1, #4
 8020d80:	4620      	mov	r0, r4
 8020d82:	f000 fb57 	bl	8021434 <_calloc_r>
 8020d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d88:	60f0      	str	r0, [r6, #12]
 8020d8a:	68db      	ldr	r3, [r3, #12]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d1e4      	bne.n	8020d5a <_Balloc+0x2e>
 8020d90:	2000      	movs	r0, #0
 8020d92:	bd70      	pop	{r4, r5, r6, pc}
 8020d94:	6802      	ldr	r2, [r0, #0]
 8020d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020d9a:	2300      	movs	r3, #0
 8020d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020da0:	e7f7      	b.n	8020d92 <_Balloc+0x66>
 8020da2:	bf00      	nop
 8020da4:	0802406a 	.word	0x0802406a
 8020da8:	080240ed 	.word	0x080240ed

08020dac <_Bfree>:
 8020dac:	b570      	push	{r4, r5, r6, lr}
 8020dae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020db0:	4605      	mov	r5, r0
 8020db2:	460c      	mov	r4, r1
 8020db4:	b976      	cbnz	r6, 8020dd4 <_Bfree+0x28>
 8020db6:	2010      	movs	r0, #16
 8020db8:	f7fd fec6 	bl	801eb48 <malloc>
 8020dbc:	4602      	mov	r2, r0
 8020dbe:	6268      	str	r0, [r5, #36]	; 0x24
 8020dc0:	b920      	cbnz	r0, 8020dcc <_Bfree+0x20>
 8020dc2:	4b09      	ldr	r3, [pc, #36]	; (8020de8 <_Bfree+0x3c>)
 8020dc4:	4809      	ldr	r0, [pc, #36]	; (8020dec <_Bfree+0x40>)
 8020dc6:	218a      	movs	r1, #138	; 0x8a
 8020dc8:	f7fd fd60 	bl	801e88c <__assert_func>
 8020dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020dd0:	6006      	str	r6, [r0, #0]
 8020dd2:	60c6      	str	r6, [r0, #12]
 8020dd4:	b13c      	cbz	r4, 8020de6 <_Bfree+0x3a>
 8020dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020dd8:	6862      	ldr	r2, [r4, #4]
 8020dda:	68db      	ldr	r3, [r3, #12]
 8020ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020de0:	6021      	str	r1, [r4, #0]
 8020de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020de6:	bd70      	pop	{r4, r5, r6, pc}
 8020de8:	0802406a 	.word	0x0802406a
 8020dec:	080240ed 	.word	0x080240ed

08020df0 <__multadd>:
 8020df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020df4:	690d      	ldr	r5, [r1, #16]
 8020df6:	4607      	mov	r7, r0
 8020df8:	460c      	mov	r4, r1
 8020dfa:	461e      	mov	r6, r3
 8020dfc:	f101 0c14 	add.w	ip, r1, #20
 8020e00:	2000      	movs	r0, #0
 8020e02:	f8dc 3000 	ldr.w	r3, [ip]
 8020e06:	b299      	uxth	r1, r3
 8020e08:	fb02 6101 	mla	r1, r2, r1, r6
 8020e0c:	0c1e      	lsrs	r6, r3, #16
 8020e0e:	0c0b      	lsrs	r3, r1, #16
 8020e10:	fb02 3306 	mla	r3, r2, r6, r3
 8020e14:	b289      	uxth	r1, r1
 8020e16:	3001      	adds	r0, #1
 8020e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020e1c:	4285      	cmp	r5, r0
 8020e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8020e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020e26:	dcec      	bgt.n	8020e02 <__multadd+0x12>
 8020e28:	b30e      	cbz	r6, 8020e6e <__multadd+0x7e>
 8020e2a:	68a3      	ldr	r3, [r4, #8]
 8020e2c:	42ab      	cmp	r3, r5
 8020e2e:	dc19      	bgt.n	8020e64 <__multadd+0x74>
 8020e30:	6861      	ldr	r1, [r4, #4]
 8020e32:	4638      	mov	r0, r7
 8020e34:	3101      	adds	r1, #1
 8020e36:	f7ff ff79 	bl	8020d2c <_Balloc>
 8020e3a:	4680      	mov	r8, r0
 8020e3c:	b928      	cbnz	r0, 8020e4a <__multadd+0x5a>
 8020e3e:	4602      	mov	r2, r0
 8020e40:	4b0c      	ldr	r3, [pc, #48]	; (8020e74 <__multadd+0x84>)
 8020e42:	480d      	ldr	r0, [pc, #52]	; (8020e78 <__multadd+0x88>)
 8020e44:	21b5      	movs	r1, #181	; 0xb5
 8020e46:	f7fd fd21 	bl	801e88c <__assert_func>
 8020e4a:	6922      	ldr	r2, [r4, #16]
 8020e4c:	3202      	adds	r2, #2
 8020e4e:	f104 010c 	add.w	r1, r4, #12
 8020e52:	0092      	lsls	r2, r2, #2
 8020e54:	300c      	adds	r0, #12
 8020e56:	f7fd fe87 	bl	801eb68 <memcpy>
 8020e5a:	4621      	mov	r1, r4
 8020e5c:	4638      	mov	r0, r7
 8020e5e:	f7ff ffa5 	bl	8020dac <_Bfree>
 8020e62:	4644      	mov	r4, r8
 8020e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020e68:	3501      	adds	r5, #1
 8020e6a:	615e      	str	r6, [r3, #20]
 8020e6c:	6125      	str	r5, [r4, #16]
 8020e6e:	4620      	mov	r0, r4
 8020e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e74:	080240dc 	.word	0x080240dc
 8020e78:	080240ed 	.word	0x080240ed

08020e7c <__hi0bits>:
 8020e7c:	0c03      	lsrs	r3, r0, #16
 8020e7e:	041b      	lsls	r3, r3, #16
 8020e80:	b9d3      	cbnz	r3, 8020eb8 <__hi0bits+0x3c>
 8020e82:	0400      	lsls	r0, r0, #16
 8020e84:	2310      	movs	r3, #16
 8020e86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020e8a:	bf04      	itt	eq
 8020e8c:	0200      	lsleq	r0, r0, #8
 8020e8e:	3308      	addeq	r3, #8
 8020e90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020e94:	bf04      	itt	eq
 8020e96:	0100      	lsleq	r0, r0, #4
 8020e98:	3304      	addeq	r3, #4
 8020e9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020e9e:	bf04      	itt	eq
 8020ea0:	0080      	lsleq	r0, r0, #2
 8020ea2:	3302      	addeq	r3, #2
 8020ea4:	2800      	cmp	r0, #0
 8020ea6:	db05      	blt.n	8020eb4 <__hi0bits+0x38>
 8020ea8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020eac:	f103 0301 	add.w	r3, r3, #1
 8020eb0:	bf08      	it	eq
 8020eb2:	2320      	moveq	r3, #32
 8020eb4:	4618      	mov	r0, r3
 8020eb6:	4770      	bx	lr
 8020eb8:	2300      	movs	r3, #0
 8020eba:	e7e4      	b.n	8020e86 <__hi0bits+0xa>

08020ebc <__lo0bits>:
 8020ebc:	6803      	ldr	r3, [r0, #0]
 8020ebe:	f013 0207 	ands.w	r2, r3, #7
 8020ec2:	4601      	mov	r1, r0
 8020ec4:	d00b      	beq.n	8020ede <__lo0bits+0x22>
 8020ec6:	07da      	lsls	r2, r3, #31
 8020ec8:	d423      	bmi.n	8020f12 <__lo0bits+0x56>
 8020eca:	0798      	lsls	r0, r3, #30
 8020ecc:	bf49      	itett	mi
 8020ece:	085b      	lsrmi	r3, r3, #1
 8020ed0:	089b      	lsrpl	r3, r3, #2
 8020ed2:	2001      	movmi	r0, #1
 8020ed4:	600b      	strmi	r3, [r1, #0]
 8020ed6:	bf5c      	itt	pl
 8020ed8:	600b      	strpl	r3, [r1, #0]
 8020eda:	2002      	movpl	r0, #2
 8020edc:	4770      	bx	lr
 8020ede:	b298      	uxth	r0, r3
 8020ee0:	b9a8      	cbnz	r0, 8020f0e <__lo0bits+0x52>
 8020ee2:	0c1b      	lsrs	r3, r3, #16
 8020ee4:	2010      	movs	r0, #16
 8020ee6:	b2da      	uxtb	r2, r3
 8020ee8:	b90a      	cbnz	r2, 8020eee <__lo0bits+0x32>
 8020eea:	3008      	adds	r0, #8
 8020eec:	0a1b      	lsrs	r3, r3, #8
 8020eee:	071a      	lsls	r2, r3, #28
 8020ef0:	bf04      	itt	eq
 8020ef2:	091b      	lsreq	r3, r3, #4
 8020ef4:	3004      	addeq	r0, #4
 8020ef6:	079a      	lsls	r2, r3, #30
 8020ef8:	bf04      	itt	eq
 8020efa:	089b      	lsreq	r3, r3, #2
 8020efc:	3002      	addeq	r0, #2
 8020efe:	07da      	lsls	r2, r3, #31
 8020f00:	d403      	bmi.n	8020f0a <__lo0bits+0x4e>
 8020f02:	085b      	lsrs	r3, r3, #1
 8020f04:	f100 0001 	add.w	r0, r0, #1
 8020f08:	d005      	beq.n	8020f16 <__lo0bits+0x5a>
 8020f0a:	600b      	str	r3, [r1, #0]
 8020f0c:	4770      	bx	lr
 8020f0e:	4610      	mov	r0, r2
 8020f10:	e7e9      	b.n	8020ee6 <__lo0bits+0x2a>
 8020f12:	2000      	movs	r0, #0
 8020f14:	4770      	bx	lr
 8020f16:	2020      	movs	r0, #32
 8020f18:	4770      	bx	lr
	...

08020f1c <__i2b>:
 8020f1c:	b510      	push	{r4, lr}
 8020f1e:	460c      	mov	r4, r1
 8020f20:	2101      	movs	r1, #1
 8020f22:	f7ff ff03 	bl	8020d2c <_Balloc>
 8020f26:	4602      	mov	r2, r0
 8020f28:	b928      	cbnz	r0, 8020f36 <__i2b+0x1a>
 8020f2a:	4b05      	ldr	r3, [pc, #20]	; (8020f40 <__i2b+0x24>)
 8020f2c:	4805      	ldr	r0, [pc, #20]	; (8020f44 <__i2b+0x28>)
 8020f2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020f32:	f7fd fcab 	bl	801e88c <__assert_func>
 8020f36:	2301      	movs	r3, #1
 8020f38:	6144      	str	r4, [r0, #20]
 8020f3a:	6103      	str	r3, [r0, #16]
 8020f3c:	bd10      	pop	{r4, pc}
 8020f3e:	bf00      	nop
 8020f40:	080240dc 	.word	0x080240dc
 8020f44:	080240ed 	.word	0x080240ed

08020f48 <__multiply>:
 8020f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f4c:	4691      	mov	r9, r2
 8020f4e:	690a      	ldr	r2, [r1, #16]
 8020f50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020f54:	429a      	cmp	r2, r3
 8020f56:	bfb8      	it	lt
 8020f58:	460b      	movlt	r3, r1
 8020f5a:	460c      	mov	r4, r1
 8020f5c:	bfbc      	itt	lt
 8020f5e:	464c      	movlt	r4, r9
 8020f60:	4699      	movlt	r9, r3
 8020f62:	6927      	ldr	r7, [r4, #16]
 8020f64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020f68:	68a3      	ldr	r3, [r4, #8]
 8020f6a:	6861      	ldr	r1, [r4, #4]
 8020f6c:	eb07 060a 	add.w	r6, r7, sl
 8020f70:	42b3      	cmp	r3, r6
 8020f72:	b085      	sub	sp, #20
 8020f74:	bfb8      	it	lt
 8020f76:	3101      	addlt	r1, #1
 8020f78:	f7ff fed8 	bl	8020d2c <_Balloc>
 8020f7c:	b930      	cbnz	r0, 8020f8c <__multiply+0x44>
 8020f7e:	4602      	mov	r2, r0
 8020f80:	4b44      	ldr	r3, [pc, #272]	; (8021094 <__multiply+0x14c>)
 8020f82:	4845      	ldr	r0, [pc, #276]	; (8021098 <__multiply+0x150>)
 8020f84:	f240 115d 	movw	r1, #349	; 0x15d
 8020f88:	f7fd fc80 	bl	801e88c <__assert_func>
 8020f8c:	f100 0514 	add.w	r5, r0, #20
 8020f90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020f94:	462b      	mov	r3, r5
 8020f96:	2200      	movs	r2, #0
 8020f98:	4543      	cmp	r3, r8
 8020f9a:	d321      	bcc.n	8020fe0 <__multiply+0x98>
 8020f9c:	f104 0314 	add.w	r3, r4, #20
 8020fa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020fa4:	f109 0314 	add.w	r3, r9, #20
 8020fa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020fac:	9202      	str	r2, [sp, #8]
 8020fae:	1b3a      	subs	r2, r7, r4
 8020fb0:	3a15      	subs	r2, #21
 8020fb2:	f022 0203 	bic.w	r2, r2, #3
 8020fb6:	3204      	adds	r2, #4
 8020fb8:	f104 0115 	add.w	r1, r4, #21
 8020fbc:	428f      	cmp	r7, r1
 8020fbe:	bf38      	it	cc
 8020fc0:	2204      	movcc	r2, #4
 8020fc2:	9201      	str	r2, [sp, #4]
 8020fc4:	9a02      	ldr	r2, [sp, #8]
 8020fc6:	9303      	str	r3, [sp, #12]
 8020fc8:	429a      	cmp	r2, r3
 8020fca:	d80c      	bhi.n	8020fe6 <__multiply+0x9e>
 8020fcc:	2e00      	cmp	r6, #0
 8020fce:	dd03      	ble.n	8020fd8 <__multiply+0x90>
 8020fd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d05a      	beq.n	802108e <__multiply+0x146>
 8020fd8:	6106      	str	r6, [r0, #16]
 8020fda:	b005      	add	sp, #20
 8020fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fe0:	f843 2b04 	str.w	r2, [r3], #4
 8020fe4:	e7d8      	b.n	8020f98 <__multiply+0x50>
 8020fe6:	f8b3 a000 	ldrh.w	sl, [r3]
 8020fea:	f1ba 0f00 	cmp.w	sl, #0
 8020fee:	d024      	beq.n	802103a <__multiply+0xf2>
 8020ff0:	f104 0e14 	add.w	lr, r4, #20
 8020ff4:	46a9      	mov	r9, r5
 8020ff6:	f04f 0c00 	mov.w	ip, #0
 8020ffa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8020ffe:	f8d9 1000 	ldr.w	r1, [r9]
 8021002:	fa1f fb82 	uxth.w	fp, r2
 8021006:	b289      	uxth	r1, r1
 8021008:	fb0a 110b 	mla	r1, sl, fp, r1
 802100c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021010:	f8d9 2000 	ldr.w	r2, [r9]
 8021014:	4461      	add	r1, ip
 8021016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802101a:	fb0a c20b 	mla	r2, sl, fp, ip
 802101e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021022:	b289      	uxth	r1, r1
 8021024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021028:	4577      	cmp	r7, lr
 802102a:	f849 1b04 	str.w	r1, [r9], #4
 802102e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021032:	d8e2      	bhi.n	8020ffa <__multiply+0xb2>
 8021034:	9a01      	ldr	r2, [sp, #4]
 8021036:	f845 c002 	str.w	ip, [r5, r2]
 802103a:	9a03      	ldr	r2, [sp, #12]
 802103c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021040:	3304      	adds	r3, #4
 8021042:	f1b9 0f00 	cmp.w	r9, #0
 8021046:	d020      	beq.n	802108a <__multiply+0x142>
 8021048:	6829      	ldr	r1, [r5, #0]
 802104a:	f104 0c14 	add.w	ip, r4, #20
 802104e:	46ae      	mov	lr, r5
 8021050:	f04f 0a00 	mov.w	sl, #0
 8021054:	f8bc b000 	ldrh.w	fp, [ip]
 8021058:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802105c:	fb09 220b 	mla	r2, r9, fp, r2
 8021060:	4492      	add	sl, r2
 8021062:	b289      	uxth	r1, r1
 8021064:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021068:	f84e 1b04 	str.w	r1, [lr], #4
 802106c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021070:	f8be 1000 	ldrh.w	r1, [lr]
 8021074:	0c12      	lsrs	r2, r2, #16
 8021076:	fb09 1102 	mla	r1, r9, r2, r1
 802107a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802107e:	4567      	cmp	r7, ip
 8021080:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021084:	d8e6      	bhi.n	8021054 <__multiply+0x10c>
 8021086:	9a01      	ldr	r2, [sp, #4]
 8021088:	50a9      	str	r1, [r5, r2]
 802108a:	3504      	adds	r5, #4
 802108c:	e79a      	b.n	8020fc4 <__multiply+0x7c>
 802108e:	3e01      	subs	r6, #1
 8021090:	e79c      	b.n	8020fcc <__multiply+0x84>
 8021092:	bf00      	nop
 8021094:	080240dc 	.word	0x080240dc
 8021098:	080240ed 	.word	0x080240ed

0802109c <__pow5mult>:
 802109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210a0:	4615      	mov	r5, r2
 80210a2:	f012 0203 	ands.w	r2, r2, #3
 80210a6:	4606      	mov	r6, r0
 80210a8:	460f      	mov	r7, r1
 80210aa:	d007      	beq.n	80210bc <__pow5mult+0x20>
 80210ac:	4c25      	ldr	r4, [pc, #148]	; (8021144 <__pow5mult+0xa8>)
 80210ae:	3a01      	subs	r2, #1
 80210b0:	2300      	movs	r3, #0
 80210b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80210b6:	f7ff fe9b 	bl	8020df0 <__multadd>
 80210ba:	4607      	mov	r7, r0
 80210bc:	10ad      	asrs	r5, r5, #2
 80210be:	d03d      	beq.n	802113c <__pow5mult+0xa0>
 80210c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80210c2:	b97c      	cbnz	r4, 80210e4 <__pow5mult+0x48>
 80210c4:	2010      	movs	r0, #16
 80210c6:	f7fd fd3f 	bl	801eb48 <malloc>
 80210ca:	4602      	mov	r2, r0
 80210cc:	6270      	str	r0, [r6, #36]	; 0x24
 80210ce:	b928      	cbnz	r0, 80210dc <__pow5mult+0x40>
 80210d0:	4b1d      	ldr	r3, [pc, #116]	; (8021148 <__pow5mult+0xac>)
 80210d2:	481e      	ldr	r0, [pc, #120]	; (802114c <__pow5mult+0xb0>)
 80210d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80210d8:	f7fd fbd8 	bl	801e88c <__assert_func>
 80210dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80210e0:	6004      	str	r4, [r0, #0]
 80210e2:	60c4      	str	r4, [r0, #12]
 80210e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80210e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80210ec:	b94c      	cbnz	r4, 8021102 <__pow5mult+0x66>
 80210ee:	f240 2171 	movw	r1, #625	; 0x271
 80210f2:	4630      	mov	r0, r6
 80210f4:	f7ff ff12 	bl	8020f1c <__i2b>
 80210f8:	2300      	movs	r3, #0
 80210fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80210fe:	4604      	mov	r4, r0
 8021100:	6003      	str	r3, [r0, #0]
 8021102:	f04f 0900 	mov.w	r9, #0
 8021106:	07eb      	lsls	r3, r5, #31
 8021108:	d50a      	bpl.n	8021120 <__pow5mult+0x84>
 802110a:	4639      	mov	r1, r7
 802110c:	4622      	mov	r2, r4
 802110e:	4630      	mov	r0, r6
 8021110:	f7ff ff1a 	bl	8020f48 <__multiply>
 8021114:	4639      	mov	r1, r7
 8021116:	4680      	mov	r8, r0
 8021118:	4630      	mov	r0, r6
 802111a:	f7ff fe47 	bl	8020dac <_Bfree>
 802111e:	4647      	mov	r7, r8
 8021120:	106d      	asrs	r5, r5, #1
 8021122:	d00b      	beq.n	802113c <__pow5mult+0xa0>
 8021124:	6820      	ldr	r0, [r4, #0]
 8021126:	b938      	cbnz	r0, 8021138 <__pow5mult+0x9c>
 8021128:	4622      	mov	r2, r4
 802112a:	4621      	mov	r1, r4
 802112c:	4630      	mov	r0, r6
 802112e:	f7ff ff0b 	bl	8020f48 <__multiply>
 8021132:	6020      	str	r0, [r4, #0]
 8021134:	f8c0 9000 	str.w	r9, [r0]
 8021138:	4604      	mov	r4, r0
 802113a:	e7e4      	b.n	8021106 <__pow5mult+0x6a>
 802113c:	4638      	mov	r0, r7
 802113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021142:	bf00      	nop
 8021144:	08024240 	.word	0x08024240
 8021148:	0802406a 	.word	0x0802406a
 802114c:	080240ed 	.word	0x080240ed

08021150 <__lshift>:
 8021150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021154:	460c      	mov	r4, r1
 8021156:	6849      	ldr	r1, [r1, #4]
 8021158:	6923      	ldr	r3, [r4, #16]
 802115a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802115e:	68a3      	ldr	r3, [r4, #8]
 8021160:	4607      	mov	r7, r0
 8021162:	4691      	mov	r9, r2
 8021164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021168:	f108 0601 	add.w	r6, r8, #1
 802116c:	42b3      	cmp	r3, r6
 802116e:	db0b      	blt.n	8021188 <__lshift+0x38>
 8021170:	4638      	mov	r0, r7
 8021172:	f7ff fddb 	bl	8020d2c <_Balloc>
 8021176:	4605      	mov	r5, r0
 8021178:	b948      	cbnz	r0, 802118e <__lshift+0x3e>
 802117a:	4602      	mov	r2, r0
 802117c:	4b2a      	ldr	r3, [pc, #168]	; (8021228 <__lshift+0xd8>)
 802117e:	482b      	ldr	r0, [pc, #172]	; (802122c <__lshift+0xdc>)
 8021180:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021184:	f7fd fb82 	bl	801e88c <__assert_func>
 8021188:	3101      	adds	r1, #1
 802118a:	005b      	lsls	r3, r3, #1
 802118c:	e7ee      	b.n	802116c <__lshift+0x1c>
 802118e:	2300      	movs	r3, #0
 8021190:	f100 0114 	add.w	r1, r0, #20
 8021194:	f100 0210 	add.w	r2, r0, #16
 8021198:	4618      	mov	r0, r3
 802119a:	4553      	cmp	r3, sl
 802119c:	db37      	blt.n	802120e <__lshift+0xbe>
 802119e:	6920      	ldr	r0, [r4, #16]
 80211a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80211a4:	f104 0314 	add.w	r3, r4, #20
 80211a8:	f019 091f 	ands.w	r9, r9, #31
 80211ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80211b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80211b4:	d02f      	beq.n	8021216 <__lshift+0xc6>
 80211b6:	f1c9 0e20 	rsb	lr, r9, #32
 80211ba:	468a      	mov	sl, r1
 80211bc:	f04f 0c00 	mov.w	ip, #0
 80211c0:	681a      	ldr	r2, [r3, #0]
 80211c2:	fa02 f209 	lsl.w	r2, r2, r9
 80211c6:	ea42 020c 	orr.w	r2, r2, ip
 80211ca:	f84a 2b04 	str.w	r2, [sl], #4
 80211ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80211d2:	4298      	cmp	r0, r3
 80211d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80211d8:	d8f2      	bhi.n	80211c0 <__lshift+0x70>
 80211da:	1b03      	subs	r3, r0, r4
 80211dc:	3b15      	subs	r3, #21
 80211de:	f023 0303 	bic.w	r3, r3, #3
 80211e2:	3304      	adds	r3, #4
 80211e4:	f104 0215 	add.w	r2, r4, #21
 80211e8:	4290      	cmp	r0, r2
 80211ea:	bf38      	it	cc
 80211ec:	2304      	movcc	r3, #4
 80211ee:	f841 c003 	str.w	ip, [r1, r3]
 80211f2:	f1bc 0f00 	cmp.w	ip, #0
 80211f6:	d001      	beq.n	80211fc <__lshift+0xac>
 80211f8:	f108 0602 	add.w	r6, r8, #2
 80211fc:	3e01      	subs	r6, #1
 80211fe:	4638      	mov	r0, r7
 8021200:	612e      	str	r6, [r5, #16]
 8021202:	4621      	mov	r1, r4
 8021204:	f7ff fdd2 	bl	8020dac <_Bfree>
 8021208:	4628      	mov	r0, r5
 802120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802120e:	f842 0f04 	str.w	r0, [r2, #4]!
 8021212:	3301      	adds	r3, #1
 8021214:	e7c1      	b.n	802119a <__lshift+0x4a>
 8021216:	3904      	subs	r1, #4
 8021218:	f853 2b04 	ldr.w	r2, [r3], #4
 802121c:	f841 2f04 	str.w	r2, [r1, #4]!
 8021220:	4298      	cmp	r0, r3
 8021222:	d8f9      	bhi.n	8021218 <__lshift+0xc8>
 8021224:	e7ea      	b.n	80211fc <__lshift+0xac>
 8021226:	bf00      	nop
 8021228:	080240dc 	.word	0x080240dc
 802122c:	080240ed 	.word	0x080240ed

08021230 <__mcmp>:
 8021230:	b530      	push	{r4, r5, lr}
 8021232:	6902      	ldr	r2, [r0, #16]
 8021234:	690c      	ldr	r4, [r1, #16]
 8021236:	1b12      	subs	r2, r2, r4
 8021238:	d10e      	bne.n	8021258 <__mcmp+0x28>
 802123a:	f100 0314 	add.w	r3, r0, #20
 802123e:	3114      	adds	r1, #20
 8021240:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021244:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021248:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802124c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021250:	42a5      	cmp	r5, r4
 8021252:	d003      	beq.n	802125c <__mcmp+0x2c>
 8021254:	d305      	bcc.n	8021262 <__mcmp+0x32>
 8021256:	2201      	movs	r2, #1
 8021258:	4610      	mov	r0, r2
 802125a:	bd30      	pop	{r4, r5, pc}
 802125c:	4283      	cmp	r3, r0
 802125e:	d3f3      	bcc.n	8021248 <__mcmp+0x18>
 8021260:	e7fa      	b.n	8021258 <__mcmp+0x28>
 8021262:	f04f 32ff 	mov.w	r2, #4294967295
 8021266:	e7f7      	b.n	8021258 <__mcmp+0x28>

08021268 <__mdiff>:
 8021268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802126c:	460c      	mov	r4, r1
 802126e:	4606      	mov	r6, r0
 8021270:	4611      	mov	r1, r2
 8021272:	4620      	mov	r0, r4
 8021274:	4690      	mov	r8, r2
 8021276:	f7ff ffdb 	bl	8021230 <__mcmp>
 802127a:	1e05      	subs	r5, r0, #0
 802127c:	d110      	bne.n	80212a0 <__mdiff+0x38>
 802127e:	4629      	mov	r1, r5
 8021280:	4630      	mov	r0, r6
 8021282:	f7ff fd53 	bl	8020d2c <_Balloc>
 8021286:	b930      	cbnz	r0, 8021296 <__mdiff+0x2e>
 8021288:	4b3a      	ldr	r3, [pc, #232]	; (8021374 <__mdiff+0x10c>)
 802128a:	4602      	mov	r2, r0
 802128c:	f240 2132 	movw	r1, #562	; 0x232
 8021290:	4839      	ldr	r0, [pc, #228]	; (8021378 <__mdiff+0x110>)
 8021292:	f7fd fafb 	bl	801e88c <__assert_func>
 8021296:	2301      	movs	r3, #1
 8021298:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802129c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212a0:	bfa4      	itt	ge
 80212a2:	4643      	movge	r3, r8
 80212a4:	46a0      	movge	r8, r4
 80212a6:	4630      	mov	r0, r6
 80212a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80212ac:	bfa6      	itte	ge
 80212ae:	461c      	movge	r4, r3
 80212b0:	2500      	movge	r5, #0
 80212b2:	2501      	movlt	r5, #1
 80212b4:	f7ff fd3a 	bl	8020d2c <_Balloc>
 80212b8:	b920      	cbnz	r0, 80212c4 <__mdiff+0x5c>
 80212ba:	4b2e      	ldr	r3, [pc, #184]	; (8021374 <__mdiff+0x10c>)
 80212bc:	4602      	mov	r2, r0
 80212be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80212c2:	e7e5      	b.n	8021290 <__mdiff+0x28>
 80212c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80212c8:	6926      	ldr	r6, [r4, #16]
 80212ca:	60c5      	str	r5, [r0, #12]
 80212cc:	f104 0914 	add.w	r9, r4, #20
 80212d0:	f108 0514 	add.w	r5, r8, #20
 80212d4:	f100 0e14 	add.w	lr, r0, #20
 80212d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80212dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80212e0:	f108 0210 	add.w	r2, r8, #16
 80212e4:	46f2      	mov	sl, lr
 80212e6:	2100      	movs	r1, #0
 80212e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80212ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80212f0:	fa1f f883 	uxth.w	r8, r3
 80212f4:	fa11 f18b 	uxtah	r1, r1, fp
 80212f8:	0c1b      	lsrs	r3, r3, #16
 80212fa:	eba1 0808 	sub.w	r8, r1, r8
 80212fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021302:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021306:	fa1f f888 	uxth.w	r8, r8
 802130a:	1419      	asrs	r1, r3, #16
 802130c:	454e      	cmp	r6, r9
 802130e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021312:	f84a 3b04 	str.w	r3, [sl], #4
 8021316:	d8e7      	bhi.n	80212e8 <__mdiff+0x80>
 8021318:	1b33      	subs	r3, r6, r4
 802131a:	3b15      	subs	r3, #21
 802131c:	f023 0303 	bic.w	r3, r3, #3
 8021320:	3304      	adds	r3, #4
 8021322:	3415      	adds	r4, #21
 8021324:	42a6      	cmp	r6, r4
 8021326:	bf38      	it	cc
 8021328:	2304      	movcc	r3, #4
 802132a:	441d      	add	r5, r3
 802132c:	4473      	add	r3, lr
 802132e:	469e      	mov	lr, r3
 8021330:	462e      	mov	r6, r5
 8021332:	4566      	cmp	r6, ip
 8021334:	d30e      	bcc.n	8021354 <__mdiff+0xec>
 8021336:	f10c 0203 	add.w	r2, ip, #3
 802133a:	1b52      	subs	r2, r2, r5
 802133c:	f022 0203 	bic.w	r2, r2, #3
 8021340:	3d03      	subs	r5, #3
 8021342:	45ac      	cmp	ip, r5
 8021344:	bf38      	it	cc
 8021346:	2200      	movcc	r2, #0
 8021348:	441a      	add	r2, r3
 802134a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802134e:	b17b      	cbz	r3, 8021370 <__mdiff+0x108>
 8021350:	6107      	str	r7, [r0, #16]
 8021352:	e7a3      	b.n	802129c <__mdiff+0x34>
 8021354:	f856 8b04 	ldr.w	r8, [r6], #4
 8021358:	fa11 f288 	uxtah	r2, r1, r8
 802135c:	1414      	asrs	r4, r2, #16
 802135e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8021362:	b292      	uxth	r2, r2
 8021364:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021368:	f84e 2b04 	str.w	r2, [lr], #4
 802136c:	1421      	asrs	r1, r4, #16
 802136e:	e7e0      	b.n	8021332 <__mdiff+0xca>
 8021370:	3f01      	subs	r7, #1
 8021372:	e7ea      	b.n	802134a <__mdiff+0xe2>
 8021374:	080240dc 	.word	0x080240dc
 8021378:	080240ed 	.word	0x080240ed

0802137c <__d2b>:
 802137c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021380:	4689      	mov	r9, r1
 8021382:	2101      	movs	r1, #1
 8021384:	ec57 6b10 	vmov	r6, r7, d0
 8021388:	4690      	mov	r8, r2
 802138a:	f7ff fccf 	bl	8020d2c <_Balloc>
 802138e:	4604      	mov	r4, r0
 8021390:	b930      	cbnz	r0, 80213a0 <__d2b+0x24>
 8021392:	4602      	mov	r2, r0
 8021394:	4b25      	ldr	r3, [pc, #148]	; (802142c <__d2b+0xb0>)
 8021396:	4826      	ldr	r0, [pc, #152]	; (8021430 <__d2b+0xb4>)
 8021398:	f240 310a 	movw	r1, #778	; 0x30a
 802139c:	f7fd fa76 	bl	801e88c <__assert_func>
 80213a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80213a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80213a8:	bb35      	cbnz	r5, 80213f8 <__d2b+0x7c>
 80213aa:	2e00      	cmp	r6, #0
 80213ac:	9301      	str	r3, [sp, #4]
 80213ae:	d028      	beq.n	8021402 <__d2b+0x86>
 80213b0:	4668      	mov	r0, sp
 80213b2:	9600      	str	r6, [sp, #0]
 80213b4:	f7ff fd82 	bl	8020ebc <__lo0bits>
 80213b8:	9900      	ldr	r1, [sp, #0]
 80213ba:	b300      	cbz	r0, 80213fe <__d2b+0x82>
 80213bc:	9a01      	ldr	r2, [sp, #4]
 80213be:	f1c0 0320 	rsb	r3, r0, #32
 80213c2:	fa02 f303 	lsl.w	r3, r2, r3
 80213c6:	430b      	orrs	r3, r1
 80213c8:	40c2      	lsrs	r2, r0
 80213ca:	6163      	str	r3, [r4, #20]
 80213cc:	9201      	str	r2, [sp, #4]
 80213ce:	9b01      	ldr	r3, [sp, #4]
 80213d0:	61a3      	str	r3, [r4, #24]
 80213d2:	2b00      	cmp	r3, #0
 80213d4:	bf14      	ite	ne
 80213d6:	2202      	movne	r2, #2
 80213d8:	2201      	moveq	r2, #1
 80213da:	6122      	str	r2, [r4, #16]
 80213dc:	b1d5      	cbz	r5, 8021414 <__d2b+0x98>
 80213de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80213e2:	4405      	add	r5, r0
 80213e4:	f8c9 5000 	str.w	r5, [r9]
 80213e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80213ec:	f8c8 0000 	str.w	r0, [r8]
 80213f0:	4620      	mov	r0, r4
 80213f2:	b003      	add	sp, #12
 80213f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80213f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80213fc:	e7d5      	b.n	80213aa <__d2b+0x2e>
 80213fe:	6161      	str	r1, [r4, #20]
 8021400:	e7e5      	b.n	80213ce <__d2b+0x52>
 8021402:	a801      	add	r0, sp, #4
 8021404:	f7ff fd5a 	bl	8020ebc <__lo0bits>
 8021408:	9b01      	ldr	r3, [sp, #4]
 802140a:	6163      	str	r3, [r4, #20]
 802140c:	2201      	movs	r2, #1
 802140e:	6122      	str	r2, [r4, #16]
 8021410:	3020      	adds	r0, #32
 8021412:	e7e3      	b.n	80213dc <__d2b+0x60>
 8021414:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021418:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802141c:	f8c9 0000 	str.w	r0, [r9]
 8021420:	6918      	ldr	r0, [r3, #16]
 8021422:	f7ff fd2b 	bl	8020e7c <__hi0bits>
 8021426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802142a:	e7df      	b.n	80213ec <__d2b+0x70>
 802142c:	080240dc 	.word	0x080240dc
 8021430:	080240ed 	.word	0x080240ed

08021434 <_calloc_r>:
 8021434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021436:	fba1 2402 	umull	r2, r4, r1, r2
 802143a:	b94c      	cbnz	r4, 8021450 <_calloc_r+0x1c>
 802143c:	4611      	mov	r1, r2
 802143e:	9201      	str	r2, [sp, #4]
 8021440:	f7fd fc14 	bl	801ec6c <_malloc_r>
 8021444:	9a01      	ldr	r2, [sp, #4]
 8021446:	4605      	mov	r5, r0
 8021448:	b930      	cbnz	r0, 8021458 <_calloc_r+0x24>
 802144a:	4628      	mov	r0, r5
 802144c:	b003      	add	sp, #12
 802144e:	bd30      	pop	{r4, r5, pc}
 8021450:	220c      	movs	r2, #12
 8021452:	6002      	str	r2, [r0, #0]
 8021454:	2500      	movs	r5, #0
 8021456:	e7f8      	b.n	802144a <_calloc_r+0x16>
 8021458:	4621      	mov	r1, r4
 802145a:	f7fd fb93 	bl	801eb84 <memset>
 802145e:	e7f4      	b.n	802144a <_calloc_r+0x16>

08021460 <_realloc_r>:
 8021460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021464:	4680      	mov	r8, r0
 8021466:	4614      	mov	r4, r2
 8021468:	460e      	mov	r6, r1
 802146a:	b921      	cbnz	r1, 8021476 <_realloc_r+0x16>
 802146c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021470:	4611      	mov	r1, r2
 8021472:	f7fd bbfb 	b.w	801ec6c <_malloc_r>
 8021476:	b92a      	cbnz	r2, 8021484 <_realloc_r+0x24>
 8021478:	f7fd fb8c 	bl	801eb94 <_free_r>
 802147c:	4625      	mov	r5, r4
 802147e:	4628      	mov	r0, r5
 8021480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021484:	f000 f9bc 	bl	8021800 <_malloc_usable_size_r>
 8021488:	4284      	cmp	r4, r0
 802148a:	4607      	mov	r7, r0
 802148c:	d802      	bhi.n	8021494 <_realloc_r+0x34>
 802148e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021492:	d812      	bhi.n	80214ba <_realloc_r+0x5a>
 8021494:	4621      	mov	r1, r4
 8021496:	4640      	mov	r0, r8
 8021498:	f7fd fbe8 	bl	801ec6c <_malloc_r>
 802149c:	4605      	mov	r5, r0
 802149e:	2800      	cmp	r0, #0
 80214a0:	d0ed      	beq.n	802147e <_realloc_r+0x1e>
 80214a2:	42bc      	cmp	r4, r7
 80214a4:	4622      	mov	r2, r4
 80214a6:	4631      	mov	r1, r6
 80214a8:	bf28      	it	cs
 80214aa:	463a      	movcs	r2, r7
 80214ac:	f7fd fb5c 	bl	801eb68 <memcpy>
 80214b0:	4631      	mov	r1, r6
 80214b2:	4640      	mov	r0, r8
 80214b4:	f7fd fb6e 	bl	801eb94 <_free_r>
 80214b8:	e7e1      	b.n	802147e <_realloc_r+0x1e>
 80214ba:	4635      	mov	r5, r6
 80214bc:	e7df      	b.n	802147e <_realloc_r+0x1e>

080214be <__ssputs_r>:
 80214be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214c2:	688e      	ldr	r6, [r1, #8]
 80214c4:	429e      	cmp	r6, r3
 80214c6:	4682      	mov	sl, r0
 80214c8:	460c      	mov	r4, r1
 80214ca:	4690      	mov	r8, r2
 80214cc:	461f      	mov	r7, r3
 80214ce:	d838      	bhi.n	8021542 <__ssputs_r+0x84>
 80214d0:	898a      	ldrh	r2, [r1, #12]
 80214d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80214d6:	d032      	beq.n	802153e <__ssputs_r+0x80>
 80214d8:	6825      	ldr	r5, [r4, #0]
 80214da:	6909      	ldr	r1, [r1, #16]
 80214dc:	eba5 0901 	sub.w	r9, r5, r1
 80214e0:	6965      	ldr	r5, [r4, #20]
 80214e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80214e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80214ea:	3301      	adds	r3, #1
 80214ec:	444b      	add	r3, r9
 80214ee:	106d      	asrs	r5, r5, #1
 80214f0:	429d      	cmp	r5, r3
 80214f2:	bf38      	it	cc
 80214f4:	461d      	movcc	r5, r3
 80214f6:	0553      	lsls	r3, r2, #21
 80214f8:	d531      	bpl.n	802155e <__ssputs_r+0xa0>
 80214fa:	4629      	mov	r1, r5
 80214fc:	f7fd fbb6 	bl	801ec6c <_malloc_r>
 8021500:	4606      	mov	r6, r0
 8021502:	b950      	cbnz	r0, 802151a <__ssputs_r+0x5c>
 8021504:	230c      	movs	r3, #12
 8021506:	f8ca 3000 	str.w	r3, [sl]
 802150a:	89a3      	ldrh	r3, [r4, #12]
 802150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021510:	81a3      	strh	r3, [r4, #12]
 8021512:	f04f 30ff 	mov.w	r0, #4294967295
 8021516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802151a:	6921      	ldr	r1, [r4, #16]
 802151c:	464a      	mov	r2, r9
 802151e:	f7fd fb23 	bl	801eb68 <memcpy>
 8021522:	89a3      	ldrh	r3, [r4, #12]
 8021524:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802152c:	81a3      	strh	r3, [r4, #12]
 802152e:	6126      	str	r6, [r4, #16]
 8021530:	6165      	str	r5, [r4, #20]
 8021532:	444e      	add	r6, r9
 8021534:	eba5 0509 	sub.w	r5, r5, r9
 8021538:	6026      	str	r6, [r4, #0]
 802153a:	60a5      	str	r5, [r4, #8]
 802153c:	463e      	mov	r6, r7
 802153e:	42be      	cmp	r6, r7
 8021540:	d900      	bls.n	8021544 <__ssputs_r+0x86>
 8021542:	463e      	mov	r6, r7
 8021544:	6820      	ldr	r0, [r4, #0]
 8021546:	4632      	mov	r2, r6
 8021548:	4641      	mov	r1, r8
 802154a:	f7ff fbc9 	bl	8020ce0 <memmove>
 802154e:	68a3      	ldr	r3, [r4, #8]
 8021550:	1b9b      	subs	r3, r3, r6
 8021552:	60a3      	str	r3, [r4, #8]
 8021554:	6823      	ldr	r3, [r4, #0]
 8021556:	4433      	add	r3, r6
 8021558:	6023      	str	r3, [r4, #0]
 802155a:	2000      	movs	r0, #0
 802155c:	e7db      	b.n	8021516 <__ssputs_r+0x58>
 802155e:	462a      	mov	r2, r5
 8021560:	f7ff ff7e 	bl	8021460 <_realloc_r>
 8021564:	4606      	mov	r6, r0
 8021566:	2800      	cmp	r0, #0
 8021568:	d1e1      	bne.n	802152e <__ssputs_r+0x70>
 802156a:	6921      	ldr	r1, [r4, #16]
 802156c:	4650      	mov	r0, sl
 802156e:	f7fd fb11 	bl	801eb94 <_free_r>
 8021572:	e7c7      	b.n	8021504 <__ssputs_r+0x46>

08021574 <_svfiprintf_r>:
 8021574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021578:	4698      	mov	r8, r3
 802157a:	898b      	ldrh	r3, [r1, #12]
 802157c:	061b      	lsls	r3, r3, #24
 802157e:	b09d      	sub	sp, #116	; 0x74
 8021580:	4607      	mov	r7, r0
 8021582:	460d      	mov	r5, r1
 8021584:	4614      	mov	r4, r2
 8021586:	d50e      	bpl.n	80215a6 <_svfiprintf_r+0x32>
 8021588:	690b      	ldr	r3, [r1, #16]
 802158a:	b963      	cbnz	r3, 80215a6 <_svfiprintf_r+0x32>
 802158c:	2140      	movs	r1, #64	; 0x40
 802158e:	f7fd fb6d 	bl	801ec6c <_malloc_r>
 8021592:	6028      	str	r0, [r5, #0]
 8021594:	6128      	str	r0, [r5, #16]
 8021596:	b920      	cbnz	r0, 80215a2 <_svfiprintf_r+0x2e>
 8021598:	230c      	movs	r3, #12
 802159a:	603b      	str	r3, [r7, #0]
 802159c:	f04f 30ff 	mov.w	r0, #4294967295
 80215a0:	e0d1      	b.n	8021746 <_svfiprintf_r+0x1d2>
 80215a2:	2340      	movs	r3, #64	; 0x40
 80215a4:	616b      	str	r3, [r5, #20]
 80215a6:	2300      	movs	r3, #0
 80215a8:	9309      	str	r3, [sp, #36]	; 0x24
 80215aa:	2320      	movs	r3, #32
 80215ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80215b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80215b4:	2330      	movs	r3, #48	; 0x30
 80215b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021760 <_svfiprintf_r+0x1ec>
 80215ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80215be:	f04f 0901 	mov.w	r9, #1
 80215c2:	4623      	mov	r3, r4
 80215c4:	469a      	mov	sl, r3
 80215c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215ca:	b10a      	cbz	r2, 80215d0 <_svfiprintf_r+0x5c>
 80215cc:	2a25      	cmp	r2, #37	; 0x25
 80215ce:	d1f9      	bne.n	80215c4 <_svfiprintf_r+0x50>
 80215d0:	ebba 0b04 	subs.w	fp, sl, r4
 80215d4:	d00b      	beq.n	80215ee <_svfiprintf_r+0x7a>
 80215d6:	465b      	mov	r3, fp
 80215d8:	4622      	mov	r2, r4
 80215da:	4629      	mov	r1, r5
 80215dc:	4638      	mov	r0, r7
 80215de:	f7ff ff6e 	bl	80214be <__ssputs_r>
 80215e2:	3001      	adds	r0, #1
 80215e4:	f000 80aa 	beq.w	802173c <_svfiprintf_r+0x1c8>
 80215e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80215ea:	445a      	add	r2, fp
 80215ec:	9209      	str	r2, [sp, #36]	; 0x24
 80215ee:	f89a 3000 	ldrb.w	r3, [sl]
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	f000 80a2 	beq.w	802173c <_svfiprintf_r+0x1c8>
 80215f8:	2300      	movs	r3, #0
 80215fa:	f04f 32ff 	mov.w	r2, #4294967295
 80215fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021602:	f10a 0a01 	add.w	sl, sl, #1
 8021606:	9304      	str	r3, [sp, #16]
 8021608:	9307      	str	r3, [sp, #28]
 802160a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802160e:	931a      	str	r3, [sp, #104]	; 0x68
 8021610:	4654      	mov	r4, sl
 8021612:	2205      	movs	r2, #5
 8021614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021618:	4851      	ldr	r0, [pc, #324]	; (8021760 <_svfiprintf_r+0x1ec>)
 802161a:	f7de fe69 	bl	80002f0 <memchr>
 802161e:	9a04      	ldr	r2, [sp, #16]
 8021620:	b9d8      	cbnz	r0, 802165a <_svfiprintf_r+0xe6>
 8021622:	06d0      	lsls	r0, r2, #27
 8021624:	bf44      	itt	mi
 8021626:	2320      	movmi	r3, #32
 8021628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802162c:	0711      	lsls	r1, r2, #28
 802162e:	bf44      	itt	mi
 8021630:	232b      	movmi	r3, #43	; 0x2b
 8021632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021636:	f89a 3000 	ldrb.w	r3, [sl]
 802163a:	2b2a      	cmp	r3, #42	; 0x2a
 802163c:	d015      	beq.n	802166a <_svfiprintf_r+0xf6>
 802163e:	9a07      	ldr	r2, [sp, #28]
 8021640:	4654      	mov	r4, sl
 8021642:	2000      	movs	r0, #0
 8021644:	f04f 0c0a 	mov.w	ip, #10
 8021648:	4621      	mov	r1, r4
 802164a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802164e:	3b30      	subs	r3, #48	; 0x30
 8021650:	2b09      	cmp	r3, #9
 8021652:	d94e      	bls.n	80216f2 <_svfiprintf_r+0x17e>
 8021654:	b1b0      	cbz	r0, 8021684 <_svfiprintf_r+0x110>
 8021656:	9207      	str	r2, [sp, #28]
 8021658:	e014      	b.n	8021684 <_svfiprintf_r+0x110>
 802165a:	eba0 0308 	sub.w	r3, r0, r8
 802165e:	fa09 f303 	lsl.w	r3, r9, r3
 8021662:	4313      	orrs	r3, r2
 8021664:	9304      	str	r3, [sp, #16]
 8021666:	46a2      	mov	sl, r4
 8021668:	e7d2      	b.n	8021610 <_svfiprintf_r+0x9c>
 802166a:	9b03      	ldr	r3, [sp, #12]
 802166c:	1d19      	adds	r1, r3, #4
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	9103      	str	r1, [sp, #12]
 8021672:	2b00      	cmp	r3, #0
 8021674:	bfbb      	ittet	lt
 8021676:	425b      	neglt	r3, r3
 8021678:	f042 0202 	orrlt.w	r2, r2, #2
 802167c:	9307      	strge	r3, [sp, #28]
 802167e:	9307      	strlt	r3, [sp, #28]
 8021680:	bfb8      	it	lt
 8021682:	9204      	strlt	r2, [sp, #16]
 8021684:	7823      	ldrb	r3, [r4, #0]
 8021686:	2b2e      	cmp	r3, #46	; 0x2e
 8021688:	d10c      	bne.n	80216a4 <_svfiprintf_r+0x130>
 802168a:	7863      	ldrb	r3, [r4, #1]
 802168c:	2b2a      	cmp	r3, #42	; 0x2a
 802168e:	d135      	bne.n	80216fc <_svfiprintf_r+0x188>
 8021690:	9b03      	ldr	r3, [sp, #12]
 8021692:	1d1a      	adds	r2, r3, #4
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	9203      	str	r2, [sp, #12]
 8021698:	2b00      	cmp	r3, #0
 802169a:	bfb8      	it	lt
 802169c:	f04f 33ff 	movlt.w	r3, #4294967295
 80216a0:	3402      	adds	r4, #2
 80216a2:	9305      	str	r3, [sp, #20]
 80216a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021770 <_svfiprintf_r+0x1fc>
 80216a8:	7821      	ldrb	r1, [r4, #0]
 80216aa:	2203      	movs	r2, #3
 80216ac:	4650      	mov	r0, sl
 80216ae:	f7de fe1f 	bl	80002f0 <memchr>
 80216b2:	b140      	cbz	r0, 80216c6 <_svfiprintf_r+0x152>
 80216b4:	2340      	movs	r3, #64	; 0x40
 80216b6:	eba0 000a 	sub.w	r0, r0, sl
 80216ba:	fa03 f000 	lsl.w	r0, r3, r0
 80216be:	9b04      	ldr	r3, [sp, #16]
 80216c0:	4303      	orrs	r3, r0
 80216c2:	3401      	adds	r4, #1
 80216c4:	9304      	str	r3, [sp, #16]
 80216c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216ca:	4826      	ldr	r0, [pc, #152]	; (8021764 <_svfiprintf_r+0x1f0>)
 80216cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80216d0:	2206      	movs	r2, #6
 80216d2:	f7de fe0d 	bl	80002f0 <memchr>
 80216d6:	2800      	cmp	r0, #0
 80216d8:	d038      	beq.n	802174c <_svfiprintf_r+0x1d8>
 80216da:	4b23      	ldr	r3, [pc, #140]	; (8021768 <_svfiprintf_r+0x1f4>)
 80216dc:	bb1b      	cbnz	r3, 8021726 <_svfiprintf_r+0x1b2>
 80216de:	9b03      	ldr	r3, [sp, #12]
 80216e0:	3307      	adds	r3, #7
 80216e2:	f023 0307 	bic.w	r3, r3, #7
 80216e6:	3308      	adds	r3, #8
 80216e8:	9303      	str	r3, [sp, #12]
 80216ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216ec:	4433      	add	r3, r6
 80216ee:	9309      	str	r3, [sp, #36]	; 0x24
 80216f0:	e767      	b.n	80215c2 <_svfiprintf_r+0x4e>
 80216f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80216f6:	460c      	mov	r4, r1
 80216f8:	2001      	movs	r0, #1
 80216fa:	e7a5      	b.n	8021648 <_svfiprintf_r+0xd4>
 80216fc:	2300      	movs	r3, #0
 80216fe:	3401      	adds	r4, #1
 8021700:	9305      	str	r3, [sp, #20]
 8021702:	4619      	mov	r1, r3
 8021704:	f04f 0c0a 	mov.w	ip, #10
 8021708:	4620      	mov	r0, r4
 802170a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802170e:	3a30      	subs	r2, #48	; 0x30
 8021710:	2a09      	cmp	r2, #9
 8021712:	d903      	bls.n	802171c <_svfiprintf_r+0x1a8>
 8021714:	2b00      	cmp	r3, #0
 8021716:	d0c5      	beq.n	80216a4 <_svfiprintf_r+0x130>
 8021718:	9105      	str	r1, [sp, #20]
 802171a:	e7c3      	b.n	80216a4 <_svfiprintf_r+0x130>
 802171c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021720:	4604      	mov	r4, r0
 8021722:	2301      	movs	r3, #1
 8021724:	e7f0      	b.n	8021708 <_svfiprintf_r+0x194>
 8021726:	ab03      	add	r3, sp, #12
 8021728:	9300      	str	r3, [sp, #0]
 802172a:	462a      	mov	r2, r5
 802172c:	4b0f      	ldr	r3, [pc, #60]	; (802176c <_svfiprintf_r+0x1f8>)
 802172e:	a904      	add	r1, sp, #16
 8021730:	4638      	mov	r0, r7
 8021732:	f7fd fcf9 	bl	801f128 <_printf_float>
 8021736:	1c42      	adds	r2, r0, #1
 8021738:	4606      	mov	r6, r0
 802173a:	d1d6      	bne.n	80216ea <_svfiprintf_r+0x176>
 802173c:	89ab      	ldrh	r3, [r5, #12]
 802173e:	065b      	lsls	r3, r3, #25
 8021740:	f53f af2c 	bmi.w	802159c <_svfiprintf_r+0x28>
 8021744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021746:	b01d      	add	sp, #116	; 0x74
 8021748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802174c:	ab03      	add	r3, sp, #12
 802174e:	9300      	str	r3, [sp, #0]
 8021750:	462a      	mov	r2, r5
 8021752:	4b06      	ldr	r3, [pc, #24]	; (802176c <_svfiprintf_r+0x1f8>)
 8021754:	a904      	add	r1, sp, #16
 8021756:	4638      	mov	r0, r7
 8021758:	f7fd ff72 	bl	801f640 <_printf_i>
 802175c:	e7eb      	b.n	8021736 <_svfiprintf_r+0x1c2>
 802175e:	bf00      	nop
 8021760:	08023f14 	.word	0x08023f14
 8021764:	08023f1e 	.word	0x08023f1e
 8021768:	0801f129 	.word	0x0801f129
 802176c:	080214bf 	.word	0x080214bf
 8021770:	08023f1a 	.word	0x08023f1a

08021774 <_read_r>:
 8021774:	b538      	push	{r3, r4, r5, lr}
 8021776:	4d07      	ldr	r5, [pc, #28]	; (8021794 <_read_r+0x20>)
 8021778:	4604      	mov	r4, r0
 802177a:	4608      	mov	r0, r1
 802177c:	4611      	mov	r1, r2
 802177e:	2200      	movs	r2, #0
 8021780:	602a      	str	r2, [r5, #0]
 8021782:	461a      	mov	r2, r3
 8021784:	f7e2 fb78 	bl	8003e78 <_read>
 8021788:	1c43      	adds	r3, r0, #1
 802178a:	d102      	bne.n	8021792 <_read_r+0x1e>
 802178c:	682b      	ldr	r3, [r5, #0]
 802178e:	b103      	cbz	r3, 8021792 <_read_r+0x1e>
 8021790:	6023      	str	r3, [r4, #0]
 8021792:	bd38      	pop	{r3, r4, r5, pc}
 8021794:	2000707c 	.word	0x2000707c

08021798 <_fstat_r>:
 8021798:	b538      	push	{r3, r4, r5, lr}
 802179a:	4d07      	ldr	r5, [pc, #28]	; (80217b8 <_fstat_r+0x20>)
 802179c:	2300      	movs	r3, #0
 802179e:	4604      	mov	r4, r0
 80217a0:	4608      	mov	r0, r1
 80217a2:	4611      	mov	r1, r2
 80217a4:	602b      	str	r3, [r5, #0]
 80217a6:	f7e2 fbac 	bl	8003f02 <_fstat>
 80217aa:	1c43      	adds	r3, r0, #1
 80217ac:	d102      	bne.n	80217b4 <_fstat_r+0x1c>
 80217ae:	682b      	ldr	r3, [r5, #0]
 80217b0:	b103      	cbz	r3, 80217b4 <_fstat_r+0x1c>
 80217b2:	6023      	str	r3, [r4, #0]
 80217b4:	bd38      	pop	{r3, r4, r5, pc}
 80217b6:	bf00      	nop
 80217b8:	2000707c 	.word	0x2000707c

080217bc <_isatty_r>:
 80217bc:	b538      	push	{r3, r4, r5, lr}
 80217be:	4d06      	ldr	r5, [pc, #24]	; (80217d8 <_isatty_r+0x1c>)
 80217c0:	2300      	movs	r3, #0
 80217c2:	4604      	mov	r4, r0
 80217c4:	4608      	mov	r0, r1
 80217c6:	602b      	str	r3, [r5, #0]
 80217c8:	f7e2 fbab 	bl	8003f22 <_isatty>
 80217cc:	1c43      	adds	r3, r0, #1
 80217ce:	d102      	bne.n	80217d6 <_isatty_r+0x1a>
 80217d0:	682b      	ldr	r3, [r5, #0]
 80217d2:	b103      	cbz	r3, 80217d6 <_isatty_r+0x1a>
 80217d4:	6023      	str	r3, [r4, #0]
 80217d6:	bd38      	pop	{r3, r4, r5, pc}
 80217d8:	2000707c 	.word	0x2000707c

080217dc <__ascii_mbtowc>:
 80217dc:	b082      	sub	sp, #8
 80217de:	b901      	cbnz	r1, 80217e2 <__ascii_mbtowc+0x6>
 80217e0:	a901      	add	r1, sp, #4
 80217e2:	b142      	cbz	r2, 80217f6 <__ascii_mbtowc+0x1a>
 80217e4:	b14b      	cbz	r3, 80217fa <__ascii_mbtowc+0x1e>
 80217e6:	7813      	ldrb	r3, [r2, #0]
 80217e8:	600b      	str	r3, [r1, #0]
 80217ea:	7812      	ldrb	r2, [r2, #0]
 80217ec:	1e10      	subs	r0, r2, #0
 80217ee:	bf18      	it	ne
 80217f0:	2001      	movne	r0, #1
 80217f2:	b002      	add	sp, #8
 80217f4:	4770      	bx	lr
 80217f6:	4610      	mov	r0, r2
 80217f8:	e7fb      	b.n	80217f2 <__ascii_mbtowc+0x16>
 80217fa:	f06f 0001 	mvn.w	r0, #1
 80217fe:	e7f8      	b.n	80217f2 <__ascii_mbtowc+0x16>

08021800 <_malloc_usable_size_r>:
 8021800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021804:	1f18      	subs	r0, r3, #4
 8021806:	2b00      	cmp	r3, #0
 8021808:	bfbc      	itt	lt
 802180a:	580b      	ldrlt	r3, [r1, r0]
 802180c:	18c0      	addlt	r0, r0, r3
 802180e:	4770      	bx	lr

08021810 <__ascii_wctomb>:
 8021810:	b149      	cbz	r1, 8021826 <__ascii_wctomb+0x16>
 8021812:	2aff      	cmp	r2, #255	; 0xff
 8021814:	bf85      	ittet	hi
 8021816:	238a      	movhi	r3, #138	; 0x8a
 8021818:	6003      	strhi	r3, [r0, #0]
 802181a:	700a      	strbls	r2, [r1, #0]
 802181c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021820:	bf98      	it	ls
 8021822:	2001      	movls	r0, #1
 8021824:	4770      	bx	lr
 8021826:	4608      	mov	r0, r1
 8021828:	4770      	bx	lr
	...

0802182c <_init>:
 802182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802182e:	bf00      	nop
 8021830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021832:	bc08      	pop	{r3}
 8021834:	469e      	mov	lr, r3
 8021836:	4770      	bx	lr

08021838 <_fini>:
 8021838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802183a:	bf00      	nop
 802183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802183e:	bc08      	pop	{r3}
 8021840:	469e      	mov	lr, r3
 8021842:	4770      	bx	lr
