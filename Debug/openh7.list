
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023c74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b10  08023f18  08023f18  00033f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00016e2a  08026a28  08026a28  00036a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000034c  0803d854  0803d854  0004d854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0803dba0  0803dba0  0004dba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000028  0803dba8  0803dba8  0004dba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000001c  0803dbd0  0803dbd0  0004dbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0803dbec  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007200  20000314  0803df00  00050314  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007514  0803df00  00057514  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050314  2**0
                  CONTENTS, READONLY
 12 .debug_info   000e8819  00000000  00000000  00050342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001697f  00000000  00000000  00138b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005610  00000000  00000000  0014f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004f50  00000000  00000000  00154af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00052615  00000000  00000000  00159a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0006d2e8  00000000  00000000  001ac055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001d651d  00000000  00000000  0021933d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  003ef85a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00017970  00000000  00000000  003ef92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000314 	.word	0x20000314
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023efc 	.word	0x08023efc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000318 	.word	0x20000318
 80002dc:	08023efc 	.word	0x08023efc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ba:	4a31      	ldr	r2, [pc, #196]	; (8000780 <MX_ADC1_Init+0xec>)
 80006bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_ADC1_Init+0xe8>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <MX_ADC1_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ADC1_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_ADC1_Init+0xe8>)
 8000718:	f004 faca 	bl	8004cb0 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000722:	f002 fe7b 	bl	800341c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_ADC1_Init+0xe8>)
 8000732:	f006 fb6f 	bl	8006e14 <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800073c:	f002 fe6e 	bl	800341c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_ADC1_Init+0xf0>)
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000748:	2306      	movs	r3, #6
 800074a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_ADC1_Init+0xe8>)
 8000764:	f005 f9dc 	bl	8005b20 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800076e:	f002 fe55 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000330 	.word	0x20000330
 8000780:	40022000 	.word	0x40022000
 8000784:	0c900008 	.word	0x0c900008

08000788 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_ADC3_Init+0x108>)
 80007b4:	4a37      	ldr	r2, [pc, #220]	; (8000894 <MX_ADC3_Init+0x10c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_ADC3_Init+0x108>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC3_Init+0x108>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC3_Init+0x108>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_ADC3_Init+0x108>)
 80007da:	2201      	movs	r2, #1
 80007dc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC3_Init+0x108>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC3_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC3_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC3_Init+0x108>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC3_Init+0x108>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_ADC3_Init+0x108>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC3_Init+0x108>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC3_Init+0x108>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000810:	481f      	ldr	r0, [pc, #124]	; (8000890 <MX_ADC3_Init+0x108>)
 8000812:	f004 fa4d 	bl	8004cb0 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 800081c:	f002 fdfe 	bl	800341c <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_ADC3_Init+0x110>)
 8000822:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000824:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_ADC3_Init+0x114>)
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 800082e:	2301      	movs	r3, #1
 8000830:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 15896;
 8000834:	f643 6318 	movw	r3, #15896	; 0x3e18
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 10881;
 800083a:	f642 2381 	movw	r3, #10881	; 0x2a81
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_ADC3_Init+0x108>)
 8000848:	f005 fcba 	bl	80061c0 <HAL_ADC_AnalogWDGConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000852:	f002 fde3 	bl	800341c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_ADC3_Init+0x114>)
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2306      	movs	r3, #6
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800085e:	2307      	movs	r3, #7
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000862:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC3_Init+0x108>)
 800087a:	f005 f951 	bl	8005b20 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000884:	f002 fdca 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3738      	adds	r7, #56	; 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000394 	.word	0x20000394
 8000894:	58026000 	.word	0x58026000
 8000898:	7dc00000 	.word	0x7dc00000
 800089c:	cb840000 	.word	0xcb840000

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a26      	ldr	r2, [pc, #152]	; (8000958 <HAL_ADC_MspInit+0xb8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12a      	bne.n	8000918 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c8:	4a24      	ldr	r2, [pc, #144]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_ADC_MspInit+0xbc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <HAL_ADC_MspInit+0xc0>)
 8000912:	f006 fe39 	bl	8007588 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000916:	e01b      	b.n	8000950 <HAL_ADC_MspInit+0xb0>
  else if(adcHandle->Instance==ADC3)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a11      	ldr	r2, [pc, #68]	; (8000964 <HAL_ADC_MspInit+0xc4>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d116      	bne.n	8000950 <HAL_ADC_MspInit+0xb0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_ADC_MspInit+0xbc>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <HAL_ADC_MspInit+0xbc>)
 800092a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_ADC_MspInit+0xbc>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2105      	movs	r1, #5
 8000944:	207f      	movs	r0, #127	; 0x7f
 8000946:	f006 fbfb 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800094a:	207f      	movs	r0, #127	; 0x7f
 800094c:	f006 fc12 	bl	8007174 <HAL_NVIC_EnableIRQ>
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40022000 	.word	0x40022000
 800095c:	58024400 	.word	0x58024400
 8000960:	58020000 	.word	0x58020000
 8000964:	58026000 	.word	0x58026000

08000968 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_CRC_Init+0x3c>)
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <MX_CRC_Init+0x40>)
 8000970:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_CRC_Init+0x3c>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_CRC_Init+0x3c>)
 800098c:	2201      	movs	r2, #1
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_CRC_Init+0x3c>)
 8000992:	f006 fbfd 	bl	8007190 <HAL_CRC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800099c:	f002 fd3e 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200003f8 	.word	0x200003f8
 80009a8:	58024c00 	.word	0x58024c00

080009ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_CRC_MspInit+0x3c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10e      	bne.n	80009dc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <HAL_CRC_MspInit+0x40>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	58024c00 	.word	0x58024c00
 80009ec:	58024400 	.word	0x58024400

080009f0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <MX_DMA2D_Init+0x70>)
 80009f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a38:	f006 fc94 	bl	8007364 <HAL_DMA2D_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a42:	f002 fceb 	bl	800341c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a46:	2101      	movs	r1, #1
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_DMA2D_Init+0x6c>)
 8000a4a:	f006 fcef 	bl	800742c <HAL_DMA2D_ConfigLayer>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000a54:	f002 fce2 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000041c 	.word	0x2000041c
 8000a60:	52001000 	.word	0x52001000

08000a64 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_DMA2D_MspInit+0x3c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10e      	bne.n	8000a94 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_DMA2D_MspInit+0x40>)
 8000a88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	52001000 	.word	0x52001000
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of InfusionQ */
  InfusionQHandle = osMessageQueueNew (16, sizeof(Infusion_paramT), &InfusionQ_attributes);
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <MX_FREERTOS_Init+0xe8>)
 8000aae:	211c      	movs	r1, #28
 8000ab0:	2010      	movs	r0, #16
 8000ab2:	f013 fdf7 	bl	80146a4 <osMessageQueueNew>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a36      	ldr	r2, [pc, #216]	; (8000b94 <MX_FREERTOS_Init+0xec>)
 8000aba:	6013      	str	r3, [r2, #0]

  /* creation of VolumeQ */
  VolumeQHandle = osMessageQueueNew (8, sizeof(float), &VolumeQ_attributes);
 8000abc:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <MX_FREERTOS_Init+0xf0>)
 8000abe:	2104      	movs	r1, #4
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f013 fdef 	bl	80146a4 <osMessageQueueNew>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <MX_FREERTOS_Init+0xf4>)
 8000aca:	6013      	str	r3, [r2, #0]

  /* creation of FlowRateQ */
  FlowRateQHandle = osMessageQueueNew (8, sizeof(float), &FlowRateQ_attributes);
 8000acc:	4a34      	ldr	r2, [pc, #208]	; (8000ba0 <MX_FREERTOS_Init+0xf8>)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	2008      	movs	r0, #8
 8000ad2:	f013 fde7 	bl	80146a4 <osMessageQueueNew>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <MX_FREERTOS_Init+0xfc>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* creation of TimeQ */
  TimeQHandle = osMessageQueueNew (8, sizeof(float), &TimeQ_attributes);
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_FREERTOS_Init+0x100>)
 8000ade:	2104      	movs	r1, #4
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f013 fddf 	bl	80146a4 <osMessageQueueNew>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a30      	ldr	r2, [pc, #192]	; (8000bac <MX_FREERTOS_Init+0x104>)
 8000aea:	6013      	str	r3, [r2, #0]

  /* creation of LastStepQ */
  LastStepQHandle = osMessageQueueNew (2, sizeof(uint16_t), &LastStepQ_attributes);
 8000aec:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <MX_FREERTOS_Init+0x108>)
 8000aee:	2102      	movs	r1, #2
 8000af0:	2002      	movs	r0, #2
 8000af2:	f013 fdd7 	bl	80146a4 <osMessageQueueNew>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <MX_FREERTOS_Init+0x10c>)
 8000afa:	6013      	str	r3, [r2, #0]

  /* creation of RadiusQ */
  RadiusQHandle = osMessageQueueNew (2, sizeof(uint8_t), &RadiusQ_attributes);
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <MX_FREERTOS_Init+0x110>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	2002      	movs	r0, #2
 8000b02:	f013 fdcf 	bl	80146a4 <osMessageQueueNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <MX_FREERTOS_Init+0x114>)
 8000b0a:	6013      	str	r3, [r2, #0]

  /* creation of VolumeLeftQ */
  VolumeLeftQHandle = osMessageQueueNew (8, sizeof(float), &VolumeLeftQ_attributes);
 8000b0c:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <MX_FREERTOS_Init+0x118>)
 8000b0e:	2104      	movs	r1, #4
 8000b10:	2008      	movs	r0, #8
 8000b12:	f013 fdc7 	bl	80146a4 <osMessageQueueNew>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <MX_FREERTOS_Init+0x11c>)
 8000b1a:	6013      	str	r3, [r2, #0]

  /* creation of ModeQ */
  ModeQHandle = osMessageQueueNew (8, sizeof(uint8_t), &ModeQ_attributes);
 8000b1c:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <MX_FREERTOS_Init+0x120>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2008      	movs	r0, #8
 8000b22:	f013 fdbf 	bl	80146a4 <osMessageQueueNew>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <MX_FREERTOS_Init+0x124>)
 8000b2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of battery_manage */
  battery_manageHandle = osThreadNew(StartBatteryManage, NULL, &battery_manage_attributes);
 8000b2c:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <MX_FREERTOS_Init+0x128>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4828      	ldr	r0, [pc, #160]	; (8000bd4 <MX_FREERTOS_Init+0x12c>)
 8000b32:	f013 fbc6 	bl	80142c2 <osThreadNew>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <MX_FREERTOS_Init+0x130>)
 8000b3a:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <MX_FREERTOS_Init+0x134>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <MX_FREERTOS_Init+0x138>)
 8000b42:	f013 fbbe 	bl	80142c2 <osThreadNew>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <MX_FREERTOS_Init+0x13c>)
 8000b4a:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <MX_FREERTOS_Init+0x140>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <MX_FREERTOS_Init+0x144>)
 8000b52:	f013 fbb6 	bl	80142c2 <osThreadNew>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <MX_FREERTOS_Init+0x148>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 8000b5c:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <MX_FREERTOS_Init+0x14c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_FREERTOS_Init+0x150>)
 8000b62:	f013 fbae 	bl	80142c2 <osThreadNew>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a24      	ldr	r2, [pc, #144]	; (8000bfc <MX_FREERTOS_Init+0x154>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 8000b6c:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <MX_FREERTOS_Init+0x158>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <MX_FREERTOS_Init+0x15c>)
 8000b72:	f013 fba6 	bl	80142c2 <osThreadNew>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_FREERTOS_Init+0x160>)
 8000b7a:	6013      	str	r3, [r2, #0]

  /* creation of DataStorage */
  DataStorageHandle = osThreadNew(StartDataStorage, NULL, &DataStorage_attributes);
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <MX_FREERTOS_Init+0x164>)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4823      	ldr	r0, [pc, #140]	; (8000c10 <MX_FREERTOS_Init+0x168>)
 8000b82:	f013 fb9e 	bl	80142c2 <osThreadNew>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <MX_FREERTOS_Init+0x16c>)
 8000b8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08024758 	.word	0x08024758
 8000b94:	2000049c 	.word	0x2000049c
 8000b98:	08024770 	.word	0x08024770
 8000b9c:	200004a0 	.word	0x200004a0
 8000ba0:	08024788 	.word	0x08024788
 8000ba4:	200004a4 	.word	0x200004a4
 8000ba8:	080247a0 	.word	0x080247a0
 8000bac:	200004a8 	.word	0x200004a8
 8000bb0:	080247b8 	.word	0x080247b8
 8000bb4:	200004ac 	.word	0x200004ac
 8000bb8:	080247d0 	.word	0x080247d0
 8000bbc:	200004b0 	.word	0x200004b0
 8000bc0:	080247e8 	.word	0x080247e8
 8000bc4:	200004b4 	.word	0x200004b4
 8000bc8:	08024800 	.word	0x08024800
 8000bcc:	200004b8 	.word	0x200004b8
 8000bd0:	08024680 	.word	0x08024680
 8000bd4:	08000c19 	.word	0x08000c19
 8000bd8:	20000484 	.word	0x20000484
 8000bdc:	080246a4 	.word	0x080246a4
 8000be0:	08000c29 	.word	0x08000c29
 8000be4:	20000488 	.word	0x20000488
 8000be8:	080246c8 	.word	0x080246c8
 8000bec:	08000d11 	.word	0x08000d11
 8000bf0:	2000048c 	.word	0x2000048c
 8000bf4:	080246ec 	.word	0x080246ec
 8000bf8:	08000ee9 	.word	0x08000ee9
 8000bfc:	20000490 	.word	0x20000490
 8000c00:	08024710 	.word	0x08024710
 8000c04:	0800101d 	.word	0x0800101d
 8000c08:	20000494 	.word	0x20000494
 8000c0c:	08024734 	.word	0x08024734
 8000c10:	08001099 	.word	0x08001099
 8000c14:	20000498 	.word	0x20000498

08000c18 <StartBatteryManage>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBatteryManage */
void StartBatteryManage(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryManage */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f013 fbe0 	bl	80143e6 <osDelay>
 8000c26:	e7fb      	b.n	8000c20 <StartBatteryManage+0x8>

08000c28 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */

	// drv8825 structure initialization
	//drv8825_init(&drv, Dir_G_GPIO_Port, Dir_G_Pin,En_G_GPIO_Port, En_G_Pin, &htim2, TIM_CHANNEL_1);
	float Flowrate , radius=1;
 8000c30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000c34:	61fb      	str	r3, [r7, #28]
	float volume_to_inject ;
	int timeneeded=0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
	uint8_t mode=0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
	uint16_t laststep;

  /* Infinite loop */
  for(;;)
  {
	if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 10U, 100)==osOK && osMessageQueueGet(VolumeQHandle,&volume_to_inject , 10U, 100)==osOK ){
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <Stepper_motor+0xd4>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	f107 0114 	add.w	r1, r7, #20
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	220a      	movs	r2, #10
 8000c4a:	f013 fdff 	bl	801484c <osMessageQueueGet>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d13b      	bne.n	8000ccc <Stepper_motor+0xa4>
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <Stepper_motor+0xd8>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	f107 0110 	add.w	r1, r7, #16
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	220a      	movs	r2, #10
 8000c60:	f013 fdf4 	bl	801484c <osMessageQueueGet>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d130      	bne.n	8000ccc <Stepper_motor+0xa4>
		SyringeMove(Flowrate,radius);
 8000c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c76:	edc7 7a00 	vstr	s15, [r7]
 8000c7a:	783b      	ldrb	r3, [r7, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eeb0 0a47 	vmov.f32	s0, s14
 8000c84:	f002 fade 	bl	8003244 <SyringeMove>
		//timeneeded= Time_Needed(Flowrate, volume_to_inject);
		timeneeded = volume_to_inject/(Flowrate/3600);
 8000c88:	edd7 6a04 	vldr	s13, [r7, #16]
 8000c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c90:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8000d04 <Stepper_motor+0xdc>
 8000c94:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca0:	ee17 3a90 	vmov	r3, s15
 8000ca4:	61bb      	str	r3, [r7, #24]
		laststep = timeneeded*L6474_GetCurrentSpeed(0);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 ff02 	bl	8001ab0 <L6474_GetCurrentSpeed>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	fb12 f303 	smulbb	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	81bb      	strh	r3, [r7, #12]
		osMessageQueuePut(LastStepQHandle, &laststep, 1, 100);
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <Stepper_motor+0xe0>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f107 010c 	add.w	r1, r7, #12
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f013 fd60 	bl	801478c <osMessageQueuePut>
	}
	// ***** 0 => StopMode , 8=> PauseMode *******
	if(osMessageQueueGet(ModeQHandle, &mode, 10U, 10U)==osOK && (mode==0 || mode == 8)){
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <Stepper_motor+0xe4>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	f107 010f 	add.w	r1, r7, #15
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	220a      	movs	r2, #10
 8000cd8:	f013 fdb8 	bl	801484c <osMessageQueueGet>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <Stepper_motor+0xca>
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <Stepper_motor+0xc6>
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d101      	bne.n	8000cf2 <Stepper_motor+0xca>
		SyringeStop();
 8000cee:	f002 fae9 	bl	80032c4 <SyringeStop>
	}
osDelay(100);
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	f013 fb77 	bl	80143e6 <osDelay>
	if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 10U, 100)==osOK && osMessageQueueGet(VolumeQHandle,&volume_to_inject , 10U, 100)==osOK ){
 8000cf8:	e7a1      	b.n	8000c3e <Stepper_motor+0x16>
 8000cfa:	bf00      	nop
 8000cfc:	200004a4 	.word	0x200004a4
 8000d00:	200004a0 	.word	0x200004a0
 8000d04:	45610000 	.word	0x45610000
 8000d08:	200004ac 	.word	0x200004ac
 8000d0c:	200004b8 	.word	0x200004b8

08000d10 <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ae      	sub	sp, #184	; 0xb8
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET); // UART clock
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1e:	4866      	ldr	r0, [pc, #408]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000d20:	f006 fdfa 	bl	8007918 <HAL_GPIO_WritePin>
	float Flowrate=0 , Timeleft=0, Volumeleft=0;
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char flowbuff[10], timebuff[10] , volumebuff[10];

	/********** UNIQUE ID ***********/
	uint32_t (*unique_id_1) = (uint32_t*)(0x1FF1E800); // BASE address (reference manual stm32h743)
 8000d3c:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <Cloud_Connectivity+0x1ac>)
 8000d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t (*unique_id_2) = (uint32_t*)(0x1FF1E804); // BASE address + 0x04 offset
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <Cloud_Connectivity+0x1b0>)
 8000d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint32_t (*unique_id_3) = (uint32_t*)(0x1FF1E808); // BASE address + 0x08 offset
 8000d48:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <Cloud_Connectivity+0x1b4>)
 8000d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char Id[85];
	int n =sprintf(Id,"%lu%lu%lu",*unique_id_1,*unique_id_2,*unique_id_3);
 8000d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f107 000c 	add.w	r0, r7, #12
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	460b      	mov	r3, r1
 8000d68:	4957      	ldr	r1, [pc, #348]	; (8000ec8 <Cloud_Connectivity+0x1b8>)
 8000d6a:	f021 fa41 	bl	80221f0 <siprintf>
 8000d6e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d78:	484f      	ldr	r0, [pc, #316]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000d7a:	f006 fdcd 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3,Id ,n , 100);
 8000d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	f107 010c 	add.w	r1, r7, #12
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	4850      	ldr	r0, [pc, #320]	; (8000ecc <Cloud_Connectivity+0x1bc>)
 8000d8c:	f00e fa0e 	bl	800f1ac <HAL_UART_Transmit>
	osDelay(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f013 fb28 	bl	80143e6 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9c:	4846      	ldr	r0, [pc, #280]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000d9e:	f006 fdbb 	bl	8007918 <HAL_GPIO_WritePin>
  /* Infinite loop */
	// ***** f==> flowrate t==> timeleft v==>volumeleft *****
  for(;;)
  {
    if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 1U, 100U)==osOK){
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <Cloud_Connectivity+0x1c0>)
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000daa:	2364      	movs	r3, #100	; 0x64
 8000dac:	2201      	movs	r2, #1
 8000dae:	f013 fd4d 	bl	801484c <osMessageQueueGet>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d121      	bne.n	8000dfc <Cloud_Connectivity+0xec>
    	int nflow =sprintf((uint8_t *)flowbuff,"f%.3f",Flowrate);
 8000db8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc0:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000dc4:	ec53 2b17 	vmov	r2, r3, d7
 8000dc8:	4942      	ldr	r1, [pc, #264]	; (8000ed4 <Cloud_Connectivity+0x1c4>)
 8000dca:	f021 fa11 	bl	80221f0 <siprintf>
 8000dce:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	4837      	ldr	r0, [pc, #220]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000dda:	f006 fd9d 	bl	8007918 <HAL_GPIO_WritePin>
    	HAL_UART_Transmit(&huart3, (uint8_t *)flowbuff, nflow, 10);
 8000dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000de8:	230a      	movs	r3, #10
 8000dea:	4838      	ldr	r0, [pc, #224]	; (8000ecc <Cloud_Connectivity+0x1bc>)
 8000dec:	f00e f9de 	bl	800f1ac <HAL_UART_Transmit>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df6:	4830      	ldr	r0, [pc, #192]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000df8:	f006 fd8e 	bl	8007918 <HAL_GPIO_WritePin>
    }
    if(osMessageQueueGet(TimeQHandle,&Timeleft , 1U, 100U)==osOK){
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <Cloud_Connectivity+0x1c8>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000e04:	2364      	movs	r3, #100	; 0x64
 8000e06:	2201      	movs	r2, #1
 8000e08:	f013 fd20 	bl	801484c <osMessageQueueGet>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d121      	bne.n	8000e56 <Cloud_Connectivity+0x146>
        	int ntime =sprintf((uint8_t *)timebuff,"t%f",Timeleft);
 8000e12:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000e16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e1a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000e1e:	ec53 2b17 	vmov	r2, r3, d7
 8000e22:	492e      	ldr	r1, [pc, #184]	; (8000edc <Cloud_Connectivity+0x1cc>)
 8000e24:	f021 f9e4 	bl	80221f0 <siprintf>
 8000e28:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e32:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000e34:	f006 fd70 	bl	8007918 <HAL_GPIO_WritePin>
        	HAL_UART_Transmit(&huart3, (uint8_t *)timebuff, ntime, 10);
 8000e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000e42:	230a      	movs	r3, #10
 8000e44:	4821      	ldr	r0, [pc, #132]	; (8000ecc <Cloud_Connectivity+0x1bc>)
 8000e46:	f00e f9b1 	bl	800f1ac <HAL_UART_Transmit>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000e52:	f006 fd61 	bl	8007918 <HAL_GPIO_WritePin>
        }
    if(osMessageQueueGet(VolumeLeftQHandle,&Volumeleft , 1, 100U)==osOK){
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <Cloud_Connectivity+0x1d0>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	2201      	movs	r2, #1
 8000e62:	f013 fcf3 	bl	801484c <osMessageQueueGet>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d121      	bne.n	8000eb0 <Cloud_Connectivity+0x1a0>
            	int nvol =sprintf((uint8_t *)volumebuff,"v%.3f",Volumeleft);
 8000e6c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000e70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e74:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000e78:	ec53 2b17 	vmov	r2, r3, d7
 8000e7c:	4919      	ldr	r1, [pc, #100]	; (8000ee4 <Cloud_Connectivity+0x1d4>)
 8000e7e:	f021 f9b7 	bl	80221f0 <siprintf>
 8000e82:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000e8e:	f006 fd43 	bl	8007918 <HAL_GPIO_WritePin>
            	HAL_UART_Transmit(&huart3, (uint8_t *)volumebuff, nvol, 10);
 8000e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <Cloud_Connectivity+0x1bc>)
 8000ea0:	f00e f984 	bl	800f1ac <HAL_UART_Transmit>
            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <Cloud_Connectivity+0x1a8>)
 8000eac:	f006 fd34 	bl	8007918 <HAL_GPIO_WritePin>
            }
    osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f013 fa98 	bl	80143e6 <osDelay>
    if(osMessageQueueGet(FlowRateQHandle,&Flowrate , 1U, 100U)==osOK){
 8000eb6:	e774      	b.n	8000da2 <Cloud_Connectivity+0x92>
 8000eb8:	58020800 	.word	0x58020800
 8000ebc:	1ff1e800 	.word	0x1ff1e800
 8000ec0:	1ff1e804 	.word	0x1ff1e804
 8000ec4:	1ff1e808 	.word	0x1ff1e808
 8000ec8:	08023fa8 	.word	0x08023fa8
 8000ecc:	20000840 	.word	0x20000840
 8000ed0:	200004a4 	.word	0x200004a4
 8000ed4:	08023fb4 	.word	0x08023fb4
 8000ed8:	200004a8 	.word	0x200004a8
 8000edc:	08023fbc 	.word	0x08023fbc
 8000ee0:	200004b4 	.word	0x200004b4
 8000ee4:	08023fc0 	.word	0x08023fc0

08000ee8 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensors_measurements */
	float volumeleft=0 , timeleft=0 ;
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
	uint16_t  laststep=0, traveled_steps=0 ;
 8000efc:	2300      	movs	r3, #0
 8000efe:	827b      	strh	r3, [r7, #18]
 8000f00:	2300      	movs	r3, #0
 8000f02:	84fb      	strh	r3, [r7, #38]	; 0x26
	float Flowrate=0,volume_to_inject=0 ;
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
	HAL_ADC_Start_IT(&hadc3);
 8000f10:	483b      	ldr	r0, [pc, #236]	; (8001000 <Sensors_measurements+0x118>)
 8000f12:	f004 fa2d 	bl	8005370 <HAL_ADC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
osStatus_t a = osMessageQueueGet(FlowRateQHandle,&Flowrate , 15U, osWaitForever);
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <Sensors_measurements+0x11c>)
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	f107 010c 	add.w	r1, r7, #12
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	220f      	movs	r2, #15
 8000f24:	f013 fc92 	bl	801484c <osMessageQueueGet>
 8000f28:	6238      	str	r0, [r7, #32]
osStatus_t b =osMessageQueueGet(VolumeQHandle,&volume_to_inject , 10U, 100);
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <Sensors_measurements+0x120>)
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	f107 0108 	add.w	r1, r7, #8
 8000f32:	2364      	movs	r3, #100	; 0x64
 8000f34:	220a      	movs	r2, #10
 8000f36:	f013 fc89 	bl	801484c <osMessageQueueGet>
 8000f3a:	61f8      	str	r0, [r7, #28]
	osMessageQueueGet(LastStepQHandle, &laststep, 1U, 100);
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <Sensors_measurements+0x124>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f107 0112 	add.w	r1, r7, #18
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	f013 fc80 	bl	801484c <osMessageQueueGet>
	if(Flowrate!=0 && volume_to_inject!=0 && laststep!=0){
 8000f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	d04e      	beq.n	8000ff8 <Sensors_measurements+0x110>
 8000f5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	d047      	beq.n	8000ff8 <Sensors_measurements+0x110>
 8000f68:	8a7b      	ldrh	r3, [r7, #18]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d044      	beq.n	8000ff8 <Sensors_measurements+0x110>
		traveled_steps= position();
 8000f6e:	f002 f9d5 	bl	800331c <position>
 8000f72:	4603      	mov	r3, r0
 8000f74:	84fb      	strh	r3, [r7, #38]	; 0x26
		volumeleft=calculate_volume_left(traveled_steps,Flowrate,volume_to_inject); //mm^3
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f80:	eef0 0a47 	vmov.f32	s1, s14
 8000f84:	eeb0 0a67 	vmov.f32	s0, s15
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fa07 	bl	800339c <calculate_volume_left>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	edc7 7a06 	vstr	s15, [r7, #24]
		timeleft=volumeleft/Flowrate; // seconds
 8000f96:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa2:	edc7 7a05 	vstr	s15, [r7, #20]
		osMessageQueuePut(VolumeLeftQHandle,  &volumeleft, 1, 100);
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <Sensors_measurements+0x128>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f107 0118 	add.w	r1, r7, #24
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f013 fbeb 	bl	801478c <osMessageQueuePut>
		osMessageQueuePut(TimeQHandle,  &timeleft, 1, 100);
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <Sensors_measurements+0x12c>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	f107 0114 	add.w	r1, r7, #20
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f013 fbe3 	bl	801478c <osMessageQueuePut>
		if(traveled_steps>=laststep || volumeleft<=0 || timeleft <=0)
 8000fc6:	8a7b      	ldrh	r3, [r7, #18]
 8000fc8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d20d      	bcs.n	8000fea <Sensors_measurements+0x102>
 8000fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d906      	bls.n	8000fea <Sensors_measurements+0x102>
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d806      	bhi.n	8000ff8 <Sensors_measurements+0x110>
			osMessageQueuePut(ModeQHandle,0, 10U, 100U); // ***** 0 => StopMode , 8=> PauseMode ******
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <Sensors_measurements+0x130>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f013 fbca 	bl	801478c <osMessageQueuePut>
	 }

	  osDelay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f013 f9f4 	bl	80143e6 <osDelay>
  {
 8000ffe:	e78a      	b.n	8000f16 <Sensors_measurements+0x2e>
 8001000:	20000394 	.word	0x20000394
 8001004:	200004a4 	.word	0x200004a4
 8001008:	200004a0 	.word	0x200004a0
 800100c:	200004ac 	.word	0x200004ac
 8001010:	200004b4 	.word	0x200004b4
 8001014:	200004a8 	.word	0x200004a8
 8001018:	200004b8 	.word	0x200004b8

0800101c <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  // ***** 0 => StopMode , 8=> PauseMode *******

	  if(osMessageQueueGet(InfusionQHandle,&msgPerfusionParameters,10U,100)==osOK && msgPerfusionParameters.Mode!=0
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <Interface+0x6c>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	f107 010c 	add.w	r1, r7, #12
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	220a      	movs	r2, #10
 8001030:	f013 fc0c 	bl	801484c <osMessageQueueGet>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d117      	bne.n	800106a <Interface+0x4e>
 800103a:	7f3b      	ldrb	r3, [r7, #28]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d014      	beq.n	800106a <Interface+0x4e>
			  &&  msgPerfusionParameters.Mode!=8  ){
 8001040:	7f3b      	ldrb	r3, [r7, #28]
 8001042:	2b08      	cmp	r3, #8
 8001044:	d011      	beq.n	800106a <Interface+0x4e>
		  osMessageQueuePut(FlowRateQHandle,&msgPerfusionParameters.Flowrate , 1U, 100U);
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <Interface+0x70>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	f107 010c 	add.w	r1, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	2201      	movs	r2, #1
 8001052:	f013 fb9b 	bl	801478c <osMessageQueuePut>
		  osMessageQueuePut(VolumeQHandle,&msgPerfusionParameters.InfousionVolume , 1U, 100U);
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <Interface+0x74>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	1d19      	adds	r1, r3, #4
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	2201      	movs	r2, #1
 8001064:	f013 fb92 	bl	801478c <osMessageQueuePut>
 8001068:	e009      	b.n	800107e <Interface+0x62>
	  }else{
		  osMessageQueuePut(ModeQHandle,&msgPerfusionParameters.Mode , 10U, 100U);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <Interface+0x78>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	f103 0110 	add.w	r1, r3, #16
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	220a      	movs	r2, #10
 800107a:	f013 fb87 	bl	801478c <osMessageQueuePut>
	  }

	  osDelay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f013 f9b0 	bl	80143e6 <osDelay>
	  if(osMessageQueueGet(InfusionQHandle,&msgPerfusionParameters,10U,100)==osOK && msgPerfusionParameters.Mode!=0
 8001086:	e7cd      	b.n	8001024 <Interface+0x8>
 8001088:	2000049c 	.word	0x2000049c
 800108c:	200004a4 	.word	0x200004a4
 8001090:	200004a0 	.word	0x200004a0
 8001094:	200004b8 	.word	0x200004b8

08001098 <StartDataStorage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataStorage */
void StartDataStorage(void *argument)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800109e:	af02      	add	r7, sp, #8
 80010a0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80010a4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80010a8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDataStorage */
	Infusion_paramT msgPerfusionParameters;
	msgPerfusionParameters.Flowrate=3000; // 3000ml/h ==> 50ml/min
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <StartDataStorage+0xdc>)
 80010ac:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	msgPerfusionParameters.InfousionVolume=50;
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <StartDataStorage+0xe0>)
 80010b2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	uint8_t wtext[] = ""; /* File write buffer */
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3208 	strb.w	r3, [r7, #520]	; 0x208
	uint8_t rtext[_MAX_SS];/* File read buffer */
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueuePut(InfusionQHandle,&msgPerfusionParameters , 1U, 100U);
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <StartDataStorage+0xe4>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	f013 fb60 	bl	801478c <osMessageQueuePut>

	  sprintf((uint8_t *)wtext,"Flow Rate = %d",msgPerfusionParameters.Flowrate);
 80010cc:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 80010d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d4:	f507 7002 	add.w	r0, r7, #520	; 0x208
 80010d8:	ec53 2b17 	vmov	r2, r3, d7
 80010dc:	4928      	ldr	r1, [pc, #160]	; (8001180 <StartDataStorage+0xe8>)
 80010de:	f021 f887 	bl	80221f0 <siprintf>
	  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80010e2:	2200      	movs	r2, #0
 80010e4:	4927      	ldr	r1, [pc, #156]	; (8001184 <StartDataStorage+0xec>)
 80010e6:	4828      	ldr	r0, [pc, #160]	; (8001188 <StartDataStorage+0xf0>)
 80010e8:	f011 fed2 	bl	8012e90 <f_mount>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <StartDataStorage+0x60>
	    {
	        Error_Handler();
 80010f2:	f002 f993 	bl	800341c <Error_Handler>
 80010f6:	e033      	b.n	8001160 <StartDataStorage+0xc8>
	    }
	    else
	    {
	        if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	2107      	movs	r1, #7
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <StartDataStorage+0xec>)
 8001108:	f012 fb48 	bl	801379c <f_mkfs>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <StartDataStorage+0x80>
	        {
	            Error_Handler();
 8001112:	f002 f983 	bl	800341c <Error_Handler>
 8001116:	e023      	b.n	8001160 <StartDataStorage+0xc8>
	        }
	        else
	        {
	            //Open file for writing (Create)
	            if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8001118:	220a      	movs	r2, #10
 800111a:	491c      	ldr	r1, [pc, #112]	; (800118c <StartDataStorage+0xf4>)
 800111c:	481c      	ldr	r0, [pc, #112]	; (8001190 <StartDataStorage+0xf8>)
 800111e:	f011 ff1b 	bl	8012f58 <f_open>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <StartDataStorage+0x96>
	            {
	                Error_Handler();
 8001128:	f002 f978 	bl	800341c <Error_Handler>
 800112c:	e018      	b.n	8001160 <StartDataStorage+0xc8>
	            }
	            else
	            {
	                //Write to the text file
	                res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800112e:	2200      	movs	r2, #0
 8001130:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001134:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8001138:	4815      	ldr	r0, [pc, #84]	; (8001190 <StartDataStorage+0xf8>)
 800113a:	f012 f8d2 	bl	80132e2 <f_write>
 800113e:	4603      	mov	r3, r0
 8001140:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
	                if((byteswritten == 0) || (res != FR_OK))
 8001144:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <StartDataStorage+0xbc>
 800114c:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <StartDataStorage+0xc2>
	                {
	                    Error_Handler();
 8001154:	f002 f962 	bl	800341c <Error_Handler>
 8001158:	e002      	b.n	8001160 <StartDataStorage+0xc8>
	                }
	                else
	                {

	                    f_close(&SDFile);
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <StartDataStorage+0xf8>)
 800115c:	f012 faee 	bl	801373c <f_close>
	                }
	            }
	        }
	    }
	    f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	4808      	ldr	r0, [pc, #32]	; (8001188 <StartDataStorage+0xf0>)
 8001166:	f011 fe93 	bl	8012e90 <f_mount>
	    osDelay(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f013 f93a 	bl	80143e6 <osDelay>
	  osMessageQueuePut(InfusionQHandle,&msgPerfusionParameters , 1U, 100U);
 8001172:	e7a3      	b.n	80010bc <StartDataStorage+0x24>
 8001174:	453b8000 	.word	0x453b8000
 8001178:	42480000 	.word	0x42480000
 800117c:	2000049c 	.word	0x2000049c
 8001180:	08023fc8 	.word	0x08023fc8
 8001184:	20000a44 	.word	0x20000a44
 8001188:	20000a48 	.word	0x20000a48
 800118c:	08023fd8 	.word	0x08023fd8
 8001190:	20000c7c 	.word	0x20000c7c

08001194 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	; 0x38
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	4b7d      	ldr	r3, [pc, #500]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	4a7b      	ldr	r2, [pc, #492]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ba:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	623b      	str	r3, [r7, #32]
 80011c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011c8:	4b75      	ldr	r3, [pc, #468]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	4a74      	ldr	r2, [pc, #464]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d8:	4b71      	ldr	r3, [pc, #452]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	4a6c      	ldr	r2, [pc, #432]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f6:	4b6a      	ldr	r3, [pc, #424]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001204:	4b66      	ldr	r3, [pc, #408]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <MX_GPIO_Init+0x20c>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001214:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <MX_GPIO_Init+0x20c>)
 800122a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b5b      	ldr	r3, [pc, #364]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	4a56      	ldr	r2, [pc, #344]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	4a4e      	ldr	r2, [pc, #312]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127c:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <MX_GPIO_Init+0x20c>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <MX_GPIO_Init+0x20c>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <MX_GPIO_Init+0x20c>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a3f      	ldr	r2, [pc, #252]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80012a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MX_GPIO_Init+0x20c>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7184 	mov.w	r1, #264	; 0x108
 80012be:	4839      	ldr	r0, [pc, #228]	; (80013a4 <MX_GPIO_Init+0x210>)
 80012c0:	f006 fb2a 	bl	8007918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_Clock_GPIO_Port, UART_Clock_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ca:	4837      	ldr	r0, [pc, #220]	; (80013a8 <MX_GPIO_Init+0x214>)
 80012cc:	f006 fb24 	bl	8007918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LED2_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80012d6:	4835      	ldr	r0, [pc, #212]	; (80013ac <MX_GPIO_Init+0x218>)
 80012d8:	f006 fb1e 	bl	8007918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin;
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(STBY_RST_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	482b      	ldr	r0, [pc, #172]	; (80013a4 <MX_GPIO_Init+0x210>)
 80012f6:	f006 f947 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <MX_GPIO_Init+0x214>)
 8001310:	f006 f93a 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART_Clock_Pin;
 8001314:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UART_Clock_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	481e      	ldr	r0, [pc, #120]	; (80013a8 <MX_GPIO_Init+0x214>)
 800132e:	f006 f92b 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001332:	2310      	movs	r3, #16
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001336:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_GPIO_Init+0x21c>)
 8001348:	f006 f91e 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|LED2_Pin;
 800134c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_GPIO_Init+0x218>)
 8001366:	f006 f90f 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800136a:	2308      	movs	r3, #8
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001376:	2301      	movs	r3, #1
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <MX_GPIO_Init+0x210>)
 8001382:	f006 f901 	bl	8007588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2105      	movs	r1, #5
 800138a:	200a      	movs	r0, #10
 800138c:	f005 fed8 	bl	8007140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001390:	200a      	movs	r0, #10
 8001392:	f005 feef 	bl	8007174 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3738      	adds	r7, #56	; 0x38
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58022000 	.word	0x58022000
 80013a8:	58020800 	.word	0x58020800
 80013ac:	58020400 	.word	0x58020400
 80013b0:	58021c00 	.word	0x58021c00

080013b4 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013ba:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <MX_I2C1_SMBUS_Init+0x80>)
 80013bc:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <MX_I2C1_SMBUS_Init+0x84>)
 80013c2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 8001402:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 800140a:	f00b fd4f 	bl	800ceac <HAL_SMBUS_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001414:	f002 f802 	bl	800341c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_I2C1_SMBUS_Init+0x7c>)
 800141c:	f00b fdfe 	bl	800d01c <HAL_SMBUS_ConfigDigitalFilter>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8001426:	f001 fff9 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200004bc 	.word	0x200004bc
 8001434:	40005400 	.word	0x40005400
 8001438:	10c0ecff 	.word	0x10c0ecff

0800143c <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0b8      	sub	sp, #224	; 0xe0
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	22bc      	movs	r2, #188	; 0xbc
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f01f ff85 	bl	802136c <memset>
  if(smbusHandle->Instance==I2C1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a25      	ldr	r2, [pc, #148]	; (80014fc <HAL_SMBUS_MspInit+0xc0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d142      	bne.n	80014f2 <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800146c:	2308      	movs	r3, #8
 800146e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4618      	mov	r0, r3
 800147c:	f007 ff2c 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8001486:	f001 ffc9 	bl	800341c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_SMBUS_MspInit+0xc4>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_SMBUS_MspInit+0xc4>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_SMBUS_MspInit+0xc4>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b0:	2312      	movs	r3, #18
 80014b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c2:	2304      	movs	r3, #4
 80014c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014cc:	4619      	mov	r1, r3
 80014ce:	480d      	ldr	r0, [pc, #52]	; (8001504 <HAL_SMBUS_MspInit+0xc8>)
 80014d0:	f006 f85a 	bl	8007588 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_SMBUS_MspInit+0xc4>)
 80014d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_SMBUS_MspInit+0xc4>)
 80014dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_SMBUS_MspInit+0xc4>)
 80014e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f2:	bf00      	nop
 80014f4:	37e0      	adds	r7, #224	; 0xe0
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	58024400 	.word	0x58024400
 8001504:	58020400 	.word	0x58020400

08001508 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <L6474_AttachFlagInterrupt+0x1c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2000050c 	.word	0x2000050c

08001528 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	21a8      	movs	r1, #168	; 0xa8
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fe26 	bl	8002188 <L6474_SendCommand>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	21b8      	movs	r1, #184	; 0xb8
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fe18 	bl	8002188 <L6474_SendCommand>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001570:	4b70      	ldr	r3, [pc, #448]	; (8001734 <L6474_CmdGetParam+0x1d4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8001580:	2300      	movs	r3, #0
 8001582:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001584:	4b6c      	ldr	r3, [pc, #432]	; (8001738 <L6474_CmdGetParam+0x1d8>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800158a:	7cbb      	ldrb	r3, [r7, #18]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8001590:	2300      	movs	r3, #0
 8001592:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e02b      	b.n	80015f2 <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 800159a:	4a68      	ldr	r2, [pc, #416]	; (800173c <L6474_CmdGetParam+0x1dc>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4413      	add	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80015a4:	4a65      	ldr	r2, [pc, #404]	; (800173c <L6474_CmdGetParam+0x1dc>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4413      	add	r3, r2
 80015aa:	3303      	adds	r3, #3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80015b0:	4a62      	ldr	r2, [pc, #392]	; (800173c <L6474_CmdGetParam+0x1dc>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4413      	add	r3, r2
 80015b6:	3306      	adds	r3, #6
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80015bc:	4a5f      	ldr	r2, [pc, #380]	; (800173c <L6474_CmdGetParam+0x1dc>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4413      	add	r3, r2
 80015c2:	3309      	adds	r3, #9
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 80015c8:	4a5d      	ldr	r2, [pc, #372]	; (8001740 <L6474_CmdGetParam+0x1e0>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	4413      	add	r3, r2
 80015ce:	3303      	adds	r3, #3
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 80015d4:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <L6474_CmdGetParam+0x1e0>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4413      	add	r3, r2
 80015da:	3306      	adds	r3, #6
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <L6474_CmdGetParam+0x1e0>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	4413      	add	r3, r2
 80015e6:	3309      	adds	r3, #9
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <L6474_CmdGetParam+0x1d4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d3cc      	bcc.n	800159a <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	2b18      	cmp	r3, #24
 8001606:	d84d      	bhi.n	80016a4 <L6474_CmdGetParam+0x144>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <L6474_CmdGetParam+0xb0>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001675 	.word	0x08001675
 8001614:	0800168b 	.word	0x0800168b
 8001618:	08001675 	.word	0x08001675
 800161c:	080016a5 	.word	0x080016a5
 8001620:	080016a5 	.word	0x080016a5
 8001624:	080016a5 	.word	0x080016a5
 8001628:	080016a5 	.word	0x080016a5
 800162c:	080016a5 	.word	0x080016a5
 8001630:	080016a5 	.word	0x080016a5
 8001634:	080016a5 	.word	0x080016a5
 8001638:	080016a5 	.word	0x080016a5
 800163c:	080016a5 	.word	0x080016a5
 8001640:	080016a5 	.word	0x080016a5
 8001644:	080016a5 	.word	0x080016a5
 8001648:	080016a5 	.word	0x080016a5
 800164c:	080016a5 	.word	0x080016a5
 8001650:	080016a5 	.word	0x080016a5
 8001654:	080016a5 	.word	0x080016a5
 8001658:	080016a5 	.word	0x080016a5
 800165c:	080016a5 	.word	0x080016a5
 8001660:	080016a5 	.word	0x080016a5
 8001664:	080016a5 	.word	0x080016a5
 8001668:	080016a5 	.word	0x080016a5
 800166c:	0800168b 	.word	0x0800168b
 8001670:	0800168b 	.word	0x0800168b
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	7c7b      	ldrb	r3, [r7, #17]
 800167a:	f042 0220 	orr.w	r2, r2, #32
 800167e:	b2d1      	uxtb	r1, r2
 8001680:	4a2e      	ldr	r2, [pc, #184]	; (800173c <L6474_CmdGetParam+0x1dc>)
 8001682:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8001684:	2303      	movs	r3, #3
 8001686:	74fb      	strb	r3, [r7, #19]
        break;
 8001688:	e018      	b.n	80016bc <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	7c7b      	ldrb	r3, [r7, #17]
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	b2d1      	uxtb	r1, r2
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <L6474_CmdGetParam+0x1dc>)
 8001698:	4413      	add	r3, r2
 800169a:	460a      	mov	r2, r1
 800169c:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 800169e:	2302      	movs	r3, #2
 80016a0:	74fb      	strb	r3, [r7, #19]
        break;
 80016a2:	e00b      	b.n	80016bc <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	7c7b      	ldrb	r3, [r7, #17]
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	b2d1      	uxtb	r1, r2
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <L6474_CmdGetParam+0x1dc>)
 80016b2:	4413      	add	r3, r2
 80016b4:	460a      	mov	r2, r1
 80016b6:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80016bc:	f002 fcc1 	bl	8004042 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80016c0:	2301      	movs	r3, #1
 80016c2:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <L6474_CmdGetParam+0x1d8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f47f af5a 	bne.w	8001584 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80016d0:	7cfb      	ldrb	r3, [r7, #19]
 80016d2:	f1c3 0303 	rsb	r3, r3, #3
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e011      	b.n	80016fe <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <L6474_CmdGetParam+0x1dc>)
 80016e4:	1898      	adds	r0, r3, r2
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <L6474_CmdGetParam+0x1e0>)
 80016f0:	4413      	add	r3, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f001 f90a 	bl	800290c <L6474_WriteBytes>
       i++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d9ea      	bls.n	80016da <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001704:	7c7b      	ldrb	r3, [r7, #17]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <L6474_CmdGetParam+0x1e0>)
 8001708:	4413      	add	r3, r2
 800170a:	78db      	ldrb	r3, [r3, #3]
 800170c:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 800170e:	7c7a      	ldrb	r2, [r7, #17]
 8001710:	490b      	ldr	r1, [pc, #44]	; (8001740 <L6474_CmdGetParam+0x1e0>)
 8001712:	440a      	add	r2, r1
 8001714:	7992      	ldrb	r2, [r2, #6]
 8001716:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001718:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 800171a:	7c7a      	ldrb	r2, [r7, #17]
 800171c:	4908      	ldr	r1, [pc, #32]	; (8001740 <L6474_CmdGetParam+0x1e0>)
 800171e:	440a      	add	r2, r1
 8001720:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001726:	f002 fc95 	bl	8004054 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000514 	.word	0x20000514
 8001738:	20000530 	.word	0x20000530
 800173c:	20000518 	.word	0x20000518
 8001740:	20000524 	.word	0x20000524

08001744 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <L6474_CmdGetStatus+0xfc>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 800175e:	2300      	movs	r3, #0
 8001760:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <L6474_CmdGetStatus+0x100>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 800176e:	f002 fc71 	bl	8004054 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001772:	2300      	movs	r3, #0
 8001774:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e01f      	b.n	80017bc <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 800177c:	4a32      	ldr	r2, [pc, #200]	; (8001848 <L6474_CmdGetStatus+0x104>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 8001786:	4a30      	ldr	r2, [pc, #192]	; (8001848 <L6474_CmdGetStatus+0x104>)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	3303      	adds	r3, #3
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 8001792:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <L6474_CmdGetStatus+0x104>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	3306      	adds	r3, #6
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 800179e:	4a2b      	ldr	r2, [pc, #172]	; (800184c <L6474_CmdGetStatus+0x108>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	3303      	adds	r3, #3
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <L6474_CmdGetStatus+0x108>)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	3306      	adds	r3, #6
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <L6474_CmdGetStatus+0xfc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d3d8      	bcc.n	800177c <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 80017ca:	7abb      	ldrb	r3, [r7, #10]
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <L6474_CmdGetStatus+0x104>)
 80017ce:	21d0      	movs	r1, #208	; 0xd0
 80017d0:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80017d2:	f002 fc36 	bl	8004042 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <L6474_CmdGetStatus+0x100>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1be      	bne.n	8001762 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e011      	b.n	800180e <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <L6474_CmdGetStatus+0x104>)
 80017f4:	1898      	adds	r0, r3, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <L6474_CmdGetStatus+0x108>)
 8001800:	4413      	add	r3, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f001 f882 	bl	800290c <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d9ea      	bls.n	80017ea <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001814:	7abb      	ldrb	r3, [r7, #10]
 8001816:	4a0d      	ldr	r2, [pc, #52]	; (800184c <L6474_CmdGetStatus+0x108>)
 8001818:	4413      	add	r3, r2
 800181a:	78db      	ldrb	r3, [r3, #3]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	7abb      	ldrb	r3, [r7, #10]
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <L6474_CmdGetStatus+0x108>)
 8001824:	440b      	add	r3, r1
 8001826:	799b      	ldrb	r3, [r3, #6]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21b      	sxth	r3, r3
 800182e:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001830:	f002 fc10 	bl	8004054 <L6474_Board_EnableIrq>
  
  return (status);
 8001834:	893b      	ldrh	r3, [r7, #8]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000514 	.word	0x20000514
 8001844:	20000530 	.word	0x20000530
 8001848:	20000518 	.word	0x20000518
 800184c:	20000524 	.word	0x20000524

08001850 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001862:	4b69      	ldr	r3, [pc, #420]	; (8001a08 <L6474_CmdSetParam+0x1b8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8001872:	2300      	movs	r3, #0
 8001874:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <L6474_CmdSetParam+0x1bc>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800187c:	7cbb      	ldrb	r3, [r7, #18]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001882:	f002 fbe7 	bl	8004054 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001886:	2300      	movs	r3, #0
 8001888:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e019      	b.n	80018c4 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8001890:	4a5f      	ldr	r2, [pc, #380]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4413      	add	r3, r2
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 800189a:	4a5d      	ldr	r2, [pc, #372]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	3303      	adds	r3, #3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80018a6:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	4413      	add	r3, r2
 80018ac:	3306      	adds	r3, #6
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80018b2:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	4413      	add	r3, r2
 80018b8:	3309      	adds	r3, #9
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <L6474_CmdSetParam+0x1b8>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d3de      	bcc.n	8001890 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	2b17      	cmp	r3, #23
 80018d8:	d85c      	bhi.n	8001994 <L6474_CmdSetParam+0x144>
 80018da:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <L6474_CmdSetParam+0x90>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001971 	.word	0x08001971
 80018e8:	08001941 	.word	0x08001941
 80018ec:	08001995 	.word	0x08001995
 80018f0:	08001995 	.word	0x08001995
 80018f4:	08001995 	.word	0x08001995
 80018f8:	08001995 	.word	0x08001995
 80018fc:	08001995 	.word	0x08001995
 8001900:	08001995 	.word	0x08001995
 8001904:	08001995 	.word	0x08001995
 8001908:	08001995 	.word	0x08001995
 800190c:	08001995 	.word	0x08001995
 8001910:	08001995 	.word	0x08001995
 8001914:	08001995 	.word	0x08001995
 8001918:	08001995 	.word	0x08001995
 800191c:	08001995 	.word	0x08001995
 8001920:	08001995 	.word	0x08001995
 8001924:	08001995 	.word	0x08001995
 8001928:	08001995 	.word	0x08001995
 800192c:	08001995 	.word	0x08001995
 8001930:	08001995 	.word	0x08001995
 8001934:	08001995 	.word	0x08001995
 8001938:	08001995 	.word	0x08001995
 800193c:	08001971 	.word	0x08001971
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001940:	7c7b      	ldrb	r3, [r7, #17]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	b2d1      	uxtb	r1, r2
 8001946:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 8001948:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	0c1a      	lsrs	r2, r3, #16
 800194e:	7c7b      	ldrb	r3, [r7, #17]
 8001950:	b2d1      	uxtb	r1, r2
 8001952:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	0a1a      	lsrs	r2, r3, #8
 800195e:	7c7b      	ldrb	r3, [r7, #17]
 8001960:	b2d1      	uxtb	r1, r2
 8001962:	4a2b      	ldr	r2, [pc, #172]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 8001964:	4413      	add	r3, r2
 8001966:	460a      	mov	r2, r1
 8001968:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 800196a:	2303      	movs	r3, #3
 800196c:	74fb      	strb	r3, [r7, #19]
        break;
 800196e:	e01a      	b.n	80019a6 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 8001970:	7c7b      	ldrb	r3, [r7, #17]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	b2d1      	uxtb	r1, r2
 8001976:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 8001978:	4413      	add	r3, r2
 800197a:	460a      	mov	r2, r1
 800197c:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0a1a      	lsrs	r2, r3, #8
 8001982:	7c7b      	ldrb	r3, [r7, #17]
 8001984:	b2d1      	uxtb	r1, r2
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 8001988:	4413      	add	r3, r2
 800198a:	460a      	mov	r2, r1
 800198c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 800198e:	2302      	movs	r3, #2
 8001990:	74fb      	strb	r3, [r7, #19]
        break;
 8001992:	e008      	b.n	80019a6 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 8001994:	7c7b      	ldrb	r3, [r7, #17]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	b2d1      	uxtb	r1, r2
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 800199c:	4413      	add	r3, r2
 800199e:	460a      	mov	r2, r1
 80019a0:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80019a6:	7c7b      	ldrb	r3, [r7, #17]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	b2d1      	uxtb	r1, r2
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 80019ae:	4413      	add	r3, r2
 80019b0:	460a      	mov	r2, r1
 80019b2:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80019b4:	f002 fb45 	bl	8004042 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <L6474_CmdSetParam+0x1bc>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f47f af57 	bne.w	8001876 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	f1c3 0303 	rsb	r3, r3, #3
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e011      	b.n	80019f6 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <L6474_CmdSetParam+0x1c0>)
 80019dc:	1898      	adds	r0, r3, r2
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <L6474_CmdSetParam+0x1c4>)
 80019e8:	4413      	add	r3, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f000 ff8e 	bl	800290c <L6474_WriteBytes>
       i++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d9ea      	bls.n	80019d2 <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80019fc:	f002 fb2a 	bl	8004054 <L6474_Board_EnableIrq>
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000514 	.word	0x20000514
 8001a0c:	20000530 	.word	0x20000530
 8001a10:	20000518 	.word	0x20000518
 8001a14:	20000524 	.word	0x20000524

08001a18 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <L6474_Init+0x94>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fb1e 	bl	8004068 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001a2c:	f002 fd18 	bl	8004460 <L6474_Board_SpiInit>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001a36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a3a:	f000 fb8f 	bl	800215c <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <L6474_Init+0x94>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fc37 	bl	80042b8 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <L6474_Init+0x94>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fcb1 	bl	80043b8 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001a56:	2001      	movs	r0, #1
 8001a58:	f002 fae8 	bl	800402c <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <L6474_Init+0x94>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fc83 	bl	8002374 <L6474_SetDeviceParamsToPredefinedValues>
 8001a6e:	e006      	b.n	8001a7e <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <L6474_Init+0x94>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fbd7 	bl	800222c <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <L6474_Init+0x94>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fd4f 	bl	8001528 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <L6474_Init+0x94>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fe57 	bl	8001744 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <L6474_Init+0x94>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b03      	ldr	r3, [pc, #12]	; (8001aac <L6474_Init+0x94>)
 8001aa0:	801a      	strh	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000532 	.word	0x20000532

08001ab0 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <L6474_GetCurrentSpeed+0x2c>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3320      	adds	r3, #32
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000534 	.word	0x20000534

08001ae0 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	4920      	ldr	r1, [pc, #128]	; (8001b70 <L6474_HardStop+0x90>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	3325      	adds	r3, #37	; 0x25
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d12d      	bne.n	8001b5e <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fc2d 	bl	8004364 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	4918      	ldr	r1, [pc, #96]	; (8001b70 <L6474_HardStop+0x90>)
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3324      	adds	r3, #36	; 0x24
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	4913      	ldr	r1, [pc, #76]	; (8001b70 <L6474_HardStop+0x90>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3322      	adds	r3, #34	; 0x22
 8001b2e:	2203      	movs	r2, #3
 8001b30:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <L6474_HardStop+0x90>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3314      	adds	r3, #20
 8001b42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b46:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	4909      	ldr	r1, [pc, #36]	; (8001b70 <L6474_HardStop+0x90>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3320      	adds	r3, #32
 8001b58:	2200      	movs	r2, #0
 8001b5a:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001b5c:	e003      	b.n	8001b66 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f807 	bl	8001b74 <L6474_HizStop>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000534 	.word	0x20000534

08001b74 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fbef 	bl	8004364 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fccd 	bl	8001528 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	4915      	ldr	r1, [pc, #84]	; (8001be8 <L6474_HizStop+0x74>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3324      	adds	r3, #36	; 0x24
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001ba2:	79fa      	ldrb	r2, [r7, #7]
 8001ba4:	4910      	ldr	r1, [pc, #64]	; (8001be8 <L6474_HizStop+0x74>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	3322      	adds	r3, #34	; 0x22
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001bb6:	79fa      	ldrb	r2, [r7, #7]
 8001bb8:	490b      	ldr	r1, [pc, #44]	; (8001be8 <L6474_HizStop+0x74>)
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3314      	adds	r3, #20
 8001bc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bca:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001bcc:	79fa      	ldrb	r2, [r7, #7]
 8001bce:	4906      	ldr	r1, [pc, #24]	; (8001be8 <L6474_HizStop+0x74>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	3320      	adds	r3, #32
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000534 	.word	0x20000534

08001bec <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	4913      	ldr	r1, [pc, #76]	; (8001c4c <L6474_Run+0x60>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	3324      	adds	r3, #36	; 0x24
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d003      	beq.n	8001c1c <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff62 	bl	8001ae0 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001c1c:	79ba      	ldrb	r2, [r7, #6]
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f962 	bl	8001eec <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <L6474_Run+0x60>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	3322      	adds	r3, #34	; 0x22
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fdac 	bl	800279c <L6474_StartMovement>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000534 	.word	0x20000534

08001c50 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d816      	bhi.n	8001c94 <L6474_SelectStepMode+0x44>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <L6474_SelectStepMode+0x1c>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001c7d 	.word	0x08001c7d
 8001c70:	08001c83 	.word	0x08001c83
 8001c74:	08001c89 	.word	0x08001c89
 8001c78:	08001c8f 	.word	0x08001c8f
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c80:	e00b      	b.n	8001c9a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001c82:	2309      	movs	r3, #9
 8001c84:	73fb      	strb	r3, [r7, #15]
      break;    
 8001c86:	e008      	b.n	8001c9a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001c88:	230a      	movs	r3, #10
 8001c8a:	73fb      	strb	r3, [r7, #15]
      break;        
 8001c8c:	e005      	b.n	8001c9a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001c8e:	230b      	movs	r3, #11
 8001c90:	73fb      	strb	r3, [r7, #15]
      break;       
 8001c92:	e002      	b.n	8001c9a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001c94:	230c      	movs	r3, #12
 8001c96:	73fb      	strb	r3, [r7, #15]
      break;       
 8001c98:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff69 	bl	8001b74 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2116      	movs	r1, #22
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fc5a 	bl	8001560 <L6474_CmdGetParam>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f023 0307 	bic.w	r3, r3, #7
 8001cb4:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001cb6:	7bba      	ldrb	r2, [r7, #14]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2116      	movs	r1, #22
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fdc3 	bl	8001850 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fdbd 	bl	8001850 <L6474_CmdSetParam>
  
  return (1);
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	d508      	bpl.n	8001d14 <L6474_SetAnalogValue+0x34>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d005      	beq.n	8001d14 <L6474_SetAnalogValue+0x34>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d002      	beq.n	8001d14 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	74fb      	strb	r3, [r7, #19]
 8001d12:	e0d9      	b.n	8001ec8 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	2b12      	cmp	r3, #18
 8001d1a:	f200 80ca 	bhi.w	8001eb2 <L6474_SetAnalogValue+0x1d2>
 8001d1e:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <L6474_SetAnalogValue+0x44>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001dd7 	.word	0x08001dd7
 8001d28:	08001d71 	.word	0x08001d71
 8001d2c:	08001dd7 	.word	0x08001dd7
 8001d30:	08001eb3 	.word	0x08001eb3
 8001d34:	08001eb3 	.word	0x08001eb3
 8001d38:	08001eb3 	.word	0x08001eb3
 8001d3c:	08001eb3 	.word	0x08001eb3
 8001d40:	08001eb3 	.word	0x08001eb3
 8001d44:	08001e41 	.word	0x08001e41
 8001d48:	08001eb3 	.word	0x08001eb3
 8001d4c:	08001eb3 	.word	0x08001eb3
 8001d50:	08001eb3 	.word	0x08001eb3
 8001d54:	08001eb3 	.word	0x08001eb3
 8001d58:	08001eb3 	.word	0x08001eb3
 8001d5c:	08001e8d 	.word	0x08001e8d
 8001d60:	08001e8d 	.word	0x08001e8d
 8001d64:	08001eb3 	.word	0x08001eb3
 8001d68:	08001eb3 	.word	0x08001eb3
 8001d6c:	08001e67 	.word	0x08001e67
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	d021      	beq.n	8001dc2 <L6474_SetAnalogValue+0xe2>
 8001d7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d82:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ed4 <L6474_SetAnalogValue+0x1f4>
 8001d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	dc15      	bgt.n	8001dbc <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001d90:	2116      	movs	r1, #22
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff fbe4 	bl	8001560 <L6474_CmdGetParam>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	2201      	movs	r2, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001dae:	ed97 7a01 	vldr	s14, [r7, #4]
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	d502      	bpl.n	8001dc2 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001dc0:	e079      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dca:	ee17 3a90 	vmov	r3, s15
 8001dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd2:	617b      	str	r3, [r7, #20]
        break;
 8001dd4:	e06f      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dda:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001ed8 <L6474_SetAnalogValue+0x1f8>
 8001dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	db27      	blt.n	8001e38 <L6474_SetAnalogValue+0x158>
 8001de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001edc <L6474_SetAnalogValue+0x1fc>
 8001df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d81e      	bhi.n	8001e38 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	db09      	blt.n	8001e1c <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e10:	ee17 3a90 	vmov	r3, s15
 8001e14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e18:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001e1a:	e010      	b.n	8001e3e <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e20:	eef1 7a67 	vneg.f32	s15, s15
 8001e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e28:	ee17 3a90 	vmov	r3, s15
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001e36:	e002      	b.n	8001e3e <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001e3c:	e03b      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
 8001e3e:	e03a      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e44:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ee0 <L6474_SetAnalogValue+0x200>
 8001e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e50:	dd02      	ble.n	8001e58 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001e56:	e02e      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001e58:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e5c:	f000 fd14 	bl	8002888 <L6474_Tval_Current_to_Par>
 8001e60:	4603      	mov	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]
        break;
 8001e64:	e027      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ee4 <L6474_SetAnalogValue+0x204>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	dd02      	ble.n	8001e7e <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001e7c:	e01b      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001e7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e82:	f000 fcdd 	bl	8002840 <L6474_Ocd_Th_to_Par>
 8001e86:	4603      	mov	r3, r0
 8001e88:	617b      	str	r3, [r7, #20]
        break;
 8001e8a:	e014      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e90:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ee8 <L6474_SetAnalogValue+0x208>
 8001e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9c:	dd02      	ble.n	8001ea4 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001ea2:	e008      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001ea4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ea8:	f000 fd12 	bl	80028d0 <L6474_Tmin_Time_to_Par>
 8001eac:	4603      	mov	r3, r0
 8001eae:	617b      	str	r3, [r7, #20]
        break;    
 8001eb0:	e001      	b.n	8001eb6 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fcc4 	bl	8001850 <L6474_CmdSetParam>
    }
  }
  return result;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	43ff8000 	.word	0x43ff8000
 8001ed8:	ca000000 	.word	0xca000000
 8001edc:	49fffff8 	.word	0x49fffff8
 8001ee0:	457a0000 	.word	0x457a0000
 8001ee4:	45bb8000 	.word	0x45bb8000
 8001ee8:	42800000 	.word	0x42800000

08001eec <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	490f      	ldr	r1, [pc, #60]	; (8001f3c <L6474_SetDirection+0x50>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	3324      	adds	r3, #36	; 0x24
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d10f      	bne.n	8001f34 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001f14:	79fa      	ldrb	r2, [r7, #7]
 8001f16:	4909      	ldr	r1, [pc, #36]	; (8001f3c <L6474_SetDirection+0x50>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	3323      	adds	r3, #35	; 0x23
 8001f24:	79ba      	ldrb	r2, [r7, #6]
 8001f26:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001f28:	79ba      	ldrb	r2, [r7, #6]
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fa66 	bl	8004400 <L6474_Board_SetDirectionGpio>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000534 	.word	0x20000534

08001f40 <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d807      	bhi.n	8001f60 <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <L6474_SetNbDevices+0x30>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <L6474_SetNbDevices+0x34>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 8001f60:	2300      	movs	r3, #0
  }
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000532 	.word	0x20000532
 8001f74:	20000514 	.word	0x20000514

08001f78 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460a      	mov	r2, r1
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	4613      	mov	r3, r2
 8001f86:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d935      	bls.n	8001ffe <L6474_SetMaxSpeed+0x86>
 8001f92:	88bb      	ldrh	r3, [r7, #4]
 8001f94:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d830      	bhi.n	8001ffe <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	491b      	ldr	r1, [pc, #108]	; (800200c <L6474_SetMaxSpeed+0x94>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	331e      	adds	r3, #30
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001fb0:	88ba      	ldrh	r2, [r7, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d323      	bcc.n	8001ffe <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	4914      	ldr	r1, [pc, #80]	; (800200c <L6474_SetMaxSpeed+0x94>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3324      	adds	r3, #36	; 0x24
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d00b      	beq.n	8001fe6 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001fce:	79fa      	ldrb	r2, [r7, #7]
 8001fd0:	490e      	ldr	r1, [pc, #56]	; (800200c <L6474_SetMaxSpeed+0x94>)
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	3322      	adds	r3, #34	; 0x22
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	4908      	ldr	r1, [pc, #32]	; (800200c <L6474_SetMaxSpeed+0x94>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	331c      	adds	r3, #28
 8001ff6:	88ba      	ldrh	r2, [r7, #4]
 8001ff8:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000534 	.word	0x20000534

08002010 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	460a      	mov	r2, r1
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8002024:	88bb      	ldrh	r3, [r7, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d935      	bls.n	8002096 <L6474_SetMinSpeed+0x86>
 800202a:	88bb      	ldrh	r3, [r7, #4]
 800202c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002030:	4293      	cmp	r3, r2
 8002032:	d830      	bhi.n	8002096 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <L6474_SetMinSpeed+0x94>)
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	331c      	adds	r3, #28
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8002048:	88ba      	ldrh	r2, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d823      	bhi.n	8002096 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800204e:	79fa      	ldrb	r2, [r7, #7]
 8002050:	4914      	ldr	r1, [pc, #80]	; (80020a4 <L6474_SetMinSpeed+0x94>)
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	3324      	adds	r3, #36	; 0x24
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002062:	2b08      	cmp	r3, #8
 8002064:	d00b      	beq.n	800207e <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <L6474_SetMinSpeed+0x94>)
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	3322      	adds	r3, #34	; 0x22
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	4908      	ldr	r1, [pc, #32]	; (80020a4 <L6474_SetMinSpeed+0x94>)
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	331e      	adds	r3, #30
 800208e:	88ba      	ldrh	r2, [r7, #4]
 8002090:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002092:	2301      	movs	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	20000534 	.word	0x20000534

080020a8 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	460a      	mov	r2, r1
 80020b2:	71fb      	strb	r3, [r7, #7]
 80020b4:	4613      	mov	r3, r2
 80020b6:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 80020b8:	79fa      	ldrb	r2, [r7, #7]
 80020ba:	4907      	ldr	r1, [pc, #28]	; (80020d8 <L6474_SetStopMode+0x30>)
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	3325      	adds	r3, #37	; 0x25
 80020c8:	79ba      	ldrb	r2, [r7, #6]
 80020ca:	701a      	strb	r2, [r3, #0]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	20000534 	.word	0x20000534

080020dc <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	460a      	mov	r2, r1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	4613      	mov	r3, r2
 80020ea:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d801      	bhi.n	80020f6 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 80020f2:	2302      	movs	r3, #2
 80020f4:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d902      	bls.n	8002106 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002100:	f242 7310 	movw	r3, #10000	; 0x2710
 8002104:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 8002106:	79fa      	ldrb	r2, [r7, #7]
 8002108:	4913      	ldr	r1, [pc, #76]	; (8002158 <L6474_ApplySpeed+0x7c>)
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	3320      	adds	r3, #32
 8002116:	88ba      	ldrh	r2, [r7, #4]
 8002118:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d010      	beq.n	8002142 <L6474_ApplySpeed+0x66>
 8002120:	2b02      	cmp	r3, #2
 8002122:	dc13      	bgt.n	800214c <L6474_ApplySpeed+0x70>
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <L6474_ApplySpeed+0x52>
 8002128:	2b01      	cmp	r3, #1
 800212a:	d005      	beq.n	8002138 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 800212c:	e00e      	b.n	800214c <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	f002 f84f 	bl	80041d4 <L6474_Board_Pwm1SetFreq>
      break;
 8002136:	e00a      	b.n	800214e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	f002 f870 	bl	8004220 <L6474_Board_Pwm2SetFreq>
      break;
 8002140:	e005      	b.n	800214e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f002 f891 	bl	800426c <L6474_Board_Pwm3SetFreq>
      break;
 800214a:	e000      	b.n	800214e <L6474_ApplySpeed+0x72>
      break; //ignore error
 800214c:	bf00      	nop
  }
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000534 	.word	0x20000534

0800215c <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <L6474_ErrorHandler+0x28>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <L6474_ErrorHandler+0x28>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	4610      	mov	r0, r2
 8002176:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002178:	e000      	b.n	800217c <L6474_ErrorHandler+0x20>
    while(1)
 800217a:	e7fe      	b.n	800217a <L6474_ErrorHandler+0x1e>
}
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000510 	.word	0x20000510

08002188 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <L6474_SendCommand+0x90>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80021a8:	2300      	movs	r3, #0
 80021aa:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <L6474_SendCommand+0x94>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80021b8:	f001 ff4c 	bl	8004054 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80021bc:	2300      	movs	r3, #0
 80021be:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e008      	b.n	80021d8 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <L6474_SendCommand+0x98>)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	3309      	adds	r3, #9
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3301      	adds	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <L6474_SendCommand+0x90>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d3ef      	bcc.n	80021c6 <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80021e6:	7abb      	ldrb	r3, [r7, #10]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <L6474_SendCommand+0x98>)
 80021ea:	4413      	add	r3, r2
 80021ec:	79ba      	ldrb	r2, [r7, #6]
 80021ee:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80021f0:	f001 ff27 	bl	8004042 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <L6474_SendCommand+0x94>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1d4      	bne.n	80021ac <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <L6474_SendCommand+0x9c>)
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <L6474_SendCommand+0xa0>)
 8002206:	f000 fb81 	bl	800290c <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800220a:	f001 ff23 	bl	8004054 <L6474_Board_EnableIrq>
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000514 	.word	0x20000514
 800221c:	20000530 	.word	0x20000530
 8002220:	20000518 	.word	0x20000518
 8002224:	2000052d 	.word	0x2000052d
 8002228:	20000521 	.word	0x20000521

0800222c <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	8818      	ldrh	r0, [r3, #0]
 800223e:	494c      	ldr	r1, [pc, #304]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	3318      	adds	r3, #24
 800224c:	4602      	mov	r2, r0
 800224e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002250:	79fa      	ldrb	r2, [r7, #7]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	8858      	ldrh	r0, [r3, #2]
 8002256:	4946      	ldr	r1, [pc, #280]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	331a      	adds	r3, #26
 8002264:	4602      	mov	r2, r0
 8002266:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	8898      	ldrh	r0, [r3, #4]
 800226e:	4940      	ldr	r1, [pc, #256]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	331c      	adds	r3, #28
 800227c:	4602      	mov	r2, r0
 800227e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	88d8      	ldrh	r0, [r3, #6]
 8002286:	493a      	ldr	r1, [pc, #232]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	331e      	adds	r3, #30
 8002294:	4602      	mov	r2, r0
 8002296:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002298:	79fa      	ldrb	r2, [r7, #7]
 800229a:	4935      	ldr	r1, [pc, #212]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	4930      	ldr	r1, [pc, #192]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	3304      	adds	r3, #4
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80022be:	79fa      	ldrb	r2, [r7, #7]
 80022c0:	492b      	ldr	r1, [pc, #172]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	3308      	adds	r3, #8
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80022d2:	79fa      	ldrb	r2, [r7, #7]
 80022d4:	4926      	ldr	r1, [pc, #152]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	330c      	adds	r3, #12
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80022e6:	79fa      	ldrb	r2, [r7, #7]
 80022e8:	4921      	ldr	r1, [pc, #132]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	3310      	adds	r3, #16
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80022fa:	79fa      	ldrb	r2, [r7, #7]
 80022fc:	491c      	ldr	r1, [pc, #112]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	3314      	adds	r3, #20
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	4917      	ldr	r1, [pc, #92]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	3320      	adds	r3, #32
 800231e:	2200      	movs	r2, #0
 8002320:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	4912      	ldr	r1, [pc, #72]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	3322      	adds	r3, #34	; 0x22
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002336:	79fa      	ldrb	r2, [r7, #7]
 8002338:	490d      	ldr	r1, [pc, #52]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	3323      	adds	r3, #35	; 0x23
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	4908      	ldr	r1, [pc, #32]	; (8002370 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3324      	adds	r3, #36	; 0x24
 800235a:	2208      	movs	r2, #8
 800235c:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f8a2 	bl	80024ac <L6474_SetRegisterToGivenValues>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000534 	.word	0x20000534

08002374 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	4949      	ldr	r1, [pc, #292]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3318      	adds	r3, #24
 800238e:	2201      	movs	r2, #1
 8002390:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	4944      	ldr	r1, [pc, #272]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	331a      	adds	r3, #26
 80023a2:	2201      	movs	r2, #1
 80023a4:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 80023a6:	79fa      	ldrb	r2, [r7, #7]
 80023a8:	493f      	ldr	r1, [pc, #252]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	331c      	adds	r3, #28
 80023b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023ba:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 80023bc:	79fa      	ldrb	r2, [r7, #7]
 80023be:	493a      	ldr	r1, [pc, #232]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	331e      	adds	r3, #30
 80023cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d0:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80023d2:	79fa      	ldrb	r2, [r7, #7]
 80023d4:	4934      	ldr	r1, [pc, #208]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	4930      	ldr	r1, [pc, #192]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3304      	adds	r3, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	492b      	ldr	r1, [pc, #172]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3308      	adds	r3, #8
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	4926      	ldr	r1, [pc, #152]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	330c      	adds	r3, #12
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002420:	79fa      	ldrb	r2, [r7, #7]
 8002422:	4921      	ldr	r1, [pc, #132]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	3310      	adds	r3, #16
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002434:	79fa      	ldrb	r2, [r7, #7]
 8002436:	491c      	ldr	r1, [pc, #112]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3314      	adds	r3, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	4917      	ldr	r1, [pc, #92]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3320      	adds	r3, #32
 8002458:	2200      	movs	r2, #0
 800245a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	4912      	ldr	r1, [pc, #72]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3322      	adds	r3, #34	; 0x22
 800246c:	2203      	movs	r2, #3
 800246e:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002470:	79fa      	ldrb	r2, [r7, #7]
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	3323      	adds	r3, #35	; 0x23
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	2208      	movs	r2, #8
 8002496:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f882 	bl	80025a4 <L6474_SetRegisterToPredefinedValues>

}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000534 	.word	0x20000534

080024ac <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f9c6 	bl	8001850 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2102      	movs	r1, #2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f9c0 	bl	8001850 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2103      	movs	r1, #3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f9ba 	bl	8001850 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	edd3 7a02 	vldr	s15, [r3, #8]
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	eeb0 0a67 	vmov.f32	s0, s15
 80024e8:	2109      	movs	r1, #9
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fbf8 	bl	8001ce0 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	210e      	movs	r1, #14
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f9a4 	bl	8001850 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	edd3 7a06 	vldr	s15, [r3, #24]
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	eeb0 0a67 	vmov.f32	s0, s15
 8002514:	210f      	movs	r1, #15
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fbe2 	bl	8001ce0 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	eeb0 0a67 	vmov.f32	s0, s15
 8002528:	2110      	movs	r1, #16
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fbd8 	bl	8001ce0 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	edd3 7a03 	vldr	s15, [r3, #12]
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	eeb0 0a67 	vmov.f32	s0, s15
 800253c:	2113      	movs	r1, #19
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fbce 	bl	8001ce0 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 800254c:	4313      	orrs	r3, r2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2116      	movs	r1, #22
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f97a 	bl	8001850 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2117      	movs	r1, #23
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f973 	bl	8001850 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7c5b      	ldrb	r3, [r3, #17]
 8002574:	4313      	orrs	r3, r2
 8002576:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 800257c:	4313      	orrs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002586:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 800258c:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 800258e:	461a      	mov	r2, r3
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	2118      	movs	r1, #24
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f95b 	bl	8001850 <L6474_CmdSetParam>
  
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff f94b 	bl	8001850 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2200      	movs	r2, #0
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f945 	bl	8001850 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2103      	movs	r1, #3
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f93f 	bl	8001850 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	f000 8094 	beq.w	8002702 <L6474_SetRegisterToPredefinedValues+0x15e>
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f300 80d7 	bgt.w	800278e <L6474_SetRegisterToPredefinedValues+0x1ea>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <L6474_SetRegisterToPredefinedValues+0x46>
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d046      	beq.n	8002676 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 80025e8:	e0d1      	b.n	800278e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 80025ea:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002798 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80025ee:	f000 f94b 	bl	8002888 <L6474_Tval_Current_to_Par>
 80025f2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80025f4:	461a      	mov	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2109      	movs	r1, #9
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f928 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2235      	movs	r2, #53	; 0x35
 8002604:	210e      	movs	r1, #14
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f922 	bl	8001850 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 800260c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002610:	f000 f95e 	bl	80028d0 <L6474_Tmin_Time_to_Par>
 8002614:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	210f      	movs	r1, #15
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f917 	bl	8001850 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002622:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002626:	f000 f953 	bl	80028d0 <L6474_Tmin_Time_to_Par>
 800262a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800262c:	461a      	mov	r2, r3
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	2110      	movs	r1, #16
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f90c 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2201      	movs	r2, #1
 800263c:	2113      	movs	r1, #19
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f906 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2288      	movs	r2, #136	; 0x88
 8002648:	2116      	movs	r1, #22
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f900 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	22cf      	movs	r2, #207	; 0xcf
 8002654:	2117      	movs	r1, #23
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f8fa 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002662:	2118      	movs	r1, #24
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f8f3 	bl	8001850 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fd1a 	bl	80020a8 <L6474_SetStopMode>
      break;
 8002674:	e08b      	b.n	800278e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002676:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002798 <L6474_SetRegisterToPredefinedValues+0x1f4>
 800267a:	f000 f905 	bl	8002888 <L6474_Tval_Current_to_Par>
 800267e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002680:	461a      	mov	r2, r3
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	2109      	movs	r1, #9
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f8e2 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2235      	movs	r2, #53	; 0x35
 8002690:	210e      	movs	r1, #14
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f8dc 	bl	8001850 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002698:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800269c:	f000 f918 	bl	80028d0 <L6474_Tmin_Time_to_Par>
 80026a0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80026a2:	461a      	mov	r2, r3
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	210f      	movs	r1, #15
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f8d1 	bl	8001850 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 80026ae:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80026b2:	f000 f90d 	bl	80028d0 <L6474_Tmin_Time_to_Par>
 80026b6:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80026b8:	461a      	mov	r2, r3
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2110      	movs	r1, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f8c6 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	2201      	movs	r2, #1
 80026c8:	2113      	movs	r1, #19
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f8c0 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	228c      	movs	r2, #140	; 0x8c
 80026d4:	2116      	movs	r1, #22
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f8ba 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	22cf      	movs	r2, #207	; 0xcf
 80026e0:	2117      	movs	r1, #23
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f8b4 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80026ee:	2118      	movs	r1, #24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f8ad 	bl	8001850 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fcd4 	bl	80020a8 <L6474_SetStopMode>
      break;
 8002700:	e045      	b.n	800278e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 8002702:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002798 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002706:	f000 f8bf 	bl	8002888 <L6474_Tval_Current_to_Par>
 800270a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800270c:	461a      	mov	r2, r3
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2109      	movs	r1, #9
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f89c 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2235      	movs	r2, #53	; 0x35
 800271c:	210e      	movs	r1, #14
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff f896 	bl	8001850 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002724:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002728:	f000 f8d2 	bl	80028d0 <L6474_Tmin_Time_to_Par>
 800272c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800272e:	461a      	mov	r2, r3
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	210f      	movs	r1, #15
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f88b 	bl	8001850 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 800273a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800273e:	f000 f8c7 	bl	80028d0 <L6474_Tmin_Time_to_Par>
 8002742:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002744:	461a      	mov	r2, r3
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2110      	movs	r1, #16
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f880 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2201      	movs	r2, #1
 8002754:	2113      	movs	r1, #19
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f87a 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	228c      	movs	r2, #140	; 0x8c
 8002760:	2116      	movs	r1, #22
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f874 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	22cf      	movs	r2, #207	; 0xcf
 800276c:	2117      	movs	r1, #23
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f86e 	bl	8001850 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800277a:	2118      	movs	r1, #24
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f867 	bl	8001850 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fc8e 	bl	80020a8 <L6474_SetStopMode>
      break;
 800278c:	bf00      	nop
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	437a0000 	.word	0x437a0000

0800279c <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fecb 	bl	8001544 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 80027ae:	79fa      	ldrb	r2, [r7, #7]
 80027b0:	4922      	ldr	r1, [pc, #136]	; (800283c <L6474_StartMovement+0xa0>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3308      	adds	r3, #8
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	491d      	ldr	r1, [pc, #116]	; (800283c <L6474_StartMovement+0xa0>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	e009      	b.n	80027ee <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80027da:	79fa      	ldrb	r2, [r7, #7]
 80027dc:	4917      	ldr	r1, [pc, #92]	; (800283c <L6474_StartMovement+0xa0>)
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	3324      	adds	r3, #36	; 0x24
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	4912      	ldr	r1, [pc, #72]	; (800283c <L6474_StartMovement+0xa0>)
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002800:	79fa      	ldrb	r2, [r7, #7]
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <L6474_StartMovement+0xa0>)
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	330c      	adds	r3, #12
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002814:	79fa      	ldrb	r2, [r7, #7]
 8002816:	4909      	ldr	r1, [pc, #36]	; (800283c <L6474_StartMovement+0xa0>)
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	331e      	adds	r3, #30
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29a      	uxth	r2, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fc55 	bl	80020dc <L6474_ApplySpeed>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000534 	.word	0x20000534

08002840 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 800284a:	edd7 7a01 	vldr	s15, [r7, #4]
 800284e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002880 <L6474_Ocd_Th_to_Par+0x40>
 8002852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002856:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002884 <L6474_Ocd_Th_to_Par+0x44>
 800285a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286a:	edc7 7a00 	vstr	s15, [r7]
 800286e:	783b      	ldrb	r3, [r7, #0]
 8002870:	b2db      	uxtb	r3, r3
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	43bb8000 	.word	0x43bb8000
 8002884:	3b2eb80f 	.word	0x3b2eb80f

08002888 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8002892:	edd7 7a01 	vldr	s15, [r7, #4]
 8002896:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80028c8 <L6474_Tval_Current_to_Par+0x40>
 800289a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800289e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80028cc <L6474_Tval_Current_to_Par+0x44>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b2:	edc7 7a00 	vstr	s15, [r7]
 80028b6:	783b      	ldrb	r3, [r7, #0]
 80028b8:	b2db      	uxtb	r3, r3
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	41fa0000 	.word	0x41fa0000
 80028cc:	3d03126f 	.word	0x3d03126f

080028d0 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 80028da:	edd7 7a01 	vldr	s15, [r7, #4]
 80028de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f6:	edc7 7a00 	vstr	s15, [r7]
 80028fa:	783b      	ldrb	r3, [r7, #0]
 80028fc:	b2db      	uxtb	r3, r3
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <L6474_WriteBytes+0x40>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f001 fdd7 	bl	80044d4 <L6474_Board_SpiWriteBytes>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 800292c:	f248 0001 	movw	r0, #32769	; 0x8001
 8002930:	f7ff fc14 	bl	800215c <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <L6474_WriteBytes+0x44>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <L6474_WriteBytes+0x48>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
  }
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000514 	.word	0x20000514
 8002950:	20000531 	.word	0x20000531
 8002954:	20000530 	.word	0x20000530

08002958 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2234      	movs	r2, #52	; 0x34
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f01e fd01 	bl	802136c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800296a:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <MX_LTDC_Init+0xfc>)
 800296c:	4a3a      	ldr	r2, [pc, #232]	; (8002a58 <MX_LTDC_Init+0x100>)
 800296e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <MX_LTDC_Init+0xfc>)
 8002972:	2200      	movs	r2, #0
 8002974:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <MX_LTDC_Init+0xfc>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800297c:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <MX_LTDC_Init+0xfc>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002982:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <MX_LTDC_Init+0xfc>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <MX_LTDC_Init+0xfc>)
 800298a:	2227      	movs	r2, #39	; 0x27
 800298c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <MX_LTDC_Init+0xfc>)
 8002990:	2208      	movs	r2, #8
 8002992:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <MX_LTDC_Init+0xfc>)
 8002996:	222a      	movs	r2, #42	; 0x2a
 8002998:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <MX_LTDC_Init+0xfc>)
 800299c:	220b      	movs	r2, #11
 800299e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029a2:	f240 220a 	movw	r2, #522	; 0x20a
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80029a8:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029aa:	f240 121b 	movw	r2, #283	; 0x11b
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029b2:	f44f 7204 	mov.w	r2, #528	; 0x210
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029ba:	f240 121d 	movw	r2, #285	; 0x11d
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80029d8:	481e      	ldr	r0, [pc, #120]	; (8002a54 <MX_LTDC_Init+0xfc>)
 80029da:	f004 fff5 	bl	80079c8 <HAL_LTDC_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80029e4:	f000 fd1a 	bl	800341c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80029ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80029f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80029f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80029fa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80029fc:	2302      	movs	r3, #2
 80029fe:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002a00:	23ff      	movs	r3, #255	; 0xff
 8002a02:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002a0e:	2305      	movs	r3, #5
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002a16:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002a1c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	2200      	movs	r2, #0
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4806      	ldr	r0, [pc, #24]	; (8002a54 <MX_LTDC_Init+0xfc>)
 8002a3c:	f005 f94c 	bl	8007cd8 <HAL_LTDC_ConfigLayer>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8002a46:	f000 fce9 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	3738      	adds	r7, #56	; 0x38
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200005ac 	.word	0x200005ac
 8002a58:	50001000 	.word	0x50001000

08002a5c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0c0      	sub	sp, #256	; 0x100
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a78:	22bc      	movs	r2, #188	; 0xbc
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f01e fc75 	bl	802136c <memset>
  if(ltdcHandle->Instance==LTDC)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4acf      	ldr	r2, [pc, #828]	; (8002dc4 <HAL_LTDC_MspInit+0x368>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 8196 	bne.w	8002dba <HAL_LTDC_MspInit+0x35e>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8002a98:	2312      	movs	r3, #18
 8002a9a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002aa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002aac:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8002ab4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002ab8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f006 fc0a 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 8002aca:	f000 fca7 	bl	800341c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ace:	4bbe      	ldr	r3, [pc, #760]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002ad0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002ad4:	4abc      	ldr	r2, [pc, #752]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002ade:	4bba      	ldr	r3, [pc, #744]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002ae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aec:	4bb6      	ldr	r3, [pc, #728]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af2:	4ab5      	ldr	r2, [pc, #724]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002af4:	f043 0310 	orr.w	r3, r3, #16
 8002af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afc:	4bb2      	ldr	r3, [pc, #712]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b0a:	4baf      	ldr	r3, [pc, #700]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b10:	4aad      	ldr	r2, [pc, #692]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1a:	4bab      	ldr	r3, [pc, #684]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b28:	4ba7      	ldr	r3, [pc, #668]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2e:	4aa6      	ldr	r2, [pc, #664]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b30:	f043 0320 	orr.w	r3, r3, #32
 8002b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b38:	4ba3      	ldr	r3, [pc, #652]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b46:	4ba0      	ldr	r3, [pc, #640]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4c:	4a9e      	ldr	r2, [pc, #632]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b56:	4b9c      	ldr	r3, [pc, #624]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b64:	4b98      	ldr	r3, [pc, #608]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6a:	4a97      	ldr	r2, [pc, #604]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b74:	4b94      	ldr	r3, [pc, #592]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	4a8f      	ldr	r2, [pc, #572]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b92:	4b8d      	ldr	r3, [pc, #564]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	4b89      	ldr	r3, [pc, #548]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba6:	4a88      	ldr	r2, [pc, #544]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb0:	4b85      	ldr	r3, [pc, #532]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bbe:	4b82      	ldr	r3, [pc, #520]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc4:	4a80      	ldr	r2, [pc, #512]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bce:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bdc:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be2:	4a79      	ldr	r2, [pc, #484]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bec:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_LTDC_MspInit+0x36c>)
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002bfa:	2370      	movs	r3, #112	; 0x70
 8002bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c12:	230e      	movs	r3, #14
 8002c14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	486b      	ldr	r0, [pc, #428]	; (8002dcc <HAL_LTDC_MspInit+0x370>)
 8002c20:	f004 fcb2 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8002c24:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8002c28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c3e:	230e      	movs	r3, #14
 8002c40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4861      	ldr	r0, [pc, #388]	; (8002dd0 <HAL_LTDC_MspInit+0x374>)
 8002c4c:	f004 fc9c 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c6a:	230e      	movs	r3, #14
 8002c6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c74:	4619      	mov	r1, r3
 8002c76:	4857      	ldr	r0, [pc, #348]	; (8002dd4 <HAL_LTDC_MspInit+0x378>)
 8002c78:	f004 fc86 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c94:	230e      	movs	r3, #14
 8002c96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	484d      	ldr	r0, [pc, #308]	; (8002dd8 <HAL_LTDC_MspInit+0x37c>)
 8002ca2:	f004 fc71 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8002ca6:	f24a 330c 	movw	r3, #41740	; 0xa30c
 8002caa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cc0:	230e      	movs	r3, #14
 8002cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cc6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4843      	ldr	r0, [pc, #268]	; (8002ddc <HAL_LTDC_MspInit+0x380>)
 8002cce:	f004 fc5b 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002cd2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002cd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cec:	230e      	movs	r3, #14
 8002cee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4839      	ldr	r0, [pc, #228]	; (8002de0 <HAL_LTDC_MspInit+0x384>)
 8002cfa:	f004 fc45 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d16:	2309      	movs	r3, #9
 8002d18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d20:	4619      	mov	r1, r3
 8002d22:	4830      	ldr	r0, [pc, #192]	; (8002de4 <HAL_LTDC_MspInit+0x388>)
 8002d24:	f004 fc30 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002d28:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d42:	230e      	movs	r3, #14
 8002d44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4826      	ldr	r0, [pc, #152]	; (8002de8 <HAL_LTDC_MspInit+0x38c>)
 8002d50:	f004 fc1a 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d54:	2340      	movs	r3, #64	; 0x40
 8002d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d6c:	230e      	movs	r3, #14
 8002d6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d76:	4619      	mov	r1, r3
 8002d78:	481c      	ldr	r0, [pc, #112]	; (8002dec <HAL_LTDC_MspInit+0x390>)
 8002d7a:	f004 fc05 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d98:	2309      	movs	r3, #9
 8002d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002da2:	4619      	mov	r1, r3
 8002da4:	4810      	ldr	r0, [pc, #64]	; (8002de8 <HAL_LTDC_MspInit+0x38c>)
 8002da6:	f004 fbef 	bl	8007588 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2105      	movs	r1, #5
 8002dae:	2058      	movs	r0, #88	; 0x58
 8002db0:	f004 f9c6 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002db4:	2058      	movs	r0, #88	; 0x58
 8002db6:	f004 f9dd 	bl	8007174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002dba:	bf00      	nop
 8002dbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	50001000 	.word	0x50001000
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	58021000 	.word	0x58021000
 8002dd0:	58022000 	.word	0x58022000
 8002dd4:	58021400 	.word	0x58021400
 8002dd8:	58020800 	.word	0x58020800
 8002ddc:	58021c00 	.word	0x58021c00
 8002de0:	58020000 	.word	0x58020000
 8002de4:	58020400 	.word	0x58020400
 8002de8:	58021800 	.word	0x58021800
 8002dec:	58020c00 	.word	0x58020c00

08002df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002df6:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <main+0x134>)
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11b      	bne.n	8002e3a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e02:	f3bf 8f4f 	dsb	sy
}
 8002e06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e08:	f3bf 8f6f 	isb	sy
}
 8002e0c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002e0e:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <main+0x134>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002e16:	f3bf 8f4f 	dsb	sy
}
 8002e1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e1c:	f3bf 8f6f 	isb	sy
}
 8002e20:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002e22:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <main+0x134>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4a3f      	ldr	r2, [pc, #252]	; (8002f24 <main+0x134>)
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e2e:	f3bf 8f4f 	dsb	sy
}
 8002e32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e34:	f3bf 8f6f 	isb	sy
}
 8002e38:	e000      	b.n	8002e3c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002e3a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002e3c:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <main+0x134>)
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d138      	bne.n	8002eba <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <main+0x134>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002e50:	f3bf 8f4f 	dsb	sy
}
 8002e54:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <main+0x134>)
 8002e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0b5b      	lsrs	r3, r3, #13
 8002e62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e66:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	08db      	lsrs	r3, r3, #3
 8002e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e70:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002e7a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002e80:	4928      	ldr	r1, [pc, #160]	; (8002f24 <main+0x134>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1e5a      	subs	r2, r3, #1
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <main+0x82>
    } while(sets-- != 0U);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	60ba      	str	r2, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8002e9c:	f3bf 8f4f 	dsb	sy
}
 8002ea0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <main+0x134>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <main+0x134>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eae:	f3bf 8f4f 	dsb	sy
}
 8002eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002eb4:	f3bf 8f6f 	isb	sy
}
 8002eb8:	e000      	b.n	8002ebc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002eba:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ebc:	f001 fb70 	bl	80045a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ec0:	f000 f834 	bl	8002f2c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ec4:	f000 f8b6 	bl	8003034 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec8:	f7fe f964 	bl	8001194 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002ecc:	f000 fc40 	bl	8003750 <MX_SPI2_Init>
  MX_ADC3_Init();
 8002ed0:	f7fd fc5a 	bl	8000788 <MX_ADC3_Init>
  MX_I2C1_SMBUS_Init();
 8002ed4:	f7fe fa6e 	bl	80013b4 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 8002ed8:	f7fd fd8a 	bl	80009f0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8002edc:	f7ff fd3c 	bl	8002958 <MX_LTDC_Init>
  MX_CRC_Init();
 8002ee0:	f7fd fd42 	bl	8000968 <MX_CRC_Init>
  MX_TIM2_Init();
 8002ee4:	f000 ff18 	bl	8003d18 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 8002ee8:	f000 fa9e 	bl	8003428 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8002eec:	f000 ffec 	bl	8003ec8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002ef0:	f7fd fbd0 	bl	8000694 <MX_ADC1_Init>
  MX_SDMMC1_SD_Init();
 8002ef4:	f000 fb7a 	bl	80035ec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002ef8:	f00d ffd8 	bl	8010eac <MX_FATFS_Init>
  //MX_TouchGFX_Init();
  /* USER CODE BEGIN 2 */
  L6474_SetNbDevices(1);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7ff f81f 	bl	8001f40 <L6474_SetNbDevices>
  L6474_Init(NULL);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fe fd88 	bl	8001a18 <L6474_Init>
  L6474_SelectStepMode(0, STEP_MODE_1_16);
 8002f08:	2104      	movs	r1, #4
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fe fea0 	bl	8001c50 <L6474_SelectStepMode>
  L6474_AttachFlagInterrupt(MyFlagInterruptHandler);
 8002f10:	4805      	ldr	r0, [pc, #20]	; (8002f28 <main+0x138>)
 8002f12:	f7fe faf9 	bl	8001508 <L6474_AttachFlagInterrupt>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002f16:	f011 f953 	bl	80141c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002f1a:	f7fd fdc5 	bl	8000aa8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002f1e:	f011 f995 	bl	801424c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <main+0x132>
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	08003091 	.word	0x08003091

08002f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b09c      	sub	sp, #112	; 0x70
 8002f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f36:	224c      	movs	r2, #76	; 0x4c
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f01e fa16 	bl	802136c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2220      	movs	r2, #32
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f01e fa10 	bl	802136c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f005 f8d3 	bl	80080f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f52:	2300      	movs	r3, #0
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <SystemClock_Config+0xfc>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	4a33      	ldr	r2, [pc, #204]	; (8003028 <SystemClock_Config+0xfc>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <SystemClock_Config+0xfc>)
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	; (800302c <SystemClock_Config+0x100>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4a2e      	ldr	r2, [pc, #184]	; (800302c <SystemClock_Config+0x100>)
 8002f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f76:	6193      	str	r3, [r2, #24]
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <SystemClock_Config+0x100>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f84:	bf00      	nop
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <SystemClock_Config+0x100>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f92:	d1f8      	bne.n	8002f86 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002f94:	4b26      	ldr	r3, [pc, #152]	; (8003030 <SystemClock_Config+0x104>)
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	f023 0303 	bic.w	r3, r3, #3
 8002f9c:	4a24      	ldr	r2, [pc, #144]	; (8003030 <SystemClock_Config+0x104>)
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002fba:	2364      	movs	r3, #100	; 0x64
 8002fbc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002fca:	230c      	movs	r3, #12
 8002fcc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f005 f980 	bl	80082e0 <HAL_RCC_OscConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002fe6:	f000 fa19 	bl	800341c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fea:	233f      	movs	r3, #63	; 0x3f
 8002fec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002ffa:	2340      	movs	r3, #64	; 0x40
 8002ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002ffe:	2340      	movs	r3, #64	; 0x40
 8003000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003006:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	2102      	movs	r1, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fd93 	bl	8008b3c <HAL_RCC_ClockConfig>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800301c:	f000 f9fe 	bl	800341c <Error_Handler>
  }
}
 8003020:	bf00      	nop
 8003022:	3770      	adds	r7, #112	; 0x70
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	58000400 	.word	0x58000400
 800302c:	58024800 	.word	0x58024800
 8003030:	58024400 	.word	0x58024400

08003034 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0b0      	sub	sp, #192	; 0xc0
 8003038:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	22bc      	movs	r2, #188	; 0xbc
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f01e f993 	bl	802136c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003046:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800304a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800304c:	2301      	movs	r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8003050:	2312      	movs	r3, #18
 8003052:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003054:	2302      	movs	r3, #2
 8003056:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003058:	2302      	movs	r3, #2
 800305a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003060:	23c0      	movs	r3, #192	; 0xc0
 8003062:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003064:	2320      	movs	r3, #32
 8003066:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8003068:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800306e:	2300      	movs	r3, #0
 8003070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	4618      	mov	r0, r3
 8003078:	f006 f92e 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8003082:	f000 f9cb 	bl	800341c <Error_Handler>
  }
}
 8003086:	bf00      	nop
 8003088:	37c0      	adds	r7, #192	; 0xc0
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
//stepper driver interrupt
void MyFlagInterruptHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = L6474_CmdGetStatus(0);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fe fb54 	bl	8001744 <L6474_CmdGetStatus>
 800309c:	4603      	mov	r3, r0
 800309e:	80fb      	strh	r3, [r7, #6]

  /* Check HIZ flag: if set, power brigdes are disabled */
  if ((statusRegister & L6474_STATUS_HIZ) == L6474_STATUS_HIZ)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <MyFlagInterruptHandler+0x2a>
  {
    // HIZ state
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	4837      	ldr	r0, [pc, #220]	; (800318c <MyFlagInterruptHandler+0xfc>)
 80030ae:	f004 fc4c 	bl	800794a <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 80030b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030b6:	f001 facf 	bl	8004658 <HAL_Delay>

    // Action to be customized
  }

  /* Check direction bit */
  if ((statusRegister & L6474_STATUS_DIR) == L6474_STATUS_DIR)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <MyFlagInterruptHandler+0x46>
  {
    // Forward direction is set
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	4831      	ldr	r0, [pc, #196]	; (800318c <MyFlagInterruptHandler+0xfc>)
 80030c8:	f004 fc3f 	bl	800794a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80030cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030d0:	f001 fac2 	bl	8004658 <HAL_Delay>
 80030d4:	e007      	b.n	80030e6 <MyFlagInterruptHandler+0x56>
    // Action to be customized
  }
  else
  {
    // Backward direction is set
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	482c      	ldr	r0, [pc, #176]	; (800318c <MyFlagInterruptHandler+0xfc>)
 80030da:	f004 fc36 	bl	800794a <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 80030de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030e2:	f001 fab9 	bl	8004658 <HAL_Delay>
  }

  /* Check NOTPERF_CMD flag: if set, the command received by SPI can't be performed */
  /* This often occures when a command is sent to the L6474 */
  /* while it is in HIZ state */
  if ((statusRegister & L6474_STATUS_NOTPERF_CMD) == L6474_STATUS_NOTPERF_CMD)
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <MyFlagInterruptHandler+0x70>
  {
      // Command received by SPI can't be performed
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	4826      	ldr	r0, [pc, #152]	; (800318c <MyFlagInterruptHandler+0xfc>)
 80030f4:	f004 fc29 	bl	800794a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80030f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030fc:	f001 faac 	bl	8004658 <HAL_Delay>
     // Action to be customized
  }

  /* Check WRONG_CMD flag: if set, the command does not exist */
  if ((statusRegister & L6474_STATUS_WRONG_CMD) == L6474_STATUS_WRONG_CMD)
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <MyFlagInterruptHandler+0x8a>
  {
     //command received by SPI does not exist
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	481f      	ldr	r0, [pc, #124]	; (800318c <MyFlagInterruptHandler+0xfc>)
 800310e:	f004 fc1c 	bl	800794a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003116:	f001 fa9f 	bl	8004658 <HAL_Delay>
     // Action to be customized
  }

  /* Check UVLO flag: if not set, there is an undervoltage lock-out */
  if ((statusRegister & L6474_STATUS_UVLO) == 0)
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <MyFlagInterruptHandler+0xa4>
  {
     //undervoltage lock-out
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	4819      	ldr	r0, [pc, #100]	; (800318c <MyFlagInterruptHandler+0xfc>)
 8003128:	f004 fc0f 	bl	800794a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800312c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003130:	f001 fa92 	bl	8004658 <HAL_Delay>
     // Action to be customized
  }

  /* Check TH_WRN flag: if not set, the thermal warning threshold is reached */
  if ((statusRegister & L6474_STATUS_TH_WRN) == 0)
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <MyFlagInterruptHandler+0xbe>
  {
    //thermal warning threshold is reached
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	4812      	ldr	r0, [pc, #72]	; (800318c <MyFlagInterruptHandler+0xfc>)
 8003142:	f004 fc02 	bl	800794a <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 8003146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800314a:	f001 fa85 	bl	8004658 <HAL_Delay>
    // Action to be customized
  }

  /* Check TH_SHD flag: if not set, the thermal shut down threshold is reached */
  if ((statusRegister & L6474_STATUS_TH_SD) == 0)
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <MyFlagInterruptHandler+0xd8>
  {
    //thermal shut down threshold is reached
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	480c      	ldr	r0, [pc, #48]	; (800318c <MyFlagInterruptHandler+0xfc>)
 800315c:	f004 fbf5 	bl	800794a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003164:	f001 fa78 	bl	8004658 <HAL_Delay>
    // Action to be customized

  }

  /* Check OCD  flag: if not set, there is an overcurrent detection */
  if ((statusRegister & L6474_STATUS_OCD) == 0)
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d107      	bne.n	8003182 <MyFlagInterruptHandler+0xf2>
  {
    //overcurrent detection
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	4805      	ldr	r0, [pc, #20]	; (800318c <MyFlagInterruptHandler+0xfc>)
 8003176:	f004 fbe8 	bl	800794a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800317a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800317e:	f001 fa6b 	bl	8004658 <HAL_Delay>
    // Action to be customized
  }

}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	58020400 	.word	0x58020400

08003190 <HAL_ADC_LevelOutOfWindowCallback>:
// cpu temp interrupt
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	// do something in case of analog watchdog interrupts
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 800319e:	f004 fbbb 	bl	8007918 <HAL_GPIO_WritePin>
	HAL_ADC_Stop_IT(hadc);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f002 fa24 	bl	80055f0 <HAL_ADC_Stop_IT>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	58020400 	.word	0x58020400
 80031b4:	00000000 	.word	0x00000000

080031b8 <Screws_Speed_From_FlowRate>:

// returns the speed of Screws (mm/s) needed for a given flow_rate (mm^3/h) and syringe radius(mm)
float Screws_Speed_From_FlowRate(float flow_rate , float radius ){
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	ed87 0a01 	vstr	s0, [r7, #4]
 80031c2:	edc7 0a00 	vstr	s1, [r7]
	float section = radius*radius*3.14159;
 80031c6:	edd7 7a00 	vldr	s15, [r7]
 80031ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031d2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003210 <Screws_Speed_From_FlowRate+0x58>
 80031d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031de:	edc7 7a03 	vstr	s15, [r7, #12]
	flow_rate = flow_rate/3600;
 80031e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80031e6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003218 <Screws_Speed_From_FlowRate+0x60>
 80031ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ee:	edc7 7a01 	vstr	s15, [r7, #4]
	return flow_rate/section;
 80031f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80031f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80031fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031fe:	eef0 7a66 	vmov.f32	s15, s13
}
 8003202:	eeb0 0a67 	vmov.f32	s0, s15
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	f01b866e 	.word	0xf01b866e
 8003214:	400921f9 	.word	0x400921f9
 8003218:	45610000 	.word	0x45610000

0800321c <Motor_Speed>:
// returns the speed of Screws needed for a given fluid volume(m^3) , time(seconds) and radius
float Screws_Speed_From_Time_And_Volume(float time , float volume,uint8_t radius){
	return Screws_Speed_From_FlowRate(volume/time,radius) ;
}
// returns the motor speed needed (rps)
float Motor_Speed(float screwspeed){
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	ed87 0a01 	vstr	s0, [r7, #4]
	return screwspeed / (SCREWSTEP);
 8003226:	edd7 7a01 	vldr	s15, [r7, #4]
 800322a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800322e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003232:	eef0 7a66 	vmov.f32	s15, s13
}
 8003236:	eeb0 0a67 	vmov.f32	s0, s15
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <SyringeMove>:
float Time_Needed(float flow_rate, float volume_to_inject){
	flow_rate = flow_rate/3600;
	return (volume_to_inject/flow_rate);
}

void SyringeMove(float FlowRate , uint8_t radius){
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	ed87 0a01 	vstr	s0, [r7, #4]
 800324e:	4603      	mov	r3, r0
 8003250:	70fb      	strb	r3, [r7, #3]
	float screwspeed , motorspeed;
	int pps;
	screwspeed = Screws_Speed_From_FlowRate(FlowRate,radius);
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325c:	eef0 0a67 	vmov.f32	s1, s15
 8003260:	ed97 0a01 	vldr	s0, [r7, #4]
 8003264:	f7ff ffa8 	bl	80031b8 <Screws_Speed_From_FlowRate>
 8003268:	ed87 0a05 	vstr	s0, [r7, #20]
	motorspeed = Motor_Speed(screwspeed);
 800326c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003270:	f7ff ffd4 	bl	800321c <Motor_Speed>
 8003274:	ed87 0a04 	vstr	s0, [r7, #16]
	pps=motorspeed*200*16; // 1/16 microstep
 8003278:	edd7 7a04 	vldr	s15, [r7, #16]
 800327c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80032c0 <SyringeMove+0x7c>
 8003280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003284:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003290:	ee17 3a90 	vmov	r3, s15
 8003294:	60fb      	str	r3, [r7, #12]
	L6474_SetMaxSpeed(0,pps);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	b29b      	uxth	r3, r3
 800329a:	4619      	mov	r1, r3
 800329c:	2000      	movs	r0, #0
 800329e:	f7fe fe6b 	bl	8001f78 <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, pps);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7fe feb1 	bl	8002010 <L6474_SetMinSpeed>
	L6474_Run(0, FORWARD);
 80032ae:	2101      	movs	r1, #1
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fe fc9b 	bl	8001bec <L6474_Run>
	/*drv8825_setSpeedRPM(drv8825, motorspeed*60);
	drv8825_setEn(drv8825, EN_START);*/
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	43480000 	.word	0x43480000

080032c4 <SyringeStop>:
void SyringeStop(){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
		//drv8825_setEn(drv8825, EN_STOP);
	L6474_HardStop(0);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fe fc09 	bl	8001ae0 <L6474_HardStop>
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <map>:

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80032d2:	b490      	push	{r4, r7}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4604      	mov	r4, r0
 80032da:	4608      	mov	r0, r1
 80032dc:	4611      	mov	r1, r2
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	80fb      	strh	r3, [r7, #6]
 80032e4:	4603      	mov	r3, r0
 80032e6:	80bb      	strh	r3, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	88bb      	ldrh	r3, [r7, #4]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	8a39      	ldrh	r1, [r7, #16]
 80032f8:	883a      	ldrh	r2, [r7, #0]
 80032fa:	1a8a      	subs	r2, r1, r2
 80032fc:	fb03 f202 	mul.w	r2, r3, r2
 8003300:	8879      	ldrh	r1, [r7, #2]
 8003302:	88bb      	ldrh	r3, [r7, #4]
 8003304:	1acb      	subs	r3, r1, r3
 8003306:	fb92 f3f3 	sdiv	r3, r2, r3
 800330a:	b29a      	uxth	r2, r3
 800330c:	883b      	ldrh	r3, [r7, #0]
 800330e:	4413      	add	r3, r2
 8003310:	b29b      	uxth	r3, r3
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bc90      	pop	{r4, r7}
 800331a:	4770      	bx	lr

0800331c <position>:
uint16_t position(){
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af02      	add	r7, sp, #8
	uint16_t readValue,traveled_steps,count=0 ;
 8003322:	2300      	movs	r3, #0
 8003324:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 8003326:	481b      	ldr	r0, [pc, #108]	; (8003394 <position+0x78>)
 8003328:	f001 fe64 	bl	8004ff4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800332c:	2164      	movs	r1, #100	; 0x64
 800332e:	4819      	ldr	r0, [pc, #100]	; (8003394 <position+0x78>)
 8003330:	f001 ff2a 	bl	8005188 <HAL_ADC_PollForConversion>
	readValue = HAL_ADC_GetValue(&hadc1);
 8003334:	4817      	ldr	r0, [pc, #92]	; (8003394 <position+0x78>)
 8003336:	f002 f997 	bl	8005668 <HAL_ADC_GetValue>
 800333a:	4603      	mov	r3, r0
 800333c:	80bb      	strh	r3, [r7, #4]
	traveled_steps=map(readValue, 0, 65535,0 ,2000)+(count*2000); // 10tours * 200steps
 800333e:	88b8      	ldrh	r0, [r7, #4]
 8003340:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334c:	2100      	movs	r1, #0
 800334e:	f7ff ffc0 	bl	80032d2 <map>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4619      	mov	r1, r3
 800335a:	0149      	lsls	r1, r1, #5
 800335c:	1ac9      	subs	r1, r1, r3
 800335e:	0089      	lsls	r1, r1, #2
 8003360:	440b      	add	r3, r1
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	b29b      	uxth	r3, r3
 8003366:	4413      	add	r3, r2
 8003368:	807b      	strh	r3, [r7, #2]
	if(traveled_steps%2000==0)
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <position+0x7c>)
 800336e:	fba2 1203 	umull	r1, r2, r2, r3
 8003372:	09d2      	lsrs	r2, r2, #7
 8003374:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003378:	fb01 f202 	mul.w	r2, r1, r2
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <position+0x6e>
		count++;
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	3301      	adds	r3, #1
 8003388:	80fb      	strh	r3, [r7, #6]
	return traveled_steps;
 800338a:	887b      	ldrh	r3, [r7, #2]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000330 	.word	0x20000330
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <calculate_volume_left>:
float calculate_volume_left(uint16_t traveled_steps ,float flowrate ,float volume_to_inject ){
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80033a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80033ac:	81fb      	strh	r3, [r7, #14]
	float injectedVolume;
	injectedVolume = (traveled_steps / L6474_GetCurrentSpeed(0))*(flowrate/3600);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fe fb7e 	bl	8001ab0 <L6474_GetCurrentSpeed>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	89fb      	ldrh	r3, [r7, #14]
 80033ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c8:	edd7 6a02 	vldr	s13, [r7, #8]
 80033cc:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80033f4 <calculate_volume_left+0x58>
 80033d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d8:	edc7 7a05 	vstr	s15, [r7, #20]
	return (volume_to_inject-injectedVolume);
 80033dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80033e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80033e4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80033e8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	45610000 	.word	0x45610000

080033f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800340a:	f001 f905 	bl	8004618 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40000400 	.word	0x40000400

0800341c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003420:	b672      	cpsid	i
}
 8003422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003424:	e7fe      	b.n	8003424 <Error_Handler+0x8>
	...

08003428 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <MX_QUADSPI_Init+0x50>)
 800342e:	4a13      	ldr	r2, [pc, #76]	; (800347c <MX_QUADSPI_Init+0x54>)
 8003430:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <MX_QUADSPI_Init+0x50>)
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <MX_QUADSPI_Init+0x50>)
 800343a:	2201      	movs	r2, #1
 800343c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <MX_QUADSPI_Init+0x50>)
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <MX_QUADSPI_Init+0x50>)
 8003446:	2201      	movs	r2, #1
 8003448:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <MX_QUADSPI_Init+0x50>)
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <MX_QUADSPI_Init+0x50>)
 8003452:	2200      	movs	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <MX_QUADSPI_Init+0x50>)
 8003458:	2200      	movs	r2, #0
 800345a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <MX_QUADSPI_Init+0x50>)
 800345e:	2200      	movs	r2, #0
 8003460:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003462:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_QUADSPI_Init+0x50>)
 8003464:	f004 fe82 	bl	800816c <HAL_QSPI_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800346e:	f7ff ffd5 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000654 	.word	0x20000654
 800347c:	52005000 	.word	0x52005000

08003480 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b0ba      	sub	sp, #232	; 0xe8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003498:	f107 0318 	add.w	r3, r7, #24
 800349c:	22bc      	movs	r2, #188	; 0xbc
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f01d ff63 	bl	802136c <memset>
  if(qspiHandle->Instance==QUADSPI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a4c      	ldr	r2, [pc, #304]	; (80035dc <HAL_QSPI_MspInit+0x15c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	f040 8091 	bne.w	80035d4 <HAL_QSPI_MspInit+0x154>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80034b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034bc:	f107 0318 	add.w	r3, r7, #24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f005 ff09 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80034cc:	f7ff ffa6 	bl	800341c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 80034d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034d6:	4a42      	ldr	r2, [pc, #264]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034dc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80034e0:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 80034e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034ee:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 80034f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f4:	4a3a      	ldr	r2, [pc, #232]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 8003500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350c:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 800350e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003512:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800351c:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_QSPI_MspInit+0x160>)
 800351e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800352a:	23c0      	movs	r3, #192	; 0xc0
 800352c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003542:	2309      	movs	r3, #9
 8003544:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003548:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800354c:	4619      	mov	r1, r3
 800354e:	4825      	ldr	r0, [pc, #148]	; (80035e4 <HAL_QSPI_MspInit+0x164>)
 8003550:	f004 f81a 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003554:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003558:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800356e:	230a      	movs	r3, #10
 8003570:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003574:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003578:	4619      	mov	r1, r3
 800357a:	481a      	ldr	r0, [pc, #104]	; (80035e4 <HAL_QSPI_MspInit+0x164>)
 800357c:	f004 f804 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003580:	2304      	movs	r3, #4
 8003582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	2302      	movs	r3, #2
 8003588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003598:	2309      	movs	r3, #9
 800359a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4810      	ldr	r0, [pc, #64]	; (80035e8 <HAL_QSPI_MspInit+0x168>)
 80035a6:	f003 ffef 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80035c2:	230a      	movs	r3, #10
 80035c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4806      	ldr	r0, [pc, #24]	; (80035e8 <HAL_QSPI_MspInit+0x168>)
 80035d0:	f003 ffda 	bl	8007588 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80035d4:	bf00      	nop
 80035d6:	37e8      	adds	r7, #232	; 0xe8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	52005000 	.word	0x52005000
 80035e0:	58024400 	.word	0x58024400
 80035e4:	58021400 	.word	0x58021400
 80035e8:	58020400 	.word	0x58020400

080035ec <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <MX_SDMMC1_SD_Init+0x34>)
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <MX_SDMMC1_SD_Init+0x38>)
 80035f4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <MX_SDMMC1_SD_Init+0x34>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <MX_SDMMC1_SD_Init+0x34>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <MX_SDMMC1_SD_Init+0x34>)
 8003604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003608:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <MX_SDMMC1_SD_Init+0x34>)
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <MX_SDMMC1_SD_Init+0x34>)
 8003612:	2201      	movs	r2, #1
 8003614:	615a      	str	r2, [r3, #20]
  //hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	200006a0 	.word	0x200006a0
 8003624:	52007000 	.word	0x52007000

08003628 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b0ba      	sub	sp, #232	; 0xe8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003640:	f107 0318 	add.w	r3, r7, #24
 8003644:	22bc      	movs	r2, #188	; 0xbc
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f01d fe8f 	bl	802136c <memset>
  if(sdHandle->Instance==SDMMC1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3b      	ldr	r2, [pc, #236]	; (8003740 <HAL_SD_MspInit+0x118>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d16e      	bne.n	8003736 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800365c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800365e:	2300      	movs	r3, #0
 8003660:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003662:	f107 0318 	add.w	r3, r7, #24
 8003666:	4618      	mov	r0, r3
 8003668:	f005 fe36 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8003672:	f7ff fed3 	bl	800341c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_SD_MspInit+0x11c>)
 8003678:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800367c:	4a31      	ldr	r2, [pc, #196]	; (8003744 <HAL_SD_MspInit+0x11c>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003682:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003686:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <HAL_SD_MspInit+0x11c>)
 8003688:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800368c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_SD_MspInit+0x11c>)
 8003696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <HAL_SD_MspInit+0x11c>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_SD_MspInit+0x11c>)
 80036a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_SD_MspInit+0x11c>)
 80036b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_SD_MspInit+0x11c>)
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_SD_MspInit+0x11c>)
 80036c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80036d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80036d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	2303      	movs	r3, #3
 80036e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80036ea:	230c      	movs	r3, #12
 80036ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4814      	ldr	r0, [pc, #80]	; (8003748 <HAL_SD_MspInit+0x120>)
 80036f8:	f003 ff46 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036fc:	2304      	movs	r3, #4
 80036fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003714:	230c      	movs	r3, #12
 8003716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800371a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800371e:	4619      	mov	r1, r3
 8003720:	480a      	ldr	r0, [pc, #40]	; (800374c <HAL_SD_MspInit+0x124>)
 8003722:	f003 ff31 	bl	8007588 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2105      	movs	r1, #5
 800372a:	2031      	movs	r0, #49	; 0x31
 800372c:	f003 fd08 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003730:	2031      	movs	r0, #49	; 0x31
 8003732:	f003 fd1f 	bl	8007174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003736:	bf00      	nop
 8003738:	37e8      	adds	r7, #232	; 0xe8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	52007000 	.word	0x52007000
 8003744:	58024400 	.word	0x58024400
 8003748:	58020800 	.word	0x58020800
 800374c:	58020c00 	.word	0x58020c00

08003750 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <MX_SPI2_Init+0xa4>)
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <MX_SPI2_Init+0xa8>)
 8003758:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <MX_SPI2_Init+0xa4>)
 800375c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003760:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <MX_SPI2_Init+0xa4>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <MX_SPI2_Init+0xa4>)
 800376a:	221f      	movs	r2, #31
 800376c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800376e:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <MX_SPI2_Init+0xa4>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <MX_SPI2_Init+0xa4>)
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800377a:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <MX_SPI2_Init+0xa4>)
 800377c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003780:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003782:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <MX_SPI2_Init+0xa4>)
 8003784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003788:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <MX_SPI2_Init+0xa4>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <MX_SPI2_Init+0xa4>)
 8003792:	2200      	movs	r2, #0
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <MX_SPI2_Init+0xa4>)
 8003798:	2200      	movs	r2, #0
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <MX_SPI2_Init+0xa4>)
 800379e:	2200      	movs	r2, #0
 80037a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <MX_SPI2_Init+0xa4>)
 80037e2:	f009 fc63 	bl	800d0ac <HAL_SPI_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80037ec:	f7ff fe16 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	2000071c 	.word	0x2000071c
 80037f8:	40003800 	.word	0x40003800

080037fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b0b8      	sub	sp, #224	; 0xe0
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003814:	f107 0310 	add.w	r3, r7, #16
 8003818:	22bc      	movs	r2, #188	; 0xbc
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f01d fda5 	bl	802136c <memset>
  if(spiHandle->Instance==SPI2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_SPI_MspInit+0xc0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d142      	bne.n	80038b2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800382c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003830:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003832:	2300      	movs	r3, #0
 8003834:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003836:	f107 0310 	add.w	r3, r7, #16
 800383a:	4618      	mov	r0, r3
 800383c:	f005 fd4c 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003846:	f7ff fde9 	bl	800341c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_SPI_MspInit+0xc4>)
 800384c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <HAL_SPI_MspInit+0xc4>)
 8003852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_SPI_MspInit+0xc4>)
 800385c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_SPI_MspInit+0xc4>)
 800386a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386e:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <HAL_SPI_MspInit+0xc4>)
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_SPI_MspInit+0xc4>)
 800387a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003886:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800388a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389a:	2300      	movs	r3, #0
 800389c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038a0:	2305      	movs	r3, #5
 80038a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038aa:	4619      	mov	r1, r3
 80038ac:	4805      	ldr	r0, [pc, #20]	; (80038c4 <HAL_SPI_MspInit+0xc8>)
 80038ae:	f003 fe6b 	bl	8007588 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80038b2:	bf00      	nop
 80038b4:	37e0      	adds	r7, #224	; 0xe0
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40003800 	.word	0x40003800
 80038c0:	58024400 	.word	0x58024400
 80038c4:	58020400 	.word	0x58020400

080038c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_MspInit+0x38>)
 80038d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038d4:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_MspInit+0x38>)
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_MspInit+0x38>)
 80038e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	210f      	movs	r1, #15
 80038f0:	f06f 0001 	mvn.w	r0, #1
 80038f4:	f003 fc24 	bl	8007140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	58024400 	.word	0x58024400

08003904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b090      	sub	sp, #64	; 0x40
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b0f      	cmp	r3, #15
 8003910:	d827      	bhi.n	8003962 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003912:	2200      	movs	r2, #0
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	201d      	movs	r0, #29
 8003918:	f003 fc12 	bl	8007140 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800391c:	201d      	movs	r0, #29
 800391e:	f003 fc29 	bl	8007174 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003922:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_InitTick+0xc4>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_InitTick+0xc8>)
 800392a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800392e:	4a27      	ldr	r2, [pc, #156]	; (80039cc <HAL_InitTick+0xc8>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003938:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_InitTick+0xc8>)
 800393a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003946:	f107 0210 	add.w	r2, r7, #16
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f005 fc7f 	bl	8009254 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <HAL_InitTick+0x6a>
 8003960:	e001      	b.n	8003966 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e02b      	b.n	80039be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003966:	f005 fc49 	bl	80091fc <HAL_RCC_GetPCLK1Freq>
 800396a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800396c:	e004      	b.n	8003978 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800396e:	f005 fc45 	bl	80091fc <HAL_RCC_GetPCLK1Freq>
 8003972:	4603      	mov	r3, r0
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <HAL_InitTick+0xcc>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	0c9b      	lsrs	r3, r3, #18
 8003982:	3b01      	subs	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_InitTick+0xd0>)
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_InitTick+0xd4>)
 800398a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_InitTick+0xd0>)
 800398e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003992:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003994:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_InitTick+0xd0>)
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_InitTick+0xd0>)
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_InitTick+0xd0>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80039a6:	480b      	ldr	r0, [pc, #44]	; (80039d4 <HAL_InitTick+0xd0>)
 80039a8:	f00a f85b 	bl	800da62 <HAL_TIM_Base_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80039b2:	4808      	ldr	r0, [pc, #32]	; (80039d4 <HAL_InitTick+0xd0>)
 80039b4:	f00a f8ac 	bl	800db10 <HAL_TIM_Base_Start_IT>
 80039b8:	4603      	mov	r3, r0
 80039ba:	e000      	b.n	80039be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3740      	adds	r7, #64	; 0x40
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008
 80039cc:	58024400 	.word	0x58024400
 80039d0:	431bde83 	.word	0x431bde83
 80039d4:	200007a4 	.word	0x200007a4
 80039d8:	40000400 	.word	0x40000400

080039dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039e0:	e7fe      	b.n	80039e0 <NMI_Handler+0x4>

080039e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e6:	e7fe      	b.n	80039e6 <HardFault_Handler+0x4>

080039e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ec:	e7fe      	b.n	80039ec <MemManage_Handler+0x4>

080039ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039f2:	e7fe      	b.n	80039f2 <BusFault_Handler+0x4>

080039f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <UsageFault_Handler+0x4>

080039fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003a0c:	2010      	movs	r0, #16
 8003a0e:	f003 ffb6 	bl	800797e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <TIM2_IRQHandler+0x10>)
 8003a1e:	f00a fb41 	bl	800e0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200007f4 	.word	0x200007f4

08003a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <TIM3_IRQHandler+0x10>)
 8003a32:	f00a fb37 	bl	800e0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200007a4 	.word	0x200007a4

08003a40 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <SDMMC1_IRQHandler+0x10>)
 8003a46:	f008 f83d 	bl	800bac4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200006a0 	.word	0x200006a0

08003a54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <LTDC_IRQHandler+0x10>)
 8003a5a:	f004 f885 	bl	8007b68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200005ac 	.word	0x200005ac

08003a68 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <ADC3_IRQHandler+0x10>)
 8003a6e:	f001 fe09 	bl	8005684 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000394 	.word	0x20000394

08003a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	return 1;
 8003a80:	2301      	movs	r3, #1
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_kill>:

int _kill(int pid, int sig)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a96:	f01d fb15 	bl	80210c4 <__errno>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2216      	movs	r2, #22
 8003a9e:	601a      	str	r2, [r3, #0]
	return -1;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_exit>:

void _exit (int status)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ffe7 	bl	8003a8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003abe:	e7fe      	b.n	8003abe <_exit+0x12>

08003ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e00a      	b.n	8003ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ad2:	f3af 8000 	nop.w
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	60ba      	str	r2, [r7, #8]
 8003ade:	b2ca      	uxtb	r2, r1
 8003ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dbf0      	blt.n	8003ad2 <_read+0x12>
	}

return len;
 8003af0:	687b      	ldr	r3, [r7, #4]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e009      	b.n	8003b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	60ba      	str	r2, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	dbf1      	blt.n	8003b0c <_write+0x12>
	}
	return len;
 8003b28:	687b      	ldr	r3, [r7, #4]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_close>:

int _close(int file)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
	return -1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <_isatty>:

int _isatty(int file)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
	return 1;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <_sbrk+0x5c>)
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <_sbrk+0x60>)
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <_sbrk+0x64>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <_sbrk+0x64>)
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <_sbrk+0x68>)
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <_sbrk+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d207      	bcs.n	8003bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bcc:	f01d fa7a 	bl	80210c4 <__errno>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	220c      	movs	r2, #12
 8003bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bda:	e009      	b.n	8003bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <_sbrk+0x64>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003be2:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <_sbrk+0x64>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <_sbrk+0x64>)
 8003bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20020000 	.word	0x20020000
 8003bfc:	00000400 	.word	0x00000400
 8003c00:	200007f0 	.word	0x200007f0
 8003c04:	20007518 	.word	0x20007518

08003c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c0c:	4b37      	ldr	r3, [pc, #220]	; (8003cec <SystemInit+0xe4>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	4a36      	ldr	r2, [pc, #216]	; (8003cec <SystemInit+0xe4>)
 8003c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c1c:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <SystemInit+0xe8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d807      	bhi.n	8003c38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <SystemInit+0xe8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 030f 	bic.w	r3, r3, #15
 8003c30:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <SystemInit+0xe8>)
 8003c32:	f043 0307 	orr.w	r3, r3, #7
 8003c36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <SystemInit+0xec>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <SystemInit+0xec>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <SystemInit+0xec>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c4a:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <SystemInit+0xec>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4929      	ldr	r1, [pc, #164]	; (8003cf4 <SystemInit+0xec>)
 8003c50:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <SystemInit+0xf0>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <SystemInit+0xe8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c62:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <SystemInit+0xe8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 030f 	bic.w	r3, r3, #15
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <SystemInit+0xe8>)
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <SystemInit+0xec>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003c78:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <SystemInit+0xec>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <SystemInit+0xec>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <SystemInit+0xec>)
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <SystemInit+0xf4>)
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <SystemInit+0xec>)
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <SystemInit+0xf8>)
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <SystemInit+0xec>)
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <SystemInit+0xfc>)
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003c96:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <SystemInit+0xec>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <SystemInit+0xec>)
 8003c9e:	4a19      	ldr	r2, [pc, #100]	; (8003d04 <SystemInit+0xfc>)
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <SystemInit+0xec>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <SystemInit+0xec>)
 8003caa:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <SystemInit+0xfc>)
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <SystemInit+0xec>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <SystemInit+0xec>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <SystemInit+0xec>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <SystemInit+0xec>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <SystemInit+0x100>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <SystemInit+0x104>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd2:	d202      	bcs.n	8003cda <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <SystemInit+0x108>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <SystemInit+0x10c>)
 8003cdc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ce0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00
 8003cf0:	52002000 	.word	0x52002000
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003cfc:	02020200 	.word	0x02020200
 8003d00:	01ff0000 	.word	0x01ff0000
 8003d04:	01010280 	.word	0x01010280
 8003d08:	5c001000 	.word	0x5c001000
 8003d0c:	ffff0000 	.word	0xffff0000
 8003d10:	51008108 	.word	0x51008108
 8003d14:	52004000 	.word	0x52004000

08003d18 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08e      	sub	sp, #56	; 0x38
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d38:	463b      	mov	r3, r7
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	609a      	str	r2, [r3, #8]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	611a      	str	r2, [r3, #16]
 8003d46:	615a      	str	r2, [r3, #20]
 8003d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8003d52:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5a:	4b2a      	ldr	r3, [pc, #168]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10240;
 8003d60:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d62:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003d66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d6e:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d74:	4823      	ldr	r0, [pc, #140]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d76:	f009 fe74 	bl	800da62 <HAL_TIM_Base_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003d80:	f7ff fb4c 	bl	800341c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d8e:	4619      	mov	r1, r3
 8003d90:	481c      	ldr	r0, [pc, #112]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003d92:	f00a fbbb 	bl	800e50c <HAL_TIM_ConfigClockSource>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003d9c:	f7ff fb3e 	bl	800341c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003da0:	4818      	ldr	r0, [pc, #96]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003da2:	f009 ff2d 	bl	800dc00 <HAL_TIM_PWM_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003dac:	f7ff fb36 	bl	800341c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003db8:	f107 031c 	add.w	r3, r7, #28
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4811      	ldr	r0, [pc, #68]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003dc0:	f00b f8f8 	bl	800efb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003dca:	f7ff fb27 	bl	800341c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dce:	2360      	movs	r3, #96	; 0x60
 8003dd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dde:	463b      	mov	r3, r7
 8003de0:	2200      	movs	r2, #0
 8003de2:	4619      	mov	r1, r3
 8003de4:	4807      	ldr	r0, [pc, #28]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003de6:	f00a fa7d 	bl	800e2e4 <HAL_TIM_PWM_ConfigChannel>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003df0:	f7ff fb14 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003df4:	4803      	ldr	r0, [pc, #12]	; (8003e04 <MX_TIM2_Init+0xec>)
 8003df6:	f000 f82d 	bl	8003e54 <HAL_TIM_MspPostInit>

}
 8003dfa:	bf00      	nop
 8003dfc:	3738      	adds	r7, #56	; 0x38
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200007f4 	.word	0x200007f4

08003e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d116      	bne.n	8003e48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <HAL_TIM_Base_MspInit+0x48>)
 8003e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e20:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <HAL_TIM_Base_MspInit+0x48>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_TIM_Base_MspInit+0x48>)
 8003e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2105      	movs	r1, #5
 8003e3c:	201c      	movs	r0, #28
 8003e3e:	f003 f97f 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e42:	201c      	movs	r0, #28
 8003e44:	f003 f996 	bl	8007174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	58024400 	.word	0x58024400

08003e54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d11f      	bne.n	8003eb6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_TIM_MspPostInit+0x6c>)
 8003e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e7c:	4a10      	ldr	r2, [pc, #64]	; (8003ec0 <HAL_TIM_MspPostInit+0x6c>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_TIM_MspPostInit+0x6c>)
 8003e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4804      	ldr	r0, [pc, #16]	; (8003ec4 <HAL_TIM_MspPostInit+0x70>)
 8003eb2:	f003 fb69 	bl	8007588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003eb6:	bf00      	nop
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	58020000 	.word	0x58020000

08003ec8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003ece:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <MX_USART3_UART_Init+0x94>)
 8003ed0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003ed2:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003ed4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ed8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eda:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003eee:	220c      	movs	r2, #12
 8003ef0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ef2:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef8:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003efe:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f10:	4811      	ldr	r0, [pc, #68]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003f12:	f00b f8fb 	bl	800f10c <HAL_UART_Init>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003f1c:	f7ff fa7e 	bl	800341c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f20:	2100      	movs	r1, #0
 8003f22:	480d      	ldr	r0, [pc, #52]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003f24:	f00c f92e 	bl	8010184 <HAL_UARTEx_SetTxFifoThreshold>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003f2e:	f7ff fa75 	bl	800341c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f32:	2100      	movs	r1, #0
 8003f34:	4808      	ldr	r0, [pc, #32]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003f36:	f00c f963 	bl	8010200 <HAL_UARTEx_SetRxFifoThreshold>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003f40:	f7ff fa6c 	bl	800341c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003f44:	4804      	ldr	r0, [pc, #16]	; (8003f58 <MX_USART3_UART_Init+0x90>)
 8003f46:	f00c f8e4 	bl	8010112 <HAL_UARTEx_DisableFifoMode>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003f50:	f7ff fa64 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000840 	.word	0x20000840
 8003f5c:	40004800 	.word	0x40004800

08003f60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b0b8      	sub	sp, #224	; 0xe0
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	22bc      	movs	r2, #188	; 0xbc
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f01d f9f3 	bl	802136c <memset>
  if(uartHandle->Instance==USART3)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	; (8004020 <HAL_UART_MspInit+0xc0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d142      	bne.n	8004016 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f90:	2302      	movs	r3, #2
 8003f92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f9a:	f107 0310 	add.w	r3, r7, #16
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f005 f99a 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003faa:	f7ff fa37 	bl	800341c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_UART_MspInit+0xc4>)
 8003fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <HAL_UART_MspInit+0xc4>)
 8003fb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fbe:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_UART_MspInit+0xc4>)
 8003fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fcc:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_UART_MspInit+0xc4>)
 8003fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd2:	4a14      	ldr	r2, [pc, #80]	; (8004024 <HAL_UART_MspInit+0xc4>)
 8003fd4:	f043 0308 	orr.w	r3, r3, #8
 8003fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_UART_MspInit+0xc4>)
 8003fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004004:	2307      	movs	r3, #7
 8004006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800400a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800400e:	4619      	mov	r1, r3
 8004010:	4805      	ldr	r0, [pc, #20]	; (8004028 <HAL_UART_MspInit+0xc8>)
 8004012:	f003 fab9 	bl	8007588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004016:	bf00      	nop
 8004018:	37e0      	adds	r7, #224	; 0xe0
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40004800 	.word	0x40004800
 8004024:	58024400 	.word	0x58024400
 8004028:	58020c00 	.word	0x58020c00

0800402c <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fb0f 	bl	8004658 <HAL_Delay>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004046:	b672      	cpsid	i
}
 8004048:	bf00      	nop
  __disable_irq();
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8004058:	b662      	cpsie	i
}
 800405a:	bf00      	nop
  __enable_irq();
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d16a      	bne.n	800414e <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8004078:	4b52      	ldr	r3, [pc, #328]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 800407a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800407e:	4a51      	ldr	r2, [pc, #324]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004088:	4b4e      	ldr	r3, [pc, #312]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 800408a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 8004096:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 8004098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409c:	4a49      	ldr	r2, [pc, #292]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 80040a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80040b4:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 80040b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ba:	4a42      	ldr	r2, [pc, #264]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040c4:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <L6474_Board_GpioInit+0x15c>)
 80040c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 80040d2:	2310      	movs	r3, #16
 80040d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80040da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040dc:	2301      	movs	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80040e0:	2301      	movs	r3, #1
 80040e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 80040e4:	f107 0314 	add.w	r3, r7, #20
 80040e8:	4619      	mov	r1, r3
 80040ea:	4837      	ldr	r0, [pc, #220]	; (80041c8 <L6474_Board_GpioInit+0x160>)
 80040ec:	f003 fa4c 	bl	8007588 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 80040f0:	2200      	movs	r2, #0
 80040f2:	2105      	movs	r1, #5
 80040f4:	200a      	movs	r0, #10
 80040f6:	f003 f823 	bl	8007140 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 80040fa:	200a      	movs	r0, #10
 80040fc:	f003 f83a 	bl	8007174 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8004100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004106:	2301      	movs	r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800410e:	2301      	movs	r3, #1
 8004110:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	4619      	mov	r1, r3
 8004118:	482c      	ldr	r0, [pc, #176]	; (80041cc <L6474_Board_GpioInit+0x164>)
 800411a:	f003 fa35 	bl	8007588 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 800411e:	2201      	movs	r2, #1
 8004120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004124:	4829      	ldr	r0, [pc, #164]	; (80041cc <L6474_Board_GpioInit+0x164>)
 8004126:	f003 fbf7 	bl	8007918 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 800412a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004130:	2301      	movs	r3, #1
 8004132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004138:	2301      	movs	r3, #1
 800413a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4619      	mov	r1, r3
 8004142:	4823      	ldr	r0, [pc, #140]	; (80041d0 <L6474_Board_GpioInit+0x168>)
 8004144:	f003 fa20 	bl	8007588 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8004148:	2000      	movs	r0, #0
 800414a:	f000 f947 	bl	80043dc <L6474_Board_Reset>
  }
  
  switch (deviceId)
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d024      	beq.n	800419e <L6474_Board_GpioInit+0x136>
 8004154:	2b02      	cmp	r3, #2
 8004156:	dc31      	bgt.n	80041bc <L6474_Board_GpioInit+0x154>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <L6474_Board_GpioInit+0xfa>
 800415c:	2b01      	cmp	r3, #1
 800415e:	d00f      	beq.n	8004180 <L6474_Board_GpioInit+0x118>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8004160:	e02c      	b.n	80041bc <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8004162:	2308      	movs	r3, #8
 8004164:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004166:	2301      	movs	r3, #1
 8004168:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800416e:	2301      	movs	r3, #1
 8004170:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	4619      	mov	r1, r3
 8004178:	4815      	ldr	r0, [pc, #84]	; (80041d0 <L6474_Board_GpioInit+0x168>)
 800417a:	f003 fa05 	bl	8007588 <HAL_GPIO_Init>
      break;
 800417e:	e01d      	b.n	80041bc <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8004180:	2320      	movs	r3, #32
 8004182:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004184:	2301      	movs	r3, #1
 8004186:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800418c:	2301      	movs	r3, #1
 800418e:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	4619      	mov	r1, r3
 8004196:	480d      	ldr	r0, [pc, #52]	; (80041cc <L6474_Board_GpioInit+0x164>)
 8004198:	f003 f9f6 	bl	8007588 <HAL_GPIO_Init>
      break;
 800419c:	e00e      	b.n	80041bc <L6474_Board_GpioInit+0x154>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 800419e:	2310      	movs	r3, #16
 80041a0:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80041aa:	2301      	movs	r3, #1
 80041ac:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 80041ae:	f107 0314 	add.w	r3, r7, #20
 80041b2:	4619      	mov	r1, r3
 80041b4:	4805      	ldr	r0, [pc, #20]	; (80041cc <L6474_Board_GpioInit+0x164>)
 80041b6:	f003 f9e7 	bl	8007588 <HAL_GPIO_Init>
        break;
 80041ba:	bf00      	nop
}
 80041bc:	bf00      	nop
 80041be:	3728      	adds	r7, #40	; 0x28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58024400 	.word	0x58024400
 80041c8:	58021c00 	.word	0x58021c00
 80041cc:	58020400 	.word	0x58020400
 80041d0:	58022000 	.word	0x58022000

080041d4 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80041de:	f004 fe63 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 80041e2:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	029b      	lsls	r3, r3, #10
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <L6474_Board_Pwm1SetFreq+0x48>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80041fa:	4a08      	ldr	r2, [pc, #32]	; (800421c <L6474_Board_Pwm1SetFreq+0x48>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <L6474_Board_Pwm1SetFreq+0x48>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	0852      	lsrs	r2, r2, #1
 8004208:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 800420a:	2100      	movs	r1, #0
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <L6474_Board_Pwm1SetFreq+0x48>)
 800420e:	f009 fdef 	bl	800ddf0 <HAL_TIM_PWM_Start_IT>
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000958 	.word	0x20000958

08004220 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800422a:	f004 fe3d 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 800422e:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	029b      	lsls	r3, r3, #10
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <L6474_Board_Pwm2SetFreq+0x48>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <L6474_Board_Pwm2SetFreq+0x48>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <L6474_Board_Pwm2SetFreq+0x48>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	0852      	lsrs	r2, r2, #1
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8004256:	2104      	movs	r1, #4
 8004258:	4803      	ldr	r0, [pc, #12]	; (8004268 <L6474_Board_Pwm2SetFreq+0x48>)
 800425a:	f009 fdc9 	bl	800ddf0 <HAL_TIM_PWM_Start_IT>
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200009a4 	.word	0x200009a4

0800426c <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004276:	f004 fe17 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 800427a:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	02db      	lsls	r3, r3, #11
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <L6474_Board_Pwm3SetFreq+0x48>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	62da      	str	r2, [r3, #44]	; 0x2c
 8004292:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <L6474_Board_Pwm3SetFreq+0x48>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <L6474_Board_Pwm3SetFreq+0x48>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	0852      	lsrs	r2, r2, #1
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 80042a2:	2108      	movs	r1, #8
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <L6474_Board_Pwm3SetFreq+0x48>)
 80042a6:	f009 fda3 	bl	800ddf0 <HAL_TIM_PWM_Start_IT>
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200009f0 	.word	0x200009f0

080042b8 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d00a      	beq.n	80042de <L6474_Board_PwmInit+0x26>
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d011      	beq.n	80042f0 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <L6474_Board_PwmInit+0x9c>)
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 80042d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042d6:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 80042d8:	2300      	movs	r3, #0
 80042da:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 80042dc:	e010      	b.n	8004300 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <L6474_Board_PwmInit+0xa0>)
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 80042e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042e8:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 80042ea:	2304      	movs	r3, #4
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042ee:	e007      	b.n	8004300 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 80042f0:	4b1a      	ldr	r3, [pc, #104]	; (800435c <L6474_Board_PwmInit+0xa4>)
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <L6474_Board_PwmInit+0xa8>)
 80042f8:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 80042fa:	2308      	movs	r3, #8
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042fe:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004306:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 8004314:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004316:	f009 fc73 	bl	800dc00 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800431a:	2360      	movs	r3, #96	; 0x60
 800431c:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 800432a:	f107 0314 	add.w	r3, r7, #20
 800432e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004330:	4619      	mov	r1, r3
 8004332:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004334:	f009 ffd6 	bl	800e2e4 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4619      	mov	r1, r3
 8004346:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004348:	f00a fe34 	bl	800efb4 <HAL_TIMEx_MasterConfigSynchronization>
}
 800434c:	bf00      	nop
 800434e:	3738      	adds	r7, #56	; 0x38
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000958 	.word	0x20000958
 8004358:	200009a4 	.word	0x200009a4
 800435c:	200009f0 	.word	0x200009f0
 8004360:	40000800 	.word	0x40000800

08004364 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d010      	beq.n	8004396 <L6474_Board_PwmStop+0x32>
 8004374:	2b02      	cmp	r3, #2
 8004376:	dc13      	bgt.n	80043a0 <L6474_Board_PwmStop+0x3c>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <L6474_Board_PwmStop+0x1e>
 800437c:	2b01      	cmp	r3, #1
 800437e:	d005      	beq.n	800438c <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8004380:	e00e      	b.n	80043a0 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8004382:	2100      	movs	r1, #0
 8004384:	4809      	ldr	r0, [pc, #36]	; (80043ac <L6474_Board_PwmStop+0x48>)
 8004386:	f009 fc9d 	bl	800dcc4 <HAL_TIM_PWM_Stop>
      break;
 800438a:	e00a      	b.n	80043a2 <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 800438c:	2104      	movs	r1, #4
 800438e:	4808      	ldr	r0, [pc, #32]	; (80043b0 <L6474_Board_PwmStop+0x4c>)
 8004390:	f009 fc98 	bl	800dcc4 <HAL_TIM_PWM_Stop>
      break;
 8004394:	e005      	b.n	80043a2 <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 8004396:	2108      	movs	r1, #8
 8004398:	4806      	ldr	r0, [pc, #24]	; (80043b4 <L6474_Board_PwmStop+0x50>)
 800439a:	f009 fc93 	bl	800dcc4 <HAL_TIM_PWM_Stop>
      break;
 800439e:	e000      	b.n	80043a2 <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 80043a0:	bf00      	nop
  }
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000958 	.word	0x20000958
 80043b0:	200009a4 	.word	0x200009a4
 80043b4:	200009f0 	.word	0x200009f0

080043b8 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_SET);
 80043c2:	2201      	movs	r2, #1
 80043c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043c8:	4803      	ldr	r0, [pc, #12]	; (80043d8 <L6474_Board_ReleaseReset+0x20>)
 80043ca:	f003 faa5 	bl	8007918 <HAL_GPIO_WritePin>
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	58022000 	.word	0x58022000

080043dc <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 80043e6:	2200      	movs	r2, #0
 80043e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ec:	4803      	ldr	r0, [pc, #12]	; (80043fc <L6474_Board_Reset+0x20>)
 80043ee:	f003 fa93 	bl	8007918 <HAL_GPIO_WritePin>
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	58022000 	.word	0x58022000

08004400 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	460a      	mov	r2, r1
 800440a:	71fb      	strb	r3, [r7, #7]
 800440c:	4613      	mov	r3, r2
 800440e:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d006      	beq.n	8004424 <L6474_Board_SetDirectionGpio+0x24>
 8004416:	2b02      	cmp	r3, #2
 8004418:	dc19      	bgt.n	800444e <L6474_Board_SetDirectionGpio+0x4e>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <L6474_Board_SetDirectionGpio+0x40>
 800441e:	2b01      	cmp	r3, #1
 8004420:	d007      	beq.n	8004432 <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 8004422:	e014      	b.n	800444e <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8004424:	79bb      	ldrb	r3, [r7, #6]
 8004426:	461a      	mov	r2, r3
 8004428:	2110      	movs	r1, #16
 800442a:	480b      	ldr	r0, [pc, #44]	; (8004458 <L6474_Board_SetDirectionGpio+0x58>)
 800442c:	f003 fa74 	bl	8007918 <HAL_GPIO_WritePin>
      break;
 8004430:	e00d      	b.n	800444e <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 8004432:	79bb      	ldrb	r3, [r7, #6]
 8004434:	461a      	mov	r2, r3
 8004436:	2120      	movs	r1, #32
 8004438:	4807      	ldr	r0, [pc, #28]	; (8004458 <L6474_Board_SetDirectionGpio+0x58>)
 800443a:	f003 fa6d 	bl	8007918 <HAL_GPIO_WritePin>
      break;
 800443e:	e006      	b.n	800444e <L6474_Board_SetDirectionGpio+0x4e>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8004440:	79bb      	ldrb	r3, [r7, #6]
 8004442:	461a      	mov	r2, r3
 8004444:	2108      	movs	r1, #8
 8004446:	4805      	ldr	r0, [pc, #20]	; (800445c <L6474_Board_SetDirectionGpio+0x5c>)
 8004448:	f003 fa66 	bl	8007918 <HAL_GPIO_WritePin>
      break;
 800444c:	bf00      	nop
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	58020400 	.word	0x58020400
 800445c:	58022000 	.word	0x58022000

08004460 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <L6474_Board_SpiInit+0x70>)
 800446a:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 800446e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004472:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 800447a:	4b14      	ldr	r3, [pc, #80]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 800447c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004480:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 8004484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004488:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 800448c:	2200      	movs	r2, #0
 800448e:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8004490:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 8004492:	2207      	movs	r2, #7
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 8004498:	2207      	movs	r2, #7
 800449a:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 800449e:	2200      	movs	r2, #0
 80044a0:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 80044a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044a8:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 80044b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80044b6:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 80044b8:	4804      	ldr	r0, [pc, #16]	; (80044cc <L6474_Board_SpiInit+0x6c>)
 80044ba:	f008 fdf7 	bl	800d0ac <HAL_SPI_Init>
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 80044c2:	79fb      	ldrb	r3, [r7, #7]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200008d0 	.word	0x200008d0
 80044d0:	40003800 	.word	0x40003800

080044d4 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 80044e2:	2200      	movs	r2, #0
 80044e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044e8:	4816      	ldr	r0, [pc, #88]	; (8004544 <L6474_Board_SpiWriteBytes+0x70>)
 80044ea:	f003 fa15 	bl	8007918 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	e016      	b.n	8004522 <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 80044f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2301      	movs	r3, #1
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	4811      	ldr	r0, [pc, #68]	; (8004548 <L6474_Board_SpiWriteBytes+0x74>)
 8004502:	f008 fed9 	bl	800d2b8 <HAL_SPI_TransmitReceive>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3301      	adds	r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3301      	adds	r3, #1
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	429a      	cmp	r2, r3
 8004528:	d3e4      	bcc.n	80044f4 <L6474_Board_SpiWriteBytes+0x20>
 800452a:	e000      	b.n	800452e <L6474_Board_SpiWriteBytes+0x5a>
      break;
 800452c:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 800452e:	2201      	movs	r2, #1
 8004530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004534:	4803      	ldr	r0, [pc, #12]	; (8004544 <L6474_Board_SpiWriteBytes+0x70>)
 8004536:	f003 f9ef 	bl	8007918 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 800453a:	7dfb      	ldrb	r3, [r7, #23]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58020400 	.word	0x58020400
 8004548:	200008d0 	.word	0x200008d0

0800454c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800454c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004550:	f7ff fb5a 	bl	8003c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004554:	480c      	ldr	r0, [pc, #48]	; (8004588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004556:	490d      	ldr	r1, [pc, #52]	; (800458c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004558:	4a0d      	ldr	r2, [pc, #52]	; (8004590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800455a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800455c:	e002      	b.n	8004564 <LoopCopyDataInit>

0800455e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800455e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004562:	3304      	adds	r3, #4

08004564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004568:	d3f9      	bcc.n	800455e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456a:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800456c:	4c0a      	ldr	r4, [pc, #40]	; (8004598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800456e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004570:	e001      	b.n	8004576 <LoopFillZerobss>

08004572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004574:	3204      	adds	r2, #4

08004576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004578:	d3fb      	bcc.n	8004572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800457a:	f01c feb1 	bl	80212e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800457e:	f7fe fc37 	bl	8002df0 <main>
  bx  lr
 8004582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800458c:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8004590:	0803dbec 	.word	0x0803dbec
  ldr r2, =_sbss
 8004594:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8004598:	20007514 	.word	0x20007514

0800459c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800459c:	e7fe      	b.n	800459c <ADC_IRQHandler>
	...

080045a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a6:	2003      	movs	r0, #3
 80045a8:	f002 fdbf 	bl	800712a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045ac:	f004 fc7c 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <HAL_Init+0x68>)
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	4913      	ldr	r1, [pc, #76]	; (800460c <HAL_Init+0x6c>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
 80045c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <HAL_Init+0x68>)
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	4a0e      	ldr	r2, [pc, #56]	; (800460c <HAL_Init+0x6c>)
 80045d4:	5cd3      	ldrb	r3, [r2, r3]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <HAL_Init+0x70>)
 80045e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045e4:	4a0b      	ldr	r2, [pc, #44]	; (8004614 <HAL_Init+0x74>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045ea:	2000      	movs	r0, #0
 80045ec:	f7ff f98a 	bl	8003904 <HAL_InitTick>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e002      	b.n	8004600 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80045fa:	f7ff f965 	bl	80038c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	58024400 	.word	0x58024400
 800460c:	08024818 	.word	0x08024818
 8004610:	20000004 	.word	0x20000004
 8004614:	20000000 	.word	0x20000000

08004618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_IncTick+0x20>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_IncTick+0x24>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4413      	add	r3, r2
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <HAL_IncTick+0x24>)
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2000000c 	.word	0x2000000c
 800463c:	20000a3c 	.word	0x20000a3c

08004640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return uwTick;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_GetTick+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000a3c 	.word	0x20000a3c

08004658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004660:	f7ff ffee 	bl	8004640 <HAL_GetTick>
 8004664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d005      	beq.n	800467e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_Delay+0x44>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800467e:	bf00      	nop
 8004680:	f7ff ffde 	bl	8004640 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	429a      	cmp	r2, r3
 800468e:	d8f7      	bhi.n	8004680 <HAL_Delay+0x28>
  {
  }
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	2000000c 	.word	0x2000000c

080046a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <HAL_GetREVID+0x14>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	0c1b      	lsrs	r3, r3, #16
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	5c001000 	.word	0x5c001000

080046b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	609a      	str	r2, [r3, #8]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3360      	adds	r3, #96	; 0x60
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	430b      	orrs	r3, r1
 800474e:	431a      	orrs	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	611a      	str	r2, [r3, #16]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3360      	adds	r3, #96	; 0x60
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	601a      	str	r2, [r3, #0]
  }
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3330      	adds	r3, #48	; 0x30
 80047fe:	461a      	mov	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	4413      	add	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	211f      	movs	r1, #31
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	401a      	ands	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	f003 011f 	and.w	r1, r3, #31
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa01 f303 	lsl.w	r3, r1, r3
 8004834:	431a      	orrs	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3314      	adds	r3, #20
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	0e5b      	lsrs	r3, r3, #25
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	4413      	add	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	0d1b      	lsrs	r3, r3, #20
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	2107      	movs	r1, #7
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	401a      	ands	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0d1b      	lsrs	r3, r3, #20
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	431a      	orrs	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048dc:	43db      	mvns	r3, r3
 80048de:	401a      	ands	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0318 	and.w	r3, r3, #24
 80048e6:	4908      	ldr	r1, [pc, #32]	; (8004908 <LL_ADC_SetChannelSingleDiff+0x44>)
 80048e8:	40d9      	lsrs	r1, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	400b      	ands	r3, r1
 80048ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f2:	431a      	orrs	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	000fffff 	.word	0x000fffff

0800490c <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	330c      	adds	r3, #12
 800491c:	4618      	mov	r0, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0d1b      	lsrs	r3, r3, #20
 8004922:	f003 0103 	and.w	r1, r3, #3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0201 	and.w	r2, r3, #1
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4403      	add	r3, r0
 800493a:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004944:	400b      	ands	r3, r1
 8004946:	43db      	mvns	r3, r3
 8004948:	401a      	ands	r2, r3
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	400b      	ands	r3, r1
 8004950:	431a      	orrs	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	7dcfffff 	.word	0x7dcfffff

08004968 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 031f 	and.w	r3, r3, #31
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6093      	str	r3, [r2, #8]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	5fffffc0 	.word	0x5fffffc0

080049c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d8:	d101      	bne.n	80049de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <LL_ADC_EnableInternalRegulator+0x24>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	6fffffc0 	.word	0x6fffffc0

08004a14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a28:	d101      	bne.n	8004a2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <LL_ADC_Enable+0x24>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	7fffffc0 	.word	0x7fffffc0

08004a64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <LL_ADC_Disable+0x24>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	f043 0202 	orr.w	r2, r3, #2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	7fffffc0 	.word	0x7fffffc0

08004a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <LL_ADC_IsEnabled+0x18>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <LL_ADC_IsEnabled+0x1a>
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d101      	bne.n	8004aca <LL_ADC_IsDisableOngoing+0x18>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <LL_ADC_IsDisableOngoing+0x1a>
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <LL_ADC_REG_StartConversion+0x24>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	7fffffc0 	.word	0x7fffffc0

08004b00 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <LL_ADC_REG_StopConversion+0x24>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	f043 0210 	orr.w	r2, r3, #16
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	7fffffc0 	.word	0x7fffffc0

08004b28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d101      	bne.n	8004b40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <LL_ADC_INJ_StopConversion+0x24>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	7fffffc0 	.word	0x7fffffc0

08004b78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d101      	bne.n	8004b90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2280      	movs	r2, #128	; 0x80
 8004baa:	601a      	str	r2, [r3, #0]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bc6:	601a      	str	r2, [r3, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be2:	601a      	str	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	605a      	str	r2, [r3, #4]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	605a      	str	r2, [r3, #4]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	605a      	str	r2, [r3, #4]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	605a      	str	r2, [r3, #4]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e18f      	b.n	8004fea <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7fb fde1 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fe67 	bl	80049c4 <LL_ADC_IsDeepPowerDownEnabled>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fe4d 	bl	80049a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fe82 	bl	8004a14 <LL_ADC_IsInternalRegulatorEnabled>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d114      	bne.n	8004d40 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fe66 	bl	80049ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d20:	4b87      	ldr	r3, [pc, #540]	; (8004f40 <HAL_ADC_Init+0x290>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	099b      	lsrs	r3, r3, #6
 8004d26:	4a87      	ldr	r2, [pc, #540]	; (8004f44 <HAL_ADC_Init+0x294>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	099b      	lsrs	r3, r3, #6
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d32:	e002      	b.n	8004d3a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f9      	bne.n	8004d34 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fe65 	bl	8004a14 <LL_ADC_IsInternalRegulatorEnabled>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f043 0210 	orr.w	r2, r3, #16
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	f043 0201 	orr.w	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fed9 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 8004d76:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 8129 	bne.w	8004fd8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 8125 	bne.w	8004fd8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d96:	f043 0202 	orr.w	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fe72 	bl	8004a8c <LL_ADC_IsEnabled>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d136      	bne.n	8004e1c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a65      	ldr	r2, [pc, #404]	; (8004f48 <HAL_ADC_Init+0x298>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_ADC_Init+0x112>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a63      	ldr	r2, [pc, #396]	; (8004f4c <HAL_ADC_Init+0x29c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10e      	bne.n	8004de0 <HAL_ADC_Init+0x130>
 8004dc2:	4861      	ldr	r0, [pc, #388]	; (8004f48 <HAL_ADC_Init+0x298>)
 8004dc4:	f7ff fe62 	bl	8004a8c <LL_ADC_IsEnabled>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	4860      	ldr	r0, [pc, #384]	; (8004f4c <HAL_ADC_Init+0x29c>)
 8004dcc:	f7ff fe5e 	bl	8004a8c <LL_ADC_IsEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4323      	orrs	r3, r4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e008      	b.n	8004df2 <HAL_ADC_Init+0x142>
 8004de0:	485b      	ldr	r0, [pc, #364]	; (8004f50 <HAL_ADC_Init+0x2a0>)
 8004de2:	f7ff fe53 	bl	8004a8c <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a53      	ldr	r2, [pc, #332]	; (8004f48 <HAL_ADC_Init+0x298>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_ADC_Init+0x15a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a51      	ldr	r2, [pc, #324]	; (8004f4c <HAL_ADC_Init+0x29c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d101      	bne.n	8004e0e <HAL_ADC_Init+0x15e>
 8004e0a:	4a52      	ldr	r2, [pc, #328]	; (8004f54 <HAL_ADC_Init+0x2a4>)
 8004e0c:	e000      	b.n	8004e10 <HAL_ADC_Init+0x160>
 8004e0e:	4a52      	ldr	r2, [pc, #328]	; (8004f58 <HAL_ADC_Init+0x2a8>)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7ff fc4e 	bl	80046b8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004e1c:	f7ff fc40 	bl	80046a0 <HAL_GetREVID>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d914      	bls.n	8004e54 <HAL_ADC_Init+0x1a4>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d110      	bne.n	8004e54 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	7d5b      	ldrb	r3, [r3, #21]
 8004e36:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e3c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e42:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7f1b      	ldrb	r3, [r3, #28]
 8004e48:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004e4a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e4c:	f043 030c 	orr.w	r3, r3, #12
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	e00d      	b.n	8004e70 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7d5b      	ldrb	r3, [r3, #21]
 8004e58:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e5e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e64:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7f1b      	ldrb	r3, [r3, #28]
 8004e6a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	7f1b      	ldrb	r3, [r3, #28]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	045b      	lsls	r3, r3, #17
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <HAL_ADC_Init+0x2ac>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fe34 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 8004ec0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fe56 	bl	8004b78 <LL_ADC_INJ_IsConversionOngoing>
 8004ecc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d15f      	bne.n	8004f94 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d15c      	bne.n	8004f94 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	7d1b      	ldrb	r3, [r3, #20]
 8004ede:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <HAL_ADC_Init+0x2b0>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	69b9      	ldr	r1, [r7, #24]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d130      	bne.n	8004f68 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_ADC_Init+0x2b4>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	0411      	lsls	r1, r2, #16
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f22:	4311      	orrs	r1, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f28:	4311      	orrs	r1, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	611a      	str	r2, [r3, #16]
 8004f3c:	e01c      	b.n	8004f78 <HAL_ADC_Init+0x2c8>
 8004f3e:	bf00      	nop
 8004f40:	20000000 	.word	0x20000000
 8004f44:	053e2d63 	.word	0x053e2d63
 8004f48:	40022000 	.word	0x40022000
 8004f4c:	40022100 	.word	0x40022100
 8004f50:	58026000 	.word	0x58026000
 8004f54:	40022300 	.word	0x40022300
 8004f58:	58026300 	.word	0x58026300
 8004f5c:	fff0c003 	.word	0xfff0c003
 8004f60:	ffffbffc 	.word	0xffffbffc
 8004f64:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fdde 	bl	8006b50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f023 010f 	bic.w	r1, r3, #15
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb4:	e007      	b.n	8004fc6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 020f 	bic.w	r2, r2, #15
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
 8004fd6:	e007      	b.n	8004fe8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0210 	orr.w	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3724      	adds	r7, #36	; 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd90      	pop	{r4, r7, pc}
 8004ff2:	bf00      	nop

08004ff4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a5c      	ldr	r2, [pc, #368]	; (8005174 <HAL_ADC_Start+0x180>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_ADC_Start+0x1c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5b      	ldr	r2, [pc, #364]	; (8005178 <HAL_ADC_Start+0x184>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d101      	bne.n	8005014 <HAL_ADC_Start+0x20>
 8005010:	4b5a      	ldr	r3, [pc, #360]	; (800517c <HAL_ADC_Start+0x188>)
 8005012:	e000      	b.n	8005016 <HAL_ADC_Start+0x22>
 8005014:	4b5a      	ldr	r3, [pc, #360]	; (8005180 <HAL_ADC_Start+0x18c>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fca6 	bl	8004968 <LL_ADC_GetMultimode>
 800501c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fd80 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	f040 809a 	bne.w	8005164 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_ADC_Start+0x4a>
 800503a:	2302      	movs	r3, #2
 800503c:	e095      	b.n	800516a <HAL_ADC_Start+0x176>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 fc98 	bl	800697c <ADC_Enable>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 8081 	bne.w	800515a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505c:	4b49      	ldr	r3, [pc, #292]	; (8005184 <HAL_ADC_Start+0x190>)
 800505e:	4013      	ands	r3, r2
 8005060:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a42      	ldr	r2, [pc, #264]	; (8005178 <HAL_ADC_Start+0x184>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d002      	beq.n	8005078 <HAL_ADC_Start+0x84>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	e000      	b.n	800507a <HAL_ADC_Start+0x86>
 8005078:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <HAL_ADC_Start+0x180>)
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	4293      	cmp	r3, r2
 8005080:	d002      	beq.n	8005088 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800509c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a0:	d106      	bne.n	80050b0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	f023 0206 	bic.w	r2, r3, #6
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	659a      	str	r2, [r3, #88]	; 0x58
 80050ae:	e002      	b.n	80050b6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	221c      	movs	r2, #28
 80050bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <HAL_ADC_Start+0x184>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d002      	beq.n	80050d6 <HAL_ADC_Start+0xe2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	e000      	b.n	80050d8 <HAL_ADC_Start+0xe4>
 80050d6:	4b27      	ldr	r3, [pc, #156]	; (8005174 <HAL_ADC_Start+0x180>)
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	4293      	cmp	r3, r2
 80050de:	d008      	beq.n	80050f2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d002      	beq.n	80050f2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b09      	cmp	r3, #9
 80050f0:	d114      	bne.n	800511c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005108:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fcdf 	bl	8004ad8 <LL_ADC_REG_StartConversion>
 800511a:	e025      	b.n	8005168 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a12      	ldr	r2, [pc, #72]	; (8005178 <HAL_ADC_Start+0x184>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d002      	beq.n	8005138 <HAL_ADC_Start+0x144>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	e000      	b.n	800513a <HAL_ADC_Start+0x146>
 8005138:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <HAL_ADC_Start+0x180>)
 800513a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00f      	beq.n	8005168 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
 8005158:	e006      	b.n	8005168 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005162:	e001      	b.n	8005168 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005164:	2302      	movs	r3, #2
 8005166:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005168:	7dfb      	ldrb	r3, [r7, #23]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40022000 	.word	0x40022000
 8005178:	40022100 	.word	0x40022100
 800517c:	40022300 	.word	0x40022300
 8005180:	58026300 	.word	0x58026300
 8005184:	fffff0fe 	.word	0xfffff0fe

08005188 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a72      	ldr	r2, [pc, #456]	; (8005360 <HAL_ADC_PollForConversion+0x1d8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_ADC_PollForConversion+0x1e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a70      	ldr	r2, [pc, #448]	; (8005364 <HAL_ADC_PollForConversion+0x1dc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d101      	bne.n	80051aa <HAL_ADC_PollForConversion+0x22>
 80051a6:	4b70      	ldr	r3, [pc, #448]	; (8005368 <HAL_ADC_PollForConversion+0x1e0>)
 80051a8:	e000      	b.n	80051ac <HAL_ADC_PollForConversion+0x24>
 80051aa:	4b70      	ldr	r3, [pc, #448]	; (800536c <HAL_ADC_PollForConversion+0x1e4>)
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fbdb 	bl	8004968 <LL_ADC_GetMultimode>
 80051b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d102      	bne.n	80051c2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80051bc:	2308      	movs	r3, #8
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e037      	b.n	8005232 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d002      	beq.n	80051d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b09      	cmp	r3, #9
 80051d2:	d111      	bne.n	80051f8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0b1      	b.n	8005356 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80051f2:	2304      	movs	r3, #4
 80051f4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80051f6:	e01c      	b.n	8005232 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a58      	ldr	r2, [pc, #352]	; (8005360 <HAL_ADC_PollForConversion+0x1d8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_ADC_PollForConversion+0x84>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a57      	ldr	r2, [pc, #348]	; (8005364 <HAL_ADC_PollForConversion+0x1dc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_ADC_PollForConversion+0x88>
 800520c:	4b56      	ldr	r3, [pc, #344]	; (8005368 <HAL_ADC_PollForConversion+0x1e0>)
 800520e:	e000      	b.n	8005212 <HAL_ADC_PollForConversion+0x8a>
 8005210:	4b56      	ldr	r3, [pc, #344]	; (800536c <HAL_ADC_PollForConversion+0x1e4>)
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fbb6 	bl	8004984 <LL_ADC_GetMultiDMATransfer>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e093      	b.n	8005356 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800522e:	2304      	movs	r3, #4
 8005230:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005232:	f7ff fa05 	bl	8004640 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005238:	e021      	b.n	800527e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d01d      	beq.n	800527e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005242:	f7ff f9fd 	bl	8004640 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <HAL_ADC_PollForConversion+0xd0>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d112      	bne.n	800527e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e06b      	b.n	8005356 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0d6      	beq.n	800523a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fa93 	bl	80047c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01c      	beq.n	80052e2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7d5b      	ldrb	r3, [r3, #21]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d118      	bne.n	80052e2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d111      	bne.n	80052e2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f043 0201 	orr.w	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <HAL_ADC_PollForConversion+0x1dc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d002      	beq.n	80052f2 <HAL_ADC_PollForConversion+0x16a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	e000      	b.n	80052f4 <HAL_ADC_PollForConversion+0x16c>
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_ADC_PollForConversion+0x1d8>)
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d008      	beq.n	800530e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b05      	cmp	r3, #5
 8005306:	d002      	beq.n	800530e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b09      	cmp	r3, #9
 800530c:	d104      	bne.n	8005318 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	e00c      	b.n	8005332 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a11      	ldr	r2, [pc, #68]	; (8005364 <HAL_ADC_PollForConversion+0x1dc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d002      	beq.n	8005328 <HAL_ADC_PollForConversion+0x1a0>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	e000      	b.n	800532a <HAL_ADC_PollForConversion+0x1a2>
 8005328:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_ADC_PollForConversion+0x1d8>)
 800532a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d104      	bne.n	8005342 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2208      	movs	r2, #8
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e008      	b.n	8005354 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d103      	bne.n	8005354 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	220c      	movs	r2, #12
 8005352:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40022000 	.word	0x40022000
 8005364:	40022100 	.word	0x40022100
 8005368:	40022300 	.word	0x40022300
 800536c:	58026300 	.word	0x58026300

08005370 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a90      	ldr	r2, [pc, #576]	; (80055c0 <HAL_ADC_Start_IT+0x250>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_ADC_Start_IT+0x1c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a8f      	ldr	r2, [pc, #572]	; (80055c4 <HAL_ADC_Start_IT+0x254>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d101      	bne.n	8005390 <HAL_ADC_Start_IT+0x20>
 800538c:	4b8e      	ldr	r3, [pc, #568]	; (80055c8 <HAL_ADC_Start_IT+0x258>)
 800538e:	e000      	b.n	8005392 <HAL_ADC_Start_IT+0x22>
 8005390:	4b8e      	ldr	r3, [pc, #568]	; (80055cc <HAL_ADC_Start_IT+0x25c>)
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fae8 	bl	8004968 <LL_ADC_GetMultimode>
 8005398:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fbc2 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 8119 	bne.w	80055de <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_ADC_Start_IT+0x4a>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e116      	b.n	80055e8 <HAL_ADC_Start_IT+0x278>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 fada 	bl	800697c <ADC_Enable>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 8100 	bne.w	80055d4 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053d8:	4b7d      	ldr	r3, [pc, #500]	; (80055d0 <HAL_ADC_Start_IT+0x260>)
 80053da:	4013      	ands	r3, r2
 80053dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a76      	ldr	r2, [pc, #472]	; (80055c4 <HAL_ADC_Start_IT+0x254>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d002      	beq.n	80053f4 <HAL_ADC_Start_IT+0x84>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	e000      	b.n	80053f6 <HAL_ADC_Start_IT+0x86>
 80053f4:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <HAL_ADC_Start_IT+0x250>)
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d002      	beq.n	8005404 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d006      	beq.n	800542a <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	f023 0206 	bic.w	r2, r3, #6
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	659a      	str	r2, [r3, #88]	; 0x58
 8005428:	e002      	b.n	8005430 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	221c      	movs	r2, #28
 8005436:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 021c 	bic.w	r2, r2, #28
 800544e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d108      	bne.n	800546a <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0208 	orr.w	r2, r2, #8
 8005466:	605a      	str	r2, [r3, #4]
          break;
 8005468:	e008      	b.n	800547c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0204 	orr.w	r2, r2, #4
 8005478:	605a      	str	r2, [r3, #4]
          break;
 800547a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	2b00      	cmp	r3, #0
 8005482:	d107      	bne.n	8005494 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0210 	orr.w	r2, r2, #16
 8005492:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a4a      	ldr	r2, [pc, #296]	; (80055c4 <HAL_ADC_Start_IT+0x254>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d002      	beq.n	80054a4 <HAL_ADC_Start_IT+0x134>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	e000      	b.n	80054a6 <HAL_ADC_Start_IT+0x136>
 80054a4:	4b46      	ldr	r3, [pc, #280]	; (80055c0 <HAL_ADC_Start_IT+0x250>)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d008      	beq.n	80054c0 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d002      	beq.n	80054c0 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b09      	cmp	r3, #9
 80054be:	d13b      	bne.n	8005538 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d02d      	beq.n	800552a <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d110      	bne.n	8005508 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0220 	bic.w	r2, r2, #32
 80054f4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005504:	605a      	str	r2, [r3, #4]
              break;
 8005506:	e011      	b.n	800552c <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005516:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0220 	orr.w	r2, r2, #32
 8005526:	605a      	str	r2, [r3, #4]
              break;
 8005528:	e000      	b.n	800552c <HAL_ADC_Start_IT+0x1bc>
          }
        }
 800552a:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff fad1 	bl	8004ad8 <LL_ADC_REG_StartConversion>
 8005536:	e056      	b.n	80055e6 <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <HAL_ADC_Start_IT+0x254>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d002      	beq.n	8005554 <HAL_ADC_Start_IT+0x1e4>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	e000      	b.n	8005556 <HAL_ADC_Start_IT+0x1e6>
 8005554:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <HAL_ADC_Start_IT+0x250>)
 8005556:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d03f      	beq.n	80055e4 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800556c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d110      	bne.n	800559e <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0220 	bic.w	r2, r2, #32
 800558a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559a:	605a      	str	r2, [r3, #4]
              break;
 800559c:	e023      	b.n	80055e6 <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0220 	orr.w	r2, r2, #32
 80055bc:	605a      	str	r2, [r3, #4]
              break;
 80055be:	e012      	b.n	80055e6 <HAL_ADC_Start_IT+0x276>
 80055c0:	40022000 	.word	0x40022000
 80055c4:	40022100 	.word	0x40022100
 80055c8:	40022300 	.word	0x40022300
 80055cc:	58026300 	.word	0x58026300
 80055d0:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80055dc:	e003      	b.n	80055e6 <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	75fb      	strb	r3, [r7, #23]
 80055e2:	e000      	b.n	80055e6 <HAL_ADC_Start_IT+0x276>
        }
 80055e4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_ADC_Stop_IT+0x16>
 8005602:	2302      	movs	r3, #2
 8005604:	e029      	b.n	800565a <HAL_ADC_Stop_IT+0x6a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800560e:	2103      	movs	r1, #3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 f8f7 	bl	8006804 <ADC_ConversionStop>
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d117      	bne.n	8005650 <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 021c 	bic.w	r2, r2, #28
 800562e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 fa2d 	bl	8006a90 <ADC_Disable>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d107      	bne.n	8005650 <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <HAL_ADC_Stop_IT+0x74>)
 8005646:	4013      	ands	r3, r2
 8005648:	f043 0201 	orr.w	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	ffffeefe 	.word	0xffffeefe

08005668 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800568c:	2300      	movs	r3, #0
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a87      	ldr	r2, [pc, #540]	; (80058c4 <HAL_ADC_IRQHandler+0x240>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_ADC_IRQHandler+0x30>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a86      	ldr	r2, [pc, #536]	; (80058c8 <HAL_ADC_IRQHandler+0x244>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <HAL_ADC_IRQHandler+0x34>
 80056b4:	4b85      	ldr	r3, [pc, #532]	; (80058cc <HAL_ADC_IRQHandler+0x248>)
 80056b6:	e000      	b.n	80056ba <HAL_ADC_IRQHandler+0x36>
 80056b8:	4b85      	ldr	r3, [pc, #532]	; (80058d0 <HAL_ADC_IRQHandler+0x24c>)
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff f954 	bl	8004968 <LL_ADC_GetMultimode>
 80056c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <HAL_ADC_IRQHandler+0x78>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d012      	beq.n	80056fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fb86 	bl	8006e00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2202      	movs	r2, #2
 80056fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <HAL_ADC_IRQHandler+0x8c>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8083 	beq.w	8005822 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d07d      	beq.n	8005822 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff f840 	bl	80047c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d062      	beq.n	8005814 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a5d      	ldr	r2, [pc, #372]	; (80058c8 <HAL_ADC_IRQHandler+0x244>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d002      	beq.n	800575e <HAL_ADC_IRQHandler+0xda>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	e000      	b.n	8005760 <HAL_ADC_IRQHandler+0xdc>
 800575e:	4b59      	ldr	r3, [pc, #356]	; (80058c4 <HAL_ADC_IRQHandler+0x240>)
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	4293      	cmp	r3, r2
 8005766:	d008      	beq.n	800577a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b05      	cmp	r3, #5
 8005772:	d002      	beq.n	800577a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b09      	cmp	r3, #9
 8005778:	d104      	bne.n	8005784 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	623b      	str	r3, [r7, #32]
 8005782:	e00c      	b.n	800579e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a4f      	ldr	r2, [pc, #316]	; (80058c8 <HAL_ADC_IRQHandler+0x244>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d002      	beq.n	8005794 <HAL_ADC_IRQHandler+0x110>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	e000      	b.n	8005796 <HAL_ADC_IRQHandler+0x112>
 8005794:	4b4b      	ldr	r3, [pc, #300]	; (80058c4 <HAL_ADC_IRQHandler+0x240>)
 8005796:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d135      	bne.n	8005814 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d12e      	bne.n	8005814 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff f9b4 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d11a      	bne.n	80057fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 020c 	bic.w	r2, r2, #12
 80057d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d112      	bne.n	8005814 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
 80057fa:	e00b      	b.n	8005814 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	f043 0210 	orr.w	r2, r3, #16
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	f043 0201 	orr.w	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f96f 	bl	8005af8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	220c      	movs	r2, #12
 8005820:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <HAL_ADC_IRQHandler+0x1b2>
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80a0 	beq.w	8005982 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 809a 	beq.w	8005982 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe ffeb 	bl	8004846 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005870:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe ffa6 	bl	80047c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800587c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a11      	ldr	r2, [pc, #68]	; (80058c8 <HAL_ADC_IRQHandler+0x244>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d002      	beq.n	800588e <HAL_ADC_IRQHandler+0x20a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	e000      	b.n	8005890 <HAL_ADC_IRQHandler+0x20c>
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <HAL_ADC_IRQHandler+0x240>)
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	4293      	cmp	r3, r2
 8005896:	d008      	beq.n	80058aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b06      	cmp	r3, #6
 80058a2:	d002      	beq.n	80058aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b07      	cmp	r3, #7
 80058a8:	d104      	bne.n	80058b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	e014      	b.n	80058de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a03      	ldr	r2, [pc, #12]	; (80058c8 <HAL_ADC_IRQHandler+0x244>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00a      	beq.n	80058d4 <HAL_ADC_IRQHandler+0x250>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	e008      	b.n	80058d6 <HAL_ADC_IRQHandler+0x252>
 80058c4:	40022000 	.word	0x40022000
 80058c8:	40022100 	.word	0x40022100
 80058cc:	40022300 	.word	0x40022300
 80058d0:	58026300 	.word	0x58026300
 80058d4:	4b84      	ldr	r3, [pc, #528]	; (8005ae8 <HAL_ADC_IRQHandler+0x464>)
 80058d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d047      	beq.n	8005974 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <HAL_ADC_IRQHandler+0x27a>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d03f      	beq.n	8005974 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d13a      	bne.n	8005974 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d133      	bne.n	8005974 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d12e      	bne.n	8005974 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f92c 	bl	8004b78 <LL_ADC_INJ_IsConversionOngoing>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11a      	bne.n	800595c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005934:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	2b00      	cmp	r3, #0
 800594c:	d112      	bne.n	8005974 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f043 0201 	orr.w	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
 800595a:	e00b      	b.n	8005974 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f043 0210 	orr.w	r2, r3, #16
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	f043 0201 	orr.w	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fa1b 	bl	8006db0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2260      	movs	r2, #96	; 0x60
 8005980:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <HAL_ADC_IRQHandler+0x32c>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fd fbf4 	bl	8003190 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d012      	beq.n	80059e0 <HAL_ADC_IRQHandler+0x35c>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 fa01 	bl	8006dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d012      	beq.n	8005a10 <HAL_ADC_IRQHandler+0x38c>
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f9f3 	bl	8006dec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d043      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x41e>
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d03e      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	e021      	b.n	8005a76 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d015      	beq.n	8005a64 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <HAL_ADC_IRQHandler+0x464>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_ADC_IRQHandler+0x3c8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a29      	ldr	r2, [pc, #164]	; (8005aec <HAL_ADC_IRQHandler+0x468>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <HAL_ADC_IRQHandler+0x3cc>
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_ADC_IRQHandler+0x46c>)
 8005a4e:	e000      	b.n	8005a52 <HAL_ADC_IRQHandler+0x3ce>
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <HAL_ADC_IRQHandler+0x470>)
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe ff96 	bl	8004984 <LL_ADC_GetMultiDMATransfer>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00b      	beq.n	8005a76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
 8005a62:	e008      	b.n	8005a76 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005a72:	2301      	movs	r3, #1
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d10e      	bne.n	8005a9a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	f043 0202 	orr.w	r2, r3, #2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f839 	bl	8005b0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d018      	beq.n	8005ade <HAL_ADC_IRQHandler+0x45a>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	f043 0208 	orr.w	r2, r3, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ad6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 f973 	bl	8006dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40022000 	.word	0x40022000
 8005aec:	40022100 	.word	0x40022100
 8005af0:	40022300 	.word	0x40022300
 8005af4:	58026300 	.word	0x58026300

08005af8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b0a1      	sub	sp, #132	; 0x84
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4a9d      	ldr	r2, [pc, #628]	; (8005db0 <HAL_ADC_ConfigChannel+0x290>)
 8005b3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_ADC_ConfigChannel+0x2a>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e321      	b.n	800618e <HAL_ADC_ConfigChannel+0x66e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe ffe6 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 8306 	bne.w	8006170 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d108      	bne.n	8005b82 <HAL_ADC_ConfigChannel+0x62>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	0e9b      	lsrs	r3, r3, #26
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	e016      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x90>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8a:	fa93 f3a3 	rbit	r3, r3
 8005b8e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b92:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005b9a:	2320      	movs	r3, #32
 8005b9c:	e003      	b.n	8005ba6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ba0:	fab3 f383 	clz	r3, r3
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	2201      	movs	r2, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	69d1      	ldr	r1, [r2, #28]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7fe fe0f 	bl	80047ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe ffa7 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 8005bda:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe ffc9 	bl	8004b78 <LL_ADC_INJ_IsConversionOngoing>
 8005be6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 80b3 	bne.w	8005d56 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 80af 	bne.w	8005d56 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	461a      	mov	r2, r3
 8005c06:	f7fe fe31 	bl	800486c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c0a:	4b6a      	ldr	r3, [pc, #424]	; (8005db4 <HAL_ADC_ConfigChannel+0x294>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c16:	d10b      	bne.n	8005c30 <HAL_ADC_ConfigChannel+0x110>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695a      	ldr	r2, [r3, #20]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	e01d      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x14c>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <HAL_ADC_ConfigChannel+0x136>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	089b      	lsrs	r3, r3, #2
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	e00a      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x14c>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	089b      	lsrs	r3, r3, #2
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d027      	beq.n	8005cc6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6919      	ldr	r1, [r3, #16]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c84:	f7fe fd4c 	bl	8004720 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6919      	ldr	r1, [r3, #16]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	7e5b      	ldrb	r3, [r3, #25]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d102      	bne.n	8005c9e <HAL_ADC_ConfigChannel+0x17e>
 8005c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c9c:	e000      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x180>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f7fe fd76 	bl	8004792 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6919      	ldr	r1, [r3, #16]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	7e1b      	ldrb	r3, [r3, #24]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x19c>
 8005cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cba:	e000      	b.n	8005cbe <HAL_ADC_ConfigChannel+0x19e>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fe fd4e 	bl	8004760 <LL_ADC_SetDataRightShift>
 8005cc4:	e047      	b.n	8005d56 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ccc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	069b      	lsls	r3, r3, #26
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d107      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ce8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	069b      	lsls	r3, r3, #26
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d107      	bne.n	8005d0e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	069b      	lsls	r3, r3, #26
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d107      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d30:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	069b      	lsls	r3, r3, #26
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d107      	bne.n	8005d56 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d54:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fe96 	bl	8004a8c <LL_ADC_IsEnabled>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 820d 	bne.w	8006182 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f7fe fda5 	bl	80048c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <HAL_ADC_ConfigChannel+0x290>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	f040 8133 	bne.w	8005fec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x298>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0e9b      	lsrs	r3, r3, #26
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	bf94      	ite	ls
 8005da6:	2301      	movls	r3, #1
 8005da8:	2300      	movhi	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	e01e      	b.n	8005dec <HAL_ADC_ConfigChannel+0x2cc>
 8005dae:	bf00      	nop
 8005db0:	47ff0000 	.word	0x47ff0000
 8005db4:	5c001000 	.word	0x5c001000
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dc0:	fa93 f3a3 	rbit	r3, r3
 8005dc4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	e003      	b.n	8005ddc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd6:	fab3 f383 	clz	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	bf94      	ite	ls
 8005de6:	2301      	movls	r3, #1
 8005de8:	2300      	movhi	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d079      	beq.n	8005ee4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d107      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x2ec>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	0e9b      	lsrs	r3, r3, #26
 8005e02:	3301      	adds	r3, #1
 8005e04:	069b      	lsls	r3, r3, #26
 8005e06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e0a:	e015      	b.n	8005e38 <HAL_ADC_ConfigChannel+0x318>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e14:	fa93 f3a3 	rbit	r3, r3
 8005e18:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005e24:	2320      	movs	r3, #32
 8005e26:	e003      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2a:	fab3 f383 	clz	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	3301      	adds	r3, #1
 8005e32:	069b      	lsls	r3, r3, #26
 8005e34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_ADC_ConfigChannel+0x338>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	0e9b      	lsrs	r3, r3, #26
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	e017      	b.n	8005e88 <HAL_ADC_ConfigChannel+0x368>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e60:	fa93 f3a3 	rbit	r3, r3
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005e70:	2320      	movs	r3, #32
 8005e72:	e003      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	ea42 0103 	orr.w	r1, r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x38e>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0e9b      	lsrs	r3, r3, #26
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	051b      	lsls	r3, r3, #20
 8005eac:	e018      	b.n	8005ee0 <HAL_ADC_ConfigChannel+0x3c0>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	e003      	b.n	8005ed2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	fab3 f383 	clz	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f003 021f 	and.w	r2, r3, #31
 8005ed8:	4613      	mov	r3, r2
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	4413      	add	r3, r2
 8005ede:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	e07e      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_ADC_ConfigChannel+0x3e0>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	0e9b      	lsrs	r3, r3, #26
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	069b      	lsls	r3, r3, #26
 8005efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005efe:	e015      	b.n	8005f2c <HAL_ADC_ConfigChannel+0x40c>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	fa93 f3a3 	rbit	r3, r3
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005f18:	2320      	movs	r3, #32
 8005f1a:	e003      	b.n	8005f24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	fab3 f383 	clz	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	3301      	adds	r3, #1
 8005f26:	069b      	lsls	r3, r3, #26
 8005f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x42c>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	0e9b      	lsrs	r3, r3, #26
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	e017      	b.n	8005f7c <HAL_ADC_ConfigChannel+0x45c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	fa93 f3a3 	rbit	r3, r3
 8005f58:	61bb      	str	r3, [r7, #24]
  return result;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005f64:	2320      	movs	r3, #32
 8005f66:	e003      	b.n	8005f70 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	fab3 f383 	clz	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	3301      	adds	r3, #1
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2101      	movs	r1, #1
 8005f78:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7c:	ea42 0103 	orr.w	r1, r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10d      	bne.n	8005fa8 <HAL_ADC_ConfigChannel+0x488>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	0e9b      	lsrs	r3, r3, #26
 8005f92:	3301      	adds	r3, #1
 8005f94:	f003 021f 	and.w	r2, r3, #31
 8005f98:	4613      	mov	r3, r2
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3b1e      	subs	r3, #30
 8005fa0:	051b      	lsls	r3, r3, #20
 8005fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fa6:	e01b      	b.n	8005fe0 <HAL_ADC_ConfigChannel+0x4c0>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	fa93 f3a3 	rbit	r3, r3
 8005fb4:	60fb      	str	r3, [r7, #12]
  return result;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	e003      	b.n	8005fcc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	fab3 f383 	clz	r3, r3
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	3301      	adds	r3, #1
 8005fce:	f003 021f 	and.w	r2, r3, #31
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3b1e      	subs	r3, #30
 8005fda:	051b      	lsls	r3, r3, #20
 8005fdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	6892      	ldr	r2, [r2, #8]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f7fe fc40 	bl	800486c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f280 80c6 	bge.w	8006182 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a67      	ldr	r2, [pc, #412]	; (8006198 <HAL_ADC_ConfigChannel+0x678>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d004      	beq.n	800600a <HAL_ADC_ConfigChannel+0x4ea>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a65      	ldr	r2, [pc, #404]	; (800619c <HAL_ADC_ConfigChannel+0x67c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d101      	bne.n	800600e <HAL_ADC_ConfigChannel+0x4ee>
 800600a:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <HAL_ADC_ConfigChannel+0x680>)
 800600c:	e000      	b.n	8006010 <HAL_ADC_ConfigChannel+0x4f0>
 800600e:	4b65      	ldr	r3, [pc, #404]	; (80061a4 <HAL_ADC_ConfigChannel+0x684>)
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe fb77 	bl	8004704 <LL_ADC_GetCommonPathInternalCh>
 8006016:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a5e      	ldr	r2, [pc, #376]	; (8006198 <HAL_ADC_ConfigChannel+0x678>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_ADC_ConfigChannel+0x50c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a5d      	ldr	r2, [pc, #372]	; (800619c <HAL_ADC_ConfigChannel+0x67c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d10e      	bne.n	800604a <HAL_ADC_ConfigChannel+0x52a>
 800602c:	485a      	ldr	r0, [pc, #360]	; (8006198 <HAL_ADC_ConfigChannel+0x678>)
 800602e:	f7fe fd2d 	bl	8004a8c <LL_ADC_IsEnabled>
 8006032:	4604      	mov	r4, r0
 8006034:	4859      	ldr	r0, [pc, #356]	; (800619c <HAL_ADC_ConfigChannel+0x67c>)
 8006036:	f7fe fd29 	bl	8004a8c <LL_ADC_IsEnabled>
 800603a:	4603      	mov	r3, r0
 800603c:	4323      	orrs	r3, r4
 800603e:	2b00      	cmp	r3, #0
 8006040:	bf0c      	ite	eq
 8006042:	2301      	moveq	r3, #1
 8006044:	2300      	movne	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	e008      	b.n	800605c <HAL_ADC_ConfigChannel+0x53c>
 800604a:	4857      	ldr	r0, [pc, #348]	; (80061a8 <HAL_ADC_ConfigChannel+0x688>)
 800604c:	f7fe fd1e 	bl	8004a8c <LL_ADC_IsEnabled>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d07d      	beq.n	800615c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a51      	ldr	r2, [pc, #324]	; (80061ac <HAL_ADC_ConfigChannel+0x68c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d130      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x5ac>
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d12b      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a4b      	ldr	r2, [pc, #300]	; (80061a8 <HAL_ADC_ConfigChannel+0x688>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f040 8081 	bne.w	8006182 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a44      	ldr	r2, [pc, #272]	; (8006198 <HAL_ADC_ConfigChannel+0x678>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_ADC_ConfigChannel+0x574>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a43      	ldr	r2, [pc, #268]	; (800619c <HAL_ADC_ConfigChannel+0x67c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d101      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x578>
 8006094:	4a42      	ldr	r2, [pc, #264]	; (80061a0 <HAL_ADC_ConfigChannel+0x680>)
 8006096:	e000      	b.n	800609a <HAL_ADC_ConfigChannel+0x57a>
 8006098:	4a42      	ldr	r2, [pc, #264]	; (80061a4 <HAL_ADC_ConfigChannel+0x684>)
 800609a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f7fe fb1b 	bl	80046de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060a8:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_ADC_ConfigChannel+0x690>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	4a41      	ldr	r2, [pc, #260]	; (80061b4 <HAL_ADC_ConfigChannel+0x694>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	099b      	lsrs	r3, r3, #6
 80060b6:	3301      	adds	r3, #1
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80060bc:	e002      	b.n	80060c4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f9      	bne.n	80060be <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060ca:	e05a      	b.n	8006182 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a39      	ldr	r2, [pc, #228]	; (80061b8 <HAL_ADC_ConfigChannel+0x698>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d11e      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x5f4>
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d119      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a30      	ldr	r2, [pc, #192]	; (80061a8 <HAL_ADC_ConfigChannel+0x688>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d14b      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <HAL_ADC_ConfigChannel+0x678>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_ADC_ConfigChannel+0x5de>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a28      	ldr	r2, [pc, #160]	; (800619c <HAL_ADC_ConfigChannel+0x67c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x5e2>
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <HAL_ADC_ConfigChannel+0x680>)
 8006100:	e000      	b.n	8006104 <HAL_ADC_ConfigChannel+0x5e4>
 8006102:	4a28      	ldr	r2, [pc, #160]	; (80061a4 <HAL_ADC_ConfigChannel+0x684>)
 8006104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fe fae6 	bl	80046de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006112:	e036      	b.n	8006182 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a28      	ldr	r2, [pc, #160]	; (80061bc <HAL_ADC_ConfigChannel+0x69c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d131      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x662>
 800611e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d12c      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <HAL_ADC_ConfigChannel+0x688>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d127      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_ADC_ConfigChannel+0x678>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_ADC_ConfigChannel+0x626>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a16      	ldr	r2, [pc, #88]	; (800619c <HAL_ADC_ConfigChannel+0x67c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <HAL_ADC_ConfigChannel+0x62a>
 8006146:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <HAL_ADC_ConfigChannel+0x680>)
 8006148:	e000      	b.n	800614c <HAL_ADC_ConfigChannel+0x62c>
 800614a:	4a16      	ldr	r2, [pc, #88]	; (80061a4 <HAL_ADC_ConfigChannel+0x684>)
 800614c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006152:	4619      	mov	r1, r3
 8006154:	4610      	mov	r0, r2
 8006156:	f7fe fac2 	bl	80046de <LL_ADC_SetCommonPathInternalCh>
 800615a:	e012      	b.n	8006182 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800616e:	e008      	b.n	8006182 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800618a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800618e:	4618      	mov	r0, r3
 8006190:	3784      	adds	r7, #132	; 0x84
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}
 8006196:	bf00      	nop
 8006198:	40022000 	.word	0x40022000
 800619c:	40022100 	.word	0x40022100
 80061a0:	40022300 	.word	0x40022300
 80061a4:	58026300 	.word	0x58026300
 80061a8:	58026000 	.word	0x58026000
 80061ac:	cb840000 	.word	0xcb840000
 80061b0:	20000000 	.word	0x20000000
 80061b4:	053e2d63 	.word	0x053e2d63
 80061b8:	c7520000 	.word	0xc7520000
 80061bc:	cfb80000 	.word	0xcfb80000

080061c0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b094      	sub	sp, #80	; 0x50
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061d8:	d003      	beq.n	80061e2 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80061de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_ADC_AnalogWDGConfig+0x30>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e304      	b.n	80067fa <HAL_ADC_AnalogWDGConfig+0x63a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fc93 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 8006202:	64b8      	str	r0, [r7, #72]	; 0x48
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fcb5 	bl	8004b78 <LL_ADC_INJ_IsConversionOngoing>
 800620e:	6478      	str	r0, [r7, #68]	; 0x44
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 82e2 	bne.w	80067dc <HAL_ADC_AnalogWDGConfig+0x61c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800621a:	2b00      	cmp	r3, #0
 800621c:	f040 82de 	bne.w	80067dc <HAL_ADC_AnalogWDGConfig+0x61c>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a9b      	ldr	r2, [pc, #620]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f040 80fa 	bne.w	8006420 <HAL_ADC_AnalogWDGConfig+0x260>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006234:	d034      	beq.n	80062a0 <HAL_ADC_AnalogWDGConfig+0xe0>
 8006236:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800623a:	d856      	bhi.n	80062ea <HAL_ADC_AnalogWDGConfig+0x12a>
 800623c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006240:	d04b      	beq.n	80062da <HAL_ADC_AnalogWDGConfig+0x11a>
 8006242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006246:	d850      	bhi.n	80062ea <HAL_ADC_AnalogWDGConfig+0x12a>
 8006248:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800624c:	d01b      	beq.n	8006286 <HAL_ADC_AnalogWDGConfig+0xc6>
 800624e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006252:	d84a      	bhi.n	80062ea <HAL_ADC_AnalogWDGConfig+0x12a>
 8006254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006258:	d037      	beq.n	80062ca <HAL_ADC_AnalogWDGConfig+0x10a>
 800625a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800625e:	d844      	bhi.n	80062ea <HAL_ADC_AnalogWDGConfig+0x12a>
 8006260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006264:	d029      	beq.n	80062ba <HAL_ADC_AnalogWDGConfig+0xfa>
 8006266:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800626a:	d13e      	bne.n	80062ea <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006278:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800627c:	461a      	mov	r2, r3
 800627e:	4985      	ldr	r1, [pc, #532]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006280:	f7fe fb44 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006284:	e039      	b.n	80062fa <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006292:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8006296:	461a      	mov	r2, r3
 8006298:	497e      	ldr	r1, [pc, #504]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800629a:	f7fe fb37 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800629e:	e02c      	b.n	80062fa <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80062ac:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 80062b0:	461a      	mov	r2, r3
 80062b2:	4978      	ldr	r1, [pc, #480]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80062b4:	f7fe fb2a 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80062b8:	e01f      	b.n	80062fa <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a76      	ldr	r2, [pc, #472]	; (8006498 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 80062c0:	4974      	ldr	r1, [pc, #464]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fb22 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062c8:	e017      	b.n	80062fa <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a73      	ldr	r2, [pc, #460]	; (800649c <HAL_ADC_AnalogWDGConfig+0x2dc>)
 80062d0:	4970      	ldr	r1, [pc, #448]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fb1a 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062d8:	e00f      	b.n	80062fa <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a70      	ldr	r2, [pc, #448]	; (80064a0 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 80062e0:	496c      	ldr	r1, [pc, #432]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fb12 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062e8:	e007      	b.n	80062fa <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2200      	movs	r2, #0
 80062f0:	4968      	ldr	r1, [pc, #416]	; (8006494 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fb0a 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062f8:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80062fa:	4b6a      	ldr	r3, [pc, #424]	; (80064a4 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006306:	d10b      	bne.n	8006320 <HAL_ADC_AnalogWDGConfig+0x160>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	e01d      	b.n	800635c <HAL_ADC_AnalogWDGConfig+0x19c>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0310 	and.w	r3, r3, #16
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_ADC_AnalogWDGConfig+0x186>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	e00a      	b.n	800635c <HAL_ADC_AnalogWDGConfig+0x19c>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800635e:	4b51      	ldr	r3, [pc, #324]	; (80064a4 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800636a:	d10b      	bne.n	8006384 <HAL_ADC_AnalogWDGConfig+0x1c4>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695a      	ldr	r2, [r3, #20]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	e01d      	b.n	80063c0 <HAL_ADC_AnalogWDGConfig+0x200>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <HAL_ADC_AnalogWDGConfig+0x1ea>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695a      	ldr	r2, [r3, #20]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	089b      	lsrs	r3, r3, #2
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	e00a      	b.n	80063c0 <HAL_ADC_AnalogWDGConfig+0x200>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }
#else
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063d2:	430a      	orrs	r2, r1
 80063d4:	621a      	str	r2, [r3, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e6:	430a      	orrs	r2, r1
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fbcf 	bl	8004b9e <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	7b1b      	ldrb	r3, [r3, #12]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d105      	bne.n	8006414 <HAL_ADC_AnalogWDGConfig+0x254>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	f7fe fbef 	bl	8004bf0 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006412:	e1ec      	b.n	80067ee <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fc19 	bl	8004c50 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800641e:	e1e6      	b.n	80067ee <HAL_ADC_AnalogWDGConfig+0x62e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006428:	d020      	beq.n	800646c <HAL_ADC_AnalogWDGConfig+0x2ac>
 800642a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800642e:	f200 80f3 	bhi.w	8006618 <HAL_ADC_AnalogWDGConfig+0x458>
 8006432:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006436:	f000 808a 	beq.w	800654e <HAL_ADC_AnalogWDGConfig+0x38e>
 800643a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800643e:	f200 80eb 	bhi.w	8006618 <HAL_ADC_AnalogWDGConfig+0x458>
 8006442:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006446:	d011      	beq.n	800646c <HAL_ADC_AnalogWDGConfig+0x2ac>
 8006448:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800644c:	f200 80e4 	bhi.w	8006618 <HAL_ADC_AnalogWDGConfig+0x458>
 8006450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006454:	d07b      	beq.n	800654e <HAL_ADC_AnalogWDGConfig+0x38e>
 8006456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800645a:	f200 80dd 	bhi.w	8006618 <HAL_ADC_AnalogWDGConfig+0x458>
 800645e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006462:	d074      	beq.n	800654e <HAL_ADC_AnalogWDGConfig+0x38e>
 8006464:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006468:	f040 80d6 	bne.w	8006618 <HAL_ADC_AnalogWDGConfig+0x458>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <HAL_ADC_AnalogWDGConfig+0x2e8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d13b      	bne.n	80064ee <HAL_ADC_AnalogWDGConfig+0x32e>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800647e:	2b00      	cmp	r3, #0
 8006480:	d114      	bne.n	80064ac <HAL_ADC_AnalogWDGConfig+0x2ec>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	0e9b      	lsrs	r3, r3, #26
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2201      	movs	r2, #1
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	e022      	b.n	80064da <HAL_ADC_AnalogWDGConfig+0x31a>
 8006494:	7dc00000 	.word	0x7dc00000
 8006498:	008fffff 	.word	0x008fffff
 800649c:	010fffff 	.word	0x010fffff
 80064a0:	018fffff 	.word	0x018fffff
 80064a4:	5c001000 	.word	0x5c001000
 80064a8:	001fffff 	.word	0x001fffff
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	fa93 f3a3 	rbit	r3, r3
 80064b8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_ADC_AnalogWDGConfig+0x308>
    return 32U;
 80064c4:	2320      	movs	r3, #32
 80064c6:	e003      	b.n	80064d0 <HAL_ADC_AnalogWDGConfig+0x310>
  return __builtin_clz(value);
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	fab3 f383 	clz	r3, r3
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2201      	movs	r2, #1
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	430b      	orrs	r3, r1
 80064e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80064ec:	e09d      	b.n	800662a <HAL_ADC_AnalogWDGConfig+0x46a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <HAL_ADC_AnalogWDGConfig+0x34c>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	0e9b      	lsrs	r3, r3, #26
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2201      	movs	r2, #1
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	e016      	b.n	800653a <HAL_ADC_AnalogWDGConfig+0x37a>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	fa93 f3a3 	rbit	r3, r3
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_ADC_AnalogWDGConfig+0x368>
    return 32U;
 8006524:	2320      	movs	r3, #32
 8006526:	e003      	b.n	8006530 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	fab3 f383 	clz	r3, r3
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2201      	movs	r2, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	430b      	orrs	r3, r1
 8006548:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 800654c:	e06d      	b.n	800662a <HAL_ADC_AnalogWDGConfig+0x46a>
          else
          {
#endif  /*ADC_VER_V5_V90*/
            /* Update AWD by bitfield to keep the possibility to monitor        */
            /* several channels by successive calls of this function.           */
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4aa0      	ldr	r2, [pc, #640]	; (80067d4 <HAL_ADC_AnalogWDGConfig+0x614>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d12f      	bne.n	80065b8 <HAL_ADC_AnalogWDGConfig+0x3f8>
            {
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006560:	2b00      	cmp	r3, #0
 8006562:	d108      	bne.n	8006576 <HAL_ADC_AnalogWDGConfig+0x3b6>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	0e9b      	lsrs	r3, r3, #26
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2201      	movs	r2, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	e016      	b.n	80065a4 <HAL_ADC_AnalogWDGConfig+0x3e4>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	fa93 f3a3 	rbit	r3, r3
 8006582:	61bb      	str	r3, [r7, #24]
  return result;
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_ADC_AnalogWDGConfig+0x3d2>
    return 32U;
 800658e:	2320      	movs	r3, #32
 8006590:	e003      	b.n	800659a <HAL_ADC_AnalogWDGConfig+0x3da>
  return __builtin_clz(value);
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	fab3 f383 	clz	r3, r3
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2201      	movs	r2, #1
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 80065b6:	e038      	b.n	800662a <HAL_ADC_AnalogWDGConfig+0x46a>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d108      	bne.n	80065d6 <HAL_ADC_AnalogWDGConfig+0x416>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	0e9b      	lsrs	r3, r3, #26
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	2201      	movs	r2, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	e016      	b.n	8006604 <HAL_ADC_AnalogWDGConfig+0x444>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	fa93 f3a3 	rbit	r3, r3
 80065e2:	60fb      	str	r3, [r7, #12]
  return result;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_ADC_AnalogWDGConfig+0x432>
    return 32U;
 80065ee:	2320      	movs	r3, #32
 80065f0:	e003      	b.n	80065fa <HAL_ADC_AnalogWDGConfig+0x43a>
  return __builtin_clz(value);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	fab3 f383 	clz	r3, r3
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2201      	movs	r2, #1
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	430b      	orrs	r3, r1
 8006612:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8006616:	e008      	b.n	800662a <HAL_ADC_AnalogWDGConfig+0x46a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	4619      	mov	r1, r3
 8006624:	f7fe f972 	bl	800490c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006628:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800662a:	4b6b      	ldr	r3, [pc, #428]	; (80067d8 <HAL_ADC_AnalogWDGConfig+0x618>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006636:	d10b      	bne.n	8006650 <HAL_ADC_AnalogWDGConfig+0x490>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	089b      	lsrs	r3, r3, #2
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	e01d      	b.n	800668c <HAL_ADC_AnalogWDGConfig+0x4cc>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <HAL_ADC_AnalogWDGConfig+0x4b6>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	089b      	lsrs	r3, r3, #2
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	e00a      	b.n	800668c <HAL_ADC_AnalogWDGConfig+0x4cc>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	089b      	lsrs	r3, r3, #2
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800668e:	4b52      	ldr	r3, [pc, #328]	; (80067d8 <HAL_ADC_AnalogWDGConfig+0x618>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669a:	d10b      	bne.n	80066b4 <HAL_ADC_AnalogWDGConfig+0x4f4>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	695a      	ldr	r2, [r3, #20]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	e01d      	b.n	80066f0 <HAL_ADC_AnalogWDGConfig+0x530>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <HAL_ADC_AnalogWDGConfig+0x51a>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	089b      	lsrs	r3, r3, #2
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	e00a      	b.n	80066f0 <HAL_ADC_AnalogWDGConfig+0x530>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	089b      	lsrs	r3, r3, #2
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
        }
      }
#else
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a37      	ldr	r2, [pc, #220]	; (80067d4 <HAL_ADC_AnalogWDGConfig+0x614>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d118      	bne.n	800672e <HAL_ADC_AnalogWDGConfig+0x56e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006704:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800670e:	430a      	orrs	r2, r1
 8006710:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800671c:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006726:	430a      	orrs	r2, r1
 8006728:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800672c:	e017      	b.n	800675e <HAL_ADC_AnalogWDGConfig+0x59e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006736:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006740:	430a      	orrs	r2, r1
 8006742:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800674e:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006758:	430a      	orrs	r2, r1
 800675a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <HAL_ADC_AnalogWDGConfig+0x614>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d11a      	bne.n	800679e <HAL_ADC_AnalogWDGConfig+0x5de>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fa1d 	bl	8004bb8 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	7b1b      	ldrb	r3, [r3, #12]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d105      	bne.n	8006792 <HAL_ADC_AnalogWDGConfig+0x5d2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fa40 	bl	8004c10 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006790:	e02d      	b.n	80067ee <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fa6a 	bl	8004c70 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800679c:	e027      	b.n	80067ee <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fa10 	bl	8004bd4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	7b1b      	ldrb	r3, [r3, #12]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <HAL_ADC_AnalogWDGConfig+0x608>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe fa35 	bl	8004c30 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067c6:	e012      	b.n	80067ee <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe fa5f 	bl	8004c90 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067d2:	e00c      	b.n	80067ee <HAL_ADC_AnalogWDGConfig+0x62e>
 80067d4:	001fffff 	.word	0x001fffff
 80067d8:	5c001000 	.word	0x5c001000
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3750      	adds	r7, #80	; 0x50
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop

08006804 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe f984 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 8006820:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe f9a6 	bl	8004b78 <LL_ADC_INJ_IsConversionOngoing>
 800682c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d103      	bne.n	800683c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 8098 	beq.w	800696c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02a      	beq.n	80068a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	7d5b      	ldrb	r3, [r3, #21]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d126      	bne.n	80068a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	7d1b      	ldrb	r3, [r3, #20]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d122      	bne.n	80068a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800685a:	2301      	movs	r3, #1
 800685c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800685e:	e014      	b.n	800688a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4a45      	ldr	r2, [pc, #276]	; (8006978 <ADC_ConversionStop+0x174>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d90d      	bls.n	8006884 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	f043 0210 	orr.w	r2, r3, #16
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006878:	f043 0201 	orr.w	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e074      	b.n	800696e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d1e3      	bne.n	8006860 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2240      	movs	r2, #64	; 0x40
 800689e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d014      	beq.n	80068d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe f93c 	bl	8004b28 <LL_ADC_REG_IsConversionOngoing>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00c      	beq.n	80068d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe f8f9 	bl	8004ab2 <LL_ADC_IsDisableOngoing>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe f918 	bl	8004b00 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d014      	beq.n	8006900 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe f94c 	bl	8004b78 <LL_ADC_INJ_IsConversionOngoing>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe f8e1 	bl	8004ab2 <LL_ADC_IsDisableOngoing>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe f928 	bl	8004b50 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d005      	beq.n	8006912 <ADC_ConversionStop+0x10e>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b03      	cmp	r3, #3
 800690a:	d105      	bne.n	8006918 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800690c:	230c      	movs	r3, #12
 800690e:	617b      	str	r3, [r7, #20]
        break;
 8006910:	e005      	b.n	800691e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006912:	2308      	movs	r3, #8
 8006914:	617b      	str	r3, [r7, #20]
        break;
 8006916:	e002      	b.n	800691e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006918:	2304      	movs	r3, #4
 800691a:	617b      	str	r3, [r7, #20]
        break;
 800691c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800691e:	f7fd fe8f 	bl	8004640 <HAL_GetTick>
 8006922:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006924:	e01b      	b.n	800695e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006926:	f7fd fe8b 	bl	8004640 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b05      	cmp	r3, #5
 8006932:	d914      	bls.n	800695e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006946:	f043 0210 	orr.w	r2, r3, #16
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f043 0201 	orr.w	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e007      	b.n	800696e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4013      	ands	r3, r2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1dc      	bne.n	8006926 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	000cdbff 	.word	0x000cdbff

0800697c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe f87f 	bl	8004a8c <LL_ADC_IsEnabled>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d16e      	bne.n	8006a72 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	4b38      	ldr	r3, [pc, #224]	; (8006a7c <ADC_Enable+0x100>)
 800699c:	4013      	ands	r3, r2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00d      	beq.n	80069be <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f043 0210 	orr.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e05a      	b.n	8006a74 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe f83a 	bl	8004a3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80069c8:	f7fd fe3a 	bl	8004640 <HAL_GetTick>
 80069cc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <ADC_Enable+0x104>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <ADC_Enable+0x66>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <ADC_Enable+0x108>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d101      	bne.n	80069e6 <ADC_Enable+0x6a>
 80069e2:	4b29      	ldr	r3, [pc, #164]	; (8006a88 <ADC_Enable+0x10c>)
 80069e4:	e000      	b.n	80069e8 <ADC_Enable+0x6c>
 80069e6:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <ADC_Enable+0x110>)
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd ffbd 	bl	8004968 <LL_ADC_GetMultimode>
 80069ee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <ADC_Enable+0x108>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d002      	beq.n	8006a00 <ADC_Enable+0x84>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	e000      	b.n	8006a02 <ADC_Enable+0x86>
 8006a00:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <ADC_Enable+0x104>)
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6812      	ldr	r2, [r2, #0]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d02c      	beq.n	8006a64 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d130      	bne.n	8006a72 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a10:	e028      	b.n	8006a64 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe f838 	bl	8004a8c <LL_ADC_IsEnabled>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d104      	bne.n	8006a2c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe f808 	bl	8004a3c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a2c:	f7fd fe08 	bl	8004640 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d914      	bls.n	8006a64 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d00d      	beq.n	8006a64 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4c:	f043 0210 	orr.w	r2, r3, #16
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a58:	f043 0201 	orr.w	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e007      	b.n	8006a74 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d1cf      	bne.n	8006a12 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	8000003f 	.word	0x8000003f
 8006a80:	40022000 	.word	0x40022000
 8006a84:	40022100 	.word	0x40022100
 8006a88:	40022300 	.word	0x40022300
 8006a8c:	58026300 	.word	0x58026300

08006a90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe f808 	bl	8004ab2 <LL_ADC_IsDisableOngoing>
 8006aa2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fd ffef 	bl	8004a8c <LL_ADC_IsEnabled>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d047      	beq.n	8006b44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d144      	bne.n	8006b44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 030d 	and.w	r3, r3, #13
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10c      	bne.n	8006ae2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fd ffc9 	bl	8004a64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ada:	f7fd fdb1 	bl	8004640 <HAL_GetTick>
 8006ade:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ae0:	e029      	b.n	8006b36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae6:	f043 0210 	orr.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af2:	f043 0201 	orr.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e023      	b.n	8006b46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006afe:	f7fd fd9f 	bl	8004640 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d914      	bls.n	8006b36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1e:	f043 0210 	orr.w	r2, r3, #16
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2a:	f043 0201 	orr.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e007      	b.n	8006b46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1dc      	bne.n	8006afe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a79      	ldr	r2, [pc, #484]	; (8006d44 <ADC_ConfigureBoostMode+0x1f4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <ADC_ConfigureBoostMode+0x1c>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a78      	ldr	r2, [pc, #480]	; (8006d48 <ADC_ConfigureBoostMode+0x1f8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d109      	bne.n	8006b80 <ADC_ConfigureBoostMode+0x30>
 8006b6c:	4b77      	ldr	r3, [pc, #476]	; (8006d4c <ADC_ConfigureBoostMode+0x1fc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	e008      	b.n	8006b92 <ADC_ConfigureBoostMode+0x42>
 8006b80:	4b73      	ldr	r3, [pc, #460]	; (8006d50 <ADC_ConfigureBoostMode+0x200>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	bf14      	ite	ne
 8006b8c:	2301      	movne	r3, #1
 8006b8e:	2300      	moveq	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01c      	beq.n	8006bd0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006b96:	f002 fb01 	bl	800919c <HAL_RCC_GetHCLKFreq>
 8006b9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ba4:	d010      	beq.n	8006bc8 <ADC_ConfigureBoostMode+0x78>
 8006ba6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006baa:	d871      	bhi.n	8006c90 <ADC_ConfigureBoostMode+0x140>
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d002      	beq.n	8006bb8 <ADC_ConfigureBoostMode+0x68>
 8006bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb6:	d16b      	bne.n	8006c90 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc4:	60fb      	str	r3, [r7, #12]
        break;
 8006bc6:	e066      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	60fb      	str	r3, [r7, #12]
        break;
 8006bce:	e062      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006bd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006bd4:	f003 fac6 	bl	800a164 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006be2:	d051      	beq.n	8006c88 <ADC_ConfigureBoostMode+0x138>
 8006be4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006be8:	d854      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006bea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006bee:	d047      	beq.n	8006c80 <ADC_ConfigureBoostMode+0x130>
 8006bf0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006bf4:	d84e      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006bf6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006bfa:	d03d      	beq.n	8006c78 <ADC_ConfigureBoostMode+0x128>
 8006bfc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006c00:	d848      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c06:	d033      	beq.n	8006c70 <ADC_ConfigureBoostMode+0x120>
 8006c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c0c:	d842      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006c0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006c12:	d029      	beq.n	8006c68 <ADC_ConfigureBoostMode+0x118>
 8006c14:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006c18:	d83c      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006c1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c1e:	d01a      	beq.n	8006c56 <ADC_ConfigureBoostMode+0x106>
 8006c20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c24:	d836      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006c26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006c2a:	d014      	beq.n	8006c56 <ADC_ConfigureBoostMode+0x106>
 8006c2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006c30:	d830      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c36:	d00e      	beq.n	8006c56 <ADC_ConfigureBoostMode+0x106>
 8006c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c3c:	d82a      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006c3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c42:	d008      	beq.n	8006c56 <ADC_ConfigureBoostMode+0x106>
 8006c44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c48:	d824      	bhi.n	8006c94 <ADC_ConfigureBoostMode+0x144>
 8006c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c4e:	d002      	beq.n	8006c56 <ADC_ConfigureBoostMode+0x106>
 8006c50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c54:	d11e      	bne.n	8006c94 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	0c9b      	lsrs	r3, r3, #18
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	60fb      	str	r3, [r7, #12]
        break;
 8006c66:	e016      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	091b      	lsrs	r3, r3, #4
 8006c6c:	60fb      	str	r3, [r7, #12]
        break;
 8006c6e:	e012      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	60fb      	str	r3, [r7, #12]
        break;
 8006c76:	e00e      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	099b      	lsrs	r3, r3, #6
 8006c7c:	60fb      	str	r3, [r7, #12]
        break;
 8006c7e:	e00a      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	60fb      	str	r3, [r7, #12]
        break;
 8006c86:	e006      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	60fb      	str	r3, [r7, #12]
        break;
 8006c8e:	e002      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
        break;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8006c94:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006c96:	f7fd fd03 	bl	80046a0 <HAL_GetREVID>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d815      	bhi.n	8006cd0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a2b      	ldr	r2, [pc, #172]	; (8006d54 <ADC_ConfigureBoostMode+0x204>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d908      	bls.n	8006cbe <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006cbc:	e03e      	b.n	8006d3c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ccc:	609a      	str	r2, [r3, #8]
}
 8006cce:	e035      	b.n	8006d3c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <ADC_ConfigureBoostMode+0x208>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d808      	bhi.n	8006cf0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006cec:	609a      	str	r2, [r3, #8]
}
 8006cee:	e025      	b.n	8006d3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4a1a      	ldr	r2, [pc, #104]	; (8006d5c <ADC_ConfigureBoostMode+0x20c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d80a      	bhi.n	8006d0e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d0a:	609a      	str	r2, [r3, #8]
}
 8006d0c:	e016      	b.n	8006d3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <ADC_ConfigureBoostMode+0x210>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d80a      	bhi.n	8006d2c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d28:	609a      	str	r2, [r3, #8]
}
 8006d2a:	e007      	b.n	8006d3c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40022000 	.word	0x40022000
 8006d48:	40022100 	.word	0x40022100
 8006d4c:	40022300 	.word	0x40022300
 8006d50:	58026300 	.word	0x58026300
 8006d54:	01312d00 	.word	0x01312d00
 8006d58:	005f5e10 	.word	0x005f5e10
 8006d5c:	00bebc20 	.word	0x00bebc20
 8006d60:	017d7840 	.word	0x017d7840

08006d64 <LL_ADC_IsEnabled>:
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <LL_ADC_IsEnabled+0x18>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <LL_ADC_IsEnabled+0x1a>
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <LL_ADC_REG_IsConversionOngoing>:
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d101      	bne.n	8006da2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b09f      	sub	sp, #124	; 0x7c
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e0be      	b.n	8006fb0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a5c      	ldr	r2, [pc, #368]	; (8006fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d102      	bne.n	8006e52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e4c:	4b5b      	ldr	r3, [pc, #364]	; (8006fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	e001      	b.n	8006e56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10b      	bne.n	8006e74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e09d      	b.n	8006fb0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ff87 	bl	8006d8a <LL_ADC_REG_IsConversionOngoing>
 8006e7c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff ff81 	bl	8006d8a <LL_ADC_REG_IsConversionOngoing>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d17f      	bne.n	8006f8e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d17c      	bne.n	8006f8e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a47      	ldr	r2, [pc, #284]	; (8006fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a46      	ldr	r2, [pc, #280]	; (8006fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d101      	bne.n	8006eac <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006ea8:	4b45      	ldr	r3, [pc, #276]	; (8006fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006eaa:	e000      	b.n	8006eae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006eac:	4b45      	ldr	r3, [pc, #276]	; (8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006eae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d039      	beq.n	8006f2c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a3a      	ldr	r2, [pc, #232]	; (8006fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a38      	ldr	r2, [pc, #224]	; (8006fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10e      	bne.n	8006efc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006ede:	4836      	ldr	r0, [pc, #216]	; (8006fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ee0:	f7ff ff40 	bl	8006d64 <LL_ADC_IsEnabled>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	4835      	ldr	r0, [pc, #212]	; (8006fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ee8:	f7ff ff3c 	bl	8006d64 <LL_ADC_IsEnabled>
 8006eec:	4603      	mov	r3, r0
 8006eee:	4323      	orrs	r3, r4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	e008      	b.n	8006f0e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006efc:	4832      	ldr	r0, [pc, #200]	; (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006efe:	f7ff ff31 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d047      	beq.n	8006fa2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	6811      	ldr	r1, [r2, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	6892      	ldr	r2, [r2, #8]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	431a      	orrs	r2, r3
 8006f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f28:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f2a:	e03a      	b.n	8006fa2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f36:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a1e      	ldr	r2, [pc, #120]	; (8006fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d10e      	bne.n	8006f6a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006f4c:	481a      	ldr	r0, [pc, #104]	; (8006fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f4e:	f7ff ff09 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f52:	4604      	mov	r4, r0
 8006f54:	4819      	ldr	r0, [pc, #100]	; (8006fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f56:	f7ff ff05 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4323      	orrs	r3, r4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	e008      	b.n	8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006f6a:	4817      	ldr	r0, [pc, #92]	; (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f6c:	f7ff fefa 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bf0c      	ite	eq
 8006f76:	2301      	moveq	r3, #1
 8006f78:	2300      	movne	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d010      	beq.n	8006fa2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f8a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f8c:	e009      	b.n	8006fa2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	f043 0220 	orr.w	r2, r3, #32
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006fa0:	e000      	b.n	8006fa4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fa2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006fac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	377c      	adds	r7, #124	; 0x7c
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd90      	pop	{r4, r7, pc}
 8006fb8:	40022000 	.word	0x40022000
 8006fbc:	40022100 	.word	0x40022100
 8006fc0:	40022300 	.word	0x40022300
 8006fc4:	58026300 	.word	0x58026300
 8006fc8:	58026000 	.word	0x58026000
 8006fcc:	fffff0e0 	.word	0xfffff0e0

08006fd0 <__NVIC_SetPriorityGrouping>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <__NVIC_SetPriorityGrouping+0x40>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fec:	4013      	ands	r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <__NVIC_SetPriorityGrouping+0x44>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ffe:	4a04      	ldr	r2, [pc, #16]	; (8007010 <__NVIC_SetPriorityGrouping+0x40>)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	60d3      	str	r3, [r2, #12]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	e000ed00 	.word	0xe000ed00
 8007014:	05fa0000 	.word	0x05fa0000

08007018 <__NVIC_GetPriorityGrouping>:
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <__NVIC_GetPriorityGrouping+0x18>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	f003 0307 	and.w	r3, r3, #7
}
 8007026:	4618      	mov	r0, r3
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	e000ed00 	.word	0xe000ed00

08007034 <__NVIC_EnableIRQ>:
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800703e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	db0b      	blt.n	800705e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007046:	88fb      	ldrh	r3, [r7, #6]
 8007048:	f003 021f 	and.w	r2, r3, #31
 800704c:	4907      	ldr	r1, [pc, #28]	; (800706c <__NVIC_EnableIRQ+0x38>)
 800704e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	2001      	movs	r0, #1
 8007056:	fa00 f202 	lsl.w	r2, r0, r2
 800705a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	e000e100 	.word	0xe000e100

08007070 <__NVIC_SetPriority>:
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800707c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	db0a      	blt.n	800709a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	490c      	ldr	r1, [pc, #48]	; (80070bc <__NVIC_SetPriority+0x4c>)
 800708a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708e:	0112      	lsls	r2, r2, #4
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	440b      	add	r3, r1
 8007094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007098:	e00a      	b.n	80070b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4908      	ldr	r1, [pc, #32]	; (80070c0 <__NVIC_SetPriority+0x50>)
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	3b04      	subs	r3, #4
 80070a8:	0112      	lsls	r2, r2, #4
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	440b      	add	r3, r1
 80070ae:	761a      	strb	r2, [r3, #24]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	e000e100 	.word	0xe000e100
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <NVIC_EncodePriority>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	; 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f1c3 0307 	rsb	r3, r3, #7
 80070de:	2b04      	cmp	r3, #4
 80070e0:	bf28      	it	cs
 80070e2:	2304      	movcs	r3, #4
 80070e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2b06      	cmp	r3, #6
 80070ec:	d902      	bls.n	80070f4 <NVIC_EncodePriority+0x30>
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	3b03      	subs	r3, #3
 80070f2:	e000      	b.n	80070f6 <NVIC_EncodePriority+0x32>
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070f8:	f04f 32ff 	mov.w	r2, #4294967295
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43da      	mvns	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	401a      	ands	r2, r3
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800710c:	f04f 31ff 	mov.w	r1, #4294967295
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	43d9      	mvns	r1, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800711c:	4313      	orrs	r3, r2
}
 800711e:	4618      	mov	r0, r3
 8007120:	3724      	adds	r7, #36	; 0x24
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff ff4c 	bl	8006fd0 <__NVIC_SetPriorityGrouping>
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800714e:	f7ff ff63 	bl	8007018 <__NVIC_GetPriorityGrouping>
 8007152:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	6978      	ldr	r0, [r7, #20]
 800715a:	f7ff ffb3 	bl	80070c4 <NVIC_EncodePriority>
 800715e:	4602      	mov	r2, r0
 8007160:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff ff82 	bl	8007070 <__NVIC_SetPriority>
}
 800716c:	bf00      	nop
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800717e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff ff56 	bl	8007034 <__NVIC_EnableIRQ>
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e054      	b.n	800724c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7f5b      	ldrb	r3, [r3, #29]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7f9 fbfa 	bl	80009ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10c      	bne.n	80071e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a22      	ldr	r2, [pc, #136]	; (8007254 <HAL_CRC_Init+0xc4>)
 80071cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0218 	bic.w	r2, r2, #24
 80071dc:	609a      	str	r2, [r3, #8]
 80071de:	e00c      	b.n	80071fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6899      	ldr	r1, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f834 	bl	8007258 <HAL_CRCEx_Polynomial_Set>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e028      	b.n	800724c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	795b      	ldrb	r3, [r3, #5]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f04f 32ff 	mov.w	r2, #4294967295
 800720a:	611a      	str	r2, [r3, #16]
 800720c:	e004      	b.n	8007218 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6912      	ldr	r2, [r2, #16]
 8007216:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695a      	ldr	r2, [r3, #20]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	04c11db7 	.word	0x04c11db7

08007258 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007268:	231f      	movs	r3, #31
 800726a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800726c:	bf00      	nop
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1e5a      	subs	r2, r3, #1
 8007272:	613a      	str	r2, [r7, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d009      	beq.n	800728c <HAL_CRCEx_Polynomial_Set+0x34>
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b18      	cmp	r3, #24
 8007290:	d846      	bhi.n	8007320 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	08007327 	.word	0x08007327
 800729c:	08007321 	.word	0x08007321
 80072a0:	08007321 	.word	0x08007321
 80072a4:	08007321 	.word	0x08007321
 80072a8:	08007321 	.word	0x08007321
 80072ac:	08007321 	.word	0x08007321
 80072b0:	08007321 	.word	0x08007321
 80072b4:	08007321 	.word	0x08007321
 80072b8:	08007315 	.word	0x08007315
 80072bc:	08007321 	.word	0x08007321
 80072c0:	08007321 	.word	0x08007321
 80072c4:	08007321 	.word	0x08007321
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007321 	.word	0x08007321
 80072d0:	08007321 	.word	0x08007321
 80072d4:	08007321 	.word	0x08007321
 80072d8:	08007309 	.word	0x08007309
 80072dc:	08007321 	.word	0x08007321
 80072e0:	08007321 	.word	0x08007321
 80072e4:	08007321 	.word	0x08007321
 80072e8:	08007321 	.word	0x08007321
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007321 	.word	0x08007321
 80072f4:	08007321 	.word	0x08007321
 80072f8:	080072fd 	.word	0x080072fd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b06      	cmp	r3, #6
 8007300:	d913      	bls.n	800732a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007306:	e010      	b.n	800732a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b07      	cmp	r3, #7
 800730c:	d90f      	bls.n	800732e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007312:	e00c      	b.n	800732e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2b0f      	cmp	r3, #15
 8007318:	d90b      	bls.n	8007332 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800731e:	e008      	b.n	8007332 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
      break;
 8007324:	e006      	b.n	8007334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007326:	bf00      	nop
 8007328:	e004      	b.n	8007334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800732a:	bf00      	nop
 800732c:	e002      	b.n	8007334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800732e:	bf00      	nop
 8007330:	e000      	b.n	8007334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007332:	bf00      	nop
  }
  if (status == HAL_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10d      	bne.n	8007356 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 0118 	bic.w	r1, r3, #24
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	430a      	orrs	r2, r1
 8007354:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
}
 8007358:	4618      	mov	r0, r3
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e04f      	b.n	8007416 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7f9 fb6a 	bl	8000a64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b20      	ldr	r3, [pc, #128]	; (8007420 <HAL_DMA2D_Init+0xbc>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6851      	ldr	r1, [r2, #4]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	69d2      	ldr	r2, [r2, #28]
 80073aa:	4311      	orrs	r1, r2
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ba:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <HAL_DMA2D_Init+0xc0>)
 80073bc:	4013      	ands	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6891      	ldr	r1, [r2, #8]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6992      	ldr	r2, [r2, #24]
 80073c6:	4311      	orrs	r1, r2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <HAL_DMA2D_Init+0xc4>)
 80073d8:	4013      	ands	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68d1      	ldr	r1, [r2, #12]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	430b      	orrs	r3, r1
 80073e4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	051a      	lsls	r2, r3, #20
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	055b      	lsls	r3, r3, #21
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	fff8ffbf 	.word	0xfff8ffbf
 8007424:	fffffef8 	.word	0xfffffef8
 8007428:	ffff0000 	.word	0xffff0000

0800742c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_DMA2D_ConfigLayer+0x24>
 800744c:	2302      	movs	r3, #2
 800744e:	e092      	b.n	8007576 <HAL_DMA2D_ConfigLayer+0x14a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	4613      	mov	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	3328      	adds	r3, #40	; 0x28
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007484:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007490:	4b3c      	ldr	r3, [pc, #240]	; (8007584 <HAL_DMA2D_ConfigLayer+0x158>)
 8007492:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	2b0a      	cmp	r3, #10
 800749a:	d003      	beq.n	80074a4 <HAL_DMA2D_ConfigLayer+0x78>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b09      	cmp	r3, #9
 80074a2:	d107      	bne.n	80074b4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	e005      	b.n	80074c0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	061b      	lsls	r3, r3, #24
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d120      	bne.n	8007508 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	43db      	mvns	r3, r3
 80074d0:	ea02 0103 	and.w	r1, r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	430a      	orrs	r2, r1
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2b0a      	cmp	r3, #10
 80074ee:	d003      	beq.n	80074f8 <HAL_DMA2D_ConfigLayer+0xcc>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	d135      	bne.n	8007564 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007504:	629a      	str	r2, [r3, #40]	; 0x28
 8007506:	e02d      	b.n	8007564 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b0b      	cmp	r3, #11
 800750e:	d109      	bne.n	8007524 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	049b      	lsls	r3, r3, #18
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007522:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69da      	ldr	r2, [r3, #28]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	43db      	mvns	r3, r3
 800752e:	ea02 0103 	and.w	r1, r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	430a      	orrs	r2, r1
 800753a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	6812      	ldr	r2, [r2, #0]
 8007544:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b0a      	cmp	r3, #10
 800754c:	d003      	beq.n	8007556 <HAL_DMA2D_ConfigLayer+0x12a>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b09      	cmp	r3, #9
 8007554:	d106      	bne.n	8007564 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007562:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	ff33000f 	.word	0xff33000f

08007588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007588:	b480      	push	{r7}
 800758a:	b089      	sub	sp, #36	; 0x24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007592:	2300      	movs	r3, #0
 8007594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007596:	4b89      	ldr	r3, [pc, #548]	; (80077bc <HAL_GPIO_Init+0x234>)
 8007598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800759a:	e194      	b.n	80078c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	2101      	movs	r1, #1
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	fa01 f303 	lsl.w	r3, r1, r3
 80075a8:	4013      	ands	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 8186 	beq.w	80078c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d005      	beq.n	80075cc <HAL_GPIO_Init+0x44>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d130      	bne.n	800762e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	2203      	movs	r2, #3
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	43db      	mvns	r3, r3
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	4013      	ands	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007602:	2201      	movs	r2, #1
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43db      	mvns	r3, r3
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	4013      	ands	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	091b      	lsrs	r3, r3, #4
 8007618:	f003 0201 	and.w	r2, r3, #1
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	fa02 f303 	lsl.w	r3, r2, r3
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	4313      	orrs	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b03      	cmp	r3, #3
 8007638:	d017      	beq.n	800766a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	2203      	movs	r2, #3
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43db      	mvns	r3, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	4013      	ands	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d123      	bne.n	80076be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	08da      	lsrs	r2, r3, #3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3208      	adds	r2, #8
 800767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	220f      	movs	r2, #15
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	43db      	mvns	r3, r3
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	4013      	ands	r3, r2
 8007698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	fa02 f303 	lsl.w	r3, r2, r3
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	08da      	lsrs	r2, r3, #3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3208      	adds	r2, #8
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	2203      	movs	r2, #3
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	43db      	mvns	r3, r3
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	4013      	ands	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f003 0203 	and.w	r2, r3, #3
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80e0 	beq.w	80078c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007700:	4b2f      	ldr	r3, [pc, #188]	; (80077c0 <HAL_GPIO_Init+0x238>)
 8007702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007706:	4a2e      	ldr	r2, [pc, #184]	; (80077c0 <HAL_GPIO_Init+0x238>)
 8007708:	f043 0302 	orr.w	r3, r3, #2
 800770c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007710:	4b2b      	ldr	r3, [pc, #172]	; (80077c0 <HAL_GPIO_Init+0x238>)
 8007712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800771e:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <HAL_GPIO_Init+0x23c>)
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	089b      	lsrs	r3, r3, #2
 8007724:	3302      	adds	r3, #2
 8007726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	220f      	movs	r2, #15
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	43db      	mvns	r3, r3
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	4013      	ands	r3, r2
 8007740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a20      	ldr	r2, [pc, #128]	; (80077c8 <HAL_GPIO_Init+0x240>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d052      	beq.n	80077f0 <HAL_GPIO_Init+0x268>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1f      	ldr	r2, [pc, #124]	; (80077cc <HAL_GPIO_Init+0x244>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d031      	beq.n	80077b6 <HAL_GPIO_Init+0x22e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <HAL_GPIO_Init+0x248>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d02b      	beq.n	80077b2 <HAL_GPIO_Init+0x22a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <HAL_GPIO_Init+0x24c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d025      	beq.n	80077ae <HAL_GPIO_Init+0x226>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <HAL_GPIO_Init+0x250>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01f      	beq.n	80077aa <HAL_GPIO_Init+0x222>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_GPIO_Init+0x254>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d019      	beq.n	80077a6 <HAL_GPIO_Init+0x21e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a1a      	ldr	r2, [pc, #104]	; (80077e0 <HAL_GPIO_Init+0x258>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_GPIO_Init+0x21a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <HAL_GPIO_Init+0x25c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00d      	beq.n	800779e <HAL_GPIO_Init+0x216>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a18      	ldr	r2, [pc, #96]	; (80077e8 <HAL_GPIO_Init+0x260>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d007      	beq.n	800779a <HAL_GPIO_Init+0x212>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a17      	ldr	r2, [pc, #92]	; (80077ec <HAL_GPIO_Init+0x264>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d101      	bne.n	8007796 <HAL_GPIO_Init+0x20e>
 8007792:	2309      	movs	r3, #9
 8007794:	e02d      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 8007796:	230a      	movs	r3, #10
 8007798:	e02b      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 800779a:	2308      	movs	r3, #8
 800779c:	e029      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 800779e:	2307      	movs	r3, #7
 80077a0:	e027      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 80077a2:	2306      	movs	r3, #6
 80077a4:	e025      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 80077a6:	2305      	movs	r3, #5
 80077a8:	e023      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 80077aa:	2304      	movs	r3, #4
 80077ac:	e021      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 80077ae:	2303      	movs	r3, #3
 80077b0:	e01f      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e01d      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e01b      	b.n	80077f2 <HAL_GPIO_Init+0x26a>
 80077ba:	bf00      	nop
 80077bc:	58000080 	.word	0x58000080
 80077c0:	58024400 	.word	0x58024400
 80077c4:	58000400 	.word	0x58000400
 80077c8:	58020000 	.word	0x58020000
 80077cc:	58020400 	.word	0x58020400
 80077d0:	58020800 	.word	0x58020800
 80077d4:	58020c00 	.word	0x58020c00
 80077d8:	58021000 	.word	0x58021000
 80077dc:	58021400 	.word	0x58021400
 80077e0:	58021800 	.word	0x58021800
 80077e4:	58021c00 	.word	0x58021c00
 80077e8:	58022000 	.word	0x58022000
 80077ec:	58022400 	.word	0x58022400
 80077f0:	2300      	movs	r3, #0
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	f002 0203 	and.w	r2, r2, #3
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	4093      	lsls	r3, r2
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007802:	4938      	ldr	r1, [pc, #224]	; (80078e4 <HAL_GPIO_Init+0x35c>)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	089b      	lsrs	r3, r3, #2
 8007808:	3302      	adds	r3, #2
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	43db      	mvns	r3, r3
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	4013      	ands	r3, r2
 8007820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800783e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	43db      	mvns	r3, r3
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	4013      	ands	r3, r2
 800784e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	43db      	mvns	r3, r3
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	43db      	mvns	r3, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4013      	ands	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f47f ae63 	bne.w	800759c <HAL_GPIO_Init+0x14>
  }
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	3724      	adds	r7, #36	; 0x24
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	58000400 	.word	0x58000400

080078e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	887b      	ldrh	r3, [r7, #2]
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
 8007904:	e001      	b.n	800790a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800790a:	7bfb      	ldrb	r3, [r7, #15]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	807b      	strh	r3, [r7, #2]
 8007924:	4613      	mov	r3, r2
 8007926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007928:	787b      	ldrb	r3, [r7, #1]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800792e:	887a      	ldrh	r2, [r7, #2]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007934:	e003      	b.n	800793e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007936:	887b      	ldrh	r3, [r7, #2]
 8007938:	041a      	lsls	r2, r3, #16
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	619a      	str	r2, [r3, #24]
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800795c:	887a      	ldrh	r2, [r7, #2]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4013      	ands	r3, r2
 8007962:	041a      	lsls	r2, r3, #16
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	43d9      	mvns	r1, r3
 8007968:	887b      	ldrh	r3, [r7, #2]
 800796a:	400b      	ands	r3, r1
 800796c:	431a      	orrs	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	619a      	str	r2, [r3, #24]
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	4603      	mov	r3, r0
 8007986:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	4013      	ands	r3, r2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 f804 	bl	80079b2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	4603      	mov	r3, r0
 80079ba:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e0bf      	b.n	8007b5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fb f834 	bl	8002a5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007a0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6999      	ldr	r1, [r3, #24]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6899      	ldr	r1, [r3, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b4a      	ldr	r3, [pc, #296]	; (8007b64 <HAL_LTDC_Init+0x19c>)
 8007a3c:	400b      	ands	r3, r1
 8007a3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6899      	ldr	r1, [r3, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68d9      	ldr	r1, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b3e      	ldr	r3, [pc, #248]	; (8007b64 <HAL_LTDC_Init+0x19c>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	041b      	lsls	r3, r3, #16
 8007a74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68d9      	ldr	r1, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1a      	ldr	r2, [r3, #32]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6919      	ldr	r1, [r3, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b33      	ldr	r3, [pc, #204]	; (8007b64 <HAL_LTDC_Init+0x19c>)
 8007a98:	400b      	ands	r3, r1
 8007a9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6919      	ldr	r1, [r3, #16]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6959      	ldr	r1, [r3, #20]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <HAL_LTDC_Init+0x19c>)
 8007ac6:	400b      	ands	r3, r1
 8007ac8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6959      	ldr	r1, [r3, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0206 	orr.w	r2, r2, #6
 8007b36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	f000f800 	.word	0xf000f800

08007b68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d023      	beq.n	8007bd2 <HAL_LTDC_IRQHandler+0x6a>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01e      	beq.n	8007bd2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0204 	bic.w	r2, r2, #4
 8007ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2204      	movs	r2, #4
 8007baa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bb2:	f043 0201 	orr.w	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f86f 	bl	8007cb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d023      	beq.n	8007c24 <HAL_LTDC_IRQHandler+0xbc>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01e      	beq.n	8007c24 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0202 	bic.w	r2, r2, #2
 8007bf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c04:	f043 0202 	orr.w	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2204      	movs	r2, #4
 8007c12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f846 	bl	8007cb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d01b      	beq.n	8007c66 <HAL_LTDC_IRQHandler+0xfe>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d016      	beq.n	8007c66 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f013 fcef 	bl	801b644 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01b      	beq.n	8007ca8 <HAL_LTDC_IRQHandler+0x140>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f003 0308 	and.w	r3, r3, #8
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d016      	beq.n	8007ca8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0208 	bic.w	r2, r2, #8
 8007c88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2208      	movs	r2, #8
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f80e 	bl	8007cc4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007cd8:	b5b0      	push	{r4, r5, r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_LTDC_ConfigLayer+0x1a>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e02c      	b.n	8007d4c <HAL_LTDC_ConfigLayer+0x74>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2134      	movs	r1, #52	; 0x34
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	4614      	mov	r4, r2
 8007d16:	461d      	mov	r5, r3
 8007d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 f849 	bl	8007dc4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2201      	movs	r2, #1
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bdb0      	pop	{r4, r5, r7, pc}

08007d54 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_LTDC_ProgramLineEvent+0x18>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e023      	b.n	8007db4 <HAL_LTDC_ProgramLineEvent+0x60>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0201 	bic.w	r2, r2, #1
 8007d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007d8c:	4a0c      	ldr	r2, [pc, #48]	; (8007dc0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0201 	orr.w	r2, r2, #1
 8007da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	50001000 	.word	0x50001000

08007dc4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b089      	sub	sp, #36	; 0x24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de0:	4413      	add	r3, r2
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	01db      	lsls	r3, r3, #7
 8007df0:	4413      	add	r3, r2
 8007df2:	3384      	adds	r3, #132	; 0x84
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	6812      	ldr	r2, [r2, #0]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	01d2      	lsls	r2, r2, #7
 8007e00:	440a      	add	r2, r1
 8007e02:	3284      	adds	r2, #132	; 0x84
 8007e04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e08:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e1a:	4413      	add	r3, r2
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4619      	mov	r1, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	01db      	lsls	r3, r3, #7
 8007e28:	440b      	add	r3, r1
 8007e2a:	3384      	adds	r3, #132	; 0x84
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e42:	4413      	add	r3, r2
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	01db      	lsls	r3, r3, #7
 8007e52:	4413      	add	r3, r2
 8007e54:	3384      	adds	r3, #132	; 0x84
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	01d2      	lsls	r2, r2, #7
 8007e62:	440a      	add	r2, r1
 8007e64:	3284      	adds	r2, #132	; 0x84
 8007e66:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e7a:	4413      	add	r3, r2
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4619      	mov	r1, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	01db      	lsls	r3, r3, #7
 8007e88:	440b      	add	r3, r1
 8007e8a:	3384      	adds	r3, #132	; 0x84
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	01db      	lsls	r3, r3, #7
 8007e9e:	4413      	add	r3, r2
 8007ea0:	3384      	adds	r3, #132	; 0x84
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	01d2      	lsls	r2, r2, #7
 8007eae:	440a      	add	r2, r1
 8007eb0:	3284      	adds	r2, #132	; 0x84
 8007eb2:	f023 0307 	bic.w	r3, r3, #7
 8007eb6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	01db      	lsls	r3, r3, #7
 8007ec2:	4413      	add	r3, r2
 8007ec4:	3384      	adds	r3, #132	; 0x84
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007ede:	041b      	lsls	r3, r3, #16
 8007ee0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	061b      	lsls	r3, r3, #24
 8007ee8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	01db      	lsls	r3, r3, #7
 8007ef4:	4413      	add	r3, r2
 8007ef6:	3384      	adds	r3, #132	; 0x84
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	01db      	lsls	r3, r3, #7
 8007f04:	4413      	add	r3, r2
 8007f06:	3384      	adds	r3, #132	; 0x84
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f14:	461a      	mov	r2, r3
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4619      	mov	r1, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	01db      	lsls	r3, r3, #7
 8007f28:	440b      	add	r3, r1
 8007f2a:	3384      	adds	r3, #132	; 0x84
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	01db      	lsls	r3, r3, #7
 8007f3e:	4413      	add	r3, r2
 8007f40:	3384      	adds	r3, #132	; 0x84
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	6812      	ldr	r2, [r2, #0]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	01d2      	lsls	r2, r2, #7
 8007f4e:	440a      	add	r2, r1
 8007f50:	3284      	adds	r2, #132	; 0x84
 8007f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	01db      	lsls	r3, r3, #7
 8007f62:	4413      	add	r3, r2
 8007f64:	3384      	adds	r3, #132	; 0x84
 8007f66:	461a      	mov	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	01db      	lsls	r3, r3, #7
 8007f78:	4413      	add	r3, r2
 8007f7a:	3384      	adds	r3, #132	; 0x84
 8007f7c:	69da      	ldr	r2, [r3, #28]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4619      	mov	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	01db      	lsls	r3, r3, #7
 8007f88:	440b      	add	r3, r1
 8007f8a:	3384      	adds	r3, #132	; 0x84
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4b58      	ldr	r3, [pc, #352]	; (80080f0 <LTDC_SetConfig+0x32c>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	68f9      	ldr	r1, [r7, #12]
 8007f9e:	6809      	ldr	r1, [r1, #0]
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	01c9      	lsls	r1, r1, #7
 8007fa6:	4401      	add	r1, r0
 8007fa8:	3184      	adds	r1, #132	; 0x84
 8007faa:	4313      	orrs	r3, r2
 8007fac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	01db      	lsls	r3, r3, #7
 8007fb8:	4413      	add	r3, r2
 8007fba:	3384      	adds	r3, #132	; 0x84
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	01db      	lsls	r3, r3, #7
 8007fc8:	4413      	add	r3, r2
 8007fca:	3384      	adds	r3, #132	; 0x84
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	01db      	lsls	r3, r3, #7
 8007fdc:	4413      	add	r3, r2
 8007fde:	3384      	adds	r3, #132	; 0x84
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007ff0:	2304      	movs	r3, #4
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	e01b      	b.n	800802e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d102      	bne.n	8008004 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007ffe:	2303      	movs	r3, #3
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	e014      	b.n	800802e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b04      	cmp	r3, #4
 800800a:	d00b      	beq.n	8008024 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008010:	2b02      	cmp	r3, #2
 8008012:	d007      	beq.n	8008024 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008018:	2b03      	cmp	r3, #3
 800801a:	d003      	beq.n	8008024 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008020:	2b07      	cmp	r3, #7
 8008022:	d102      	bne.n	800802a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008024:	2302      	movs	r3, #2
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	e001      	b.n	800802e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800802a:	2301      	movs	r3, #1
 800802c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	01db      	lsls	r3, r3, #7
 8008038:	4413      	add	r3, r2
 800803a:	3384      	adds	r3, #132	; 0x84
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	4611      	mov	r1, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	01d2      	lsls	r2, r2, #7
 8008048:	440a      	add	r2, r1
 800804a:	3284      	adds	r2, #132	; 0x84
 800804c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008050:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	fb02 f303 	mul.w	r3, r2, r3
 800805c:	041a      	lsls	r2, r3, #16
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6859      	ldr	r1, [r3, #4]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	1acb      	subs	r3, r1, r3
 8008068:	69f9      	ldr	r1, [r7, #28]
 800806a:	fb01 f303 	mul.w	r3, r1, r3
 800806e:	3307      	adds	r3, #7
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	6809      	ldr	r1, [r1, #0]
 8008074:	4608      	mov	r0, r1
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	01c9      	lsls	r1, r1, #7
 800807a:	4401      	add	r1, r0
 800807c:	3184      	adds	r1, #132	; 0x84
 800807e:	4313      	orrs	r3, r2
 8008080:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	01db      	lsls	r3, r3, #7
 800808c:	4413      	add	r3, r2
 800808e:	3384      	adds	r3, #132	; 0x84
 8008090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	01db      	lsls	r3, r3, #7
 800809c:	440b      	add	r3, r1
 800809e:	3384      	adds	r3, #132	; 0x84
 80080a0:	4619      	mov	r1, r3
 80080a2:	4b14      	ldr	r3, [pc, #80]	; (80080f4 <LTDC_SetConfig+0x330>)
 80080a4:	4013      	ands	r3, r2
 80080a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	461a      	mov	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	01db      	lsls	r3, r3, #7
 80080b2:	4413      	add	r3, r2
 80080b4:	3384      	adds	r3, #132	; 0x84
 80080b6:	461a      	mov	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	01db      	lsls	r3, r3, #7
 80080c8:	4413      	add	r3, r2
 80080ca:	3384      	adds	r3, #132	; 0x84
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	4611      	mov	r1, r2
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	01d2      	lsls	r2, r2, #7
 80080d8:	440a      	add	r2, r1
 80080da:	3284      	adds	r2, #132	; 0x84
 80080dc:	f043 0301 	orr.w	r3, r3, #1
 80080e0:	6013      	str	r3, [r2, #0]
}
 80080e2:	bf00      	nop
 80080e4:	3724      	adds	r7, #36	; 0x24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	fffff8f8 	.word	0xfffff8f8
 80080f4:	fffff800 	.word	0xfffff800

080080f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008100:	4b19      	ldr	r3, [pc, #100]	; (8008168 <HAL_PWREx_ConfigSupply+0x70>)
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b04      	cmp	r3, #4
 800810a:	d00a      	beq.n	8008122 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800810c:	4b16      	ldr	r3, [pc, #88]	; (8008168 <HAL_PWREx_ConfigSupply+0x70>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d001      	beq.n	800811e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e01f      	b.n	800815e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	e01d      	b.n	800815e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008122:	4b11      	ldr	r3, [pc, #68]	; (8008168 <HAL_PWREx_ConfigSupply+0x70>)
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	f023 0207 	bic.w	r2, r3, #7
 800812a:	490f      	ldr	r1, [pc, #60]	; (8008168 <HAL_PWREx_ConfigSupply+0x70>)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4313      	orrs	r3, r2
 8008130:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008132:	f7fc fa85 	bl	8004640 <HAL_GetTick>
 8008136:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008138:	e009      	b.n	800814e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800813a:	f7fc fa81 	bl	8004640 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008148:	d901      	bls.n	800814e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e007      	b.n	800815e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800814e:	4b06      	ldr	r3, [pc, #24]	; (8008168 <HAL_PWREx_ConfigSupply+0x70>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800815a:	d1ee      	bne.n	800813a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	58024800 	.word	0x58024800

0800816c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af02      	add	r7, sp, #8
 8008172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008174:	f7fc fa64 	bl	8004640 <HAL_GetTick>
 8008178:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e05f      	b.n	8008244 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fb f975 	bl	8003480 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008196:	f241 3188 	movw	r1, #5000	; 0x1388
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f85a 	bl	8008254 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	021a      	lsls	r2, r3, #8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	2120      	movs	r1, #32
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f852 	bl	8008270 <QSPI_WaitFlagStateUntilTimeout>
 80081cc:	4603      	mov	r3, r0
 80081ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d135      	bne.n	8008242 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <HAL_QSPI_Init+0xe0>)
 80081de:	4013      	ands	r3, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6852      	ldr	r2, [r2, #4]
 80081e4:	0611      	lsls	r1, r2, #24
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68d2      	ldr	r2, [r2, #12]
 80081ea:	4311      	orrs	r1, r2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	69d2      	ldr	r2, [r2, #28]
 80081f0:	4311      	orrs	r1, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6a12      	ldr	r2, [r2, #32]
 80081f6:	4311      	orrs	r1, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b12      	ldr	r3, [pc, #72]	; (8008250 <HAL_QSPI_Init+0xe4>)
 8008208:	4013      	ands	r3, r2
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6912      	ldr	r2, [r2, #16]
 800820e:	0411      	lsls	r1, r2, #16
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6952      	ldr	r2, [r2, #20]
 8008214:	4311      	orrs	r1, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6992      	ldr	r2, [r2, #24]
 800821a:	4311      	orrs	r1, r2
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6812      	ldr	r2, [r2, #0]
 8008220:	430b      	orrs	r3, r1
 8008222:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0201 	orr.w	r2, r2, #1
 8008232:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008242:	7afb      	ldrb	r3, [r7, #11]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	00ffff2f 	.word	0x00ffff2f
 8008250:	ffe0f8fe 	.word	0xffe0f8fe

08008254 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	4613      	mov	r3, r2
 800827e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008280:	e01a      	b.n	80082b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d016      	beq.n	80082b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800828a:	f7fc f9d9 	bl	8004640 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	429a      	cmp	r2, r3
 8008298:	d302      	bcc.n	80082a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10b      	bne.n	80082b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2204      	movs	r2, #4
 80082a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ac:	f043 0201 	orr.w	r2, r3, #1
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e00e      	b.n	80082d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4013      	ands	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2300      	moveq	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d1d6      	bne.n	8008282 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08c      	sub	sp, #48	; 0x30
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d102      	bne.n	80082f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f000 bc1d 	b.w	8008b2e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8087 	beq.w	8008410 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008302:	4b99      	ldr	r3, [pc, #612]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800830c:	4b96      	ldr	r3, [pc, #600]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	2b10      	cmp	r3, #16
 8008316:	d007      	beq.n	8008328 <HAL_RCC_OscConfig+0x48>
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	2b18      	cmp	r3, #24
 800831c:	d110      	bne.n	8008340 <HAL_RCC_OscConfig+0x60>
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d10b      	bne.n	8008340 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008328:	4b8f      	ldr	r3, [pc, #572]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d06c      	beq.n	800840e <HAL_RCC_OscConfig+0x12e>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d168      	bne.n	800840e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e3f6      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008348:	d106      	bne.n	8008358 <HAL_RCC_OscConfig+0x78>
 800834a:	4b87      	ldr	r3, [pc, #540]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a86      	ldr	r2, [pc, #536]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	e02e      	b.n	80083b6 <HAL_RCC_OscConfig+0xd6>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10c      	bne.n	800837a <HAL_RCC_OscConfig+0x9a>
 8008360:	4b81      	ldr	r3, [pc, #516]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a80      	ldr	r2, [pc, #512]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	4b7e      	ldr	r3, [pc, #504]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a7d      	ldr	r2, [pc, #500]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	e01d      	b.n	80083b6 <HAL_RCC_OscConfig+0xd6>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008382:	d10c      	bne.n	800839e <HAL_RCC_OscConfig+0xbe>
 8008384:	4b78      	ldr	r3, [pc, #480]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a77      	ldr	r2, [pc, #476]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800838a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	4b75      	ldr	r3, [pc, #468]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a74      	ldr	r2, [pc, #464]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	e00b      	b.n	80083b6 <HAL_RCC_OscConfig+0xd6>
 800839e:	4b72      	ldr	r3, [pc, #456]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a71      	ldr	r2, [pc, #452]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80083a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	4b6f      	ldr	r3, [pc, #444]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a6e      	ldr	r2, [pc, #440]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80083b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d013      	beq.n	80083e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083be:	f7fc f93f 	bl	8004640 <HAL_GetTick>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c6:	f7fc f93b 	bl	8004640 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b64      	cmp	r3, #100	; 0x64
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e3aa      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083d8:	4b63      	ldr	r3, [pc, #396]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0f0      	beq.n	80083c6 <HAL_RCC_OscConfig+0xe6>
 80083e4:	e014      	b.n	8008410 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e6:	f7fc f92b 	bl	8004640 <HAL_GetTick>
 80083ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083ec:	e008      	b.n	8008400 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083ee:	f7fc f927 	bl	8004640 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b64      	cmp	r3, #100	; 0x64
 80083fa:	d901      	bls.n	8008400 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e396      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008400:	4b59      	ldr	r3, [pc, #356]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f0      	bne.n	80083ee <HAL_RCC_OscConfig+0x10e>
 800840c:	e000      	b.n	8008410 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800840e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80cb 	beq.w	80085b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800841e:	4b52      	ldr	r3, [pc, #328]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008426:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008428:	4b4f      	ldr	r3, [pc, #316]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <HAL_RCC_OscConfig+0x164>
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	2b18      	cmp	r3, #24
 8008438:	d156      	bne.n	80084e8 <HAL_RCC_OscConfig+0x208>
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d151      	bne.n	80084e8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008444:	4b48      	ldr	r3, [pc, #288]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d005      	beq.n	800845c <HAL_RCC_OscConfig+0x17c>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e368      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800845c:	4b42      	ldr	r3, [pc, #264]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f023 0219 	bic.w	r2, r3, #25
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	493f      	ldr	r1, [pc, #252]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800846a:	4313      	orrs	r3, r2
 800846c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800846e:	f7fc f8e7 	bl	8004640 <HAL_GetTick>
 8008472:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008474:	e008      	b.n	8008488 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008476:	f7fc f8e3 	bl	8004640 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d901      	bls.n	8008488 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e352      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008488:	4b37      	ldr	r3, [pc, #220]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0f0      	beq.n	8008476 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008494:	f7fc f904 	bl	80046a0 <HAL_GetREVID>
 8008498:	4603      	mov	r3, r0
 800849a:	f241 0203 	movw	r2, #4099	; 0x1003
 800849e:	4293      	cmp	r3, r2
 80084a0:	d817      	bhi.n	80084d2 <HAL_RCC_OscConfig+0x1f2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	2b40      	cmp	r3, #64	; 0x40
 80084a8:	d108      	bne.n	80084bc <HAL_RCC_OscConfig+0x1dc>
 80084aa:	4b2f      	ldr	r3, [pc, #188]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084b2:	4a2d      	ldr	r2, [pc, #180]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084ba:	e07b      	b.n	80085b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084bc:	4b2a      	ldr	r3, [pc, #168]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	031b      	lsls	r3, r3, #12
 80084ca:	4927      	ldr	r1, [pc, #156]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084d0:	e070      	b.n	80085b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d2:	4b25      	ldr	r3, [pc, #148]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	061b      	lsls	r3, r3, #24
 80084e0:	4921      	ldr	r1, [pc, #132]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084e6:	e065      	b.n	80085b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d048      	beq.n	8008582 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084f0:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f023 0219 	bic.w	r2, r3, #25
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	491a      	ldr	r1, [pc, #104]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008502:	f7fc f89d 	bl	8004640 <HAL_GetTick>
 8008506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008508:	e008      	b.n	800851c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800850a:	f7fc f899 	bl	8004640 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e308      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f0      	beq.n	800850a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008528:	f7fc f8ba 	bl	80046a0 <HAL_GetREVID>
 800852c:	4603      	mov	r3, r0
 800852e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008532:	4293      	cmp	r3, r2
 8008534:	d81a      	bhi.n	800856c <HAL_RCC_OscConfig+0x28c>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d108      	bne.n	8008550 <HAL_RCC_OscConfig+0x270>
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008546:	4a08      	ldr	r2, [pc, #32]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	e031      	b.n	80085b4 <HAL_RCC_OscConfig+0x2d4>
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	031b      	lsls	r3, r3, #12
 800855e:	4902      	ldr	r1, [pc, #8]	; (8008568 <HAL_RCC_OscConfig+0x288>)
 8008560:	4313      	orrs	r3, r2
 8008562:	604b      	str	r3, [r1, #4]
 8008564:	e026      	b.n	80085b4 <HAL_RCC_OscConfig+0x2d4>
 8008566:	bf00      	nop
 8008568:	58024400 	.word	0x58024400
 800856c:	4b9a      	ldr	r3, [pc, #616]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	061b      	lsls	r3, r3, #24
 800857a:	4997      	ldr	r1, [pc, #604]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800857c:	4313      	orrs	r3, r2
 800857e:	604b      	str	r3, [r1, #4]
 8008580:	e018      	b.n	80085b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008582:	4b95      	ldr	r3, [pc, #596]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a94      	ldr	r2, [pc, #592]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858e:	f7fc f857 	bl	8004640 <HAL_GetTick>
 8008592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008594:	e008      	b.n	80085a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008596:	f7fc f853 	bl	8004640 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d901      	bls.n	80085a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e2c2      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085a8:	4b8b      	ldr	r3, [pc, #556]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1f0      	bne.n	8008596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80a9 	beq.w	8008714 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085c2:	4b85      	ldr	r3, [pc, #532]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085cc:	4b82      	ldr	r3, [pc, #520]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d007      	beq.n	80085e8 <HAL_RCC_OscConfig+0x308>
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2b18      	cmp	r3, #24
 80085dc:	d13a      	bne.n	8008654 <HAL_RCC_OscConfig+0x374>
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d135      	bne.n	8008654 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085e8:	4b7b      	ldr	r3, [pc, #492]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <HAL_RCC_OscConfig+0x320>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	2b80      	cmp	r3, #128	; 0x80
 80085fa:	d001      	beq.n	8008600 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e296      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008600:	f7fc f84e 	bl	80046a0 <HAL_GetREVID>
 8008604:	4603      	mov	r3, r0
 8008606:	f241 0203 	movw	r2, #4099	; 0x1003
 800860a:	4293      	cmp	r3, r2
 800860c:	d817      	bhi.n	800863e <HAL_RCC_OscConfig+0x35e>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	2b20      	cmp	r3, #32
 8008614:	d108      	bne.n	8008628 <HAL_RCC_OscConfig+0x348>
 8008616:	4b70      	ldr	r3, [pc, #448]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800861e:	4a6e      	ldr	r2, [pc, #440]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008624:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008626:	e075      	b.n	8008714 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008628:	4b6b      	ldr	r3, [pc, #428]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	069b      	lsls	r3, r3, #26
 8008636:	4968      	ldr	r1, [pc, #416]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008638:	4313      	orrs	r3, r2
 800863a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800863c:	e06a      	b.n	8008714 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800863e:	4b66      	ldr	r3, [pc, #408]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	061b      	lsls	r3, r3, #24
 800864c:	4962      	ldr	r1, [pc, #392]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800864e:	4313      	orrs	r3, r2
 8008650:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008652:	e05f      	b.n	8008714 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d042      	beq.n	80086e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800865c:	4b5e      	ldr	r3, [pc, #376]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a5d      	ldr	r2, [pc, #372]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008668:	f7fb ffea 	bl	8004640 <HAL_GetTick>
 800866c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008670:	f7fb ffe6 	bl	8004640 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e255      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008682:	4b55      	ldr	r3, [pc, #340]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0f0      	beq.n	8008670 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800868e:	f7fc f807 	bl	80046a0 <HAL_GetREVID>
 8008692:	4603      	mov	r3, r0
 8008694:	f241 0203 	movw	r2, #4099	; 0x1003
 8008698:	4293      	cmp	r3, r2
 800869a:	d817      	bhi.n	80086cc <HAL_RCC_OscConfig+0x3ec>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d108      	bne.n	80086b6 <HAL_RCC_OscConfig+0x3d6>
 80086a4:	4b4c      	ldr	r3, [pc, #304]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086ac:	4a4a      	ldr	r2, [pc, #296]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086b2:	6053      	str	r3, [r2, #4]
 80086b4:	e02e      	b.n	8008714 <HAL_RCC_OscConfig+0x434>
 80086b6:	4b48      	ldr	r3, [pc, #288]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	069b      	lsls	r3, r3, #26
 80086c4:	4944      	ldr	r1, [pc, #272]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	604b      	str	r3, [r1, #4]
 80086ca:	e023      	b.n	8008714 <HAL_RCC_OscConfig+0x434>
 80086cc:	4b42      	ldr	r3, [pc, #264]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	061b      	lsls	r3, r3, #24
 80086da:	493f      	ldr	r1, [pc, #252]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	60cb      	str	r3, [r1, #12]
 80086e0:	e018      	b.n	8008714 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086e2:	4b3d      	ldr	r3, [pc, #244]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a3c      	ldr	r2, [pc, #240]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80086e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ee:	f7fb ffa7 	bl	8004640 <HAL_GetTick>
 80086f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086f4:	e008      	b.n	8008708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086f6:	f7fb ffa3 	bl	8004640 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d901      	bls.n	8008708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e212      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008708:	4b33      	ldr	r3, [pc, #204]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1f0      	bne.n	80086f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d036      	beq.n	800878e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d019      	beq.n	800875c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008728:	4b2b      	ldr	r3, [pc, #172]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800872a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800872c:	4a2a      	ldr	r2, [pc, #168]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008734:	f7fb ff84 	bl	8004640 <HAL_GetTick>
 8008738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800873c:	f7fb ff80 	bl	8004640 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e1ef      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800874e:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f0      	beq.n	800873c <HAL_RCC_OscConfig+0x45c>
 800875a:	e018      	b.n	800878e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800875c:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 800875e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008760:	4a1d      	ldr	r2, [pc, #116]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008762:	f023 0301 	bic.w	r3, r3, #1
 8008766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008768:	f7fb ff6a 	bl	8004640 <HAL_GetTick>
 800876c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800876e:	e008      	b.n	8008782 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008770:	f7fb ff66 	bl	8004640 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e1d5      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 8008784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1f0      	bne.n	8008770 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d039      	beq.n	800880e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d01c      	beq.n	80087dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80087a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087ae:	f7fb ff47 	bl	8004640 <HAL_GetTick>
 80087b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087b4:	e008      	b.n	80087c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80087b6:	f7fb ff43 	bl	8004640 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e1b2      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087c8:	4b03      	ldr	r3, [pc, #12]	; (80087d8 <HAL_RCC_OscConfig+0x4f8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0f0      	beq.n	80087b6 <HAL_RCC_OscConfig+0x4d6>
 80087d4:	e01b      	b.n	800880e <HAL_RCC_OscConfig+0x52e>
 80087d6:	bf00      	nop
 80087d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087dc:	4b9b      	ldr	r3, [pc, #620]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a9a      	ldr	r2, [pc, #616]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80087e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087e8:	f7fb ff2a 	bl	8004640 <HAL_GetTick>
 80087ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80087f0:	f7fb ff26 	bl	8004640 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e195      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008802:	4b92      	ldr	r3, [pc, #584]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 8081 	beq.w	800891e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800881c:	4b8c      	ldr	r3, [pc, #560]	; (8008a50 <HAL_RCC_OscConfig+0x770>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a8b      	ldr	r2, [pc, #556]	; (8008a50 <HAL_RCC_OscConfig+0x770>)
 8008822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008826:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008828:	f7fb ff0a 	bl	8004640 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008830:	f7fb ff06 	bl	8004640 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	; 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e175      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008842:	4b83      	ldr	r3, [pc, #524]	; (8008a50 <HAL_RCC_OscConfig+0x770>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0f0      	beq.n	8008830 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d106      	bne.n	8008864 <HAL_RCC_OscConfig+0x584>
 8008856:	4b7d      	ldr	r3, [pc, #500]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	4a7c      	ldr	r2, [pc, #496]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6713      	str	r3, [r2, #112]	; 0x70
 8008862:	e02d      	b.n	80088c0 <HAL_RCC_OscConfig+0x5e0>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10c      	bne.n	8008886 <HAL_RCC_OscConfig+0x5a6>
 800886c:	4b77      	ldr	r3, [pc, #476]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 800886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008870:	4a76      	ldr	r2, [pc, #472]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008872:	f023 0301 	bic.w	r3, r3, #1
 8008876:	6713      	str	r3, [r2, #112]	; 0x70
 8008878:	4b74      	ldr	r3, [pc, #464]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 800887a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887c:	4a73      	ldr	r2, [pc, #460]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 800887e:	f023 0304 	bic.w	r3, r3, #4
 8008882:	6713      	str	r3, [r2, #112]	; 0x70
 8008884:	e01c      	b.n	80088c0 <HAL_RCC_OscConfig+0x5e0>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	2b05      	cmp	r3, #5
 800888c:	d10c      	bne.n	80088a8 <HAL_RCC_OscConfig+0x5c8>
 800888e:	4b6f      	ldr	r3, [pc, #444]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	4a6e      	ldr	r2, [pc, #440]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008894:	f043 0304 	orr.w	r3, r3, #4
 8008898:	6713      	str	r3, [r2, #112]	; 0x70
 800889a:	4b6c      	ldr	r3, [pc, #432]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 800889c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889e:	4a6b      	ldr	r2, [pc, #428]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80088a0:	f043 0301 	orr.w	r3, r3, #1
 80088a4:	6713      	str	r3, [r2, #112]	; 0x70
 80088a6:	e00b      	b.n	80088c0 <HAL_RCC_OscConfig+0x5e0>
 80088a8:	4b68      	ldr	r3, [pc, #416]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ac:	4a67      	ldr	r2, [pc, #412]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	6713      	str	r3, [r2, #112]	; 0x70
 80088b4:	4b65      	ldr	r3, [pc, #404]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80088b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b8:	4a64      	ldr	r2, [pc, #400]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80088ba:	f023 0304 	bic.w	r3, r3, #4
 80088be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d015      	beq.n	80088f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c8:	f7fb feba 	bl	8004640 <HAL_GetTick>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088ce:	e00a      	b.n	80088e6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088d0:	f7fb feb6 	bl	8004640 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	f241 3288 	movw	r2, #5000	; 0x1388
 80088de:	4293      	cmp	r3, r2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e123      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088e6:	4b59      	ldr	r3, [pc, #356]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80088e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0ee      	beq.n	80088d0 <HAL_RCC_OscConfig+0x5f0>
 80088f2:	e014      	b.n	800891e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f4:	f7fb fea4 	bl	8004640 <HAL_GetTick>
 80088f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088fa:	e00a      	b.n	8008912 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088fc:	f7fb fea0 	bl	8004640 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	f241 3288 	movw	r2, #5000	; 0x1388
 800890a:	4293      	cmp	r3, r2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e10d      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008912:	4b4e      	ldr	r3, [pc, #312]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1ee      	bne.n	80088fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8102 	beq.w	8008b2c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008928:	4b48      	ldr	r3, [pc, #288]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008930:	2b18      	cmp	r3, #24
 8008932:	f000 80bd 	beq.w	8008ab0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	2b02      	cmp	r3, #2
 800893c:	f040 809e 	bne.w	8008a7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008940:	4b42      	ldr	r3, [pc, #264]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a41      	ldr	r2, [pc, #260]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800894a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800894c:	f7fb fe78 	bl	8004640 <HAL_GetTick>
 8008950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008954:	f7fb fe74 	bl	8004640 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e0e3      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008966:	4b39      	ldr	r3, [pc, #228]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f0      	bne.n	8008954 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008972:	4b36      	ldr	r3, [pc, #216]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008976:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <HAL_RCC_OscConfig+0x774>)
 8008978:	4013      	ands	r3, r2
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008982:	0112      	lsls	r2, r2, #4
 8008984:	430a      	orrs	r2, r1
 8008986:	4931      	ldr	r1, [pc, #196]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008988:	4313      	orrs	r3, r2
 800898a:	628b      	str	r3, [r1, #40]	; 0x28
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	3b01      	subs	r3, #1
 8008992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	3b01      	subs	r3, #1
 800899c:	025b      	lsls	r3, r3, #9
 800899e:	b29b      	uxth	r3, r3
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	3b01      	subs	r3, #1
 80089a8:	041b      	lsls	r3, r3, #16
 80089aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b4:	3b01      	subs	r3, #1
 80089b6:	061b      	lsls	r3, r3, #24
 80089b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089bc:	4923      	ldr	r1, [pc, #140]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80089c2:	4b22      	ldr	r3, [pc, #136]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	4a21      	ldr	r2, [pc, #132]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089ce:	4b1f      	ldr	r3, [pc, #124]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089d2:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <HAL_RCC_OscConfig+0x778>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089da:	00d2      	lsls	r2, r2, #3
 80089dc:	491b      	ldr	r1, [pc, #108]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089e2:	4b1a      	ldr	r3, [pc, #104]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	f023 020c 	bic.w	r2, r3, #12
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	4917      	ldr	r1, [pc, #92]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089f4:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	f023 0202 	bic.w	r2, r3, #2
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a00:	4912      	ldr	r1, [pc, #72]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a06:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	4a10      	ldr	r2, [pc, #64]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	4a0d      	ldr	r2, [pc, #52]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008a2a:	4b08      	ldr	r3, [pc, #32]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	4a07      	ldr	r2, [pc, #28]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a30:	f043 0301 	orr.w	r3, r3, #1
 8008a34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a04      	ldr	r2, [pc, #16]	; (8008a4c <HAL_RCC_OscConfig+0x76c>)
 8008a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a42:	f7fb fdfd 	bl	8004640 <HAL_GetTick>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a48:	e011      	b.n	8008a6e <HAL_RCC_OscConfig+0x78e>
 8008a4a:	bf00      	nop
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	58024800 	.word	0x58024800
 8008a54:	fffffc0c 	.word	0xfffffc0c
 8008a58:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a5c:	f7fb fdf0 	bl	8004640 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e05f      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a6e:	4b32      	ldr	r3, [pc, #200]	; (8008b38 <HAL_RCC_OscConfig+0x858>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0f0      	beq.n	8008a5c <HAL_RCC_OscConfig+0x77c>
 8008a7a:	e057      	b.n	8008b2c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a7c:	4b2e      	ldr	r3, [pc, #184]	; (8008b38 <HAL_RCC_OscConfig+0x858>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a2d      	ldr	r2, [pc, #180]	; (8008b38 <HAL_RCC_OscConfig+0x858>)
 8008a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fb fdda 	bl	8004640 <HAL_GetTick>
 8008a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a90:	f7fb fdd6 	bl	8004640 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e045      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aa2:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <HAL_RCC_OscConfig+0x858>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f0      	bne.n	8008a90 <HAL_RCC_OscConfig+0x7b0>
 8008aae:	e03d      	b.n	8008b2c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ab0:	4b21      	ldr	r3, [pc, #132]	; (8008b38 <HAL_RCC_OscConfig+0x858>)
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ab6:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <HAL_RCC_OscConfig+0x858>)
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d031      	beq.n	8008b28 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f003 0203 	and.w	r2, r3, #3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d12a      	bne.n	8008b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	091b      	lsrs	r3, r3, #4
 8008ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d122      	bne.n	8008b28 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d11a      	bne.n	8008b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	0a5b      	lsrs	r3, r3, #9
 8008af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d111      	bne.n	8008b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	0c1b      	lsrs	r3, r3, #16
 8008b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d108      	bne.n	8008b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	0e1b      	lsrs	r3, r3, #24
 8008b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d001      	beq.n	8008b2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3730      	adds	r7, #48	; 0x30
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400

08008b3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e19c      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b50:	4b8a      	ldr	r3, [pc, #552]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d910      	bls.n	8008b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b5e:	4b87      	ldr	r3, [pc, #540]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f023 020f 	bic.w	r2, r3, #15
 8008b66:	4985      	ldr	r1, [pc, #532]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6e:	4b83      	ldr	r3, [pc, #524]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d001      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e184      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d010      	beq.n	8008bae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	4b7b      	ldr	r3, [pc, #492]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d908      	bls.n	8008bae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b9c:	4b78      	ldr	r3, [pc, #480]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	4975      	ldr	r1, [pc, #468]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0308 	and.w	r3, r3, #8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d010      	beq.n	8008bdc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695a      	ldr	r2, [r3, #20]
 8008bbe:	4b70      	ldr	r3, [pc, #448]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d908      	bls.n	8008bdc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008bca:	4b6d      	ldr	r3, [pc, #436]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	496a      	ldr	r1, [pc, #424]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d010      	beq.n	8008c0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	4b64      	ldr	r3, [pc, #400]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d908      	bls.n	8008c0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bf8:	4b61      	ldr	r3, [pc, #388]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	495e      	ldr	r1, [pc, #376]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d010      	beq.n	8008c38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	69da      	ldr	r2, [r3, #28]
 8008c1a:	4b59      	ldr	r3, [pc, #356]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d908      	bls.n	8008c38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c26:	4b56      	ldr	r3, [pc, #344]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	4953      	ldr	r1, [pc, #332]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d010      	beq.n	8008c66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	4b4d      	ldr	r3, [pc, #308]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f003 030f 	and.w	r3, r3, #15
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d908      	bls.n	8008c66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c54:	4b4a      	ldr	r3, [pc, #296]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f023 020f 	bic.w	r2, r3, #15
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	4947      	ldr	r1, [pc, #284]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d055      	beq.n	8008d1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c72:	4b43      	ldr	r3, [pc, #268]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	4940      	ldr	r1, [pc, #256]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d107      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c8c:	4b3c      	ldr	r3, [pc, #240]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d121      	bne.n	8008cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0f6      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d107      	bne.n	8008cb4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ca4:	4b36      	ldr	r3, [pc, #216]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d115      	bne.n	8008cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0ea      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d107      	bne.n	8008ccc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008cbc:	4b30      	ldr	r3, [pc, #192]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d109      	bne.n	8008cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e0de      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ccc:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0d6      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cdc:	4b28      	ldr	r3, [pc, #160]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f023 0207 	bic.w	r2, r3, #7
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	4925      	ldr	r1, [pc, #148]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cee:	f7fb fca7 	bl	8004640 <HAL_GetTick>
 8008cf2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cf4:	e00a      	b.n	8008d0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cf6:	f7fb fca3 	bl	8004640 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d901      	bls.n	8008d0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e0be      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d0c:	4b1c      	ldr	r3, [pc, #112]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d1eb      	bne.n	8008cf6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d010      	beq.n	8008d4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	4b14      	ldr	r3, [pc, #80]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d208      	bcs.n	8008d4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d3a:	4b11      	ldr	r3, [pc, #68]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f023 020f 	bic.w	r2, r3, #15
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	490e      	ldr	r1, [pc, #56]	; (8008d80 <HAL_RCC_ClockConfig+0x244>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d214      	bcs.n	8008d84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d5a:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f023 020f 	bic.w	r2, r3, #15
 8008d62:	4906      	ldr	r1, [pc, #24]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d6a:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <HAL_RCC_ClockConfig+0x240>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d005      	beq.n	8008d84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e086      	b.n	8008e8a <HAL_RCC_ClockConfig+0x34e>
 8008d7c:	52002000 	.word	0x52002000
 8008d80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d010      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	4b3f      	ldr	r3, [pc, #252]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d208      	bcs.n	8008db2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008da0:	4b3c      	ldr	r3, [pc, #240]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	4939      	ldr	r1, [pc, #228]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	4b34      	ldr	r3, [pc, #208]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d208      	bcs.n	8008de0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008dce:	4b31      	ldr	r3, [pc, #196]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	492e      	ldr	r1, [pc, #184]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0310 	and.w	r3, r3, #16
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d010      	beq.n	8008e0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d208      	bcs.n	8008e0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008dfc:	4b25      	ldr	r3, [pc, #148]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	4922      	ldr	r1, [pc, #136]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0320 	and.w	r3, r3, #32
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d010      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69da      	ldr	r2, [r3, #28]
 8008e1e:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d208      	bcs.n	8008e3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008e2a:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	4917      	ldr	r1, [pc, #92]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e3c:	f000 f834 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 8008e40:	4602      	mov	r2, r0
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	0a1b      	lsrs	r3, r3, #8
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	4912      	ldr	r1, [pc, #72]	; (8008e98 <HAL_RCC_ClockConfig+0x35c>)
 8008e4e:	5ccb      	ldrb	r3, [r1, r3]
 8008e50:	f003 031f 	and.w	r3, r3, #31
 8008e54:	fa22 f303 	lsr.w	r3, r2, r3
 8008e58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e5a:	4b0e      	ldr	r3, [pc, #56]	; (8008e94 <HAL_RCC_ClockConfig+0x358>)
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	4a0d      	ldr	r2, [pc, #52]	; (8008e98 <HAL_RCC_ClockConfig+0x35c>)
 8008e64:	5cd3      	ldrb	r3, [r2, r3]
 8008e66:	f003 031f 	and.w	r3, r3, #31
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <HAL_RCC_ClockConfig+0x360>)
 8008e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e74:	4a0a      	ldr	r2, [pc, #40]	; (8008ea0 <HAL_RCC_ClockConfig+0x364>)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <HAL_RCC_ClockConfig+0x368>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fa fd40 	bl	8003904 <HAL_InitTick>
 8008e84:	4603      	mov	r3, r0
 8008e86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	58024400 	.word	0x58024400
 8008e98:	08024818 	.word	0x08024818
 8008e9c:	20000004 	.word	0x20000004
 8008ea0:	20000000 	.word	0x20000000
 8008ea4:	20000008 	.word	0x20000008

08008ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b089      	sub	sp, #36	; 0x24
 8008eac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008eae:	4bb3      	ldr	r3, [pc, #716]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb6:	2b18      	cmp	r3, #24
 8008eb8:	f200 8155 	bhi.w	8009166 <HAL_RCC_GetSysClockFreq+0x2be>
 8008ebc:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008f29 	.word	0x08008f29
 8008ec8:	08009167 	.word	0x08009167
 8008ecc:	08009167 	.word	0x08009167
 8008ed0:	08009167 	.word	0x08009167
 8008ed4:	08009167 	.word	0x08009167
 8008ed8:	08009167 	.word	0x08009167
 8008edc:	08009167 	.word	0x08009167
 8008ee0:	08009167 	.word	0x08009167
 8008ee4:	08008f4f 	.word	0x08008f4f
 8008ee8:	08009167 	.word	0x08009167
 8008eec:	08009167 	.word	0x08009167
 8008ef0:	08009167 	.word	0x08009167
 8008ef4:	08009167 	.word	0x08009167
 8008ef8:	08009167 	.word	0x08009167
 8008efc:	08009167 	.word	0x08009167
 8008f00:	08009167 	.word	0x08009167
 8008f04:	08008f55 	.word	0x08008f55
 8008f08:	08009167 	.word	0x08009167
 8008f0c:	08009167 	.word	0x08009167
 8008f10:	08009167 	.word	0x08009167
 8008f14:	08009167 	.word	0x08009167
 8008f18:	08009167 	.word	0x08009167
 8008f1c:	08009167 	.word	0x08009167
 8008f20:	08009167 	.word	0x08009167
 8008f24:	08008f5b 	.word	0x08008f5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f28:	4b94      	ldr	r3, [pc, #592]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0320 	and.w	r3, r3, #32
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f34:	4b91      	ldr	r3, [pc, #580]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	08db      	lsrs	r3, r3, #3
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	4a90      	ldr	r2, [pc, #576]	; (8009180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f40:	fa22 f303 	lsr.w	r3, r2, r3
 8008f44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008f46:	e111      	b.n	800916c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f48:	4b8d      	ldr	r3, [pc, #564]	; (8009180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f4a:	61bb      	str	r3, [r7, #24]
    break;
 8008f4c:	e10e      	b.n	800916c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008f4e:	4b8d      	ldr	r3, [pc, #564]	; (8009184 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f50:	61bb      	str	r3, [r7, #24]
    break;
 8008f52:	e10b      	b.n	800916c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008f54:	4b8c      	ldr	r3, [pc, #560]	; (8009188 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f56:	61bb      	str	r3, [r7, #24]
    break;
 8008f58:	e108      	b.n	800916c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f5a:	4b88      	ldr	r3, [pc, #544]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f64:	4b85      	ldr	r3, [pc, #532]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	091b      	lsrs	r3, r3, #4
 8008f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f70:	4b82      	ldr	r3, [pc, #520]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f7a:	4b80      	ldr	r3, [pc, #512]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7e:	08db      	lsrs	r3, r3, #3
 8008f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	fb02 f303 	mul.w	r3, r2, r3
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80e1 	beq.w	8009160 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	f000 8083 	beq.w	80090ac <HAL_RCC_GetSysClockFreq+0x204>
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	f200 80a1 	bhi.w	80090f0 <HAL_RCC_GetSysClockFreq+0x248>
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_RCC_GetSysClockFreq+0x114>
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d056      	beq.n	8009068 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008fba:	e099      	b.n	80090f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fbc:	4b6f      	ldr	r3, [pc, #444]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d02d      	beq.n	8009024 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fc8:	4b6c      	ldr	r3, [pc, #432]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	08db      	lsrs	r3, r3, #3
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	4a6b      	ldr	r2, [pc, #428]	; (8009180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff2:	4b62      	ldr	r3, [pc, #392]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009002:	ed97 6a02 	vldr	s12, [r7, #8]
 8009006:	eddf 5a61 	vldr	s11, [pc, #388]	; 800918c <HAL_RCC_GetSysClockFreq+0x2e4>
 800900a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009022:	e087      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009190 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009036:	4b51      	ldr	r3, [pc, #324]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009046:	ed97 6a02 	vldr	s12, [r7, #8]
 800904a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800918c <HAL_RCC_GetSysClockFreq+0x2e4>
 800904e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009066:	e065      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	ee07 3a90 	vmov	s15, r3
 800906e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009072:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009194 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907a:	4b40      	ldr	r3, [pc, #256]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908a:	ed97 6a02 	vldr	s12, [r7, #8]
 800908e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800918c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800909e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090aa:	e043      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009198 <HAL_RCC_GetSysClockFreq+0x2f0>
 80090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090be:	4b2f      	ldr	r3, [pc, #188]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80090d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800918c <HAL_RCC_GetSysClockFreq+0x2e4>
 80090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ee:	e021      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009194 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b1e      	ldr	r3, [pc, #120]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a02 	vldr	s12, [r7, #8]
 8009116:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800918c <HAL_RCC_GetSysClockFreq+0x2e4>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009132:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009134:	4b11      	ldr	r3, [pc, #68]	; (800917c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	0a5b      	lsrs	r3, r3, #9
 800913a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913e:	3301      	adds	r3, #1
 8009140:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	ee07 3a90 	vmov	s15, r3
 8009148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800914c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009158:	ee17 3a90 	vmov	r3, s15
 800915c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800915e:	e005      	b.n	800916c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	61bb      	str	r3, [r7, #24]
    break;
 8009164:	e002      	b.n	800916c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009166:	4b07      	ldr	r3, [pc, #28]	; (8009184 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009168:	61bb      	str	r3, [r7, #24]
    break;
 800916a:	bf00      	nop
  }

  return sysclockfreq;
 800916c:	69bb      	ldr	r3, [r7, #24]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3724      	adds	r7, #36	; 0x24
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	58024400 	.word	0x58024400
 8009180:	03d09000 	.word	0x03d09000
 8009184:	003d0900 	.word	0x003d0900
 8009188:	007a1200 	.word	0x007a1200
 800918c:	46000000 	.word	0x46000000
 8009190:	4c742400 	.word	0x4c742400
 8009194:	4a742400 	.word	0x4a742400
 8009198:	4af42400 	.word	0x4af42400

0800919c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80091a2:	f7ff fe81 	bl	8008ea8 <HAL_RCC_GetSysClockFreq>
 80091a6:	4602      	mov	r2, r0
 80091a8:	4b10      	ldr	r3, [pc, #64]	; (80091ec <HAL_RCC_GetHCLKFreq+0x50>)
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	0a1b      	lsrs	r3, r3, #8
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	490f      	ldr	r1, [pc, #60]	; (80091f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80091b4:	5ccb      	ldrb	r3, [r1, r3]
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	fa22 f303 	lsr.w	r3, r2, r3
 80091be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <HAL_RCC_GetHCLKFreq+0x50>)
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80091ca:	5cd3      	ldrb	r3, [r2, r3]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	fa22 f303 	lsr.w	r3, r2, r3
 80091d6:	4a07      	ldr	r2, [pc, #28]	; (80091f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80091d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091da:	4a07      	ldr	r2, [pc, #28]	; (80091f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80091e0:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80091e2:	681b      	ldr	r3, [r3, #0]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	58024400 	.word	0x58024400
 80091f0:	08024818 	.word	0x08024818
 80091f4:	20000004 	.word	0x20000004
 80091f8:	20000000 	.word	0x20000000

080091fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009200:	f7ff ffcc 	bl	800919c <HAL_RCC_GetHCLKFreq>
 8009204:	4602      	mov	r2, r0
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	091b      	lsrs	r3, r3, #4
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	4904      	ldr	r1, [pc, #16]	; (8009224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009212:	5ccb      	ldrb	r3, [r1, r3]
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800921c:	4618      	mov	r0, r3
 800921e:	bd80      	pop	{r7, pc}
 8009220:	58024400 	.word	0x58024400
 8009224:	08024818 	.word	0x08024818

08009228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800922c:	f7ff ffb6 	bl	800919c <HAL_RCC_GetHCLKFreq>
 8009230:	4602      	mov	r2, r0
 8009232:	4b06      	ldr	r3, [pc, #24]	; (800924c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	f003 0307 	and.w	r3, r3, #7
 800923c:	4904      	ldr	r1, [pc, #16]	; (8009250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800923e:	5ccb      	ldrb	r3, [r1, r3]
 8009240:	f003 031f 	and.w	r3, r3, #31
 8009244:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009248:	4618      	mov	r0, r3
 800924a:	bd80      	pop	{r7, pc}
 800924c:	58024400 	.word	0x58024400
 8009250:	08024818 	.word	0x08024818

08009254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	223f      	movs	r2, #63	; 0x3f
 8009262:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009264:	4b1a      	ldr	r3, [pc, #104]	; (80092d0 <HAL_RCC_GetClockConfig+0x7c>)
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0207 	and.w	r2, r3, #7
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009270:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <HAL_RCC_GetClockConfig+0x7c>)
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800927c:	4b14      	ldr	r3, [pc, #80]	; (80092d0 <HAL_RCC_GetClockConfig+0x7c>)
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	f003 020f 	and.w	r2, r3, #15
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009288:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <HAL_RCC_GetClockConfig+0x7c>)
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009294:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <HAL_RCC_GetClockConfig+0x7c>)
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80092a0:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <HAL_RCC_GetClockConfig+0x7c>)
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80092ac:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <HAL_RCC_GetClockConfig+0x7c>)
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <HAL_RCC_GetClockConfig+0x80>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 020f 	and.w	r2, r3, #15
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	601a      	str	r2, [r3, #0]
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	58024400 	.word	0x58024400
 80092d4:	52002000 	.word	0x52002000

080092d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092e0:	2300      	movs	r3, #0
 80092e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092e4:	2300      	movs	r3, #0
 80092e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d03f      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092fc:	d02a      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80092fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009302:	d824      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009308:	d018      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800930a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800930e:	d81e      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009318:	d007      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800931a:	e018      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931c:	4ba3      	ldr	r3, [pc, #652]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4aa2      	ldr	r2, [pc, #648]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009328:	e015      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3304      	adds	r3, #4
 800932e:	2102      	movs	r1, #2
 8009330:	4618      	mov	r0, r3
 8009332:	f001 fff9 	bl	800b328 <RCCEx_PLL2_Config>
 8009336:	4603      	mov	r3, r0
 8009338:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800933a:	e00c      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3324      	adds	r3, #36	; 0x24
 8009340:	2102      	movs	r1, #2
 8009342:	4618      	mov	r0, r3
 8009344:	f002 f8a2 	bl	800b48c <RCCEx_PLL3_Config>
 8009348:	4603      	mov	r3, r0
 800934a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800934c:	e003      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	75fb      	strb	r3, [r7, #23]
      break;
 8009352:	e000      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d109      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800935c:	4b93      	ldr	r3, [pc, #588]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800935e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009368:	4990      	ldr	r1, [pc, #576]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800936a:	4313      	orrs	r3, r2
 800936c:	650b      	str	r3, [r1, #80]	; 0x50
 800936e:	e001      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d03d      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009384:	2b04      	cmp	r3, #4
 8009386:	d826      	bhi.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009388:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093a5 	.word	0x080093a5
 8009394:	080093b3 	.word	0x080093b3
 8009398:	080093c5 	.word	0x080093c5
 800939c:	080093dd 	.word	0x080093dd
 80093a0:	080093dd 	.word	0x080093dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a4:	4b81      	ldr	r3, [pc, #516]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	4a80      	ldr	r2, [pc, #512]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093b0:	e015      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3304      	adds	r3, #4
 80093b6:	2100      	movs	r1, #0
 80093b8:	4618      	mov	r0, r3
 80093ba:	f001 ffb5 	bl	800b328 <RCCEx_PLL2_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093c2:	e00c      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3324      	adds	r3, #36	; 0x24
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f002 f85e 	bl	800b48c <RCCEx_PLL3_Config>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d4:	e003      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	75fb      	strb	r3, [r7, #23]
      break;
 80093da:	e000      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d109      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093e4:	4b71      	ldr	r3, [pc, #452]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e8:	f023 0207 	bic.w	r2, r3, #7
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f0:	496e      	ldr	r1, [pc, #440]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	650b      	str	r3, [r1, #80]	; 0x50
 80093f6:	e001      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009404:	2b00      	cmp	r3, #0
 8009406:	d042      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009410:	d02b      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009416:	d825      	bhi.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009418:	2bc0      	cmp	r3, #192	; 0xc0
 800941a:	d028      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800941c:	2bc0      	cmp	r3, #192	; 0xc0
 800941e:	d821      	bhi.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009420:	2b80      	cmp	r3, #128	; 0x80
 8009422:	d016      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009424:	2b80      	cmp	r3, #128	; 0x80
 8009426:	d81d      	bhi.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800942c:	2b40      	cmp	r3, #64	; 0x40
 800942e:	d007      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009430:	e018      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009432:	4b5e      	ldr	r3, [pc, #376]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009436:	4a5d      	ldr	r2, [pc, #372]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800943c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800943e:	e017      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	2100      	movs	r1, #0
 8009446:	4618      	mov	r0, r3
 8009448:	f001 ff6e 	bl	800b328 <RCCEx_PLL2_Config>
 800944c:	4603      	mov	r3, r0
 800944e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009450:	e00e      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3324      	adds	r3, #36	; 0x24
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f002 f817 	bl	800b48c <RCCEx_PLL3_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009462:	e005      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	75fb      	strb	r3, [r7, #23]
      break;
 8009468:	e002      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800946a:	bf00      	nop
 800946c:	e000      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800946e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d109      	bne.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009476:	4b4d      	ldr	r3, [pc, #308]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009482:	494a      	ldr	r1, [pc, #296]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009484:	4313      	orrs	r3, r2
 8009486:	650b      	str	r3, [r1, #80]	; 0x50
 8009488:	e001      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009496:	2b00      	cmp	r3, #0
 8009498:	d049      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a4:	d030      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80094a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094aa:	d82a      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094b0:	d02c      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80094b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094b6:	d824      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094bc:	d018      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80094be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c2:	d81e      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80094c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094cc:	d007      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094ce:	e018      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d0:	4b36      	ldr	r3, [pc, #216]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	4a35      	ldr	r2, [pc, #212]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094dc:	e017      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3304      	adds	r3, #4
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 ff1f 	bl	800b328 <RCCEx_PLL2_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094ee:	e00e      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3324      	adds	r3, #36	; 0x24
 80094f4:	2100      	movs	r1, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 ffc8 	bl	800b48c <RCCEx_PLL3_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009500:	e005      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	75fb      	strb	r3, [r7, #23]
      break;
 8009506:	e002      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009508:	bf00      	nop
 800950a:	e000      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800950c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009514:	4b25      	ldr	r3, [pc, #148]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009518:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009522:	4922      	ldr	r1, [pc, #136]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009524:	4313      	orrs	r3, r2
 8009526:	658b      	str	r3, [r1, #88]	; 0x58
 8009528:	e001      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009536:	2b00      	cmp	r3, #0
 8009538:	d04b      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009544:	d030      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800954a:	d82a      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800954c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009550:	d02e      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009556:	d824      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800955c:	d018      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800955e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009562:	d81e      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d003      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800956c:	d007      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800956e:	e018      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009570:	4b0e      	ldr	r3, [pc, #56]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	4a0d      	ldr	r2, [pc, #52]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800957a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800957c:	e019      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3304      	adds	r3, #4
 8009582:	2100      	movs	r1, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fecf 	bl	800b328 <RCCEx_PLL2_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800958e:	e010      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3324      	adds	r3, #36	; 0x24
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f001 ff78 	bl	800b48c <RCCEx_PLL3_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095a0:	e007      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	75fb      	strb	r3, [r7, #23]
      break;
 80095a6:	e004      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80095a8:	bf00      	nop
 80095aa:	e002      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80095ac:	58024400 	.word	0x58024400
      break;
 80095b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095b8:	4b99      	ldr	r3, [pc, #612]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095c6:	4996      	ldr	r1, [pc, #600]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	658b      	str	r3, [r1, #88]	; 0x58
 80095cc:	e001      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d032      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e2:	2b30      	cmp	r3, #48	; 0x30
 80095e4:	d01c      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80095e6:	2b30      	cmp	r3, #48	; 0x30
 80095e8:	d817      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d00c      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d813      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d016      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d10f      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095fa:	4b89      	ldr	r3, [pc, #548]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fe:	4a88      	ldr	r2, [pc, #544]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009606:	e00e      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3304      	adds	r3, #4
 800960c:	2102      	movs	r1, #2
 800960e:	4618      	mov	r0, r3
 8009610:	f001 fe8a 	bl	800b328 <RCCEx_PLL2_Config>
 8009614:	4603      	mov	r3, r0
 8009616:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009618:	e005      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	75fb      	strb	r3, [r7, #23]
      break;
 800961e:	e002      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009620:	bf00      	nop
 8009622:	e000      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d109      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800962c:	4b7c      	ldr	r3, [pc, #496]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800962e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009630:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009638:	4979      	ldr	r1, [pc, #484]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800963a:	4313      	orrs	r3, r2
 800963c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800963e:	e001      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d047      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009658:	d030      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800965a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800965e:	d82a      	bhi.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009664:	d02c      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800966a:	d824      	bhi.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800966c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009670:	d018      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009676:	d81e      	bhi.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800967c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009680:	d007      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009682:	e018      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009684:	4b66      	ldr	r3, [pc, #408]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	4a65      	ldr	r2, [pc, #404]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800968a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800968e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009690:	e017      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3304      	adds	r3, #4
 8009696:	2100      	movs	r1, #0
 8009698:	4618      	mov	r0, r3
 800969a:	f001 fe45 	bl	800b328 <RCCEx_PLL2_Config>
 800969e:	4603      	mov	r3, r0
 80096a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a2:	e00e      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3324      	adds	r3, #36	; 0x24
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 feee 	bl	800b48c <RCCEx_PLL3_Config>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096b4:	e005      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ba:	e002      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096bc:	bf00      	nop
 80096be:	e000      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d109      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096c8:	4b55      	ldr	r3, [pc, #340]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d4:	4952      	ldr	r1, [pc, #328]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	650b      	str	r3, [r1, #80]	; 0x50
 80096da:	e001      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d049      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096f4:	d02e      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80096f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096fa:	d828      	bhi.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009700:	d02a      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009706:	d822      	bhi.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800970c:	d026      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800970e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009712:	d81c      	bhi.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009718:	d010      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800971a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800971e:	d816      	bhi.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d01d      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009728:	d111      	bne.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3304      	adds	r3, #4
 800972e:	2101      	movs	r1, #1
 8009730:	4618      	mov	r0, r3
 8009732:	f001 fdf9 	bl	800b328 <RCCEx_PLL2_Config>
 8009736:	4603      	mov	r3, r0
 8009738:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800973a:	e012      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3324      	adds	r3, #36	; 0x24
 8009740:	2101      	movs	r1, #1
 8009742:	4618      	mov	r0, r3
 8009744:	f001 fea2 	bl	800b48c <RCCEx_PLL3_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800974c:	e009      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
      break;
 8009752:	e006      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009754:	bf00      	nop
 8009756:	e004      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009758:	bf00      	nop
 800975a:	e002      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800975c:	bf00      	nop
 800975e:	e000      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d109      	bne.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009768:	4b2d      	ldr	r3, [pc, #180]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800976a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009774:	492a      	ldr	r1, [pc, #168]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009776:	4313      	orrs	r3, r2
 8009778:	650b      	str	r3, [r1, #80]	; 0x50
 800977a:	e001      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977c:	7dfb      	ldrb	r3, [r7, #23]
 800977e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d04d      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009796:	d02e      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800979c:	d828      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800979e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a2:	d02a      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 80097a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a8:	d822      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097ae:	d026      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x526>
 80097b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097b4:	d81c      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ba:	d010      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x506>
 80097bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c0:	d816      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01d      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80097c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ca:	d111      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3304      	adds	r3, #4
 80097d0:	2101      	movs	r1, #1
 80097d2:	4618      	mov	r0, r3
 80097d4:	f001 fda8 	bl	800b328 <RCCEx_PLL2_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097dc:	e012      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3324      	adds	r3, #36	; 0x24
 80097e2:	2101      	movs	r1, #1
 80097e4:	4618      	mov	r0, r3
 80097e6:	f001 fe51 	bl	800b48c <RCCEx_PLL3_Config>
 80097ea:	4603      	mov	r3, r0
 80097ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097ee:	e009      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	75fb      	strb	r3, [r7, #23]
      break;
 80097f4:	e006      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097f6:	bf00      	nop
 80097f8:	e004      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097fa:	bf00      	nop
 80097fc:	e002      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10c      	bne.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800980c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009818:	4901      	ldr	r1, [pc, #4]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800981a:	4313      	orrs	r3, r2
 800981c:	658b      	str	r3, [r1, #88]	; 0x58
 800981e:	e003      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d02f      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983c:	d00e      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800983e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009842:	d814      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009844:	2b00      	cmp	r3, #0
 8009846:	d015      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800984c:	d10f      	bne.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984e:	4baf      	ldr	r3, [pc, #700]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009852:	4aae      	ldr	r2, [pc, #696]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800985a:	e00c      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	2101      	movs	r1, #1
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fd60 	bl	800b328 <RCCEx_PLL2_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800986c:	e003      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	75fb      	strb	r3, [r7, #23]
      break;
 8009872:	e000      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d109      	bne.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800987c:	4ba3      	ldr	r3, [pc, #652]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800987e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009880:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009888:	49a0      	ldr	r1, [pc, #640]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800988a:	4313      	orrs	r3, r2
 800988c:	650b      	str	r3, [r1, #80]	; 0x50
 800988e:	e001      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d032      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d81b      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80098a8:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80098aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ae:	bf00      	nop
 80098b0:	080098e7 	.word	0x080098e7
 80098b4:	080098c1 	.word	0x080098c1
 80098b8:	080098cf 	.word	0x080098cf
 80098bc:	080098e7 	.word	0x080098e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c0:	4b92      	ldr	r3, [pc, #584]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	4a91      	ldr	r2, [pc, #580]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098cc:	e00c      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3304      	adds	r3, #4
 80098d2:	2102      	movs	r1, #2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 fd27 	bl	800b328 <RCCEx_PLL2_Config>
 80098da:	4603      	mov	r3, r0
 80098dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098de:	e003      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
      break;
 80098e4:	e000      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80098e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098ee:	4b87      	ldr	r3, [pc, #540]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f2:	f023 0203 	bic.w	r2, r3, #3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fa:	4984      	ldr	r1, [pc, #528]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009900:	e001      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 8086 	beq.w	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009914:	4b7e      	ldr	r3, [pc, #504]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a7d      	ldr	r2, [pc, #500]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800991a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800991e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009920:	f7fa fe8e 	bl	8004640 <HAL_GetTick>
 8009924:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009926:	e009      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009928:	f7fa fe8a 	bl	8004640 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b64      	cmp	r3, #100	; 0x64
 8009934:	d902      	bls.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	75fb      	strb	r3, [r7, #23]
        break;
 800993a:	e005      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800993c:	4b74      	ldr	r3, [pc, #464]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0ef      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d166      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800994e:	4b6f      	ldr	r3, [pc, #444]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009958:	4053      	eors	r3, r2
 800995a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800995e:	2b00      	cmp	r3, #0
 8009960:	d013      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009962:	4b6a      	ldr	r3, [pc, #424]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800996a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800996c:	4b67      	ldr	r3, [pc, #412]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800996e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009970:	4a66      	ldr	r2, [pc, #408]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009976:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009978:	4b64      	ldr	r3, [pc, #400]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800997a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997c:	4a63      	ldr	r2, [pc, #396]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800997e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009982:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009984:	4a61      	ldr	r2, [pc, #388]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009994:	d115      	bne.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009996:	f7fa fe53 	bl	8004640 <HAL_GetTick>
 800999a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800999c:	e00b      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800999e:	f7fa fe4f 	bl	8004640 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d902      	bls.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	75fb      	strb	r3, [r7, #23]
            break;
 80099b4:	e005      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b6:	4b55      	ldr	r3, [pc, #340]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0ed      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d126      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d6:	d10d      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80099d8:	4b4c      	ldr	r3, [pc, #304]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099e6:	0919      	lsrs	r1, r3, #4
 80099e8:	4b4a      	ldr	r3, [pc, #296]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80099ea:	400b      	ands	r3, r1
 80099ec:	4947      	ldr	r1, [pc, #284]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	610b      	str	r3, [r1, #16]
 80099f2:	e005      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80099f4:	4b45      	ldr	r3, [pc, #276]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	4a44      	ldr	r2, [pc, #272]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099fe:	6113      	str	r3, [r2, #16]
 8009a00:	4b42      	ldr	r3, [pc, #264]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a0e:	493f      	ldr	r1, [pc, #252]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	670b      	str	r3, [r1, #112]	; 0x70
 8009a14:	e004      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	75bb      	strb	r3, [r7, #22]
 8009a1a:	e001      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 8085 	beq.w	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a32:	2b28      	cmp	r3, #40	; 0x28
 8009a34:	d866      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009b19 	.word	0x08009b19
 8009a40:	08009b05 	.word	0x08009b05
 8009a44:	08009b05 	.word	0x08009b05
 8009a48:	08009b05 	.word	0x08009b05
 8009a4c:	08009b05 	.word	0x08009b05
 8009a50:	08009b05 	.word	0x08009b05
 8009a54:	08009b05 	.word	0x08009b05
 8009a58:	08009b05 	.word	0x08009b05
 8009a5c:	08009ae1 	.word	0x08009ae1
 8009a60:	08009b05 	.word	0x08009b05
 8009a64:	08009b05 	.word	0x08009b05
 8009a68:	08009b05 	.word	0x08009b05
 8009a6c:	08009b05 	.word	0x08009b05
 8009a70:	08009b05 	.word	0x08009b05
 8009a74:	08009b05 	.word	0x08009b05
 8009a78:	08009b05 	.word	0x08009b05
 8009a7c:	08009af3 	.word	0x08009af3
 8009a80:	08009b05 	.word	0x08009b05
 8009a84:	08009b05 	.word	0x08009b05
 8009a88:	08009b05 	.word	0x08009b05
 8009a8c:	08009b05 	.word	0x08009b05
 8009a90:	08009b05 	.word	0x08009b05
 8009a94:	08009b05 	.word	0x08009b05
 8009a98:	08009b05 	.word	0x08009b05
 8009a9c:	08009b19 	.word	0x08009b19
 8009aa0:	08009b05 	.word	0x08009b05
 8009aa4:	08009b05 	.word	0x08009b05
 8009aa8:	08009b05 	.word	0x08009b05
 8009aac:	08009b05 	.word	0x08009b05
 8009ab0:	08009b05 	.word	0x08009b05
 8009ab4:	08009b05 	.word	0x08009b05
 8009ab8:	08009b05 	.word	0x08009b05
 8009abc:	08009b19 	.word	0x08009b19
 8009ac0:	08009b05 	.word	0x08009b05
 8009ac4:	08009b05 	.word	0x08009b05
 8009ac8:	08009b05 	.word	0x08009b05
 8009acc:	08009b05 	.word	0x08009b05
 8009ad0:	08009b05 	.word	0x08009b05
 8009ad4:	08009b05 	.word	0x08009b05
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	08009b19 	.word	0x08009b19
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 fc1e 	bl	800b328 <RCCEx_PLL2_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009af0:	e013      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3324      	adds	r3, #36	; 0x24
 8009af6:	2101      	movs	r1, #1
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 fcc7 	bl	800b48c <RCCEx_PLL3_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b02:	e00a      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
      break;
 8009b08:	e007      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009b0a:	bf00      	nop
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	58024800 	.word	0x58024800
 8009b14:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d109      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b20:	4b96      	ldr	r3, [pc, #600]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b24:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b2c:	4993      	ldr	r1, [pc, #588]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	654b      	str	r3, [r1, #84]	; 0x54
 8009b32:	e001      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
 8009b36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d038      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	d821      	bhi.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b97 	.word	0x08009b97
 8009b58:	08009b6d 	.word	0x08009b6d
 8009b5c:	08009b7f 	.word	0x08009b7f
 8009b60:	08009b97 	.word	0x08009b97
 8009b64:	08009b97 	.word	0x08009b97
 8009b68:	08009b97 	.word	0x08009b97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	2101      	movs	r1, #1
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 fbd8 	bl	800b328 <RCCEx_PLL2_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b7c:	e00c      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3324      	adds	r3, #36	; 0x24
 8009b82:	2101      	movs	r1, #1
 8009b84:	4618      	mov	r0, r3
 8009b86:	f001 fc81 	bl	800b48c <RCCEx_PLL3_Config>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b8e:	e003      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	75fb      	strb	r3, [r7, #23]
      break;
 8009b94:	e000      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d109      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b9e:	4b77      	ldr	r3, [pc, #476]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba2:	f023 0207 	bic.w	r2, r3, #7
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009baa:	4974      	ldr	r1, [pc, #464]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	654b      	str	r3, [r1, #84]	; 0x54
 8009bb0:	e001      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d03a      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc8:	2b05      	cmp	r3, #5
 8009bca:	d821      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009bcc:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd2:	bf00      	nop
 8009bd4:	08009c17 	.word	0x08009c17
 8009bd8:	08009bed 	.word	0x08009bed
 8009bdc:	08009bff 	.word	0x08009bff
 8009be0:	08009c17 	.word	0x08009c17
 8009be4:	08009c17 	.word	0x08009c17
 8009be8:	08009c17 	.word	0x08009c17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fb98 	bl	800b328 <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bfc:	e00c      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3324      	adds	r3, #36	; 0x24
 8009c02:	2101      	movs	r1, #1
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 fc41 	bl	800b48c <RCCEx_PLL3_Config>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c0e:	e003      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	75fb      	strb	r3, [r7, #23]
      break;
 8009c14:	e000      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c1e:	4b57      	ldr	r3, [pc, #348]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c22:	f023 0207 	bic.w	r2, r3, #7
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c2c:	4953      	ldr	r1, [pc, #332]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	658b      	str	r3, [r1, #88]	; 0x58
 8009c32:	e001      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d04b      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c4e:	d02e      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c54:	d828      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c5a:	d02a      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c60:	d822      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c66:	d026      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c6c:	d81c      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c72:	d010      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c78:	d816      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01d      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c82:	d111      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 fb4c 	bl	800b328 <RCCEx_PLL2_Config>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c94:	e012      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3324      	adds	r3, #36	; 0x24
 8009c9a:	2102      	movs	r1, #2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 fbf5 	bl	800b48c <RCCEx_PLL3_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ca6:	e009      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cac:	e006      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e004      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e002      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cb6:	bf00      	nop
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cc2:	4b2e      	ldr	r3, [pc, #184]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cd0:	492a      	ldr	r1, [pc, #168]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	654b      	str	r3, [r1, #84]	; 0x54
 8009cd6:	e001      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d04d      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cf2:	d02e      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009cf4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cf8:	d828      	bhi.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfe:	d02a      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d04:	d822      	bhi.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d0a:	d026      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d10:	d81c      	bhi.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d16:	d010      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d1c:	d816      	bhi.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01d      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d26:	d111      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fafa 	bl	800b328 <RCCEx_PLL2_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d38:	e012      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3324      	adds	r3, #36	; 0x24
 8009d3e:	2102      	movs	r1, #2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 fba3 	bl	800b48c <RCCEx_PLL3_Config>
 8009d46:	4603      	mov	r3, r0
 8009d48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d4a:	e009      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d50:	e006      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d52:	bf00      	nop
 8009d54:	e004      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d56:	bf00      	nop
 8009d58:	e002      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d5a:	bf00      	nop
 8009d5c:	e000      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10c      	bne.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d66:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d74:	4901      	ldr	r1, [pc, #4]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	658b      	str	r3, [r1, #88]	; 0x58
 8009d7a:	e003      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d04b      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d9a:	d02e      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009d9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009da0:	d828      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da6:	d02a      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dac:	d822      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009db2:	d026      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009db4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009db8:	d81c      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dbe:	d010      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc4:	d816      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01d      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dce:	d111      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 faa6 	bl	800b328 <RCCEx_PLL2_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009de0:	e012      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3324      	adds	r3, #36	; 0x24
 8009de6:	2102      	movs	r1, #2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 fb4f 	bl	800b48c <RCCEx_PLL3_Config>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009df2:	e009      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	75fb      	strb	r3, [r7, #23]
      break;
 8009df8:	e006      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dfa:	bf00      	nop
 8009dfc:	e004      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dfe:	bf00      	nop
 8009e00:	e002      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e02:	bf00      	nop
 8009e04:	e000      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e0e:	4b9d      	ldr	r3, [pc, #628]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e1c:	4999      	ldr	r1, [pc, #612]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	658b      	str	r3, [r1, #88]	; 0x58
 8009e22:	e001      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01a      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e3e:	d10a      	bne.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3324      	adds	r3, #36	; 0x24
 8009e44:	2102      	movs	r1, #2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f001 fb20 	bl	800b48c <RCCEx_PLL3_Config>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e56:	4b8b      	ldr	r3, [pc, #556]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e64:	4987      	ldr	r1, [pc, #540]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0310 	and.w	r3, r3, #16
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01a      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e80:	d10a      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3324      	adds	r3, #36	; 0x24
 8009e86:	2102      	movs	r1, #2
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 faff 	bl	800b48c <RCCEx_PLL3_Config>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e98:	4b7a      	ldr	r3, [pc, #488]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ea6:	4977      	ldr	r1, [pc, #476]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d034      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ec2:	d01d      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ec8:	d817      	bhi.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed2:	d009      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009ed4:	e011      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	2100      	movs	r1, #0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fa23 	bl	800b328 <RCCEx_PLL2_Config>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ee6:	e00c      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3324      	adds	r3, #36	; 0x24
 8009eec:	2102      	movs	r1, #2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f001 facc 	bl	800b48c <RCCEx_PLL3_Config>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ef8:	e003      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	75fb      	strb	r3, [r7, #23]
      break;
 8009efe:	e000      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f02:	7dfb      	ldrb	r3, [r7, #23]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f08:	4b5e      	ldr	r3, [pc, #376]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f16:	495b      	ldr	r1, [pc, #364]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	658b      	str	r3, [r1, #88]	; 0x58
 8009f1c:	e001      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d033      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f38:	d01c      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009f3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f3e:	d816      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f44:	d003      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f4a:	d007      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009f4c:	e00f      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f4e:	4b4d      	ldr	r3, [pc, #308]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f52:	4a4c      	ldr	r2, [pc, #304]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f5a:	e00c      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3324      	adds	r3, #36	; 0x24
 8009f60:	2101      	movs	r1, #1
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 fa92 	bl	800b48c <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f6c:	e003      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
      break;
 8009f72:	e000      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f7c:	4b41      	ldr	r3, [pc, #260]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f8a:	493e      	ldr	r1, [pc, #248]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	654b      	str	r3, [r1, #84]	; 0x54
 8009f90:	e001      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d029      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fae:	d007      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009fb0:	e00f      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb2:	4b34      	ldr	r3, [pc, #208]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	4a33      	ldr	r2, [pc, #204]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fbe:	e00b      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	2102      	movs	r1, #2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 f9ae 	bl	800b328 <RCCEx_PLL2_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fd0:	e002      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fde:	4b29      	ldr	r3, [pc, #164]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fea:	4926      	ldr	r1, [pc, #152]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ff0:	e001      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3324      	adds	r3, #36	; 0x24
 800a006:	2102      	movs	r1, #2
 800a008:	4618      	mov	r0, r3
 800a00a:	f001 fa3f 	bl	800b48c <RCCEx_PLL3_Config>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d033      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a02c:	d017      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a02e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a032:	d811      	bhi.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a038:	d013      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a03a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a03e:	d80b      	bhi.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a048:	d106      	bne.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04a:	4b0e      	ldr	r3, [pc, #56]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04e:	4a0d      	ldr	r2, [pc, #52]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a056:	e007      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	75fb      	strb	r3, [r7, #23]
      break;
 800a05c:	e004      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a05e:	bf00      	nop
 800a060:	e002      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a062:	bf00      	nop
 800a064:	e000      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a066:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10c      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a06e:	4b05      	ldr	r3, [pc, #20]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a07a:	4902      	ldr	r1, [pc, #8]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	654b      	str	r3, [r1, #84]	; 0x54
 800a080:	e004      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a082:	bf00      	nop
 800a084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a088:	7dfb      	ldrb	r3, [r7, #23]
 800a08a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d008      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a098:	4b31      	ldr	r3, [pc, #196]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a09c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a4:	492e      	ldr	r1, [pc, #184]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d009      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a0b6:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0c4:	4926      	ldr	r1, [pc, #152]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d008      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0d6:	4b22      	ldr	r3, [pc, #136]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0e2:	491f      	ldr	r1, [pc, #124]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00d      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	4a19      	ldr	r2, [pc, #100]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0fe:	6113      	str	r3, [r2, #16]
 800a100:	4b17      	ldr	r3, [pc, #92]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a10a:	4915      	ldr	r1, [pc, #84]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	da08      	bge.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a118:	4b11      	ldr	r3, [pc, #68]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a124:	490e      	ldr	r1, [pc, #56]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a126:	4313      	orrs	r3, r2
 800a128:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a136:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a144:	4906      	ldr	r1, [pc, #24]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a146:	4313      	orrs	r3, r2
 800a148:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a14a:	7dbb      	ldrb	r3, [r7, #22]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	e000      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400

0800a164 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b090      	sub	sp, #64	; 0x40
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a172:	f040 8095 	bne.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a176:	4b97      	ldr	r3, [pc, #604]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17a:	f003 0307 	and.w	r3, r3, #7
 800a17e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	2b04      	cmp	r3, #4
 800a184:	f200 8088 	bhi.w	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a188:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a1a5 	.word	0x0800a1a5
 800a194:	0800a1cd 	.word	0x0800a1cd
 800a198:	0800a1f5 	.word	0x0800a1f5
 800a19c:	0800a291 	.word	0x0800a291
 800a1a0:	0800a21d 	.word	0x0800a21d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1a4:	4b8b      	ldr	r3, [pc, #556]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b0:	d108      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 ff64 	bl	800b084 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1c0:	f000 bc94 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1c8:	f000 bc90 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1cc:	4b81      	ldr	r3, [pc, #516]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1d8:	d108      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1da:	f107 0318 	add.w	r3, r7, #24
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fca8 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1e8:	f000 bc80 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f0:	f000 bc7c 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1f4:	4b77      	ldr	r3, [pc, #476]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a200:	d108      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a202:	f107 030c 	add.w	r3, r7, #12
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fde8 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a210:	f000 bc6c 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a218:	f000 bc68 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a21c:	4b6d      	ldr	r3, [pc, #436]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a21e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a224:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a226:	4b6b      	ldr	r3, [pc, #428]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d10c      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a234:	2b00      	cmp	r3, #0
 800a236:	d109      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a238:	4b66      	ldr	r3, [pc, #408]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	08db      	lsrs	r3, r3, #3
 800a23e:	f003 0303 	and.w	r3, r3, #3
 800a242:	4a65      	ldr	r2, [pc, #404]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a244:	fa22 f303 	lsr.w	r3, r2, r3
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24a:	e01f      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a24c:	4b61      	ldr	r3, [pc, #388]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a258:	d106      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a260:	d102      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a262:	4b5e      	ldr	r3, [pc, #376]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a266:	e011      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a268:	4b5a      	ldr	r3, [pc, #360]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a274:	d106      	bne.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27c:	d102      	bne.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a27e:	4b58      	ldr	r3, [pc, #352]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a280:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a282:	e003      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a288:	f000 bc30 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a28c:	f000 bc2e 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a290:	4b54      	ldr	r3, [pc, #336]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a294:	f000 bc2a 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a29c:	f000 bc26 	b.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a6:	f040 809f 	bne.w	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a2aa:	4b4a      	ldr	r3, [pc, #296]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a2b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ba:	d04d      	beq.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2c2:	f200 8084 	bhi.w	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	2bc0      	cmp	r3, #192	; 0xc0
 800a2ca:	d07d      	beq.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a2d0:	d87d      	bhi.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	2b80      	cmp	r3, #128	; 0x80
 800a2d6:	d02d      	beq.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	2b80      	cmp	r3, #128	; 0x80
 800a2dc:	d877      	bhi.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d003      	beq.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e6:	2b40      	cmp	r3, #64	; 0x40
 800a2e8:	d012      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a2ea:	e070      	b.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ec:	4b39      	ldr	r3, [pc, #228]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2f8:	d107      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fec0 	bl	800b084 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a308:	e3f0      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a30e:	e3ed      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a310:	4b30      	ldr	r3, [pc, #192]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a31c:	d107      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a31e:	f107 0318 	add.w	r3, r7, #24
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fc06 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a32c:	e3de      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a332:	e3db      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a334:	4b27      	ldr	r3, [pc, #156]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a340:	d107      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a342:	f107 030c 	add.w	r3, r7, #12
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fd48 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a350:	e3cc      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a356:	e3c9      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a358:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a360:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a362:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d10c      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a374:	4b17      	ldr	r3, [pc, #92]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	08db      	lsrs	r3, r3, #3
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a380:	fa22 f303 	lsr.w	r3, r2, r3
 800a384:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a386:	e01e      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a388:	4b12      	ldr	r3, [pc, #72]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a394:	d106      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a39c:	d102      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a39e:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a2:	e010      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3a4:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3b0:	d106      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3b8:	d102      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3be:	e002      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3c4:	e392      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3c6:	e391      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3cc:	e38e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3d2:	e38b      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	03d09000 	.word	0x03d09000
 800a3dc:	003d0900 	.word	0x003d0900
 800a3e0:	007a1200 	.word	0x007a1200
 800a3e4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ee:	f040 809c 	bne.w	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a3f2:	4b9d      	ldr	r3, [pc, #628]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a3fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a402:	d054      	beq.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a40a:	f200 808b 	bhi.w	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a414:	f000 8083 	beq.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a41e:	f200 8081 	bhi.w	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a428:	d02f      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a430:	d878      	bhi.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	2b00      	cmp	r3, #0
 800a436:	d004      	beq.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a43e:	d012      	beq.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a440:	e070      	b.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a442:	4b89      	ldr	r3, [pc, #548]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a44a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a44e:	d107      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fe15 	bl	800b084 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a45e:	e345      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a464:	e342      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a466:	4b80      	ldr	r3, [pc, #512]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a46e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a472:	d107      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a474:	f107 0318 	add.w	r3, r7, #24
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fb5b 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a482:	e333      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a488:	e330      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a48a:	4b77      	ldr	r3, [pc, #476]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a496:	d107      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a498:	f107 030c 	add.w	r3, r7, #12
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fc9d 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4a6:	e321      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ac:	e31e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4ae:	4b6e      	ldr	r3, [pc, #440]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4b6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4b8:	4b6b      	ldr	r3, [pc, #428]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	d10c      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d109      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4ca:	4b67      	ldr	r3, [pc, #412]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	08db      	lsrs	r3, r3, #3
 800a4d0:	f003 0303 	and.w	r3, r3, #3
 800a4d4:	4a65      	ldr	r2, [pc, #404]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4dc:	e01e      	b.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4de:	4b62      	ldr	r3, [pc, #392]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ea:	d106      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4f2:	d102      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4f4:	4b5e      	ldr	r3, [pc, #376]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f8:	e010      	b.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4fa:	4b5b      	ldr	r3, [pc, #364]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a506:	d106      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a50e:	d102      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a510:	4b58      	ldr	r3, [pc, #352]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a514:	e002      	b.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a51a:	e2e7      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a51c:	e2e6      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a51e:	4b56      	ldr	r3, [pc, #344]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a522:	e2e3      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a528:	e2e0      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a530:	f040 80a7 	bne.w	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a534:	4b4c      	ldr	r3, [pc, #304]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a538:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a53c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a544:	d055      	beq.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a54c:	f200 8096 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a556:	f000 8084 	beq.w	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a560:	f200 808c 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a56a:	d030      	beq.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a572:	f200 8083 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d004      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a582:	d012      	beq.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a584:	e07a      	b.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a586:	4b38      	ldr	r3, [pc, #224]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a58e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a592:	d107      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fd73 	bl	800b084 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5a2:	e2a3      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a8:	e2a0      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5aa:	4b2f      	ldr	r3, [pc, #188]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5b8:	f107 0318 	add.w	r3, r7, #24
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 fab9 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a5c6:	e291      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5cc:	e28e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ce:	4b26      	ldr	r3, [pc, #152]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5da:	d107      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5dc:	f107 030c 	add.w	r3, r7, #12
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fbfb 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5ea:	e27f      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5f0:	e27c      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5f2:	4b1d      	ldr	r3, [pc, #116]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5fa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5fc:	4b1a      	ldr	r3, [pc, #104]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b04      	cmp	r3, #4
 800a606:	d10c      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a60e:	4b16      	ldr	r3, [pc, #88]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	08db      	lsrs	r3, r3, #3
 800a614:	f003 0303 	and.w	r3, r3, #3
 800a618:	4a14      	ldr	r2, [pc, #80]	; (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a61a:	fa22 f303 	lsr.w	r3, r2, r3
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a620:	e01e      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a622:	4b11      	ldr	r3, [pc, #68]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a62e:	d106      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a636:	d102      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a638:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63c:	e010      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a63e:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a64a:	d106      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a652:	d102      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a654:	4b07      	ldr	r3, [pc, #28]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a656:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a658:	e002      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a65e:	e245      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a660:	e244      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a662:	4b05      	ldr	r3, [pc, #20]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a666:	e241      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a668:	58024400 	.word	0x58024400
 800a66c:	03d09000 	.word	0x03d09000
 800a670:	003d0900 	.word	0x003d0900
 800a674:	007a1200 	.word	0x007a1200
 800a678:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a680:	e234      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a688:	f040 809c 	bne.w	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a68c:	4b9b      	ldr	r3, [pc, #620]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a690:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a694:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a69c:	d054      	beq.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6a4:	f200 808b 	bhi.w	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6ae:	f000 8083 	beq.w	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6b8:	f200 8081 	bhi.w	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c2:	d02f      	beq.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ca:	d878      	bhi.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d004      	beq.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d8:	d012      	beq.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a6da:	e070      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6dc:	4b87      	ldr	r3, [pc, #540]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6e8:	d107      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fcc8 	bl	800b084 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6f8:	e1f8      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6fe:	e1f5      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a700:	4b7e      	ldr	r3, [pc, #504]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a70c:	d107      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a70e:	f107 0318 	add.w	r3, r7, #24
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fa0e 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a71c:	e1e6      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a722:	e1e3      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a724:	4b75      	ldr	r3, [pc, #468]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a72c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a730:	d107      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fb50 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a740:	e1d4      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a746:	e1d1      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a748:	4b6c      	ldr	r3, [pc, #432]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a74a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a74c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a750:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a752:	4b6a      	ldr	r3, [pc, #424]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0304 	and.w	r3, r3, #4
 800a75a:	2b04      	cmp	r3, #4
 800a75c:	d10c      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	2b00      	cmp	r3, #0
 800a762:	d109      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a764:	4b65      	ldr	r3, [pc, #404]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	08db      	lsrs	r3, r3, #3
 800a76a:	f003 0303 	and.w	r3, r3, #3
 800a76e:	4a64      	ldr	r2, [pc, #400]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a770:	fa22 f303 	lsr.w	r3, r2, r3
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a776:	e01e      	b.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a778:	4b60      	ldr	r3, [pc, #384]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a784:	d106      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a78c:	d102      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a78e:	4b5d      	ldr	r3, [pc, #372]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a792:	e010      	b.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a794:	4b59      	ldr	r3, [pc, #356]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a79c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7a0:	d106      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7a8:	d102      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7aa:	4b57      	ldr	r3, [pc, #348]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ae:	e002      	b.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7b4:	e19a      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7b6:	e199      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7b8:	4b54      	ldr	r3, [pc, #336]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7bc:	e196      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7c2:	e193      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7ca:	d173      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7cc:	4b4b      	ldr	r3, [pc, #300]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7dc:	d02f      	beq.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7e4:	d863      	bhi.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d004      	beq.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f2:	d012      	beq.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a7f4:	e05b      	b.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7f6:	4b41      	ldr	r3, [pc, #260]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a802:	d107      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a804:	f107 0318 	add.w	r3, r7, #24
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 f993 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a812:	e16b      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a818:	e168      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a81a:	4b38      	ldr	r3, [pc, #224]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a826:	d107      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a828:	f107 030c 	add.w	r3, r7, #12
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fad5 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a836:	e159      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a83c:	e156      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a83e:	4b2f      	ldr	r3, [pc, #188]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a846:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a848:	4b2c      	ldr	r3, [pc, #176]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0304 	and.w	r3, r3, #4
 800a850:	2b04      	cmp	r3, #4
 800a852:	d10c      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a856:	2b00      	cmp	r3, #0
 800a858:	d109      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a85a:	4b28      	ldr	r3, [pc, #160]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	08db      	lsrs	r3, r3, #3
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	4a26      	ldr	r2, [pc, #152]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a866:	fa22 f303 	lsr.w	r3, r2, r3
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a86c:	e01e      	b.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a86e:	4b23      	ldr	r3, [pc, #140]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87a:	d106      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a882:	d102      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a884:	4b1f      	ldr	r3, [pc, #124]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a888:	e010      	b.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a88a:	4b1c      	ldr	r3, [pc, #112]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a896:	d106      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89e:	d102      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8a0:	4b19      	ldr	r3, [pc, #100]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a4:	e002      	b.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8aa:	e11f      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8ac:	e11e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b2:	e11b      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ba:	d13e      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a8bc:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d004      	beq.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d2:	d01d      	beq.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a8d4:	e02e      	b.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8d6:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8e2:	d107      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 fbcb 	bl	800b084 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8f2:	e0fb      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f8:	e0f8      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8fa:	bf00      	nop
 800a8fc:	58024400 	.word	0x58024400
 800a900:	03d09000 	.word	0x03d09000
 800a904:	003d0900 	.word	0x003d0900
 800a908:	007a1200 	.word	0x007a1200
 800a90c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a910:	4b79      	ldr	r3, [pc, #484]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a91c:	d107      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a91e:	f107 0318 	add.w	r3, r7, #24
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f906 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a92c:	e0de      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a932:	e0db      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a938:	e0d8      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a940:	f040 8085 	bne.w	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a944:	4b6c      	ldr	r3, [pc, #432]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a948:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a94c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a954:	d06b      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a95c:	d874      	bhi.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a964:	d056      	beq.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a96c:	d86c      	bhi.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a974:	d03b      	beq.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a97c:	d864      	bhi.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a984:	d021      	beq.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a98c:	d85c      	bhi.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a99a:	d004      	beq.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a99c:	e054      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a99e:	f000 f8b3 	bl	800ab08 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9a2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a9a4:	e0a2      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a6:	4b54      	ldr	r3, [pc, #336]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9b2:	d107      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b4:	f107 0318 	add.w	r3, r7, #24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 f8bb 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9c2:	e093      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c8:	e090      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ca:	4b4b      	ldr	r3, [pc, #300]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d6:	d107      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 f9fd 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9e6:	e081      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ec:	e07e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9ee:	4b42      	ldr	r3, [pc, #264]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0304 	and.w	r3, r3, #4
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d109      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9fa:	4b3f      	ldr	r3, [pc, #252]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	08db      	lsrs	r3, r3, #3
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	4a3d      	ldr	r2, [pc, #244]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa06:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa0c:	e06e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa12:	e06b      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa14:	4b38      	ldr	r3, [pc, #224]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa20:	d102      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800aa22:	4b37      	ldr	r3, [pc, #220]	; (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa26:	e061      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa2c:	e05e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa2e:	4b32      	ldr	r3, [pc, #200]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa3a:	d102      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aa3c:	4b31      	ldr	r3, [pc, #196]	; (800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa40:	e054      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa46:	e051      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa4c:	e04e      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa54:	d148      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa56:	4b28      	ldr	r3, [pc, #160]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa66:	d02a      	beq.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa6e:	d838      	bhi.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d004      	beq.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa7c:	d00d      	beq.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aa7e:	e030      	b.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa80:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa8c:	d102      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aa8e:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa92:	e02b      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa98:	e028      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa9a:	4b17      	ldr	r3, [pc, #92]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa6:	d107      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 fae9 	bl	800b084 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aab6:	e019      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aabc:	e016      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aabe:	4b0e      	ldr	r3, [pc, #56]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaca:	d107      	bne.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aacc:	f107 0318 	add.w	r3, r7, #24
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 f82f 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aada:	e007      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aae0:	e004      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aae6:	e001      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aaec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3740      	adds	r7, #64	; 0x40
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	58024400 	.word	0x58024400
 800aafc:	03d09000 	.word	0x03d09000
 800ab00:	003d0900 	.word	0x003d0900
 800ab04:	007a1200 	.word	0x007a1200

0800ab08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab0c:	f7fe fb46 	bl	800919c <HAL_RCC_GetHCLKFreq>
 800ab10:	4602      	mov	r2, r0
 800ab12:	4b06      	ldr	r3, [pc, #24]	; (800ab2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	091b      	lsrs	r3, r3, #4
 800ab18:	f003 0307 	and.w	r3, r3, #7
 800ab1c:	4904      	ldr	r1, [pc, #16]	; (800ab30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab1e:	5ccb      	ldrb	r3, [r1, r3]
 800ab20:	f003 031f 	and.w	r3, r3, #31
 800ab24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	08024818 	.word	0x08024818

0800ab34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b089      	sub	sp, #36	; 0x24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab3c:	4ba1      	ldr	r3, [pc, #644]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab46:	4b9f      	ldr	r3, [pc, #636]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4a:	0b1b      	lsrs	r3, r3, #12
 800ab4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab52:	4b9c      	ldr	r3, [pc, #624]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab56:	091b      	lsrs	r3, r3, #4
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab5e:	4b99      	ldr	r3, [pc, #612]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab62:	08db      	lsrs	r3, r3, #3
 800ab64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	fb02 f303 	mul.w	r3, r2, r3
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 8111 	beq.w	800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	f000 8083 	beq.w	800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	f200 80a1 	bhi.w	800acd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d003      	beq.n	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d056      	beq.n	800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab9e:	e099      	b.n	800acd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba0:	4b88      	ldr	r3, [pc, #544]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0320 	and.w	r3, r3, #32
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d02d      	beq.n	800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abac:	4b85      	ldr	r3, [pc, #532]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	08db      	lsrs	r3, r3, #3
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	4a84      	ldr	r2, [pc, #528]	; (800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abb8:	fa22 f303 	lsr.w	r3, r2, r3
 800abbc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	ee07 3a90 	vmov	s15, r3
 800abc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd6:	4b7b      	ldr	r3, [pc, #492]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac06:	e087      	b.n	800ad18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1a:	4b6a      	ldr	r3, [pc, #424]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac4a:	e065      	b.n	800ad18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac5e:	4b59      	ldr	r3, [pc, #356]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac72:	eddf 5a56 	vldr	s11, [pc, #344]	; 800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac8e:	e043      	b.n	800ad18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca2:	4b48      	ldr	r3, [pc, #288]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acd2:	e021      	b.n	800ad18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	ee07 3a90 	vmov	s15, r3
 800acda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ace2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace6:	4b37      	ldr	r3, [pc, #220]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad18:	4b2a      	ldr	r3, [pc, #168]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1c:	0a5b      	lsrs	r3, r3, #9
 800ad1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad32:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad3e:	ee17 2a90 	vmov	r2, s15
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad46:	4b1f      	ldr	r3, [pc, #124]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	0c1b      	lsrs	r3, r3, #16
 800ad4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad50:	ee07 3a90 	vmov	s15, r3
 800ad54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad60:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad6c:	ee17 2a90 	vmov	r2, s15
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad74:	4b13      	ldr	r3, [pc, #76]	; (800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad78:	0e1b      	lsrs	r3, r3, #24
 800ad7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad9a:	ee17 2a90 	vmov	r2, s15
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ada2:	e008      	b.n	800adb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	609a      	str	r2, [r3, #8]
}
 800adb6:	bf00      	nop
 800adb8:	3724      	adds	r7, #36	; 0x24
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	58024400 	.word	0x58024400
 800adc8:	03d09000 	.word	0x03d09000
 800adcc:	46000000 	.word	0x46000000
 800add0:	4c742400 	.word	0x4c742400
 800add4:	4a742400 	.word	0x4a742400
 800add8:	4af42400 	.word	0x4af42400

0800addc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800addc:	b480      	push	{r7}
 800adde:	b089      	sub	sp, #36	; 0x24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ade4:	4ba1      	ldr	r3, [pc, #644]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade8:	f003 0303 	and.w	r3, r3, #3
 800adec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adee:	4b9f      	ldr	r3, [pc, #636]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf2:	0d1b      	lsrs	r3, r3, #20
 800adf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800adfa:	4b9c      	ldr	r3, [pc, #624]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfe:	0a1b      	lsrs	r3, r3, #8
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae06:	4b99      	ldr	r3, [pc, #612]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0a:	08db      	lsrs	r3, r3, #3
 800ae0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	fb02 f303 	mul.w	r3, r2, r3
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 8111 	beq.w	800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	f000 8083 	beq.w	800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	f200 80a1 	bhi.w	800af7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d056      	beq.n	800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae46:	e099      	b.n	800af7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae48:	4b88      	ldr	r3, [pc, #544]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0320 	and.w	r3, r3, #32
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d02d      	beq.n	800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae54:	4b85      	ldr	r3, [pc, #532]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	08db      	lsrs	r3, r3, #3
 800ae5a:	f003 0303 	and.w	r3, r3, #3
 800ae5e:	4a84      	ldr	r2, [pc, #528]	; (800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae60:	fa22 f303 	lsr.w	r3, r2, r3
 800ae64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	ee07 3a90 	vmov	s15, r3
 800ae6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae7e:	4b7b      	ldr	r3, [pc, #492]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae92:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aeae:	e087      	b.n	800afc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aec2:	4b6a      	ldr	r3, [pc, #424]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aed2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aef2:	e065      	b.n	800afc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af06:	4b59      	ldr	r3, [pc, #356]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0e:	ee07 3a90 	vmov	s15, r3
 800af12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af16:	ed97 6a03 	vldr	s12, [r7, #12]
 800af1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af36:	e043      	b.n	800afc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af4a:	4b48      	ldr	r3, [pc, #288]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af7a:	e021      	b.n	800afc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	ee07 3a90 	vmov	s15, r3
 800af82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8e:	4b37      	ldr	r3, [pc, #220]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800afc0:	4b2a      	ldr	r3, [pc, #168]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc4:	0a5b      	lsrs	r3, r3, #9
 800afc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afda:	edd7 6a07 	vldr	s13, [r7, #28]
 800afde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afe6:	ee17 2a90 	vmov	r2, s15
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800afee:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aff8:	ee07 3a90 	vmov	s15, r3
 800affc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b004:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b008:	edd7 6a07 	vldr	s13, [r7, #28]
 800b00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b014:	ee17 2a90 	vmov	r2, s15
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b01c:	4b13      	ldr	r3, [pc, #76]	; (800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b020:	0e1b      	lsrs	r3, r3, #24
 800b022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b032:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b036:	edd7 6a07 	vldr	s13, [r7, #28]
 800b03a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b03e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b042:	ee17 2a90 	vmov	r2, s15
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b04a:	e008      	b.n	800b05e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	609a      	str	r2, [r3, #8]
}
 800b05e:	bf00      	nop
 800b060:	3724      	adds	r7, #36	; 0x24
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	58024400 	.word	0x58024400
 800b070:	03d09000 	.word	0x03d09000
 800b074:	46000000 	.word	0x46000000
 800b078:	4c742400 	.word	0x4c742400
 800b07c:	4a742400 	.word	0x4a742400
 800b080:	4af42400 	.word	0x4af42400

0800b084 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b084:	b480      	push	{r7}
 800b086:	b089      	sub	sp, #36	; 0x24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b08c:	4ba0      	ldr	r3, [pc, #640]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b090:	f003 0303 	and.w	r3, r3, #3
 800b094:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b096:	4b9e      	ldr	r3, [pc, #632]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09a:	091b      	lsrs	r3, r3, #4
 800b09c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0a2:	4b9b      	ldr	r3, [pc, #620]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b0ac:	4b98      	ldr	r3, [pc, #608]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b0:	08db      	lsrs	r3, r3, #3
 800b0b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	fb02 f303 	mul.w	r3, r2, r3
 800b0bc:	ee07 3a90 	vmov	s15, r3
 800b0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 8111 	beq.w	800b2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	f000 8083 	beq.w	800b1de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	f200 80a1 	bhi.w	800b222 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d056      	beq.n	800b19a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0ec:	e099      	b.n	800b222 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ee:	4b88      	ldr	r3, [pc, #544]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d02d      	beq.n	800b156 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0fa:	4b85      	ldr	r3, [pc, #532]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	08db      	lsrs	r3, r3, #3
 800b100:	f003 0303 	and.w	r3, r3, #3
 800b104:	4a83      	ldr	r2, [pc, #524]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b106:	fa22 f303 	lsr.w	r3, r2, r3
 800b10a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	ee07 3a90 	vmov	s15, r3
 800b11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b124:	4b7a      	ldr	r3, [pc, #488]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12c:	ee07 3a90 	vmov	s15, r3
 800b130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b134:	ed97 6a03 	vldr	s12, [r7, #12]
 800b138:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b13c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b150:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b154:	e087      	b.n	800b266 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	ee07 3a90 	vmov	s15, r3
 800b15c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b160:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b168:	4b69      	ldr	r3, [pc, #420]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b170:	ee07 3a90 	vmov	s15, r3
 800b174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b178:	ed97 6a03 	vldr	s12, [r7, #12]
 800b17c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b18c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b190:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b194:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b198:	e065      	b.n	800b266 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	ee07 3a90 	vmov	s15, r3
 800b1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ac:	4b58      	ldr	r3, [pc, #352]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b4:	ee07 3a90 	vmov	s15, r3
 800b1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1dc:	e043      	b.n	800b266 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	ee07 3a90 	vmov	s15, r3
 800b1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f0:	4b47      	ldr	r3, [pc, #284]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f8:	ee07 3a90 	vmov	s15, r3
 800b1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b200:	ed97 6a03 	vldr	s12, [r7, #12]
 800b204:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b210:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b220:	e021      	b.n	800b266 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	ee07 3a90 	vmov	s15, r3
 800b228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b234:	4b36      	ldr	r3, [pc, #216]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b244:	ed97 6a03 	vldr	s12, [r7, #12]
 800b248:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b24c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b260:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b264:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b266:	4b2a      	ldr	r3, [pc, #168]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26a:	0a5b      	lsrs	r3, r3, #9
 800b26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b270:	ee07 3a90 	vmov	s15, r3
 800b274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b27c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b280:	edd7 6a07 	vldr	s13, [r7, #28]
 800b284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b28c:	ee17 2a90 	vmov	r2, s15
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b294:	4b1e      	ldr	r3, [pc, #120]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b298:	0c1b      	lsrs	r3, r3, #16
 800b29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ba:	ee17 2a90 	vmov	r2, s15
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b2c2:	4b13      	ldr	r3, [pc, #76]	; (800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c6:	0e1b      	lsrs	r3, r3, #24
 800b2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2cc:	ee07 3a90 	vmov	s15, r3
 800b2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2e8:	ee17 2a90 	vmov	r2, s15
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2f0:	e008      	b.n	800b304 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	609a      	str	r2, [r3, #8]
}
 800b304:	bf00      	nop
 800b306:	3724      	adds	r7, #36	; 0x24
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	58024400 	.word	0x58024400
 800b314:	03d09000 	.word	0x03d09000
 800b318:	46000000 	.word	0x46000000
 800b31c:	4c742400 	.word	0x4c742400
 800b320:	4a742400 	.word	0x4a742400
 800b324:	4af42400 	.word	0x4af42400

0800b328 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b336:	4b53      	ldr	r3, [pc, #332]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d101      	bne.n	800b346 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e099      	b.n	800b47a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b346:	4b4f      	ldr	r3, [pc, #316]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a4e      	ldr	r2, [pc, #312]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b34c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b352:	f7f9 f975 	bl	8004640 <HAL_GetTick>
 800b356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b358:	e008      	b.n	800b36c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b35a:	f7f9 f971 	bl	8004640 <HAL_GetTick>
 800b35e:	4602      	mov	r2, r0
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	2b02      	cmp	r3, #2
 800b366:	d901      	bls.n	800b36c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b368:	2303      	movs	r3, #3
 800b36a:	e086      	b.n	800b47a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b36c:	4b45      	ldr	r3, [pc, #276]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1f0      	bne.n	800b35a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b378:	4b42      	ldr	r3, [pc, #264]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	031b      	lsls	r3, r3, #12
 800b386:	493f      	ldr	r1, [pc, #252]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b388:	4313      	orrs	r3, r2
 800b38a:	628b      	str	r3, [r1, #40]	; 0x28
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	3b01      	subs	r3, #1
 800b392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	025b      	lsls	r3, r3, #9
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	041b      	lsls	r3, r3, #16
 800b3aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	061b      	lsls	r3, r3, #24
 800b3b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3bc:	4931      	ldr	r1, [pc, #196]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3c2:	4b30      	ldr	r3, [pc, #192]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	492d      	ldr	r1, [pc, #180]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3d4:	4b2b      	ldr	r3, [pc, #172]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d8:	f023 0220 	bic.w	r2, r3, #32
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	4928      	ldr	r1, [pc, #160]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3e6:	4b27      	ldr	r3, [pc, #156]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ea:	4a26      	ldr	r2, [pc, #152]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3ec:	f023 0310 	bic.w	r3, r3, #16
 800b3f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3f2:	4b24      	ldr	r3, [pc, #144]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3f6:	4b24      	ldr	r3, [pc, #144]	; (800b488 <RCCEx_PLL2_Config+0x160>)
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	69d2      	ldr	r2, [r2, #28]
 800b3fe:	00d2      	lsls	r2, r2, #3
 800b400:	4920      	ldr	r1, [pc, #128]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b402:	4313      	orrs	r3, r2
 800b404:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b406:	4b1f      	ldr	r3, [pc, #124]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40a:	4a1e      	ldr	r2, [pc, #120]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b40c:	f043 0310 	orr.w	r3, r3, #16
 800b410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b418:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41c:	4a19      	ldr	r2, [pc, #100]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b41e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b422:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b424:	e00f      	b.n	800b446 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d106      	bne.n	800b43a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b42c:	4b15      	ldr	r3, [pc, #84]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	4a14      	ldr	r2, [pc, #80]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b436:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b438:	e005      	b.n	800b446 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b43a:	4b12      	ldr	r3, [pc, #72]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	4a11      	ldr	r2, [pc, #68]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b444:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a0e      	ldr	r2, [pc, #56]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b44c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b452:	f7f9 f8f5 	bl	8004640 <HAL_GetTick>
 800b456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b458:	e008      	b.n	800b46c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b45a:	f7f9 f8f1 	bl	8004640 <HAL_GetTick>
 800b45e:	4602      	mov	r2, r0
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	2b02      	cmp	r3, #2
 800b466:	d901      	bls.n	800b46c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b468:	2303      	movs	r3, #3
 800b46a:	e006      	b.n	800b47a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <RCCEx_PLL2_Config+0x15c>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0f0      	beq.n	800b45a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	58024400 	.word	0x58024400
 800b488:	ffff0007 	.word	0xffff0007

0800b48c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b49a:	4b53      	ldr	r3, [pc, #332]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49e:	f003 0303 	and.w	r3, r3, #3
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	d101      	bne.n	800b4aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e099      	b.n	800b5de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4aa:	4b4f      	ldr	r3, [pc, #316]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a4e      	ldr	r2, [pc, #312]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b4b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4b6:	f7f9 f8c3 	bl	8004640 <HAL_GetTick>
 800b4ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4bc:	e008      	b.n	800b4d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4be:	f7f9 f8bf 	bl	8004640 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d901      	bls.n	800b4d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e086      	b.n	800b5de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4d0:	4b45      	ldr	r3, [pc, #276]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1f0      	bne.n	800b4be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4dc:	4b42      	ldr	r3, [pc, #264]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	051b      	lsls	r3, r3, #20
 800b4ea:	493f      	ldr	r1, [pc, #252]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	628b      	str	r3, [r1, #40]	; 0x28
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	3b01      	subs	r3, #1
 800b500:	025b      	lsls	r3, r3, #9
 800b502:	b29b      	uxth	r3, r3
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	041b      	lsls	r3, r3, #16
 800b50e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b512:	431a      	orrs	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	3b01      	subs	r3, #1
 800b51a:	061b      	lsls	r3, r3, #24
 800b51c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b520:	4931      	ldr	r1, [pc, #196]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b522:	4313      	orrs	r3, r2
 800b524:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b526:	4b30      	ldr	r3, [pc, #192]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	492d      	ldr	r1, [pc, #180]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b534:	4313      	orrs	r3, r2
 800b536:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b538:	4b2b      	ldr	r3, [pc, #172]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	4928      	ldr	r1, [pc, #160]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b546:	4313      	orrs	r3, r2
 800b548:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b54a:	4b27      	ldr	r3, [pc, #156]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54e:	4a26      	ldr	r2, [pc, #152]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b556:	4b24      	ldr	r3, [pc, #144]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b55a:	4b24      	ldr	r3, [pc, #144]	; (800b5ec <RCCEx_PLL3_Config+0x160>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	69d2      	ldr	r2, [r2, #28]
 800b562:	00d2      	lsls	r2, r2, #3
 800b564:	4920      	ldr	r1, [pc, #128]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b566:	4313      	orrs	r3, r2
 800b568:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b56a:	4b1f      	ldr	r3, [pc, #124]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56e:	4a1e      	ldr	r2, [pc, #120]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b574:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d106      	bne.n	800b58a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b57c:	4b1a      	ldr	r3, [pc, #104]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	4a19      	ldr	r2, [pc, #100]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b586:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b588:	e00f      	b.n	800b5aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d106      	bne.n	800b59e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b590:	4b15      	ldr	r3, [pc, #84]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b594:	4a14      	ldr	r2, [pc, #80]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b596:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b59a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b59c:	e005      	b.n	800b5aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b59e:	4b12      	ldr	r3, [pc, #72]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a2:	4a11      	ldr	r2, [pc, #68]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b5a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a0e      	ldr	r2, [pc, #56]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b5b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5b6:	f7f9 f843 	bl	8004640 <HAL_GetTick>
 800b5ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5bc:	e008      	b.n	800b5d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5be:	f7f9 f83f 	bl	8004640 <HAL_GetTick>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d901      	bls.n	800b5d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e006      	b.n	800b5de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5d0:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <RCCEx_PLL3_Config+0x15c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0f0      	beq.n	800b5be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	58024400 	.word	0x58024400
 800b5ec:	ffff0007 	.word	0xffff0007

0800b5f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e075      	b.n	800b6ee <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d105      	bne.n	800b61a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7f8 f807 	bl	8003628 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2204      	movs	r2, #4
 800b61e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f868 	bl	800b6f8 <HAL_SD_InitCard>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e05d      	b.n	800b6ee <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b632:	f107 0308 	add.w	r3, r7, #8
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fda9 	bl	800c190 <HAL_SD_GetCardStatus>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e052      	b.n	800b6ee <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b648:	7e3b      	ldrb	r3, [r7, #24]
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b64e:	7e7b      	ldrb	r3, [r7, #25]
 800b650:	b2db      	uxtb	r3, r3
 800b652:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d10a      	bne.n	800b672 <HAL_SD_Init+0x82>
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d102      	bne.n	800b668 <HAL_SD_Init+0x78>
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d004      	beq.n	800b672 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b66e:	659a      	str	r2, [r3, #88]	; 0x58
 800b670:	e00b      	b.n	800b68a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	2b01      	cmp	r3, #1
 800b678:	d104      	bne.n	800b684 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b680:	659a      	str	r2, [r3, #88]	; 0x58
 800b682:	e002      	b.n	800b68a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fe67 	bl	800c364 <HAL_SD_ConfigWideBusOperation>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e026      	b.n	800b6ee <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b6a0:	f7f8 ffce 	bl	8004640 <HAL_GetTick>
 800b6a4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b6a6:	e011      	b.n	800b6cc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6a8:	f7f8 ffca 	bl	8004640 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b6:	d109      	bne.n	800b6cc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6be:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e010      	b.n	800b6ee <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 ff5b 	bl	800c588 <HAL_SD_GetCardState>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	d1e7      	bne.n	800b6a8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3728      	adds	r7, #40	; 0x28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6f8:	b590      	push	{r4, r7, lr}
 800b6fa:	b08d      	sub	sp, #52	; 0x34
 800b6fc:	af02      	add	r7, sp, #8
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b708:	2300      	movs	r3, #0
 800b70a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b70c:	2300      	movs	r3, #0
 800b70e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b710:	2300      	movs	r3, #0
 800b712:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b718:	f7fe fd24 	bl	800a164 <HAL_RCCEx_GetPeriphCLKFreq>
 800b71c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	2b00      	cmp	r3, #0
 800b722:	d109      	bne.n	800b738 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b732:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e06a      	b.n	800b80e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	0a1b      	lsrs	r3, r3, #8
 800b73c:	4a36      	ldr	r2, [pc, #216]	; (800b818 <HAL_SD_InitCard+0x120>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	091b      	lsrs	r3, r3, #4
 800b744:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681c      	ldr	r4, [r3, #0]
 800b74a:	466a      	mov	r2, sp
 800b74c:	f107 0318 	add.w	r3, r7, #24
 800b750:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b754:	e882 0003 	stmia.w	r2, {r0, r1}
 800b758:	f107 030c 	add.w	r3, r7, #12
 800b75c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b75e:	4620      	mov	r0, r4
 800b760:	f004 fdda 	bl	8010318 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4618      	mov	r0, r3
 800b76a:	f004 fe1d 	bl	80103a8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b774:	fbb2 f3f3 	udiv	r3, r2, r3
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b77a:	4a28      	ldr	r2, [pc, #160]	; (800b81c <HAL_SD_InitCard+0x124>)
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b782:	3301      	adds	r3, #1
 800b784:	4618      	mov	r0, r3
 800b786:	f7f8 ff67 	bl	8004658 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 ffea 	bl	800c764 <SD_PowerON>
 800b790:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00b      	beq.n	800b7b0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e02e      	b.n	800b80e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 ff09 	bl	800c5c8 <SD_InitCard>
 800b7b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00b      	beq.n	800b7d6 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	431a      	orrs	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e01b      	b.n	800b80e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f004 fe78 	bl	80104d4 <SDMMC_CmdBlockLength>
 800b7e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00f      	beq.n	800b80c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a0b      	ldr	r2, [pc, #44]	; (800b820 <HAL_SD_InitCard+0x128>)
 800b7f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	372c      	adds	r7, #44	; 0x2c
 800b812:	46bd      	mov	sp, r7
 800b814:	bd90      	pop	{r4, r7, pc}
 800b816:	bf00      	nop
 800b818:	014f8b59 	.word	0x014f8b59
 800b81c:	00012110 	.word	0x00012110
 800b820:	1fe00fff 	.word	0x1fe00fff

0800b824 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08c      	sub	sp, #48	; 0x30
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
 800b830:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d107      	bne.n	800b84c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b840:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e08d      	b.n	800b968 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b01      	cmp	r3, #1
 800b856:	f040 8086 	bne.w	800b966 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	441a      	add	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d907      	bls.n	800b87e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e074      	b.n	800b968 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2203      	movs	r2, #3
 800b882:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2200      	movs	r2, #0
 800b88c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	025a      	lsls	r2, r3, #9
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d002      	beq.n	800b8aa <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	025b      	lsls	r3, r3, #9
 800b8a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	025b      	lsls	r3, r3, #9
 800b8b4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b8b6:	2390      	movs	r3, #144	; 0x90
 800b8b8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f107 0210 	add.w	r2, r7, #16
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f004 fdd3 	bl	801047c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8e4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d90a      	bls.n	800b912 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2282      	movs	r2, #130	; 0x82
 800b900:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b908:	4618      	mov	r0, r3
 800b90a:	f004 fe29 	bl	8010560 <SDMMC_CmdReadMultiBlock>
 800b90e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b910:	e009      	b.n	800b926 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2281      	movs	r2, #129	; 0x81
 800b916:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b91e:	4618      	mov	r0, r3
 800b920:	f004 fdfb 	bl	801051a <SDMMC_CmdReadSingleBlock>
 800b924:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d012      	beq.n	800b952 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a0f      	ldr	r2, [pc, #60]	; (800b970 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800b932:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	431a      	orrs	r2, r3
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e00a      	b.n	800b968 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b960:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	e000      	b.n	800b968 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800b966:	2302      	movs	r3, #2
  }
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3730      	adds	r7, #48	; 0x30
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	1fe00fff 	.word	0x1fe00fff

0800b974 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b08c      	sub	sp, #48	; 0x30
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d107      	bne.n	800b99c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b990:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e08d      	b.n	800bab8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	f040 8086 	bne.w	800bab6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b9b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	441a      	add	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d907      	bls.n	800b9ce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e074      	b.n	800bab8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2203      	movs	r2, #3
 800b9d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	025a      	lsls	r2, r3, #9
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d002      	beq.n	800b9fa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	025b      	lsls	r3, r3, #9
 800b9f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	025b      	lsls	r3, r3, #9
 800ba04:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ba06:	2390      	movs	r3, #144	; 0x90
 800ba08:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ba12:	2300      	movs	r3, #0
 800ba14:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f107 0210 	add.w	r2, r7, #16
 800ba1e:	4611      	mov	r1, r2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f004 fd2b 	bl	801047c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68da      	ldr	r2, [r3, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba34:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2201      	movs	r2, #1
 800ba44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d90a      	bls.n	800ba62 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	22a0      	movs	r2, #160	; 0xa0
 800ba50:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f004 fdc7 	bl	80105ec <SDMMC_CmdWriteMultiBlock>
 800ba5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ba60:	e009      	b.n	800ba76 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2290      	movs	r2, #144	; 0x90
 800ba66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f004 fd99 	bl	80105a6 <SDMMC_CmdWriteSingleBlock>
 800ba74:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ba76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d012      	beq.n	800baa2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a0f      	ldr	r2, [pc, #60]	; (800bac0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8a:	431a      	orrs	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e00a      	b.n	800bab8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800bab0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	e000      	b.n	800bab8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800bab6:	2302      	movs	r3, #2
  }
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3730      	adds	r7, #48	; 0x30
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	1fe00fff 	.word	0x1fe00fff

0800bac4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d008      	beq.n	800baf2 <HAL_SD_IRQHandler+0x2e>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f003 0308 	and.w	r3, r3, #8
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 f926 	bl	800cd3c <SD_Read_IT>
 800baf0:	e19a      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 80ac 	beq.w	800bc5a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb0a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b59      	ldr	r3, [pc, #356]	; (800bc7c <HAL_SD_IRQHandler+0x1b8>)
 800bb18:	400b      	ands	r3, r1
 800bb1a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bb2a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68da      	ldr	r2, [r3, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb3a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f003 0308 	and.w	r3, r3, #8
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d038      	beq.n	800bbb8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f003 0302 	and.w	r3, r3, #2
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d104      	bne.n	800bb5a <HAL_SD_IRQHandler+0x96>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d011      	beq.n	800bb7e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f004 fd68 	bl	8010634 <SDMMC_CmdStopTransfer>
 800bb64:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d008      	beq.n	800bb7e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	431a      	orrs	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f95b 	bl	800be34 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a3f      	ldr	r2, [pc, #252]	; (800bc80 <HAL_SD_IRQHandler+0x1bc>)
 800bb84:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d104      	bne.n	800bba8 <HAL_SD_IRQHandler+0xe4>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d003      	beq.n	800bbb0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f005 fa1b 	bl	8010fe4 <HAL_SD_RxCpltCallback>
 800bbae:	e13b      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f005 fa0d 	bl	8010fd0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bbb6:	e137      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 8132 	beq.w	800be28 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f003 0302 	and.w	r3, r3, #2
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d104      	bne.n	800bbf0 <HAL_SD_IRQHandler+0x12c>
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d011      	beq.n	800bc14 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f004 fd1d 	bl	8010634 <SDMMC_CmdStopTransfer>
 800bbfa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f910 	bl	800be34 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f003 0310 	and.w	r3, r3, #16
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <HAL_SD_IRQHandler+0x172>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f003 0320 	and.w	r3, r3, #32
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d002      	beq.n	800bc3c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f005 f9ca 	bl	8010fd0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d105      	bne.n	800bc52 <HAL_SD_IRQHandler+0x18e>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f003 0302 	and.w	r3, r3, #2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 80eb 	beq.w	800be28 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f005 f9c6 	bl	8010fe4 <HAL_SD_RxCpltCallback>
}
 800bc58:	e0e6      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00d      	beq.n	800bc84 <HAL_SD_IRQHandler+0x1c0>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f003 0308 	and.w	r3, r3, #8
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d008      	beq.n	800bc84 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 f8a8 	bl	800cdc8 <SD_Write_IT>
 800bc78:	e0d6      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
 800bc7a:	bf00      	nop
 800bc7c:	ffff3ec5 	.word	0xffff3ec5
 800bc80:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 809d 	beq.w	800bdce <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	f003 0302 	and.w	r3, r3, #2
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d005      	beq.n	800bcae <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca6:	f043 0202 	orr.w	r2, r3, #2
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb4:	f003 0308 	and.w	r3, r3, #8
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d005      	beq.n	800bcc8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc0:	f043 0208 	orr.w	r2, r3, #8
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcda:	f043 0220 	orr.w	r2, r3, #32
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d005      	beq.n	800bcfc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf4:	f043 0210 	orr.w	r2, r3, #16
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a4b      	ldr	r2, [pc, #300]	; (800be30 <HAL_SD_IRQHandler+0x36c>)
 800bd02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bd12:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68da      	ldr	r2, [r3, #12]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd22:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd32:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68da      	ldr	r2, [r3, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd42:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f004 fc73 	bl	8010634 <SDMMC_CmdStopTransfer>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd54:	431a      	orrs	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68da      	ldr	r2, [r3, #12]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd68:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd72:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f851 	bl	800be34 <HAL_SD_ErrorCallback>
}
 800bd92:	e049      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d044      	beq.n	800be28 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d040      	beq.n	800be28 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bdb4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f834 	bl	800be34 <HAL_SD_ErrorCallback>
}
 800bdcc:	e02c      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d025      	beq.n	800be28 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdec:	f003 0304 	and.w	r3, r3, #4
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10c      	bne.n	800be0e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f003 0320 	and.w	r3, r3, #32
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d003      	beq.n	800be06 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 f84a 	bl	800ce98 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800be04:	e010      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 f832 	bl	800ce70 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800be0c:	e00c      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f003 0320 	and.w	r3, r3, #32
 800be14:	2b00      	cmp	r3, #0
 800be16:	d003      	beq.n	800be20 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f001 f833 	bl	800ce84 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800be1e:	e003      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 f81b 	bl	800ce5c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800be26:	e7ff      	b.n	800be28 <HAL_SD_IRQHandler+0x364>
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	18000f3a 	.word	0x18000f3a

0800be34 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be56:	0f9b      	lsrs	r3, r3, #30
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be62:	0e9b      	lsrs	r3, r3, #26
 800be64:	b2db      	uxtb	r3, r3
 800be66:	f003 030f 	and.w	r3, r3, #15
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be74:	0e1b      	lsrs	r3, r3, #24
 800be76:	b2db      	uxtb	r3, r3
 800be78:	f003 0303 	and.w	r3, r3, #3
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be86:	0c1b      	lsrs	r3, r3, #16
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be92:	0a1b      	lsrs	r3, r3, #8
 800be94:	b2da      	uxtb	r2, r3
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bea8:	0d1b      	lsrs	r3, r3, #20
 800beaa:	b29a      	uxth	r2, r3
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beb4:	0c1b      	lsrs	r3, r3, #16
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	f003 030f 	and.w	r3, r3, #15
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bec6:	0bdb      	lsrs	r3, r3, #15
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bed8:	0b9b      	lsrs	r3, r3, #14
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beea:	0b5b      	lsrs	r3, r3, #13
 800beec:	b2db      	uxtb	r3, r3
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800befc:	0b1b      	lsrs	r3, r3, #12
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d163      	bne.n	800bfe0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf1c:	009a      	lsls	r2, r3, #2
 800bf1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bf22:	4013      	ands	r3, r2
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bf28:	0f92      	lsrs	r2, r2, #30
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf34:	0edb      	lsrs	r3, r3, #27
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	f003 0307 	and.w	r3, r3, #7
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf46:	0e1b      	lsrs	r3, r3, #24
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f003 0307 	and.w	r3, r3, #7
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf58:	0d5b      	lsrs	r3, r3, #21
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0307 	and.w	r3, r3, #7
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf6a:	0c9b      	lsrs	r3, r3, #18
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 0307 	and.w	r3, r3, #7
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf7c:	0bdb      	lsrs	r3, r3, #15
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	f003 0307 	and.w	r3, r3, #7
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	7e1b      	ldrb	r3, [r3, #24]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	f003 0307 	and.w	r3, r3, #7
 800bf9e:	3302      	adds	r3, #2
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bfaa:	fb03 f202 	mul.w	r2, r3, r2
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	7a1b      	ldrb	r3, [r3, #8]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	f003 030f 	and.w	r3, r3, #15
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	409a      	lsls	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800bfcc:	0a52      	lsrs	r2, r2, #9
 800bfce:	fb03 f202 	mul.w	r2, r3, r2
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfdc:	655a      	str	r2, [r3, #84]	; 0x54
 800bfde:	e031      	b.n	800c044 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d11d      	bne.n	800c024 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfec:	041b      	lsls	r3, r3, #16
 800bfee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bff6:	0c1b      	lsrs	r3, r3, #16
 800bff8:	431a      	orrs	r2, r3
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	3301      	adds	r3, #1
 800c004:	029a      	lsls	r2, r3, #10
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c018:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	655a      	str	r2, [r3, #84]	; 0x54
 800c022:	e00f      	b.n	800c044 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a58      	ldr	r2, [pc, #352]	; (800c18c <HAL_SD_GetCardCSD+0x344>)
 800c02a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c030:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e09d      	b.n	800c180 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c048:	0b9b      	lsrs	r3, r3, #14
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	b2da      	uxtb	r2, r3
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c05a:	09db      	lsrs	r3, r3, #7
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c062:	b2da      	uxtb	r2, r3
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c072:	b2da      	uxtb	r2, r3
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c07c:	0fdb      	lsrs	r3, r3, #31
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c088:	0f5b      	lsrs	r3, r3, #29
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	f003 0303 	and.w	r3, r3, #3
 800c090:	b2da      	uxtb	r2, r3
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c09a:	0e9b      	lsrs	r3, r3, #26
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0ac:	0d9b      	lsrs	r3, r3, #22
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	f003 030f 	and.w	r3, r3, #15
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0be:	0d5b      	lsrs	r3, r3, #21
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0da:	0c1b      	lsrs	r3, r3, #16
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0ee:	0bdb      	lsrs	r3, r3, #15
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c102:	0b9b      	lsrs	r3, r3, #14
 800c104:	b2db      	uxtb	r3, r3
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c116:	0b5b      	lsrs	r3, r3, #13
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	f003 0301 	and.w	r3, r3, #1
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c12a:	0b1b      	lsrs	r3, r3, #12
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	f003 0301 	and.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c13e:	0a9b      	lsrs	r3, r3, #10
 800c140:	b2db      	uxtb	r3, r3
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	b2da      	uxtb	r2, r3
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c152:	0a1b      	lsrs	r3, r3, #8
 800c154:	b2db      	uxtb	r3, r3
 800c156:	f003 0303 	and.w	r3, r3, #3
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c166:	085b      	lsrs	r3, r3, #1
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	1fe00fff 	.word	0x1fe00fff

0800c190 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b094      	sub	sp, #80	; 0x50
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d101      	bne.n	800c1b0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e0a7      	b.n	800c300 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c1b0:	f107 0308 	add.w	r3, r7, #8
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fb62 	bl	800c880 <SD_SendSDStatus>
 800c1bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d011      	beq.n	800c1e8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a4f      	ldr	r2, [pc, #316]	; (800c308 <HAL_SD_GetCardStatus+0x178>)
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d2:	431a      	orrs	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c1e6:	e070      	b.n	800c2ca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	099b      	lsrs	r3, r3, #6
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	095b      	lsrs	r3, r3, #5
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	b2da      	uxtb	r2, r3
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	0a1b      	lsrs	r3, r3, #8
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c212:	b29a      	uxth	r2, r3
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	0e1b      	lsrs	r3, r3, #24
 800c218:	b29b      	uxth	r3, r3
 800c21a:	4313      	orrs	r3, r2
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	061a      	lsls	r2, r3, #24
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c22e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	0a1b      	lsrs	r3, r3, #8
 800c234:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c238:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	0e1b      	lsrs	r3, r3, #24
 800c23e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	b2da      	uxtb	r2, r3
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	0a1b      	lsrs	r3, r3, #8
 800c250:	b2da      	uxtb	r2, r3
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	0d1b      	lsrs	r3, r3, #20
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	f003 030f 	and.w	r3, r3, #15
 800c260:	b2da      	uxtb	r2, r3
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	0c1b      	lsrs	r3, r3, #16
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c270:	b29a      	uxth	r2, r3
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	b29b      	uxth	r3, r3
 800c276:	b2db      	uxtb	r3, r3
 800c278:	b29b      	uxth	r3, r3
 800c27a:	4313      	orrs	r3, r2
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	0a9b      	lsrs	r3, r3, #10
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	0a1b      	lsrs	r3, r3, #8
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f003 0303 	and.w	r3, r3, #3
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	091b      	lsrs	r3, r3, #4
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	f003 030f 	and.w	r3, r3, #15
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	f003 030f 	and.w	r3, r3, #15
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	0e1b      	lsrs	r3, r3, #24
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f004 f8fe 	bl	80104d4 <SDMMC_CmdBlockLength>
 800c2d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00d      	beq.n	800c2fc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a08      	ldr	r2, [pc, #32]	; (800c308 <HAL_SD_GetCardStatus+0x178>)
 800c2e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2ec:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800c2fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c300:	4618      	mov	r0, r3
 800c302:	3750      	adds	r7, #80	; 0x50
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	1fe00fff 	.word	0x1fe00fff

0800c30c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c364:	b590      	push	{r4, r7, lr}
 800c366:	b08d      	sub	sp, #52	; 0x34
 800c368:	af02      	add	r7, sp, #8
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800c36e:	2300      	movs	r3, #0
 800c370:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2203      	movs	r2, #3
 800c37c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c384:	2b03      	cmp	r3, #3
 800c386:	d02e      	beq.n	800c3e6 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c38e:	d106      	bne.n	800c39e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c394:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	635a      	str	r2, [r3, #52]	; 0x34
 800c39c:	e029      	b.n	800c3f2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3a4:	d10a      	bne.n	800c3bc <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fb62 	bl	800ca70 <SD_WideBus_Enable>
 800c3ac:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	431a      	orrs	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	635a      	str	r2, [r3, #52]	; 0x34
 800c3ba:	e01a      	b.n	800c3f2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fb9f 	bl	800cb06 <SD_WideBus_Disable>
 800c3c8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	431a      	orrs	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	635a      	str	r2, [r3, #52]	; 0x34
 800c3d6:	e00c      	b.n	800c3f2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	635a      	str	r2, [r3, #52]	; 0x34
 800c3e4:	e005      	b.n	800c3f2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d007      	beq.n	800c40a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a5e      	ldr	r2, [pc, #376]	; (800c578 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c400:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c408:	e094      	b.n	800c534 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c40a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c40e:	f7fd fea9 	bl	800a164 <HAL_RCCEx_GetPeriphCLKFreq>
 800c412:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 8083 	beq.w	800c522 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	695a      	ldr	r2, [r3, #20]
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	4950      	ldr	r1, [pc, #320]	; (800c57c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c43a:	fba1 1303 	umull	r1, r3, r1, r3
 800c43e:	0e1b      	lsrs	r3, r3, #24
 800c440:	429a      	cmp	r2, r3
 800c442:	d303      	bcc.n	800c44c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	61bb      	str	r3, [r7, #24]
 800c44a:	e05a      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c454:	d103      	bne.n	800c45e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	61bb      	str	r3, [r7, #24]
 800c45c:	e051      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c466:	d126      	bne.n	800c4b6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10e      	bne.n	800c48e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	4a43      	ldr	r2, [pc, #268]	; (800c580 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d906      	bls.n	800c486 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	4a40      	ldr	r2, [pc, #256]	; (800c57c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c47c:	fba2 2303 	umull	r2, r3, r2, r3
 800c480:	0e5b      	lsrs	r3, r3, #25
 800c482:	61bb      	str	r3, [r7, #24]
 800c484:	e03d      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	61bb      	str	r3, [r7, #24]
 800c48c:	e039      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	6a3a      	ldr	r2, [r7, #32]
 800c496:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49a:	4a39      	ldr	r2, [pc, #228]	; (800c580 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d906      	bls.n	800c4ae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
 800c4a2:	4a36      	ldr	r2, [pc, #216]	; (800c57c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a8:	0e5b      	lsrs	r3, r3, #25
 800c4aa:	61bb      	str	r3, [r7, #24]
 800c4ac:	e029      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	61bb      	str	r3, [r7, #24]
 800c4b4:	e025      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10e      	bne.n	800c4dc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c4be:	6a3b      	ldr	r3, [r7, #32]
 800c4c0:	4a30      	ldr	r2, [pc, #192]	; (800c584 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d906      	bls.n	800c4d4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	4a2c      	ldr	r2, [pc, #176]	; (800c57c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ce:	0e1b      	lsrs	r3, r3, #24
 800c4d0:	61bb      	str	r3, [r7, #24]
 800c4d2:	e016      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	e012      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	695b      	ldr	r3, [r3, #20]
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	6a3a      	ldr	r2, [r7, #32]
 800c4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e8:	4a26      	ldr	r2, [pc, #152]	; (800c584 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d906      	bls.n	800c4fc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	4a22      	ldr	r2, [pc, #136]	; (800c57c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f6:	0e1b      	lsrs	r3, r3, #24
 800c4f8:	61bb      	str	r3, [r7, #24]
 800c4fa:	e002      	b.n	800c502 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	695b      	ldr	r3, [r3, #20]
 800c500:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681c      	ldr	r4, [r3, #0]
 800c506:	466a      	mov	r2, sp
 800c508:	f107 0314 	add.w	r3, r7, #20
 800c50c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c510:	e882 0003 	stmia.w	r2, {r0, r1}
 800c514:	f107 0308 	add.w	r3, r7, #8
 800c518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c51a:	4620      	mov	r0, r4
 800c51c:	f003 fefc 	bl	8010318 <SDMMC_Init>
 800c520:	e008      	b.n	800c534 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c53c:	4618      	mov	r0, r3
 800c53e:	f003 ffc9 	bl	80104d4 <SDMMC_CmdBlockLength>
 800c542:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00c      	beq.n	800c564 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a0a      	ldr	r2, [pc, #40]	; (800c578 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c550:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	431a      	orrs	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800c56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c570:	4618      	mov	r0, r3
 800c572:	372c      	adds	r7, #44	; 0x2c
 800c574:	46bd      	mov	sp, r7
 800c576:	bd90      	pop	{r4, r7, pc}
 800c578:	1fe00fff 	.word	0x1fe00fff
 800c57c:	55e63b89 	.word	0x55e63b89
 800c580:	02faf080 	.word	0x02faf080
 800c584:	017d7840 	.word	0x017d7840

0800c588 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c594:	f107 030c 	add.w	r3, r7, #12
 800c598:	4619      	mov	r1, r3
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 fa40 	bl	800ca20 <SD_SendStatus>
 800c5a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	431a      	orrs	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	0a5b      	lsrs	r3, r3, #9
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c5be:	693b      	ldr	r3, [r7, #16]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3718      	adds	r7, #24
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b090      	sub	sp, #64	; 0x40
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c5d4:	f7f8 f834 	bl	8004640 <HAL_GetTick>
 800c5d8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f003 fef3 	bl	80103ca <SDMMC_GetPowerState>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d102      	bne.n	800c5f0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c5ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c5ee:	e0b5      	b.n	800c75c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f4:	2b03      	cmp	r3, #3
 800c5f6:	d02e      	beq.n	800c656 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f004 f93e 	bl	801087e <SDMMC_CmdSendCID>
 800c602:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <SD_InitCard+0x46>
    {
      return errorstate;
 800c60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60c:	e0a6      	b.n	800c75c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2100      	movs	r1, #0
 800c614:	4618      	mov	r0, r3
 800c616:	f003 ff1e 	bl	8010456 <SDMMC_GetResponse>
 800c61a:	4602      	mov	r2, r0
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2104      	movs	r1, #4
 800c626:	4618      	mov	r0, r3
 800c628:	f003 ff15 	bl	8010456 <SDMMC_GetResponse>
 800c62c:	4602      	mov	r2, r0
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2108      	movs	r1, #8
 800c638:	4618      	mov	r0, r3
 800c63a:	f003 ff0c 	bl	8010456 <SDMMC_GetResponse>
 800c63e:	4602      	mov	r2, r0
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	210c      	movs	r1, #12
 800c64a:	4618      	mov	r0, r3
 800c64c:	f003 ff03 	bl	8010456 <SDMMC_GetResponse>
 800c650:	4602      	mov	r2, r0
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65a:	2b03      	cmp	r3, #3
 800c65c:	d01d      	beq.n	800c69a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c65e:	e019      	b.n	800c694 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f107 020a 	add.w	r2, r7, #10
 800c668:	4611      	mov	r1, r2
 800c66a:	4618      	mov	r0, r3
 800c66c:	f004 f946 	bl	80108fc <SDMMC_CmdSetRelAdd>
 800c670:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <SD_InitCard+0xb4>
      {
        return errorstate;
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	e06f      	b.n	800c75c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c67c:	f7f7 ffe0 	bl	8004640 <HAL_GetTick>
 800c680:	4602      	mov	r2, r0
 800c682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	f241 3287 	movw	r2, #4999	; 0x1387
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d902      	bls.n	800c694 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c68e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c692:	e063      	b.n	800c75c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c694:	897b      	ldrh	r3, [r7, #10]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0e2      	beq.n	800c660 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d036      	beq.n	800c710 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c6a2:	897b      	ldrh	r3, [r7, #10]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b2:	041b      	lsls	r3, r3, #16
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f004 f900 	bl	80108bc <SDMMC_CmdSendCSD>
 800c6bc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <SD_InitCard+0x100>
    {
      return errorstate;
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c6:	e049      	b.n	800c75c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f003 fec1 	bl	8010456 <SDMMC_GetResponse>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2104      	movs	r1, #4
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f003 feb8 	bl	8010456 <SDMMC_GetResponse>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2108      	movs	r1, #8
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f003 feaf 	bl	8010456 <SDMMC_GetResponse>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	210c      	movs	r1, #12
 800c704:	4618      	mov	r0, r3
 800c706:	f003 fea6 	bl	8010456 <SDMMC_GetResponse>
 800c70a:	4602      	mov	r2, r0
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2104      	movs	r1, #4
 800c716:	4618      	mov	r0, r3
 800c718:	f003 fe9d 	bl	8010456 <SDMMC_GetResponse>
 800c71c:	4603      	mov	r3, r0
 800c71e:	0d1a      	lsrs	r2, r3, #20
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c724:	f107 030c 	add.w	r3, r7, #12
 800c728:	4619      	mov	r1, r3
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7ff fb8c 	bl	800be48 <HAL_SD_GetCardCSD>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d002      	beq.n	800c73c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c736:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c73a:	e00f      	b.n	800c75c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c744:	041b      	lsls	r3, r3, #16
 800c746:	4619      	mov	r1, r3
 800c748:	4610      	mov	r0, r2
 800c74a:	f003 ffaf 	bl	80106ac <SDMMC_CmdSelDesel>
 800c74e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <SD_InitCard+0x192>
  {
    return errorstate;
 800c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c758:	e000      	b.n	800c75c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3740      	adds	r7, #64	; 0x40
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c76c:	2300      	movs	r3, #0
 800c76e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c770:	2300      	movs	r3, #0
 800c772:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c774:	2300      	movs	r3, #0
 800c776:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f003 ffb8 	bl	80106f2 <SDMMC_CmdGoIdleState>
 800c782:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	e072      	b.n	800c874 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f003 ffcb 	bl	801072e <SDMMC_CmdOperCond>
 800c798:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7a0:	d10d      	bne.n	800c7be <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f003 ffa0 	bl	80106f2 <SDMMC_CmdGoIdleState>
 800c7b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d004      	beq.n	800c7c4 <SD_PowerON+0x60>
    {
      return errorstate;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	e05a      	b.n	800c874 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d137      	bne.n	800c83c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f003 ffcb 	bl	801076e <SDMMC_CmdAppCommand>
 800c7d8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d02d      	beq.n	800c83c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c7e4:	e046      	b.n	800c874 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f003 ffbe 	bl	801076e <SDMMC_CmdAppCommand>
 800c7f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <SD_PowerON+0x9a>
    {
      return errorstate;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	e03a      	b.n	800c874 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	491e      	ldr	r1, [pc, #120]	; (800c87c <SD_PowerON+0x118>)
 800c804:	4618      	mov	r0, r3
 800c806:	f003 ffd5 	bl	80107b4 <SDMMC_CmdAppOperCommand>
 800c80a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c812:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c816:	e02d      	b.n	800c874 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2100      	movs	r1, #0
 800c81e:	4618      	mov	r0, r3
 800c820:	f003 fe19 	bl	8010456 <SDMMC_GetResponse>
 800c824:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	0fdb      	lsrs	r3, r3, #31
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d101      	bne.n	800c832 <SD_PowerON+0xce>
 800c82e:	2301      	movs	r3, #1
 800c830:	e000      	b.n	800c834 <SD_PowerON+0xd0>
 800c832:	2300      	movs	r3, #0
 800c834:	613b      	str	r3, [r7, #16]

    count++;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	3301      	adds	r3, #1
 800c83a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c842:	4293      	cmp	r3, r2
 800c844:	d802      	bhi.n	800c84c <SD_PowerON+0xe8>
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0cc      	beq.n	800c7e6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c852:	4293      	cmp	r3, r2
 800c854:	d902      	bls.n	800c85c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c85a:	e00b      	b.n	800c874 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	c1100000 	.word	0xc1100000

0800c880 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08c      	sub	sp, #48	; 0x30
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c88a:	f7f7 fed9 	bl	8004640 <HAL_GetTick>
 800c88e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2100      	movs	r1, #0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f003 fddb 	bl	8010456 <SDMMC_GetResponse>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8aa:	d102      	bne.n	800c8b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c8ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8b0:	e0b0      	b.n	800ca14 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2140      	movs	r1, #64	; 0x40
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f003 fe0b 	bl	80104d4 <SDMMC_CmdBlockLength>
 800c8be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d005      	beq.n	800c8d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	e0a0      	b.n	800ca14 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8da:	041b      	lsls	r3, r3, #16
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4610      	mov	r0, r2
 800c8e0:	f003 ff45 	bl	801076e <SDMMC_CmdAppCommand>
 800c8e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d005      	beq.n	800c8f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	e08d      	b.n	800ca14 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c8fe:	2340      	movs	r3, #64	; 0x40
 800c900:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c902:	2360      	movs	r3, #96	; 0x60
 800c904:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c906:	2302      	movs	r3, #2
 800c908:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c90e:	2301      	movs	r3, #1
 800c910:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f107 0208 	add.w	r2, r7, #8
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f003 fdad 	bl	801047c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f004 f82d 	bl	8010986 <SDMMC_CmdStatusRegister>
 800c92c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d02b      	beq.n	800c98c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	e069      	b.n	800ca14 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d013      	beq.n	800c976 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c94e:	2300      	movs	r3, #0
 800c950:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c952:	e00d      	b.n	800c970 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4618      	mov	r0, r3
 800c95a:	f003 fd07 	bl	801036c <SDMMC_ReadFIFO>
 800c95e:	4602      	mov	r2, r0
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	601a      	str	r2, [r3, #0]
        pData++;
 800c964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c966:	3304      	adds	r3, #4
 800c968:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800c96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96c:	3301      	adds	r3, #1
 800c96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	2b07      	cmp	r3, #7
 800c974:	d9ee      	bls.n	800c954 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c976:	f7f7 fe63 	bl	8004640 <HAL_GetTick>
 800c97a:	4602      	mov	r2, r0
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c984:	d102      	bne.n	800c98c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c986:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c98a:	e043      	b.n	800ca14 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c992:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0d2      	beq.n	800c940 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a0:	f003 0308 	and.w	r3, r3, #8
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c9a8:	2308      	movs	r3, #8
 800c9aa:	e033      	b.n	800ca14 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9b2:	f003 0302 	and.w	r3, r3, #2
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	e02a      	b.n	800ca14 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	f003 0320 	and.w	r3, r3, #32
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d017      	beq.n	800c9fc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c9cc:	2320      	movs	r3, #32
 800c9ce:	e021      	b.n	800ca14 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f003 fcc9 	bl	801036c <SDMMC_ReadFIFO>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	601a      	str	r2, [r3, #0]
    pData++;
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c9e6:	f7f7 fe2b 	bl	8004640 <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f4:	d102      	bne.n	800c9fc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c9f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9fa:	e00b      	b.n	800ca14 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e2      	bne.n	800c9d0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a03      	ldr	r2, [pc, #12]	; (800ca1c <SD_SendSDStatus+0x19c>)
 800ca10:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3730      	adds	r7, #48	; 0x30
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	18000f3a 	.word	0x18000f3a

0800ca20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ca30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca34:	e018      	b.n	800ca68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca3e:	041b      	lsls	r3, r3, #16
 800ca40:	4619      	mov	r1, r3
 800ca42:	4610      	mov	r0, r2
 800ca44:	f003 ff7c 	bl	8010940 <SDMMC_CmdSendStatus>
 800ca48:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	e009      	b.n	800ca68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2100      	movs	r1, #0
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f003 fcfb 	bl	8010456 <SDMMC_GetResponse>
 800ca60:	4602      	mov	r2, r0
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60fb      	str	r3, [r7, #12]
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2100      	movs	r1, #0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f003 fce5 	bl	8010456 <SDMMC_GetResponse>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca96:	d102      	bne.n	800ca9e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca9c:	e02f      	b.n	800cafe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ca9e:	f107 030c 	add.w	r3, r7, #12
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f879 	bl	800cb9c <SD_FindSCR>
 800caaa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	e023      	b.n	800cafe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01c      	beq.n	800cafa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac8:	041b      	lsls	r3, r3, #16
 800caca:	4619      	mov	r1, r3
 800cacc:	4610      	mov	r0, r2
 800cace:	f003 fe4e 	bl	801076e <SDMMC_CmdAppCommand>
 800cad2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d001      	beq.n	800cade <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	e00f      	b.n	800cafe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2102      	movs	r1, #2
 800cae4:	4618      	mov	r0, r3
 800cae6:	f003 fe85 	bl	80107f4 <SDMMC_CmdBusWidth>
 800caea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	e003      	b.n	800cafe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800caf6:	2300      	movs	r3, #0
 800caf8:	e001      	b.n	800cafe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cafa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cb0e:	2300      	movs	r3, #0
 800cb10:	60fb      	str	r3, [r7, #12]
 800cb12:	2300      	movs	r3, #0
 800cb14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f003 fc9a 	bl	8010456 <SDMMC_GetResponse>
 800cb22:	4603      	mov	r3, r0
 800cb24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb2c:	d102      	bne.n	800cb34 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb32:	e02f      	b.n	800cb94 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cb34:	f107 030c 	add.w	r3, r7, #12
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f82e 	bl	800cb9c <SD_FindSCR>
 800cb40:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	e023      	b.n	800cb94 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d01c      	beq.n	800cb90 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb5e:	041b      	lsls	r3, r3, #16
 800cb60:	4619      	mov	r1, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	f003 fe03 	bl	801076e <SDMMC_CmdAppCommand>
 800cb68:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	e00f      	b.n	800cb94 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2100      	movs	r1, #0
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f003 fe3a 	bl	80107f4 <SDMMC_CmdBusWidth>
 800cb80:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	e003      	b.n	800cb94 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e001      	b.n	800cb94 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3718      	adds	r7, #24
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08e      	sub	sp, #56	; 0x38
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cba6:	f7f7 fd4b 	bl	8004640 <HAL_GetTick>
 800cbaa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60bb      	str	r3, [r7, #8]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2108      	movs	r1, #8
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f003 fc86 	bl	80104d4 <SDMMC_CmdBlockLength>
 800cbc8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	e0ad      	b.n	800cd30 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbdc:	041b      	lsls	r3, r3, #16
 800cbde:	4619      	mov	r1, r3
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	f003 fdc4 	bl	801076e <SDMMC_CmdAppCommand>
 800cbe6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf0:	e09e      	b.n	800cd30 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cbf8:	2308      	movs	r3, #8
 800cbfa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cbfc:	2330      	movs	r3, #48	; 0x30
 800cbfe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cc00:	2302      	movs	r3, #2
 800cc02:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f107 0210 	add.w	r2, r7, #16
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f003 fc30 	bl	801047c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f003 fe0a 	bl	801083a <SDMMC_CmdSendSCR>
 800cc26:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d027      	beq.n	800cc7e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc30:	e07e      	b.n	800cd30 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d113      	bne.n	800cc68 <SD_FindSCR+0xcc>
 800cc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d110      	bne.n	800cc68 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f003 fb8e 	bl	801036c <SDMMC_ReadFIFO>
 800cc50:	4603      	mov	r3, r0
 800cc52:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f003 fb87 	bl	801036c <SDMMC_ReadFIFO>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	60fb      	str	r3, [r7, #12]
      index++;
 800cc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc64:	3301      	adds	r3, #1
 800cc66:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc68:	f7f7 fcea 	bl	8004640 <HAL_GetTick>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc76:	d102      	bne.n	800cc7e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc7c:	e058      	b.n	800cd30 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc84:	f240 532a 	movw	r3, #1322	; 0x52a
 800cc88:	4013      	ands	r3, r2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0d1      	beq.n	800cc32 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d005      	beq.n	800cca8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2208      	movs	r2, #8
 800cca2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cca4:	2308      	movs	r3, #8
 800cca6:	e043      	b.n	800cd30 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccae:	f003 0302 	and.w	r3, r3, #2
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d005      	beq.n	800ccc2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2202      	movs	r2, #2
 800ccbc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	e036      	b.n	800cd30 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc8:	f003 0320 	and.w	r3, r3, #32
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ccd8:	2320      	movs	r3, #32
 800ccda:	e029      	b.n	800cd30 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a15      	ldr	r2, [pc, #84]	; (800cd38 <SD_FindSCR+0x19c>)
 800cce2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	061a      	lsls	r2, r3, #24
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	021b      	lsls	r3, r3, #8
 800ccec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccf0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	0a1b      	lsrs	r3, r3, #8
 800ccf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ccfa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	0e1b      	lsrs	r3, r3, #24
 800cd00:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	601a      	str	r2, [r3, #0]
    scr++;
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	3304      	adds	r3, #4
 800cd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	061a      	lsls	r2, r3, #24
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	0a1b      	lsrs	r3, r3, #8
 800cd1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cd22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	0e1b      	lsrs	r3, r3, #24
 800cd28:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3738      	adds	r7, #56	; 0x38
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	18000f3a 	.word	0x18000f3a

0800cd3c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd48:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4e:	2b1f      	cmp	r3, #31
 800cd50:	d936      	bls.n	800cdc0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800cd52:	2300      	movs	r3, #0
 800cd54:	617b      	str	r3, [r7, #20]
 800cd56:	e027      	b.n	800cda8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f003 fb05 	bl	801036c <SDMMC_ReadFIFO>
 800cd62:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	0a1b      	lsrs	r3, r3, #8
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	0c1b      	lsrs	r3, r3, #16
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	0e1b      	lsrs	r3, r3, #24
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	3301      	adds	r3, #1
 800cda6:	617b      	str	r3, [r7, #20]
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2b07      	cmp	r3, #7
 800cdac:	d9d4      	bls.n	800cd58 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb8:	f1a3 0220 	sub.w	r2, r3, #32
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800cdc0:	bf00      	nop
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	2b1f      	cmp	r3, #31
 800cddc:	d93a      	bls.n	800ce54 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	e02b      	b.n	800ce3c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	3301      	adds	r3, #1
 800cdee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	021a      	lsls	r2, r3, #8
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	041a      	lsls	r2, r3, #16
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	3301      	adds	r3, #1
 800ce12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	061a      	lsls	r2, r3, #24
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	3301      	adds	r3, #1
 800ce24:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f107 020c 	add.w	r2, r7, #12
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f003 faa8 	bl	8010386 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	617b      	str	r3, [r7, #20]
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	2b07      	cmp	r3, #7
 800ce40:	d9d0      	bls.n	800cde4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a1b      	ldr	r3, [r3, #32]
 800ce4c:	f1a3 0220 	sub.w	r2, r3, #32
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	621a      	str	r2, [r3, #32]
  }
}
 800ce54:	bf00      	nop
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ce64:	bf00      	nop
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ce78:	bf00      	nop
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e0a8      	b.n	800d010 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7f4 fab4 	bl	800143c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2202      	movs	r2, #2
 800ced8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f022 0201 	bic.w	r2, r2, #1
 800cee8:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cef6:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	695a      	ldr	r2, [r3, #20]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf06:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	695a      	ldr	r2, [r3, #20]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800cf16:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cf20:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689a      	ldr	r2, [r3, #8]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf30:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d012      	beq.n	800cf60 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d107      	bne.n	800cf52 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	68da      	ldr	r2, [r3, #12]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf4e:	609a      	str	r2, [r3, #8]
 800cf50:	e006      	b.n	800cf60 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cf5e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d104      	bne.n	800cf72 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6859      	ldr	r1, [r3, #4]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	4b26      	ldr	r3, [pc, #152]	; (800d018 <HAL_SMBUS_Init+0x16c>)
 800cf7e:	430b      	orrs	r3, r1
 800cf80:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	695a      	ldr	r2, [r3, #20]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	69db      	ldr	r3, [r3, #28]
 800cf92:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	430a      	orrs	r2, r1
 800cf9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a1a      	ldr	r2, [r3, #32]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa4:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800cfaa:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb0:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800cfbc:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800cfbe:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cfc8:	d110      	bne.n	800cfec <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d004      	beq.n	800cfdc <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800cfd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfda:	d107      	bne.n	800cfec <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cfea:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f042 0201 	orr.w	r2, r2, #1
 800cffa:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	02008000 	.word	0x02008000

0800d01c <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d137      	bne.n	800d09e <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d034:	2b01      	cmp	r3, #1
 800d036:	d101      	bne.n	800d03c <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800d038:	2302      	movs	r3, #2
 800d03a:	e031      	b.n	800d0a0 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2202      	movs	r2, #2
 800d048:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f022 0201 	bic.w	r2, r2, #1
 800d058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	021b      	lsls	r3, r3, #8
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	4313      	orrs	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f042 0201 	orr.w	r2, r2, #1
 800d08a:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2201      	movs	r2, #1
 800d090:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	e000      	b.n	800d0a0 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800d09e:	2302      	movs	r3, #2
  }
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e0f1      	b.n	800d2a2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a78      	ldr	r2, [pc, #480]	; (800d2ac <HAL_SPI_Init+0x200>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d00f      	beq.n	800d0ee <HAL_SPI_Init+0x42>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a77      	ldr	r2, [pc, #476]	; (800d2b0 <HAL_SPI_Init+0x204>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d00a      	beq.n	800d0ee <HAL_SPI_Init+0x42>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a75      	ldr	r2, [pc, #468]	; (800d2b4 <HAL_SPI_Init+0x208>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d005      	beq.n	800d0ee <HAL_SPI_Init+0x42>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	2b0f      	cmp	r3, #15
 800d0e8:	d901      	bls.n	800d0ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e0d9      	b.n	800d2a2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fc9c 	bl	800da2c <SPI_GetPacketSize>
 800d0f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a6c      	ldr	r2, [pc, #432]	; (800d2ac <HAL_SPI_Init+0x200>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d00c      	beq.n	800d11a <HAL_SPI_Init+0x6e>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a6a      	ldr	r2, [pc, #424]	; (800d2b0 <HAL_SPI_Init+0x204>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d007      	beq.n	800d11a <HAL_SPI_Init+0x6e>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a69      	ldr	r2, [pc, #420]	; (800d2b4 <HAL_SPI_Init+0x208>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d002      	beq.n	800d11a <HAL_SPI_Init+0x6e>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b08      	cmp	r3, #8
 800d118:	d811      	bhi.n	800d13e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d11e:	4a63      	ldr	r2, [pc, #396]	; (800d2ac <HAL_SPI_Init+0x200>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d009      	beq.n	800d138 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a61      	ldr	r2, [pc, #388]	; (800d2b0 <HAL_SPI_Init+0x204>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d004      	beq.n	800d138 <HAL_SPI_Init+0x8c>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a60      	ldr	r2, [pc, #384]	; (800d2b4 <HAL_SPI_Init+0x208>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d104      	bne.n	800d142 <HAL_SPI_Init+0x96>
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b10      	cmp	r3, #16
 800d13c:	d901      	bls.n	800d142 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e0af      	b.n	800d2a2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d106      	bne.n	800d15c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7f6 fb50 	bl	80037fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f022 0201 	bic.w	r2, r2, #1
 800d172:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d17e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	699b      	ldr	r3, [r3, #24]
 800d184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d188:	d119      	bne.n	800d1be <HAL_SPI_Init+0x112>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d192:	d103      	bne.n	800d19c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d008      	beq.n	800d1ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10c      	bne.n	800d1be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d1a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1ac:	d107      	bne.n	800d1be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d1bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	69da      	ldr	r2, [r3, #28]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	431a      	orrs	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d0:	ea42 0103 	orr.w	r1, r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68da      	ldr	r2, [r3, #12]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	431a      	orrs	r2, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	431a      	orrs	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	431a      	orrs	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	431a      	orrs	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	431a      	orrs	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d212:	431a      	orrs	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	431a      	orrs	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d21e:	ea42 0103 	orr.w	r1, r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	430a      	orrs	r2, r1
 800d22c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d113      	bne.n	800d25e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d248:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d25c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f022 0201 	bic.w	r2, r2, #1
 800d26c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00a      	beq.n	800d290 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	430a      	orrs	r2, r1
 800d28e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	40013000 	.word	0x40013000
 800d2b0:	40003800 	.word	0x40003800
 800d2b4:	40003c00 	.word	0x40003c00

0800d2b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08e      	sub	sp, #56	; 0x38
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3320      	adds	r3, #32
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3330      	adds	r3, #48	; 0x30
 800d2da:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d101      	bne.n	800d2ea <HAL_SPI_TransmitReceive+0x32>
 800d2e6:	2302      	movs	r3, #2
 800d2e8:	e2ce      	b.n	800d888 <HAL_SPI_TransmitReceive+0x5d0>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d2f2:	f7f7 f9a5 	bl	8004640 <HAL_GetTick>
 800d2f6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d2f8:	887b      	ldrh	r3, [r7, #2]
 800d2fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d2fc:	887b      	ldrh	r3, [r7, #2]
 800d2fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d306:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d30e:	7efb      	ldrb	r3, [r7, #27]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d014      	beq.n	800d33e <HAL_SPI_TransmitReceive+0x86>
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d31a:	d106      	bne.n	800d32a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d324:	7efb      	ldrb	r3, [r7, #27]
 800d326:	2b04      	cmp	r3, #4
 800d328:	d009      	beq.n	800d33e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800d32a:	2302      	movs	r3, #2
 800d32c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2200      	movs	r2, #0
 800d334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d338:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d33c:	e2a4      	b.n	800d888 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d005      	beq.n	800d350 <HAL_SPI_TransmitReceive+0x98>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <HAL_SPI_TransmitReceive+0x98>
 800d34a:	887b      	ldrh	r3, [r7, #2]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d109      	bne.n	800d364 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d35e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d362:	e291      	b.n	800d888 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b04      	cmp	r3, #4
 800d36e:	d003      	beq.n	800d378 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2205      	movs	r2, #5
 800d374:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	887a      	ldrh	r2, [r7, #2]
 800d38a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	887a      	ldrh	r2, [r7, #2]
 800d392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	887a      	ldrh	r2, [r7, #2]
 800d3a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	887a      	ldrh	r2, [r7, #2]
 800d3a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	4b81      	ldr	r3, [pc, #516]	; (800d5c4 <HAL_SPI_TransmitReceive+0x30c>)
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	8879      	ldrh	r1, [r7, #2]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	6812      	ldr	r2, [r2, #0]
 800d3c8:	430b      	orrs	r3, r1
 800d3ca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f042 0201 	orr.w	r2, r2, #1
 800d3da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3e4:	d107      	bne.n	800d3f6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	2b0f      	cmp	r3, #15
 800d3fc:	d970      	bls.n	800d4e0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d3fe:	e068      	b.n	800d4d2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d11a      	bne.n	800d444 <HAL_SPI_TransmitReceive+0x18c>
 800d40e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d410:	2b00      	cmp	r3, #0
 800d412:	d017      	beq.n	800d444 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6812      	ldr	r2, [r2, #0]
 800d41e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d424:	1d1a      	adds	r2, r3, #4
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d430:	b29b      	uxth	r3, r3
 800d432:	3b01      	subs	r3, #1
 800d434:	b29a      	uxth	r2, r3
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d442:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	695a      	ldr	r2, [r3, #20]
 800d44a:	f248 0308 	movw	r3, #32776	; 0x8008
 800d44e:	4013      	ands	r3, r2
 800d450:	2b00      	cmp	r3, #0
 800d452:	d01a      	beq.n	800d48a <HAL_SPI_TransmitReceive+0x1d2>
 800d454:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d017      	beq.n	800d48a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d462:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d464:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d46a:	1d1a      	adds	r2, r3, #4
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d476:	b29b      	uxth	r3, r3
 800d478:	3b01      	subs	r3, #1
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d488:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d48a:	f7f7 f8d9 	bl	8004640 <HAL_GetTick>
 800d48e:	4602      	mov	r2, r0
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d496:	429a      	cmp	r2, r3
 800d498:	d803      	bhi.n	800d4a2 <HAL_SPI_TransmitReceive+0x1ea>
 800d49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a0:	d102      	bne.n	800d4a8 <HAL_SPI_TransmitReceive+0x1f0>
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d114      	bne.n	800d4d2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 f9f1 	bl	800d890 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e1da      	b.n	800d888 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d4d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d193      	bne.n	800d400 <HAL_SPI_TransmitReceive+0x148>
 800d4d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d190      	bne.n	800d400 <HAL_SPI_TransmitReceive+0x148>
 800d4de:	e1ac      	b.n	800d83a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	2b07      	cmp	r3, #7
 800d4e6:	f240 81a0 	bls.w	800d82a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d4ea:	e0a9      	b.n	800d640 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d139      	bne.n	800d56e <HAL_SPI_TransmitReceive+0x2b6>
 800d4fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d036      	beq.n	800d56e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d500:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d502:	2b01      	cmp	r3, #1
 800d504:	d91c      	bls.n	800d540 <HAL_SPI_TransmitReceive+0x288>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d018      	beq.n	800d540 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6812      	ldr	r2, [r2, #0]
 800d518:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d51e:	1d1a      	adds	r2, r3, #4
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	3b02      	subs	r3, #2
 800d52e:	b29a      	uxth	r2, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d53c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d53e:	e016      	b.n	800d56e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d544:	881a      	ldrh	r2, [r3, #0]
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d54e:	1c9a      	adds	r2, r3, #2
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	3b01      	subs	r3, #1
 800d55e:	b29a      	uxth	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d56c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	695b      	ldr	r3, [r3, #20]
 800d574:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d03d      	beq.n	800d5f8 <HAL_SPI_TransmitReceive+0x340>
 800d57c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d03a      	beq.n	800d5f8 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d01b      	beq.n	800d5c8 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d598:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d59a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5a0:	1d1a      	adds	r2, r3, #4
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	3b02      	subs	r3, #2
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d5c0:	e01a      	b.n	800d5f8 <HAL_SPI_TransmitReceive+0x340>
 800d5c2:	bf00      	nop
 800d5c4:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5cc:	6a3a      	ldr	r2, [r7, #32]
 800d5ce:	8812      	ldrh	r2, [r2, #0]
 800d5d0:	b292      	uxth	r2, r2
 800d5d2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5d8:	1c9a      	adds	r2, r3, #2
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	3b01      	subs	r3, #1
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5f8:	f7f7 f822 	bl	8004640 <HAL_GetTick>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d604:	429a      	cmp	r2, r3
 800d606:	d803      	bhi.n	800d610 <HAL_SPI_TransmitReceive+0x358>
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60e:	d102      	bne.n	800d616 <HAL_SPI_TransmitReceive+0x35e>
 800d610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d612:	2b00      	cmp	r3, #0
 800d614:	d114      	bne.n	800d640 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 f93a 	bl	800d890 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d62a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e123      	b.n	800d888 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d640:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d642:	2b00      	cmp	r3, #0
 800d644:	f47f af52 	bne.w	800d4ec <HAL_SPI_TransmitReceive+0x234>
 800d648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f47f af4e 	bne.w	800d4ec <HAL_SPI_TransmitReceive+0x234>
 800d650:	e0f3      	b.n	800d83a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	f003 0302 	and.w	r3, r3, #2
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d15a      	bne.n	800d716 <HAL_SPI_TransmitReceive+0x45e>
 800d660:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d662:	2b00      	cmp	r3, #0
 800d664:	d057      	beq.n	800d716 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d666:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d668:	2b03      	cmp	r3, #3
 800d66a:	d91c      	bls.n	800d6a6 <HAL_SPI_TransmitReceive+0x3ee>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d670:	2b40      	cmp	r3, #64	; 0x40
 800d672:	d918      	bls.n	800d6a6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	6812      	ldr	r2, [r2, #0]
 800d67e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d684:	1d1a      	adds	r2, r3, #4
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d690:	b29b      	uxth	r3, r3
 800d692:	3b04      	subs	r3, #4
 800d694:	b29a      	uxth	r2, r3
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d6a4:	e037      	b.n	800d716 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d6a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d91b      	bls.n	800d6e4 <HAL_SPI_TransmitReceive+0x42c>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d017      	beq.n	800d6e4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6b8:	881a      	ldrh	r2, [r3, #0]
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6c2:	1c9a      	adds	r2, r3, #2
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	3b02      	subs	r3, #2
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d6e2:	e018      	b.n	800d716 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3320      	adds	r3, #32
 800d6ee:	7812      	ldrb	r2, [r2, #0]
 800d6f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6f6:	1c5a      	adds	r2, r3, #1
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d702:	b29b      	uxth	r3, r3
 800d704:	3b01      	subs	r3, #1
 800d706:	b29a      	uxth	r2, r3
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d714:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d720:	2b00      	cmp	r3, #0
 800d722:	d05e      	beq.n	800d7e2 <HAL_SPI_TransmitReceive+0x52a>
 800d724:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d05b      	beq.n	800d7e2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d734:	2b00      	cmp	r3, #0
 800d736:	d018      	beq.n	800d76a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d740:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d742:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d748:	1d1a      	adds	r2, r3, #4
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d754:	b29b      	uxth	r3, r3
 800d756:	3b04      	subs	r3, #4
 800d758:	b29a      	uxth	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d766:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d768:	e03b      	b.n	800d7e2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d778:	d918      	bls.n	800d7ac <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d77e:	6a3a      	ldr	r2, [r7, #32]
 800d780:	8812      	ldrh	r2, [r2, #0]
 800d782:	b292      	uxth	r2, r2
 800d784:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d78a:	1c9a      	adds	r2, r3, #2
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d796:	b29b      	uxth	r3, r3
 800d798:	3b02      	subs	r3, #2
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d7aa:	e01a      	b.n	800d7e2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7b8:	7812      	ldrb	r2, [r2, #0]
 800d7ba:	b2d2      	uxtb	r2, r2
 800d7bc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7e2:	f7f6 ff2d 	bl	8004640 <HAL_GetTick>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	1ad3      	subs	r3, r2, r3
 800d7ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d803      	bhi.n	800d7fa <HAL_SPI_TransmitReceive+0x542>
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f8:	d102      	bne.n	800d800 <HAL_SPI_TransmitReceive+0x548>
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d114      	bne.n	800d82a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 f845 	bl	800d890 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d814:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d826:	2303      	movs	r3, #3
 800d828:	e02e      	b.n	800d888 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d82a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f47f af10 	bne.w	800d652 <HAL_SPI_TransmitReceive+0x39a>
 800d832:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d834:	2b00      	cmp	r3, #0
 800d836:	f47f af0c 	bne.w	800d652 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	2200      	movs	r2, #0
 800d842:	2108      	movs	r1, #8
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f000 f8c3 	bl	800d9d0 <SPI_WaitOnFlagUntilTimeout>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d007      	beq.n	800d860 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d856:	f043 0220 	orr.w	r2, r3, #32
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f000 f815 	bl	800d890 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d880:	2301      	movs	r3, #1
 800d882:	e001      	b.n	800d888 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d884:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3730      	adds	r7, #48	; 0x30
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	699a      	ldr	r2, [r3, #24]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f042 0208 	orr.w	r2, r2, #8
 800d8ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	699a      	ldr	r2, [r3, #24]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f042 0210 	orr.w	r2, r2, #16
 800d8be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f022 0201 	bic.w	r2, r2, #1
 800d8ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6919      	ldr	r1, [r3, #16]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	4b3c      	ldr	r3, [pc, #240]	; (800d9cc <SPI_CloseTransfer+0x13c>)
 800d8dc:	400b      	ands	r3, r1
 800d8de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	689a      	ldr	r2, [r3, #8]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d8ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	2b04      	cmp	r3, #4
 800d8fa:	d014      	beq.n	800d926 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f003 0320 	and.w	r3, r3, #32
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00f      	beq.n	800d926 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d90c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	699a      	ldr	r2, [r3, #24]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f042 0220 	orr.w	r2, r2, #32
 800d924:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d014      	beq.n	800d95c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00f      	beq.n	800d95c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d942:	f043 0204 	orr.w	r2, r3, #4
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	699a      	ldr	r2, [r3, #24]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d95a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00f      	beq.n	800d986 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d96c:	f043 0201 	orr.w	r2, r3, #1
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	699a      	ldr	r2, [r3, #24]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d984:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00f      	beq.n	800d9b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d996:	f043 0208 	orr.w	r2, r3, #8
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	699a      	ldr	r2, [r3, #24]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d9c0:	bf00      	nop
 800d9c2:	3714      	adds	r7, #20
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	fffffc90 	.word	0xfffffc90

0800d9d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	603b      	str	r3, [r7, #0]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d9e0:	e010      	b.n	800da04 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9e2:	f7f6 fe2d 	bl	8004640 <HAL_GetTick>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	69ba      	ldr	r2, [r7, #24]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d803      	bhi.n	800d9fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f8:	d102      	bne.n	800da00 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800da00:	2303      	movs	r3, #3
 800da02:	e00f      	b.n	800da24 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	695a      	ldr	r2, [r3, #20]
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	4013      	ands	r3, r2
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	429a      	cmp	r2, r3
 800da12:	bf0c      	ite	eq
 800da14:	2301      	moveq	r3, #1
 800da16:	2300      	movne	r3, #0
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	461a      	mov	r2, r3
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d0df      	beq.n	800d9e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da38:	095b      	lsrs	r3, r3, #5
 800da3a:	3301      	adds	r3, #1
 800da3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	3301      	adds	r3, #1
 800da44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	3307      	adds	r3, #7
 800da4a:	08db      	lsrs	r3, r3, #3
 800da4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	fb02 f303 	mul.w	r3, r2, r3
}
 800da56:	4618      	mov	r0, r3
 800da58:	3714      	adds	r7, #20
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b082      	sub	sp, #8
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	e049      	b.n	800db08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d106      	bne.n	800da8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7f6 f9bd 	bl	8003e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2202      	movs	r2, #2
 800da92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	3304      	adds	r3, #4
 800da9e:	4619      	mov	r1, r3
 800daa0:	4610      	mov	r0, r2
 800daa2:	f000 fe53 	bl	800e74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2201      	movs	r2, #1
 800dada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2201      	movs	r2, #1
 800daea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2201      	movs	r2, #1
 800dafa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2201      	movs	r2, #1
 800db02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b01      	cmp	r3, #1
 800db22:	d001      	beq.n	800db28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	e054      	b.n	800dbd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f042 0201 	orr.w	r2, r2, #1
 800db3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a26      	ldr	r2, [pc, #152]	; (800dbe0 <HAL_TIM_Base_Start_IT+0xd0>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d022      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x80>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db52:	d01d      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x80>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a22      	ldr	r2, [pc, #136]	; (800dbe4 <HAL_TIM_Base_Start_IT+0xd4>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d018      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x80>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a21      	ldr	r2, [pc, #132]	; (800dbe8 <HAL_TIM_Base_Start_IT+0xd8>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d013      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x80>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a1f      	ldr	r2, [pc, #124]	; (800dbec <HAL_TIM_Base_Start_IT+0xdc>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d00e      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x80>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a1e      	ldr	r2, [pc, #120]	; (800dbf0 <HAL_TIM_Base_Start_IT+0xe0>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d009      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x80>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a1c      	ldr	r2, [pc, #112]	; (800dbf4 <HAL_TIM_Base_Start_IT+0xe4>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d004      	beq.n	800db90 <HAL_TIM_Base_Start_IT+0x80>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a1b      	ldr	r2, [pc, #108]	; (800dbf8 <HAL_TIM_Base_Start_IT+0xe8>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d115      	bne.n	800dbbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	689a      	ldr	r2, [r3, #8]
 800db96:	4b19      	ldr	r3, [pc, #100]	; (800dbfc <HAL_TIM_Base_Start_IT+0xec>)
 800db98:	4013      	ands	r3, r2
 800db9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2b06      	cmp	r3, #6
 800dba0:	d015      	beq.n	800dbce <HAL_TIM_Base_Start_IT+0xbe>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba8:	d011      	beq.n	800dbce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f042 0201 	orr.w	r2, r2, #1
 800dbb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbba:	e008      	b.n	800dbce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f042 0201 	orr.w	r2, r2, #1
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	e000      	b.n	800dbd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3714      	adds	r7, #20
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	40010000 	.word	0x40010000
 800dbe4:	40000400 	.word	0x40000400
 800dbe8:	40000800 	.word	0x40000800
 800dbec:	40000c00 	.word	0x40000c00
 800dbf0:	40010400 	.word	0x40010400
 800dbf4:	40001800 	.word	0x40001800
 800dbf8:	40014000 	.word	0x40014000
 800dbfc:	00010007 	.word	0x00010007

0800dc00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d101      	bne.n	800dc12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e049      	b.n	800dca6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f841 	bl	800dcae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2202      	movs	r2, #2
 800dc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4610      	mov	r0, r2
 800dc40:	f000 fd84 	bl	800e74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dcb6:	bf00      	nop
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
	...

0800dcc4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f001 f946 	bl	800ef68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a3e      	ldr	r2, [pc, #248]	; (800dddc <HAL_TIM_PWM_Stop+0x118>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d013      	beq.n	800dd0e <HAL_TIM_PWM_Stop+0x4a>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a3d      	ldr	r2, [pc, #244]	; (800dde0 <HAL_TIM_PWM_Stop+0x11c>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d00e      	beq.n	800dd0e <HAL_TIM_PWM_Stop+0x4a>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a3b      	ldr	r2, [pc, #236]	; (800dde4 <HAL_TIM_PWM_Stop+0x120>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d009      	beq.n	800dd0e <HAL_TIM_PWM_Stop+0x4a>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a3a      	ldr	r2, [pc, #232]	; (800dde8 <HAL_TIM_PWM_Stop+0x124>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d004      	beq.n	800dd0e <HAL_TIM_PWM_Stop+0x4a>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a38      	ldr	r2, [pc, #224]	; (800ddec <HAL_TIM_PWM_Stop+0x128>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d101      	bne.n	800dd12 <HAL_TIM_PWM_Stop+0x4e>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e000      	b.n	800dd14 <HAL_TIM_PWM_Stop+0x50>
 800dd12:	2300      	movs	r3, #0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d017      	beq.n	800dd48 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6a1a      	ldr	r2, [r3, #32]
 800dd1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800dd22:	4013      	ands	r3, r2
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10f      	bne.n	800dd48 <HAL_TIM_PWM_Stop+0x84>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6a1a      	ldr	r2, [r3, #32]
 800dd2e:	f240 4344 	movw	r3, #1092	; 0x444
 800dd32:	4013      	ands	r3, r2
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d107      	bne.n	800dd48 <HAL_TIM_PWM_Stop+0x84>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dd46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	6a1a      	ldr	r2, [r3, #32]
 800dd4e:	f241 1311 	movw	r3, #4369	; 0x1111
 800dd52:	4013      	ands	r3, r2
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10f      	bne.n	800dd78 <HAL_TIM_PWM_Stop+0xb4>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6a1a      	ldr	r2, [r3, #32]
 800dd5e:	f240 4344 	movw	r3, #1092	; 0x444
 800dd62:	4013      	ands	r3, r2
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d107      	bne.n	800dd78 <HAL_TIM_PWM_Stop+0xb4>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f022 0201 	bic.w	r2, r2, #1
 800dd76:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d104      	bne.n	800dd88 <HAL_TIM_PWM_Stop+0xc4>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2201      	movs	r2, #1
 800dd82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd86:	e023      	b.n	800ddd0 <HAL_TIM_PWM_Stop+0x10c>
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	2b04      	cmp	r3, #4
 800dd8c:	d104      	bne.n	800dd98 <HAL_TIM_PWM_Stop+0xd4>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd96:	e01b      	b.n	800ddd0 <HAL_TIM_PWM_Stop+0x10c>
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	2b08      	cmp	r3, #8
 800dd9c:	d104      	bne.n	800dda8 <HAL_TIM_PWM_Stop+0xe4>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2201      	movs	r2, #1
 800dda2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dda6:	e013      	b.n	800ddd0 <HAL_TIM_PWM_Stop+0x10c>
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b0c      	cmp	r3, #12
 800ddac:	d104      	bne.n	800ddb8 <HAL_TIM_PWM_Stop+0xf4>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ddb6:	e00b      	b.n	800ddd0 <HAL_TIM_PWM_Stop+0x10c>
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2b10      	cmp	r3, #16
 800ddbc:	d104      	bne.n	800ddc8 <HAL_TIM_PWM_Stop+0x104>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ddc6:	e003      	b.n	800ddd0 <HAL_TIM_PWM_Stop+0x10c>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	40010000 	.word	0x40010000
 800dde0:	40010400 	.word	0x40010400
 800dde4:	40014000 	.word	0x40014000
 800dde8:	40014400 	.word	0x40014400
 800ddec:	40014800 	.word	0x40014800

0800ddf0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d109      	bne.n	800de18 <HAL_TIM_PWM_Start_IT+0x28>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	bf14      	ite	ne
 800de10:	2301      	movne	r3, #1
 800de12:	2300      	moveq	r3, #0
 800de14:	b2db      	uxtb	r3, r3
 800de16:	e03c      	b.n	800de92 <HAL_TIM_PWM_Start_IT+0xa2>
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	d109      	bne.n	800de32 <HAL_TIM_PWM_Start_IT+0x42>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b01      	cmp	r3, #1
 800de28:	bf14      	ite	ne
 800de2a:	2301      	movne	r3, #1
 800de2c:	2300      	moveq	r3, #0
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	e02f      	b.n	800de92 <HAL_TIM_PWM_Start_IT+0xa2>
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	2b08      	cmp	r3, #8
 800de36:	d109      	bne.n	800de4c <HAL_TIM_PWM_Start_IT+0x5c>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b01      	cmp	r3, #1
 800de42:	bf14      	ite	ne
 800de44:	2301      	movne	r3, #1
 800de46:	2300      	moveq	r3, #0
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	e022      	b.n	800de92 <HAL_TIM_PWM_Start_IT+0xa2>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2b0c      	cmp	r3, #12
 800de50:	d109      	bne.n	800de66 <HAL_TIM_PWM_Start_IT+0x76>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	bf14      	ite	ne
 800de5e:	2301      	movne	r3, #1
 800de60:	2300      	moveq	r3, #0
 800de62:	b2db      	uxtb	r3, r3
 800de64:	e015      	b.n	800de92 <HAL_TIM_PWM_Start_IT+0xa2>
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	2b10      	cmp	r3, #16
 800de6a:	d109      	bne.n	800de80 <HAL_TIM_PWM_Start_IT+0x90>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b01      	cmp	r3, #1
 800de76:	bf14      	ite	ne
 800de78:	2301      	movne	r3, #1
 800de7a:	2300      	moveq	r3, #0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	e008      	b.n	800de92 <HAL_TIM_PWM_Start_IT+0xa2>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b01      	cmp	r3, #1
 800de8a:	bf14      	ite	ne
 800de8c:	2301      	movne	r3, #1
 800de8e:	2300      	moveq	r3, #0
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e0ec      	b.n	800e074 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d104      	bne.n	800deaa <HAL_TIM_PWM_Start_IT+0xba>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2202      	movs	r2, #2
 800dea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dea8:	e023      	b.n	800def2 <HAL_TIM_PWM_Start_IT+0x102>
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b04      	cmp	r3, #4
 800deae:	d104      	bne.n	800deba <HAL_TIM_PWM_Start_IT+0xca>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2202      	movs	r2, #2
 800deb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800deb8:	e01b      	b.n	800def2 <HAL_TIM_PWM_Start_IT+0x102>
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b08      	cmp	r3, #8
 800debe:	d104      	bne.n	800deca <HAL_TIM_PWM_Start_IT+0xda>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2202      	movs	r2, #2
 800dec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dec8:	e013      	b.n	800def2 <HAL_TIM_PWM_Start_IT+0x102>
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	2b0c      	cmp	r3, #12
 800dece:	d104      	bne.n	800deda <HAL_TIM_PWM_Start_IT+0xea>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2202      	movs	r2, #2
 800ded4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ded8:	e00b      	b.n	800def2 <HAL_TIM_PWM_Start_IT+0x102>
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	2b10      	cmp	r3, #16
 800dede:	d104      	bne.n	800deea <HAL_TIM_PWM_Start_IT+0xfa>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2202      	movs	r2, #2
 800dee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dee8:	e003      	b.n	800def2 <HAL_TIM_PWM_Start_IT+0x102>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2202      	movs	r2, #2
 800deee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b0c      	cmp	r3, #12
 800def6:	d841      	bhi.n	800df7c <HAL_TIM_PWM_Start_IT+0x18c>
 800def8:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <HAL_TIM_PWM_Start_IT+0x110>)
 800defa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defe:	bf00      	nop
 800df00:	0800df35 	.word	0x0800df35
 800df04:	0800df7d 	.word	0x0800df7d
 800df08:	0800df7d 	.word	0x0800df7d
 800df0c:	0800df7d 	.word	0x0800df7d
 800df10:	0800df47 	.word	0x0800df47
 800df14:	0800df7d 	.word	0x0800df7d
 800df18:	0800df7d 	.word	0x0800df7d
 800df1c:	0800df7d 	.word	0x0800df7d
 800df20:	0800df59 	.word	0x0800df59
 800df24:	0800df7d 	.word	0x0800df7d
 800df28:	0800df7d 	.word	0x0800df7d
 800df2c:	0800df7d 	.word	0x0800df7d
 800df30:	0800df6b 	.word	0x0800df6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68da      	ldr	r2, [r3, #12]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f042 0202 	orr.w	r2, r2, #2
 800df42:	60da      	str	r2, [r3, #12]
      break;
 800df44:	e01d      	b.n	800df82 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68da      	ldr	r2, [r3, #12]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f042 0204 	orr.w	r2, r2, #4
 800df54:	60da      	str	r2, [r3, #12]
      break;
 800df56:	e014      	b.n	800df82 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68da      	ldr	r2, [r3, #12]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f042 0208 	orr.w	r2, r2, #8
 800df66:	60da      	str	r2, [r3, #12]
      break;
 800df68:	e00b      	b.n	800df82 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f042 0210 	orr.w	r2, r2, #16
 800df78:	60da      	str	r2, [r3, #12]
      break;
 800df7a:	e002      	b.n	800df82 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800df7c:	2301      	movs	r3, #1
 800df7e:	73fb      	strb	r3, [r7, #15]
      break;
 800df80:	bf00      	nop
  }

  if (status == HAL_OK)
 800df82:	7bfb      	ldrb	r3, [r7, #15]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d174      	bne.n	800e072 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2201      	movs	r2, #1
 800df8e:	6839      	ldr	r1, [r7, #0]
 800df90:	4618      	mov	r0, r3
 800df92:	f000 ffe9 	bl	800ef68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a38      	ldr	r2, [pc, #224]	; (800e07c <HAL_TIM_PWM_Start_IT+0x28c>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d013      	beq.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a36      	ldr	r2, [pc, #216]	; (800e080 <HAL_TIM_PWM_Start_IT+0x290>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d00e      	beq.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a35      	ldr	r2, [pc, #212]	; (800e084 <HAL_TIM_PWM_Start_IT+0x294>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d009      	beq.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a33      	ldr	r2, [pc, #204]	; (800e088 <HAL_TIM_PWM_Start_IT+0x298>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d004      	beq.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a32      	ldr	r2, [pc, #200]	; (800e08c <HAL_TIM_PWM_Start_IT+0x29c>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d101      	bne.n	800dfcc <HAL_TIM_PWM_Start_IT+0x1dc>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e000      	b.n	800dfce <HAL_TIM_PWM_Start_IT+0x1de>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d007      	beq.n	800dfe2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dfe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a25      	ldr	r2, [pc, #148]	; (800e07c <HAL_TIM_PWM_Start_IT+0x28c>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d022      	beq.n	800e032 <HAL_TIM_PWM_Start_IT+0x242>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dff4:	d01d      	beq.n	800e032 <HAL_TIM_PWM_Start_IT+0x242>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a25      	ldr	r2, [pc, #148]	; (800e090 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d018      	beq.n	800e032 <HAL_TIM_PWM_Start_IT+0x242>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a23      	ldr	r2, [pc, #140]	; (800e094 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d013      	beq.n	800e032 <HAL_TIM_PWM_Start_IT+0x242>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a22      	ldr	r2, [pc, #136]	; (800e098 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d00e      	beq.n	800e032 <HAL_TIM_PWM_Start_IT+0x242>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a19      	ldr	r2, [pc, #100]	; (800e080 <HAL_TIM_PWM_Start_IT+0x290>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d009      	beq.n	800e032 <HAL_TIM_PWM_Start_IT+0x242>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a1e      	ldr	r2, [pc, #120]	; (800e09c <HAL_TIM_PWM_Start_IT+0x2ac>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d004      	beq.n	800e032 <HAL_TIM_PWM_Start_IT+0x242>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a15      	ldr	r2, [pc, #84]	; (800e084 <HAL_TIM_PWM_Start_IT+0x294>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d115      	bne.n	800e05e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	689a      	ldr	r2, [r3, #8]
 800e038:	4b19      	ldr	r3, [pc, #100]	; (800e0a0 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800e03a:	4013      	ands	r3, r2
 800e03c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b06      	cmp	r3, #6
 800e042:	d015      	beq.n	800e070 <HAL_TIM_PWM_Start_IT+0x280>
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e04a:	d011      	beq.n	800e070 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f042 0201 	orr.w	r2, r2, #1
 800e05a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e05c:	e008      	b.n	800e070 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f042 0201 	orr.w	r2, r2, #1
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	e000      	b.n	800e072 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e070:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e072:	7bfb      	ldrb	r3, [r7, #15]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	40010000 	.word	0x40010000
 800e080:	40010400 	.word	0x40010400
 800e084:	40014000 	.word	0x40014000
 800e088:	40014400 	.word	0x40014400
 800e08c:	40014800 	.word	0x40014800
 800e090:	40000400 	.word	0x40000400
 800e094:	40000800 	.word	0x40000800
 800e098:	40000c00 	.word	0x40000c00
 800e09c:	40001800 	.word	0x40001800
 800e0a0:	00010007 	.word	0x00010007

0800e0a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	f003 0302 	and.w	r3, r3, #2
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d122      	bne.n	800e100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	f003 0302 	and.w	r3, r3, #2
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d11b      	bne.n	800e100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f06f 0202 	mvn.w	r2, #2
 800e0d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	699b      	ldr	r3, [r3, #24]
 800e0de:	f003 0303 	and.w	r3, r3, #3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d003      	beq.n	800e0ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fb12 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e0ec:	e005      	b.n	800e0fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fb04 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 fb15 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	f003 0304 	and.w	r3, r3, #4
 800e10a:	2b04      	cmp	r3, #4
 800e10c:	d122      	bne.n	800e154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	f003 0304 	and.w	r3, r3, #4
 800e118:	2b04      	cmp	r3, #4
 800e11a:	d11b      	bne.n	800e154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f06f 0204 	mvn.w	r2, #4
 800e124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2202      	movs	r2, #2
 800e12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	699b      	ldr	r3, [r3, #24]
 800e132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fae8 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e140:	e005      	b.n	800e14e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fada 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 faeb 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	f003 0308 	and.w	r3, r3, #8
 800e15e:	2b08      	cmp	r3, #8
 800e160:	d122      	bne.n	800e1a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	f003 0308 	and.w	r3, r3, #8
 800e16c:	2b08      	cmp	r3, #8
 800e16e:	d11b      	bne.n	800e1a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f06f 0208 	mvn.w	r2, #8
 800e178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2204      	movs	r2, #4
 800e17e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	f003 0303 	and.w	r3, r3, #3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d003      	beq.n	800e196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 fabe 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e194:	e005      	b.n	800e1a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fab0 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 fac1 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	f003 0310 	and.w	r3, r3, #16
 800e1b2:	2b10      	cmp	r3, #16
 800e1b4:	d122      	bne.n	800e1fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	f003 0310 	and.w	r3, r3, #16
 800e1c0:	2b10      	cmp	r3, #16
 800e1c2:	d11b      	bne.n	800e1fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f06f 0210 	mvn.w	r2, #16
 800e1cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2208      	movs	r2, #8
 800e1d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	69db      	ldr	r3, [r3, #28]
 800e1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fa94 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e1e8:	e005      	b.n	800e1f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f000 fa86 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 fa97 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	2b01      	cmp	r3, #1
 800e208:	d10e      	bne.n	800e228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	f003 0301 	and.w	r3, r3, #1
 800e214:	2b01      	cmp	r3, #1
 800e216:	d107      	bne.n	800e228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f06f 0201 	mvn.w	r2, #1
 800e220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7f5 f8e8 	bl	80033f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e232:	2b80      	cmp	r3, #128	; 0x80
 800e234:	d10e      	bne.n	800e254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e240:	2b80      	cmp	r3, #128	; 0x80
 800e242:	d107      	bne.n	800e254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 ff48 	bl	800f0e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e262:	d10e      	bne.n	800e282 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e26e:	2b80      	cmp	r3, #128	; 0x80
 800e270:	d107      	bne.n	800e282 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 ff3b 	bl	800f0f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e28c:	2b40      	cmp	r3, #64	; 0x40
 800e28e:	d10e      	bne.n	800e2ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e29a:	2b40      	cmp	r3, #64	; 0x40
 800e29c:	d107      	bne.n	800e2ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fa45 	bl	800e738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	f003 0320 	and.w	r3, r3, #32
 800e2b8:	2b20      	cmp	r3, #32
 800e2ba:	d10e      	bne.n	800e2da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	f003 0320 	and.w	r3, r3, #32
 800e2c6:	2b20      	cmp	r3, #32
 800e2c8:	d107      	bne.n	800e2da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f06f 0220 	mvn.w	r2, #32
 800e2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 fefb 	bl	800f0d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e2da:	bf00      	nop
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
	...

0800e2e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d101      	bne.n	800e302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e2fe:	2302      	movs	r3, #2
 800e300:	e0ff      	b.n	800e502 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b14      	cmp	r3, #20
 800e30e:	f200 80f0 	bhi.w	800e4f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e36d 	.word	0x0800e36d
 800e31c:	0800e4f3 	.word	0x0800e4f3
 800e320:	0800e4f3 	.word	0x0800e4f3
 800e324:	0800e4f3 	.word	0x0800e4f3
 800e328:	0800e3ad 	.word	0x0800e3ad
 800e32c:	0800e4f3 	.word	0x0800e4f3
 800e330:	0800e4f3 	.word	0x0800e4f3
 800e334:	0800e4f3 	.word	0x0800e4f3
 800e338:	0800e3ef 	.word	0x0800e3ef
 800e33c:	0800e4f3 	.word	0x0800e4f3
 800e340:	0800e4f3 	.word	0x0800e4f3
 800e344:	0800e4f3 	.word	0x0800e4f3
 800e348:	0800e42f 	.word	0x0800e42f
 800e34c:	0800e4f3 	.word	0x0800e4f3
 800e350:	0800e4f3 	.word	0x0800e4f3
 800e354:	0800e4f3 	.word	0x0800e4f3
 800e358:	0800e471 	.word	0x0800e471
 800e35c:	0800e4f3 	.word	0x0800e4f3
 800e360:	0800e4f3 	.word	0x0800e4f3
 800e364:	0800e4f3 	.word	0x0800e4f3
 800e368:	0800e4b1 	.word	0x0800e4b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68b9      	ldr	r1, [r7, #8]
 800e372:	4618      	mov	r0, r3
 800e374:	f000 fa84 	bl	800e880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	699a      	ldr	r2, [r3, #24]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f042 0208 	orr.w	r2, r2, #8
 800e386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	699a      	ldr	r2, [r3, #24]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f022 0204 	bic.w	r2, r2, #4
 800e396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6999      	ldr	r1, [r3, #24]
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	691a      	ldr	r2, [r3, #16]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	430a      	orrs	r2, r1
 800e3a8:	619a      	str	r2, [r3, #24]
      break;
 800e3aa:	e0a5      	b.n	800e4f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68b9      	ldr	r1, [r7, #8]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 faf4 	bl	800e9a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	699a      	ldr	r2, [r3, #24]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	699a      	ldr	r2, [r3, #24]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	6999      	ldr	r1, [r3, #24]
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	021a      	lsls	r2, r3, #8
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	430a      	orrs	r2, r1
 800e3ea:	619a      	str	r2, [r3, #24]
      break;
 800e3ec:	e084      	b.n	800e4f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68b9      	ldr	r1, [r7, #8]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f000 fb5d 	bl	800eab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	69da      	ldr	r2, [r3, #28]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f042 0208 	orr.w	r2, r2, #8
 800e408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	69da      	ldr	r2, [r3, #28]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f022 0204 	bic.w	r2, r2, #4
 800e418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	69d9      	ldr	r1, [r3, #28]
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	691a      	ldr	r2, [r3, #16]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	430a      	orrs	r2, r1
 800e42a:	61da      	str	r2, [r3, #28]
      break;
 800e42c:	e064      	b.n	800e4f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	68b9      	ldr	r1, [r7, #8]
 800e434:	4618      	mov	r0, r3
 800e436:	f000 fbc5 	bl	800ebc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	69da      	ldr	r2, [r3, #28]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	69da      	ldr	r2, [r3, #28]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	69d9      	ldr	r1, [r3, #28]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	021a      	lsls	r2, r3, #8
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	430a      	orrs	r2, r1
 800e46c:	61da      	str	r2, [r3, #28]
      break;
 800e46e:	e043      	b.n	800e4f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 fc0e 	bl	800ec98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0208 	orr.w	r2, r2, #8
 800e48a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f022 0204 	bic.w	r2, r2, #4
 800e49a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	691a      	ldr	r2, [r3, #16]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e4ae:	e023      	b.n	800e4f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 fc52 	bl	800ed60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	021a      	lsls	r2, r3, #8
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e4f0:	e002      	b.n	800e4f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e4f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e500:	7dfb      	ldrb	r3, [r7, #23]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop

0800e50c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e520:	2b01      	cmp	r3, #1
 800e522:	d101      	bne.n	800e528 <HAL_TIM_ConfigClockSource+0x1c>
 800e524:	2302      	movs	r3, #2
 800e526:	e0dc      	b.n	800e6e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2202      	movs	r2, #2
 800e534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	4b6a      	ldr	r3, [pc, #424]	; (800e6ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800e544:	4013      	ands	r3, r2
 800e546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e54e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a64      	ldr	r2, [pc, #400]	; (800e6f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	f000 80a9 	beq.w	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e564:	4a62      	ldr	r2, [pc, #392]	; (800e6f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e566:	4293      	cmp	r3, r2
 800e568:	f200 80ae 	bhi.w	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e56c:	4a61      	ldr	r2, [pc, #388]	; (800e6f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	f000 80a1 	beq.w	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e574:	4a5f      	ldr	r2, [pc, #380]	; (800e6f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e576:	4293      	cmp	r3, r2
 800e578:	f200 80a6 	bhi.w	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e57c:	4a5e      	ldr	r2, [pc, #376]	; (800e6f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	f000 8099 	beq.w	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e584:	4a5c      	ldr	r2, [pc, #368]	; (800e6f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e586:	4293      	cmp	r3, r2
 800e588:	f200 809e 	bhi.w	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e58c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e590:	f000 8091 	beq.w	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e594:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e598:	f200 8096 	bhi.w	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5a0:	f000 8089 	beq.w	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5a8:	f200 808e 	bhi.w	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5b0:	d03e      	beq.n	800e630 <HAL_TIM_ConfigClockSource+0x124>
 800e5b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5b6:	f200 8087 	bhi.w	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5be:	f000 8086 	beq.w	800e6ce <HAL_TIM_ConfigClockSource+0x1c2>
 800e5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5c6:	d87f      	bhi.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5c8:	2b70      	cmp	r3, #112	; 0x70
 800e5ca:	d01a      	beq.n	800e602 <HAL_TIM_ConfigClockSource+0xf6>
 800e5cc:	2b70      	cmp	r3, #112	; 0x70
 800e5ce:	d87b      	bhi.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5d0:	2b60      	cmp	r3, #96	; 0x60
 800e5d2:	d050      	beq.n	800e676 <HAL_TIM_ConfigClockSource+0x16a>
 800e5d4:	2b60      	cmp	r3, #96	; 0x60
 800e5d6:	d877      	bhi.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5d8:	2b50      	cmp	r3, #80	; 0x50
 800e5da:	d03c      	beq.n	800e656 <HAL_TIM_ConfigClockSource+0x14a>
 800e5dc:	2b50      	cmp	r3, #80	; 0x50
 800e5de:	d873      	bhi.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5e0:	2b40      	cmp	r3, #64	; 0x40
 800e5e2:	d058      	beq.n	800e696 <HAL_TIM_ConfigClockSource+0x18a>
 800e5e4:	2b40      	cmp	r3, #64	; 0x40
 800e5e6:	d86f      	bhi.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5e8:	2b30      	cmp	r3, #48	; 0x30
 800e5ea:	d064      	beq.n	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5ec:	2b30      	cmp	r3, #48	; 0x30
 800e5ee:	d86b      	bhi.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5f0:	2b20      	cmp	r3, #32
 800e5f2:	d060      	beq.n	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5f4:	2b20      	cmp	r3, #32
 800e5f6:	d867      	bhi.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d05c      	beq.n	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5fc:	2b10      	cmp	r3, #16
 800e5fe:	d05a      	beq.n	800e6b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e600:	e062      	b.n	800e6c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6818      	ldr	r0, [r3, #0]
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	6899      	ldr	r1, [r3, #8]
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f000 fc89 	bl	800ef28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	609a      	str	r2, [r3, #8]
      break;
 800e62e:	e04f      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	6899      	ldr	r1, [r3, #8]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	685a      	ldr	r2, [r3, #4]
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	f000 fc72 	bl	800ef28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	689a      	ldr	r2, [r3, #8]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e652:	609a      	str	r2, [r3, #8]
      break;
 800e654:	e03c      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6818      	ldr	r0, [r3, #0]
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	6859      	ldr	r1, [r3, #4]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	461a      	mov	r2, r3
 800e664:	f000 fbe2 	bl	800ee2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2150      	movs	r1, #80	; 0x50
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 fc3c 	bl	800eeec <TIM_ITRx_SetConfig>
      break;
 800e674:	e02c      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6818      	ldr	r0, [r3, #0]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	6859      	ldr	r1, [r3, #4]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	461a      	mov	r2, r3
 800e684:	f000 fc01 	bl	800ee8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2160      	movs	r1, #96	; 0x60
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 fc2c 	bl	800eeec <TIM_ITRx_SetConfig>
      break;
 800e694:	e01c      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	6859      	ldr	r1, [r3, #4]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f000 fbc2 	bl	800ee2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2140      	movs	r1, #64	; 0x40
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 fc1c 	bl	800eeec <TIM_ITRx_SetConfig>
      break;
 800e6b4:	e00c      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f000 fc13 	bl	800eeec <TIM_ITRx_SetConfig>
      break;
 800e6c6:	e003      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e6cc:	e000      	b.n	800e6d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e6ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	ffceff88 	.word	0xffceff88
 800e6f0:	00100040 	.word	0x00100040
 800e6f4:	00100030 	.word	0x00100030
 800e6f8:	00100020 	.word	0x00100020

0800e6fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e704:	bf00      	nop
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a40      	ldr	r2, [pc, #256]	; (800e860 <TIM_Base_SetConfig+0x114>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d013      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e76a:	d00f      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a3d      	ldr	r2, [pc, #244]	; (800e864 <TIM_Base_SetConfig+0x118>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d00b      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a3c      	ldr	r2, [pc, #240]	; (800e868 <TIM_Base_SetConfig+0x11c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d007      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a3b      	ldr	r2, [pc, #236]	; (800e86c <TIM_Base_SetConfig+0x120>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d003      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a3a      	ldr	r2, [pc, #232]	; (800e870 <TIM_Base_SetConfig+0x124>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d108      	bne.n	800e79e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a2f      	ldr	r2, [pc, #188]	; (800e860 <TIM_Base_SetConfig+0x114>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d01f      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7ac:	d01b      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a2c      	ldr	r2, [pc, #176]	; (800e864 <TIM_Base_SetConfig+0x118>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d017      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a2b      	ldr	r2, [pc, #172]	; (800e868 <TIM_Base_SetConfig+0x11c>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d013      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a2a      	ldr	r2, [pc, #168]	; (800e86c <TIM_Base_SetConfig+0x120>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d00f      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a29      	ldr	r2, [pc, #164]	; (800e870 <TIM_Base_SetConfig+0x124>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d00b      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a28      	ldr	r2, [pc, #160]	; (800e874 <TIM_Base_SetConfig+0x128>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d007      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a27      	ldr	r2, [pc, #156]	; (800e878 <TIM_Base_SetConfig+0x12c>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d003      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a26      	ldr	r2, [pc, #152]	; (800e87c <TIM_Base_SetConfig+0x130>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d108      	bne.n	800e7f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	4313      	orrs	r3, r2
 800e804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a10      	ldr	r2, [pc, #64]	; (800e860 <TIM_Base_SetConfig+0x114>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d00f      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a12      	ldr	r2, [pc, #72]	; (800e870 <TIM_Base_SetConfig+0x124>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d00b      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a11      	ldr	r2, [pc, #68]	; (800e874 <TIM_Base_SetConfig+0x128>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d007      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a10      	ldr	r2, [pc, #64]	; (800e878 <TIM_Base_SetConfig+0x12c>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d003      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a0f      	ldr	r2, [pc, #60]	; (800e87c <TIM_Base_SetConfig+0x130>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d103      	bne.n	800e84c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	691a      	ldr	r2, [r3, #16]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	615a      	str	r2, [r3, #20]
}
 800e852:	bf00      	nop
 800e854:	3714      	adds	r7, #20
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	40010000 	.word	0x40010000
 800e864:	40000400 	.word	0x40000400
 800e868:	40000800 	.word	0x40000800
 800e86c:	40000c00 	.word	0x40000c00
 800e870:	40010400 	.word	0x40010400
 800e874:	40014000 	.word	0x40014000
 800e878:	40014400 	.word	0x40014400
 800e87c:	40014800 	.word	0x40014800

0800e880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e880:	b480      	push	{r7}
 800e882:	b087      	sub	sp, #28
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	f023 0201 	bic.w	r2, r3, #1
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	4b37      	ldr	r3, [pc, #220]	; (800e988 <TIM_OC1_SetConfig+0x108>)
 800e8ac:	4013      	ands	r3, r2
 800e8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f023 0303 	bic.w	r3, r3, #3
 800e8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f023 0302 	bic.w	r3, r3, #2
 800e8c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a2d      	ldr	r2, [pc, #180]	; (800e98c <TIM_OC1_SetConfig+0x10c>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d00f      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a2c      	ldr	r2, [pc, #176]	; (800e990 <TIM_OC1_SetConfig+0x110>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d00b      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a2b      	ldr	r2, [pc, #172]	; (800e994 <TIM_OC1_SetConfig+0x114>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d007      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4a2a      	ldr	r2, [pc, #168]	; (800e998 <TIM_OC1_SetConfig+0x118>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d003      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a29      	ldr	r2, [pc, #164]	; (800e99c <TIM_OC1_SetConfig+0x11c>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d10c      	bne.n	800e916 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	f023 0308 	bic.w	r3, r3, #8
 800e902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	f023 0304 	bic.w	r3, r3, #4
 800e914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a1c      	ldr	r2, [pc, #112]	; (800e98c <TIM_OC1_SetConfig+0x10c>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d00f      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a1b      	ldr	r2, [pc, #108]	; (800e990 <TIM_OC1_SetConfig+0x110>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d00b      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a1a      	ldr	r2, [pc, #104]	; (800e994 <TIM_OC1_SetConfig+0x114>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d007      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a19      	ldr	r2, [pc, #100]	; (800e998 <TIM_OC1_SetConfig+0x118>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d003      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a18      	ldr	r2, [pc, #96]	; (800e99c <TIM_OC1_SetConfig+0x11c>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d111      	bne.n	800e962 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e94c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	695b      	ldr	r3, [r3, #20]
 800e952:	693a      	ldr	r2, [r7, #16]
 800e954:	4313      	orrs	r3, r2
 800e956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	4313      	orrs	r3, r2
 800e960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	693a      	ldr	r2, [r7, #16]
 800e966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	685a      	ldr	r2, [r3, #4]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	697a      	ldr	r2, [r7, #20]
 800e97a:	621a      	str	r2, [r3, #32]
}
 800e97c:	bf00      	nop
 800e97e:	371c      	adds	r7, #28
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	fffeff8f 	.word	0xfffeff8f
 800e98c:	40010000 	.word	0x40010000
 800e990:	40010400 	.word	0x40010400
 800e994:	40014000 	.word	0x40014000
 800e998:	40014400 	.word	0x40014400
 800e99c:	40014800 	.word	0x40014800

0800e9a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b087      	sub	sp, #28
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	f023 0210 	bic.w	r2, r3, #16
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	4b34      	ldr	r3, [pc, #208]	; (800ea9c <TIM_OC2_SetConfig+0xfc>)
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	021b      	lsls	r3, r3, #8
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f023 0320 	bic.w	r3, r3, #32
 800e9ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	011b      	lsls	r3, r3, #4
 800e9f2:	697a      	ldr	r2, [r7, #20]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4a29      	ldr	r2, [pc, #164]	; (800eaa0 <TIM_OC2_SetConfig+0x100>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d003      	beq.n	800ea08 <TIM_OC2_SetConfig+0x68>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a28      	ldr	r2, [pc, #160]	; (800eaa4 <TIM_OC2_SetConfig+0x104>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d10d      	bne.n	800ea24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	011b      	lsls	r3, r3, #4
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a1e      	ldr	r2, [pc, #120]	; (800eaa0 <TIM_OC2_SetConfig+0x100>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d00f      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a1d      	ldr	r2, [pc, #116]	; (800eaa4 <TIM_OC2_SetConfig+0x104>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d00b      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4a1c      	ldr	r2, [pc, #112]	; (800eaa8 <TIM_OC2_SetConfig+0x108>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d007      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a1b      	ldr	r2, [pc, #108]	; (800eaac <TIM_OC2_SetConfig+0x10c>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d003      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a1a      	ldr	r2, [pc, #104]	; (800eab0 <TIM_OC2_SetConfig+0x110>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d113      	bne.n	800ea74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	693a      	ldr	r2, [r7, #16]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	685a      	ldr	r2, [r3, #4]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	621a      	str	r2, [r3, #32]
}
 800ea8e:	bf00      	nop
 800ea90:	371c      	adds	r7, #28
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	feff8fff 	.word	0xfeff8fff
 800eaa0:	40010000 	.word	0x40010000
 800eaa4:	40010400 	.word	0x40010400
 800eaa8:	40014000 	.word	0x40014000
 800eaac:	40014400 	.word	0x40014400
 800eab0:	40014800 	.word	0x40014800

0800eab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b087      	sub	sp, #28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	69db      	ldr	r3, [r3, #28]
 800eada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4b33      	ldr	r3, [pc, #204]	; (800ebac <TIM_OC3_SetConfig+0xf8>)
 800eae0:	4013      	ands	r3, r2
 800eae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f023 0303 	bic.w	r3, r3, #3
 800eaea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eafc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	021b      	lsls	r3, r3, #8
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4a28      	ldr	r2, [pc, #160]	; (800ebb0 <TIM_OC3_SetConfig+0xfc>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d003      	beq.n	800eb1a <TIM_OC3_SetConfig+0x66>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	4a27      	ldr	r2, [pc, #156]	; (800ebb4 <TIM_OC3_SetConfig+0x100>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d10d      	bne.n	800eb36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	021b      	lsls	r3, r3, #8
 800eb28:	697a      	ldr	r2, [r7, #20]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4a1d      	ldr	r2, [pc, #116]	; (800ebb0 <TIM_OC3_SetConfig+0xfc>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d00f      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4a1c      	ldr	r2, [pc, #112]	; (800ebb4 <TIM_OC3_SetConfig+0x100>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d00b      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a1b      	ldr	r2, [pc, #108]	; (800ebb8 <TIM_OC3_SetConfig+0x104>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d007      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a1a      	ldr	r2, [pc, #104]	; (800ebbc <TIM_OC3_SetConfig+0x108>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d003      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a19      	ldr	r2, [pc, #100]	; (800ebc0 <TIM_OC3_SetConfig+0x10c>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d113      	bne.n	800eb86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	011b      	lsls	r3, r3, #4
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	699b      	ldr	r3, [r3, #24]
 800eb7e:	011b      	lsls	r3, r3, #4
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	621a      	str	r2, [r3, #32]
}
 800eba0:	bf00      	nop
 800eba2:	371c      	adds	r7, #28
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	fffeff8f 	.word	0xfffeff8f
 800ebb0:	40010000 	.word	0x40010000
 800ebb4:	40010400 	.word	0x40010400
 800ebb8:	40014000 	.word	0x40014000
 800ebbc:	40014400 	.word	0x40014400
 800ebc0:	40014800 	.word	0x40014800

0800ebc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b087      	sub	sp, #28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a1b      	ldr	r3, [r3, #32]
 800ebd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	69db      	ldr	r3, [r3, #28]
 800ebea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	4b24      	ldr	r3, [pc, #144]	; (800ec80 <TIM_OC4_SetConfig+0xbc>)
 800ebf0:	4013      	ands	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	021b      	lsls	r3, r3, #8
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	031b      	lsls	r3, r3, #12
 800ec16:	693a      	ldr	r2, [r7, #16]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4a19      	ldr	r2, [pc, #100]	; (800ec84 <TIM_OC4_SetConfig+0xc0>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d00f      	beq.n	800ec44 <TIM_OC4_SetConfig+0x80>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a18      	ldr	r2, [pc, #96]	; (800ec88 <TIM_OC4_SetConfig+0xc4>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d00b      	beq.n	800ec44 <TIM_OC4_SetConfig+0x80>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4a17      	ldr	r2, [pc, #92]	; (800ec8c <TIM_OC4_SetConfig+0xc8>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d007      	beq.n	800ec44 <TIM_OC4_SetConfig+0x80>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4a16      	ldr	r2, [pc, #88]	; (800ec90 <TIM_OC4_SetConfig+0xcc>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d003      	beq.n	800ec44 <TIM_OC4_SetConfig+0x80>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a15      	ldr	r2, [pc, #84]	; (800ec94 <TIM_OC4_SetConfig+0xd0>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d109      	bne.n	800ec58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	695b      	ldr	r3, [r3, #20]
 800ec50:	019b      	lsls	r3, r3, #6
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	685a      	ldr	r2, [r3, #4]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	621a      	str	r2, [r3, #32]
}
 800ec72:	bf00      	nop
 800ec74:	371c      	adds	r7, #28
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	feff8fff 	.word	0xfeff8fff
 800ec84:	40010000 	.word	0x40010000
 800ec88:	40010400 	.word	0x40010400
 800ec8c:	40014000 	.word	0x40014000
 800ec90:	40014400 	.word	0x40014400
 800ec94:	40014800 	.word	0x40014800

0800ec98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b087      	sub	sp, #28
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6a1b      	ldr	r3, [r3, #32]
 800eca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6a1b      	ldr	r3, [r3, #32]
 800ecb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	4b21      	ldr	r3, [pc, #132]	; (800ed48 <TIM_OC5_SetConfig+0xb0>)
 800ecc4:	4013      	ands	r3, r2
 800ecc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ecd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	041b      	lsls	r3, r3, #16
 800ece0:	693a      	ldr	r2, [r7, #16]
 800ece2:	4313      	orrs	r3, r2
 800ece4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4a18      	ldr	r2, [pc, #96]	; (800ed4c <TIM_OC5_SetConfig+0xb4>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d00f      	beq.n	800ed0e <TIM_OC5_SetConfig+0x76>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a17      	ldr	r2, [pc, #92]	; (800ed50 <TIM_OC5_SetConfig+0xb8>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d00b      	beq.n	800ed0e <TIM_OC5_SetConfig+0x76>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a16      	ldr	r2, [pc, #88]	; (800ed54 <TIM_OC5_SetConfig+0xbc>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d007      	beq.n	800ed0e <TIM_OC5_SetConfig+0x76>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a15      	ldr	r2, [pc, #84]	; (800ed58 <TIM_OC5_SetConfig+0xc0>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d003      	beq.n	800ed0e <TIM_OC5_SetConfig+0x76>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a14      	ldr	r2, [pc, #80]	; (800ed5c <TIM_OC5_SetConfig+0xc4>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d109      	bne.n	800ed22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	695b      	ldr	r3, [r3, #20]
 800ed1a:	021b      	lsls	r3, r3, #8
 800ed1c:	697a      	ldr	r2, [r7, #20]
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	68fa      	ldr	r2, [r7, #12]
 800ed2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	685a      	ldr	r2, [r3, #4]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	693a      	ldr	r2, [r7, #16]
 800ed3a:	621a      	str	r2, [r3, #32]
}
 800ed3c:	bf00      	nop
 800ed3e:	371c      	adds	r7, #28
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr
 800ed48:	fffeff8f 	.word	0xfffeff8f
 800ed4c:	40010000 	.word	0x40010000
 800ed50:	40010400 	.word	0x40010400
 800ed54:	40014000 	.word	0x40014000
 800ed58:	40014400 	.word	0x40014400
 800ed5c:	40014800 	.word	0x40014800

0800ed60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a1b      	ldr	r3, [r3, #32]
 800ed6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a1b      	ldr	r3, [r3, #32]
 800ed7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	4b22      	ldr	r3, [pc, #136]	; (800ee14 <TIM_OC6_SetConfig+0xb4>)
 800ed8c:	4013      	ands	r3, r2
 800ed8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	021b      	lsls	r3, r3, #8
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eda2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	051b      	lsls	r3, r3, #20
 800edaa:	693a      	ldr	r2, [r7, #16]
 800edac:	4313      	orrs	r3, r2
 800edae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a19      	ldr	r2, [pc, #100]	; (800ee18 <TIM_OC6_SetConfig+0xb8>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d00f      	beq.n	800edd8 <TIM_OC6_SetConfig+0x78>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a18      	ldr	r2, [pc, #96]	; (800ee1c <TIM_OC6_SetConfig+0xbc>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d00b      	beq.n	800edd8 <TIM_OC6_SetConfig+0x78>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4a17      	ldr	r2, [pc, #92]	; (800ee20 <TIM_OC6_SetConfig+0xc0>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d007      	beq.n	800edd8 <TIM_OC6_SetConfig+0x78>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a16      	ldr	r2, [pc, #88]	; (800ee24 <TIM_OC6_SetConfig+0xc4>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d003      	beq.n	800edd8 <TIM_OC6_SetConfig+0x78>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4a15      	ldr	r2, [pc, #84]	; (800ee28 <TIM_OC6_SetConfig+0xc8>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d109      	bne.n	800edec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800edde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	029b      	lsls	r3, r3, #10
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	4313      	orrs	r3, r2
 800edea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	685a      	ldr	r2, [r3, #4]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	693a      	ldr	r2, [r7, #16]
 800ee04:	621a      	str	r2, [r3, #32]
}
 800ee06:	bf00      	nop
 800ee08:	371c      	adds	r7, #28
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	feff8fff 	.word	0xfeff8fff
 800ee18:	40010000 	.word	0x40010000
 800ee1c:	40010400 	.word	0x40010400
 800ee20:	40014000 	.word	0x40014000
 800ee24:	40014400 	.word	0x40014400
 800ee28:	40014800 	.word	0x40014800

0800ee2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b087      	sub	sp, #28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6a1b      	ldr	r3, [r3, #32]
 800ee3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	f023 0201 	bic.w	r2, r3, #1
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	011b      	lsls	r3, r3, #4
 800ee5c:	693a      	ldr	r2, [r7, #16]
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f023 030a 	bic.w	r3, r3, #10
 800ee68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	693a      	ldr	r2, [r7, #16]
 800ee76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	621a      	str	r2, [r3, #32]
}
 800ee7e:	bf00      	nop
 800ee80:	371c      	adds	r7, #28
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee8a:	b480      	push	{r7}
 800ee8c:	b087      	sub	sp, #28
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	60b9      	str	r1, [r7, #8]
 800ee94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	f023 0210 	bic.w	r2, r3, #16
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	699b      	ldr	r3, [r3, #24]
 800eea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6a1b      	ldr	r3, [r3, #32]
 800eeac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eeb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	031b      	lsls	r3, r3, #12
 800eeba:	697a      	ldr	r2, [r7, #20]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800eec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	011b      	lsls	r3, r3, #4
 800eecc:	693a      	ldr	r2, [r7, #16]
 800eece:	4313      	orrs	r3, r2
 800eed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	697a      	ldr	r2, [r7, #20]
 800eed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	621a      	str	r2, [r3, #32]
}
 800eede:	bf00      	nop
 800eee0:	371c      	adds	r7, #28
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
	...

0800eeec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	4b09      	ldr	r3, [pc, #36]	; (800ef24 <TIM_ITRx_SetConfig+0x38>)
 800ef00:	4013      	ands	r3, r2
 800ef02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	f043 0307 	orr.w	r3, r3, #7
 800ef0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	609a      	str	r2, [r3, #8]
}
 800ef16:	bf00      	nop
 800ef18:	3714      	adds	r7, #20
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	ffcfff8f 	.word	0xffcfff8f

0800ef28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b087      	sub	sp, #28
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ef42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	021a      	lsls	r2, r3, #8
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	431a      	orrs	r2, r3
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	697a      	ldr	r2, [r7, #20]
 800ef52:	4313      	orrs	r3, r2
 800ef54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	697a      	ldr	r2, [r7, #20]
 800ef5a:	609a      	str	r2, [r3, #8]
}
 800ef5c:	bf00      	nop
 800ef5e:	371c      	adds	r7, #28
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b087      	sub	sp, #28
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	f003 031f 	and.w	r3, r3, #31
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ef80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6a1a      	ldr	r2, [r3, #32]
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	43db      	mvns	r3, r3
 800ef8a:	401a      	ands	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6a1a      	ldr	r2, [r3, #32]
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	f003 031f 	and.w	r3, r3, #31
 800ef9a:	6879      	ldr	r1, [r7, #4]
 800ef9c:	fa01 f303 	lsl.w	r3, r1, r3
 800efa0:	431a      	orrs	r2, r3
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	621a      	str	r2, [r3, #32]
}
 800efa6:	bf00      	nop
 800efa8:	371c      	adds	r7, #28
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
	...

0800efb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d101      	bne.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800efc8:	2302      	movs	r3, #2
 800efca:	e06d      	b.n	800f0a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2201      	movs	r2, #1
 800efd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2202      	movs	r2, #2
 800efd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a30      	ldr	r2, [pc, #192]	; (800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d004      	beq.n	800f000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a2f      	ldr	r2, [pc, #188]	; (800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d108      	bne.n	800f012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	4313      	orrs	r3, r2
 800f010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	4313      	orrs	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a20      	ldr	r2, [pc, #128]	; (800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d022      	beq.n	800f07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f03e:	d01d      	beq.n	800f07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a1d      	ldr	r2, [pc, #116]	; (800f0bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d018      	beq.n	800f07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a1c      	ldr	r2, [pc, #112]	; (800f0c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d013      	beq.n	800f07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a1a      	ldr	r2, [pc, #104]	; (800f0c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d00e      	beq.n	800f07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	4a15      	ldr	r2, [pc, #84]	; (800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d009      	beq.n	800f07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a16      	ldr	r2, [pc, #88]	; (800f0c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d004      	beq.n	800f07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a15      	ldr	r2, [pc, #84]	; (800f0cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d10c      	bne.n	800f096 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	68ba      	ldr	r2, [r7, #8]
 800f08a:	4313      	orrs	r3, r2
 800f08c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	68ba      	ldr	r2, [r7, #8]
 800f094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2201      	movs	r2, #1
 800f09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3714      	adds	r7, #20
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr
 800f0b4:	40010000 	.word	0x40010000
 800f0b8:	40010400 	.word	0x40010400
 800f0bc:	40000400 	.word	0x40000400
 800f0c0:	40000800 	.word	0x40000800
 800f0c4:	40000c00 	.word	0x40000c00
 800f0c8:	40001800 	.word	0x40001800
 800f0cc:	40014000 	.word	0x40014000

0800f0d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f0ec:	bf00      	nop
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f100:	bf00      	nop
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e042      	b.n	800f1a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f124:	2b00      	cmp	r3, #0
 800f126:	d106      	bne.n	800f136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7f4 ff15 	bl	8003f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2224      	movs	r2, #36	; 0x24
 800f13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f022 0201 	bic.w	r2, r2, #1
 800f14c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 f8c2 	bl	800f2d8 <UART_SetConfig>
 800f154:	4603      	mov	r3, r0
 800f156:	2b01      	cmp	r3, #1
 800f158:	d101      	bne.n	800f15e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f15a:	2301      	movs	r3, #1
 800f15c:	e022      	b.n	800f1a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f162:	2b00      	cmp	r3, #0
 800f164:	d002      	beq.n	800f16c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fe1e 	bl	800fda8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	685a      	ldr	r2, [r3, #4]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f17a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	689a      	ldr	r2, [r3, #8]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f18a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f042 0201 	orr.w	r2, r2, #1
 800f19a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fea5 	bl	800feec <UART_CheckIdleState>
 800f1a2:	4603      	mov	r3, r0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	; 0x28
 800f1b0:	af02      	add	r7, sp, #8
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	603b      	str	r3, [r7, #0]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	f040 8083 	bne.w	800f2ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d002      	beq.n	800f1d4 <HAL_UART_Transmit+0x28>
 800f1ce:	88fb      	ldrh	r3, [r7, #6]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d101      	bne.n	800f1d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e07b      	b.n	800f2d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d101      	bne.n	800f1e6 <HAL_UART_Transmit+0x3a>
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	e074      	b.n	800f2d0 <HAL_UART_Transmit+0x124>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2221      	movs	r2, #33	; 0x21
 800f1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f1fe:	f7f5 fa1f 	bl	8004640 <HAL_GetTick>
 800f202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	88fa      	ldrh	r2, [r7, #6]
 800f208:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	88fa      	ldrh	r2, [r7, #6]
 800f210:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f21c:	d108      	bne.n	800f230 <HAL_UART_Transmit+0x84>
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d104      	bne.n	800f230 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f226:	2300      	movs	r3, #0
 800f228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	61bb      	str	r3, [r7, #24]
 800f22e:	e003      	b.n	800f238 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f234:	2300      	movs	r3, #0
 800f236:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2200      	movs	r2, #0
 800f23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f240:	e02c      	b.n	800f29c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2200      	movs	r2, #0
 800f24a:	2180      	movs	r1, #128	; 0x80
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f000 fe98 	bl	800ff82 <UART_WaitOnFlagUntilTimeout>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f258:	2303      	movs	r3, #3
 800f25a:	e039      	b.n	800f2d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10b      	bne.n	800f27a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	461a      	mov	r2, r3
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f270:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	3302      	adds	r3, #2
 800f276:	61bb      	str	r3, [r7, #24]
 800f278:	e007      	b.n	800f28a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	781a      	ldrb	r2, [r3, #0]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	3301      	adds	r3, #1
 800f288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f290:	b29b      	uxth	r3, r3
 800f292:	3b01      	subs	r3, #1
 800f294:	b29a      	uxth	r2, r3
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d1cc      	bne.n	800f242 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	9300      	str	r3, [sp, #0]
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	2140      	movs	r1, #64	; 0x40
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f000 fe65 	bl	800ff82 <UART_WaitOnFlagUntilTimeout>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f2be:	2303      	movs	r3, #3
 800f2c0:	e006      	b.n	800f2d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2220      	movs	r2, #32
 800f2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e000      	b.n	800f2d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f2ce:	2302      	movs	r3, #2
  }
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3720      	adds	r7, #32
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2dc:	b092      	sub	sp, #72	; 0x48
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	689a      	ldr	r2, [r3, #8]
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	431a      	orrs	r2, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	695b      	ldr	r3, [r3, #20]
 800f2f6:	431a      	orrs	r2, r3
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	4bbe      	ldr	r3, [pc, #760]	; (800f600 <UART_SetConfig+0x328>)
 800f308:	4013      	ands	r3, r2
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	6812      	ldr	r2, [r2, #0]
 800f30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f310:	430b      	orrs	r3, r1
 800f312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	68da      	ldr	r2, [r3, #12]
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	430a      	orrs	r2, r1
 800f328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	699b      	ldr	r3, [r3, #24]
 800f32e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4ab3      	ldr	r2, [pc, #716]	; (800f604 <UART_SetConfig+0x32c>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d004      	beq.n	800f344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f340:	4313      	orrs	r3, r2
 800f342:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689a      	ldr	r2, [r3, #8]
 800f34a:	4baf      	ldr	r3, [pc, #700]	; (800f608 <UART_SetConfig+0x330>)
 800f34c:	4013      	ands	r3, r2
 800f34e:	697a      	ldr	r2, [r7, #20]
 800f350:	6812      	ldr	r2, [r2, #0]
 800f352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f354:	430b      	orrs	r3, r1
 800f356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35e:	f023 010f 	bic.w	r1, r3, #15
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4aa6      	ldr	r2, [pc, #664]	; (800f60c <UART_SetConfig+0x334>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d177      	bne.n	800f468 <UART_SetConfig+0x190>
 800f378:	4ba5      	ldr	r3, [pc, #660]	; (800f610 <UART_SetConfig+0x338>)
 800f37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f37c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f380:	2b28      	cmp	r3, #40	; 0x28
 800f382:	d86d      	bhi.n	800f460 <UART_SetConfig+0x188>
 800f384:	a201      	add	r2, pc, #4	; (adr r2, 800f38c <UART_SetConfig+0xb4>)
 800f386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38a:	bf00      	nop
 800f38c:	0800f431 	.word	0x0800f431
 800f390:	0800f461 	.word	0x0800f461
 800f394:	0800f461 	.word	0x0800f461
 800f398:	0800f461 	.word	0x0800f461
 800f39c:	0800f461 	.word	0x0800f461
 800f3a0:	0800f461 	.word	0x0800f461
 800f3a4:	0800f461 	.word	0x0800f461
 800f3a8:	0800f461 	.word	0x0800f461
 800f3ac:	0800f439 	.word	0x0800f439
 800f3b0:	0800f461 	.word	0x0800f461
 800f3b4:	0800f461 	.word	0x0800f461
 800f3b8:	0800f461 	.word	0x0800f461
 800f3bc:	0800f461 	.word	0x0800f461
 800f3c0:	0800f461 	.word	0x0800f461
 800f3c4:	0800f461 	.word	0x0800f461
 800f3c8:	0800f461 	.word	0x0800f461
 800f3cc:	0800f441 	.word	0x0800f441
 800f3d0:	0800f461 	.word	0x0800f461
 800f3d4:	0800f461 	.word	0x0800f461
 800f3d8:	0800f461 	.word	0x0800f461
 800f3dc:	0800f461 	.word	0x0800f461
 800f3e0:	0800f461 	.word	0x0800f461
 800f3e4:	0800f461 	.word	0x0800f461
 800f3e8:	0800f461 	.word	0x0800f461
 800f3ec:	0800f449 	.word	0x0800f449
 800f3f0:	0800f461 	.word	0x0800f461
 800f3f4:	0800f461 	.word	0x0800f461
 800f3f8:	0800f461 	.word	0x0800f461
 800f3fc:	0800f461 	.word	0x0800f461
 800f400:	0800f461 	.word	0x0800f461
 800f404:	0800f461 	.word	0x0800f461
 800f408:	0800f461 	.word	0x0800f461
 800f40c:	0800f451 	.word	0x0800f451
 800f410:	0800f461 	.word	0x0800f461
 800f414:	0800f461 	.word	0x0800f461
 800f418:	0800f461 	.word	0x0800f461
 800f41c:	0800f461 	.word	0x0800f461
 800f420:	0800f461 	.word	0x0800f461
 800f424:	0800f461 	.word	0x0800f461
 800f428:	0800f461 	.word	0x0800f461
 800f42c:	0800f459 	.word	0x0800f459
 800f430:	2301      	movs	r3, #1
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e222      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f438:	2304      	movs	r3, #4
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e21e      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f440:	2308      	movs	r3, #8
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e21a      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f448:	2310      	movs	r3, #16
 800f44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f44e:	e216      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f450:	2320      	movs	r3, #32
 800f452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f456:	e212      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f458:	2340      	movs	r3, #64	; 0x40
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f45e:	e20e      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f460:	2380      	movs	r3, #128	; 0x80
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f466:	e20a      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a69      	ldr	r2, [pc, #420]	; (800f614 <UART_SetConfig+0x33c>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d130      	bne.n	800f4d4 <UART_SetConfig+0x1fc>
 800f472:	4b67      	ldr	r3, [pc, #412]	; (800f610 <UART_SetConfig+0x338>)
 800f474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f476:	f003 0307 	and.w	r3, r3, #7
 800f47a:	2b05      	cmp	r3, #5
 800f47c:	d826      	bhi.n	800f4cc <UART_SetConfig+0x1f4>
 800f47e:	a201      	add	r2, pc, #4	; (adr r2, 800f484 <UART_SetConfig+0x1ac>)
 800f480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f484:	0800f49d 	.word	0x0800f49d
 800f488:	0800f4a5 	.word	0x0800f4a5
 800f48c:	0800f4ad 	.word	0x0800f4ad
 800f490:	0800f4b5 	.word	0x0800f4b5
 800f494:	0800f4bd 	.word	0x0800f4bd
 800f498:	0800f4c5 	.word	0x0800f4c5
 800f49c:	2300      	movs	r3, #0
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e1ec      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f4a4:	2304      	movs	r3, #4
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e1e8      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f4ac:	2308      	movs	r3, #8
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4b2:	e1e4      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f4b4:	2310      	movs	r3, #16
 800f4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ba:	e1e0      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f4bc:	2320      	movs	r3, #32
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c2:	e1dc      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f4c4:	2340      	movs	r3, #64	; 0x40
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ca:	e1d8      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f4cc:	2380      	movs	r3, #128	; 0x80
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4d2:	e1d4      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a4f      	ldr	r2, [pc, #316]	; (800f618 <UART_SetConfig+0x340>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d130      	bne.n	800f540 <UART_SetConfig+0x268>
 800f4de:	4b4c      	ldr	r3, [pc, #304]	; (800f610 <UART_SetConfig+0x338>)
 800f4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4e2:	f003 0307 	and.w	r3, r3, #7
 800f4e6:	2b05      	cmp	r3, #5
 800f4e8:	d826      	bhi.n	800f538 <UART_SetConfig+0x260>
 800f4ea:	a201      	add	r2, pc, #4	; (adr r2, 800f4f0 <UART_SetConfig+0x218>)
 800f4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f0:	0800f509 	.word	0x0800f509
 800f4f4:	0800f511 	.word	0x0800f511
 800f4f8:	0800f519 	.word	0x0800f519
 800f4fc:	0800f521 	.word	0x0800f521
 800f500:	0800f529 	.word	0x0800f529
 800f504:	0800f531 	.word	0x0800f531
 800f508:	2300      	movs	r3, #0
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50e:	e1b6      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f510:	2304      	movs	r3, #4
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f516:	e1b2      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f518:	2308      	movs	r3, #8
 800f51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f51e:	e1ae      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f520:	2310      	movs	r3, #16
 800f522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f526:	e1aa      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f528:	2320      	movs	r3, #32
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52e:	e1a6      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f530:	2340      	movs	r3, #64	; 0x40
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f536:	e1a2      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f538:	2380      	movs	r3, #128	; 0x80
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53e:	e19e      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a35      	ldr	r2, [pc, #212]	; (800f61c <UART_SetConfig+0x344>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d130      	bne.n	800f5ac <UART_SetConfig+0x2d4>
 800f54a:	4b31      	ldr	r3, [pc, #196]	; (800f610 <UART_SetConfig+0x338>)
 800f54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f54e:	f003 0307 	and.w	r3, r3, #7
 800f552:	2b05      	cmp	r3, #5
 800f554:	d826      	bhi.n	800f5a4 <UART_SetConfig+0x2cc>
 800f556:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <UART_SetConfig+0x284>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f575 	.word	0x0800f575
 800f560:	0800f57d 	.word	0x0800f57d
 800f564:	0800f585 	.word	0x0800f585
 800f568:	0800f58d 	.word	0x0800f58d
 800f56c:	0800f595 	.word	0x0800f595
 800f570:	0800f59d 	.word	0x0800f59d
 800f574:	2300      	movs	r3, #0
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57a:	e180      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f57c:	2304      	movs	r3, #4
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f582:	e17c      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f584:	2308      	movs	r3, #8
 800f586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58a:	e178      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f58c:	2310      	movs	r3, #16
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f592:	e174      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f594:	2320      	movs	r3, #32
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59a:	e170      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f59c:	2340      	movs	r3, #64	; 0x40
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a2:	e16c      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f5a4:	2380      	movs	r3, #128	; 0x80
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5aa:	e168      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a1b      	ldr	r2, [pc, #108]	; (800f620 <UART_SetConfig+0x348>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d142      	bne.n	800f63c <UART_SetConfig+0x364>
 800f5b6:	4b16      	ldr	r3, [pc, #88]	; (800f610 <UART_SetConfig+0x338>)
 800f5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ba:	f003 0307 	and.w	r3, r3, #7
 800f5be:	2b05      	cmp	r3, #5
 800f5c0:	d838      	bhi.n	800f634 <UART_SetConfig+0x35c>
 800f5c2:	a201      	add	r2, pc, #4	; (adr r2, 800f5c8 <UART_SetConfig+0x2f0>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f5e1 	.word	0x0800f5e1
 800f5cc:	0800f5e9 	.word	0x0800f5e9
 800f5d0:	0800f5f1 	.word	0x0800f5f1
 800f5d4:	0800f5f9 	.word	0x0800f5f9
 800f5d8:	0800f625 	.word	0x0800f625
 800f5dc:	0800f62d 	.word	0x0800f62d
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e14a      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f5e8:	2304      	movs	r3, #4
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ee:	e146      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f6:	e142      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fe:	e13e      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f600:	cfff69f3 	.word	0xcfff69f3
 800f604:	58000c00 	.word	0x58000c00
 800f608:	11fff4ff 	.word	0x11fff4ff
 800f60c:	40011000 	.word	0x40011000
 800f610:	58024400 	.word	0x58024400
 800f614:	40004400 	.word	0x40004400
 800f618:	40004800 	.word	0x40004800
 800f61c:	40004c00 	.word	0x40004c00
 800f620:	40005000 	.word	0x40005000
 800f624:	2320      	movs	r3, #32
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e128      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f62c:	2340      	movs	r3, #64	; 0x40
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e124      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f634:	2380      	movs	r3, #128	; 0x80
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e120      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4acb      	ldr	r2, [pc, #812]	; (800f970 <UART_SetConfig+0x698>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d176      	bne.n	800f734 <UART_SetConfig+0x45c>
 800f646:	4bcb      	ldr	r3, [pc, #812]	; (800f974 <UART_SetConfig+0x69c>)
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f64e:	2b28      	cmp	r3, #40	; 0x28
 800f650:	d86c      	bhi.n	800f72c <UART_SetConfig+0x454>
 800f652:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <UART_SetConfig+0x380>)
 800f654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f658:	0800f6fd 	.word	0x0800f6fd
 800f65c:	0800f72d 	.word	0x0800f72d
 800f660:	0800f72d 	.word	0x0800f72d
 800f664:	0800f72d 	.word	0x0800f72d
 800f668:	0800f72d 	.word	0x0800f72d
 800f66c:	0800f72d 	.word	0x0800f72d
 800f670:	0800f72d 	.word	0x0800f72d
 800f674:	0800f72d 	.word	0x0800f72d
 800f678:	0800f705 	.word	0x0800f705
 800f67c:	0800f72d 	.word	0x0800f72d
 800f680:	0800f72d 	.word	0x0800f72d
 800f684:	0800f72d 	.word	0x0800f72d
 800f688:	0800f72d 	.word	0x0800f72d
 800f68c:	0800f72d 	.word	0x0800f72d
 800f690:	0800f72d 	.word	0x0800f72d
 800f694:	0800f72d 	.word	0x0800f72d
 800f698:	0800f70d 	.word	0x0800f70d
 800f69c:	0800f72d 	.word	0x0800f72d
 800f6a0:	0800f72d 	.word	0x0800f72d
 800f6a4:	0800f72d 	.word	0x0800f72d
 800f6a8:	0800f72d 	.word	0x0800f72d
 800f6ac:	0800f72d 	.word	0x0800f72d
 800f6b0:	0800f72d 	.word	0x0800f72d
 800f6b4:	0800f72d 	.word	0x0800f72d
 800f6b8:	0800f715 	.word	0x0800f715
 800f6bc:	0800f72d 	.word	0x0800f72d
 800f6c0:	0800f72d 	.word	0x0800f72d
 800f6c4:	0800f72d 	.word	0x0800f72d
 800f6c8:	0800f72d 	.word	0x0800f72d
 800f6cc:	0800f72d 	.word	0x0800f72d
 800f6d0:	0800f72d 	.word	0x0800f72d
 800f6d4:	0800f72d 	.word	0x0800f72d
 800f6d8:	0800f71d 	.word	0x0800f71d
 800f6dc:	0800f72d 	.word	0x0800f72d
 800f6e0:	0800f72d 	.word	0x0800f72d
 800f6e4:	0800f72d 	.word	0x0800f72d
 800f6e8:	0800f72d 	.word	0x0800f72d
 800f6ec:	0800f72d 	.word	0x0800f72d
 800f6f0:	0800f72d 	.word	0x0800f72d
 800f6f4:	0800f72d 	.word	0x0800f72d
 800f6f8:	0800f725 	.word	0x0800f725
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e0bc      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f704:	2304      	movs	r3, #4
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e0b8      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f70c:	2308      	movs	r3, #8
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f712:	e0b4      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f714:	2310      	movs	r3, #16
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71a:	e0b0      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f71c:	2320      	movs	r3, #32
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e0ac      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f724:	2340      	movs	r3, #64	; 0x40
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72a:	e0a8      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f72c:	2380      	movs	r3, #128	; 0x80
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f732:	e0a4      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a8f      	ldr	r2, [pc, #572]	; (800f978 <UART_SetConfig+0x6a0>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d130      	bne.n	800f7a0 <UART_SetConfig+0x4c8>
 800f73e:	4b8d      	ldr	r3, [pc, #564]	; (800f974 <UART_SetConfig+0x69c>)
 800f740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f742:	f003 0307 	and.w	r3, r3, #7
 800f746:	2b05      	cmp	r3, #5
 800f748:	d826      	bhi.n	800f798 <UART_SetConfig+0x4c0>
 800f74a:	a201      	add	r2, pc, #4	; (adr r2, 800f750 <UART_SetConfig+0x478>)
 800f74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f750:	0800f769 	.word	0x0800f769
 800f754:	0800f771 	.word	0x0800f771
 800f758:	0800f779 	.word	0x0800f779
 800f75c:	0800f781 	.word	0x0800f781
 800f760:	0800f789 	.word	0x0800f789
 800f764:	0800f791 	.word	0x0800f791
 800f768:	2300      	movs	r3, #0
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76e:	e086      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f770:	2304      	movs	r3, #4
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f776:	e082      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f778:	2308      	movs	r3, #8
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f77e:	e07e      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f780:	2310      	movs	r3, #16
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f786:	e07a      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f788:	2320      	movs	r3, #32
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78e:	e076      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f790:	2340      	movs	r3, #64	; 0x40
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f796:	e072      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f798:	2380      	movs	r3, #128	; 0x80
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79e:	e06e      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a75      	ldr	r2, [pc, #468]	; (800f97c <UART_SetConfig+0x6a4>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d130      	bne.n	800f80c <UART_SetConfig+0x534>
 800f7aa:	4b72      	ldr	r3, [pc, #456]	; (800f974 <UART_SetConfig+0x69c>)
 800f7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ae:	f003 0307 	and.w	r3, r3, #7
 800f7b2:	2b05      	cmp	r3, #5
 800f7b4:	d826      	bhi.n	800f804 <UART_SetConfig+0x52c>
 800f7b6:	a201      	add	r2, pc, #4	; (adr r2, 800f7bc <UART_SetConfig+0x4e4>)
 800f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7bc:	0800f7d5 	.word	0x0800f7d5
 800f7c0:	0800f7dd 	.word	0x0800f7dd
 800f7c4:	0800f7e5 	.word	0x0800f7e5
 800f7c8:	0800f7ed 	.word	0x0800f7ed
 800f7cc:	0800f7f5 	.word	0x0800f7f5
 800f7d0:	0800f7fd 	.word	0x0800f7fd
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7da:	e050      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f7dc:	2304      	movs	r3, #4
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e2:	e04c      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f7e4:	2308      	movs	r3, #8
 800f7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ea:	e048      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f7ec:	2310      	movs	r3, #16
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f2:	e044      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f7f4:	2320      	movs	r3, #32
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fa:	e040      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f7fc:	2340      	movs	r3, #64	; 0x40
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e03c      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f804:	2380      	movs	r3, #128	; 0x80
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e038      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a5b      	ldr	r2, [pc, #364]	; (800f980 <UART_SetConfig+0x6a8>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d130      	bne.n	800f878 <UART_SetConfig+0x5a0>
 800f816:	4b57      	ldr	r3, [pc, #348]	; (800f974 <UART_SetConfig+0x69c>)
 800f818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f81a:	f003 0307 	and.w	r3, r3, #7
 800f81e:	2b05      	cmp	r3, #5
 800f820:	d826      	bhi.n	800f870 <UART_SetConfig+0x598>
 800f822:	a201      	add	r2, pc, #4	; (adr r2, 800f828 <UART_SetConfig+0x550>)
 800f824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f828:	0800f841 	.word	0x0800f841
 800f82c:	0800f849 	.word	0x0800f849
 800f830:	0800f851 	.word	0x0800f851
 800f834:	0800f859 	.word	0x0800f859
 800f838:	0800f861 	.word	0x0800f861
 800f83c:	0800f869 	.word	0x0800f869
 800f840:	2302      	movs	r3, #2
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e01a      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f848:	2304      	movs	r3, #4
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84e:	e016      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f850:	2308      	movs	r3, #8
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f856:	e012      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f858:	2310      	movs	r3, #16
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85e:	e00e      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f860:	2320      	movs	r3, #32
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f866:	e00a      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f868:	2340      	movs	r3, #64	; 0x40
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e006      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f870:	2380      	movs	r3, #128	; 0x80
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e002      	b.n	800f87e <UART_SetConfig+0x5a6>
 800f878:	2380      	movs	r3, #128	; 0x80
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a3f      	ldr	r2, [pc, #252]	; (800f980 <UART_SetConfig+0x6a8>)
 800f884:	4293      	cmp	r3, r2
 800f886:	f040 80f8 	bne.w	800fa7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f88a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f88e:	2b20      	cmp	r3, #32
 800f890:	dc46      	bgt.n	800f920 <UART_SetConfig+0x648>
 800f892:	2b02      	cmp	r3, #2
 800f894:	f2c0 8082 	blt.w	800f99c <UART_SetConfig+0x6c4>
 800f898:	3b02      	subs	r3, #2
 800f89a:	2b1e      	cmp	r3, #30
 800f89c:	d87e      	bhi.n	800f99c <UART_SetConfig+0x6c4>
 800f89e:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <UART_SetConfig+0x5cc>)
 800f8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a4:	0800f927 	.word	0x0800f927
 800f8a8:	0800f99d 	.word	0x0800f99d
 800f8ac:	0800f92f 	.word	0x0800f92f
 800f8b0:	0800f99d 	.word	0x0800f99d
 800f8b4:	0800f99d 	.word	0x0800f99d
 800f8b8:	0800f99d 	.word	0x0800f99d
 800f8bc:	0800f93f 	.word	0x0800f93f
 800f8c0:	0800f99d 	.word	0x0800f99d
 800f8c4:	0800f99d 	.word	0x0800f99d
 800f8c8:	0800f99d 	.word	0x0800f99d
 800f8cc:	0800f99d 	.word	0x0800f99d
 800f8d0:	0800f99d 	.word	0x0800f99d
 800f8d4:	0800f99d 	.word	0x0800f99d
 800f8d8:	0800f99d 	.word	0x0800f99d
 800f8dc:	0800f94f 	.word	0x0800f94f
 800f8e0:	0800f99d 	.word	0x0800f99d
 800f8e4:	0800f99d 	.word	0x0800f99d
 800f8e8:	0800f99d 	.word	0x0800f99d
 800f8ec:	0800f99d 	.word	0x0800f99d
 800f8f0:	0800f99d 	.word	0x0800f99d
 800f8f4:	0800f99d 	.word	0x0800f99d
 800f8f8:	0800f99d 	.word	0x0800f99d
 800f8fc:	0800f99d 	.word	0x0800f99d
 800f900:	0800f99d 	.word	0x0800f99d
 800f904:	0800f99d 	.word	0x0800f99d
 800f908:	0800f99d 	.word	0x0800f99d
 800f90c:	0800f99d 	.word	0x0800f99d
 800f910:	0800f99d 	.word	0x0800f99d
 800f914:	0800f99d 	.word	0x0800f99d
 800f918:	0800f99d 	.word	0x0800f99d
 800f91c:	0800f98f 	.word	0x0800f98f
 800f920:	2b40      	cmp	r3, #64	; 0x40
 800f922:	d037      	beq.n	800f994 <UART_SetConfig+0x6bc>
 800f924:	e03a      	b.n	800f99c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f926:	f7fb f8ef 	bl	800ab08 <HAL_RCCEx_GetD3PCLK1Freq>
 800f92a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f92c:	e03c      	b.n	800f9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f92e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f932:	4618      	mov	r0, r3
 800f934:	f7fb f8fe 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f93c:	e034      	b.n	800f9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f93e:	f107 0318 	add.w	r3, r7, #24
 800f942:	4618      	mov	r0, r3
 800f944:	f7fb fa4a 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f94c:	e02c      	b.n	800f9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f94e:	4b09      	ldr	r3, [pc, #36]	; (800f974 <UART_SetConfig+0x69c>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f003 0320 	and.w	r3, r3, #32
 800f956:	2b00      	cmp	r3, #0
 800f958:	d016      	beq.n	800f988 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f95a:	4b06      	ldr	r3, [pc, #24]	; (800f974 <UART_SetConfig+0x69c>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	08db      	lsrs	r3, r3, #3
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	4a07      	ldr	r2, [pc, #28]	; (800f984 <UART_SetConfig+0x6ac>)
 800f966:	fa22 f303 	lsr.w	r3, r2, r3
 800f96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f96c:	e01c      	b.n	800f9a8 <UART_SetConfig+0x6d0>
 800f96e:	bf00      	nop
 800f970:	40011400 	.word	0x40011400
 800f974:	58024400 	.word	0x58024400
 800f978:	40007800 	.word	0x40007800
 800f97c:	40007c00 	.word	0x40007c00
 800f980:	58000c00 	.word	0x58000c00
 800f984:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f988:	4b9d      	ldr	r3, [pc, #628]	; (800fc00 <UART_SetConfig+0x928>)
 800f98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f98c:	e00c      	b.n	800f9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f98e:	4b9d      	ldr	r3, [pc, #628]	; (800fc04 <UART_SetConfig+0x92c>)
 800f990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f992:	e009      	b.n	800f9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f99a:	e005      	b.n	800f9a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f99c:	2300      	movs	r3, #0
 800f99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f9a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f000 81de 	beq.w	800fd6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b4:	4a94      	ldr	r2, [pc, #592]	; (800fc08 <UART_SetConfig+0x930>)
 800f9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9be:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	685a      	ldr	r2, [r3, #4]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	005b      	lsls	r3, r3, #1
 800f9cc:	4413      	add	r3, r2
 800f9ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d305      	bcc.n	800f9e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d903      	bls.n	800f9e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f9e6:	e1c1      	b.n	800fd6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	60bb      	str	r3, [r7, #8]
 800f9ee:	60fa      	str	r2, [r7, #12]
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f4:	4a84      	ldr	r2, [pc, #528]	; (800fc08 <UART_SetConfig+0x930>)
 800f9f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	603b      	str	r3, [r7, #0]
 800fa00:	607a      	str	r2, [r7, #4]
 800fa02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fa0a:	f7f0 fcc1 	bl	8000390 <__aeabi_uldivmod>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	460b      	mov	r3, r1
 800fa12:	4610      	mov	r0, r2
 800fa14:	4619      	mov	r1, r3
 800fa16:	f04f 0200 	mov.w	r2, #0
 800fa1a:	f04f 0300 	mov.w	r3, #0
 800fa1e:	020b      	lsls	r3, r1, #8
 800fa20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa24:	0202      	lsls	r2, r0, #8
 800fa26:	6979      	ldr	r1, [r7, #20]
 800fa28:	6849      	ldr	r1, [r1, #4]
 800fa2a:	0849      	lsrs	r1, r1, #1
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	460c      	mov	r4, r1
 800fa30:	4605      	mov	r5, r0
 800fa32:	eb12 0804 	adds.w	r8, r2, r4
 800fa36:	eb43 0905 	adc.w	r9, r3, r5
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	469a      	mov	sl, r3
 800fa42:	4693      	mov	fp, r2
 800fa44:	4652      	mov	r2, sl
 800fa46:	465b      	mov	r3, fp
 800fa48:	4640      	mov	r0, r8
 800fa4a:	4649      	mov	r1, r9
 800fa4c:	f7f0 fca0 	bl	8000390 <__aeabi_uldivmod>
 800fa50:	4602      	mov	r2, r0
 800fa52:	460b      	mov	r3, r1
 800fa54:	4613      	mov	r3, r2
 800fa56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa5e:	d308      	bcc.n	800fa72 <UART_SetConfig+0x79a>
 800fa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa66:	d204      	bcs.n	800fa72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa6e:	60da      	str	r2, [r3, #12]
 800fa70:	e17c      	b.n	800fd6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fa72:	2301      	movs	r3, #1
 800fa74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa78:	e178      	b.n	800fd6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	69db      	ldr	r3, [r3, #28]
 800fa7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa82:	f040 80c5 	bne.w	800fc10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fa86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa8a:	2b20      	cmp	r3, #32
 800fa8c:	dc48      	bgt.n	800fb20 <UART_SetConfig+0x848>
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	db7b      	blt.n	800fb8a <UART_SetConfig+0x8b2>
 800fa92:	2b20      	cmp	r3, #32
 800fa94:	d879      	bhi.n	800fb8a <UART_SetConfig+0x8b2>
 800fa96:	a201      	add	r2, pc, #4	; (adr r2, 800fa9c <UART_SetConfig+0x7c4>)
 800fa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa9c:	0800fb27 	.word	0x0800fb27
 800faa0:	0800fb2f 	.word	0x0800fb2f
 800faa4:	0800fb8b 	.word	0x0800fb8b
 800faa8:	0800fb8b 	.word	0x0800fb8b
 800faac:	0800fb37 	.word	0x0800fb37
 800fab0:	0800fb8b 	.word	0x0800fb8b
 800fab4:	0800fb8b 	.word	0x0800fb8b
 800fab8:	0800fb8b 	.word	0x0800fb8b
 800fabc:	0800fb47 	.word	0x0800fb47
 800fac0:	0800fb8b 	.word	0x0800fb8b
 800fac4:	0800fb8b 	.word	0x0800fb8b
 800fac8:	0800fb8b 	.word	0x0800fb8b
 800facc:	0800fb8b 	.word	0x0800fb8b
 800fad0:	0800fb8b 	.word	0x0800fb8b
 800fad4:	0800fb8b 	.word	0x0800fb8b
 800fad8:	0800fb8b 	.word	0x0800fb8b
 800fadc:	0800fb57 	.word	0x0800fb57
 800fae0:	0800fb8b 	.word	0x0800fb8b
 800fae4:	0800fb8b 	.word	0x0800fb8b
 800fae8:	0800fb8b 	.word	0x0800fb8b
 800faec:	0800fb8b 	.word	0x0800fb8b
 800faf0:	0800fb8b 	.word	0x0800fb8b
 800faf4:	0800fb8b 	.word	0x0800fb8b
 800faf8:	0800fb8b 	.word	0x0800fb8b
 800fafc:	0800fb8b 	.word	0x0800fb8b
 800fb00:	0800fb8b 	.word	0x0800fb8b
 800fb04:	0800fb8b 	.word	0x0800fb8b
 800fb08:	0800fb8b 	.word	0x0800fb8b
 800fb0c:	0800fb8b 	.word	0x0800fb8b
 800fb10:	0800fb8b 	.word	0x0800fb8b
 800fb14:	0800fb8b 	.word	0x0800fb8b
 800fb18:	0800fb8b 	.word	0x0800fb8b
 800fb1c:	0800fb7d 	.word	0x0800fb7d
 800fb20:	2b40      	cmp	r3, #64	; 0x40
 800fb22:	d02e      	beq.n	800fb82 <UART_SetConfig+0x8aa>
 800fb24:	e031      	b.n	800fb8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb26:	f7f9 fb69 	bl	80091fc <HAL_RCC_GetPCLK1Freq>
 800fb2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb2c:	e033      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb2e:	f7f9 fb7b 	bl	8009228 <HAL_RCC_GetPCLK2Freq>
 800fb32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb34:	e02f      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fa fffa 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb44:	e027      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb46:	f107 0318 	add.w	r3, r7, #24
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fb f946 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb54:	e01f      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb56:	4b2d      	ldr	r3, [pc, #180]	; (800fc0c <UART_SetConfig+0x934>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f003 0320 	and.w	r3, r3, #32
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d009      	beq.n	800fb76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb62:	4b2a      	ldr	r3, [pc, #168]	; (800fc0c <UART_SetConfig+0x934>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	08db      	lsrs	r3, r3, #3
 800fb68:	f003 0303 	and.w	r3, r3, #3
 800fb6c:	4a24      	ldr	r2, [pc, #144]	; (800fc00 <UART_SetConfig+0x928>)
 800fb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800fb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb74:	e00f      	b.n	800fb96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb76:	4b22      	ldr	r3, [pc, #136]	; (800fc00 <UART_SetConfig+0x928>)
 800fb78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb7a:	e00c      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb7c:	4b21      	ldr	r3, [pc, #132]	; (800fc04 <UART_SetConfig+0x92c>)
 800fb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb80:	e009      	b.n	800fb96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb88:	e005      	b.n	800fb96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fb94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	f000 80e7 	beq.w	800fd6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba2:	4a19      	ldr	r2, [pc, #100]	; (800fc08 <UART_SetConfig+0x930>)
 800fba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fba8:	461a      	mov	r2, r3
 800fbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbac:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbb0:	005a      	lsls	r2, r3, #1
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	085b      	lsrs	r3, r3, #1
 800fbb8:	441a      	add	r2, r3
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	2b0f      	cmp	r3, #15
 800fbc8:	d916      	bls.n	800fbf8 <UART_SetConfig+0x920>
 800fbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbd0:	d212      	bcs.n	800fbf8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	f023 030f 	bic.w	r3, r3, #15
 800fbda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	085b      	lsrs	r3, r3, #1
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	f003 0307 	and.w	r3, r3, #7
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fbea:	4313      	orrs	r3, r2
 800fbec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fbf4:	60da      	str	r2, [r3, #12]
 800fbf6:	e0b9      	b.n	800fd6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fbfe:	e0b5      	b.n	800fd6c <UART_SetConfig+0xa94>
 800fc00:	03d09000 	.word	0x03d09000
 800fc04:	003d0900 	.word	0x003d0900
 800fc08:	08024828 	.word	0x08024828
 800fc0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fc10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc14:	2b20      	cmp	r3, #32
 800fc16:	dc49      	bgt.n	800fcac <UART_SetConfig+0x9d4>
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	db7c      	blt.n	800fd16 <UART_SetConfig+0xa3e>
 800fc1c:	2b20      	cmp	r3, #32
 800fc1e:	d87a      	bhi.n	800fd16 <UART_SetConfig+0xa3e>
 800fc20:	a201      	add	r2, pc, #4	; (adr r2, 800fc28 <UART_SetConfig+0x950>)
 800fc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc26:	bf00      	nop
 800fc28:	0800fcb3 	.word	0x0800fcb3
 800fc2c:	0800fcbb 	.word	0x0800fcbb
 800fc30:	0800fd17 	.word	0x0800fd17
 800fc34:	0800fd17 	.word	0x0800fd17
 800fc38:	0800fcc3 	.word	0x0800fcc3
 800fc3c:	0800fd17 	.word	0x0800fd17
 800fc40:	0800fd17 	.word	0x0800fd17
 800fc44:	0800fd17 	.word	0x0800fd17
 800fc48:	0800fcd3 	.word	0x0800fcd3
 800fc4c:	0800fd17 	.word	0x0800fd17
 800fc50:	0800fd17 	.word	0x0800fd17
 800fc54:	0800fd17 	.word	0x0800fd17
 800fc58:	0800fd17 	.word	0x0800fd17
 800fc5c:	0800fd17 	.word	0x0800fd17
 800fc60:	0800fd17 	.word	0x0800fd17
 800fc64:	0800fd17 	.word	0x0800fd17
 800fc68:	0800fce3 	.word	0x0800fce3
 800fc6c:	0800fd17 	.word	0x0800fd17
 800fc70:	0800fd17 	.word	0x0800fd17
 800fc74:	0800fd17 	.word	0x0800fd17
 800fc78:	0800fd17 	.word	0x0800fd17
 800fc7c:	0800fd17 	.word	0x0800fd17
 800fc80:	0800fd17 	.word	0x0800fd17
 800fc84:	0800fd17 	.word	0x0800fd17
 800fc88:	0800fd17 	.word	0x0800fd17
 800fc8c:	0800fd17 	.word	0x0800fd17
 800fc90:	0800fd17 	.word	0x0800fd17
 800fc94:	0800fd17 	.word	0x0800fd17
 800fc98:	0800fd17 	.word	0x0800fd17
 800fc9c:	0800fd17 	.word	0x0800fd17
 800fca0:	0800fd17 	.word	0x0800fd17
 800fca4:	0800fd17 	.word	0x0800fd17
 800fca8:	0800fd09 	.word	0x0800fd09
 800fcac:	2b40      	cmp	r3, #64	; 0x40
 800fcae:	d02e      	beq.n	800fd0e <UART_SetConfig+0xa36>
 800fcb0:	e031      	b.n	800fd16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fcb2:	f7f9 faa3 	bl	80091fc <HAL_RCC_GetPCLK1Freq>
 800fcb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcb8:	e033      	b.n	800fd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcba:	f7f9 fab5 	bl	8009228 <HAL_RCC_GetPCLK2Freq>
 800fcbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcc0:	e02f      	b.n	800fd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fa ff34 	bl	800ab34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcd0:	e027      	b.n	800fd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcd2:	f107 0318 	add.w	r3, r7, #24
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fb f880 	bl	800addc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fce0:	e01f      	b.n	800fd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fce2:	4b2d      	ldr	r3, [pc, #180]	; (800fd98 <UART_SetConfig+0xac0>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f003 0320 	and.w	r3, r3, #32
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d009      	beq.n	800fd02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fcee:	4b2a      	ldr	r3, [pc, #168]	; (800fd98 <UART_SetConfig+0xac0>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	08db      	lsrs	r3, r3, #3
 800fcf4:	f003 0303 	and.w	r3, r3, #3
 800fcf8:	4a28      	ldr	r2, [pc, #160]	; (800fd9c <UART_SetConfig+0xac4>)
 800fcfa:	fa22 f303 	lsr.w	r3, r2, r3
 800fcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd00:	e00f      	b.n	800fd22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fd02:	4b26      	ldr	r3, [pc, #152]	; (800fd9c <UART_SetConfig+0xac4>)
 800fd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd06:	e00c      	b.n	800fd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd08:	4b25      	ldr	r3, [pc, #148]	; (800fda0 <UART_SetConfig+0xac8>)
 800fd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd0c:	e009      	b.n	800fd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd14:	e005      	b.n	800fd22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fd16:	2300      	movs	r3, #0
 800fd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd20:	bf00      	nop
    }

    if (pclk != 0U)
 800fd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d021      	beq.n	800fd6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2c:	4a1d      	ldr	r2, [pc, #116]	; (800fda4 <UART_SetConfig+0xacc>)
 800fd2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd32:	461a      	mov	r2, r3
 800fd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd36:	fbb3 f2f2 	udiv	r2, r3, r2
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	085b      	lsrs	r3, r3, #1
 800fd40:	441a      	add	r2, r3
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	2b0f      	cmp	r3, #15
 800fd50:	d909      	bls.n	800fd66 <UART_SetConfig+0xa8e>
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd58:	d205      	bcs.n	800fd66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	60da      	str	r2, [r3, #12]
 800fd64:	e002      	b.n	800fd6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fd66:	2301      	movs	r3, #1
 800fd68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	2200      	movs	r2, #0
 800fd86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fd88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3748      	adds	r7, #72	; 0x48
 800fd90:	46bd      	mov	sp, r7
 800fd92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd96:	bf00      	nop
 800fd98:	58024400 	.word	0x58024400
 800fd9c:	03d09000 	.word	0x03d09000
 800fda0:	003d0900 	.word	0x003d0900
 800fda4:	08024828 	.word	0x08024828

0800fda8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb4:	f003 0301 	and.w	r3, r3, #1
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00a      	beq.n	800fdd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	430a      	orrs	r2, r1
 800fdd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd6:	f003 0302 	and.w	r3, r3, #2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00a      	beq.n	800fdf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	430a      	orrs	r2, r1
 800fdf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdf8:	f003 0304 	and.w	r3, r3, #4
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d00a      	beq.n	800fe16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	430a      	orrs	r2, r1
 800fe14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1a:	f003 0308 	and.w	r3, r3, #8
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00a      	beq.n	800fe38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	430a      	orrs	r2, r1
 800fe36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe3c:	f003 0310 	and.w	r3, r3, #16
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d00a      	beq.n	800fe5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	430a      	orrs	r2, r1
 800fe58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe5e:	f003 0320 	and.w	r3, r3, #32
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	430a      	orrs	r2, r1
 800fe7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d01a      	beq.n	800febe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fea6:	d10a      	bne.n	800febe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	430a      	orrs	r2, r1
 800febc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00a      	beq.n	800fee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	430a      	orrs	r2, r1
 800fede:	605a      	str	r2, [r3, #4]
  }
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b086      	sub	sp, #24
 800fef0:	af02      	add	r7, sp, #8
 800fef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fefc:	f7f4 fba0 	bl	8004640 <HAL_GetTick>
 800ff00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f003 0308 	and.w	r3, r3, #8
 800ff0c:	2b08      	cmp	r3, #8
 800ff0e:	d10e      	bne.n	800ff2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 f82f 	bl	800ff82 <UART_WaitOnFlagUntilTimeout>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d001      	beq.n	800ff2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff2a:	2303      	movs	r3, #3
 800ff2c:	e025      	b.n	800ff7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f003 0304 	and.w	r3, r3, #4
 800ff38:	2b04      	cmp	r3, #4
 800ff3a:	d10e      	bne.n	800ff5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 f819 	bl	800ff82 <UART_WaitOnFlagUntilTimeout>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d001      	beq.n	800ff5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff56:	2303      	movs	r3, #3
 800ff58:	e00f      	b.n	800ff7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2220      	movs	r2, #32
 800ff5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2220      	movs	r2, #32
 800ff66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b09c      	sub	sp, #112	; 0x70
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	60f8      	str	r0, [r7, #12]
 800ff8a:	60b9      	str	r1, [r7, #8]
 800ff8c:	603b      	str	r3, [r7, #0]
 800ff8e:	4613      	mov	r3, r2
 800ff90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff92:	e0a9      	b.n	80100e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff9a:	f000 80a5 	beq.w	80100e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff9e:	f7f4 fb4f 	bl	8004640 <HAL_GetTick>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	1ad3      	subs	r3, r2, r3
 800ffa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d302      	bcc.n	800ffb4 <UART_WaitOnFlagUntilTimeout+0x32>
 800ffae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d140      	bne.n	8010036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffbc:	e853 3f00 	ldrex	r3, [r3]
 800ffc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ffc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ffc8:	667b      	str	r3, [r7, #100]	; 0x64
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ffd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ffda:	e841 2300 	strex	r3, r2, [r1]
 800ffde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ffe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1e6      	bne.n	800ffb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	3308      	adds	r3, #8
 800ffec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff0:	e853 3f00 	ldrex	r3, [r3]
 800fff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff8:	f023 0301 	bic.w	r3, r3, #1
 800fffc:	663b      	str	r3, [r7, #96]	; 0x60
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3308      	adds	r3, #8
 8010004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010006:	64ba      	str	r2, [r7, #72]	; 0x48
 8010008:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801000a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801000c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801000e:	e841 2300 	strex	r3, r2, [r1]
 8010012:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1e5      	bne.n	800ffe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2220      	movs	r2, #32
 801001e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2220      	movs	r2, #32
 8010026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010032:	2303      	movs	r3, #3
 8010034:	e069      	b.n	801010a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f003 0304 	and.w	r3, r3, #4
 8010040:	2b00      	cmp	r3, #0
 8010042:	d051      	beq.n	80100e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	69db      	ldr	r3, [r3, #28]
 801004a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801004e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010052:	d149      	bne.n	80100e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801005c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010066:	e853 3f00 	ldrex	r3, [r3]
 801006a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	461a      	mov	r2, r3
 801007a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801007c:	637b      	str	r3, [r7, #52]	; 0x34
 801007e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010084:	e841 2300 	strex	r3, r2, [r1]
 8010088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1e6      	bne.n	801005e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	3308      	adds	r3, #8
 8010096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	e853 3f00 	ldrex	r3, [r3]
 801009e:	613b      	str	r3, [r7, #16]
   return(result);
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	f023 0301 	bic.w	r3, r3, #1
 80100a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	3308      	adds	r3, #8
 80100ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80100b0:	623a      	str	r2, [r7, #32]
 80100b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b4:	69f9      	ldr	r1, [r7, #28]
 80100b6:	6a3a      	ldr	r2, [r7, #32]
 80100b8:	e841 2300 	strex	r3, r2, [r1]
 80100bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1e5      	bne.n	8010090 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2220      	movs	r2, #32
 80100c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2220      	movs	r2, #32
 80100d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2220      	movs	r2, #32
 80100d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2200      	movs	r2, #0
 80100e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80100e4:	2303      	movs	r3, #3
 80100e6:	e010      	b.n	801010a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	69da      	ldr	r2, [r3, #28]
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	4013      	ands	r3, r2
 80100f2:	68ba      	ldr	r2, [r7, #8]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	bf0c      	ite	eq
 80100f8:	2301      	moveq	r3, #1
 80100fa:	2300      	movne	r3, #0
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	461a      	mov	r2, r3
 8010100:	79fb      	ldrb	r3, [r7, #7]
 8010102:	429a      	cmp	r2, r3
 8010104:	f43f af46 	beq.w	800ff94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010108:	2300      	movs	r3, #0
}
 801010a:	4618      	mov	r0, r3
 801010c:	3770      	adds	r7, #112	; 0x70
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010112:	b480      	push	{r7}
 8010114:	b085      	sub	sp, #20
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010120:	2b01      	cmp	r3, #1
 8010122:	d101      	bne.n	8010128 <HAL_UARTEx_DisableFifoMode+0x16>
 8010124:	2302      	movs	r3, #2
 8010126:	e027      	b.n	8010178 <HAL_UARTEx_DisableFifoMode+0x66>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2201      	movs	r2, #1
 801012c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2224      	movs	r2, #36	; 0x24
 8010134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f022 0201 	bic.w	r2, r2, #1
 801014e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010156:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2220      	movs	r2, #32
 801016a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2200      	movs	r2, #0
 8010172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b084      	sub	sp, #16
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010194:	2b01      	cmp	r3, #1
 8010196:	d101      	bne.n	801019c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010198:	2302      	movs	r3, #2
 801019a:	e02d      	b.n	80101f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2201      	movs	r2, #1
 80101a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2224      	movs	r2, #36	; 0x24
 80101a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f022 0201 	bic.w	r2, r2, #1
 80101c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	683a      	ldr	r2, [r7, #0]
 80101d4:	430a      	orrs	r2, r1
 80101d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 f84f 	bl	801027c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68fa      	ldr	r2, [r7, #12]
 80101e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2220      	movs	r2, #32
 80101ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101f6:	2300      	movs	r3, #0
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010210:	2b01      	cmp	r3, #1
 8010212:	d101      	bne.n	8010218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010214:	2302      	movs	r3, #2
 8010216:	e02d      	b.n	8010274 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2201      	movs	r2, #1
 801021c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2224      	movs	r2, #36	; 0x24
 8010224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f022 0201 	bic.w	r2, r2, #1
 801023e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	683a      	ldr	r2, [r7, #0]
 8010250:	430a      	orrs	r2, r1
 8010252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 f811 	bl	801027c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2220      	movs	r2, #32
 8010266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010272:	2300      	movs	r3, #0
}
 8010274:	4618      	mov	r0, r3
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010288:	2b00      	cmp	r3, #0
 801028a:	d108      	bne.n	801029e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2201      	movs	r2, #1
 8010290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2201      	movs	r2, #1
 8010298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801029c:	e031      	b.n	8010302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801029e:	2310      	movs	r3, #16
 80102a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80102a2:	2310      	movs	r3, #16
 80102a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	0e5b      	lsrs	r3, r3, #25
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	f003 0307 	and.w	r3, r3, #7
 80102b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	689b      	ldr	r3, [r3, #8]
 80102bc:	0f5b      	lsrs	r3, r3, #29
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	f003 0307 	and.w	r3, r3, #7
 80102c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102c6:	7bbb      	ldrb	r3, [r7, #14]
 80102c8:	7b3a      	ldrb	r2, [r7, #12]
 80102ca:	4911      	ldr	r1, [pc, #68]	; (8010310 <UARTEx_SetNbDataToProcess+0x94>)
 80102cc:	5c8a      	ldrb	r2, [r1, r2]
 80102ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80102d2:	7b3a      	ldrb	r2, [r7, #12]
 80102d4:	490f      	ldr	r1, [pc, #60]	; (8010314 <UARTEx_SetNbDataToProcess+0x98>)
 80102d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80102dc:	b29a      	uxth	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102e4:	7bfb      	ldrb	r3, [r7, #15]
 80102e6:	7b7a      	ldrb	r2, [r7, #13]
 80102e8:	4909      	ldr	r1, [pc, #36]	; (8010310 <UARTEx_SetNbDataToProcess+0x94>)
 80102ea:	5c8a      	ldrb	r2, [r1, r2]
 80102ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80102f0:	7b7a      	ldrb	r2, [r7, #13]
 80102f2:	4908      	ldr	r1, [pc, #32]	; (8010314 <UARTEx_SetNbDataToProcess+0x98>)
 80102f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010302:	bf00      	nop
 8010304:	3714      	adds	r7, #20
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop
 8010310:	08024840 	.word	0x08024840
 8010314:	08024848 	.word	0x08024848

08010318 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010318:	b084      	sub	sp, #16
 801031a:	b480      	push	{r7}
 801031c:	b085      	sub	sp, #20
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	f107 001c 	add.w	r0, r7, #28
 8010326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801032e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010330:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010332:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010336:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010338:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801033a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801033c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801033e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	4313      	orrs	r3, r2
 8010344:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	4b07      	ldr	r3, [pc, #28]	; (8010368 <SDMMC_Init+0x50>)
 801034c:	4013      	ands	r3, r2
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	431a      	orrs	r2, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3714      	adds	r7, #20
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	b004      	add	sp, #16
 8010364:	4770      	bx	lr
 8010366:	bf00      	nop
 8010368:	ffc02c00 	.word	0xffc02c00

0801036c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801037a:	4618      	mov	r0, r3
 801037c:	370c      	adds	r7, #12
 801037e:	46bd      	mov	sp, r7
 8010380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010384:	4770      	bx	lr

08010386 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010386:	b480      	push	{r7}
 8010388:	b083      	sub	sp, #12
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801039a:	2300      	movs	r3, #0
}
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f043 0203 	orr.w	r2, r3, #3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80103bc:	2300      	movs	r3, #0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	370c      	adds	r7, #12
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80103ca:	b480      	push	{r7}
 80103cc:	b083      	sub	sp, #12
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f003 0303 	and.w	r3, r3, #3
}
 80103da:	4618      	mov	r0, r3
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
	...

080103e8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80103f2:	2300      	movs	r3, #0
 80103f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010406:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801040c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010412:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010414:	68fa      	ldr	r2, [r7, #12]
 8010416:	4313      	orrs	r3, r2
 8010418:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	68da      	ldr	r2, [r3, #12]
 801041e:	4b06      	ldr	r3, [pc, #24]	; (8010438 <SDMMC_SendCommand+0x50>)
 8010420:	4013      	ands	r3, r2
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	431a      	orrs	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3714      	adds	r7, #20
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	fffee0c0 	.word	0xfffee0c0

0801043c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	691b      	ldr	r3, [r3, #16]
 8010448:	b2db      	uxtb	r3, r3
}
 801044a:	4618      	mov	r0, r3
 801044c:	370c      	adds	r7, #12
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010456:	b480      	push	{r7}
 8010458:	b085      	sub	sp, #20
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	3314      	adds	r3, #20
 8010464:	461a      	mov	r2, r3
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	4413      	add	r3, r2
 801046a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
}
 8010470:	4618      	mov	r0, r3
 8010472:	3714      	adds	r7, #20
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010486:	2300      	movs	r3, #0
 8010488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	685a      	ldr	r2, [r3, #4]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80104a2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80104a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80104ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	4313      	orrs	r3, r2
 80104b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	431a      	orrs	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80104c6:	2300      	movs	r3, #0

}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3714      	adds	r7, #20
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b088      	sub	sp, #32
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80104e2:	2310      	movs	r3, #16
 80104e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104ec:	2300      	movs	r3, #0
 80104ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104f6:	f107 0308 	add.w	r3, r7, #8
 80104fa:	4619      	mov	r1, r3
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7ff ff73 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010502:	f241 3288 	movw	r2, #5000	; 0x1388
 8010506:	2110      	movs	r1, #16
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 fa5f 	bl	80109cc <SDMMC_GetCmdResp1>
 801050e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010510:	69fb      	ldr	r3, [r7, #28]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3720      	adds	r7, #32
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b088      	sub	sp, #32
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010528:	2311      	movs	r3, #17
 801052a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801052c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010532:	2300      	movs	r3, #0
 8010534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801053a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801053c:	f107 0308 	add.w	r3, r7, #8
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7ff ff50 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010548:	f241 3288 	movw	r2, #5000	; 0x1388
 801054c:	2111      	movs	r1, #17
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 fa3c 	bl	80109cc <SDMMC_GetCmdResp1>
 8010554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010556:	69fb      	ldr	r3, [r7, #28]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3720      	adds	r7, #32
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801056e:	2312      	movs	r3, #18
 8010570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010578:	2300      	movs	r3, #0
 801057a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801057c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010580:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010582:	f107 0308 	add.w	r3, r7, #8
 8010586:	4619      	mov	r1, r3
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7ff ff2d 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801058e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010592:	2112      	movs	r1, #18
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f000 fa19 	bl	80109cc <SDMMC_GetCmdResp1>
 801059a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801059c:	69fb      	ldr	r3, [r7, #28]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3720      	adds	r7, #32
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b088      	sub	sp, #32
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
 80105ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80105b4:	2318      	movs	r3, #24
 80105b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105be:	2300      	movs	r3, #0
 80105c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105c8:	f107 0308 	add.w	r3, r7, #8
 80105cc:	4619      	mov	r1, r3
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7ff ff0a 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80105d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80105d8:	2118      	movs	r1, #24
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f000 f9f6 	bl	80109cc <SDMMC_GetCmdResp1>
 80105e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105e2:	69fb      	ldr	r3, [r7, #28]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3720      	adds	r7, #32
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b088      	sub	sp, #32
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80105fa:	2319      	movs	r3, #25
 80105fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010604:	2300      	movs	r3, #0
 8010606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801060c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801060e:	f107 0308 	add.w	r3, r7, #8
 8010612:	4619      	mov	r1, r3
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7ff fee7 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801061a:	f241 3288 	movw	r2, #5000	; 0x1388
 801061e:	2119      	movs	r1, #25
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 f9d3 	bl	80109cc <SDMMC_GetCmdResp1>
 8010626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010628:	69fb      	ldr	r3, [r7, #28]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3720      	adds	r7, #32
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
	...

08010634 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b088      	sub	sp, #32
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801063c:	2300      	movs	r3, #0
 801063e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010640:	230c      	movs	r3, #12
 8010642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801064a:	2300      	movs	r3, #0
 801064c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010652:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801066c:	f107 0308 	add.w	r3, r7, #8
 8010670:	4619      	mov	r1, r3
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7ff feb8 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010678:	4a0b      	ldr	r2, [pc, #44]	; (80106a8 <SDMMC_CmdStopTransfer+0x74>)
 801067a:	210c      	movs	r1, #12
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 f9a5 	bl	80109cc <SDMMC_GetCmdResp1>
 8010682:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010696:	d101      	bne.n	801069c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010698:	2300      	movs	r3, #0
 801069a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801069c:	69fb      	ldr	r3, [r7, #28]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3720      	adds	r7, #32
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	05f5e100 	.word	0x05f5e100

080106ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b088      	sub	sp, #32
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80106ba:	2307      	movs	r3, #7
 80106bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106c4:	2300      	movs	r3, #0
 80106c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106ce:	f107 0308 	add.w	r3, r7, #8
 80106d2:	4619      	mov	r1, r3
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7ff fe87 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80106da:	f241 3288 	movw	r2, #5000	; 0x1388
 80106de:	2107      	movs	r1, #7
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 f973 	bl	80109cc <SDMMC_GetCmdResp1>
 80106e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106e8:	69fb      	ldr	r3, [r7, #28]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3720      	adds	r7, #32
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b088      	sub	sp, #32
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80106fa:	2300      	movs	r3, #0
 80106fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80106fe:	2300      	movs	r3, #0
 8010700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010702:	2300      	movs	r3, #0
 8010704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010706:	2300      	movs	r3, #0
 8010708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801070e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010710:	f107 0308 	add.w	r3, r7, #8
 8010714:	4619      	mov	r1, r3
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7ff fe66 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f000 fb97 	bl	8010e50 <SDMMC_GetCmdError>
 8010722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010724:	69fb      	ldr	r3, [r7, #28]
}
 8010726:	4618      	mov	r0, r3
 8010728:	3720      	adds	r7, #32
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}

0801072e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801072e:	b580      	push	{r7, lr}
 8010730:	b088      	sub	sp, #32
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010736:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801073a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801073c:	2308      	movs	r3, #8
 801073e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010746:	2300      	movs	r3, #0
 8010748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801074e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010750:	f107 0308 	add.w	r3, r7, #8
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7ff fe46 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 fb29 	bl	8010db4 <SDMMC_GetCmdResp7>
 8010762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010764:	69fb      	ldr	r3, [r7, #28]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3720      	adds	r7, #32
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b088      	sub	sp, #32
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801077c:	2337      	movs	r3, #55	; 0x37
 801077e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010786:	2300      	movs	r3, #0
 8010788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801078e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010790:	f107 0308 	add.w	r3, r7, #8
 8010794:	4619      	mov	r1, r3
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff fe26 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801079c:	f241 3288 	movw	r2, #5000	; 0x1388
 80107a0:	2137      	movs	r1, #55	; 0x37
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 f912 	bl	80109cc <SDMMC_GetCmdResp1>
 80107a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107aa:	69fb      	ldr	r3, [r7, #28]
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3720      	adds	r7, #32
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b088      	sub	sp, #32
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80107c2:	2329      	movs	r3, #41	; 0x29
 80107c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107cc:	2300      	movs	r3, #0
 80107ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107d6:	f107 0308 	add.w	r3, r7, #8
 80107da:	4619      	mov	r1, r3
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff fe03 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fa2e 	bl	8010c44 <SDMMC_GetCmdResp3>
 80107e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107ea:	69fb      	ldr	r3, [r7, #28]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3720      	adds	r7, #32
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b088      	sub	sp, #32
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010802:	2306      	movs	r3, #6
 8010804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010806:	f44f 7380 	mov.w	r3, #256	; 0x100
 801080a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801080c:	2300      	movs	r3, #0
 801080e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010816:	f107 0308 	add.w	r3, r7, #8
 801081a:	4619      	mov	r1, r3
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7ff fde3 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010822:	f241 3288 	movw	r2, #5000	; 0x1388
 8010826:	2106      	movs	r1, #6
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 f8cf 	bl	80109cc <SDMMC_GetCmdResp1>
 801082e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010830:	69fb      	ldr	r3, [r7, #28]
}
 8010832:	4618      	mov	r0, r3
 8010834:	3720      	adds	r7, #32
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b088      	sub	sp, #32
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010842:	2300      	movs	r3, #0
 8010844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010846:	2333      	movs	r3, #51	; 0x33
 8010848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801084a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801084e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010850:	2300      	movs	r3, #0
 8010852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010858:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801085a:	f107 0308 	add.w	r3, r7, #8
 801085e:	4619      	mov	r1, r3
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff fdc1 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010866:	f241 3288 	movw	r2, #5000	; 0x1388
 801086a:	2133      	movs	r1, #51	; 0x33
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 f8ad 	bl	80109cc <SDMMC_GetCmdResp1>
 8010872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010874:	69fb      	ldr	r3, [r7, #28]
}
 8010876:	4618      	mov	r0, r3
 8010878:	3720      	adds	r7, #32
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}

0801087e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801087e:	b580      	push	{r7, lr}
 8010880:	b088      	sub	sp, #32
 8010882:	af00      	add	r7, sp, #0
 8010884:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010886:	2300      	movs	r3, #0
 8010888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801088a:	2302      	movs	r3, #2
 801088c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801088e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010894:	2300      	movs	r3, #0
 8010896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801089c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801089e:	f107 0308 	add.w	r3, r7, #8
 80108a2:	4619      	mov	r1, r3
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7ff fd9f 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 f980 	bl	8010bb0 <SDMMC_GetCmdResp2>
 80108b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108b2:	69fb      	ldr	r3, [r7, #28]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3720      	adds	r7, #32
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b088      	sub	sp, #32
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80108ca:	2309      	movs	r3, #9
 80108cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80108ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80108d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108d4:	2300      	movs	r3, #0
 80108d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108de:	f107 0308 	add.w	r3, r7, #8
 80108e2:	4619      	mov	r1, r3
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff fd7f 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f960 	bl	8010bb0 <SDMMC_GetCmdResp2>
 80108f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f2:	69fb      	ldr	r3, [r7, #28]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3720      	adds	r7, #32
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010906:	2300      	movs	r3, #0
 8010908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801090a:	2303      	movs	r3, #3
 801090c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801090e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010914:	2300      	movs	r3, #0
 8010916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801091c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801091e:	f107 0308 	add.w	r3, r7, #8
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7ff fd5f 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801092a:	683a      	ldr	r2, [r7, #0]
 801092c:	2103      	movs	r1, #3
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f9c8 	bl	8010cc4 <SDMMC_GetCmdResp6>
 8010934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010936:	69fb      	ldr	r3, [r7, #28]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3720      	adds	r7, #32
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b088      	sub	sp, #32
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801094e:	230d      	movs	r3, #13
 8010950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010958:	2300      	movs	r3, #0
 801095a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010960:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010962:	f107 0308 	add.w	r3, r7, #8
 8010966:	4619      	mov	r1, r3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff fd3d 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801096e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010972:	210d      	movs	r1, #13
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f000 f829 	bl	80109cc <SDMMC_GetCmdResp1>
 801097a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801097c:	69fb      	ldr	r3, [r7, #28]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3720      	adds	r7, #32
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b088      	sub	sp, #32
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801098e:	2300      	movs	r3, #0
 8010990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010992:	230d      	movs	r3, #13
 8010994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010996:	f44f 7380 	mov.w	r3, #256	; 0x100
 801099a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801099c:	2300      	movs	r3, #0
 801099e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109a6:	f107 0308 	add.w	r3, r7, #8
 80109aa:	4619      	mov	r1, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7ff fd1b 	bl	80103e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80109b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80109b6:	210d      	movs	r1, #13
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f807 	bl	80109cc <SDMMC_GetCmdResp1>
 80109be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c0:	69fb      	ldr	r3, [r7, #28]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3720      	adds	r7, #32
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
	...

080109cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	460b      	mov	r3, r1
 80109d6:	607a      	str	r2, [r7, #4]
 80109d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80109da:	4b70      	ldr	r3, [pc, #448]	; (8010b9c <SDMMC_GetCmdResp1+0x1d0>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4a70      	ldr	r2, [pc, #448]	; (8010ba0 <SDMMC_GetCmdResp1+0x1d4>)
 80109e0:	fba2 2303 	umull	r2, r3, r2, r3
 80109e4:	0a5a      	lsrs	r2, r3, #9
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	fb02 f303 	mul.w	r3, r2, r3
 80109ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	61fa      	str	r2, [r7, #28]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d102      	bne.n	80109fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109fc:	e0c9      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a02:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010a04:	69ba      	ldr	r2, [r7, #24]
 8010a06:	4b67      	ldr	r3, [pc, #412]	; (8010ba4 <SDMMC_GetCmdResp1+0x1d8>)
 8010a08:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d0ef      	beq.n	80109ee <SDMMC_GetCmdResp1+0x22>
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1ea      	bne.n	80109ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a1c:	f003 0304 	and.w	r3, r3, #4
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d004      	beq.n	8010a2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2204      	movs	r2, #4
 8010a28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a2a:	2304      	movs	r3, #4
 8010a2c:	e0b1      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a32:	f003 0301 	and.w	r3, r3, #1
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d004      	beq.n	8010a44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a40:	2301      	movs	r3, #1
 8010a42:	e0a6      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	4a58      	ldr	r2, [pc, #352]	; (8010ba8 <SDMMC_GetCmdResp1+0x1dc>)
 8010a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f7ff fcf6 	bl	801043c <SDMMC_GetCommandResponse>
 8010a50:	4603      	mov	r3, r0
 8010a52:	461a      	mov	r2, r3
 8010a54:	7afb      	ldrb	r3, [r7, #11]
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d001      	beq.n	8010a5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e099      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010a5e:	2100      	movs	r1, #0
 8010a60:	68f8      	ldr	r0, [r7, #12]
 8010a62:	f7ff fcf8 	bl	8010456 <SDMMC_GetResponse>
 8010a66:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010a68:	697a      	ldr	r2, [r7, #20]
 8010a6a:	4b50      	ldr	r3, [pc, #320]	; (8010bac <SDMMC_GetCmdResp1+0x1e0>)
 8010a6c:	4013      	ands	r3, r2
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d101      	bne.n	8010a76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010a72:	2300      	movs	r3, #0
 8010a74:	e08d      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	da02      	bge.n	8010a82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010a80:	e087      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d001      	beq.n	8010a90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010a8c:	2340      	movs	r3, #64	; 0x40
 8010a8e:	e080      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d001      	beq.n	8010a9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010a9a:	2380      	movs	r3, #128	; 0x80
 8010a9c:	e079      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d002      	beq.n	8010aae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010aac:	e071      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d002      	beq.n	8010abe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010abc:	e069      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d002      	beq.n	8010ace <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010acc:	e061      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010ad8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010adc:	e059      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010aec:	e051      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d002      	beq.n	8010afe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010afc:	e049      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d002      	beq.n	8010b0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010b08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b0c:	e041      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b1c:	e039      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010b2c:	e031      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010b3c:	e029      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010b48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010b4c:	e021      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d002      	beq.n	8010b5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010b58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010b5c:	e019      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010b68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010b6c:	e011      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d002      	beq.n	8010b7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010b7c:	e009      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	f003 0308 	and.w	r3, r3, #8
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010b88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010b8c:	e001      	b.n	8010b92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3720      	adds	r7, #32
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20000000 	.word	0x20000000
 8010ba0:	10624dd3 	.word	0x10624dd3
 8010ba4:	00200045 	.word	0x00200045
 8010ba8:	002000c5 	.word	0x002000c5
 8010bac:	fdffe008 	.word	0xfdffe008

08010bb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b085      	sub	sp, #20
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bb8:	4b1f      	ldr	r3, [pc, #124]	; (8010c38 <SDMMC_GetCmdResp2+0x88>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a1f      	ldr	r2, [pc, #124]	; (8010c3c <SDMMC_GetCmdResp2+0x8c>)
 8010bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010bc2:	0a5b      	lsrs	r3, r3, #9
 8010bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bc8:	fb02 f303 	mul.w	r3, r2, r3
 8010bcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	1e5a      	subs	r2, r3, #1
 8010bd2:	60fa      	str	r2, [r7, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d102      	bne.n	8010bde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bdc:	e026      	b.n	8010c2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d0ef      	beq.n	8010bce <SDMMC_GetCmdResp2+0x1e>
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d1ea      	bne.n	8010bce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfc:	f003 0304 	and.w	r3, r3, #4
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d004      	beq.n	8010c0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2204      	movs	r2, #4
 8010c08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c0a:	2304      	movs	r3, #4
 8010c0c:	e00e      	b.n	8010c2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c12:	f003 0301 	and.w	r3, r3, #1
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d004      	beq.n	8010c24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c20:	2301      	movs	r3, #1
 8010c22:	e003      	b.n	8010c2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	4a06      	ldr	r2, [pc, #24]	; (8010c40 <SDMMC_GetCmdResp2+0x90>)
 8010c28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c2a:	2300      	movs	r3, #0
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3714      	adds	r7, #20
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr
 8010c38:	20000000 	.word	0x20000000
 8010c3c:	10624dd3 	.word	0x10624dd3
 8010c40:	002000c5 	.word	0x002000c5

08010c44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c4c:	4b1a      	ldr	r3, [pc, #104]	; (8010cb8 <SDMMC_GetCmdResp3+0x74>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a1a      	ldr	r2, [pc, #104]	; (8010cbc <SDMMC_GetCmdResp3+0x78>)
 8010c52:	fba2 2303 	umull	r2, r3, r2, r3
 8010c56:	0a5b      	lsrs	r3, r3, #9
 8010c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c5c:	fb02 f303 	mul.w	r3, r2, r3
 8010c60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	1e5a      	subs	r2, r3, #1
 8010c66:	60fa      	str	r2, [r7, #12]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d102      	bne.n	8010c72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c70:	e01b      	b.n	8010caa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d0ef      	beq.n	8010c62 <SDMMC_GetCmdResp3+0x1e>
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1ea      	bne.n	8010c62 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c90:	f003 0304 	and.w	r3, r3, #4
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d004      	beq.n	8010ca2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2204      	movs	r2, #4
 8010c9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c9e:	2304      	movs	r3, #4
 8010ca0:	e003      	b.n	8010caa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a06      	ldr	r2, [pc, #24]	; (8010cc0 <SDMMC_GetCmdResp3+0x7c>)
 8010ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3714      	adds	r7, #20
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	20000000 	.word	0x20000000
 8010cbc:	10624dd3 	.word	0x10624dd3
 8010cc0:	002000c5 	.word	0x002000c5

08010cc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b088      	sub	sp, #32
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	607a      	str	r2, [r7, #4]
 8010cd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010cd2:	4b35      	ldr	r3, [pc, #212]	; (8010da8 <SDMMC_GetCmdResp6+0xe4>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a35      	ldr	r2, [pc, #212]	; (8010dac <SDMMC_GetCmdResp6+0xe8>)
 8010cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8010cdc:	0a5b      	lsrs	r3, r3, #9
 8010cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ce2:	fb02 f303 	mul.w	r3, r2, r3
 8010ce6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	1e5a      	subs	r2, r3, #1
 8010cec:	61fa      	str	r2, [r7, #28]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d102      	bne.n	8010cf8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cf6:	e052      	b.n	8010d9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cfc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d0ef      	beq.n	8010ce8 <SDMMC_GetCmdResp6+0x24>
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1ea      	bne.n	8010ce8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d16:	f003 0304 	and.w	r3, r3, #4
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d004      	beq.n	8010d28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2204      	movs	r2, #4
 8010d22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d24:	2304      	movs	r3, #4
 8010d26:	e03a      	b.n	8010d9e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d2c:	f003 0301 	and.w	r3, r3, #1
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d004      	beq.n	8010d3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2201      	movs	r2, #1
 8010d38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e02f      	b.n	8010d9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f7ff fb7c 	bl	801043c <SDMMC_GetCommandResponse>
 8010d44:	4603      	mov	r3, r0
 8010d46:	461a      	mov	r2, r3
 8010d48:	7afb      	ldrb	r3, [r7, #11]
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d001      	beq.n	8010d52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d4e:	2301      	movs	r3, #1
 8010d50:	e025      	b.n	8010d9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	4a16      	ldr	r2, [pc, #88]	; (8010db0 <SDMMC_GetCmdResp6+0xec>)
 8010d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d58:	2100      	movs	r1, #0
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7ff fb7b 	bl	8010456 <SDMMC_GetResponse>
 8010d60:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d106      	bne.n	8010d7a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	0c1b      	lsrs	r3, r3, #16
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010d76:	2300      	movs	r3, #0
 8010d78:	e011      	b.n	8010d9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d88:	e009      	b.n	8010d9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d002      	beq.n	8010d9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d98:	e001      	b.n	8010d9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3720      	adds	r7, #32
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	20000000 	.word	0x20000000
 8010dac:	10624dd3 	.word	0x10624dd3
 8010db0:	002000c5 	.word	0x002000c5

08010db4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010dbc:	4b22      	ldr	r3, [pc, #136]	; (8010e48 <SDMMC_GetCmdResp7+0x94>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a22      	ldr	r2, [pc, #136]	; (8010e4c <SDMMC_GetCmdResp7+0x98>)
 8010dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010dc6:	0a5b      	lsrs	r3, r3, #9
 8010dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dcc:	fb02 f303 	mul.w	r3, r2, r3
 8010dd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	1e5a      	subs	r2, r3, #1
 8010dd6:	60fa      	str	r2, [r7, #12]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d102      	bne.n	8010de2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010de0:	e02c      	b.n	8010e3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010de6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d0ef      	beq.n	8010dd2 <SDMMC_GetCmdResp7+0x1e>
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1ea      	bne.n	8010dd2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e00:	f003 0304 	and.w	r3, r3, #4
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d004      	beq.n	8010e12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2204      	movs	r2, #4
 8010e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e0e:	2304      	movs	r3, #4
 8010e10:	e014      	b.n	8010e3c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e16:	f003 0301 	and.w	r3, r3, #1
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d004      	beq.n	8010e28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2201      	movs	r2, #1
 8010e22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e24:	2301      	movs	r3, #1
 8010e26:	e009      	b.n	8010e3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d002      	beq.n	8010e3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2240      	movs	r2, #64	; 0x40
 8010e38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e3a:	2300      	movs	r3, #0

}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3714      	adds	r7, #20
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	20000000 	.word	0x20000000
 8010e4c:	10624dd3 	.word	0x10624dd3

08010e50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e58:	4b11      	ldr	r3, [pc, #68]	; (8010ea0 <SDMMC_GetCmdError+0x50>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4a11      	ldr	r2, [pc, #68]	; (8010ea4 <SDMMC_GetCmdError+0x54>)
 8010e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e62:	0a5b      	lsrs	r3, r3, #9
 8010e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e68:	fb02 f303 	mul.w	r3, r2, r3
 8010e6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	1e5a      	subs	r2, r3, #1
 8010e72:	60fa      	str	r2, [r7, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d102      	bne.n	8010e7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e7c:	e009      	b.n	8010e92 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d0f1      	beq.n	8010e6e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4a06      	ldr	r2, [pc, #24]	; (8010ea8 <SDMMC_GetCmdError+0x58>)
 8010e8e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010e90:	2300      	movs	r3, #0
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3714      	adds	r7, #20
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	20000000 	.word	0x20000000
 8010ea4:	10624dd3 	.word	0x10624dd3
 8010ea8:	002000c5 	.word	0x002000c5

08010eac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010eb0:	4904      	ldr	r1, [pc, #16]	; (8010ec4 <MX_FATFS_Init+0x18>)
 8010eb2:	4805      	ldr	r0, [pc, #20]	; (8010ec8 <MX_FATFS_Init+0x1c>)
 8010eb4:	f003 f8ea 	bl	801408c <FATFS_LinkDriver>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	461a      	mov	r2, r3
 8010ebc:	4b03      	ldr	r3, [pc, #12]	; (8010ecc <MX_FATFS_Init+0x20>)
 8010ebe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ec0:	bf00      	nop
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	20000a44 	.word	0x20000a44
 8010ec8:	08024850 	.word	0x08024850
 8010ecc:	20000a40 	.word	0x20000a40

08010ed0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010ed4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010eea:	f000 f885 	bl	8010ff8 <BSP_SD_IsDetected>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	d001      	beq.n	8010ef8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010ef4:	2302      	movs	r3, #2
 8010ef6:	e012      	b.n	8010f1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010ef8:	480b      	ldr	r0, [pc, #44]	; (8010f28 <BSP_SD_Init+0x48>)
 8010efa:	f7fa fb79 	bl	800b5f0 <HAL_SD_Init>
 8010efe:	4603      	mov	r3, r0
 8010f00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010f02:	79fb      	ldrb	r3, [r7, #7]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d109      	bne.n	8010f1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010f0c:	4806      	ldr	r0, [pc, #24]	; (8010f28 <BSP_SD_Init+0x48>)
 8010f0e:	f7fb fa29 	bl	800c364 <HAL_SD_ConfigWideBusOperation>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d001      	beq.n	8010f1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010f1c:	79fb      	ldrb	r3, [r7, #7]
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3708      	adds	r7, #8
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	200006a0 	.word	0x200006a0

08010f2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b086      	sub	sp, #24
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	68f9      	ldr	r1, [r7, #12]
 8010f42:	4806      	ldr	r0, [pc, #24]	; (8010f5c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010f44:	f7fa fc6e 	bl	800b824 <HAL_SD_ReadBlocks_DMA>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d001      	beq.n	8010f52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	200006a0 	.word	0x200006a0

08010f60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	68ba      	ldr	r2, [r7, #8]
 8010f74:	68f9      	ldr	r1, [r7, #12]
 8010f76:	4806      	ldr	r0, [pc, #24]	; (8010f90 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010f78:	f7fa fcfc 	bl	800b974 <HAL_SD_WriteBlocks_DMA>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d001      	beq.n	8010f86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010f82:	2301      	movs	r3, #1
 8010f84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3718      	adds	r7, #24
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	200006a0 	.word	0x200006a0

08010f94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010f98:	4805      	ldr	r0, [pc, #20]	; (8010fb0 <BSP_SD_GetCardState+0x1c>)
 8010f9a:	f7fb faf5 	bl	800c588 <HAL_SD_GetCardState>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b04      	cmp	r3, #4
 8010fa2:	bf14      	ite	ne
 8010fa4:	2301      	movne	r3, #1
 8010fa6:	2300      	moveq	r3, #0
 8010fa8:	b2db      	uxtb	r3, r3
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	200006a0 	.word	0x200006a0

08010fb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	4803      	ldr	r0, [pc, #12]	; (8010fcc <BSP_SD_GetCardInfo+0x18>)
 8010fc0:	f7fb f9a4 	bl	800c30c <HAL_SD_GetCardInfo>
}
 8010fc4:	bf00      	nop
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	200006a0 	.word	0x200006a0

08010fd0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010fd8:	f000 f9ac 	bl	8011334 <BSP_SD_WriteCpltCallback>
}
 8010fdc:	bf00      	nop
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010fec:	f000 f9b4 	bl	8011358 <BSP_SD_ReadCpltCallback>
}
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010ffe:	2301      	movs	r3, #1
 8011000:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011002:	f000 f80b 	bl	801101c <BSP_PlatformIsDetected>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d101      	bne.n	8011010 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801100c:	2300      	movs	r3, #0
 801100e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011010:	79fb      	ldrb	r3, [r7, #7]
 8011012:	b2db      	uxtb	r3, r3
}
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011022:	2301      	movs	r3, #1
 8011024:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801102a:	4806      	ldr	r0, [pc, #24]	; (8011044 <BSP_PlatformIsDetected+0x28>)
 801102c:	f7f6 fc5c 	bl	80078e8 <HAL_GPIO_ReadPin>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d001      	beq.n	801103a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011036:	2300      	movs	r3, #0
 8011038:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801103a:	79fb      	ldrb	r3, [r7, #7]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	58020800 	.word	0x58020800

08011048 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8011050:	f003 f922 	bl	8014298 <osKernelGetTickCount>
 8011054:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8011056:	e006      	b.n	8011066 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011058:	f7ff ff9c 	bl	8010f94 <BSP_SD_GetCardState>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d101      	bne.n	8011066 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011062:	2300      	movs	r3, #0
 8011064:	e009      	b.n	801107a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8011066:	f003 f917 	bl	8014298 <osKernelGetTickCount>
 801106a:	4602      	mov	r2, r0
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	429a      	cmp	r2, r3
 8011074:	d8f0      	bhi.n	8011058 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011076:	f04f 33ff 	mov.w	r3, #4294967295
}
 801107a:	4618      	mov	r0, r3
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
	...

08011084 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	4603      	mov	r3, r0
 801108c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801108e:	4b0b      	ldr	r3, [pc, #44]	; (80110bc <SD_CheckStatus+0x38>)
 8011090:	2201      	movs	r2, #1
 8011092:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011094:	f7ff ff7e 	bl	8010f94 <BSP_SD_GetCardState>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d107      	bne.n	80110ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801109e:	4b07      	ldr	r3, [pc, #28]	; (80110bc <SD_CheckStatus+0x38>)
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f023 0301 	bic.w	r3, r3, #1
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	4b04      	ldr	r3, [pc, #16]	; (80110bc <SD_CheckStatus+0x38>)
 80110ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80110ae:	4b03      	ldr	r3, [pc, #12]	; (80110bc <SD_CheckStatus+0x38>)
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	b2db      	uxtb	r3, r3
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	2000000d 	.word	0x2000000d

080110c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	4603      	mov	r3, r0
 80110c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80110ca:	4b1c      	ldr	r3, [pc, #112]	; (801113c <SD_initialize+0x7c>)
 80110cc:	2201      	movs	r2, #1
 80110ce:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80110d0:	f003 f89a 	bl	8014208 <osKernelGetState>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b02      	cmp	r3, #2
 80110d8:	d129      	bne.n	801112e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80110da:	f7ff ff01 	bl	8010ee0 <BSP_SD_Init>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d107      	bne.n	80110f4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80110e4:	79fb      	ldrb	r3, [r7, #7]
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7ff ffcc 	bl	8011084 <SD_CheckStatus>
 80110ec:	4603      	mov	r3, r0
 80110ee:	461a      	mov	r2, r3
 80110f0:	4b12      	ldr	r3, [pc, #72]	; (801113c <SD_initialize+0x7c>)
 80110f2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80110f4:	4b11      	ldr	r3, [pc, #68]	; (801113c <SD_initialize+0x7c>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d017      	beq.n	801112e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80110fe:	4b10      	ldr	r3, [pc, #64]	; (8011140 <SD_initialize+0x80>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d107      	bne.n	8011116 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8011106:	2200      	movs	r2, #0
 8011108:	2102      	movs	r1, #2
 801110a:	200a      	movs	r0, #10
 801110c:	f003 faca 	bl	80146a4 <osMessageQueueNew>
 8011110:	4603      	mov	r3, r0
 8011112:	4a0b      	ldr	r2, [pc, #44]	; (8011140 <SD_initialize+0x80>)
 8011114:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8011116:	4b0a      	ldr	r3, [pc, #40]	; (8011140 <SD_initialize+0x80>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d107      	bne.n	801112e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801111e:	4b07      	ldr	r3, [pc, #28]	; (801113c <SD_initialize+0x7c>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	f043 0301 	orr.w	r3, r3, #1
 8011128:	b2da      	uxtb	r2, r3
 801112a:	4b04      	ldr	r3, [pc, #16]	; (801113c <SD_initialize+0x7c>)
 801112c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801112e:	4b03      	ldr	r3, [pc, #12]	; (801113c <SD_initialize+0x7c>)
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	b2db      	uxtb	r3, r3
}
 8011134:	4618      	mov	r0, r3
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	2000000d 	.word	0x2000000d
 8011140:	20000eac 	.word	0x20000eac

08011144 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	4603      	mov	r3, r0
 801114c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801114e:	79fb      	ldrb	r3, [r7, #7]
 8011150:	4618      	mov	r0, r3
 8011152:	f7ff ff97 	bl	8011084 <SD_CheckStatus>
 8011156:	4603      	mov	r3, r0
}
 8011158:	4618      	mov	r0, r3
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b088      	sub	sp, #32
 8011164:	af00      	add	r7, sp, #0
 8011166:	60b9      	str	r1, [r7, #8]
 8011168:	607a      	str	r2, [r7, #4]
 801116a:	603b      	str	r3, [r7, #0]
 801116c:	4603      	mov	r3, r0
 801116e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011170:	2301      	movs	r3, #1
 8011172:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011174:	f247 5030 	movw	r0, #30000	; 0x7530
 8011178:	f7ff ff66 	bl	8011048 <SD_CheckStatusWithTimeout>
 801117c:	4603      	mov	r3, r0
 801117e:	2b00      	cmp	r3, #0
 8011180:	da01      	bge.n	8011186 <SD_read+0x26>
  {
    return res;
 8011182:	7ffb      	ldrb	r3, [r7, #31]
 8011184:	e02f      	b.n	80111e6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	6879      	ldr	r1, [r7, #4]
 801118a:	68b8      	ldr	r0, [r7, #8]
 801118c:	f7ff fece 	bl	8010f2c <BSP_SD_ReadBlocks_DMA>
 8011190:	4603      	mov	r3, r0
 8011192:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8011194:	7fbb      	ldrb	r3, [r7, #30]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d124      	bne.n	80111e4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801119a:	4b15      	ldr	r3, [pc, #84]	; (80111f0 <SD_read+0x90>)
 801119c:	6818      	ldr	r0, [r3, #0]
 801119e:	f107 0112 	add.w	r1, r7, #18
 80111a2:	f247 5330 	movw	r3, #30000	; 0x7530
 80111a6:	2200      	movs	r2, #0
 80111a8:	f003 fb50 	bl	801484c <osMessageQueueGet>
 80111ac:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d117      	bne.n	80111e4 <SD_read+0x84>
 80111b4:	8a7b      	ldrh	r3, [r7, #18]
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d114      	bne.n	80111e4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80111ba:	f003 f86d 	bl	8014298 <osKernelGetTickCount>
 80111be:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80111c0:	e007      	b.n	80111d2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80111c2:	f7ff fee7 	bl	8010f94 <BSP_SD_GetCardState>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d102      	bne.n	80111d2 <SD_read+0x72>
              {
                res = RES_OK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80111d0:	e008      	b.n	80111e4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80111d2:	f003 f861 	bl	8014298 <osKernelGetTickCount>
 80111d6:	4602      	mov	r2, r0
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d9ee      	bls.n	80111c2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80111e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3720      	adds	r7, #32
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	20000eac 	.word	0x20000eac

080111f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b088      	sub	sp, #32
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60b9      	str	r1, [r7, #8]
 80111fc:	607a      	str	r2, [r7, #4]
 80111fe:	603b      	str	r3, [r7, #0]
 8011200:	4603      	mov	r3, r0
 8011202:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011204:	2301      	movs	r3, #1
 8011206:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011208:	f247 5030 	movw	r0, #30000	; 0x7530
 801120c:	f7ff ff1c 	bl	8011048 <SD_CheckStatusWithTimeout>
 8011210:	4603      	mov	r3, r0
 8011212:	2b00      	cmp	r3, #0
 8011214:	da01      	bge.n	801121a <SD_write+0x26>
  {
    return res;
 8011216:	7ffb      	ldrb	r3, [r7, #31]
 8011218:	e02d      	b.n	8011276 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801121a:	683a      	ldr	r2, [r7, #0]
 801121c:	6879      	ldr	r1, [r7, #4]
 801121e:	68b8      	ldr	r0, [r7, #8]
 8011220:	f7ff fe9e 	bl	8010f60 <BSP_SD_WriteBlocks_DMA>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d124      	bne.n	8011274 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801122a:	4b15      	ldr	r3, [pc, #84]	; (8011280 <SD_write+0x8c>)
 801122c:	6818      	ldr	r0, [r3, #0]
 801122e:	f107 0112 	add.w	r1, r7, #18
 8011232:	f247 5330 	movw	r3, #30000	; 0x7530
 8011236:	2200      	movs	r2, #0
 8011238:	f003 fb08 	bl	801484c <osMessageQueueGet>
 801123c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d117      	bne.n	8011274 <SD_write+0x80>
 8011244:	8a7b      	ldrh	r3, [r7, #18]
 8011246:	2b02      	cmp	r3, #2
 8011248:	d114      	bne.n	8011274 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801124a:	f003 f825 	bl	8014298 <osKernelGetTickCount>
 801124e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8011250:	e007      	b.n	8011262 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011252:	f7ff fe9f 	bl	8010f94 <BSP_SD_GetCardState>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d102      	bne.n	8011262 <SD_write+0x6e>
          {
            res = RES_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	77fb      	strb	r3, [r7, #31]
            break;
 8011260:	e008      	b.n	8011274 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8011262:	f003 f819 	bl	8014298 <osKernelGetTickCount>
 8011266:	4602      	mov	r2, r0
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	1ad3      	subs	r3, r2, r3
 801126c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011270:	4293      	cmp	r3, r2
 8011272:	d9ee      	bls.n	8011252 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8011274:	7ffb      	ldrb	r3, [r7, #31]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3720      	adds	r7, #32
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	20000eac 	.word	0x20000eac

08011284 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b08c      	sub	sp, #48	; 0x30
 8011288:	af00      	add	r7, sp, #0
 801128a:	4603      	mov	r3, r0
 801128c:	603a      	str	r2, [r7, #0]
 801128e:	71fb      	strb	r3, [r7, #7]
 8011290:	460b      	mov	r3, r1
 8011292:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011294:	2301      	movs	r3, #1
 8011296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801129a:	4b25      	ldr	r3, [pc, #148]	; (8011330 <SD_ioctl+0xac>)
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	f003 0301 	and.w	r3, r3, #1
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d001      	beq.n	80112ac <SD_ioctl+0x28>
 80112a8:	2303      	movs	r3, #3
 80112aa:	e03c      	b.n	8011326 <SD_ioctl+0xa2>

  switch (cmd)
 80112ac:	79bb      	ldrb	r3, [r7, #6]
 80112ae:	2b03      	cmp	r3, #3
 80112b0:	d834      	bhi.n	801131c <SD_ioctl+0x98>
 80112b2:	a201      	add	r2, pc, #4	; (adr r2, 80112b8 <SD_ioctl+0x34>)
 80112b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b8:	080112c9 	.word	0x080112c9
 80112bc:	080112d1 	.word	0x080112d1
 80112c0:	080112e9 	.word	0x080112e9
 80112c4:	08011303 	.word	0x08011303
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112ce:	e028      	b.n	8011322 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80112d0:	f107 0308 	add.w	r3, r7, #8
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7ff fe6d 	bl	8010fb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80112da:	6a3a      	ldr	r2, [r7, #32]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112e6:	e01c      	b.n	8011322 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112e8:	f107 0308 	add.w	r3, r7, #8
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7ff fe61 	bl	8010fb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80112f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80112fa:	2300      	movs	r3, #0
 80112fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011300:	e00f      	b.n	8011322 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011302:	f107 0308 	add.w	r3, r7, #8
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff fe54 	bl	8010fb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	0a5a      	lsrs	r2, r3, #9
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011314:	2300      	movs	r3, #0
 8011316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801131a:	e002      	b.n	8011322 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801131c:	2304      	movs	r3, #4
 801131e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011326:	4618      	mov	r0, r3
 8011328:	3730      	adds	r7, #48	; 0x30
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	2000000d 	.word	0x2000000d

08011334 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801133a:	2302      	movs	r3, #2
 801133c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801133e:	4b05      	ldr	r3, [pc, #20]	; (8011354 <BSP_SD_WriteCpltCallback+0x20>)
 8011340:	6818      	ldr	r0, [r3, #0]
 8011342:	1db9      	adds	r1, r7, #6
 8011344:	2300      	movs	r3, #0
 8011346:	2200      	movs	r2, #0
 8011348:	f003 fa20 	bl	801478c <osMessageQueuePut>
#endif
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	20000eac 	.word	0x20000eac

08011358 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801135e:	2301      	movs	r3, #1
 8011360:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8011362:	4b05      	ldr	r3, [pc, #20]	; (8011378 <BSP_SD_ReadCpltCallback+0x20>)
 8011364:	6818      	ldr	r0, [r3, #0]
 8011366:	1db9      	adds	r1, r7, #6
 8011368:	2300      	movs	r3, #0
 801136a:	2200      	movs	r2, #0
 801136c:	f003 fa0e 	bl	801478c <osMessageQueuePut>
#endif
}
 8011370:	bf00      	nop
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	20000eac 	.word	0x20000eac

0801137c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	4603      	mov	r3, r0
 8011384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011386:	79fb      	ldrb	r3, [r7, #7]
 8011388:	4a08      	ldr	r2, [pc, #32]	; (80113ac <disk_status+0x30>)
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	4413      	add	r3, r2
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	79fa      	ldrb	r2, [r7, #7]
 8011394:	4905      	ldr	r1, [pc, #20]	; (80113ac <disk_status+0x30>)
 8011396:	440a      	add	r2, r1
 8011398:	7a12      	ldrb	r2, [r2, #8]
 801139a:	4610      	mov	r0, r2
 801139c:	4798      	blx	r3
 801139e:	4603      	mov	r3, r0
 80113a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80113a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	20000ed8 	.word	0x20000ed8

080113b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	4603      	mov	r3, r0
 80113b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80113be:	79fb      	ldrb	r3, [r7, #7]
 80113c0:	4a0d      	ldr	r2, [pc, #52]	; (80113f8 <disk_initialize+0x48>)
 80113c2:	5cd3      	ldrb	r3, [r2, r3]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d111      	bne.n	80113ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80113c8:	79fb      	ldrb	r3, [r7, #7]
 80113ca:	4a0b      	ldr	r2, [pc, #44]	; (80113f8 <disk_initialize+0x48>)
 80113cc:	2101      	movs	r1, #1
 80113ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80113d0:	79fb      	ldrb	r3, [r7, #7]
 80113d2:	4a09      	ldr	r2, [pc, #36]	; (80113f8 <disk_initialize+0x48>)
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	4413      	add	r3, r2
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	79fa      	ldrb	r2, [r7, #7]
 80113de:	4906      	ldr	r1, [pc, #24]	; (80113f8 <disk_initialize+0x48>)
 80113e0:	440a      	add	r2, r1
 80113e2:	7a12      	ldrb	r2, [r2, #8]
 80113e4:	4610      	mov	r0, r2
 80113e6:	4798      	blx	r3
 80113e8:	4603      	mov	r3, r0
 80113ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	20000ed8 	.word	0x20000ed8

080113fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80113fc:	b590      	push	{r4, r7, lr}
 80113fe:	b087      	sub	sp, #28
 8011400:	af00      	add	r7, sp, #0
 8011402:	60b9      	str	r1, [r7, #8]
 8011404:	607a      	str	r2, [r7, #4]
 8011406:	603b      	str	r3, [r7, #0]
 8011408:	4603      	mov	r3, r0
 801140a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801140c:	7bfb      	ldrb	r3, [r7, #15]
 801140e:	4a0a      	ldr	r2, [pc, #40]	; (8011438 <disk_read+0x3c>)
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	4413      	add	r3, r2
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	689c      	ldr	r4, [r3, #8]
 8011418:	7bfb      	ldrb	r3, [r7, #15]
 801141a:	4a07      	ldr	r2, [pc, #28]	; (8011438 <disk_read+0x3c>)
 801141c:	4413      	add	r3, r2
 801141e:	7a18      	ldrb	r0, [r3, #8]
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	68b9      	ldr	r1, [r7, #8]
 8011426:	47a0      	blx	r4
 8011428:	4603      	mov	r3, r0
 801142a:	75fb      	strb	r3, [r7, #23]
  return res;
 801142c:	7dfb      	ldrb	r3, [r7, #23]
}
 801142e:	4618      	mov	r0, r3
 8011430:	371c      	adds	r7, #28
 8011432:	46bd      	mov	sp, r7
 8011434:	bd90      	pop	{r4, r7, pc}
 8011436:	bf00      	nop
 8011438:	20000ed8 	.word	0x20000ed8

0801143c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801143c:	b590      	push	{r4, r7, lr}
 801143e:	b087      	sub	sp, #28
 8011440:	af00      	add	r7, sp, #0
 8011442:	60b9      	str	r1, [r7, #8]
 8011444:	607a      	str	r2, [r7, #4]
 8011446:	603b      	str	r3, [r7, #0]
 8011448:	4603      	mov	r3, r0
 801144a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801144c:	7bfb      	ldrb	r3, [r7, #15]
 801144e:	4a0a      	ldr	r2, [pc, #40]	; (8011478 <disk_write+0x3c>)
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	4413      	add	r3, r2
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	68dc      	ldr	r4, [r3, #12]
 8011458:	7bfb      	ldrb	r3, [r7, #15]
 801145a:	4a07      	ldr	r2, [pc, #28]	; (8011478 <disk_write+0x3c>)
 801145c:	4413      	add	r3, r2
 801145e:	7a18      	ldrb	r0, [r3, #8]
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	68b9      	ldr	r1, [r7, #8]
 8011466:	47a0      	blx	r4
 8011468:	4603      	mov	r3, r0
 801146a:	75fb      	strb	r3, [r7, #23]
  return res;
 801146c:	7dfb      	ldrb	r3, [r7, #23]
}
 801146e:	4618      	mov	r0, r3
 8011470:	371c      	adds	r7, #28
 8011472:	46bd      	mov	sp, r7
 8011474:	bd90      	pop	{r4, r7, pc}
 8011476:	bf00      	nop
 8011478:	20000ed8 	.word	0x20000ed8

0801147c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	4603      	mov	r3, r0
 8011484:	603a      	str	r2, [r7, #0]
 8011486:	71fb      	strb	r3, [r7, #7]
 8011488:	460b      	mov	r3, r1
 801148a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801148c:	79fb      	ldrb	r3, [r7, #7]
 801148e:	4a09      	ldr	r2, [pc, #36]	; (80114b4 <disk_ioctl+0x38>)
 8011490:	009b      	lsls	r3, r3, #2
 8011492:	4413      	add	r3, r2
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	79fa      	ldrb	r2, [r7, #7]
 801149a:	4906      	ldr	r1, [pc, #24]	; (80114b4 <disk_ioctl+0x38>)
 801149c:	440a      	add	r2, r1
 801149e:	7a10      	ldrb	r0, [r2, #8]
 80114a0:	79b9      	ldrb	r1, [r7, #6]
 80114a2:	683a      	ldr	r2, [r7, #0]
 80114a4:	4798      	blx	r3
 80114a6:	4603      	mov	r3, r0
 80114a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80114aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3710      	adds	r7, #16
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	20000ed8 	.word	0x20000ed8

080114b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80114b8:	b480      	push	{r7}
 80114ba:	b085      	sub	sp, #20
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	3301      	adds	r3, #1
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80114c8:	89fb      	ldrh	r3, [r7, #14]
 80114ca:	021b      	lsls	r3, r3, #8
 80114cc:	b21a      	sxth	r2, r3
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	b21b      	sxth	r3, r3
 80114d4:	4313      	orrs	r3, r2
 80114d6:	b21b      	sxth	r3, r3
 80114d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80114da:	89fb      	ldrh	r3, [r7, #14]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3714      	adds	r7, #20
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr

080114e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	3303      	adds	r3, #3
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	021b      	lsls	r3, r3, #8
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	3202      	adds	r2, #2
 8011500:	7812      	ldrb	r2, [r2, #0]
 8011502:	4313      	orrs	r3, r2
 8011504:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	021b      	lsls	r3, r3, #8
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	3201      	adds	r2, #1
 801150e:	7812      	ldrb	r2, [r2, #0]
 8011510:	4313      	orrs	r3, r2
 8011512:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	021b      	lsls	r3, r3, #8
 8011518:	687a      	ldr	r2, [r7, #4]
 801151a:	7812      	ldrb	r2, [r2, #0]
 801151c:	4313      	orrs	r3, r2
 801151e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011520:	68fb      	ldr	r3, [r7, #12]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3714      	adds	r7, #20
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr

0801152e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801152e:	b480      	push	{r7}
 8011530:	b083      	sub	sp, #12
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
 8011536:	460b      	mov	r3, r1
 8011538:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	1c5a      	adds	r2, r3, #1
 801153e:	607a      	str	r2, [r7, #4]
 8011540:	887a      	ldrh	r2, [r7, #2]
 8011542:	b2d2      	uxtb	r2, r2
 8011544:	701a      	strb	r2, [r3, #0]
 8011546:	887b      	ldrh	r3, [r7, #2]
 8011548:	0a1b      	lsrs	r3, r3, #8
 801154a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	1c5a      	adds	r2, r3, #1
 8011550:	607a      	str	r2, [r7, #4]
 8011552:	887a      	ldrh	r2, [r7, #2]
 8011554:	b2d2      	uxtb	r2, r2
 8011556:	701a      	strb	r2, [r3, #0]
}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011564:	b480      	push	{r7}
 8011566:	b083      	sub	sp, #12
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	1c5a      	adds	r2, r3, #1
 8011572:	607a      	str	r2, [r7, #4]
 8011574:	683a      	ldr	r2, [r7, #0]
 8011576:	b2d2      	uxtb	r2, r2
 8011578:	701a      	strb	r2, [r3, #0]
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	0a1b      	lsrs	r3, r3, #8
 801157e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	1c5a      	adds	r2, r3, #1
 8011584:	607a      	str	r2, [r7, #4]
 8011586:	683a      	ldr	r2, [r7, #0]
 8011588:	b2d2      	uxtb	r2, r2
 801158a:	701a      	strb	r2, [r3, #0]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	0a1b      	lsrs	r3, r3, #8
 8011590:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	1c5a      	adds	r2, r3, #1
 8011596:	607a      	str	r2, [r7, #4]
 8011598:	683a      	ldr	r2, [r7, #0]
 801159a:	b2d2      	uxtb	r2, r2
 801159c:	701a      	strb	r2, [r3, #0]
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	0a1b      	lsrs	r3, r3, #8
 80115a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	607a      	str	r2, [r7, #4]
 80115aa:	683a      	ldr	r2, [r7, #0]
 80115ac:	b2d2      	uxtb	r2, r2
 80115ae:	701a      	strb	r2, [r3, #0]
}
 80115b0:	bf00      	nop
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80115bc:	b480      	push	{r7}
 80115be:	b087      	sub	sp, #28
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d00d      	beq.n	80115f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80115d6:	693a      	ldr	r2, [r7, #16]
 80115d8:	1c53      	adds	r3, r2, #1
 80115da:	613b      	str	r3, [r7, #16]
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	1c59      	adds	r1, r3, #1
 80115e0:	6179      	str	r1, [r7, #20]
 80115e2:	7812      	ldrb	r2, [r2, #0]
 80115e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	3b01      	subs	r3, #1
 80115ea:	607b      	str	r3, [r7, #4]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d1f1      	bne.n	80115d6 <mem_cpy+0x1a>
	}
}
 80115f2:	bf00      	nop
 80115f4:	371c      	adds	r7, #28
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr

080115fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80115fe:	b480      	push	{r7}
 8011600:	b087      	sub	sp, #28
 8011602:	af00      	add	r7, sp, #0
 8011604:	60f8      	str	r0, [r7, #12]
 8011606:	60b9      	str	r1, [r7, #8]
 8011608:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	617a      	str	r2, [r7, #20]
 8011614:	68ba      	ldr	r2, [r7, #8]
 8011616:	b2d2      	uxtb	r2, r2
 8011618:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	3b01      	subs	r3, #1
 801161e:	607b      	str	r3, [r7, #4]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1f3      	bne.n	801160e <mem_set+0x10>
}
 8011626:	bf00      	nop
 8011628:	bf00      	nop
 801162a:	371c      	adds	r7, #28
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011634:	b480      	push	{r7}
 8011636:	b089      	sub	sp, #36	; 0x24
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	61fb      	str	r3, [r7, #28]
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011648:	2300      	movs	r3, #0
 801164a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	61fa      	str	r2, [r7, #28]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	4619      	mov	r1, r3
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	1c5a      	adds	r2, r3, #1
 801165a:	61ba      	str	r2, [r7, #24]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	1acb      	subs	r3, r1, r3
 8011660:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	3b01      	subs	r3, #1
 8011666:	607b      	str	r3, [r7, #4]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d002      	beq.n	8011674 <mem_cmp+0x40>
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d0eb      	beq.n	801164c <mem_cmp+0x18>

	return r;
 8011674:	697b      	ldr	r3, [r7, #20]
}
 8011676:	4618      	mov	r0, r3
 8011678:	3724      	adds	r7, #36	; 0x24
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011682:	b480      	push	{r7}
 8011684:	b083      	sub	sp, #12
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801168c:	e002      	b.n	8011694 <chk_chr+0x12>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	3301      	adds	r3, #1
 8011692:	607b      	str	r3, [r7, #4]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d005      	beq.n	80116a8 <chk_chr+0x26>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	461a      	mov	r2, r3
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d1f2      	bne.n	801168e <chk_chr+0xc>
	return *str;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	781b      	ldrb	r3, [r3, #0]
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	370c      	adds	r7, #12
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d009      	beq.n	80116da <lock_fs+0x22>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f002 fd14 	bl	80140f8 <ff_req_grant>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d001      	beq.n	80116da <lock_fs+0x22>
 80116d6:	2301      	movs	r3, #1
 80116d8:	e000      	b.n	80116dc <lock_fs+0x24>
 80116da:	2300      	movs	r3, #0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	460b      	mov	r3, r1
 80116ee:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00d      	beq.n	8011712 <unlock_fs+0x2e>
 80116f6:	78fb      	ldrb	r3, [r7, #3]
 80116f8:	2b0c      	cmp	r3, #12
 80116fa:	d00a      	beq.n	8011712 <unlock_fs+0x2e>
 80116fc:	78fb      	ldrb	r3, [r7, #3]
 80116fe:	2b0b      	cmp	r3, #11
 8011700:	d007      	beq.n	8011712 <unlock_fs+0x2e>
 8011702:	78fb      	ldrb	r3, [r7, #3]
 8011704:	2b0f      	cmp	r3, #15
 8011706:	d004      	beq.n	8011712 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	4618      	mov	r0, r3
 801170e:	f002 fd08 	bl	8014122 <ff_rel_grant>
	}
}
 8011712:	bf00      	nop
 8011714:	3708      	adds	r7, #8
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
	...

0801171c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011726:	2300      	movs	r3, #0
 8011728:	60bb      	str	r3, [r7, #8]
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	e029      	b.n	8011784 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011730:	4a27      	ldr	r2, [pc, #156]	; (80117d0 <chk_lock+0xb4>)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	4413      	add	r3, r2
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d01d      	beq.n	801177a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801173e:	4a24      	ldr	r2, [pc, #144]	; (80117d0 <chk_lock+0xb4>)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	011b      	lsls	r3, r3, #4
 8011744:	4413      	add	r3, r2
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	429a      	cmp	r2, r3
 801174e:	d116      	bne.n	801177e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011750:	4a1f      	ldr	r2, [pc, #124]	; (80117d0 <chk_lock+0xb4>)
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	011b      	lsls	r3, r3, #4
 8011756:	4413      	add	r3, r2
 8011758:	3304      	adds	r3, #4
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011760:	429a      	cmp	r2, r3
 8011762:	d10c      	bne.n	801177e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011764:	4a1a      	ldr	r2, [pc, #104]	; (80117d0 <chk_lock+0xb4>)
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	011b      	lsls	r3, r3, #4
 801176a:	4413      	add	r3, r2
 801176c:	3308      	adds	r3, #8
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011774:	429a      	cmp	r2, r3
 8011776:	d102      	bne.n	801177e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011778:	e007      	b.n	801178a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801177a:	2301      	movs	r3, #1
 801177c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3301      	adds	r3, #1
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2b01      	cmp	r3, #1
 8011788:	d9d2      	bls.n	8011730 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2b02      	cmp	r3, #2
 801178e:	d109      	bne.n	80117a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d102      	bne.n	801179c <chk_lock+0x80>
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2b02      	cmp	r3, #2
 801179a:	d101      	bne.n	80117a0 <chk_lock+0x84>
 801179c:	2300      	movs	r3, #0
 801179e:	e010      	b.n	80117c2 <chk_lock+0xa6>
 80117a0:	2312      	movs	r3, #18
 80117a2:	e00e      	b.n	80117c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d108      	bne.n	80117bc <chk_lock+0xa0>
 80117aa:	4a09      	ldr	r2, [pc, #36]	; (80117d0 <chk_lock+0xb4>)
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	011b      	lsls	r3, r3, #4
 80117b0:	4413      	add	r3, r2
 80117b2:	330c      	adds	r3, #12
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117ba:	d101      	bne.n	80117c0 <chk_lock+0xa4>
 80117bc:	2310      	movs	r3, #16
 80117be:	e000      	b.n	80117c2 <chk_lock+0xa6>
 80117c0:	2300      	movs	r3, #0
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3714      	adds	r7, #20
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	20000eb8 	.word	0x20000eb8

080117d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117da:	2300      	movs	r3, #0
 80117dc:	607b      	str	r3, [r7, #4]
 80117de:	e002      	b.n	80117e6 <enq_lock+0x12>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	3301      	adds	r3, #1
 80117e4:	607b      	str	r3, [r7, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d806      	bhi.n	80117fa <enq_lock+0x26>
 80117ec:	4a09      	ldr	r2, [pc, #36]	; (8011814 <enq_lock+0x40>)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	011b      	lsls	r3, r3, #4
 80117f2:	4413      	add	r3, r2
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d1f2      	bne.n	80117e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2b02      	cmp	r3, #2
 80117fe:	bf14      	ite	ne
 8011800:	2301      	movne	r3, #1
 8011802:	2300      	moveq	r3, #0
 8011804:	b2db      	uxtb	r3, r3
}
 8011806:	4618      	mov	r0, r3
 8011808:	370c      	adds	r7, #12
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop
 8011814:	20000eb8 	.word	0x20000eb8

08011818 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011818:	b480      	push	{r7}
 801181a:	b085      	sub	sp, #20
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011822:	2300      	movs	r3, #0
 8011824:	60fb      	str	r3, [r7, #12]
 8011826:	e01f      	b.n	8011868 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011828:	4a41      	ldr	r2, [pc, #260]	; (8011930 <inc_lock+0x118>)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	011b      	lsls	r3, r3, #4
 801182e:	4413      	add	r3, r2
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	429a      	cmp	r2, r3
 8011838:	d113      	bne.n	8011862 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801183a:	4a3d      	ldr	r2, [pc, #244]	; (8011930 <inc_lock+0x118>)
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	011b      	lsls	r3, r3, #4
 8011840:	4413      	add	r3, r2
 8011842:	3304      	adds	r3, #4
 8011844:	681a      	ldr	r2, [r3, #0]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801184a:	429a      	cmp	r2, r3
 801184c:	d109      	bne.n	8011862 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801184e:	4a38      	ldr	r2, [pc, #224]	; (8011930 <inc_lock+0x118>)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	011b      	lsls	r3, r3, #4
 8011854:	4413      	add	r3, r2
 8011856:	3308      	adds	r3, #8
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801185e:	429a      	cmp	r2, r3
 8011860:	d006      	beq.n	8011870 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	3301      	adds	r3, #1
 8011866:	60fb      	str	r3, [r7, #12]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d9dc      	bls.n	8011828 <inc_lock+0x10>
 801186e:	e000      	b.n	8011872 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011870:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2b02      	cmp	r3, #2
 8011876:	d132      	bne.n	80118de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011878:	2300      	movs	r3, #0
 801187a:	60fb      	str	r3, [r7, #12]
 801187c:	e002      	b.n	8011884 <inc_lock+0x6c>
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	3301      	adds	r3, #1
 8011882:	60fb      	str	r3, [r7, #12]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2b01      	cmp	r3, #1
 8011888:	d806      	bhi.n	8011898 <inc_lock+0x80>
 801188a:	4a29      	ldr	r2, [pc, #164]	; (8011930 <inc_lock+0x118>)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	011b      	lsls	r3, r3, #4
 8011890:	4413      	add	r3, r2
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1f2      	bne.n	801187e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b02      	cmp	r3, #2
 801189c:	d101      	bne.n	80118a2 <inc_lock+0x8a>
 801189e:	2300      	movs	r3, #0
 80118a0:	e040      	b.n	8011924 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	4922      	ldr	r1, [pc, #136]	; (8011930 <inc_lock+0x118>)
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	011b      	lsls	r3, r3, #4
 80118ac:	440b      	add	r3, r1
 80118ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	689a      	ldr	r2, [r3, #8]
 80118b4:	491e      	ldr	r1, [pc, #120]	; (8011930 <inc_lock+0x118>)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	011b      	lsls	r3, r3, #4
 80118ba:	440b      	add	r3, r1
 80118bc:	3304      	adds	r3, #4
 80118be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	695a      	ldr	r2, [r3, #20]
 80118c4:	491a      	ldr	r1, [pc, #104]	; (8011930 <inc_lock+0x118>)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	011b      	lsls	r3, r3, #4
 80118ca:	440b      	add	r3, r1
 80118cc:	3308      	adds	r3, #8
 80118ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80118d0:	4a17      	ldr	r2, [pc, #92]	; (8011930 <inc_lock+0x118>)
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	011b      	lsls	r3, r3, #4
 80118d6:	4413      	add	r3, r2
 80118d8:	330c      	adds	r3, #12
 80118da:	2200      	movs	r2, #0
 80118dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d009      	beq.n	80118f8 <inc_lock+0xe0>
 80118e4:	4a12      	ldr	r2, [pc, #72]	; (8011930 <inc_lock+0x118>)
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	011b      	lsls	r3, r3, #4
 80118ea:	4413      	add	r3, r2
 80118ec:	330c      	adds	r3, #12
 80118ee:	881b      	ldrh	r3, [r3, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <inc_lock+0xe0>
 80118f4:	2300      	movs	r3, #0
 80118f6:	e015      	b.n	8011924 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d108      	bne.n	8011910 <inc_lock+0xf8>
 80118fe:	4a0c      	ldr	r2, [pc, #48]	; (8011930 <inc_lock+0x118>)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	011b      	lsls	r3, r3, #4
 8011904:	4413      	add	r3, r2
 8011906:	330c      	adds	r3, #12
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	3301      	adds	r3, #1
 801190c:	b29a      	uxth	r2, r3
 801190e:	e001      	b.n	8011914 <inc_lock+0xfc>
 8011910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011914:	4906      	ldr	r1, [pc, #24]	; (8011930 <inc_lock+0x118>)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	011b      	lsls	r3, r3, #4
 801191a:	440b      	add	r3, r1
 801191c:	330c      	adds	r3, #12
 801191e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	3301      	adds	r3, #1
}
 8011924:	4618      	mov	r0, r3
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	20000eb8 	.word	0x20000eb8

08011934 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	3b01      	subs	r3, #1
 8011940:	607b      	str	r3, [r7, #4]
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d825      	bhi.n	8011994 <dec_lock+0x60>
		n = Files[i].ctr;
 8011948:	4a17      	ldr	r2, [pc, #92]	; (80119a8 <dec_lock+0x74>)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	011b      	lsls	r3, r3, #4
 801194e:	4413      	add	r3, r2
 8011950:	330c      	adds	r3, #12
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011956:	89fb      	ldrh	r3, [r7, #14]
 8011958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801195c:	d101      	bne.n	8011962 <dec_lock+0x2e>
 801195e:	2300      	movs	r3, #0
 8011960:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011962:	89fb      	ldrh	r3, [r7, #14]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d002      	beq.n	801196e <dec_lock+0x3a>
 8011968:	89fb      	ldrh	r3, [r7, #14]
 801196a:	3b01      	subs	r3, #1
 801196c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801196e:	4a0e      	ldr	r2, [pc, #56]	; (80119a8 <dec_lock+0x74>)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	011b      	lsls	r3, r3, #4
 8011974:	4413      	add	r3, r2
 8011976:	330c      	adds	r3, #12
 8011978:	89fa      	ldrh	r2, [r7, #14]
 801197a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801197c:	89fb      	ldrh	r3, [r7, #14]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d105      	bne.n	801198e <dec_lock+0x5a>
 8011982:	4a09      	ldr	r2, [pc, #36]	; (80119a8 <dec_lock+0x74>)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	011b      	lsls	r3, r3, #4
 8011988:	4413      	add	r3, r2
 801198a:	2200      	movs	r2, #0
 801198c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801198e:	2300      	movs	r3, #0
 8011990:	737b      	strb	r3, [r7, #13]
 8011992:	e001      	b.n	8011998 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011994:	2302      	movs	r3, #2
 8011996:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011998:	7b7b      	ldrb	r3, [r7, #13]
}
 801199a:	4618      	mov	r0, r3
 801199c:	3714      	adds	r7, #20
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	20000eb8 	.word	0x20000eb8

080119ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80119b4:	2300      	movs	r3, #0
 80119b6:	60fb      	str	r3, [r7, #12]
 80119b8:	e010      	b.n	80119dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80119ba:	4a0d      	ldr	r2, [pc, #52]	; (80119f0 <clear_lock+0x44>)
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	011b      	lsls	r3, r3, #4
 80119c0:	4413      	add	r3, r2
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d105      	bne.n	80119d6 <clear_lock+0x2a>
 80119ca:	4a09      	ldr	r2, [pc, #36]	; (80119f0 <clear_lock+0x44>)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	011b      	lsls	r3, r3, #4
 80119d0:	4413      	add	r3, r2
 80119d2:	2200      	movs	r2, #0
 80119d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	3301      	adds	r3, #1
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d9eb      	bls.n	80119ba <clear_lock+0xe>
	}
}
 80119e2:	bf00      	nop
 80119e4:	bf00      	nop
 80119e6:	3714      	adds	r7, #20
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr
 80119f0:	20000eb8 	.word	0x20000eb8

080119f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b086      	sub	sp, #24
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80119fc:	2300      	movs	r3, #0
 80119fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	78db      	ldrb	r3, [r3, #3]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d034      	beq.n	8011a72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	7858      	ldrb	r0, [r3, #1]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011a18:	2301      	movs	r3, #1
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	f7ff fd0e 	bl	801143c <disk_write>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d002      	beq.n	8011a2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011a26:	2301      	movs	r3, #1
 8011a28:	73fb      	strb	r3, [r7, #15]
 8011a2a:	e022      	b.n	8011a72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a36:	697a      	ldr	r2, [r7, #20]
 8011a38:	1ad2      	subs	r2, r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	69db      	ldr	r3, [r3, #28]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d217      	bcs.n	8011a72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	789b      	ldrb	r3, [r3, #2]
 8011a46:	613b      	str	r3, [r7, #16]
 8011a48:	e010      	b.n	8011a6c <sync_window+0x78>
					wsect += fs->fsize;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	69db      	ldr	r3, [r3, #28]
 8011a4e:	697a      	ldr	r2, [r7, #20]
 8011a50:	4413      	add	r3, r2
 8011a52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	7858      	ldrb	r0, [r3, #1]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011a5e:	2301      	movs	r3, #1
 8011a60:	697a      	ldr	r2, [r7, #20]
 8011a62:	f7ff fceb 	bl	801143c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	613b      	str	r3, [r7, #16]
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d8eb      	bhi.n	8011a4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3718      	adds	r7, #24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011a86:	2300      	movs	r3, #0
 8011a88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d01b      	beq.n	8011acc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7ff ffad 	bl	80119f4 <sync_window>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011a9e:	7bfb      	ldrb	r3, [r7, #15]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d113      	bne.n	8011acc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	7858      	ldrb	r0, [r3, #1]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011aae:	2301      	movs	r3, #1
 8011ab0:	683a      	ldr	r2, [r7, #0]
 8011ab2:	f7ff fca3 	bl	80113fc <disk_read>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d004      	beq.n	8011ac6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011abc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	683a      	ldr	r2, [r7, #0]
 8011aca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff ff87 	bl	80119f4 <sync_window>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d158      	bne.n	8011ba2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b03      	cmp	r3, #3
 8011af6:	d148      	bne.n	8011b8a <sync_fs+0xb2>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	791b      	ldrb	r3, [r3, #4]
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d144      	bne.n	8011b8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	3334      	adds	r3, #52	; 0x34
 8011b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b08:	2100      	movs	r1, #0
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7ff fd77 	bl	80115fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	3334      	adds	r3, #52	; 0x34
 8011b14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7ff fd06 	bl	801152e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	3334      	adds	r3, #52	; 0x34
 8011b26:	4921      	ldr	r1, [pc, #132]	; (8011bac <sync_fs+0xd4>)
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7ff fd1b 	bl	8011564 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	3334      	adds	r3, #52	; 0x34
 8011b32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011b36:	491e      	ldr	r1, [pc, #120]	; (8011bb0 <sync_fs+0xd8>)
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff fd13 	bl	8011564 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	3334      	adds	r3, #52	; 0x34
 8011b42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	695b      	ldr	r3, [r3, #20]
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	4610      	mov	r0, r2
 8011b4e:	f7ff fd09 	bl	8011564 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	3334      	adds	r3, #52	; 0x34
 8011b56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	691b      	ldr	r3, [r3, #16]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	4610      	mov	r0, r2
 8011b62:	f7ff fcff 	bl	8011564 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6a1b      	ldr	r3, [r3, #32]
 8011b6a:	1c5a      	adds	r2, r3, #1
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	7858      	ldrb	r0, [r3, #1]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b7e:	2301      	movs	r3, #1
 8011b80:	f7ff fc5c 	bl	801143c <disk_write>
			fs->fsi_flag = 0;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	785b      	ldrb	r3, [r3, #1]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	2100      	movs	r1, #0
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7ff fc72 	bl	801147c <disk_ioctl>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d001      	beq.n	8011ba2 <sync_fs+0xca>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	41615252 	.word	0x41615252
 8011bb0:	61417272 	.word	0x61417272

08011bb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	3b02      	subs	r3, #2
 8011bc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	699b      	ldr	r3, [r3, #24]
 8011bc8:	3b02      	subs	r3, #2
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d301      	bcc.n	8011bd4 <clust2sect+0x20>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	e008      	b.n	8011be6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	895b      	ldrh	r3, [r3, #10]
 8011bd8:	461a      	mov	r2, r3
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	fb03 f202 	mul.w	r2, r3, r2
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be4:	4413      	add	r3, r2
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b086      	sub	sp, #24
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d904      	bls.n	8011c12 <get_fat+0x20>
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	699b      	ldr	r3, [r3, #24]
 8011c0c:	683a      	ldr	r2, [r7, #0]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d302      	bcc.n	8011c18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011c12:	2301      	movs	r3, #1
 8011c14:	617b      	str	r3, [r7, #20]
 8011c16:	e08f      	b.n	8011d38 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011c18:	f04f 33ff 	mov.w	r3, #4294967295
 8011c1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	2b03      	cmp	r3, #3
 8011c24:	d062      	beq.n	8011cec <get_fat+0xfa>
 8011c26:	2b03      	cmp	r3, #3
 8011c28:	dc7c      	bgt.n	8011d24 <get_fat+0x132>
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d002      	beq.n	8011c34 <get_fat+0x42>
 8011c2e:	2b02      	cmp	r3, #2
 8011c30:	d042      	beq.n	8011cb8 <get_fat+0xc6>
 8011c32:	e077      	b.n	8011d24 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	60fb      	str	r3, [r7, #12]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	085b      	lsrs	r3, r3, #1
 8011c3c:	68fa      	ldr	r2, [r7, #12]
 8011c3e:	4413      	add	r3, r2
 8011c40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	0a5b      	lsrs	r3, r3, #9
 8011c4a:	4413      	add	r3, r2
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	6938      	ldr	r0, [r7, #16]
 8011c50:	f7ff ff14 	bl	8011a7c <move_window>
 8011c54:	4603      	mov	r3, r0
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d167      	bne.n	8011d2a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	1c5a      	adds	r2, r3, #1
 8011c5e:	60fa      	str	r2, [r7, #12]
 8011c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c64:	693a      	ldr	r2, [r7, #16]
 8011c66:	4413      	add	r3, r2
 8011c68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	0a5b      	lsrs	r3, r3, #9
 8011c76:	4413      	add	r3, r2
 8011c78:	4619      	mov	r1, r3
 8011c7a:	6938      	ldr	r0, [r7, #16]
 8011c7c:	f7ff fefe 	bl	8011a7c <move_window>
 8011c80:	4603      	mov	r3, r0
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d153      	bne.n	8011d2e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c8c:	693a      	ldr	r2, [r7, #16]
 8011c8e:	4413      	add	r3, r2
 8011c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c94:	021b      	lsls	r3, r3, #8
 8011c96:	461a      	mov	r2, r3
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	f003 0301 	and.w	r3, r3, #1
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d002      	beq.n	8011cae <get_fat+0xbc>
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	091b      	lsrs	r3, r3, #4
 8011cac:	e002      	b.n	8011cb4 <get_fat+0xc2>
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011cb4:	617b      	str	r3, [r7, #20]
			break;
 8011cb6:	e03f      	b.n	8011d38 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	0a1b      	lsrs	r3, r3, #8
 8011cc0:	4413      	add	r3, r2
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	6938      	ldr	r0, [r7, #16]
 8011cc6:	f7ff fed9 	bl	8011a7c <move_window>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d130      	bne.n	8011d32 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	005b      	lsls	r3, r3, #1
 8011cda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011cde:	4413      	add	r3, r2
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7ff fbe9 	bl	80114b8 <ld_word>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	617b      	str	r3, [r7, #20]
			break;
 8011cea:	e025      	b.n	8011d38 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	09db      	lsrs	r3, r3, #7
 8011cf4:	4413      	add	r3, r2
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	6938      	ldr	r0, [r7, #16]
 8011cfa:	f7ff febf 	bl	8011a7c <move_window>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d118      	bne.n	8011d36 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011d12:	4413      	add	r3, r2
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7ff fbe7 	bl	80114e8 <ld_dword>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011d20:	617b      	str	r3, [r7, #20]
			break;
 8011d22:	e009      	b.n	8011d38 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011d24:	2301      	movs	r3, #1
 8011d26:	617b      	str	r3, [r7, #20]
 8011d28:	e006      	b.n	8011d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d2a:	bf00      	nop
 8011d2c:	e004      	b.n	8011d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d2e:	bf00      	nop
 8011d30:	e002      	b.n	8011d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d32:	bf00      	nop
 8011d34:	e000      	b.n	8011d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d36:	bf00      	nop
		}
	}

	return val;
 8011d38:	697b      	ldr	r3, [r7, #20]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3718      	adds	r7, #24
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011d42:	b590      	push	{r4, r7, lr}
 8011d44:	b089      	sub	sp, #36	; 0x24
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	60f8      	str	r0, [r7, #12]
 8011d4a:	60b9      	str	r1, [r7, #8]
 8011d4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011d4e:	2302      	movs	r3, #2
 8011d50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	f240 80d2 	bls.w	8011efe <put_fat+0x1bc>
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	699b      	ldr	r3, [r3, #24]
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	f080 80cc 	bcs.w	8011efe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	2b03      	cmp	r3, #3
 8011d6c:	f000 8096 	beq.w	8011e9c <put_fat+0x15a>
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	f300 80cd 	bgt.w	8011f10 <put_fat+0x1ce>
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d002      	beq.n	8011d80 <put_fat+0x3e>
 8011d7a:	2b02      	cmp	r3, #2
 8011d7c:	d06e      	beq.n	8011e5c <put_fat+0x11a>
 8011d7e:	e0c7      	b.n	8011f10 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	61bb      	str	r3, [r7, #24]
 8011d84:	69bb      	ldr	r3, [r7, #24]
 8011d86:	085b      	lsrs	r3, r3, #1
 8011d88:	69ba      	ldr	r2, [r7, #24]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	0a5b      	lsrs	r3, r3, #9
 8011d96:	4413      	add	r3, r2
 8011d98:	4619      	mov	r1, r3
 8011d9a:	68f8      	ldr	r0, [r7, #12]
 8011d9c:	f7ff fe6e 	bl	8011a7c <move_window>
 8011da0:	4603      	mov	r3, r0
 8011da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011da4:	7ffb      	ldrb	r3, [r7, #31]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	f040 80ab 	bne.w	8011f02 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011db2:	69bb      	ldr	r3, [r7, #24]
 8011db4:	1c59      	adds	r1, r3, #1
 8011db6:	61b9      	str	r1, [r7, #24]
 8011db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dbc:	4413      	add	r3, r2
 8011dbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	f003 0301 	and.w	r3, r3, #1
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d00d      	beq.n	8011de6 <put_fat+0xa4>
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	b25b      	sxtb	r3, r3
 8011dd0:	f003 030f 	and.w	r3, r3, #15
 8011dd4:	b25a      	sxtb	r2, r3
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	011b      	lsls	r3, r3, #4
 8011ddc:	b25b      	sxtb	r3, r3
 8011dde:	4313      	orrs	r3, r2
 8011de0:	b25b      	sxtb	r3, r3
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	e001      	b.n	8011dea <put_fat+0xa8>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	697a      	ldr	r2, [r7, #20]
 8011dec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2201      	movs	r2, #1
 8011df2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	0a5b      	lsrs	r3, r3, #9
 8011dfc:	4413      	add	r3, r2
 8011dfe:	4619      	mov	r1, r3
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	f7ff fe3b 	bl	8011a7c <move_window>
 8011e06:	4603      	mov	r3, r0
 8011e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e0a:	7ffb      	ldrb	r3, [r7, #31]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d17a      	bne.n	8011f06 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e1c:	4413      	add	r3, r2
 8011e1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	f003 0301 	and.w	r3, r3, #1
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d003      	beq.n	8011e32 <put_fat+0xf0>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	091b      	lsrs	r3, r3, #4
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	e00e      	b.n	8011e50 <put_fat+0x10e>
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	b25b      	sxtb	r3, r3
 8011e38:	f023 030f 	bic.w	r3, r3, #15
 8011e3c:	b25a      	sxtb	r2, r3
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	0a1b      	lsrs	r3, r3, #8
 8011e42:	b25b      	sxtb	r3, r3
 8011e44:	f003 030f 	and.w	r3, r3, #15
 8011e48:	b25b      	sxtb	r3, r3
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	b25b      	sxtb	r3, r3
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	697a      	ldr	r2, [r7, #20]
 8011e52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2201      	movs	r2, #1
 8011e58:	70da      	strb	r2, [r3, #3]
			break;
 8011e5a:	e059      	b.n	8011f10 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	0a1b      	lsrs	r3, r3, #8
 8011e64:	4413      	add	r3, r2
 8011e66:	4619      	mov	r1, r3
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f7ff fe07 	bl	8011a7c <move_window>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e72:	7ffb      	ldrb	r3, [r7, #31]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d148      	bne.n	8011f0a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	005b      	lsls	r3, r3, #1
 8011e82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011e86:	4413      	add	r3, r2
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	b292      	uxth	r2, r2
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7ff fb4d 	bl	801152e <st_word>
			fs->wflag = 1;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	2201      	movs	r2, #1
 8011e98:	70da      	strb	r2, [r3, #3]
			break;
 8011e9a:	e039      	b.n	8011f10 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	09db      	lsrs	r3, r3, #7
 8011ea4:	4413      	add	r3, r2
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	68f8      	ldr	r0, [r7, #12]
 8011eaa:	f7ff fde7 	bl	8011a7c <move_window>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011eb2:	7ffb      	ldrb	r3, [r7, #31]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d12a      	bne.n	8011f0e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011ecc:	4413      	add	r3, r2
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7ff fb0a 	bl	80114e8 <ld_dword>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011eda:	4323      	orrs	r3, r4
 8011edc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	009b      	lsls	r3, r3, #2
 8011ee8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011eec:	4413      	add	r3, r2
 8011eee:	6879      	ldr	r1, [r7, #4]
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7ff fb37 	bl	8011564 <st_dword>
			fs->wflag = 1;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2201      	movs	r2, #1
 8011efa:	70da      	strb	r2, [r3, #3]
			break;
 8011efc:	e008      	b.n	8011f10 <put_fat+0x1ce>
		}
	}
 8011efe:	bf00      	nop
 8011f00:	e006      	b.n	8011f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011f02:	bf00      	nop
 8011f04:	e004      	b.n	8011f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011f06:	bf00      	nop
 8011f08:	e002      	b.n	8011f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011f0a:	bf00      	nop
 8011f0c:	e000      	b.n	8011f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011f0e:	bf00      	nop
	return res;
 8011f10:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3724      	adds	r7, #36	; 0x24
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd90      	pop	{r4, r7, pc}

08011f1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b088      	sub	sp, #32
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	60f8      	str	r0, [r7, #12]
 8011f22:	60b9      	str	r1, [r7, #8]
 8011f24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011f26:	2300      	movs	r3, #0
 8011f28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d904      	bls.n	8011f40 <remove_chain+0x26>
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	699b      	ldr	r3, [r3, #24]
 8011f3a:	68ba      	ldr	r2, [r7, #8]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d301      	bcc.n	8011f44 <remove_chain+0x2a>
 8011f40:	2302      	movs	r3, #2
 8011f42:	e04b      	b.n	8011fdc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00c      	beq.n	8011f64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f4e:	6879      	ldr	r1, [r7, #4]
 8011f50:	69b8      	ldr	r0, [r7, #24]
 8011f52:	f7ff fef6 	bl	8011d42 <put_fat>
 8011f56:	4603      	mov	r3, r0
 8011f58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011f5a:	7ffb      	ldrb	r3, [r7, #31]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <remove_chain+0x4a>
 8011f60:	7ffb      	ldrb	r3, [r7, #31]
 8011f62:	e03b      	b.n	8011fdc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011f64:	68b9      	ldr	r1, [r7, #8]
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f7ff fe43 	bl	8011bf2 <get_fat>
 8011f6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d031      	beq.n	8011fd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d101      	bne.n	8011f7e <remove_chain+0x64>
 8011f7a:	2302      	movs	r3, #2
 8011f7c:	e02e      	b.n	8011fdc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f84:	d101      	bne.n	8011f8a <remove_chain+0x70>
 8011f86:	2301      	movs	r3, #1
 8011f88:	e028      	b.n	8011fdc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	68b9      	ldr	r1, [r7, #8]
 8011f8e:	69b8      	ldr	r0, [r7, #24]
 8011f90:	f7ff fed7 	bl	8011d42 <put_fat>
 8011f94:	4603      	mov	r3, r0
 8011f96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011f98:	7ffb      	ldrb	r3, [r7, #31]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d001      	beq.n	8011fa2 <remove_chain+0x88>
 8011f9e:	7ffb      	ldrb	r3, [r7, #31]
 8011fa0:	e01c      	b.n	8011fdc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	695a      	ldr	r2, [r3, #20]
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	699b      	ldr	r3, [r3, #24]
 8011faa:	3b02      	subs	r3, #2
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d20b      	bcs.n	8011fc8 <remove_chain+0xae>
			fs->free_clst++;
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	695b      	ldr	r3, [r3, #20]
 8011fb4:	1c5a      	adds	r2, r3, #1
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011fba:	69bb      	ldr	r3, [r7, #24]
 8011fbc:	791b      	ldrb	r3, [r3, #4]
 8011fbe:	f043 0301 	orr.w	r3, r3, #1
 8011fc2:	b2da      	uxtb	r2, r3
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	699b      	ldr	r3, [r3, #24]
 8011fd0:	68ba      	ldr	r2, [r7, #8]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d3c6      	bcc.n	8011f64 <remove_chain+0x4a>
 8011fd6:	e000      	b.n	8011fda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011fd8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3720      	adds	r7, #32
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d10d      	bne.n	8012016 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012000:	69bb      	ldr	r3, [r7, #24]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d004      	beq.n	8012010 <create_chain+0x2c>
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	699b      	ldr	r3, [r3, #24]
 801200a:	69ba      	ldr	r2, [r7, #24]
 801200c:	429a      	cmp	r2, r3
 801200e:	d31b      	bcc.n	8012048 <create_chain+0x64>
 8012010:	2301      	movs	r3, #1
 8012012:	61bb      	str	r3, [r7, #24]
 8012014:	e018      	b.n	8012048 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f7ff fdea 	bl	8011bf2 <get_fat>
 801201e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2b01      	cmp	r3, #1
 8012024:	d801      	bhi.n	801202a <create_chain+0x46>
 8012026:	2301      	movs	r3, #1
 8012028:	e070      	b.n	801210c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012030:	d101      	bne.n	8012036 <create_chain+0x52>
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	e06a      	b.n	801210c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	699b      	ldr	r3, [r3, #24]
 801203a:	68fa      	ldr	r2, [r7, #12]
 801203c:	429a      	cmp	r2, r3
 801203e:	d201      	bcs.n	8012044 <create_chain+0x60>
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	e063      	b.n	801210c <create_chain+0x128>
		scl = clst;
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	3301      	adds	r3, #1
 8012050:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	699b      	ldr	r3, [r3, #24]
 8012056:	69fa      	ldr	r2, [r7, #28]
 8012058:	429a      	cmp	r2, r3
 801205a:	d307      	bcc.n	801206c <create_chain+0x88>
				ncl = 2;
 801205c:	2302      	movs	r3, #2
 801205e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012060:	69fa      	ldr	r2, [r7, #28]
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	429a      	cmp	r2, r3
 8012066:	d901      	bls.n	801206c <create_chain+0x88>
 8012068:	2300      	movs	r3, #0
 801206a:	e04f      	b.n	801210c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801206c:	69f9      	ldr	r1, [r7, #28]
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7ff fdbf 	bl	8011bf2 <get_fat>
 8012074:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00e      	beq.n	801209a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2b01      	cmp	r3, #1
 8012080:	d003      	beq.n	801208a <create_chain+0xa6>
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012088:	d101      	bne.n	801208e <create_chain+0xaa>
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	e03e      	b.n	801210c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801208e:	69fa      	ldr	r2, [r7, #28]
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	429a      	cmp	r2, r3
 8012094:	d1da      	bne.n	801204c <create_chain+0x68>
 8012096:	2300      	movs	r3, #0
 8012098:	e038      	b.n	801210c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801209a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801209c:	f04f 32ff 	mov.w	r2, #4294967295
 80120a0:	69f9      	ldr	r1, [r7, #28]
 80120a2:	6938      	ldr	r0, [r7, #16]
 80120a4:	f7ff fe4d 	bl	8011d42 <put_fat>
 80120a8:	4603      	mov	r3, r0
 80120aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80120ac:	7dfb      	ldrb	r3, [r7, #23]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d109      	bne.n	80120c6 <create_chain+0xe2>
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d006      	beq.n	80120c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80120b8:	69fa      	ldr	r2, [r7, #28]
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6938      	ldr	r0, [r7, #16]
 80120be:	f7ff fe40 	bl	8011d42 <put_fat>
 80120c2:	4603      	mov	r3, r0
 80120c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80120c6:	7dfb      	ldrb	r3, [r7, #23]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d116      	bne.n	80120fa <create_chain+0x116>
		fs->last_clst = ncl;
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	69fa      	ldr	r2, [r7, #28]
 80120d0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	695a      	ldr	r2, [r3, #20]
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	699b      	ldr	r3, [r3, #24]
 80120da:	3b02      	subs	r3, #2
 80120dc:	429a      	cmp	r2, r3
 80120de:	d804      	bhi.n	80120ea <create_chain+0x106>
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	695b      	ldr	r3, [r3, #20]
 80120e4:	1e5a      	subs	r2, r3, #1
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	791b      	ldrb	r3, [r3, #4]
 80120ee:	f043 0301 	orr.w	r3, r3, #1
 80120f2:	b2da      	uxtb	r2, r3
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	711a      	strb	r2, [r3, #4]
 80120f8:	e007      	b.n	801210a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80120fa:	7dfb      	ldrb	r3, [r7, #23]
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d102      	bne.n	8012106 <create_chain+0x122>
 8012100:	f04f 33ff 	mov.w	r3, #4294967295
 8012104:	e000      	b.n	8012108 <create_chain+0x124>
 8012106:	2301      	movs	r3, #1
 8012108:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801210a:	69fb      	ldr	r3, [r7, #28]
}
 801210c:	4618      	mov	r0, r3
 801210e:	3720      	adds	r7, #32
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012114:	b480      	push	{r7}
 8012116:	b087      	sub	sp, #28
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012128:	3304      	adds	r3, #4
 801212a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	0a5b      	lsrs	r3, r3, #9
 8012130:	68fa      	ldr	r2, [r7, #12]
 8012132:	8952      	ldrh	r2, [r2, #10]
 8012134:	fbb3 f3f2 	udiv	r3, r3, r2
 8012138:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	1d1a      	adds	r2, r3, #4
 801213e:	613a      	str	r2, [r7, #16]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d101      	bne.n	801214e <clmt_clust+0x3a>
 801214a:	2300      	movs	r3, #0
 801214c:	e010      	b.n	8012170 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801214e:	697a      	ldr	r2, [r7, #20]
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	429a      	cmp	r2, r3
 8012154:	d307      	bcc.n	8012166 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012156:	697a      	ldr	r2, [r7, #20]
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	1ad3      	subs	r3, r2, r3
 801215c:	617b      	str	r3, [r7, #20]
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	3304      	adds	r3, #4
 8012162:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012164:	e7e9      	b.n	801213a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012166:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	4413      	add	r3, r2
}
 8012170:	4618      	mov	r0, r3
 8012172:	371c      	adds	r7, #28
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b086      	sub	sp, #24
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012192:	d204      	bcs.n	801219e <dir_sdi+0x22>
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	f003 031f 	and.w	r3, r3, #31
 801219a:	2b00      	cmp	r3, #0
 801219c:	d001      	beq.n	80121a2 <dir_sdi+0x26>
		return FR_INT_ERR;
 801219e:	2302      	movs	r3, #2
 80121a0:	e063      	b.n	801226a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d106      	bne.n	80121c2 <dir_sdi+0x46>
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	2b02      	cmp	r3, #2
 80121ba:	d902      	bls.n	80121c2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121c0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d10c      	bne.n	80121e2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	095b      	lsrs	r3, r3, #5
 80121cc:	693a      	ldr	r2, [r7, #16]
 80121ce:	8912      	ldrh	r2, [r2, #8]
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d301      	bcc.n	80121d8 <dir_sdi+0x5c>
 80121d4:	2302      	movs	r3, #2
 80121d6:	e048      	b.n	801226a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	61da      	str	r2, [r3, #28]
 80121e0:	e029      	b.n	8012236 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	895b      	ldrh	r3, [r3, #10]
 80121e6:	025b      	lsls	r3, r3, #9
 80121e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80121ea:	e019      	b.n	8012220 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6979      	ldr	r1, [r7, #20]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7ff fcfe 	bl	8011bf2 <get_fat>
 80121f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121fe:	d101      	bne.n	8012204 <dir_sdi+0x88>
 8012200:	2301      	movs	r3, #1
 8012202:	e032      	b.n	801226a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2b01      	cmp	r3, #1
 8012208:	d904      	bls.n	8012214 <dir_sdi+0x98>
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	699b      	ldr	r3, [r3, #24]
 801220e:	697a      	ldr	r2, [r7, #20]
 8012210:	429a      	cmp	r2, r3
 8012212:	d301      	bcc.n	8012218 <dir_sdi+0x9c>
 8012214:	2302      	movs	r3, #2
 8012216:	e028      	b.n	801226a <dir_sdi+0xee>
			ofs -= csz;
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	1ad3      	subs	r3, r2, r3
 801221e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012220:	683a      	ldr	r2, [r7, #0]
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	429a      	cmp	r2, r3
 8012226:	d2e1      	bcs.n	80121ec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012228:	6979      	ldr	r1, [r7, #20]
 801222a:	6938      	ldr	r0, [r7, #16]
 801222c:	f7ff fcc2 	bl	8011bb4 <clust2sect>
 8012230:	4602      	mov	r2, r0
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	697a      	ldr	r2, [r7, #20]
 801223a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	69db      	ldr	r3, [r3, #28]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d101      	bne.n	8012248 <dir_sdi+0xcc>
 8012244:	2302      	movs	r3, #2
 8012246:	e010      	b.n	801226a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	69da      	ldr	r2, [r3, #28]
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	0a5b      	lsrs	r3, r3, #9
 8012250:	441a      	add	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012262:	441a      	add	r2, r3
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	3718      	adds	r7, #24
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012272:	b580      	push	{r7, lr}
 8012274:	b086      	sub	sp, #24
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
 801227a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	695b      	ldr	r3, [r3, #20]
 8012286:	3320      	adds	r3, #32
 8012288:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	69db      	ldr	r3, [r3, #28]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d003      	beq.n	801229a <dir_next+0x28>
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012298:	d301      	bcc.n	801229e <dir_next+0x2c>
 801229a:	2304      	movs	r3, #4
 801229c:	e0aa      	b.n	80123f4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f040 8098 	bne.w	80123da <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	69db      	ldr	r3, [r3, #28]
 80122ae:	1c5a      	adds	r2, r3, #1
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	699b      	ldr	r3, [r3, #24]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10b      	bne.n	80122d4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	095b      	lsrs	r3, r3, #5
 80122c0:	68fa      	ldr	r2, [r7, #12]
 80122c2:	8912      	ldrh	r2, [r2, #8]
 80122c4:	4293      	cmp	r3, r2
 80122c6:	f0c0 8088 	bcc.w	80123da <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2200      	movs	r2, #0
 80122ce:	61da      	str	r2, [r3, #28]
 80122d0:	2304      	movs	r3, #4
 80122d2:	e08f      	b.n	80123f4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	0a5b      	lsrs	r3, r3, #9
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	8952      	ldrh	r2, [r2, #10]
 80122dc:	3a01      	subs	r2, #1
 80122de:	4013      	ands	r3, r2
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d17a      	bne.n	80123da <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	699b      	ldr	r3, [r3, #24]
 80122ea:	4619      	mov	r1, r3
 80122ec:	4610      	mov	r0, r2
 80122ee:	f7ff fc80 	bl	8011bf2 <get_fat>
 80122f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	d801      	bhi.n	80122fe <dir_next+0x8c>
 80122fa:	2302      	movs	r3, #2
 80122fc:	e07a      	b.n	80123f4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012304:	d101      	bne.n	801230a <dir_next+0x98>
 8012306:	2301      	movs	r3, #1
 8012308:	e074      	b.n	80123f4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	699b      	ldr	r3, [r3, #24]
 801230e:	697a      	ldr	r2, [r7, #20]
 8012310:	429a      	cmp	r2, r3
 8012312:	d358      	bcc.n	80123c6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d104      	bne.n	8012324 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	61da      	str	r2, [r3, #28]
 8012320:	2304      	movs	r3, #4
 8012322:	e067      	b.n	80123f4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	699b      	ldr	r3, [r3, #24]
 801232a:	4619      	mov	r1, r3
 801232c:	4610      	mov	r0, r2
 801232e:	f7ff fe59 	bl	8011fe4 <create_chain>
 8012332:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d101      	bne.n	801233e <dir_next+0xcc>
 801233a:	2307      	movs	r3, #7
 801233c:	e05a      	b.n	80123f4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	2b01      	cmp	r3, #1
 8012342:	d101      	bne.n	8012348 <dir_next+0xd6>
 8012344:	2302      	movs	r3, #2
 8012346:	e055      	b.n	80123f4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801234e:	d101      	bne.n	8012354 <dir_next+0xe2>
 8012350:	2301      	movs	r3, #1
 8012352:	e04f      	b.n	80123f4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f7ff fb4d 	bl	80119f4 <sync_window>
 801235a:	4603      	mov	r3, r0
 801235c:	2b00      	cmp	r3, #0
 801235e:	d001      	beq.n	8012364 <dir_next+0xf2>
 8012360:	2301      	movs	r3, #1
 8012362:	e047      	b.n	80123f4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	3334      	adds	r3, #52	; 0x34
 8012368:	f44f 7200 	mov.w	r2, #512	; 0x200
 801236c:	2100      	movs	r1, #0
 801236e:	4618      	mov	r0, r3
 8012370:	f7ff f945 	bl	80115fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012374:	2300      	movs	r3, #0
 8012376:	613b      	str	r3, [r7, #16]
 8012378:	6979      	ldr	r1, [r7, #20]
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	f7ff fc1a 	bl	8011bb4 <clust2sect>
 8012380:	4602      	mov	r2, r0
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	631a      	str	r2, [r3, #48]	; 0x30
 8012386:	e012      	b.n	80123ae <dir_next+0x13c>
						fs->wflag = 1;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2201      	movs	r2, #1
 801238c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f7ff fb30 	bl	80119f4 <sync_window>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d001      	beq.n	801239e <dir_next+0x12c>
 801239a:	2301      	movs	r3, #1
 801239c:	e02a      	b.n	80123f4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	3301      	adds	r3, #1
 80123a2:	613b      	str	r3, [r7, #16]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123a8:	1c5a      	adds	r2, r3, #1
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	631a      	str	r2, [r3, #48]	; 0x30
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	895b      	ldrh	r3, [r3, #10]
 80123b2:	461a      	mov	r2, r3
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d3e6      	bcc.n	8012388 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	1ad2      	subs	r2, r2, r3
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	697a      	ldr	r2, [r7, #20]
 80123ca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80123cc:	6979      	ldr	r1, [r7, #20]
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f7ff fbf0 	bl	8011bb4 <clust2sect>
 80123d4:	4602      	mov	r2, r0
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123ec:	441a      	add	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123f2:	2300      	movs	r3, #0
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3718      	adds	r7, #24
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}

080123fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b086      	sub	sp, #24
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801240c:	2100      	movs	r1, #0
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7ff feb4 	bl	801217c <dir_sdi>
 8012414:	4603      	mov	r3, r0
 8012416:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012418:	7dfb      	ldrb	r3, [r7, #23]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d12b      	bne.n	8012476 <dir_alloc+0x7a>
		n = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	69db      	ldr	r3, [r3, #28]
 8012426:	4619      	mov	r1, r3
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f7ff fb27 	bl	8011a7c <move_window>
 801242e:	4603      	mov	r3, r0
 8012430:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012432:	7dfb      	ldrb	r3, [r7, #23]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d11d      	bne.n	8012474 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6a1b      	ldr	r3, [r3, #32]
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	2be5      	cmp	r3, #229	; 0xe5
 8012440:	d004      	beq.n	801244c <dir_alloc+0x50>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6a1b      	ldr	r3, [r3, #32]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d107      	bne.n	801245c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	3301      	adds	r3, #1
 8012450:	613b      	str	r3, [r7, #16]
 8012452:	693a      	ldr	r2, [r7, #16]
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	429a      	cmp	r2, r3
 8012458:	d102      	bne.n	8012460 <dir_alloc+0x64>
 801245a:	e00c      	b.n	8012476 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801245c:	2300      	movs	r3, #0
 801245e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012460:	2101      	movs	r1, #1
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7ff ff05 	bl	8012272 <dir_next>
 8012468:	4603      	mov	r3, r0
 801246a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801246c:	7dfb      	ldrb	r3, [r7, #23]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d0d7      	beq.n	8012422 <dir_alloc+0x26>
 8012472:	e000      	b.n	8012476 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012474:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	2b04      	cmp	r3, #4
 801247a:	d101      	bne.n	8012480 <dir_alloc+0x84>
 801247c:	2307      	movs	r3, #7
 801247e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012480:	7dfb      	ldrb	r3, [r7, #23]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3718      	adds	r7, #24
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b084      	sub	sp, #16
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
 8012492:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	331a      	adds	r3, #26
 8012498:	4618      	mov	r0, r3
 801249a:	f7ff f80d 	bl	80114b8 <ld_word>
 801249e:	4603      	mov	r3, r0
 80124a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	2b03      	cmp	r3, #3
 80124a8:	d109      	bne.n	80124be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	3314      	adds	r3, #20
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7ff f802 	bl	80114b8 <ld_word>
 80124b4:	4603      	mov	r3, r0
 80124b6:	041b      	lsls	r3, r3, #16
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	4313      	orrs	r3, r2
 80124bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80124be:	68fb      	ldr	r3, [r7, #12]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3710      	adds	r7, #16
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	331a      	adds	r3, #26
 80124d8:	687a      	ldr	r2, [r7, #4]
 80124da:	b292      	uxth	r2, r2
 80124dc:	4611      	mov	r1, r2
 80124de:	4618      	mov	r0, r3
 80124e0:	f7ff f825 	bl	801152e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	2b03      	cmp	r3, #3
 80124ea:	d109      	bne.n	8012500 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	f103 0214 	add.w	r2, r3, #20
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	0c1b      	lsrs	r3, r3, #16
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	4619      	mov	r1, r3
 80124fa:	4610      	mov	r0, r2
 80124fc:	f7ff f817 	bl	801152e <st_word>
	}
}
 8012500:	bf00      	nop
 8012502:	3710      	adds	r7, #16
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012516:	2100      	movs	r1, #0
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f7ff fe2f 	bl	801217c <dir_sdi>
 801251e:	4603      	mov	r3, r0
 8012520:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012522:	7dfb      	ldrb	r3, [r7, #23]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d001      	beq.n	801252c <dir_find+0x24>
 8012528:	7dfb      	ldrb	r3, [r7, #23]
 801252a:	e03e      	b.n	80125aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	69db      	ldr	r3, [r3, #28]
 8012530:	4619      	mov	r1, r3
 8012532:	6938      	ldr	r0, [r7, #16]
 8012534:	f7ff faa2 	bl	8011a7c <move_window>
 8012538:	4603      	mov	r3, r0
 801253a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801253c:	7dfb      	ldrb	r3, [r7, #23]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d12f      	bne.n	80125a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6a1b      	ldr	r3, [r3, #32]
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801254a:	7bfb      	ldrb	r3, [r7, #15]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d102      	bne.n	8012556 <dir_find+0x4e>
 8012550:	2304      	movs	r3, #4
 8012552:	75fb      	strb	r3, [r7, #23]
 8012554:	e028      	b.n	80125a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6a1b      	ldr	r3, [r3, #32]
 801255a:	330b      	adds	r3, #11
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012562:	b2da      	uxtb	r2, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6a1b      	ldr	r3, [r3, #32]
 801256c:	330b      	adds	r3, #11
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	f003 0308 	and.w	r3, r3, #8
 8012574:	2b00      	cmp	r3, #0
 8012576:	d10a      	bne.n	801258e <dir_find+0x86>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a18      	ldr	r0, [r3, #32]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	3324      	adds	r3, #36	; 0x24
 8012580:	220b      	movs	r2, #11
 8012582:	4619      	mov	r1, r3
 8012584:	f7ff f856 	bl	8011634 <mem_cmp>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d00b      	beq.n	80125a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801258e:	2100      	movs	r1, #0
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7ff fe6e 	bl	8012272 <dir_next>
 8012596:	4603      	mov	r3, r0
 8012598:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801259a:	7dfb      	ldrb	r3, [r7, #23]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d0c5      	beq.n	801252c <dir_find+0x24>
 80125a0:	e002      	b.n	80125a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80125a2:	bf00      	nop
 80125a4:	e000      	b.n	80125a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80125a6:	bf00      	nop

	return res;
 80125a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3718      	adds	r7, #24
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b084      	sub	sp, #16
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80125c0:	2101      	movs	r1, #1
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff ff1a 	bl	80123fc <dir_alloc>
 80125c8:	4603      	mov	r3, r0
 80125ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80125cc:	7bfb      	ldrb	r3, [r7, #15]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d11c      	bne.n	801260c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	69db      	ldr	r3, [r3, #28]
 80125d6:	4619      	mov	r1, r3
 80125d8:	68b8      	ldr	r0, [r7, #8]
 80125da:	f7ff fa4f 	bl	8011a7c <move_window>
 80125de:	4603      	mov	r3, r0
 80125e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80125e2:	7bfb      	ldrb	r3, [r7, #15]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d111      	bne.n	801260c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6a1b      	ldr	r3, [r3, #32]
 80125ec:	2220      	movs	r2, #32
 80125ee:	2100      	movs	r1, #0
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff f804 	bl	80115fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6a18      	ldr	r0, [r3, #32]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	3324      	adds	r3, #36	; 0x24
 80125fe:	220b      	movs	r2, #11
 8012600:	4619      	mov	r1, r3
 8012602:	f7fe ffdb 	bl	80115bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	2201      	movs	r2, #1
 801260a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801260c:	7bfb      	ldrb	r3, [r7, #15]
}
 801260e:	4618      	mov	r0, r3
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
	...

08012618 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b088      	sub	sp, #32
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	60fb      	str	r3, [r7, #12]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	3324      	adds	r3, #36	; 0x24
 801262c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801262e:	220b      	movs	r2, #11
 8012630:	2120      	movs	r1, #32
 8012632:	68b8      	ldr	r0, [r7, #8]
 8012634:	f7fe ffe3 	bl	80115fe <mem_set>
	si = i = 0; ni = 8;
 8012638:	2300      	movs	r3, #0
 801263a:	613b      	str	r3, [r7, #16]
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	61fb      	str	r3, [r7, #28]
 8012640:	2308      	movs	r3, #8
 8012642:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	1c5a      	adds	r2, r3, #1
 8012648:	61fa      	str	r2, [r7, #28]
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	4413      	add	r3, r2
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012652:	7efb      	ldrb	r3, [r7, #27]
 8012654:	2b20      	cmp	r3, #32
 8012656:	d94e      	bls.n	80126f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012658:	7efb      	ldrb	r3, [r7, #27]
 801265a:	2b2f      	cmp	r3, #47	; 0x2f
 801265c:	d006      	beq.n	801266c <create_name+0x54>
 801265e:	7efb      	ldrb	r3, [r7, #27]
 8012660:	2b5c      	cmp	r3, #92	; 0x5c
 8012662:	d110      	bne.n	8012686 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012664:	e002      	b.n	801266c <create_name+0x54>
 8012666:	69fb      	ldr	r3, [r7, #28]
 8012668:	3301      	adds	r3, #1
 801266a:	61fb      	str	r3, [r7, #28]
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	4413      	add	r3, r2
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	2b2f      	cmp	r3, #47	; 0x2f
 8012676:	d0f6      	beq.n	8012666 <create_name+0x4e>
 8012678:	68fa      	ldr	r2, [r7, #12]
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	4413      	add	r3, r2
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	2b5c      	cmp	r3, #92	; 0x5c
 8012682:	d0f0      	beq.n	8012666 <create_name+0x4e>
			break;
 8012684:	e038      	b.n	80126f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012686:	7efb      	ldrb	r3, [r7, #27]
 8012688:	2b2e      	cmp	r3, #46	; 0x2e
 801268a:	d003      	beq.n	8012694 <create_name+0x7c>
 801268c:	693a      	ldr	r2, [r7, #16]
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	429a      	cmp	r2, r3
 8012692:	d30c      	bcc.n	80126ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	2b0b      	cmp	r3, #11
 8012698:	d002      	beq.n	80126a0 <create_name+0x88>
 801269a:	7efb      	ldrb	r3, [r7, #27]
 801269c:	2b2e      	cmp	r3, #46	; 0x2e
 801269e:	d001      	beq.n	80126a4 <create_name+0x8c>
 80126a0:	2306      	movs	r3, #6
 80126a2:	e044      	b.n	801272e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80126a4:	2308      	movs	r3, #8
 80126a6:	613b      	str	r3, [r7, #16]
 80126a8:	230b      	movs	r3, #11
 80126aa:	617b      	str	r3, [r7, #20]
			continue;
 80126ac:	e022      	b.n	80126f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80126ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	da04      	bge.n	80126c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80126b6:	7efb      	ldrb	r3, [r7, #27]
 80126b8:	3b80      	subs	r3, #128	; 0x80
 80126ba:	4a1f      	ldr	r2, [pc, #124]	; (8012738 <create_name+0x120>)
 80126bc:	5cd3      	ldrb	r3, [r2, r3]
 80126be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80126c0:	7efb      	ldrb	r3, [r7, #27]
 80126c2:	4619      	mov	r1, r3
 80126c4:	481d      	ldr	r0, [pc, #116]	; (801273c <create_name+0x124>)
 80126c6:	f7fe ffdc 	bl	8011682 <chk_chr>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d001      	beq.n	80126d4 <create_name+0xbc>
 80126d0:	2306      	movs	r3, #6
 80126d2:	e02c      	b.n	801272e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80126d4:	7efb      	ldrb	r3, [r7, #27]
 80126d6:	2b60      	cmp	r3, #96	; 0x60
 80126d8:	d905      	bls.n	80126e6 <create_name+0xce>
 80126da:	7efb      	ldrb	r3, [r7, #27]
 80126dc:	2b7a      	cmp	r3, #122	; 0x7a
 80126de:	d802      	bhi.n	80126e6 <create_name+0xce>
 80126e0:	7efb      	ldrb	r3, [r7, #27]
 80126e2:	3b20      	subs	r3, #32
 80126e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	1c5a      	adds	r2, r3, #1
 80126ea:	613a      	str	r2, [r7, #16]
 80126ec:	68ba      	ldr	r2, [r7, #8]
 80126ee:	4413      	add	r3, r2
 80126f0:	7efa      	ldrb	r2, [r7, #27]
 80126f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80126f4:	e7a6      	b.n	8012644 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80126f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80126f8:	68fa      	ldr	r2, [r7, #12]
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	441a      	add	r2, r3
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d101      	bne.n	801270c <create_name+0xf4>
 8012708:	2306      	movs	r3, #6
 801270a:	e010      	b.n	801272e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	2be5      	cmp	r3, #229	; 0xe5
 8012712:	d102      	bne.n	801271a <create_name+0x102>
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	2205      	movs	r2, #5
 8012718:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801271a:	7efb      	ldrb	r3, [r7, #27]
 801271c:	2b20      	cmp	r3, #32
 801271e:	d801      	bhi.n	8012724 <create_name+0x10c>
 8012720:	2204      	movs	r2, #4
 8012722:	e000      	b.n	8012726 <create_name+0x10e>
 8012724:	2200      	movs	r2, #0
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	330b      	adds	r3, #11
 801272a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801272c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801272e:	4618      	mov	r0, r3
 8012730:	3720      	adds	r7, #32
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	08024864 	.word	0x08024864
 801273c:	08023fe4 	.word	0x08023fe4

08012740 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b086      	sub	sp, #24
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012754:	e002      	b.n	801275c <follow_path+0x1c>
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	3301      	adds	r3, #1
 801275a:	603b      	str	r3, [r7, #0]
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	2b2f      	cmp	r3, #47	; 0x2f
 8012762:	d0f8      	beq.n	8012756 <follow_path+0x16>
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	2b5c      	cmp	r3, #92	; 0x5c
 801276a:	d0f4      	beq.n	8012756 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	2200      	movs	r2, #0
 8012770:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	2b1f      	cmp	r3, #31
 8012778:	d80a      	bhi.n	8012790 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2280      	movs	r2, #128	; 0x80
 801277e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012782:	2100      	movs	r1, #0
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7ff fcf9 	bl	801217c <dir_sdi>
 801278a:	4603      	mov	r3, r0
 801278c:	75fb      	strb	r3, [r7, #23]
 801278e:	e043      	b.n	8012818 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012790:	463b      	mov	r3, r7
 8012792:	4619      	mov	r1, r3
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f7ff ff3f 	bl	8012618 <create_name>
 801279a:	4603      	mov	r3, r0
 801279c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801279e:	7dfb      	ldrb	r3, [r7, #23]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d134      	bne.n	801280e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7ff feaf 	bl	8012508 <dir_find>
 80127aa:	4603      	mov	r3, r0
 80127ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80127b6:	7dfb      	ldrb	r3, [r7, #23]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d00a      	beq.n	80127d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80127bc:	7dfb      	ldrb	r3, [r7, #23]
 80127be:	2b04      	cmp	r3, #4
 80127c0:	d127      	bne.n	8012812 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80127c2:	7afb      	ldrb	r3, [r7, #11]
 80127c4:	f003 0304 	and.w	r3, r3, #4
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d122      	bne.n	8012812 <follow_path+0xd2>
 80127cc:	2305      	movs	r3, #5
 80127ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80127d0:	e01f      	b.n	8012812 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80127d2:	7afb      	ldrb	r3, [r7, #11]
 80127d4:	f003 0304 	and.w	r3, r3, #4
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d11c      	bne.n	8012816 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	799b      	ldrb	r3, [r3, #6]
 80127e0:	f003 0310 	and.w	r3, r3, #16
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d102      	bne.n	80127ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80127e8:	2305      	movs	r3, #5
 80127ea:	75fb      	strb	r3, [r7, #23]
 80127ec:	e014      	b.n	8012818 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	695b      	ldr	r3, [r3, #20]
 80127f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127fc:	4413      	add	r3, r2
 80127fe:	4619      	mov	r1, r3
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	f7ff fe42 	bl	801248a <ld_clust>
 8012806:	4602      	mov	r2, r0
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801280c:	e7c0      	b.n	8012790 <follow_path+0x50>
			if (res != FR_OK) break;
 801280e:	bf00      	nop
 8012810:	e002      	b.n	8012818 <follow_path+0xd8>
				break;
 8012812:	bf00      	nop
 8012814:	e000      	b.n	8012818 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012816:	bf00      	nop
			}
		}
	}

	return res;
 8012818:	7dfb      	ldrb	r3, [r7, #23]
}
 801281a:	4618      	mov	r0, r3
 801281c:	3718      	adds	r7, #24
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012822:	b480      	push	{r7}
 8012824:	b087      	sub	sp, #28
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801282a:	f04f 33ff 	mov.w	r3, #4294967295
 801282e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d031      	beq.n	801289c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	617b      	str	r3, [r7, #20]
 801283e:	e002      	b.n	8012846 <get_ldnumber+0x24>
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	3301      	adds	r3, #1
 8012844:	617b      	str	r3, [r7, #20]
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	2b20      	cmp	r3, #32
 801284c:	d903      	bls.n	8012856 <get_ldnumber+0x34>
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	2b3a      	cmp	r3, #58	; 0x3a
 8012854:	d1f4      	bne.n	8012840 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	2b3a      	cmp	r3, #58	; 0x3a
 801285c:	d11c      	bne.n	8012898 <get_ldnumber+0x76>
			tp = *path;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	1c5a      	adds	r2, r3, #1
 8012868:	60fa      	str	r2, [r7, #12]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	3b30      	subs	r3, #48	; 0x30
 801286e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	2b09      	cmp	r3, #9
 8012874:	d80e      	bhi.n	8012894 <get_ldnumber+0x72>
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	429a      	cmp	r2, r3
 801287c:	d10a      	bne.n	8012894 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d107      	bne.n	8012894 <get_ldnumber+0x72>
					vol = (int)i;
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	3301      	adds	r3, #1
 801288c:	617b      	str	r3, [r7, #20]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	697a      	ldr	r2, [r7, #20]
 8012892:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	e002      	b.n	801289e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012898:	2300      	movs	r3, #0
 801289a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801289c:	693b      	ldr	r3, [r7, #16]
}
 801289e:	4618      	mov	r0, r3
 80128a0:	371c      	adds	r7, #28
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr
	...

080128ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b082      	sub	sp, #8
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	70da      	strb	r2, [r3, #3]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f04f 32ff 	mov.w	r2, #4294967295
 80128c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80128c4:	6839      	ldr	r1, [r7, #0]
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7ff f8d8 	bl	8011a7c <move_window>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d001      	beq.n	80128d6 <check_fs+0x2a>
 80128d2:	2304      	movs	r3, #4
 80128d4:	e038      	b.n	8012948 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	3334      	adds	r3, #52	; 0x34
 80128da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fe fdea 	bl	80114b8 <ld_word>
 80128e4:	4603      	mov	r3, r0
 80128e6:	461a      	mov	r2, r3
 80128e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d001      	beq.n	80128f4 <check_fs+0x48>
 80128f0:	2303      	movs	r3, #3
 80128f2:	e029      	b.n	8012948 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128fa:	2be9      	cmp	r3, #233	; 0xe9
 80128fc:	d009      	beq.n	8012912 <check_fs+0x66>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012904:	2beb      	cmp	r3, #235	; 0xeb
 8012906:	d11e      	bne.n	8012946 <check_fs+0x9a>
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801290e:	2b90      	cmp	r3, #144	; 0x90
 8012910:	d119      	bne.n	8012946 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	3334      	adds	r3, #52	; 0x34
 8012916:	3336      	adds	r3, #54	; 0x36
 8012918:	4618      	mov	r0, r3
 801291a:	f7fe fde5 	bl	80114e8 <ld_dword>
 801291e:	4603      	mov	r3, r0
 8012920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012924:	4a0a      	ldr	r2, [pc, #40]	; (8012950 <check_fs+0xa4>)
 8012926:	4293      	cmp	r3, r2
 8012928:	d101      	bne.n	801292e <check_fs+0x82>
 801292a:	2300      	movs	r3, #0
 801292c:	e00c      	b.n	8012948 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	3334      	adds	r3, #52	; 0x34
 8012932:	3352      	adds	r3, #82	; 0x52
 8012934:	4618      	mov	r0, r3
 8012936:	f7fe fdd7 	bl	80114e8 <ld_dword>
 801293a:	4603      	mov	r3, r0
 801293c:	4a05      	ldr	r2, [pc, #20]	; (8012954 <check_fs+0xa8>)
 801293e:	4293      	cmp	r3, r2
 8012940:	d101      	bne.n	8012946 <check_fs+0x9a>
 8012942:	2300      	movs	r3, #0
 8012944:	e000      	b.n	8012948 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012946:	2302      	movs	r3, #2
}
 8012948:	4618      	mov	r0, r3
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	00544146 	.word	0x00544146
 8012954:	33544146 	.word	0x33544146

08012958 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b096      	sub	sp, #88	; 0x58
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	4613      	mov	r3, r2
 8012964:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	2200      	movs	r2, #0
 801296a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801296c:	68f8      	ldr	r0, [r7, #12]
 801296e:	f7ff ff58 	bl	8012822 <get_ldnumber>
 8012972:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012976:	2b00      	cmp	r3, #0
 8012978:	da01      	bge.n	801297e <find_volume+0x26>
 801297a:	230b      	movs	r3, #11
 801297c:	e235      	b.n	8012dea <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801297e:	4aa5      	ldr	r2, [pc, #660]	; (8012c14 <find_volume+0x2bc>)
 8012980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012986:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298a:	2b00      	cmp	r3, #0
 801298c:	d101      	bne.n	8012992 <find_volume+0x3a>
 801298e:	230c      	movs	r3, #12
 8012990:	e22b      	b.n	8012dea <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8012992:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012994:	f7fe fe90 	bl	80116b8 <lock_fs>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d101      	bne.n	80129a2 <find_volume+0x4a>
 801299e:	230f      	movs	r3, #15
 80129a0:	e223      	b.n	8012dea <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80129a8:	79fb      	ldrb	r3, [r7, #7]
 80129aa:	f023 0301 	bic.w	r3, r3, #1
 80129ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80129b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d01a      	beq.n	80129ee <find_volume+0x96>
		stat = disk_status(fs->drv);
 80129b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ba:	785b      	ldrb	r3, [r3, #1]
 80129bc:	4618      	mov	r0, r3
 80129be:	f7fe fcdd 	bl	801137c <disk_status>
 80129c2:	4603      	mov	r3, r0
 80129c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80129c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d10c      	bne.n	80129ee <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80129d4:	79fb      	ldrb	r3, [r7, #7]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d007      	beq.n	80129ea <find_volume+0x92>
 80129da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129de:	f003 0304 	and.w	r3, r3, #4
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d001      	beq.n	80129ea <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80129e6:	230a      	movs	r3, #10
 80129e8:	e1ff      	b.n	8012dea <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80129ea:	2300      	movs	r3, #0
 80129ec:	e1fd      	b.n	8012dea <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80129ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f0:	2200      	movs	r2, #0
 80129f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80129f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129f6:	b2da      	uxtb	r2, r3
 80129f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80129fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fe:	785b      	ldrb	r3, [r3, #1]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7fe fcd5 	bl	80113b0 <disk_initialize>
 8012a06:	4603      	mov	r3, r0
 8012a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a10:	f003 0301 	and.w	r3, r3, #1
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d001      	beq.n	8012a1c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012a18:	2303      	movs	r3, #3
 8012a1a:	e1e6      	b.n	8012dea <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012a1c:	79fb      	ldrb	r3, [r7, #7]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d007      	beq.n	8012a32 <find_volume+0xda>
 8012a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a26:	f003 0304 	and.w	r3, r3, #4
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d001      	beq.n	8012a32 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8012a2e:	230a      	movs	r3, #10
 8012a30:	e1db      	b.n	8012dea <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012a32:	2300      	movs	r3, #0
 8012a34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012a36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a3a:	f7ff ff37 	bl	80128ac <check_fs>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a48:	2b02      	cmp	r3, #2
 8012a4a:	d149      	bne.n	8012ae0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8012a50:	e01e      	b.n	8012a90 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a5a:	011b      	lsls	r3, r3, #4
 8012a5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012a60:	4413      	add	r3, r2
 8012a62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a66:	3304      	adds	r3, #4
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d006      	beq.n	8012a7c <find_volume+0x124>
 8012a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a70:	3308      	adds	r3, #8
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fe fd38 	bl	80114e8 <ld_dword>
 8012a78:	4602      	mov	r2, r0
 8012a7a:	e000      	b.n	8012a7e <find_volume+0x126>
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	3358      	adds	r3, #88	; 0x58
 8012a84:	443b      	add	r3, r7
 8012a86:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8012a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a92:	2b03      	cmp	r3, #3
 8012a94:	d9dd      	bls.n	8012a52 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012a96:	2300      	movs	r3, #0
 8012a98:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d002      	beq.n	8012aa6 <find_volume+0x14e>
 8012aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa2:	3b01      	subs	r3, #1
 8012aa4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	3358      	adds	r3, #88	; 0x58
 8012aac:	443b      	add	r3, r7
 8012aae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ab2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d005      	beq.n	8012ac6 <find_volume+0x16e>
 8012aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012abe:	f7ff fef5 	bl	80128ac <check_fs>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	e000      	b.n	8012ac8 <find_volume+0x170>
 8012ac6:	2303      	movs	r3, #3
 8012ac8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012acc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d905      	bls.n	8012ae0 <find_volume+0x188>
 8012ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8012ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012adc:	2b03      	cmp	r3, #3
 8012ade:	d9e2      	bls.n	8012aa6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ae4:	2b04      	cmp	r3, #4
 8012ae6:	d101      	bne.n	8012aec <find_volume+0x194>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e17e      	b.n	8012dea <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012aec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d901      	bls.n	8012af8 <find_volume+0x1a0>
 8012af4:	230d      	movs	r3, #13
 8012af6:	e178      	b.n	8012dea <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afa:	3334      	adds	r3, #52	; 0x34
 8012afc:	330b      	adds	r3, #11
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fe fcda 	bl	80114b8 <ld_word>
 8012b04:	4603      	mov	r3, r0
 8012b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b0a:	d001      	beq.n	8012b10 <find_volume+0x1b8>
 8012b0c:	230d      	movs	r3, #13
 8012b0e:	e16c      	b.n	8012dea <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b12:	3334      	adds	r3, #52	; 0x34
 8012b14:	3316      	adds	r3, #22
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fe fcce 	bl	80114b8 <ld_word>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d106      	bne.n	8012b34 <find_volume+0x1dc>
 8012b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b28:	3334      	adds	r3, #52	; 0x34
 8012b2a:	3324      	adds	r3, #36	; 0x24
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7fe fcdb 	bl	80114e8 <ld_dword>
 8012b32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b38:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b46:	789b      	ldrb	r3, [r3, #2]
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d005      	beq.n	8012b58 <find_volume+0x200>
 8012b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4e:	789b      	ldrb	r3, [r3, #2]
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d001      	beq.n	8012b58 <find_volume+0x200>
 8012b54:	230d      	movs	r3, #13
 8012b56:	e148      	b.n	8012dea <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5a:	789b      	ldrb	r3, [r3, #2]
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b60:	fb02 f303 	mul.w	r3, r2, r3
 8012b64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	895b      	ldrh	r3, [r3, #10]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d008      	beq.n	8012b8c <find_volume+0x234>
 8012b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7c:	895b      	ldrh	r3, [r3, #10]
 8012b7e:	461a      	mov	r2, r3
 8012b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b82:	895b      	ldrh	r3, [r3, #10]
 8012b84:	3b01      	subs	r3, #1
 8012b86:	4013      	ands	r3, r2
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d001      	beq.n	8012b90 <find_volume+0x238>
 8012b8c:	230d      	movs	r3, #13
 8012b8e:	e12c      	b.n	8012dea <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	3334      	adds	r3, #52	; 0x34
 8012b94:	3311      	adds	r3, #17
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fe fc8e 	bl	80114b8 <ld_word>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	461a      	mov	r2, r3
 8012ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	891b      	ldrh	r3, [r3, #8]
 8012ba8:	f003 030f 	and.w	r3, r3, #15
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d001      	beq.n	8012bb6 <find_volume+0x25e>
 8012bb2:	230d      	movs	r3, #13
 8012bb4:	e119      	b.n	8012dea <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb8:	3334      	adds	r3, #52	; 0x34
 8012bba:	3313      	adds	r3, #19
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fe fc7b 	bl	80114b8 <ld_word>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d106      	bne.n	8012bda <find_volume+0x282>
 8012bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bce:	3334      	adds	r3, #52	; 0x34
 8012bd0:	3320      	adds	r3, #32
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fe fc88 	bl	80114e8 <ld_dword>
 8012bd8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bdc:	3334      	adds	r3, #52	; 0x34
 8012bde:	330e      	adds	r3, #14
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fe fc69 	bl	80114b8 <ld_word>
 8012be6:	4603      	mov	r3, r0
 8012be8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012bea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d101      	bne.n	8012bf4 <find_volume+0x29c>
 8012bf0:	230d      	movs	r3, #13
 8012bf2:	e0fa      	b.n	8012dea <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012bf4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bf8:	4413      	add	r3, r2
 8012bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bfc:	8912      	ldrh	r2, [r2, #8]
 8012bfe:	0912      	lsrs	r2, r2, #4
 8012c00:	b292      	uxth	r2, r2
 8012c02:	4413      	add	r3, r2
 8012c04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d204      	bcs.n	8012c18 <find_volume+0x2c0>
 8012c0e:	230d      	movs	r3, #13
 8012c10:	e0eb      	b.n	8012dea <find_volume+0x492>
 8012c12:	bf00      	nop
 8012c14:	20000eb0 	.word	0x20000eb0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1c:	1ad3      	subs	r3, r2, r3
 8012c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c20:	8952      	ldrh	r2, [r2, #10]
 8012c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c26:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d101      	bne.n	8012c32 <find_volume+0x2da>
 8012c2e:	230d      	movs	r3, #13
 8012c30:	e0db      	b.n	8012dea <find_volume+0x492>
		fmt = FS_FAT32;
 8012c32:	2303      	movs	r3, #3
 8012c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d802      	bhi.n	8012c48 <find_volume+0x2f0>
 8012c42:	2302      	movs	r3, #2
 8012c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d802      	bhi.n	8012c58 <find_volume+0x300>
 8012c52:	2301      	movs	r3, #1
 8012c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	1c9a      	adds	r2, r3, #2
 8012c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c64:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012c66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c6a:	441a      	add	r2, r3
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012c70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c74:	441a      	add	r2, r3
 8012c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c78:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c7e:	2b03      	cmp	r3, #3
 8012c80:	d11e      	bne.n	8012cc0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c84:	3334      	adds	r3, #52	; 0x34
 8012c86:	332a      	adds	r3, #42	; 0x2a
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7fe fc15 	bl	80114b8 <ld_word>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d001      	beq.n	8012c98 <find_volume+0x340>
 8012c94:	230d      	movs	r3, #13
 8012c96:	e0a8      	b.n	8012dea <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9a:	891b      	ldrh	r3, [r3, #8]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d001      	beq.n	8012ca4 <find_volume+0x34c>
 8012ca0:	230d      	movs	r3, #13
 8012ca2:	e0a2      	b.n	8012dea <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca6:	3334      	adds	r3, #52	; 0x34
 8012ca8:	332c      	adds	r3, #44	; 0x2c
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fe fc1c 	bl	80114e8 <ld_dword>
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb8:	699b      	ldr	r3, [r3, #24]
 8012cba:	009b      	lsls	r3, r3, #2
 8012cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8012cbe:	e01f      	b.n	8012d00 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc2:	891b      	ldrh	r3, [r3, #8]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d101      	bne.n	8012ccc <find_volume+0x374>
 8012cc8:	230d      	movs	r3, #13
 8012cca:	e08e      	b.n	8012dea <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cd2:	441a      	add	r2, r3
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cdc:	2b02      	cmp	r3, #2
 8012cde:	d103      	bne.n	8012ce8 <find_volume+0x390>
 8012ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce2:	699b      	ldr	r3, [r3, #24]
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	e00a      	b.n	8012cfe <find_volume+0x3a6>
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	699a      	ldr	r2, [r3, #24]
 8012cec:	4613      	mov	r3, r2
 8012cee:	005b      	lsls	r3, r3, #1
 8012cf0:	4413      	add	r3, r2
 8012cf2:	085a      	lsrs	r2, r3, #1
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	699b      	ldr	r3, [r3, #24]
 8012cf8:	f003 0301 	and.w	r3, r3, #1
 8012cfc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012cfe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d02:	69da      	ldr	r2, [r3, #28]
 8012d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012d0a:	0a5b      	lsrs	r3, r3, #9
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d201      	bcs.n	8012d14 <find_volume+0x3bc>
 8012d10:	230d      	movs	r3, #13
 8012d12:	e06a      	b.n	8012dea <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d16:	f04f 32ff 	mov.w	r2, #4294967295
 8012d1a:	615a      	str	r2, [r3, #20]
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	695a      	ldr	r2, [r3, #20]
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d26:	2280      	movs	r2, #128	; 0x80
 8012d28:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d2e:	2b03      	cmp	r3, #3
 8012d30:	d149      	bne.n	8012dc6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d34:	3334      	adds	r3, #52	; 0x34
 8012d36:	3330      	adds	r3, #48	; 0x30
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7fe fbbd 	bl	80114b8 <ld_word>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d140      	bne.n	8012dc6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d46:	3301      	adds	r3, #1
 8012d48:	4619      	mov	r1, r3
 8012d4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d4c:	f7fe fe96 	bl	8011a7c <move_window>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d137      	bne.n	8012dc6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8012d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d58:	2200      	movs	r2, #0
 8012d5a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5e:	3334      	adds	r3, #52	; 0x34
 8012d60:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fe fba7 	bl	80114b8 <ld_word>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d127      	bne.n	8012dc6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d78:	3334      	adds	r3, #52	; 0x34
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fe fbb4 	bl	80114e8 <ld_dword>
 8012d80:	4603      	mov	r3, r0
 8012d82:	4a1c      	ldr	r2, [pc, #112]	; (8012df4 <find_volume+0x49c>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d11e      	bne.n	8012dc6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8a:	3334      	adds	r3, #52	; 0x34
 8012d8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7fe fba9 	bl	80114e8 <ld_dword>
 8012d96:	4603      	mov	r3, r0
 8012d98:	4a17      	ldr	r2, [pc, #92]	; (8012df8 <find_volume+0x4a0>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d113      	bne.n	8012dc6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da0:	3334      	adds	r3, #52	; 0x34
 8012da2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fe fb9e 	bl	80114e8 <ld_dword>
 8012dac:	4602      	mov	r2, r0
 8012dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	3334      	adds	r3, #52	; 0x34
 8012db6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7fe fb94 	bl	80114e8 <ld_dword>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012dcc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012dce:	4b0b      	ldr	r3, [pc, #44]	; (8012dfc <find_volume+0x4a4>)
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	4b09      	ldr	r3, [pc, #36]	; (8012dfc <find_volume+0x4a4>)
 8012dd8:	801a      	strh	r2, [r3, #0]
 8012dda:	4b08      	ldr	r3, [pc, #32]	; (8012dfc <find_volume+0x4a4>)
 8012ddc:	881a      	ldrh	r2, [r3, #0]
 8012dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012de2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012de4:	f7fe fde2 	bl	80119ac <clear_lock>
#endif
	return FR_OK;
 8012de8:	2300      	movs	r3, #0
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3758      	adds	r7, #88	; 0x58
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	41615252 	.word	0x41615252
 8012df8:	61417272 	.word	0x61417272
 8012dfc:	20000eb4 	.word	0x20000eb4

08012e00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012e0a:	2309      	movs	r3, #9
 8012e0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d02e      	beq.n	8012e72 <validate+0x72>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d02a      	beq.n	8012e72 <validate+0x72>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d025      	beq.n	8012e72 <validate+0x72>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	889a      	ldrh	r2, [r3, #4]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	88db      	ldrh	r3, [r3, #6]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d11e      	bne.n	8012e72 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7fe fc3d 	bl	80116b8 <lock_fs>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d014      	beq.n	8012e6e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	785b      	ldrb	r3, [r3, #1]
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7fe fa96 	bl	801137c <disk_status>
 8012e50:	4603      	mov	r3, r0
 8012e52:	f003 0301 	and.w	r3, r3, #1
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d102      	bne.n	8012e60 <validate+0x60>
				res = FR_OK;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	73fb      	strb	r3, [r7, #15]
 8012e5e:	e008      	b.n	8012e72 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2100      	movs	r1, #0
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe fc3c 	bl	80116e4 <unlock_fs>
 8012e6c:	e001      	b.n	8012e72 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012e6e:	230f      	movs	r3, #15
 8012e70:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012e72:	7bfb      	ldrb	r3, [r7, #15]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d102      	bne.n	8012e7e <validate+0x7e>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	e000      	b.n	8012e80 <validate+0x80>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	683a      	ldr	r2, [r7, #0]
 8012e82:	6013      	str	r3, [r2, #0]
	return res;
 8012e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3710      	adds	r7, #16
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
	...

08012e90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b088      	sub	sp, #32
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	4613      	mov	r3, r2
 8012e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012ea2:	f107 0310 	add.w	r3, r7, #16
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff fcbb 	bl	8012822 <get_ldnumber>
 8012eac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	da01      	bge.n	8012eb8 <f_mount+0x28>
 8012eb4:	230b      	movs	r3, #11
 8012eb6:	e048      	b.n	8012f4a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012eb8:	4a26      	ldr	r2, [pc, #152]	; (8012f54 <f_mount+0xc4>)
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ec0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d00f      	beq.n	8012ee8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012ec8:	69b8      	ldr	r0, [r7, #24]
 8012eca:	f7fe fd6f 	bl	80119ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f001 f904 	bl	80140e0 <ff_del_syncobj>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d101      	bne.n	8012ee2 <f_mount+0x52>
 8012ede:	2302      	movs	r3, #2
 8012ee0:	e033      	b.n	8012f4a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00f      	beq.n	8012f0e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	b2da      	uxtb	r2, r3
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	330c      	adds	r3, #12
 8012efc:	4619      	mov	r1, r3
 8012efe:	4610      	mov	r0, r2
 8012f00:	f001 f8d3 	bl	80140aa <ff_cre_syncobj>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d101      	bne.n	8012f0e <f_mount+0x7e>
 8012f0a:	2302      	movs	r3, #2
 8012f0c:	e01d      	b.n	8012f4a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	4910      	ldr	r1, [pc, #64]	; (8012f54 <f_mount+0xc4>)
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d002      	beq.n	8012f24 <f_mount+0x94>
 8012f1e:	79fb      	ldrb	r3, [r7, #7]
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	d001      	beq.n	8012f28 <f_mount+0x98>
 8012f24:	2300      	movs	r3, #0
 8012f26:	e010      	b.n	8012f4a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012f28:	f107 010c 	add.w	r1, r7, #12
 8012f2c:	f107 0308 	add.w	r3, r7, #8
 8012f30:	2200      	movs	r2, #0
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7ff fd10 	bl	8012958 <find_volume>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	7dfa      	ldrb	r2, [r7, #23]
 8012f40:	4611      	mov	r1, r2
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fe fbce 	bl	80116e4 <unlock_fs>
 8012f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3720      	adds	r7, #32
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	20000eb0 	.word	0x20000eb0

08012f58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b098      	sub	sp, #96	; 0x60
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	4613      	mov	r3, r2
 8012f64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d101      	bne.n	8012f70 <f_open+0x18>
 8012f6c:	2309      	movs	r3, #9
 8012f6e:	e1b4      	b.n	80132da <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012f70:	79fb      	ldrb	r3, [r7, #7]
 8012f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012f78:	79fa      	ldrb	r2, [r7, #7]
 8012f7a:	f107 0110 	add.w	r1, r7, #16
 8012f7e:	f107 0308 	add.w	r3, r7, #8
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ff fce8 	bl	8012958 <find_volume>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f040 8191 	bne.w	80132ba <f_open+0x362>
		dj.obj.fs = fs;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f9c:	68ba      	ldr	r2, [r7, #8]
 8012f9e:	f107 0314 	add.w	r3, r7, #20
 8012fa2:	4611      	mov	r1, r2
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7ff fbcb 	bl	8012740 <follow_path>
 8012faa:	4603      	mov	r3, r0
 8012fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d11a      	bne.n	8012fee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012fb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012fbc:	b25b      	sxtb	r3, r3
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	da03      	bge.n	8012fca <f_open+0x72>
				res = FR_INVALID_NAME;
 8012fc2:	2306      	movs	r3, #6
 8012fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fc8:	e011      	b.n	8012fee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012fca:	79fb      	ldrb	r3, [r7, #7]
 8012fcc:	f023 0301 	bic.w	r3, r3, #1
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	bf14      	ite	ne
 8012fd4:	2301      	movne	r3, #1
 8012fd6:	2300      	moveq	r3, #0
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	461a      	mov	r2, r3
 8012fdc:	f107 0314 	add.w	r3, r7, #20
 8012fe0:	4611      	mov	r1, r2
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fe fb9a 	bl	801171c <chk_lock>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012fee:	79fb      	ldrb	r3, [r7, #7]
 8012ff0:	f003 031c 	and.w	r3, r3, #28
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d07f      	beq.n	80130f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d017      	beq.n	8013030 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013004:	2b04      	cmp	r3, #4
 8013006:	d10e      	bne.n	8013026 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013008:	f7fe fbe4 	bl	80117d4 <enq_lock>
 801300c:	4603      	mov	r3, r0
 801300e:	2b00      	cmp	r3, #0
 8013010:	d006      	beq.n	8013020 <f_open+0xc8>
 8013012:	f107 0314 	add.w	r3, r7, #20
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff facb 	bl	80125b2 <dir_register>
 801301c:	4603      	mov	r3, r0
 801301e:	e000      	b.n	8013022 <f_open+0xca>
 8013020:	2312      	movs	r3, #18
 8013022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013026:	79fb      	ldrb	r3, [r7, #7]
 8013028:	f043 0308 	orr.w	r3, r3, #8
 801302c:	71fb      	strb	r3, [r7, #7]
 801302e:	e010      	b.n	8013052 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013030:	7ebb      	ldrb	r3, [r7, #26]
 8013032:	f003 0311 	and.w	r3, r3, #17
 8013036:	2b00      	cmp	r3, #0
 8013038:	d003      	beq.n	8013042 <f_open+0xea>
					res = FR_DENIED;
 801303a:	2307      	movs	r3, #7
 801303c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013040:	e007      	b.n	8013052 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013042:	79fb      	ldrb	r3, [r7, #7]
 8013044:	f003 0304 	and.w	r3, r3, #4
 8013048:	2b00      	cmp	r3, #0
 801304a:	d002      	beq.n	8013052 <f_open+0xfa>
 801304c:	2308      	movs	r3, #8
 801304e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013056:	2b00      	cmp	r3, #0
 8013058:	d168      	bne.n	801312c <f_open+0x1d4>
 801305a:	79fb      	ldrb	r3, [r7, #7]
 801305c:	f003 0308 	and.w	r3, r3, #8
 8013060:	2b00      	cmp	r3, #0
 8013062:	d063      	beq.n	801312c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013064:	f7fd ff34 	bl	8010ed0 <get_fattime>
 8013068:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801306c:	330e      	adds	r3, #14
 801306e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013070:	4618      	mov	r0, r3
 8013072:	f7fe fa77 	bl	8011564 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013078:	3316      	adds	r3, #22
 801307a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe fa71 	bl	8011564 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013084:	330b      	adds	r3, #11
 8013086:	2220      	movs	r2, #32
 8013088:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801308e:	4611      	mov	r1, r2
 8013090:	4618      	mov	r0, r3
 8013092:	f7ff f9fa 	bl	801248a <ld_clust>
 8013096:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801309c:	2200      	movs	r2, #0
 801309e:	4618      	mov	r0, r3
 80130a0:	f7ff fa12 	bl	80124c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80130a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a6:	331c      	adds	r3, #28
 80130a8:	2100      	movs	r1, #0
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fe fa5a 	bl	8011564 <st_dword>
					fs->wflag = 1;
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	2201      	movs	r2, #1
 80130b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80130b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d037      	beq.n	801312c <f_open+0x1d4>
						dw = fs->winsect;
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80130c2:	f107 0314 	add.w	r3, r7, #20
 80130c6:	2200      	movs	r2, #0
 80130c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fe ff25 	bl	8011f1a <remove_chain>
 80130d0:	4603      	mov	r3, r0
 80130d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80130d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d126      	bne.n	801312c <f_open+0x1d4>
							res = move_window(fs, dw);
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fe fcca 	bl	8011a7c <move_window>
 80130e8:	4603      	mov	r3, r0
 80130ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80130f2:	3a01      	subs	r2, #1
 80130f4:	611a      	str	r2, [r3, #16]
 80130f6:	e019      	b.n	801312c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80130f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d115      	bne.n	801312c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013100:	7ebb      	ldrb	r3, [r7, #26]
 8013102:	f003 0310 	and.w	r3, r3, #16
 8013106:	2b00      	cmp	r3, #0
 8013108:	d003      	beq.n	8013112 <f_open+0x1ba>
					res = FR_NO_FILE;
 801310a:	2304      	movs	r3, #4
 801310c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013110:	e00c      	b.n	801312c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013112:	79fb      	ldrb	r3, [r7, #7]
 8013114:	f003 0302 	and.w	r3, r3, #2
 8013118:	2b00      	cmp	r3, #0
 801311a:	d007      	beq.n	801312c <f_open+0x1d4>
 801311c:	7ebb      	ldrb	r3, [r7, #26]
 801311e:	f003 0301 	and.w	r3, r3, #1
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <f_open+0x1d4>
						res = FR_DENIED;
 8013126:	2307      	movs	r3, #7
 8013128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801312c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013130:	2b00      	cmp	r3, #0
 8013132:	d128      	bne.n	8013186 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013134:	79fb      	ldrb	r3, [r7, #7]
 8013136:	f003 0308 	and.w	r3, r3, #8
 801313a:	2b00      	cmp	r3, #0
 801313c:	d003      	beq.n	8013146 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801313e:	79fb      	ldrb	r3, [r7, #7]
 8013140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013144:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013154:	79fb      	ldrb	r3, [r7, #7]
 8013156:	f023 0301 	bic.w	r3, r3, #1
 801315a:	2b00      	cmp	r3, #0
 801315c:	bf14      	ite	ne
 801315e:	2301      	movne	r3, #1
 8013160:	2300      	moveq	r3, #0
 8013162:	b2db      	uxtb	r3, r3
 8013164:	461a      	mov	r2, r3
 8013166:	f107 0314 	add.w	r3, r7, #20
 801316a:	4611      	mov	r1, r2
 801316c:	4618      	mov	r0, r3
 801316e:	f7fe fb53 	bl	8011818 <inc_lock>
 8013172:	4602      	mov	r2, r0
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d102      	bne.n	8013186 <f_open+0x22e>
 8013180:	2302      	movs	r3, #2
 8013182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801318a:	2b00      	cmp	r3, #0
 801318c:	f040 8095 	bne.w	80132ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013194:	4611      	mov	r1, r2
 8013196:	4618      	mov	r0, r3
 8013198:	f7ff f977 	bl	801248a <ld_clust>
 801319c:	4602      	mov	r2, r0
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80131a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131a4:	331c      	adds	r3, #28
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7fe f99e 	bl	80114e8 <ld_dword>
 80131ac:	4602      	mov	r2, r0
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2200      	movs	r2, #0
 80131b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80131b8:	693a      	ldr	r2, [r7, #16]
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	88da      	ldrh	r2, [r3, #6]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	79fa      	ldrb	r2, [r7, #7]
 80131ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	2200      	movs	r2, #0
 80131d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2200      	movs	r2, #0
 80131d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	2200      	movs	r2, #0
 80131dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	3330      	adds	r3, #48	; 0x30
 80131e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131e6:	2100      	movs	r1, #0
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7fe fa08 	bl	80115fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80131ee:	79fb      	ldrb	r3, [r7, #7]
 80131f0:	f003 0320 	and.w	r3, r3, #32
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d060      	beq.n	80132ba <f_open+0x362>
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d05c      	beq.n	80132ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	68da      	ldr	r2, [r3, #12]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	895b      	ldrh	r3, [r3, #10]
 801320c:	025b      	lsls	r3, r3, #9
 801320e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	657b      	str	r3, [r7, #84]	; 0x54
 801321c:	e016      	b.n	801324c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013222:	4618      	mov	r0, r3
 8013224:	f7fe fce5 	bl	8011bf2 <get_fat>
 8013228:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801322a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801322c:	2b01      	cmp	r3, #1
 801322e:	d802      	bhi.n	8013236 <f_open+0x2de>
 8013230:	2302      	movs	r3, #2
 8013232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801323c:	d102      	bne.n	8013244 <f_open+0x2ec>
 801323e:	2301      	movs	r3, #1
 8013240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	657b      	str	r3, [r7, #84]	; 0x54
 801324c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013250:	2b00      	cmp	r3, #0
 8013252:	d103      	bne.n	801325c <f_open+0x304>
 8013254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013258:	429a      	cmp	r2, r3
 801325a:	d8e0      	bhi.n	801321e <f_open+0x2c6>
				}
				fp->clust = clst;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013260:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013266:	2b00      	cmp	r3, #0
 8013268:	d127      	bne.n	80132ba <f_open+0x362>
 801326a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013270:	2b00      	cmp	r3, #0
 8013272:	d022      	beq.n	80132ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013278:	4618      	mov	r0, r3
 801327a:	f7fe fc9b 	bl	8011bb4 <clust2sect>
 801327e:	6478      	str	r0, [r7, #68]	; 0x44
 8013280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013282:	2b00      	cmp	r3, #0
 8013284:	d103      	bne.n	801328e <f_open+0x336>
						res = FR_INT_ERR;
 8013286:	2302      	movs	r3, #2
 8013288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801328c:	e015      	b.n	80132ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013290:	0a5a      	lsrs	r2, r3, #9
 8013292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013294:	441a      	add	r2, r3
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	7858      	ldrb	r0, [r3, #1]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	6a1a      	ldr	r2, [r3, #32]
 80132a8:	2301      	movs	r3, #1
 80132aa:	f7fe f8a7 	bl	80113fc <disk_read>
 80132ae:	4603      	mov	r3, r0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d002      	beq.n	80132ba <f_open+0x362>
 80132b4:	2301      	movs	r3, #1
 80132b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80132ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d002      	beq.n	80132c8 <f_open+0x370>
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2200      	movs	r2, #0
 80132c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80132ce:	4611      	mov	r1, r2
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fe fa07 	bl	80116e4 <unlock_fs>
 80132d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3760      	adds	r7, #96	; 0x60
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b08c      	sub	sp, #48	; 0x30
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	60f8      	str	r0, [r7, #12]
 80132ea:	60b9      	str	r1, [r7, #8]
 80132ec:	607a      	str	r2, [r7, #4]
 80132ee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2200      	movs	r2, #0
 80132f8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	f107 0210 	add.w	r2, r7, #16
 8013300:	4611      	mov	r1, r2
 8013302:	4618      	mov	r0, r3
 8013304:	f7ff fd7c 	bl	8012e00 <validate>
 8013308:	4603      	mov	r3, r0
 801330a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801330e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013312:	2b00      	cmp	r3, #0
 8013314:	d107      	bne.n	8013326 <f_write+0x44>
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	7d5b      	ldrb	r3, [r3, #21]
 801331a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801331e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013322:	2b00      	cmp	r3, #0
 8013324:	d009      	beq.n	801333a <f_write+0x58>
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801332c:	4611      	mov	r1, r2
 801332e:	4618      	mov	r0, r3
 8013330:	f7fe f9d8 	bl	80116e4 <unlock_fs>
 8013334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013338:	e173      	b.n	8013622 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	7d1b      	ldrb	r3, [r3, #20]
 801333e:	f003 0302 	and.w	r3, r3, #2
 8013342:	2b00      	cmp	r3, #0
 8013344:	d106      	bne.n	8013354 <f_write+0x72>
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2107      	movs	r1, #7
 801334a:	4618      	mov	r0, r3
 801334c:	f7fe f9ca 	bl	80116e4 <unlock_fs>
 8013350:	2307      	movs	r3, #7
 8013352:	e166      	b.n	8013622 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	699a      	ldr	r2, [r3, #24]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	441a      	add	r2, r3
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	699b      	ldr	r3, [r3, #24]
 8013360:	429a      	cmp	r2, r3
 8013362:	f080 814b 	bcs.w	80135fc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	699b      	ldr	r3, [r3, #24]
 801336a:	43db      	mvns	r3, r3
 801336c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801336e:	e145      	b.n	80135fc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	699b      	ldr	r3, [r3, #24]
 8013374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013378:	2b00      	cmp	r3, #0
 801337a:	f040 8101 	bne.w	8013580 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	699b      	ldr	r3, [r3, #24]
 8013382:	0a5b      	lsrs	r3, r3, #9
 8013384:	693a      	ldr	r2, [r7, #16]
 8013386:	8952      	ldrh	r2, [r2, #10]
 8013388:	3a01      	subs	r2, #1
 801338a:	4013      	ands	r3, r2
 801338c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d14d      	bne.n	8013430 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	699b      	ldr	r3, [r3, #24]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d10c      	bne.n	80133b6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80133a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d11a      	bne.n	80133de <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2100      	movs	r1, #0
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fe fe19 	bl	8011fe4 <create_chain>
 80133b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80133b4:	e013      	b.n	80133de <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d007      	beq.n	80133ce <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	699b      	ldr	r3, [r3, #24]
 80133c2:	4619      	mov	r1, r3
 80133c4:	68f8      	ldr	r0, [r7, #12]
 80133c6:	f7fe fea5 	bl	8012114 <clmt_clust>
 80133ca:	62b8      	str	r0, [r7, #40]	; 0x28
 80133cc:	e007      	b.n	80133de <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80133ce:	68fa      	ldr	r2, [r7, #12]
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	69db      	ldr	r3, [r3, #28]
 80133d4:	4619      	mov	r1, r3
 80133d6:	4610      	mov	r0, r2
 80133d8:	f7fe fe04 	bl	8011fe4 <create_chain>
 80133dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	f000 8110 	beq.w	8013606 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80133e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d109      	bne.n	8013400 <f_write+0x11e>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2202      	movs	r2, #2
 80133f0:	755a      	strb	r2, [r3, #21]
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	2102      	movs	r1, #2
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fe f974 	bl	80116e4 <unlock_fs>
 80133fc:	2302      	movs	r3, #2
 80133fe:	e110      	b.n	8013622 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013406:	d109      	bne.n	801341c <f_write+0x13a>
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2201      	movs	r2, #1
 801340c:	755a      	strb	r2, [r3, #21]
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	2101      	movs	r1, #1
 8013412:	4618      	mov	r0, r3
 8013414:	f7fe f966 	bl	80116e4 <unlock_fs>
 8013418:	2301      	movs	r3, #1
 801341a:	e102      	b.n	8013622 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013420:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	689b      	ldr	r3, [r3, #8]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d102      	bne.n	8013430 <f_write+0x14e>
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801342e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	7d1b      	ldrb	r3, [r3, #20]
 8013434:	b25b      	sxtb	r3, r3
 8013436:	2b00      	cmp	r3, #0
 8013438:	da1d      	bge.n	8013476 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	7858      	ldrb	r0, [r3, #1]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6a1a      	ldr	r2, [r3, #32]
 8013448:	2301      	movs	r3, #1
 801344a:	f7fd fff7 	bl	801143c <disk_write>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d009      	beq.n	8013468 <f_write+0x186>
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2201      	movs	r2, #1
 8013458:	755a      	strb	r2, [r3, #21]
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	2101      	movs	r1, #1
 801345e:	4618      	mov	r0, r3
 8013460:	f7fe f940 	bl	80116e4 <unlock_fs>
 8013464:	2301      	movs	r3, #1
 8013466:	e0dc      	b.n	8013622 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	7d1b      	ldrb	r3, [r3, #20]
 801346c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013470:	b2da      	uxtb	r2, r3
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013476:	693a      	ldr	r2, [r7, #16]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	69db      	ldr	r3, [r3, #28]
 801347c:	4619      	mov	r1, r3
 801347e:	4610      	mov	r0, r2
 8013480:	f7fe fb98 	bl	8011bb4 <clust2sect>
 8013484:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d109      	bne.n	80134a0 <f_write+0x1be>
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2202      	movs	r2, #2
 8013490:	755a      	strb	r2, [r3, #21]
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	2102      	movs	r1, #2
 8013496:	4618      	mov	r0, r3
 8013498:	f7fe f924 	bl	80116e4 <unlock_fs>
 801349c:	2302      	movs	r3, #2
 801349e:	e0c0      	b.n	8013622 <f_write+0x340>
			sect += csect;
 80134a0:	697a      	ldr	r2, [r7, #20]
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	4413      	add	r3, r2
 80134a6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	0a5b      	lsrs	r3, r3, #9
 80134ac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80134ae:	6a3b      	ldr	r3, [r7, #32]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d041      	beq.n	8013538 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80134b4:	69ba      	ldr	r2, [r7, #24]
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	4413      	add	r3, r2
 80134ba:	693a      	ldr	r2, [r7, #16]
 80134bc:	8952      	ldrh	r2, [r2, #10]
 80134be:	4293      	cmp	r3, r2
 80134c0:	d905      	bls.n	80134ce <f_write+0x1ec>
					cc = fs->csize - csect;
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	895b      	ldrh	r3, [r3, #10]
 80134c6:	461a      	mov	r2, r3
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	1ad3      	subs	r3, r2, r3
 80134cc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	7858      	ldrb	r0, [r3, #1]
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	697a      	ldr	r2, [r7, #20]
 80134d6:	69f9      	ldr	r1, [r7, #28]
 80134d8:	f7fd ffb0 	bl	801143c <disk_write>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d009      	beq.n	80134f6 <f_write+0x214>
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2201      	movs	r2, #1
 80134e6:	755a      	strb	r2, [r3, #21]
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	2101      	movs	r1, #1
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fe f8f9 	bl	80116e4 <unlock_fs>
 80134f2:	2301      	movs	r3, #1
 80134f4:	e095      	b.n	8013622 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6a1a      	ldr	r2, [r3, #32]
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	1ad3      	subs	r3, r2, r3
 80134fe:	6a3a      	ldr	r2, [r7, #32]
 8013500:	429a      	cmp	r2, r3
 8013502:	d915      	bls.n	8013530 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6a1a      	ldr	r2, [r3, #32]
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	1ad3      	subs	r3, r2, r3
 8013512:	025b      	lsls	r3, r3, #9
 8013514:	69fa      	ldr	r2, [r7, #28]
 8013516:	4413      	add	r3, r2
 8013518:	f44f 7200 	mov.w	r2, #512	; 0x200
 801351c:	4619      	mov	r1, r3
 801351e:	f7fe f84d 	bl	80115bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	7d1b      	ldrb	r3, [r3, #20]
 8013526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801352a:	b2da      	uxtb	r2, r3
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013530:	6a3b      	ldr	r3, [r7, #32]
 8013532:	025b      	lsls	r3, r3, #9
 8013534:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013536:	e044      	b.n	80135c2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	6a1b      	ldr	r3, [r3, #32]
 801353c:	697a      	ldr	r2, [r7, #20]
 801353e:	429a      	cmp	r2, r3
 8013540:	d01b      	beq.n	801357a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	699a      	ldr	r2, [r3, #24]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801354a:	429a      	cmp	r2, r3
 801354c:	d215      	bcs.n	801357a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	7858      	ldrb	r0, [r3, #1]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013558:	2301      	movs	r3, #1
 801355a:	697a      	ldr	r2, [r7, #20]
 801355c:	f7fd ff4e 	bl	80113fc <disk_read>
 8013560:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013562:	2b00      	cmp	r3, #0
 8013564:	d009      	beq.n	801357a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2201      	movs	r2, #1
 801356a:	755a      	strb	r2, [r3, #21]
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	2101      	movs	r1, #1
 8013570:	4618      	mov	r0, r3
 8013572:	f7fe f8b7 	bl	80116e4 <unlock_fs>
 8013576:	2301      	movs	r3, #1
 8013578:	e053      	b.n	8013622 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	697a      	ldr	r2, [r7, #20]
 801357e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	699b      	ldr	r3, [r3, #24]
 8013584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013588:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801358c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	429a      	cmp	r2, r3
 8013594:	d901      	bls.n	801359a <f_write+0x2b8>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	699b      	ldr	r3, [r3, #24]
 80135a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135a8:	4413      	add	r3, r2
 80135aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135ac:	69f9      	ldr	r1, [r7, #28]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fe f804 	bl	80115bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	7d1b      	ldrb	r3, [r3, #20]
 80135b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80135bc:	b2da      	uxtb	r2, r3
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80135c2:	69fa      	ldr	r2, [r7, #28]
 80135c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c6:	4413      	add	r3, r2
 80135c8:	61fb      	str	r3, [r7, #28]
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	699a      	ldr	r2, [r3, #24]
 80135ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d0:	441a      	add	r2, r3
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	619a      	str	r2, [r3, #24]
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	68da      	ldr	r2, [r3, #12]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	699b      	ldr	r3, [r3, #24]
 80135de:	429a      	cmp	r2, r3
 80135e0:	bf38      	it	cc
 80135e2:	461a      	movcc	r2, r3
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	60da      	str	r2, [r3, #12]
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ee:	441a      	add	r2, r3
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	f47f aeb6 	bne.w	8013370 <f_write+0x8e>
 8013604:	e000      	b.n	8013608 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013606:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	7d1b      	ldrb	r3, [r3, #20]
 801360c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013610:	b2da      	uxtb	r2, r3
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013616:	693b      	ldr	r3, [r7, #16]
 8013618:	2100      	movs	r1, #0
 801361a:	4618      	mov	r0, r3
 801361c:	f7fe f862 	bl	80116e4 <unlock_fs>
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3730      	adds	r7, #48	; 0x30
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801362a:	b580      	push	{r7, lr}
 801362c:	b086      	sub	sp, #24
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f107 0208 	add.w	r2, r7, #8
 8013638:	4611      	mov	r1, r2
 801363a:	4618      	mov	r0, r3
 801363c:	f7ff fbe0 	bl	8012e00 <validate>
 8013640:	4603      	mov	r3, r0
 8013642:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013644:	7dfb      	ldrb	r3, [r7, #23]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d16d      	bne.n	8013726 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	7d1b      	ldrb	r3, [r3, #20]
 801364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013652:	2b00      	cmp	r3, #0
 8013654:	d067      	beq.n	8013726 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	7d1b      	ldrb	r3, [r3, #20]
 801365a:	b25b      	sxtb	r3, r3
 801365c:	2b00      	cmp	r3, #0
 801365e:	da1a      	bge.n	8013696 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	7858      	ldrb	r0, [r3, #1]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6a1a      	ldr	r2, [r3, #32]
 801366e:	2301      	movs	r3, #1
 8013670:	f7fd fee4 	bl	801143c <disk_write>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d006      	beq.n	8013688 <f_sync+0x5e>
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	2101      	movs	r1, #1
 801367e:	4618      	mov	r0, r3
 8013680:	f7fe f830 	bl	80116e4 <unlock_fs>
 8013684:	2301      	movs	r3, #1
 8013686:	e055      	b.n	8013734 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	7d1b      	ldrb	r3, [r3, #20]
 801368c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013690:	b2da      	uxtb	r2, r3
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013696:	f7fd fc1b 	bl	8010ed0 <get_fattime>
 801369a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a2:	4619      	mov	r1, r3
 80136a4:	4610      	mov	r0, r2
 80136a6:	f7fe f9e9 	bl	8011a7c <move_window>
 80136aa:	4603      	mov	r3, r0
 80136ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80136ae:	7dfb      	ldrb	r3, [r7, #23]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d138      	bne.n	8013726 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	330b      	adds	r3, #11
 80136be:	781a      	ldrb	r2, [r3, #0]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	330b      	adds	r3, #11
 80136c4:	f042 0220 	orr.w	r2, r2, #32
 80136c8:	b2d2      	uxtb	r2, r2
 80136ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6818      	ldr	r0, [r3, #0]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	689b      	ldr	r3, [r3, #8]
 80136d4:	461a      	mov	r2, r3
 80136d6:	68f9      	ldr	r1, [r7, #12]
 80136d8:	f7fe fef6 	bl	80124c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f103 021c 	add.w	r2, r3, #28
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	68db      	ldr	r3, [r3, #12]
 80136e6:	4619      	mov	r1, r3
 80136e8:	4610      	mov	r0, r2
 80136ea:	f7fd ff3b 	bl	8011564 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	3316      	adds	r3, #22
 80136f2:	6939      	ldr	r1, [r7, #16]
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7fd ff35 	bl	8011564 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	3312      	adds	r3, #18
 80136fe:	2100      	movs	r1, #0
 8013700:	4618      	mov	r0, r3
 8013702:	f7fd ff14 	bl	801152e <st_word>
					fs->wflag = 1;
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2201      	movs	r2, #1
 801370a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	4618      	mov	r0, r3
 8013710:	f7fe f9e2 	bl	8011ad8 <sync_fs>
 8013714:	4603      	mov	r3, r0
 8013716:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	7d1b      	ldrb	r3, [r3, #20]
 801371c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013720:	b2da      	uxtb	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	7dfa      	ldrb	r2, [r7, #23]
 801372a:	4611      	mov	r1, r2
 801372c:	4618      	mov	r0, r3
 801372e:	f7fd ffd9 	bl	80116e4 <unlock_fs>
 8013732:	7dfb      	ldrb	r3, [r7, #23]
}
 8013734:	4618      	mov	r0, r3
 8013736:	3718      	adds	r7, #24
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f7ff ff70 	bl	801362a <f_sync>
 801374a:	4603      	mov	r3, r0
 801374c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801374e:	7bfb      	ldrb	r3, [r7, #15]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d11d      	bne.n	8013790 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f107 0208 	add.w	r2, r7, #8
 801375a:	4611      	mov	r1, r2
 801375c:	4618      	mov	r0, r3
 801375e:	f7ff fb4f 	bl	8012e00 <validate>
 8013762:	4603      	mov	r3, r0
 8013764:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013766:	7bfb      	ldrb	r3, [r7, #15]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d111      	bne.n	8013790 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	691b      	ldr	r3, [r3, #16]
 8013770:	4618      	mov	r0, r3
 8013772:	f7fe f8df 	bl	8011934 <dec_lock>
 8013776:	4603      	mov	r3, r0
 8013778:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801377a:	7bfb      	ldrb	r3, [r7, #15]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d102      	bne.n	8013786 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	2100      	movs	r1, #0
 801378a:	4618      	mov	r0, r3
 801378c:	f7fd ffaa 	bl	80116e4 <unlock_fs>
#endif
		}
	}
	return res;
 8013790:	7bfb      	ldrb	r3, [r7, #15]
}
 8013792:	4618      	mov	r0, r3
 8013794:	3710      	adds	r7, #16
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
	...

0801379c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 801379c:	b590      	push	{r4, r7, lr}
 801379e:	b09d      	sub	sp, #116	; 0x74
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	607a      	str	r2, [r7, #4]
 80137a6:	603b      	str	r3, [r7, #0]
 80137a8:	460b      	mov	r3, r1
 80137aa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80137ac:	2301      	movs	r3, #1
 80137ae:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80137b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137b4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80137b6:	f107 030c 	add.w	r3, r7, #12
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7ff f831 	bl	8012822 <get_ldnumber>
 80137c0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80137c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	da02      	bge.n	80137ce <f_mkfs+0x32>
 80137c8:	230b      	movs	r3, #11
 80137ca:	f000 bc0d 	b.w	8013fe8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80137ce:	4a94      	ldr	r2, [pc, #592]	; (8013a20 <f_mkfs+0x284>)
 80137d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d005      	beq.n	80137e6 <f_mkfs+0x4a>
 80137da:	4a91      	ldr	r2, [pc, #580]	; (8013a20 <f_mkfs+0x284>)
 80137dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137e2:	2200      	movs	r2, #0
 80137e4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80137e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80137ec:	2300      	movs	r3, #0
 80137ee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80137f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7fd fdda 	bl	80113b0 <disk_initialize>
 80137fc:	4603      	mov	r3, r0
 80137fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8013802:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8013806:	f003 0301 	and.w	r3, r3, #1
 801380a:	2b00      	cmp	r3, #0
 801380c:	d001      	beq.n	8013812 <f_mkfs+0x76>
 801380e:	2303      	movs	r3, #3
 8013810:	e3ea      	b.n	8013fe8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013812:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8013816:	f003 0304 	and.w	r3, r3, #4
 801381a:	2b00      	cmp	r3, #0
 801381c:	d001      	beq.n	8013822 <f_mkfs+0x86>
 801381e:	230a      	movs	r3, #10
 8013820:	e3e2      	b.n	8013fe8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013822:	f107 0214 	add.w	r2, r7, #20
 8013826:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801382a:	2103      	movs	r1, #3
 801382c:	4618      	mov	r0, r3
 801382e:	f7fd fe25 	bl	801147c <disk_ioctl>
 8013832:	4603      	mov	r3, r0
 8013834:	2b00      	cmp	r3, #0
 8013836:	d10c      	bne.n	8013852 <f_mkfs+0xb6>
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d009      	beq.n	8013852 <f_mkfs+0xb6>
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013844:	d805      	bhi.n	8013852 <f_mkfs+0xb6>
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	1e5a      	subs	r2, r3, #1
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	4013      	ands	r3, r2
 801384e:	2b00      	cmp	r3, #0
 8013850:	d001      	beq.n	8013856 <f_mkfs+0xba>
 8013852:	2301      	movs	r3, #1
 8013854:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8013856:	f44f 7300 	mov.w	r3, #512	; 0x200
 801385a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d003      	beq.n	801386a <f_mkfs+0xce>
 8013862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	429a      	cmp	r2, r3
 8013868:	d309      	bcc.n	801387e <f_mkfs+0xe2>
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013870:	d805      	bhi.n	801387e <f_mkfs+0xe2>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	1e5a      	subs	r2, r3, #1
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4013      	ands	r3, r2
 801387a:	2b00      	cmp	r3, #0
 801387c:	d001      	beq.n	8013882 <f_mkfs+0xe6>
 801387e:	2313      	movs	r3, #19
 8013880:	e3b2      	b.n	8013fe8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8013882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	fbb2 f3f3 	udiv	r3, r2, r3
 801388a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8013890:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013892:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013896:	fbb2 f3f3 	udiv	r3, r2, r3
 801389a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 801389c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a0:	fb02 f303 	mul.w	r3, r2, r3
 80138a4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80138a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d101      	bne.n	80138b0 <f_mkfs+0x114>
 80138ac:	230e      	movs	r3, #14
 80138ae:	e39b      	b.n	8013fe8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80138b0:	f107 0210 	add.w	r2, r7, #16
 80138b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80138b8:	2101      	movs	r1, #1
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fd fdde 	bl	801147c <disk_ioctl>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d001      	beq.n	80138ca <f_mkfs+0x12e>
 80138c6:	2301      	movs	r3, #1
 80138c8:	e38e      	b.n	8013fe8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80138ca:	7afb      	ldrb	r3, [r7, #11]
 80138cc:	f003 0308 	and.w	r3, r3, #8
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d001      	beq.n	80138d8 <f_mkfs+0x13c>
 80138d4:	2300      	movs	r3, #0
 80138d6:	e000      	b.n	80138da <f_mkfs+0x13e>
 80138d8:	233f      	movs	r3, #63	; 0x3f
 80138da:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d901      	bls.n	80138e8 <f_mkfs+0x14c>
 80138e4:	230e      	movs	r3, #14
 80138e6:	e37f      	b.n	8013fe8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80138e8:	693a      	ldr	r2, [r7, #16]
 80138ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ec:	1ad3      	subs	r3, r2, r3
 80138ee:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	2b7f      	cmp	r3, #127	; 0x7f
 80138f4:	d801      	bhi.n	80138fa <f_mkfs+0x15e>
 80138f6:	230e      	movs	r3, #14
 80138f8:	e376      	b.n	8013fe8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2b80      	cmp	r3, #128	; 0x80
 80138fe:	d901      	bls.n	8013904 <f_mkfs+0x168>
 8013900:	2313      	movs	r3, #19
 8013902:	e371      	b.n	8013fe8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8013904:	7afb      	ldrb	r3, [r7, #11]
 8013906:	f003 0302 	and.w	r3, r3, #2
 801390a:	2b00      	cmp	r3, #0
 801390c:	d00d      	beq.n	801392a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801390e:	7afb      	ldrb	r3, [r7, #11]
 8013910:	f003 0307 	and.w	r3, r3, #7
 8013914:	2b02      	cmp	r3, #2
 8013916:	d004      	beq.n	8013922 <f_mkfs+0x186>
 8013918:	7afb      	ldrb	r3, [r7, #11]
 801391a:	f003 0301 	and.w	r3, r3, #1
 801391e:	2b00      	cmp	r3, #0
 8013920:	d103      	bne.n	801392a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8013922:	2303      	movs	r3, #3
 8013924:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013928:	e009      	b.n	801393e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801392a:	7afb      	ldrb	r3, [r7, #11]
 801392c:	f003 0301 	and.w	r3, r3, #1
 8013930:	2b00      	cmp	r3, #0
 8013932:	d101      	bne.n	8013938 <f_mkfs+0x19c>
 8013934:	2313      	movs	r3, #19
 8013936:	e357      	b.n	8013fe8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8013938:	2302      	movs	r3, #2
 801393a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8013942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013946:	2b03      	cmp	r3, #3
 8013948:	d13c      	bne.n	80139c4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801394c:	2b00      	cmp	r3, #0
 801394e:	d11b      	bne.n	8013988 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	0c5b      	lsrs	r3, r3, #17
 8013954:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013956:	2300      	movs	r3, #0
 8013958:	64bb      	str	r3, [r7, #72]	; 0x48
 801395a:	2301      	movs	r3, #1
 801395c:	653b      	str	r3, [r7, #80]	; 0x50
 801395e:	e005      	b.n	801396c <f_mkfs+0x1d0>
 8013960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013962:	3301      	adds	r3, #1
 8013964:	64bb      	str	r3, [r7, #72]	; 0x48
 8013966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013968:	005b      	lsls	r3, r3, #1
 801396a:	653b      	str	r3, [r7, #80]	; 0x50
 801396c:	4a2d      	ldr	r2, [pc, #180]	; (8013a24 <f_mkfs+0x288>)
 801396e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d007      	beq.n	8013988 <f_mkfs+0x1ec>
 8013978:	4a2a      	ldr	r2, [pc, #168]	; (8013a24 <f_mkfs+0x288>)
 801397a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801397c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013980:	461a      	mov	r2, r3
 8013982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013984:	4293      	cmp	r3, r2
 8013986:	d2eb      	bcs.n	8013960 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8013988:	693a      	ldr	r2, [r7, #16]
 801398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013990:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8013992:	6a3b      	ldr	r3, [r7, #32]
 8013994:	3302      	adds	r3, #2
 8013996:	009a      	lsls	r2, r3, #2
 8013998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801399a:	4413      	add	r3, r2
 801399c:	1e5a      	subs	r2, r3, #1
 801399e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80139a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80139a4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80139a6:	2320      	movs	r3, #32
 80139a8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80139aa:	2300      	movs	r3, #0
 80139ac:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80139b4:	4293      	cmp	r3, r2
 80139b6:	d903      	bls.n	80139c0 <f_mkfs+0x224>
 80139b8:	6a3b      	ldr	r3, [r7, #32]
 80139ba:	4a1b      	ldr	r2, [pc, #108]	; (8013a28 <f_mkfs+0x28c>)
 80139bc:	4293      	cmp	r3, r2
 80139be:	d952      	bls.n	8013a66 <f_mkfs+0x2ca>
 80139c0:	230e      	movs	r3, #14
 80139c2:	e311      	b.n	8013fe8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80139c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d11b      	bne.n	8013a02 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	0b1b      	lsrs	r3, r3, #12
 80139ce:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80139d0:	2300      	movs	r3, #0
 80139d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80139d4:	2301      	movs	r3, #1
 80139d6:	653b      	str	r3, [r7, #80]	; 0x50
 80139d8:	e005      	b.n	80139e6 <f_mkfs+0x24a>
 80139da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139dc:	3301      	adds	r3, #1
 80139de:	64bb      	str	r3, [r7, #72]	; 0x48
 80139e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139e2:	005b      	lsls	r3, r3, #1
 80139e4:	653b      	str	r3, [r7, #80]	; 0x50
 80139e6:	4a11      	ldr	r2, [pc, #68]	; (8013a2c <f_mkfs+0x290>)
 80139e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d007      	beq.n	8013a02 <f_mkfs+0x266>
 80139f2:	4a0e      	ldr	r2, [pc, #56]	; (8013a2c <f_mkfs+0x290>)
 80139f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139fa:	461a      	mov	r2, r3
 80139fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d2eb      	bcs.n	80139da <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8013a02:	693a      	ldr	r2, [r7, #16]
 8013a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a0a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8013a0c:	6a3b      	ldr	r3, [r7, #32]
 8013a0e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013a12:	4293      	cmp	r3, r2
 8013a14:	d90c      	bls.n	8013a30 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8013a16:	6a3b      	ldr	r3, [r7, #32]
 8013a18:	3302      	adds	r3, #2
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013a1e:	e012      	b.n	8013a46 <f_mkfs+0x2aa>
 8013a20:	20000eb0 	.word	0x20000eb0
 8013a24:	080248e4 	.word	0x080248e4
 8013a28:	0ffffff5 	.word	0x0ffffff5
 8013a2c:	080248f4 	.word	0x080248f4
				} else {
					fmt = FS_FAT12;
 8013a30:	2301      	movs	r3, #1
 8013a32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8013a36:	6a3a      	ldr	r2, [r7, #32]
 8013a38:	4613      	mov	r3, r2
 8013a3a:	005b      	lsls	r3, r3, #1
 8013a3c:	4413      	add	r3, r2
 8013a3e:	3301      	adds	r3, #1
 8013a40:	085b      	lsrs	r3, r3, #1
 8013a42:	3303      	adds	r3, #3
 8013a44:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8013a46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a4a:	4413      	add	r3, r2
 8013a4c:	1e5a      	subs	r2, r3, #1
 8013a4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a54:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8013a56:	2301      	movs	r3, #1
 8013a58:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8013a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a5c:	015a      	lsls	r2, r3, #5
 8013a5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a64:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8013a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a6a:	4413      	add	r3, r2
 8013a6c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8013a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a72:	fb03 f202 	mul.w	r2, r3, r2
 8013a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a78:	4413      	add	r3, r2
 8013a7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013a7c:	4413      	add	r3, r2
 8013a7e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8013a80:	697a      	ldr	r2, [r7, #20]
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	4413      	add	r3, r2
 8013a86:	1e5a      	subs	r2, r3, #1
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	425b      	negs	r3, r3
 8013a8c:	401a      	ands	r2, r3
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	1ad3      	subs	r3, r2, r3
 8013a92:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8013a94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013a98:	2b03      	cmp	r3, #3
 8013a9a:	d108      	bne.n	8013aae <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8013a9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013aa0:	4413      	add	r3, r2
 8013aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8013aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013aa8:	4413      	add	r3, r2
 8013aaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8013aac:	e006      	b.n	8013abc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8013aae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ab6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ab8:	4413      	add	r3, r2
 8013aba:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8013abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013abe:	011a      	lsls	r2, r3, #4
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	441a      	add	r2, r3
 8013ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac6:	1ad2      	subs	r2, r2, r3
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d901      	bls.n	8013ad2 <f_mkfs+0x336>
 8013ace:	230e      	movs	r3, #14
 8013ad0:	e28a      	b.n	8013fe8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8013ad2:	693a      	ldr	r2, [r7, #16]
 8013ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ad6:	1ad2      	subs	r2, r2, r3
 8013ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013adc:	fb01 f303 	mul.w	r3, r1, r3
 8013ae0:	1ad2      	subs	r2, r2, r3
 8013ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ae4:	1ad2      	subs	r2, r2, r3
 8013ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8013aec:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8013aee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013af2:	2b03      	cmp	r3, #3
 8013af4:	d10f      	bne.n	8013b16 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8013af6:	6a3b      	ldr	r3, [r7, #32]
 8013af8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d80a      	bhi.n	8013b16 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d105      	bne.n	8013b12 <f_mkfs+0x376>
 8013b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b08:	085b      	lsrs	r3, r3, #1
 8013b0a:	607b      	str	r3, [r7, #4]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d144      	bne.n	8013b9c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8013b12:	230e      	movs	r3, #14
 8013b14:	e268      	b.n	8013fe8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8013b16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013b1a:	2b02      	cmp	r3, #2
 8013b1c:	d133      	bne.n	8013b86 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013b1e:	6a3b      	ldr	r3, [r7, #32]
 8013b20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d91e      	bls.n	8013b66 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d107      	bne.n	8013b3e <f_mkfs+0x3a2>
 8013b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b30:	005b      	lsls	r3, r3, #1
 8013b32:	2b40      	cmp	r3, #64	; 0x40
 8013b34:	d803      	bhi.n	8013b3e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8013b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b38:	005b      	lsls	r3, r3, #1
 8013b3a:	607b      	str	r3, [r7, #4]
 8013b3c:	e033      	b.n	8013ba6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8013b3e:	7afb      	ldrb	r3, [r7, #11]
 8013b40:	f003 0302 	and.w	r3, r3, #2
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d003      	beq.n	8013b50 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013b48:	2303      	movs	r3, #3
 8013b4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8013b4e:	e02a      	b.n	8013ba6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d105      	bne.n	8013b62 <f_mkfs+0x3c6>
 8013b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b58:	005b      	lsls	r3, r3, #1
 8013b5a:	607b      	str	r3, [r7, #4]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2b80      	cmp	r3, #128	; 0x80
 8013b60:	d91e      	bls.n	8013ba0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8013b62:	230e      	movs	r3, #14
 8013b64:	e240      	b.n	8013fe8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8013b66:	6a3b      	ldr	r3, [r7, #32]
 8013b68:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d80a      	bhi.n	8013b86 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d105      	bne.n	8013b82 <f_mkfs+0x3e6>
 8013b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b78:	005b      	lsls	r3, r3, #1
 8013b7a:	607b      	str	r3, [r7, #4]
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b80      	cmp	r3, #128	; 0x80
 8013b80:	d910      	bls.n	8013ba4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8013b82:	230e      	movs	r3, #14
 8013b84:	e230      	b.n	8013fe8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8013b86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d10c      	bne.n	8013ba8 <f_mkfs+0x40c>
 8013b8e:	6a3b      	ldr	r3, [r7, #32]
 8013b90:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d907      	bls.n	8013ba8 <f_mkfs+0x40c>
 8013b98:	230e      	movs	r3, #14
 8013b9a:	e225      	b.n	8013fe8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013b9c:	bf00      	nop
 8013b9e:	e6ce      	b.n	801393e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013ba0:	bf00      	nop
 8013ba2:	e6cc      	b.n	801393e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013ba4:	bf00      	nop
			pau = au;
 8013ba6:	e6ca      	b.n	801393e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8013ba8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013baa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013bac:	461a      	mov	r2, r3
 8013bae:	2100      	movs	r1, #0
 8013bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bb2:	f7fd fd24 	bl	80115fe <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8013bb6:	220b      	movs	r2, #11
 8013bb8:	49b2      	ldr	r1, [pc, #712]	; (8013e84 <f_mkfs+0x6e8>)
 8013bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bbc:	f7fd fcfe 	bl	80115bc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8013bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc2:	330b      	adds	r3, #11
 8013bc4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fd fcb0 	bl	801152e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8013bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd0:	330d      	adds	r3, #13
 8013bd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013bd4:	b2d2      	uxtb	r2, r2
 8013bd6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8013bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bda:	330e      	adds	r3, #14
 8013bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013bde:	b292      	uxth	r2, r2
 8013be0:	4611      	mov	r1, r2
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fd fca3 	bl	801152e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8013be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bea:	3310      	adds	r3, #16
 8013bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bee:	b2d2      	uxtb	r2, r2
 8013bf0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8013bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf4:	f103 0211 	add.w	r2, r3, #17
 8013bf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013bfc:	2b03      	cmp	r3, #3
 8013bfe:	d002      	beq.n	8013c06 <f_mkfs+0x46a>
 8013c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	e000      	b.n	8013c08 <f_mkfs+0x46c>
 8013c06:	2300      	movs	r3, #0
 8013c08:	4619      	mov	r1, r3
 8013c0a:	4610      	mov	r0, r2
 8013c0c:	f7fd fc8f 	bl	801152e <st_word>
		if (sz_vol < 0x10000) {
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c16:	d208      	bcs.n	8013c2a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c1a:	3313      	adds	r3, #19
 8013c1c:	693a      	ldr	r2, [r7, #16]
 8013c1e:	b292      	uxth	r2, r2
 8013c20:	4611      	mov	r1, r2
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fd fc83 	bl	801152e <st_word>
 8013c28:	e006      	b.n	8013c38 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c2c:	3320      	adds	r3, #32
 8013c2e:	693a      	ldr	r2, [r7, #16]
 8013c30:	4611      	mov	r1, r2
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fd fc96 	bl	8011564 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8013c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c3a:	3315      	adds	r3, #21
 8013c3c:	22f8      	movs	r2, #248	; 0xf8
 8013c3e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c42:	3318      	adds	r3, #24
 8013c44:	213f      	movs	r1, #63	; 0x3f
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fd fc71 	bl	801152e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c4e:	331a      	adds	r3, #26
 8013c50:	21ff      	movs	r1, #255	; 0xff
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7fd fc6b 	bl	801152e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c5a:	331c      	adds	r3, #28
 8013c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7fd fc80 	bl	8011564 <st_dword>
		if (fmt == FS_FAT32) {
 8013c64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013c68:	2b03      	cmp	r3, #3
 8013c6a:	d131      	bne.n	8013cd0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8013c72:	f7fd f92d 	bl	8010ed0 <get_fattime>
 8013c76:	4603      	mov	r3, r0
 8013c78:	4619      	mov	r1, r3
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	f7fd fc72 	bl	8011564 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8013c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c82:	3324      	adds	r3, #36	; 0x24
 8013c84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fd fc6c 	bl	8011564 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8e:	332c      	adds	r3, #44	; 0x2c
 8013c90:	2102      	movs	r1, #2
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fd fc66 	bl	8011564 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9a:	3330      	adds	r3, #48	; 0x30
 8013c9c:	2101      	movs	r1, #1
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7fd fc45 	bl	801152e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8013ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca6:	3332      	adds	r3, #50	; 0x32
 8013ca8:	2106      	movs	r1, #6
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fd fc3f 	bl	801152e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8013cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb2:	3340      	adds	r3, #64	; 0x40
 8013cb4:	2280      	movs	r2, #128	; 0x80
 8013cb6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8013cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cba:	3342      	adds	r3, #66	; 0x42
 8013cbc:	2229      	movs	r2, #41	; 0x29
 8013cbe:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8013cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc2:	3347      	adds	r3, #71	; 0x47
 8013cc4:	2213      	movs	r2, #19
 8013cc6:	4970      	ldr	r1, [pc, #448]	; (8013e88 <f_mkfs+0x6ec>)
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7fd fc77 	bl	80115bc <mem_cpy>
 8013cce:	e020      	b.n	8013d12 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8013cd6:	f7fd f8fb 	bl	8010ed0 <get_fattime>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f7fd fc40 	bl	8011564 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8013ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce6:	3316      	adds	r3, #22
 8013ce8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013cea:	b292      	uxth	r2, r2
 8013cec:	4611      	mov	r1, r2
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fd fc1d 	bl	801152e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8013cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf6:	3324      	adds	r3, #36	; 0x24
 8013cf8:	2280      	movs	r2, #128	; 0x80
 8013cfa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfe:	3326      	adds	r3, #38	; 0x26
 8013d00:	2229      	movs	r2, #41	; 0x29
 8013d02:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8013d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d06:	332b      	adds	r3, #43	; 0x2b
 8013d08:	2213      	movs	r2, #19
 8013d0a:	4960      	ldr	r1, [pc, #384]	; (8013e8c <f_mkfs+0x6f0>)
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fd fc55 	bl	80115bc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8013d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013d18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fd fc06 	bl	801152e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8013d22:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013d26:	2301      	movs	r3, #1
 8013d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d2c:	f7fd fb86 	bl	801143c <disk_write>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <f_mkfs+0x59e>
 8013d36:	2301      	movs	r3, #1
 8013d38:	e156      	b.n	8013fe8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8013d3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013d3e:	2b03      	cmp	r3, #3
 8013d40:	d140      	bne.n	8013dc4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8013d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d44:	1d9a      	adds	r2, r3, #6
 8013d46:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d4e:	f7fd fb75 	bl	801143c <disk_write>
			mem_set(buf, 0, ss);
 8013d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013d54:	461a      	mov	r2, r3
 8013d56:	2100      	movs	r1, #0
 8013d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d5a:	f7fd fc50 	bl	80115fe <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013d5e:	494c      	ldr	r1, [pc, #304]	; (8013e90 <f_mkfs+0x6f4>)
 8013d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d62:	f7fd fbff 	bl	8011564 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8013d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013d6c:	4949      	ldr	r1, [pc, #292]	; (8013e94 <f_mkfs+0x6f8>)
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7fd fbf8 	bl	8011564 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d76:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	3b01      	subs	r3, #1
 8013d7e:	4619      	mov	r1, r3
 8013d80:	4610      	mov	r0, r2
 8013d82:	f7fd fbef 	bl	8011564 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8013d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013d8c:	2102      	movs	r1, #2
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fd fbe8 	bl	8011564 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8013d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013d9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7fd fbc5 	bl	801152e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8013da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da6:	1dda      	adds	r2, r3, #7
 8013da8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013dac:	2301      	movs	r3, #1
 8013dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013db0:	f7fd fb44 	bl	801143c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8013db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db6:	1c5a      	adds	r2, r3, #1
 8013db8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013dc0:	f7fd fb3c 	bl	801143c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8013dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dc6:	2100      	movs	r1, #0
 8013dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dca:	f7fd fc18 	bl	80115fe <mem_set>
		sect = b_fat;		/* FAT start sector */
 8013dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013dd0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8013dd6:	e04b      	b.n	8013e70 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8013dd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013ddc:	2b03      	cmp	r3, #3
 8013dde:	d113      	bne.n	8013e08 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8013de0:	f06f 0107 	mvn.w	r1, #7
 8013de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013de6:	f7fd fbbd 	bl	8011564 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8013dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dec:	3304      	adds	r3, #4
 8013dee:	f04f 31ff 	mov.w	r1, #4294967295
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7fd fbb6 	bl	8011564 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8013df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfa:	3308      	adds	r3, #8
 8013dfc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7fd fbaf 	bl	8011564 <st_dword>
 8013e06:	e00b      	b.n	8013e20 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8013e08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d101      	bne.n	8013e14 <f_mkfs+0x678>
 8013e10:	4b21      	ldr	r3, [pc, #132]	; (8013e98 <f_mkfs+0x6fc>)
 8013e12:	e001      	b.n	8013e18 <f_mkfs+0x67c>
 8013e14:	f06f 0307 	mvn.w	r3, #7
 8013e18:	4619      	mov	r1, r3
 8013e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e1c:	f7fd fba2 	bl	8011564 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8013e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e22:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8013e24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	bf28      	it	cs
 8013e2c:	4613      	movcs	r3, r2
 8013e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013e30:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e3a:	f7fd faff 	bl	801143c <disk_write>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d001      	beq.n	8013e48 <f_mkfs+0x6ac>
 8013e44:	2301      	movs	r3, #1
 8013e46:	e0cf      	b.n	8013fe8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8013e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	2100      	movs	r1, #0
 8013e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e50:	f7fd fbd5 	bl	80115fe <mem_set>
				sect += n; nsect -= n;
 8013e54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e58:	4413      	add	r3, r2
 8013e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8013e5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e60:	1ad3      	subs	r3, r2, r3
 8013e62:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8013e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d1dc      	bne.n	8013e24 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8013e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d3af      	bcc.n	8013dd8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8013e78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013e7c:	2b03      	cmp	r3, #3
 8013e7e:	d10d      	bne.n	8013e9c <f_mkfs+0x700>
 8013e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e82:	e00c      	b.n	8013e9e <f_mkfs+0x702>
 8013e84:	08023ff4 	.word	0x08023ff4
 8013e88:	08024000 	.word	0x08024000
 8013e8c:	08024014 	.word	0x08024014
 8013e90:	41615252 	.word	0x41615252
 8013e94:	61417272 	.word	0x61417272
 8013e98:	00fffff8 	.word	0x00fffff8
 8013e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e9e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8013ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea4:	4293      	cmp	r3, r2
 8013ea6:	bf28      	it	cs
 8013ea8:	4613      	movcs	r3, r2
 8013eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013eac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013eb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013eb6:	f7fd fac1 	bl	801143c <disk_write>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d001      	beq.n	8013ec4 <f_mkfs+0x728>
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	e091      	b.n	8013fe8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8013ec4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ec8:	4413      	add	r3, r2
 8013eca:	667b      	str	r3, [r7, #100]	; 0x64
 8013ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ed0:	1ad3      	subs	r3, r2, r3
 8013ed2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8013ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d1e2      	bne.n	8013ea0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8013eda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013ede:	2b03      	cmp	r3, #3
 8013ee0:	d103      	bne.n	8013eea <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8013ee2:	230c      	movs	r3, #12
 8013ee4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8013ee8:	e010      	b.n	8013f0c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ef0:	d303      	bcc.n	8013efa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8013ef2:	2306      	movs	r3, #6
 8013ef4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8013ef8:	e008      	b.n	8013f0c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8013efa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013efe:	2b02      	cmp	r3, #2
 8013f00:	d101      	bne.n	8013f06 <f_mkfs+0x76a>
 8013f02:	2304      	movs	r3, #4
 8013f04:	e000      	b.n	8013f08 <f_mkfs+0x76c>
 8013f06:	2301      	movs	r3, #1
 8013f08:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8013f0c:	7afb      	ldrb	r3, [r7, #11]
 8013f0e:	f003 0308 	and.w	r3, r3, #8
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d15b      	bne.n	8013fce <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8013f16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013f18:	461a      	mov	r2, r3
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f1e:	f7fd fb6e 	bl	80115fe <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8013f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013f28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fd fafe 	bl	801152e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013f38:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8013f3a:	69bb      	ldr	r3, [r7, #24]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8013f40:	69bb      	ldr	r3, [r7, #24]
 8013f42:	3301      	adds	r3, #1
 8013f44:	2201      	movs	r2, #1
 8013f46:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8013f48:	69bb      	ldr	r3, [r7, #24]
 8013f4a:	3302      	adds	r3, #2
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8013f50:	69bb      	ldr	r3, [r7, #24]
 8013f52:	3303      	adds	r3, #3
 8013f54:	2200      	movs	r2, #0
 8013f56:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8013f60:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8013f62:	693a      	ldr	r2, [r7, #16]
 8013f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f66:	441a      	add	r2, r3
 8013f68:	4b21      	ldr	r3, [pc, #132]	; (8013ff0 <f_mkfs+0x854>)
 8013f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8013f6e:	1ad2      	subs	r2, r2, r3
 8013f70:	0852      	lsrs	r2, r2, #1
 8013f72:	4413      	add	r3, r2
 8013f74:	0b5b      	lsrs	r3, r3, #13
 8013f76:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	3305      	adds	r3, #5
 8013f7c:	22fe      	movs	r2, #254	; 0xfe
 8013f7e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8013f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013f82:	089b      	lsrs	r3, r3, #2
 8013f84:	b2da      	uxtb	r2, r3
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	3306      	adds	r3, #6
 8013f8a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8013f8e:	b2d2      	uxtb	r2, r2
 8013f90:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	3307      	adds	r3, #7
 8013f96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013f98:	b2d2      	uxtb	r2, r2
 8013f9a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8013f9c:	69bb      	ldr	r3, [r7, #24]
 8013f9e:	3308      	adds	r3, #8
 8013fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7fd fade 	bl	8011564 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8013fa8:	69bb      	ldr	r3, [r7, #24]
 8013faa:	330c      	adds	r3, #12
 8013fac:	693a      	ldr	r2, [r7, #16]
 8013fae:	4611      	mov	r1, r2
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7fd fad7 	bl	8011564 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8013fb6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8013fba:	2301      	movs	r3, #1
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013fc0:	f7fd fa3c 	bl	801143c <disk_write>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d001      	beq.n	8013fce <f_mkfs+0x832>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e00c      	b.n	8013fe8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8013fce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fd fa50 	bl	801147c <disk_ioctl>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d001      	beq.n	8013fe6 <f_mkfs+0x84a>
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	e000      	b.n	8013fe8 <f_mkfs+0x84c>

	return FR_OK;
 8013fe6:	2300      	movs	r3, #0
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3774      	adds	r7, #116	; 0x74
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd90      	pop	{r4, r7, pc}
 8013ff0:	0515565b 	.word	0x0515565b

08013ff4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b087      	sub	sp, #28
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	60b9      	str	r1, [r7, #8]
 8013ffe:	4613      	mov	r3, r2
 8014000:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014002:	2301      	movs	r3, #1
 8014004:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014006:	2300      	movs	r3, #0
 8014008:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801400a:	4b1f      	ldr	r3, [pc, #124]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 801400c:	7a5b      	ldrb	r3, [r3, #9]
 801400e:	b2db      	uxtb	r3, r3
 8014010:	2b00      	cmp	r3, #0
 8014012:	d131      	bne.n	8014078 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014014:	4b1c      	ldr	r3, [pc, #112]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 8014016:	7a5b      	ldrb	r3, [r3, #9]
 8014018:	b2db      	uxtb	r3, r3
 801401a:	461a      	mov	r2, r3
 801401c:	4b1a      	ldr	r3, [pc, #104]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 801401e:	2100      	movs	r1, #0
 8014020:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014022:	4b19      	ldr	r3, [pc, #100]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 8014024:	7a5b      	ldrb	r3, [r3, #9]
 8014026:	b2db      	uxtb	r3, r3
 8014028:	4a17      	ldr	r2, [pc, #92]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 801402a:	009b      	lsls	r3, r3, #2
 801402c:	4413      	add	r3, r2
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014032:	4b15      	ldr	r3, [pc, #84]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 8014034:	7a5b      	ldrb	r3, [r3, #9]
 8014036:	b2db      	uxtb	r3, r3
 8014038:	461a      	mov	r2, r3
 801403a:	4b13      	ldr	r3, [pc, #76]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 801403c:	4413      	add	r3, r2
 801403e:	79fa      	ldrb	r2, [r7, #7]
 8014040:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014042:	4b11      	ldr	r3, [pc, #68]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 8014044:	7a5b      	ldrb	r3, [r3, #9]
 8014046:	b2db      	uxtb	r3, r3
 8014048:	1c5a      	adds	r2, r3, #1
 801404a:	b2d1      	uxtb	r1, r2
 801404c:	4a0e      	ldr	r2, [pc, #56]	; (8014088 <FATFS_LinkDriverEx+0x94>)
 801404e:	7251      	strb	r1, [r2, #9]
 8014050:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014052:	7dbb      	ldrb	r3, [r7, #22]
 8014054:	3330      	adds	r3, #48	; 0x30
 8014056:	b2da      	uxtb	r2, r3
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	3301      	adds	r3, #1
 8014060:	223a      	movs	r2, #58	; 0x3a
 8014062:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	3302      	adds	r3, #2
 8014068:	222f      	movs	r2, #47	; 0x2f
 801406a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	3303      	adds	r3, #3
 8014070:	2200      	movs	r2, #0
 8014072:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014074:	2300      	movs	r3, #0
 8014076:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014078:	7dfb      	ldrb	r3, [r7, #23]
}
 801407a:	4618      	mov	r0, r3
 801407c:	371c      	adds	r7, #28
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	20000ed8 	.word	0x20000ed8

0801408c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014096:	2200      	movs	r2, #0
 8014098:	6839      	ldr	r1, [r7, #0]
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f7ff ffaa 	bl	8013ff4 <FATFS_LinkDriverEx>
 80140a0:	4603      	mov	r3, r0
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3708      	adds	r7, #8
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}

080140aa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80140aa:	b580      	push	{r7, lr}
 80140ac:	b084      	sub	sp, #16
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	4603      	mov	r3, r0
 80140b2:	6039      	str	r1, [r7, #0]
 80140b4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80140b6:	2200      	movs	r2, #0
 80140b8:	2101      	movs	r1, #1
 80140ba:	2001      	movs	r0, #1
 80140bc:	f000 f9ae 	bl	801441c <osSemaphoreNew>
 80140c0:	4602      	mov	r2, r0
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	bf14      	ite	ne
 80140ce:	2301      	movne	r3, #1
 80140d0:	2300      	moveq	r3, #0
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	60fb      	str	r3, [r7, #12]

    return ret;
 80140d6:	68fb      	ldr	r3, [r7, #12]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3710      	adds	r7, #16
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 fab7 	bl	801465c <osSemaphoreDelete>
#endif
    return 1;
 80140ee:	2301      	movs	r3, #1
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014100:	2300      	movs	r3, #0
 8014102:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8014104:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f000 fa11 	bl	8014530 <osSemaphoreAcquire>
 801410e:	4603      	mov	r3, r0
 8014110:	2b00      	cmp	r3, #0
 8014112:	d101      	bne.n	8014118 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8014114:	2301      	movs	r3, #1
 8014116:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014118:	68fb      	ldr	r3, [r7, #12]
}
 801411a:	4618      	mov	r0, r3
 801411c:	3710      	adds	r7, #16
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}

08014122 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014122:	b580      	push	{r7, lr}
 8014124:	b082      	sub	sp, #8
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 fa52 	bl	80145d4 <osSemaphoreRelease>
#endif
}
 8014130:	bf00      	nop
 8014132:	3708      	adds	r7, #8
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <__NVIC_SetPriority>:
{
 8014138:	b480      	push	{r7}
 801413a:	b083      	sub	sp, #12
 801413c:	af00      	add	r7, sp, #0
 801413e:	4603      	mov	r3, r0
 8014140:	6039      	str	r1, [r7, #0]
 8014142:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014148:	2b00      	cmp	r3, #0
 801414a:	db0a      	blt.n	8014162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	b2da      	uxtb	r2, r3
 8014150:	490c      	ldr	r1, [pc, #48]	; (8014184 <__NVIC_SetPriority+0x4c>)
 8014152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014156:	0112      	lsls	r2, r2, #4
 8014158:	b2d2      	uxtb	r2, r2
 801415a:	440b      	add	r3, r1
 801415c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014160:	e00a      	b.n	8014178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	b2da      	uxtb	r2, r3
 8014166:	4908      	ldr	r1, [pc, #32]	; (8014188 <__NVIC_SetPriority+0x50>)
 8014168:	88fb      	ldrh	r3, [r7, #6]
 801416a:	f003 030f 	and.w	r3, r3, #15
 801416e:	3b04      	subs	r3, #4
 8014170:	0112      	lsls	r2, r2, #4
 8014172:	b2d2      	uxtb	r2, r2
 8014174:	440b      	add	r3, r1
 8014176:	761a      	strb	r2, [r3, #24]
}
 8014178:	bf00      	nop
 801417a:	370c      	adds	r7, #12
 801417c:	46bd      	mov	sp, r7
 801417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014182:	4770      	bx	lr
 8014184:	e000e100 	.word	0xe000e100
 8014188:	e000ed00 	.word	0xe000ed00

0801418c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801418c:	b580      	push	{r7, lr}
 801418e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014190:	4b05      	ldr	r3, [pc, #20]	; (80141a8 <SysTick_Handler+0x1c>)
 8014192:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014194:	f002 fb08 	bl	80167a8 <xTaskGetSchedulerState>
 8014198:	4603      	mov	r3, r0
 801419a:	2b01      	cmp	r3, #1
 801419c:	d001      	beq.n	80141a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801419e:	f003 f9eb 	bl	8017578 <xPortSysTickHandler>
  }
}
 80141a2:	bf00      	nop
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	e000e010 	.word	0xe000e010

080141ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80141ac:	b580      	push	{r7, lr}
 80141ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80141b0:	2100      	movs	r1, #0
 80141b2:	f06f 0004 	mvn.w	r0, #4
 80141b6:	f7ff ffbf 	bl	8014138 <__NVIC_SetPriority>
#endif
}
 80141ba:	bf00      	nop
 80141bc:	bd80      	pop	{r7, pc}
	...

080141c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80141c6:	f3ef 8305 	mrs	r3, IPSR
 80141ca:	603b      	str	r3, [r7, #0]
  return(result);
 80141cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d003      	beq.n	80141da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80141d2:	f06f 0305 	mvn.w	r3, #5
 80141d6:	607b      	str	r3, [r7, #4]
 80141d8:	e00c      	b.n	80141f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80141da:	4b0a      	ldr	r3, [pc, #40]	; (8014204 <osKernelInitialize+0x44>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d105      	bne.n	80141ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80141e2:	4b08      	ldr	r3, [pc, #32]	; (8014204 <osKernelInitialize+0x44>)
 80141e4:	2201      	movs	r2, #1
 80141e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80141e8:	2300      	movs	r3, #0
 80141ea:	607b      	str	r3, [r7, #4]
 80141ec:	e002      	b.n	80141f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80141ee:	f04f 33ff 	mov.w	r3, #4294967295
 80141f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80141f4:	687b      	ldr	r3, [r7, #4]
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	370c      	adds	r7, #12
 80141fa:	46bd      	mov	sp, r7
 80141fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014200:	4770      	bx	lr
 8014202:	bf00      	nop
 8014204:	20000ee4 	.word	0x20000ee4

08014208 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801420e:	f002 facb 	bl	80167a8 <xTaskGetSchedulerState>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d004      	beq.n	8014222 <osKernelGetState+0x1a>
 8014218:	2b02      	cmp	r3, #2
 801421a:	d105      	bne.n	8014228 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 801421c:	2302      	movs	r3, #2
 801421e:	607b      	str	r3, [r7, #4]
      break;
 8014220:	e00c      	b.n	801423c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8014222:	2303      	movs	r3, #3
 8014224:	607b      	str	r3, [r7, #4]
      break;
 8014226:	e009      	b.n	801423c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8014228:	4b07      	ldr	r3, [pc, #28]	; (8014248 <osKernelGetState+0x40>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d102      	bne.n	8014236 <osKernelGetState+0x2e>
        state = osKernelReady;
 8014230:	2301      	movs	r3, #1
 8014232:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8014234:	e001      	b.n	801423a <osKernelGetState+0x32>
        state = osKernelInactive;
 8014236:	2300      	movs	r3, #0
 8014238:	607b      	str	r3, [r7, #4]
      break;
 801423a:	bf00      	nop
  }

  return (state);
 801423c:	687b      	ldr	r3, [r7, #4]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3708      	adds	r7, #8
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	20000ee4 	.word	0x20000ee4

0801424c <osKernelStart>:

osStatus_t osKernelStart (void) {
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014252:	f3ef 8305 	mrs	r3, IPSR
 8014256:	603b      	str	r3, [r7, #0]
  return(result);
 8014258:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801425a:	2b00      	cmp	r3, #0
 801425c:	d003      	beq.n	8014266 <osKernelStart+0x1a>
    stat = osErrorISR;
 801425e:	f06f 0305 	mvn.w	r3, #5
 8014262:	607b      	str	r3, [r7, #4]
 8014264:	e010      	b.n	8014288 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014266:	4b0b      	ldr	r3, [pc, #44]	; (8014294 <osKernelStart+0x48>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2b01      	cmp	r3, #1
 801426c:	d109      	bne.n	8014282 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801426e:	f7ff ff9d 	bl	80141ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014272:	4b08      	ldr	r3, [pc, #32]	; (8014294 <osKernelStart+0x48>)
 8014274:	2202      	movs	r2, #2
 8014276:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014278:	f001 fe28 	bl	8015ecc <vTaskStartScheduler>
      stat = osOK;
 801427c:	2300      	movs	r3, #0
 801427e:	607b      	str	r3, [r7, #4]
 8014280:	e002      	b.n	8014288 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014282:	f04f 33ff 	mov.w	r3, #4294967295
 8014286:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014288:	687b      	ldr	r3, [r7, #4]
}
 801428a:	4618      	mov	r0, r3
 801428c:	3708      	adds	r7, #8
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
 8014292:	bf00      	nop
 8014294:	20000ee4 	.word	0x20000ee4

08014298 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801429e:	f3ef 8305 	mrs	r3, IPSR
 80142a2:	603b      	str	r3, [r7, #0]
  return(result);
 80142a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d003      	beq.n	80142b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80142aa:	f001 ff3b 	bl	8016124 <xTaskGetTickCountFromISR>
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	e002      	b.n	80142b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80142b2:	f001 ff27 	bl	8016104 <xTaskGetTickCount>
 80142b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80142b8:	687b      	ldr	r3, [r7, #4]
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}

080142c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80142c2:	b580      	push	{r7, lr}
 80142c4:	b08e      	sub	sp, #56	; 0x38
 80142c6:	af04      	add	r7, sp, #16
 80142c8:	60f8      	str	r0, [r7, #12]
 80142ca:	60b9      	str	r1, [r7, #8]
 80142cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80142ce:	2300      	movs	r3, #0
 80142d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80142d2:	f3ef 8305 	mrs	r3, IPSR
 80142d6:	617b      	str	r3, [r7, #20]
  return(result);
 80142d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d17e      	bne.n	80143dc <osThreadNew+0x11a>
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d07b      	beq.n	80143dc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80142e4:	2380      	movs	r3, #128	; 0x80
 80142e6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80142e8:	2318      	movs	r3, #24
 80142ea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80142ec:	2300      	movs	r3, #0
 80142ee:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80142f0:	f04f 33ff 	mov.w	r3, #4294967295
 80142f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d045      	beq.n	8014388 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d002      	beq.n	801430a <osThreadNew+0x48>
        name = attr->name;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	699b      	ldr	r3, [r3, #24]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d002      	beq.n	8014318 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	699b      	ldr	r3, [r3, #24]
 8014316:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d008      	beq.n	8014330 <osThreadNew+0x6e>
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	2b38      	cmp	r3, #56	; 0x38
 8014322:	d805      	bhi.n	8014330 <osThreadNew+0x6e>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	685b      	ldr	r3, [r3, #4]
 8014328:	f003 0301 	and.w	r3, r3, #1
 801432c:	2b00      	cmp	r3, #0
 801432e:	d001      	beq.n	8014334 <osThreadNew+0x72>
        return (NULL);
 8014330:	2300      	movs	r3, #0
 8014332:	e054      	b.n	80143de <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	695b      	ldr	r3, [r3, #20]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d003      	beq.n	8014344 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	695b      	ldr	r3, [r3, #20]
 8014340:	089b      	lsrs	r3, r3, #2
 8014342:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	689b      	ldr	r3, [r3, #8]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00e      	beq.n	801436a <osThreadNew+0xa8>
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	68db      	ldr	r3, [r3, #12]
 8014350:	2bbb      	cmp	r3, #187	; 0xbb
 8014352:	d90a      	bls.n	801436a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014358:	2b00      	cmp	r3, #0
 801435a:	d006      	beq.n	801436a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	695b      	ldr	r3, [r3, #20]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d002      	beq.n	801436a <osThreadNew+0xa8>
        mem = 1;
 8014364:	2301      	movs	r3, #1
 8014366:	61bb      	str	r3, [r7, #24]
 8014368:	e010      	b.n	801438c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d10c      	bne.n	801438c <osThreadNew+0xca>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	68db      	ldr	r3, [r3, #12]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d108      	bne.n	801438c <osThreadNew+0xca>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	691b      	ldr	r3, [r3, #16]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d104      	bne.n	801438c <osThreadNew+0xca>
          mem = 0;
 8014382:	2300      	movs	r3, #0
 8014384:	61bb      	str	r3, [r7, #24]
 8014386:	e001      	b.n	801438c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014388:	2300      	movs	r3, #0
 801438a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	2b01      	cmp	r3, #1
 8014390:	d110      	bne.n	80143b4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801439a:	9202      	str	r2, [sp, #8]
 801439c:	9301      	str	r3, [sp, #4]
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	6a3a      	ldr	r2, [r7, #32]
 80143a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143a8:	68f8      	ldr	r0, [r7, #12]
 80143aa:	f001 fba3 	bl	8015af4 <xTaskCreateStatic>
 80143ae:	4603      	mov	r3, r0
 80143b0:	613b      	str	r3, [r7, #16]
 80143b2:	e013      	b.n	80143dc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d110      	bne.n	80143dc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80143ba:	6a3b      	ldr	r3, [r7, #32]
 80143bc:	b29a      	uxth	r2, r3
 80143be:	f107 0310 	add.w	r3, r7, #16
 80143c2:	9301      	str	r3, [sp, #4]
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143cc:	68f8      	ldr	r0, [r7, #12]
 80143ce:	f001 fbee 	bl	8015bae <xTaskCreate>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b01      	cmp	r3, #1
 80143d6:	d001      	beq.n	80143dc <osThreadNew+0x11a>
            hTask = NULL;
 80143d8:	2300      	movs	r3, #0
 80143da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80143dc:	693b      	ldr	r3, [r7, #16]
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3728      	adds	r7, #40	; 0x28
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}

080143e6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b084      	sub	sp, #16
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80143ee:	f3ef 8305 	mrs	r3, IPSR
 80143f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80143f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d003      	beq.n	8014402 <osDelay+0x1c>
    stat = osErrorISR;
 80143fa:	f06f 0305 	mvn.w	r3, #5
 80143fe:	60fb      	str	r3, [r7, #12]
 8014400:	e007      	b.n	8014412 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014402:	2300      	movs	r3, #0
 8014404:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d002      	beq.n	8014412 <osDelay+0x2c>
      vTaskDelay(ticks);
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f001 fd29 	bl	8015e64 <vTaskDelay>
    }
  }

  return (stat);
 8014412:	68fb      	ldr	r3, [r7, #12]
}
 8014414:	4618      	mov	r0, r3
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801441c:	b580      	push	{r7, lr}
 801441e:	b08a      	sub	sp, #40	; 0x28
 8014420:	af02      	add	r7, sp, #8
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014428:	2300      	movs	r3, #0
 801442a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801442c:	f3ef 8305 	mrs	r3, IPSR
 8014430:	613b      	str	r3, [r7, #16]
  return(result);
 8014432:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014434:	2b00      	cmp	r3, #0
 8014436:	d175      	bne.n	8014524 <osSemaphoreNew+0x108>
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d072      	beq.n	8014524 <osSemaphoreNew+0x108>
 801443e:	68ba      	ldr	r2, [r7, #8]
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	429a      	cmp	r2, r3
 8014444:	d86e      	bhi.n	8014524 <osSemaphoreNew+0x108>
    mem = -1;
 8014446:	f04f 33ff 	mov.w	r3, #4294967295
 801444a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d015      	beq.n	801447e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	689b      	ldr	r3, [r3, #8]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d006      	beq.n	8014468 <osSemaphoreNew+0x4c>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	68db      	ldr	r3, [r3, #12]
 801445e:	2b4f      	cmp	r3, #79	; 0x4f
 8014460:	d902      	bls.n	8014468 <osSemaphoreNew+0x4c>
        mem = 1;
 8014462:	2301      	movs	r3, #1
 8014464:	61bb      	str	r3, [r7, #24]
 8014466:	e00c      	b.n	8014482 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	689b      	ldr	r3, [r3, #8]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d108      	bne.n	8014482 <osSemaphoreNew+0x66>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d104      	bne.n	8014482 <osSemaphoreNew+0x66>
          mem = 0;
 8014478:	2300      	movs	r3, #0
 801447a:	61bb      	str	r3, [r7, #24]
 801447c:	e001      	b.n	8014482 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014482:	69bb      	ldr	r3, [r7, #24]
 8014484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014488:	d04c      	beq.n	8014524 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2b01      	cmp	r3, #1
 801448e:	d128      	bne.n	80144e2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	2b01      	cmp	r3, #1
 8014494:	d10a      	bne.n	80144ac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	689b      	ldr	r3, [r3, #8]
 801449a:	2203      	movs	r2, #3
 801449c:	9200      	str	r2, [sp, #0]
 801449e:	2200      	movs	r2, #0
 80144a0:	2100      	movs	r1, #0
 80144a2:	2001      	movs	r0, #1
 80144a4:	f000 fb80 	bl	8014ba8 <xQueueGenericCreateStatic>
 80144a8:	61f8      	str	r0, [r7, #28]
 80144aa:	e005      	b.n	80144b8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80144ac:	2203      	movs	r2, #3
 80144ae:	2100      	movs	r1, #0
 80144b0:	2001      	movs	r0, #1
 80144b2:	f000 fbf1 	bl	8014c98 <xQueueGenericCreate>
 80144b6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d022      	beq.n	8014504 <osSemaphoreNew+0xe8>
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d01f      	beq.n	8014504 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80144c4:	2300      	movs	r3, #0
 80144c6:	2200      	movs	r2, #0
 80144c8:	2100      	movs	r1, #0
 80144ca:	69f8      	ldr	r0, [r7, #28]
 80144cc:	f000 fcac 	bl	8014e28 <xQueueGenericSend>
 80144d0:	4603      	mov	r3, r0
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d016      	beq.n	8014504 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80144d6:	69f8      	ldr	r0, [r7, #28]
 80144d8:	f001 f938 	bl	801574c <vQueueDelete>
            hSemaphore = NULL;
 80144dc:	2300      	movs	r3, #0
 80144de:	61fb      	str	r3, [r7, #28]
 80144e0:	e010      	b.n	8014504 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d108      	bne.n	80144fa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	689b      	ldr	r3, [r3, #8]
 80144ec:	461a      	mov	r2, r3
 80144ee:	68b9      	ldr	r1, [r7, #8]
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f000 fc2e 	bl	8014d52 <xQueueCreateCountingSemaphoreStatic>
 80144f6:	61f8      	str	r0, [r7, #28]
 80144f8:	e004      	b.n	8014504 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80144fa:	68b9      	ldr	r1, [r7, #8]
 80144fc:	68f8      	ldr	r0, [r7, #12]
 80144fe:	f000 fc5f 	bl	8014dc0 <xQueueCreateCountingSemaphore>
 8014502:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d00c      	beq.n	8014524 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d003      	beq.n	8014518 <osSemaphoreNew+0xfc>
          name = attr->name;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	617b      	str	r3, [r7, #20]
 8014516:	e001      	b.n	801451c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014518:	2300      	movs	r3, #0
 801451a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801451c:	6979      	ldr	r1, [r7, #20]
 801451e:	69f8      	ldr	r0, [r7, #28]
 8014520:	f001 fa60 	bl	80159e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014524:	69fb      	ldr	r3, [r7, #28]
}
 8014526:	4618      	mov	r0, r3
 8014528:	3720      	adds	r7, #32
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
	...

08014530 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801453e:	2300      	movs	r3, #0
 8014540:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d103      	bne.n	8014550 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014548:	f06f 0303 	mvn.w	r3, #3
 801454c:	617b      	str	r3, [r7, #20]
 801454e:	e039      	b.n	80145c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014550:	f3ef 8305 	mrs	r3, IPSR
 8014554:	60fb      	str	r3, [r7, #12]
  return(result);
 8014556:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014558:	2b00      	cmp	r3, #0
 801455a:	d022      	beq.n	80145a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d003      	beq.n	801456a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014562:	f06f 0303 	mvn.w	r3, #3
 8014566:	617b      	str	r3, [r7, #20]
 8014568:	e02c      	b.n	80145c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801456a:	2300      	movs	r3, #0
 801456c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801456e:	f107 0308 	add.w	r3, r7, #8
 8014572:	461a      	mov	r2, r3
 8014574:	2100      	movs	r1, #0
 8014576:	6938      	ldr	r0, [r7, #16]
 8014578:	f001 f868 	bl	801564c <xQueueReceiveFromISR>
 801457c:	4603      	mov	r3, r0
 801457e:	2b01      	cmp	r3, #1
 8014580:	d003      	beq.n	801458a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014582:	f06f 0302 	mvn.w	r3, #2
 8014586:	617b      	str	r3, [r7, #20]
 8014588:	e01c      	b.n	80145c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d019      	beq.n	80145c4 <osSemaphoreAcquire+0x94>
 8014590:	4b0f      	ldr	r3, [pc, #60]	; (80145d0 <osSemaphoreAcquire+0xa0>)
 8014592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014596:	601a      	str	r2, [r3, #0]
 8014598:	f3bf 8f4f 	dsb	sy
 801459c:	f3bf 8f6f 	isb	sy
 80145a0:	e010      	b.n	80145c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80145a2:	6839      	ldr	r1, [r7, #0]
 80145a4:	6938      	ldr	r0, [r7, #16]
 80145a6:	f000 ff45 	bl	8015434 <xQueueSemaphoreTake>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d009      	beq.n	80145c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d003      	beq.n	80145be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80145b6:	f06f 0301 	mvn.w	r3, #1
 80145ba:	617b      	str	r3, [r7, #20]
 80145bc:	e002      	b.n	80145c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80145be:	f06f 0302 	mvn.w	r3, #2
 80145c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80145c4:	697b      	ldr	r3, [r7, #20]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3718      	adds	r7, #24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	e000ed04 	.word	0xe000ed04

080145d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b086      	sub	sp, #24
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80145e0:	2300      	movs	r3, #0
 80145e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d103      	bne.n	80145f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80145ea:	f06f 0303 	mvn.w	r3, #3
 80145ee:	617b      	str	r3, [r7, #20]
 80145f0:	e02c      	b.n	801464c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80145f2:	f3ef 8305 	mrs	r3, IPSR
 80145f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80145f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d01a      	beq.n	8014634 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80145fe:	2300      	movs	r3, #0
 8014600:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014602:	f107 0308 	add.w	r3, r7, #8
 8014606:	4619      	mov	r1, r3
 8014608:	6938      	ldr	r0, [r7, #16]
 801460a:	f000 fda6 	bl	801515a <xQueueGiveFromISR>
 801460e:	4603      	mov	r3, r0
 8014610:	2b01      	cmp	r3, #1
 8014612:	d003      	beq.n	801461c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014614:	f06f 0302 	mvn.w	r3, #2
 8014618:	617b      	str	r3, [r7, #20]
 801461a:	e017      	b.n	801464c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d014      	beq.n	801464c <osSemaphoreRelease+0x78>
 8014622:	4b0d      	ldr	r3, [pc, #52]	; (8014658 <osSemaphoreRelease+0x84>)
 8014624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014628:	601a      	str	r2, [r3, #0]
 801462a:	f3bf 8f4f 	dsb	sy
 801462e:	f3bf 8f6f 	isb	sy
 8014632:	e00b      	b.n	801464c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014634:	2300      	movs	r3, #0
 8014636:	2200      	movs	r2, #0
 8014638:	2100      	movs	r1, #0
 801463a:	6938      	ldr	r0, [r7, #16]
 801463c:	f000 fbf4 	bl	8014e28 <xQueueGenericSend>
 8014640:	4603      	mov	r3, r0
 8014642:	2b01      	cmp	r3, #1
 8014644:	d002      	beq.n	801464c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014646:	f06f 0302 	mvn.w	r3, #2
 801464a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801464c:	697b      	ldr	r3, [r7, #20]
}
 801464e:	4618      	mov	r0, r3
 8014650:	3718      	adds	r7, #24
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	e000ed04 	.word	0xe000ed04

0801465c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801465c:	b580      	push	{r7, lr}
 801465e:	b086      	sub	sp, #24
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014668:	f3ef 8305 	mrs	r3, IPSR
 801466c:	60fb      	str	r3, [r7, #12]
  return(result);
 801466e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8014670:	2b00      	cmp	r3, #0
 8014672:	d003      	beq.n	801467c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014674:	f06f 0305 	mvn.w	r3, #5
 8014678:	617b      	str	r3, [r7, #20]
 801467a:	e00e      	b.n	801469a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d103      	bne.n	801468a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8014682:	f06f 0303 	mvn.w	r3, #3
 8014686:	617b      	str	r3, [r7, #20]
 8014688:	e007      	b.n	801469a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801468a:	6938      	ldr	r0, [r7, #16]
 801468c:	f001 f9d4 	bl	8015a38 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8014690:	2300      	movs	r3, #0
 8014692:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8014694:	6938      	ldr	r0, [r7, #16]
 8014696:	f001 f859 	bl	801574c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801469a:	697b      	ldr	r3, [r7, #20]
}
 801469c:	4618      	mov	r0, r3
 801469e:	3718      	adds	r7, #24
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b08a      	sub	sp, #40	; 0x28
 80146a8:	af02      	add	r7, sp, #8
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	60b9      	str	r1, [r7, #8]
 80146ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80146b0:	2300      	movs	r3, #0
 80146b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146b4:	f3ef 8305 	mrs	r3, IPSR
 80146b8:	613b      	str	r3, [r7, #16]
  return(result);
 80146ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d15f      	bne.n	8014780 <osMessageQueueNew+0xdc>
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d05c      	beq.n	8014780 <osMessageQueueNew+0xdc>
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d059      	beq.n	8014780 <osMessageQueueNew+0xdc>
    mem = -1;
 80146cc:	f04f 33ff 	mov.w	r3, #4294967295
 80146d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d029      	beq.n	801472c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	689b      	ldr	r3, [r3, #8]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d012      	beq.n	8014706 <osMessageQueueNew+0x62>
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	2b4f      	cmp	r3, #79	; 0x4f
 80146e6:	d90e      	bls.n	8014706 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d00a      	beq.n	8014706 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	695a      	ldr	r2, [r3, #20]
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	68b9      	ldr	r1, [r7, #8]
 80146f8:	fb01 f303 	mul.w	r3, r1, r3
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d302      	bcc.n	8014706 <osMessageQueueNew+0x62>
        mem = 1;
 8014700:	2301      	movs	r3, #1
 8014702:	61bb      	str	r3, [r7, #24]
 8014704:	e014      	b.n	8014730 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	689b      	ldr	r3, [r3, #8]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d110      	bne.n	8014730 <osMessageQueueNew+0x8c>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d10c      	bne.n	8014730 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801471a:	2b00      	cmp	r3, #0
 801471c:	d108      	bne.n	8014730 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	695b      	ldr	r3, [r3, #20]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d104      	bne.n	8014730 <osMessageQueueNew+0x8c>
          mem = 0;
 8014726:	2300      	movs	r3, #0
 8014728:	61bb      	str	r3, [r7, #24]
 801472a:	e001      	b.n	8014730 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801472c:	2300      	movs	r3, #0
 801472e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	2b01      	cmp	r3, #1
 8014734:	d10b      	bne.n	801474e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	691a      	ldr	r2, [r3, #16]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	689b      	ldr	r3, [r3, #8]
 801473e:	2100      	movs	r1, #0
 8014740:	9100      	str	r1, [sp, #0]
 8014742:	68b9      	ldr	r1, [r7, #8]
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f000 fa2f 	bl	8014ba8 <xQueueGenericCreateStatic>
 801474a:	61f8      	str	r0, [r7, #28]
 801474c:	e008      	b.n	8014760 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d105      	bne.n	8014760 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014754:	2200      	movs	r2, #0
 8014756:	68b9      	ldr	r1, [r7, #8]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f000 fa9d 	bl	8014c98 <xQueueGenericCreate>
 801475e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00c      	beq.n	8014780 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d003      	beq.n	8014774 <osMessageQueueNew+0xd0>
        name = attr->name;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	617b      	str	r3, [r7, #20]
 8014772:	e001      	b.n	8014778 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014774:	2300      	movs	r3, #0
 8014776:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014778:	6979      	ldr	r1, [r7, #20]
 801477a:	69f8      	ldr	r0, [r7, #28]
 801477c:	f001 f932 	bl	80159e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014780:	69fb      	ldr	r3, [r7, #28]
}
 8014782:	4618      	mov	r0, r3
 8014784:	3720      	adds	r7, #32
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
	...

0801478c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801478c:	b580      	push	{r7, lr}
 801478e:	b088      	sub	sp, #32
 8014790:	af00      	add	r7, sp, #0
 8014792:	60f8      	str	r0, [r7, #12]
 8014794:	60b9      	str	r1, [r7, #8]
 8014796:	603b      	str	r3, [r7, #0]
 8014798:	4613      	mov	r3, r2
 801479a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80147a0:	2300      	movs	r3, #0
 80147a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80147a4:	f3ef 8305 	mrs	r3, IPSR
 80147a8:	617b      	str	r3, [r7, #20]
  return(result);
 80147aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d028      	beq.n	8014802 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80147b0:	69bb      	ldr	r3, [r7, #24]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d005      	beq.n	80147c2 <osMessageQueuePut+0x36>
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d002      	beq.n	80147c2 <osMessageQueuePut+0x36>
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d003      	beq.n	80147ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80147c2:	f06f 0303 	mvn.w	r3, #3
 80147c6:	61fb      	str	r3, [r7, #28]
 80147c8:	e038      	b.n	801483c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80147ca:	2300      	movs	r3, #0
 80147cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80147ce:	f107 0210 	add.w	r2, r7, #16
 80147d2:	2300      	movs	r3, #0
 80147d4:	68b9      	ldr	r1, [r7, #8]
 80147d6:	69b8      	ldr	r0, [r7, #24]
 80147d8:	f000 fc24 	bl	8015024 <xQueueGenericSendFromISR>
 80147dc:	4603      	mov	r3, r0
 80147de:	2b01      	cmp	r3, #1
 80147e0:	d003      	beq.n	80147ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80147e2:	f06f 0302 	mvn.w	r3, #2
 80147e6:	61fb      	str	r3, [r7, #28]
 80147e8:	e028      	b.n	801483c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d025      	beq.n	801483c <osMessageQueuePut+0xb0>
 80147f0:	4b15      	ldr	r3, [pc, #84]	; (8014848 <osMessageQueuePut+0xbc>)
 80147f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147f6:	601a      	str	r2, [r3, #0]
 80147f8:	f3bf 8f4f 	dsb	sy
 80147fc:	f3bf 8f6f 	isb	sy
 8014800:	e01c      	b.n	801483c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014802:	69bb      	ldr	r3, [r7, #24]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d002      	beq.n	801480e <osMessageQueuePut+0x82>
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d103      	bne.n	8014816 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801480e:	f06f 0303 	mvn.w	r3, #3
 8014812:	61fb      	str	r3, [r7, #28]
 8014814:	e012      	b.n	801483c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014816:	2300      	movs	r3, #0
 8014818:	683a      	ldr	r2, [r7, #0]
 801481a:	68b9      	ldr	r1, [r7, #8]
 801481c:	69b8      	ldr	r0, [r7, #24]
 801481e:	f000 fb03 	bl	8014e28 <xQueueGenericSend>
 8014822:	4603      	mov	r3, r0
 8014824:	2b01      	cmp	r3, #1
 8014826:	d009      	beq.n	801483c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d003      	beq.n	8014836 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801482e:	f06f 0301 	mvn.w	r3, #1
 8014832:	61fb      	str	r3, [r7, #28]
 8014834:	e002      	b.n	801483c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014836:	f06f 0302 	mvn.w	r3, #2
 801483a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801483c:	69fb      	ldr	r3, [r7, #28]
}
 801483e:	4618      	mov	r0, r3
 8014840:	3720      	adds	r7, #32
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
 8014846:	bf00      	nop
 8014848:	e000ed04 	.word	0xe000ed04

0801484c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801484c:	b580      	push	{r7, lr}
 801484e:	b088      	sub	sp, #32
 8014850:	af00      	add	r7, sp, #0
 8014852:	60f8      	str	r0, [r7, #12]
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	607a      	str	r2, [r7, #4]
 8014858:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801485e:	2300      	movs	r3, #0
 8014860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014862:	f3ef 8305 	mrs	r3, IPSR
 8014866:	617b      	str	r3, [r7, #20]
  return(result);
 8014868:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801486a:	2b00      	cmp	r3, #0
 801486c:	d028      	beq.n	80148c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801486e:	69bb      	ldr	r3, [r7, #24]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d005      	beq.n	8014880 <osMessageQueueGet+0x34>
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d002      	beq.n	8014880 <osMessageQueueGet+0x34>
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d003      	beq.n	8014888 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014880:	f06f 0303 	mvn.w	r3, #3
 8014884:	61fb      	str	r3, [r7, #28]
 8014886:	e037      	b.n	80148f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014888:	2300      	movs	r3, #0
 801488a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801488c:	f107 0310 	add.w	r3, r7, #16
 8014890:	461a      	mov	r2, r3
 8014892:	68b9      	ldr	r1, [r7, #8]
 8014894:	69b8      	ldr	r0, [r7, #24]
 8014896:	f000 fed9 	bl	801564c <xQueueReceiveFromISR>
 801489a:	4603      	mov	r3, r0
 801489c:	2b01      	cmp	r3, #1
 801489e:	d003      	beq.n	80148a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80148a0:	f06f 0302 	mvn.w	r3, #2
 80148a4:	61fb      	str	r3, [r7, #28]
 80148a6:	e027      	b.n	80148f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80148a8:	693b      	ldr	r3, [r7, #16]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d024      	beq.n	80148f8 <osMessageQueueGet+0xac>
 80148ae:	4b15      	ldr	r3, [pc, #84]	; (8014904 <osMessageQueueGet+0xb8>)
 80148b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148b4:	601a      	str	r2, [r3, #0]
 80148b6:	f3bf 8f4f 	dsb	sy
 80148ba:	f3bf 8f6f 	isb	sy
 80148be:	e01b      	b.n	80148f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80148c0:	69bb      	ldr	r3, [r7, #24]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d002      	beq.n	80148cc <osMessageQueueGet+0x80>
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d103      	bne.n	80148d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80148cc:	f06f 0303 	mvn.w	r3, #3
 80148d0:	61fb      	str	r3, [r7, #28]
 80148d2:	e011      	b.n	80148f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80148d4:	683a      	ldr	r2, [r7, #0]
 80148d6:	68b9      	ldr	r1, [r7, #8]
 80148d8:	69b8      	ldr	r0, [r7, #24]
 80148da:	f000 fccb 	bl	8015274 <xQueueReceive>
 80148de:	4603      	mov	r3, r0
 80148e0:	2b01      	cmp	r3, #1
 80148e2:	d009      	beq.n	80148f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d003      	beq.n	80148f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80148ea:	f06f 0301 	mvn.w	r3, #1
 80148ee:	61fb      	str	r3, [r7, #28]
 80148f0:	e002      	b.n	80148f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80148f2:	f06f 0302 	mvn.w	r3, #2
 80148f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80148f8:	69fb      	ldr	r3, [r7, #28]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3720      	adds	r7, #32
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	e000ed04 	.word	0xe000ed04

08014908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014908:	b480      	push	{r7}
 801490a:	b085      	sub	sp, #20
 801490c:	af00      	add	r7, sp, #0
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	4a07      	ldr	r2, [pc, #28]	; (8014934 <vApplicationGetIdleTaskMemory+0x2c>)
 8014918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	4a06      	ldr	r2, [pc, #24]	; (8014938 <vApplicationGetIdleTaskMemory+0x30>)
 801491e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2280      	movs	r2, #128	; 0x80
 8014924:	601a      	str	r2, [r3, #0]
}
 8014926:	bf00      	nop
 8014928:	3714      	adds	r7, #20
 801492a:	46bd      	mov	sp, r7
 801492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014930:	4770      	bx	lr
 8014932:	bf00      	nop
 8014934:	20000ee8 	.word	0x20000ee8
 8014938:	20000fa4 	.word	0x20000fa4

0801493c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801493c:	b480      	push	{r7}
 801493e:	b085      	sub	sp, #20
 8014940:	af00      	add	r7, sp, #0
 8014942:	60f8      	str	r0, [r7, #12]
 8014944:	60b9      	str	r1, [r7, #8]
 8014946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	4a07      	ldr	r2, [pc, #28]	; (8014968 <vApplicationGetTimerTaskMemory+0x2c>)
 801494c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	4a06      	ldr	r2, [pc, #24]	; (801496c <vApplicationGetTimerTaskMemory+0x30>)
 8014952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f44f 7280 	mov.w	r2, #256	; 0x100
 801495a:	601a      	str	r2, [r3, #0]
}
 801495c:	bf00      	nop
 801495e:	3714      	adds	r7, #20
 8014960:	46bd      	mov	sp, r7
 8014962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014966:	4770      	bx	lr
 8014968:	200011a4 	.word	0x200011a4
 801496c:	20001260 	.word	0x20001260

08014970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f103 0208 	add.w	r2, r3, #8
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f04f 32ff 	mov.w	r2, #4294967295
 8014988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f103 0208 	add.w	r2, r3, #8
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f103 0208 	add.w	r2, r3, #8
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2200      	movs	r2, #0
 80149a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80149a4:	bf00      	nop
 80149a6:	370c      	adds	r7, #12
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80149b0:	b480      	push	{r7}
 80149b2:	b083      	sub	sp, #12
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2200      	movs	r2, #0
 80149bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80149be:	bf00      	nop
 80149c0:	370c      	adds	r7, #12
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr

080149ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149ca:	b480      	push	{r7}
 80149cc:	b085      	sub	sp, #20
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
 80149d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	68fa      	ldr	r2, [r7, #12]
 80149de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	689a      	ldr	r2, [r3, #8]
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	689b      	ldr	r3, [r3, #8]
 80149ec:	683a      	ldr	r2, [r7, #0]
 80149ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	683a      	ldr	r2, [r7, #0]
 80149f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	1c5a      	adds	r2, r3, #1
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	601a      	str	r2, [r3, #0]
}
 8014a06:	bf00      	nop
 8014a08:	3714      	adds	r7, #20
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr

08014a12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014a12:	b480      	push	{r7}
 8014a14:	b085      	sub	sp, #20
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	6078      	str	r0, [r7, #4]
 8014a1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a28:	d103      	bne.n	8014a32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	691b      	ldr	r3, [r3, #16]
 8014a2e:	60fb      	str	r3, [r7, #12]
 8014a30:	e00c      	b.n	8014a4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	3308      	adds	r3, #8
 8014a36:	60fb      	str	r3, [r7, #12]
 8014a38:	e002      	b.n	8014a40 <vListInsert+0x2e>
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	60fb      	str	r3, [r7, #12]
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	68ba      	ldr	r2, [r7, #8]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d2f6      	bcs.n	8014a3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	685a      	ldr	r2, [r3, #4]
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	683a      	ldr	r2, [r7, #0]
 8014a5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	68fa      	ldr	r2, [r7, #12]
 8014a60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	683a      	ldr	r2, [r7, #0]
 8014a66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	1c5a      	adds	r2, r3, #1
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	601a      	str	r2, [r3, #0]
}
 8014a78:	bf00      	nop
 8014a7a:	3714      	adds	r7, #20
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr

08014a84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014a84:	b480      	push	{r7}
 8014a86:	b085      	sub	sp, #20
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	691b      	ldr	r3, [r3, #16]
 8014a90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	6892      	ldr	r2, [r2, #8]
 8014a9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	689b      	ldr	r3, [r3, #8]
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	6852      	ldr	r2, [r2, #4]
 8014aa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d103      	bne.n	8014ab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	689a      	ldr	r2, [r3, #8]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	1e5a      	subs	r2, r3, #1
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	3714      	adds	r7, #20
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr

08014ad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d10a      	bne.n	8014b02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af0:	f383 8811 	msr	BASEPRI, r3
 8014af4:	f3bf 8f6f 	isb	sy
 8014af8:	f3bf 8f4f 	dsb	sy
 8014afc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014afe:	bf00      	nop
 8014b00:	e7fe      	b.n	8014b00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014b02:	f002 fca7 	bl	8017454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	681a      	ldr	r2, [r3, #0]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b0e:	68f9      	ldr	r1, [r7, #12]
 8014b10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014b12:	fb01 f303 	mul.w	r3, r1, r3
 8014b16:	441a      	add	r2, r3
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	681a      	ldr	r2, [r3, #0]
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b32:	3b01      	subs	r3, #1
 8014b34:	68f9      	ldr	r1, [r7, #12]
 8014b36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014b38:	fb01 f303 	mul.w	r3, r1, r3
 8014b3c:	441a      	add	r2, r3
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	22ff      	movs	r2, #255	; 0xff
 8014b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	22ff      	movs	r2, #255	; 0xff
 8014b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d114      	bne.n	8014b82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	691b      	ldr	r3, [r3, #16]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d01a      	beq.n	8014b96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	3310      	adds	r3, #16
 8014b64:	4618      	mov	r0, r3
 8014b66:	f001 fc5d 	bl	8016424 <xTaskRemoveFromEventList>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d012      	beq.n	8014b96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014b70:	4b0c      	ldr	r3, [pc, #48]	; (8014ba4 <xQueueGenericReset+0xcc>)
 8014b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b76:	601a      	str	r2, [r3, #0]
 8014b78:	f3bf 8f4f 	dsb	sy
 8014b7c:	f3bf 8f6f 	isb	sy
 8014b80:	e009      	b.n	8014b96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	3310      	adds	r3, #16
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7ff fef2 	bl	8014970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	3324      	adds	r3, #36	; 0x24
 8014b90:	4618      	mov	r0, r3
 8014b92:	f7ff feed 	bl	8014970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014b96:	f002 fc8d 	bl	80174b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014b9a:	2301      	movs	r3, #1
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3710      	adds	r7, #16
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	e000ed04 	.word	0xe000ed04

08014ba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b08e      	sub	sp, #56	; 0x38
 8014bac:	af02      	add	r7, sp, #8
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	607a      	str	r2, [r7, #4]
 8014bb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d10a      	bne.n	8014bd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc0:	f383 8811 	msr	BASEPRI, r3
 8014bc4:	f3bf 8f6f 	isb	sy
 8014bc8:	f3bf 8f4f 	dsb	sy
 8014bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014bce:	bf00      	nop
 8014bd0:	e7fe      	b.n	8014bd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d10a      	bne.n	8014bee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bdc:	f383 8811 	msr	BASEPRI, r3
 8014be0:	f3bf 8f6f 	isb	sy
 8014be4:	f3bf 8f4f 	dsb	sy
 8014be8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014bea:	bf00      	nop
 8014bec:	e7fe      	b.n	8014bec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d002      	beq.n	8014bfa <xQueueGenericCreateStatic+0x52>
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d001      	beq.n	8014bfe <xQueueGenericCreateStatic+0x56>
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	e000      	b.n	8014c00 <xQueueGenericCreateStatic+0x58>
 8014bfe:	2300      	movs	r3, #0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d10a      	bne.n	8014c1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c08:	f383 8811 	msr	BASEPRI, r3
 8014c0c:	f3bf 8f6f 	isb	sy
 8014c10:	f3bf 8f4f 	dsb	sy
 8014c14:	623b      	str	r3, [r7, #32]
}
 8014c16:	bf00      	nop
 8014c18:	e7fe      	b.n	8014c18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d102      	bne.n	8014c26 <xQueueGenericCreateStatic+0x7e>
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d101      	bne.n	8014c2a <xQueueGenericCreateStatic+0x82>
 8014c26:	2301      	movs	r3, #1
 8014c28:	e000      	b.n	8014c2c <xQueueGenericCreateStatic+0x84>
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d10a      	bne.n	8014c46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	61fb      	str	r3, [r7, #28]
}
 8014c42:	bf00      	nop
 8014c44:	e7fe      	b.n	8014c44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014c46:	2350      	movs	r3, #80	; 0x50
 8014c48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	2b50      	cmp	r3, #80	; 0x50
 8014c4e:	d00a      	beq.n	8014c66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c54:	f383 8811 	msr	BASEPRI, r3
 8014c58:	f3bf 8f6f 	isb	sy
 8014c5c:	f3bf 8f4f 	dsb	sy
 8014c60:	61bb      	str	r3, [r7, #24]
}
 8014c62:	bf00      	nop
 8014c64:	e7fe      	b.n	8014c64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014c66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d00d      	beq.n	8014c8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c74:	2201      	movs	r2, #1
 8014c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014c7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c80:	9300      	str	r3, [sp, #0]
 8014c82:	4613      	mov	r3, r2
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	68b9      	ldr	r1, [r7, #8]
 8014c88:	68f8      	ldr	r0, [r7, #12]
 8014c8a:	f000 f83f 	bl	8014d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3730      	adds	r7, #48	; 0x30
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b08a      	sub	sp, #40	; 0x28
 8014c9c:	af02      	add	r7, sp, #8
 8014c9e:	60f8      	str	r0, [r7, #12]
 8014ca0:	60b9      	str	r1, [r7, #8]
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d10a      	bne.n	8014cc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cb0:	f383 8811 	msr	BASEPRI, r3
 8014cb4:	f3bf 8f6f 	isb	sy
 8014cb8:	f3bf 8f4f 	dsb	sy
 8014cbc:	613b      	str	r3, [r7, #16]
}
 8014cbe:	bf00      	nop
 8014cc0:	e7fe      	b.n	8014cc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	68ba      	ldr	r2, [r7, #8]
 8014cc6:	fb02 f303 	mul.w	r3, r2, r3
 8014cca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	3350      	adds	r3, #80	; 0x50
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f002 fce1 	bl	8017698 <pvPortMalloc>
 8014cd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d011      	beq.n	8014d02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014cde:	69bb      	ldr	r3, [r7, #24]
 8014ce0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	3350      	adds	r3, #80	; 0x50
 8014ce6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014ce8:	69bb      	ldr	r3, [r7, #24]
 8014cea:	2200      	movs	r2, #0
 8014cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014cf0:	79fa      	ldrb	r2, [r7, #7]
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	9300      	str	r3, [sp, #0]
 8014cf6:	4613      	mov	r3, r2
 8014cf8:	697a      	ldr	r2, [r7, #20]
 8014cfa:	68b9      	ldr	r1, [r7, #8]
 8014cfc:	68f8      	ldr	r0, [r7, #12]
 8014cfe:	f000 f805 	bl	8014d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014d02:	69bb      	ldr	r3, [r7, #24]
	}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3720      	adds	r7, #32
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	60f8      	str	r0, [r7, #12]
 8014d14:	60b9      	str	r1, [r7, #8]
 8014d16:	607a      	str	r2, [r7, #4]
 8014d18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d103      	bne.n	8014d28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014d20:	69bb      	ldr	r3, [r7, #24]
 8014d22:	69ba      	ldr	r2, [r7, #24]
 8014d24:	601a      	str	r2, [r3, #0]
 8014d26:	e002      	b.n	8014d2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	68fa      	ldr	r2, [r7, #12]
 8014d32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	68ba      	ldr	r2, [r7, #8]
 8014d38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014d3a:	2101      	movs	r1, #1
 8014d3c:	69b8      	ldr	r0, [r7, #24]
 8014d3e:	f7ff fecb 	bl	8014ad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	78fa      	ldrb	r2, [r7, #3]
 8014d46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014d4a:	bf00      	nop
 8014d4c:	3710      	adds	r7, #16
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}

08014d52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b08a      	sub	sp, #40	; 0x28
 8014d56:	af02      	add	r7, sp, #8
 8014d58:	60f8      	str	r0, [r7, #12]
 8014d5a:	60b9      	str	r1, [r7, #8]
 8014d5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d10a      	bne.n	8014d7a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8014d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d68:	f383 8811 	msr	BASEPRI, r3
 8014d6c:	f3bf 8f6f 	isb	sy
 8014d70:	f3bf 8f4f 	dsb	sy
 8014d74:	61bb      	str	r3, [r7, #24]
}
 8014d76:	bf00      	nop
 8014d78:	e7fe      	b.n	8014d78 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014d7a:	68ba      	ldr	r2, [r7, #8]
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d90a      	bls.n	8014d98 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8014d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d86:	f383 8811 	msr	BASEPRI, r3
 8014d8a:	f3bf 8f6f 	isb	sy
 8014d8e:	f3bf 8f4f 	dsb	sy
 8014d92:	617b      	str	r3, [r7, #20]
}
 8014d94:	bf00      	nop
 8014d96:	e7fe      	b.n	8014d96 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014d98:	2302      	movs	r3, #2
 8014d9a:	9300      	str	r3, [sp, #0]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	2100      	movs	r1, #0
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f7ff ff00 	bl	8014ba8 <xQueueGenericCreateStatic>
 8014da8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8014daa:	69fb      	ldr	r3, [r7, #28]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d002      	beq.n	8014db6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	68ba      	ldr	r2, [r7, #8]
 8014db4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014db6:	69fb      	ldr	r3, [r7, #28]
	}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3720      	adds	r7, #32
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}

08014dc0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b086      	sub	sp, #24
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d10a      	bne.n	8014de6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8014dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd4:	f383 8811 	msr	BASEPRI, r3
 8014dd8:	f3bf 8f6f 	isb	sy
 8014ddc:	f3bf 8f4f 	dsb	sy
 8014de0:	613b      	str	r3, [r7, #16]
}
 8014de2:	bf00      	nop
 8014de4:	e7fe      	b.n	8014de4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014de6:	683a      	ldr	r2, [r7, #0]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d90a      	bls.n	8014e04 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8014dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df2:	f383 8811 	msr	BASEPRI, r3
 8014df6:	f3bf 8f6f 	isb	sy
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	60fb      	str	r3, [r7, #12]
}
 8014e00:	bf00      	nop
 8014e02:	e7fe      	b.n	8014e02 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014e04:	2202      	movs	r2, #2
 8014e06:	2100      	movs	r1, #0
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f7ff ff45 	bl	8014c98 <xQueueGenericCreate>
 8014e0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d002      	beq.n	8014e1c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	683a      	ldr	r2, [r7, #0]
 8014e1a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014e1c:	697b      	ldr	r3, [r7, #20]
	}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3718      	adds	r7, #24
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
	...

08014e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b08e      	sub	sp, #56	; 0x38
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	607a      	str	r2, [r7, #4]
 8014e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014e36:	2300      	movs	r3, #0
 8014e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d10a      	bne.n	8014e5a <xQueueGenericSend+0x32>
	__asm volatile
 8014e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e48:	f383 8811 	msr	BASEPRI, r3
 8014e4c:	f3bf 8f6f 	isb	sy
 8014e50:	f3bf 8f4f 	dsb	sy
 8014e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014e56:	bf00      	nop
 8014e58:	e7fe      	b.n	8014e58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d103      	bne.n	8014e68 <xQueueGenericSend+0x40>
 8014e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <xQueueGenericSend+0x44>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e000      	b.n	8014e6e <xQueueGenericSend+0x46>
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d10a      	bne.n	8014e88 <xQueueGenericSend+0x60>
	__asm volatile
 8014e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e76:	f383 8811 	msr	BASEPRI, r3
 8014e7a:	f3bf 8f6f 	isb	sy
 8014e7e:	f3bf 8f4f 	dsb	sy
 8014e82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014e84:	bf00      	nop
 8014e86:	e7fe      	b.n	8014e86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	2b02      	cmp	r3, #2
 8014e8c:	d103      	bne.n	8014e96 <xQueueGenericSend+0x6e>
 8014e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e92:	2b01      	cmp	r3, #1
 8014e94:	d101      	bne.n	8014e9a <xQueueGenericSend+0x72>
 8014e96:	2301      	movs	r3, #1
 8014e98:	e000      	b.n	8014e9c <xQueueGenericSend+0x74>
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d10a      	bne.n	8014eb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8014ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea4:	f383 8811 	msr	BASEPRI, r3
 8014ea8:	f3bf 8f6f 	isb	sy
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	623b      	str	r3, [r7, #32]
}
 8014eb2:	bf00      	nop
 8014eb4:	e7fe      	b.n	8014eb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014eb6:	f001 fc77 	bl	80167a8 <xTaskGetSchedulerState>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d102      	bne.n	8014ec6 <xQueueGenericSend+0x9e>
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d101      	bne.n	8014eca <xQueueGenericSend+0xa2>
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	e000      	b.n	8014ecc <xQueueGenericSend+0xa4>
 8014eca:	2300      	movs	r3, #0
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d10a      	bne.n	8014ee6 <xQueueGenericSend+0xbe>
	__asm volatile
 8014ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed4:	f383 8811 	msr	BASEPRI, r3
 8014ed8:	f3bf 8f6f 	isb	sy
 8014edc:	f3bf 8f4f 	dsb	sy
 8014ee0:	61fb      	str	r3, [r7, #28]
}
 8014ee2:	bf00      	nop
 8014ee4:	e7fe      	b.n	8014ee4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014ee6:	f002 fab5 	bl	8017454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d302      	bcc.n	8014efc <xQueueGenericSend+0xd4>
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	2b02      	cmp	r3, #2
 8014efa:	d129      	bne.n	8014f50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014efc:	683a      	ldr	r2, [r7, #0]
 8014efe:	68b9      	ldr	r1, [r7, #8]
 8014f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f02:	f000 fc5e 	bl	80157c2 <prvCopyDataToQueue>
 8014f06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d010      	beq.n	8014f32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f12:	3324      	adds	r3, #36	; 0x24
 8014f14:	4618      	mov	r0, r3
 8014f16:	f001 fa85 	bl	8016424 <xTaskRemoveFromEventList>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d013      	beq.n	8014f48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014f20:	4b3f      	ldr	r3, [pc, #252]	; (8015020 <xQueueGenericSend+0x1f8>)
 8014f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f26:	601a      	str	r2, [r3, #0]
 8014f28:	f3bf 8f4f 	dsb	sy
 8014f2c:	f3bf 8f6f 	isb	sy
 8014f30:	e00a      	b.n	8014f48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d007      	beq.n	8014f48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014f38:	4b39      	ldr	r3, [pc, #228]	; (8015020 <xQueueGenericSend+0x1f8>)
 8014f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f3e:	601a      	str	r2, [r3, #0]
 8014f40:	f3bf 8f4f 	dsb	sy
 8014f44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014f48:	f002 fab4 	bl	80174b4 <vPortExitCritical>
				return pdPASS;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	e063      	b.n	8015018 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d103      	bne.n	8014f5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014f56:	f002 faad 	bl	80174b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	e05c      	b.n	8015018 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d106      	bne.n	8014f72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014f64:	f107 0314 	add.w	r3, r7, #20
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f001 fabf 	bl	80164ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014f6e:	2301      	movs	r3, #1
 8014f70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014f72:	f002 fa9f 	bl	80174b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014f76:	f001 f819 	bl	8015fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014f7a:	f002 fa6b 	bl	8017454 <vPortEnterCritical>
 8014f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014f84:	b25b      	sxtb	r3, r3
 8014f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f8a:	d103      	bne.n	8014f94 <xQueueGenericSend+0x16c>
 8014f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014f9a:	b25b      	sxtb	r3, r3
 8014f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fa0:	d103      	bne.n	8014faa <xQueueGenericSend+0x182>
 8014fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014faa:	f002 fa83 	bl	80174b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014fae:	1d3a      	adds	r2, r7, #4
 8014fb0:	f107 0314 	add.w	r3, r7, #20
 8014fb4:	4611      	mov	r1, r2
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f001 faae 	bl	8016518 <xTaskCheckForTimeOut>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d124      	bne.n	801500c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fc4:	f000 fcf5 	bl	80159b2 <prvIsQueueFull>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d018      	beq.n	8015000 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd0:	3310      	adds	r3, #16
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	4611      	mov	r1, r2
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f001 f9d4 	bl	8016384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fde:	f000 fc80 	bl	80158e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014fe2:	f000 fff1 	bl	8015fc8 <xTaskResumeAll>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f47f af7c 	bne.w	8014ee6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014fee:	4b0c      	ldr	r3, [pc, #48]	; (8015020 <xQueueGenericSend+0x1f8>)
 8014ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ff4:	601a      	str	r2, [r3, #0]
 8014ff6:	f3bf 8f4f 	dsb	sy
 8014ffa:	f3bf 8f6f 	isb	sy
 8014ffe:	e772      	b.n	8014ee6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015002:	f000 fc6e 	bl	80158e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015006:	f000 ffdf 	bl	8015fc8 <xTaskResumeAll>
 801500a:	e76c      	b.n	8014ee6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801500c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801500e:	f000 fc68 	bl	80158e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015012:	f000 ffd9 	bl	8015fc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015018:	4618      	mov	r0, r3
 801501a:	3738      	adds	r7, #56	; 0x38
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}
 8015020:	e000ed04 	.word	0xe000ed04

08015024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b090      	sub	sp, #64	; 0x40
 8015028:	af00      	add	r7, sp, #0
 801502a:	60f8      	str	r0, [r7, #12]
 801502c:	60b9      	str	r1, [r7, #8]
 801502e:	607a      	str	r2, [r7, #4]
 8015030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015038:	2b00      	cmp	r3, #0
 801503a:	d10a      	bne.n	8015052 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015040:	f383 8811 	msr	BASEPRI, r3
 8015044:	f3bf 8f6f 	isb	sy
 8015048:	f3bf 8f4f 	dsb	sy
 801504c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801504e:	bf00      	nop
 8015050:	e7fe      	b.n	8015050 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d103      	bne.n	8015060 <xQueueGenericSendFromISR+0x3c>
 8015058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801505c:	2b00      	cmp	r3, #0
 801505e:	d101      	bne.n	8015064 <xQueueGenericSendFromISR+0x40>
 8015060:	2301      	movs	r3, #1
 8015062:	e000      	b.n	8015066 <xQueueGenericSendFromISR+0x42>
 8015064:	2300      	movs	r3, #0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d10a      	bne.n	8015080 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801506e:	f383 8811 	msr	BASEPRI, r3
 8015072:	f3bf 8f6f 	isb	sy
 8015076:	f3bf 8f4f 	dsb	sy
 801507a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801507c:	bf00      	nop
 801507e:	e7fe      	b.n	801507e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	2b02      	cmp	r3, #2
 8015084:	d103      	bne.n	801508e <xQueueGenericSendFromISR+0x6a>
 8015086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801508a:	2b01      	cmp	r3, #1
 801508c:	d101      	bne.n	8015092 <xQueueGenericSendFromISR+0x6e>
 801508e:	2301      	movs	r3, #1
 8015090:	e000      	b.n	8015094 <xQueueGenericSendFromISR+0x70>
 8015092:	2300      	movs	r3, #0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d10a      	bne.n	80150ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801509c:	f383 8811 	msr	BASEPRI, r3
 80150a0:	f3bf 8f6f 	isb	sy
 80150a4:	f3bf 8f4f 	dsb	sy
 80150a8:	623b      	str	r3, [r7, #32]
}
 80150aa:	bf00      	nop
 80150ac:	e7fe      	b.n	80150ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80150ae:	f002 fab3 	bl	8017618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80150b2:	f3ef 8211 	mrs	r2, BASEPRI
 80150b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ba:	f383 8811 	msr	BASEPRI, r3
 80150be:	f3bf 8f6f 	isb	sy
 80150c2:	f3bf 8f4f 	dsb	sy
 80150c6:	61fa      	str	r2, [r7, #28]
 80150c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80150ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80150cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80150ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80150d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d302      	bcc.n	80150e0 <xQueueGenericSendFromISR+0xbc>
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	2b02      	cmp	r3, #2
 80150de:	d12f      	bne.n	8015140 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80150e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80150e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80150ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80150f0:	683a      	ldr	r2, [r7, #0]
 80150f2:	68b9      	ldr	r1, [r7, #8]
 80150f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80150f6:	f000 fb64 	bl	80157c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80150fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80150fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015102:	d112      	bne.n	801512a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015108:	2b00      	cmp	r3, #0
 801510a:	d016      	beq.n	801513a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801510e:	3324      	adds	r3, #36	; 0x24
 8015110:	4618      	mov	r0, r3
 8015112:	f001 f987 	bl	8016424 <xTaskRemoveFromEventList>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d00e      	beq.n	801513a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d00b      	beq.n	801513a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2201      	movs	r2, #1
 8015126:	601a      	str	r2, [r3, #0]
 8015128:	e007      	b.n	801513a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801512a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801512e:	3301      	adds	r3, #1
 8015130:	b2db      	uxtb	r3, r3
 8015132:	b25a      	sxtb	r2, r3
 8015134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801513a:	2301      	movs	r3, #1
 801513c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801513e:	e001      	b.n	8015144 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015140:	2300      	movs	r3, #0
 8015142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015146:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801514e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015152:	4618      	mov	r0, r3
 8015154:	3740      	adds	r7, #64	; 0x40
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}

0801515a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801515a:	b580      	push	{r7, lr}
 801515c:	b08e      	sub	sp, #56	; 0x38
 801515e:	af00      	add	r7, sp, #0
 8015160:	6078      	str	r0, [r7, #4]
 8015162:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516a:	2b00      	cmp	r3, #0
 801516c:	d10a      	bne.n	8015184 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015172:	f383 8811 	msr	BASEPRI, r3
 8015176:	f3bf 8f6f 	isb	sy
 801517a:	f3bf 8f4f 	dsb	sy
 801517e:	623b      	str	r3, [r7, #32]
}
 8015180:	bf00      	nop
 8015182:	e7fe      	b.n	8015182 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015188:	2b00      	cmp	r3, #0
 801518a:	d00a      	beq.n	80151a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 801518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015190:	f383 8811 	msr	BASEPRI, r3
 8015194:	f3bf 8f6f 	isb	sy
 8015198:	f3bf 8f4f 	dsb	sy
 801519c:	61fb      	str	r3, [r7, #28]
}
 801519e:	bf00      	nop
 80151a0:	e7fe      	b.n	80151a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80151a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d103      	bne.n	80151b2 <xQueueGiveFromISR+0x58>
 80151aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ac:	689b      	ldr	r3, [r3, #8]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d101      	bne.n	80151b6 <xQueueGiveFromISR+0x5c>
 80151b2:	2301      	movs	r3, #1
 80151b4:	e000      	b.n	80151b8 <xQueueGiveFromISR+0x5e>
 80151b6:	2300      	movs	r3, #0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d10a      	bne.n	80151d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80151bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c0:	f383 8811 	msr	BASEPRI, r3
 80151c4:	f3bf 8f6f 	isb	sy
 80151c8:	f3bf 8f4f 	dsb	sy
 80151cc:	61bb      	str	r3, [r7, #24]
}
 80151ce:	bf00      	nop
 80151d0:	e7fe      	b.n	80151d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80151d2:	f002 fa21 	bl	8017618 <vPortValidateInterruptPriority>
	__asm volatile
 80151d6:	f3ef 8211 	mrs	r2, BASEPRI
 80151da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151de:	f383 8811 	msr	BASEPRI, r3
 80151e2:	f3bf 8f6f 	isb	sy
 80151e6:	f3bf 8f4f 	dsb	sy
 80151ea:	617a      	str	r2, [r7, #20]
 80151ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80151ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80151f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80151f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151fe:	429a      	cmp	r2, r3
 8015200:	d22b      	bcs.n	801525a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520e:	1c5a      	adds	r2, r3, #1
 8015210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015212:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015214:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801521c:	d112      	bne.n	8015244 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015222:	2b00      	cmp	r3, #0
 8015224:	d016      	beq.n	8015254 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015228:	3324      	adds	r3, #36	; 0x24
 801522a:	4618      	mov	r0, r3
 801522c:	f001 f8fa 	bl	8016424 <xTaskRemoveFromEventList>
 8015230:	4603      	mov	r3, r0
 8015232:	2b00      	cmp	r3, #0
 8015234:	d00e      	beq.n	8015254 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00b      	beq.n	8015254 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	2201      	movs	r2, #1
 8015240:	601a      	str	r2, [r3, #0]
 8015242:	e007      	b.n	8015254 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015248:	3301      	adds	r3, #1
 801524a:	b2db      	uxtb	r3, r3
 801524c:	b25a      	sxtb	r2, r3
 801524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015254:	2301      	movs	r3, #1
 8015256:	637b      	str	r3, [r7, #52]	; 0x34
 8015258:	e001      	b.n	801525e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801525a:	2300      	movs	r3, #0
 801525c:	637b      	str	r3, [r7, #52]	; 0x34
 801525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015260:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	f383 8811 	msr	BASEPRI, r3
}
 8015268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801526c:	4618      	mov	r0, r3
 801526e:	3738      	adds	r7, #56	; 0x38
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b08c      	sub	sp, #48	; 0x30
 8015278:	af00      	add	r7, sp, #0
 801527a:	60f8      	str	r0, [r7, #12]
 801527c:	60b9      	str	r1, [r7, #8]
 801527e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015280:	2300      	movs	r3, #0
 8015282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528a:	2b00      	cmp	r3, #0
 801528c:	d10a      	bne.n	80152a4 <xQueueReceive+0x30>
	__asm volatile
 801528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015292:	f383 8811 	msr	BASEPRI, r3
 8015296:	f3bf 8f6f 	isb	sy
 801529a:	f3bf 8f4f 	dsb	sy
 801529e:	623b      	str	r3, [r7, #32]
}
 80152a0:	bf00      	nop
 80152a2:	e7fe      	b.n	80152a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d103      	bne.n	80152b2 <xQueueReceive+0x3e>
 80152aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d101      	bne.n	80152b6 <xQueueReceive+0x42>
 80152b2:	2301      	movs	r3, #1
 80152b4:	e000      	b.n	80152b8 <xQueueReceive+0x44>
 80152b6:	2300      	movs	r3, #0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d10a      	bne.n	80152d2 <xQueueReceive+0x5e>
	__asm volatile
 80152bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c0:	f383 8811 	msr	BASEPRI, r3
 80152c4:	f3bf 8f6f 	isb	sy
 80152c8:	f3bf 8f4f 	dsb	sy
 80152cc:	61fb      	str	r3, [r7, #28]
}
 80152ce:	bf00      	nop
 80152d0:	e7fe      	b.n	80152d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80152d2:	f001 fa69 	bl	80167a8 <xTaskGetSchedulerState>
 80152d6:	4603      	mov	r3, r0
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d102      	bne.n	80152e2 <xQueueReceive+0x6e>
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <xQueueReceive+0x72>
 80152e2:	2301      	movs	r3, #1
 80152e4:	e000      	b.n	80152e8 <xQueueReceive+0x74>
 80152e6:	2300      	movs	r3, #0
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d10a      	bne.n	8015302 <xQueueReceive+0x8e>
	__asm volatile
 80152ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f0:	f383 8811 	msr	BASEPRI, r3
 80152f4:	f3bf 8f6f 	isb	sy
 80152f8:	f3bf 8f4f 	dsb	sy
 80152fc:	61bb      	str	r3, [r7, #24]
}
 80152fe:	bf00      	nop
 8015300:	e7fe      	b.n	8015300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015302:	f002 f8a7 	bl	8017454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801530a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530e:	2b00      	cmp	r3, #0
 8015310:	d01f      	beq.n	8015352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015312:	68b9      	ldr	r1, [r7, #8]
 8015314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015316:	f000 fabe 	bl	8015896 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531c:	1e5a      	subs	r2, r3, #1
 801531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015324:	691b      	ldr	r3, [r3, #16]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d00f      	beq.n	801534a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532c:	3310      	adds	r3, #16
 801532e:	4618      	mov	r0, r3
 8015330:	f001 f878 	bl	8016424 <xTaskRemoveFromEventList>
 8015334:	4603      	mov	r3, r0
 8015336:	2b00      	cmp	r3, #0
 8015338:	d007      	beq.n	801534a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801533a:	4b3d      	ldr	r3, [pc, #244]	; (8015430 <xQueueReceive+0x1bc>)
 801533c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015340:	601a      	str	r2, [r3, #0]
 8015342:	f3bf 8f4f 	dsb	sy
 8015346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801534a:	f002 f8b3 	bl	80174b4 <vPortExitCritical>
				return pdPASS;
 801534e:	2301      	movs	r3, #1
 8015350:	e069      	b.n	8015426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d103      	bne.n	8015360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015358:	f002 f8ac 	bl	80174b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801535c:	2300      	movs	r3, #0
 801535e:	e062      	b.n	8015426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015362:	2b00      	cmp	r3, #0
 8015364:	d106      	bne.n	8015374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015366:	f107 0310 	add.w	r3, r7, #16
 801536a:	4618      	mov	r0, r3
 801536c:	f001 f8be 	bl	80164ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015370:	2301      	movs	r3, #1
 8015372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015374:	f002 f89e 	bl	80174b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015378:	f000 fe18 	bl	8015fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801537c:	f002 f86a 	bl	8017454 <vPortEnterCritical>
 8015380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015386:	b25b      	sxtb	r3, r3
 8015388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801538c:	d103      	bne.n	8015396 <xQueueReceive+0x122>
 801538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015390:	2200      	movs	r2, #0
 8015392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801539c:	b25b      	sxtb	r3, r3
 801539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a2:	d103      	bne.n	80153ac <xQueueReceive+0x138>
 80153a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a6:	2200      	movs	r2, #0
 80153a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80153ac:	f002 f882 	bl	80174b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80153b0:	1d3a      	adds	r2, r7, #4
 80153b2:	f107 0310 	add.w	r3, r7, #16
 80153b6:	4611      	mov	r1, r2
 80153b8:	4618      	mov	r0, r3
 80153ba:	f001 f8ad 	bl	8016518 <xTaskCheckForTimeOut>
 80153be:	4603      	mov	r3, r0
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d123      	bne.n	801540c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80153c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153c6:	f000 fade 	bl	8015986 <prvIsQueueEmpty>
 80153ca:	4603      	mov	r3, r0
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d017      	beq.n	8015400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80153d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d2:	3324      	adds	r3, #36	; 0x24
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	4611      	mov	r1, r2
 80153d8:	4618      	mov	r0, r3
 80153da:	f000 ffd3 	bl	8016384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80153de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153e0:	f000 fa7f 	bl	80158e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80153e4:	f000 fdf0 	bl	8015fc8 <xTaskResumeAll>
 80153e8:	4603      	mov	r3, r0
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d189      	bne.n	8015302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80153ee:	4b10      	ldr	r3, [pc, #64]	; (8015430 <xQueueReceive+0x1bc>)
 80153f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153f4:	601a      	str	r2, [r3, #0]
 80153f6:	f3bf 8f4f 	dsb	sy
 80153fa:	f3bf 8f6f 	isb	sy
 80153fe:	e780      	b.n	8015302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015402:	f000 fa6e 	bl	80158e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015406:	f000 fddf 	bl	8015fc8 <xTaskResumeAll>
 801540a:	e77a      	b.n	8015302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801540c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801540e:	f000 fa68 	bl	80158e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015412:	f000 fdd9 	bl	8015fc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015418:	f000 fab5 	bl	8015986 <prvIsQueueEmpty>
 801541c:	4603      	mov	r3, r0
 801541e:	2b00      	cmp	r3, #0
 8015420:	f43f af6f 	beq.w	8015302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015426:	4618      	mov	r0, r3
 8015428:	3730      	adds	r7, #48	; 0x30
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	e000ed04 	.word	0xe000ed04

08015434 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b08e      	sub	sp, #56	; 0x38
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801543e:	2300      	movs	r3, #0
 8015440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015446:	2300      	movs	r3, #0
 8015448:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801544c:	2b00      	cmp	r3, #0
 801544e:	d10a      	bne.n	8015466 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015454:	f383 8811 	msr	BASEPRI, r3
 8015458:	f3bf 8f6f 	isb	sy
 801545c:	f3bf 8f4f 	dsb	sy
 8015460:	623b      	str	r3, [r7, #32]
}
 8015462:	bf00      	nop
 8015464:	e7fe      	b.n	8015464 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801546a:	2b00      	cmp	r3, #0
 801546c:	d00a      	beq.n	8015484 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015472:	f383 8811 	msr	BASEPRI, r3
 8015476:	f3bf 8f6f 	isb	sy
 801547a:	f3bf 8f4f 	dsb	sy
 801547e:	61fb      	str	r3, [r7, #28]
}
 8015480:	bf00      	nop
 8015482:	e7fe      	b.n	8015482 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015484:	f001 f990 	bl	80167a8 <xTaskGetSchedulerState>
 8015488:	4603      	mov	r3, r0
 801548a:	2b00      	cmp	r3, #0
 801548c:	d102      	bne.n	8015494 <xQueueSemaphoreTake+0x60>
 801548e:	683b      	ldr	r3, [r7, #0]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d101      	bne.n	8015498 <xQueueSemaphoreTake+0x64>
 8015494:	2301      	movs	r3, #1
 8015496:	e000      	b.n	801549a <xQueueSemaphoreTake+0x66>
 8015498:	2300      	movs	r3, #0
 801549a:	2b00      	cmp	r3, #0
 801549c:	d10a      	bne.n	80154b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a2:	f383 8811 	msr	BASEPRI, r3
 80154a6:	f3bf 8f6f 	isb	sy
 80154aa:	f3bf 8f4f 	dsb	sy
 80154ae:	61bb      	str	r3, [r7, #24]
}
 80154b0:	bf00      	nop
 80154b2:	e7fe      	b.n	80154b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80154b4:	f001 ffce 	bl	8017454 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80154b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80154be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d024      	beq.n	801550e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80154c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c6:	1e5a      	subs	r2, r3, #1
 80154c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80154cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d104      	bne.n	80154de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80154d4:	f001 fade 	bl	8016a94 <pvTaskIncrementMutexHeldCount>
 80154d8:	4602      	mov	r2, r0
 80154da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80154de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154e0:	691b      	ldr	r3, [r3, #16]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d00f      	beq.n	8015506 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154e8:	3310      	adds	r3, #16
 80154ea:	4618      	mov	r0, r3
 80154ec:	f000 ff9a 	bl	8016424 <xTaskRemoveFromEventList>
 80154f0:	4603      	mov	r3, r0
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d007      	beq.n	8015506 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80154f6:	4b54      	ldr	r3, [pc, #336]	; (8015648 <xQueueSemaphoreTake+0x214>)
 80154f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	f3bf 8f4f 	dsb	sy
 8015502:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015506:	f001 ffd5 	bl	80174b4 <vPortExitCritical>
				return pdPASS;
 801550a:	2301      	movs	r3, #1
 801550c:	e097      	b.n	801563e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d111      	bne.n	8015538 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015516:	2b00      	cmp	r3, #0
 8015518:	d00a      	beq.n	8015530 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551e:	f383 8811 	msr	BASEPRI, r3
 8015522:	f3bf 8f6f 	isb	sy
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	617b      	str	r3, [r7, #20]
}
 801552c:	bf00      	nop
 801552e:	e7fe      	b.n	801552e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015530:	f001 ffc0 	bl	80174b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015534:	2300      	movs	r3, #0
 8015536:	e082      	b.n	801563e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801553a:	2b00      	cmp	r3, #0
 801553c:	d106      	bne.n	801554c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801553e:	f107 030c 	add.w	r3, r7, #12
 8015542:	4618      	mov	r0, r3
 8015544:	f000 ffd2 	bl	80164ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015548:	2301      	movs	r3, #1
 801554a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801554c:	f001 ffb2 	bl	80174b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015550:	f000 fd2c 	bl	8015fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015554:	f001 ff7e 	bl	8017454 <vPortEnterCritical>
 8015558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801555a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801555e:	b25b      	sxtb	r3, r3
 8015560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015564:	d103      	bne.n	801556e <xQueueSemaphoreTake+0x13a>
 8015566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015568:	2200      	movs	r2, #0
 801556a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015574:	b25b      	sxtb	r3, r3
 8015576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801557a:	d103      	bne.n	8015584 <xQueueSemaphoreTake+0x150>
 801557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557e:	2200      	movs	r2, #0
 8015580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015584:	f001 ff96 	bl	80174b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015588:	463a      	mov	r2, r7
 801558a:	f107 030c 	add.w	r3, r7, #12
 801558e:	4611      	mov	r1, r2
 8015590:	4618      	mov	r0, r3
 8015592:	f000 ffc1 	bl	8016518 <xTaskCheckForTimeOut>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	d132      	bne.n	8015602 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801559c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801559e:	f000 f9f2 	bl	8015986 <prvIsQueueEmpty>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d026      	beq.n	80155f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80155a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d109      	bne.n	80155c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80155b0:	f001 ff50 	bl	8017454 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80155b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b6:	689b      	ldr	r3, [r3, #8]
 80155b8:	4618      	mov	r0, r3
 80155ba:	f001 f913 	bl	80167e4 <xTaskPriorityInherit>
 80155be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80155c0:	f001 ff78 	bl	80174b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80155c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c6:	3324      	adds	r3, #36	; 0x24
 80155c8:	683a      	ldr	r2, [r7, #0]
 80155ca:	4611      	mov	r1, r2
 80155cc:	4618      	mov	r0, r3
 80155ce:	f000 fed9 	bl	8016384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80155d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80155d4:	f000 f985 	bl	80158e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80155d8:	f000 fcf6 	bl	8015fc8 <xTaskResumeAll>
 80155dc:	4603      	mov	r3, r0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	f47f af68 	bne.w	80154b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80155e4:	4b18      	ldr	r3, [pc, #96]	; (8015648 <xQueueSemaphoreTake+0x214>)
 80155e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155ea:	601a      	str	r2, [r3, #0]
 80155ec:	f3bf 8f4f 	dsb	sy
 80155f0:	f3bf 8f6f 	isb	sy
 80155f4:	e75e      	b.n	80154b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80155f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80155f8:	f000 f973 	bl	80158e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80155fc:	f000 fce4 	bl	8015fc8 <xTaskResumeAll>
 8015600:	e758      	b.n	80154b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015604:	f000 f96d 	bl	80158e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015608:	f000 fcde 	bl	8015fc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801560c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801560e:	f000 f9ba 	bl	8015986 <prvIsQueueEmpty>
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	f43f af4d 	beq.w	80154b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801561c:	2b00      	cmp	r3, #0
 801561e:	d00d      	beq.n	801563c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015620:	f001 ff18 	bl	8017454 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015626:	f000 f8b4 	bl	8015792 <prvGetDisinheritPriorityAfterTimeout>
 801562a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801562e:	689b      	ldr	r3, [r3, #8]
 8015630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015632:	4618      	mov	r0, r3
 8015634:	f001 f9ac 	bl	8016990 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015638:	f001 ff3c 	bl	80174b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801563c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801563e:	4618      	mov	r0, r3
 8015640:	3738      	adds	r7, #56	; 0x38
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	e000ed04 	.word	0xe000ed04

0801564c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b08e      	sub	sp, #56	; 0x38
 8015650:	af00      	add	r7, sp, #0
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801565e:	2b00      	cmp	r3, #0
 8015660:	d10a      	bne.n	8015678 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015666:	f383 8811 	msr	BASEPRI, r3
 801566a:	f3bf 8f6f 	isb	sy
 801566e:	f3bf 8f4f 	dsb	sy
 8015672:	623b      	str	r3, [r7, #32]
}
 8015674:	bf00      	nop
 8015676:	e7fe      	b.n	8015676 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d103      	bne.n	8015686 <xQueueReceiveFromISR+0x3a>
 801567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015682:	2b00      	cmp	r3, #0
 8015684:	d101      	bne.n	801568a <xQueueReceiveFromISR+0x3e>
 8015686:	2301      	movs	r3, #1
 8015688:	e000      	b.n	801568c <xQueueReceiveFromISR+0x40>
 801568a:	2300      	movs	r3, #0
 801568c:	2b00      	cmp	r3, #0
 801568e:	d10a      	bne.n	80156a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015694:	f383 8811 	msr	BASEPRI, r3
 8015698:	f3bf 8f6f 	isb	sy
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	61fb      	str	r3, [r7, #28]
}
 80156a2:	bf00      	nop
 80156a4:	e7fe      	b.n	80156a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80156a6:	f001 ffb7 	bl	8017618 <vPortValidateInterruptPriority>
	__asm volatile
 80156aa:	f3ef 8211 	mrs	r2, BASEPRI
 80156ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b2:	f383 8811 	msr	BASEPRI, r3
 80156b6:	f3bf 8f6f 	isb	sy
 80156ba:	f3bf 8f4f 	dsb	sy
 80156be:	61ba      	str	r2, [r7, #24]
 80156c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80156c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80156c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80156cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d02f      	beq.n	8015732 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80156d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80156d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80156dc:	68b9      	ldr	r1, [r7, #8]
 80156de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156e0:	f000 f8d9 	bl	8015896 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80156e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e6:	1e5a      	subs	r2, r3, #1
 80156e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80156ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80156f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156f4:	d112      	bne.n	801571c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80156f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f8:	691b      	ldr	r3, [r3, #16]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d016      	beq.n	801572c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80156fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015700:	3310      	adds	r3, #16
 8015702:	4618      	mov	r0, r3
 8015704:	f000 fe8e 	bl	8016424 <xTaskRemoveFromEventList>
 8015708:	4603      	mov	r3, r0
 801570a:	2b00      	cmp	r3, #0
 801570c:	d00e      	beq.n	801572c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d00b      	beq.n	801572c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2201      	movs	r2, #1
 8015718:	601a      	str	r2, [r3, #0]
 801571a:	e007      	b.n	801572c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801571c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015720:	3301      	adds	r3, #1
 8015722:	b2db      	uxtb	r3, r3
 8015724:	b25a      	sxtb	r2, r3
 8015726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801572c:	2301      	movs	r3, #1
 801572e:	637b      	str	r3, [r7, #52]	; 0x34
 8015730:	e001      	b.n	8015736 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015732:	2300      	movs	r3, #0
 8015734:	637b      	str	r3, [r7, #52]	; 0x34
 8015736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015738:	613b      	str	r3, [r7, #16]
	__asm volatile
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	f383 8811 	msr	BASEPRI, r3
}
 8015740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015744:	4618      	mov	r0, r3
 8015746:	3738      	adds	r7, #56	; 0x38
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b084      	sub	sp, #16
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d10a      	bne.n	8015774 <vQueueDelete+0x28>
	__asm volatile
 801575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015762:	f383 8811 	msr	BASEPRI, r3
 8015766:	f3bf 8f6f 	isb	sy
 801576a:	f3bf 8f4f 	dsb	sy
 801576e:	60bb      	str	r3, [r7, #8]
}
 8015770:	bf00      	nop
 8015772:	e7fe      	b.n	8015772 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	f000 f95f 	bl	8015a38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015780:	2b00      	cmp	r3, #0
 8015782:	d102      	bne.n	801578a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f002 f853 	bl	8017830 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801578a:	bf00      	nop
 801578c:	3710      	adds	r7, #16
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015792:	b480      	push	{r7}
 8015794:	b085      	sub	sp, #20
 8015796:	af00      	add	r7, sp, #0
 8015798:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d006      	beq.n	80157b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80157ac:	60fb      	str	r3, [r7, #12]
 80157ae:	e001      	b.n	80157b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80157b0:	2300      	movs	r3, #0
 80157b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80157b4:	68fb      	ldr	r3, [r7, #12]
	}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3714      	adds	r7, #20
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr

080157c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b086      	sub	sp, #24
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	60f8      	str	r0, [r7, #12]
 80157ca:	60b9      	str	r1, [r7, #8]
 80157cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80157ce:	2300      	movs	r3, #0
 80157d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d10d      	bne.n	80157fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d14d      	bne.n	8015884 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	689b      	ldr	r3, [r3, #8]
 80157ec:	4618      	mov	r0, r3
 80157ee:	f001 f861 	bl	80168b4 <xTaskPriorityDisinherit>
 80157f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	2200      	movs	r2, #0
 80157f8:	609a      	str	r2, [r3, #8]
 80157fa:	e043      	b.n	8015884 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d119      	bne.n	8015836 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	6858      	ldr	r0, [r3, #4]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801580a:	461a      	mov	r2, r3
 801580c:	68b9      	ldr	r1, [r7, #8]
 801580e:	f00b fd9f 	bl	8021350 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	685a      	ldr	r2, [r3, #4]
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801581a:	441a      	add	r2, r3
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	685a      	ldr	r2, [r3, #4]
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	429a      	cmp	r2, r3
 801582a:	d32b      	bcc.n	8015884 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	681a      	ldr	r2, [r3, #0]
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	605a      	str	r2, [r3, #4]
 8015834:	e026      	b.n	8015884 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	68d8      	ldr	r0, [r3, #12]
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801583e:	461a      	mov	r2, r3
 8015840:	68b9      	ldr	r1, [r7, #8]
 8015842:	f00b fd85 	bl	8021350 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	68da      	ldr	r2, [r3, #12]
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801584e:	425b      	negs	r3, r3
 8015850:	441a      	add	r2, r3
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	68da      	ldr	r2, [r3, #12]
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	429a      	cmp	r2, r3
 8015860:	d207      	bcs.n	8015872 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	689a      	ldr	r2, [r3, #8]
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801586a:	425b      	negs	r3, r3
 801586c:	441a      	add	r2, r3
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2b02      	cmp	r3, #2
 8015876:	d105      	bne.n	8015884 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d002      	beq.n	8015884 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	3b01      	subs	r3, #1
 8015882:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	1c5a      	adds	r2, r3, #1
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801588c:	697b      	ldr	r3, [r7, #20]
}
 801588e:	4618      	mov	r0, r3
 8015890:	3718      	adds	r7, #24
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}

08015896 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015896:	b580      	push	{r7, lr}
 8015898:	b082      	sub	sp, #8
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
 801589e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d018      	beq.n	80158da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	68da      	ldr	r2, [r3, #12]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158b0:	441a      	add	r2, r3
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	68da      	ldr	r2, [r3, #12]
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	689b      	ldr	r3, [r3, #8]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d303      	bcc.n	80158ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681a      	ldr	r2, [r3, #0]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	68d9      	ldr	r1, [r3, #12]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158d2:	461a      	mov	r2, r3
 80158d4:	6838      	ldr	r0, [r7, #0]
 80158d6:	f00b fd3b 	bl	8021350 <memcpy>
	}
}
 80158da:	bf00      	nop
 80158dc:	3708      	adds	r7, #8
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}

080158e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80158e2:	b580      	push	{r7, lr}
 80158e4:	b084      	sub	sp, #16
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80158ea:	f001 fdb3 	bl	8017454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158f6:	e011      	b.n	801591c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d012      	beq.n	8015926 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3324      	adds	r3, #36	; 0x24
 8015904:	4618      	mov	r0, r3
 8015906:	f000 fd8d 	bl	8016424 <xTaskRemoveFromEventList>
 801590a:	4603      	mov	r3, r0
 801590c:	2b00      	cmp	r3, #0
 801590e:	d001      	beq.n	8015914 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015910:	f000 fe64 	bl	80165dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015914:	7bfb      	ldrb	r3, [r7, #15]
 8015916:	3b01      	subs	r3, #1
 8015918:	b2db      	uxtb	r3, r3
 801591a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801591c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015920:	2b00      	cmp	r3, #0
 8015922:	dce9      	bgt.n	80158f8 <prvUnlockQueue+0x16>
 8015924:	e000      	b.n	8015928 <prvUnlockQueue+0x46>
					break;
 8015926:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	22ff      	movs	r2, #255	; 0xff
 801592c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015930:	f001 fdc0 	bl	80174b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015934:	f001 fd8e 	bl	8017454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801593e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015940:	e011      	b.n	8015966 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	691b      	ldr	r3, [r3, #16]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d012      	beq.n	8015970 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	3310      	adds	r3, #16
 801594e:	4618      	mov	r0, r3
 8015950:	f000 fd68 	bl	8016424 <xTaskRemoveFromEventList>
 8015954:	4603      	mov	r3, r0
 8015956:	2b00      	cmp	r3, #0
 8015958:	d001      	beq.n	801595e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801595a:	f000 fe3f 	bl	80165dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801595e:	7bbb      	ldrb	r3, [r7, #14]
 8015960:	3b01      	subs	r3, #1
 8015962:	b2db      	uxtb	r3, r3
 8015964:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801596a:	2b00      	cmp	r3, #0
 801596c:	dce9      	bgt.n	8015942 <prvUnlockQueue+0x60>
 801596e:	e000      	b.n	8015972 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015970:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	22ff      	movs	r2, #255	; 0xff
 8015976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801597a:	f001 fd9b 	bl	80174b4 <vPortExitCritical>
}
 801597e:	bf00      	nop
 8015980:	3710      	adds	r7, #16
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b084      	sub	sp, #16
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801598e:	f001 fd61 	bl	8017454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015996:	2b00      	cmp	r3, #0
 8015998:	d102      	bne.n	80159a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801599a:	2301      	movs	r3, #1
 801599c:	60fb      	str	r3, [r7, #12]
 801599e:	e001      	b.n	80159a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80159a0:	2300      	movs	r3, #0
 80159a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80159a4:	f001 fd86 	bl	80174b4 <vPortExitCritical>

	return xReturn;
 80159a8:	68fb      	ldr	r3, [r7, #12]
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3710      	adds	r7, #16
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80159b2:	b580      	push	{r7, lr}
 80159b4:	b084      	sub	sp, #16
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80159ba:	f001 fd4b 	bl	8017454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d102      	bne.n	80159d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80159ca:	2301      	movs	r3, #1
 80159cc:	60fb      	str	r3, [r7, #12]
 80159ce:	e001      	b.n	80159d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80159d0:	2300      	movs	r3, #0
 80159d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80159d4:	f001 fd6e 	bl	80174b4 <vPortExitCritical>

	return xReturn;
 80159d8:	68fb      	ldr	r3, [r7, #12]
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3710      	adds	r7, #16
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
	...

080159e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80159e4:	b480      	push	{r7}
 80159e6:	b085      	sub	sp, #20
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80159ee:	2300      	movs	r3, #0
 80159f0:	60fb      	str	r3, [r7, #12]
 80159f2:	e014      	b.n	8015a1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80159f4:	4a0f      	ldr	r2, [pc, #60]	; (8015a34 <vQueueAddToRegistry+0x50>)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d10b      	bne.n	8015a18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015a00:	490c      	ldr	r1, [pc, #48]	; (8015a34 <vQueueAddToRegistry+0x50>)
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	683a      	ldr	r2, [r7, #0]
 8015a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015a0a:	4a0a      	ldr	r2, [pc, #40]	; (8015a34 <vQueueAddToRegistry+0x50>)
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	4413      	add	r3, r2
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015a16:	e006      	b.n	8015a26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2b07      	cmp	r3, #7
 8015a22:	d9e7      	bls.n	80159f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015a24:	bf00      	nop
 8015a26:	bf00      	nop
 8015a28:	3714      	adds	r7, #20
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop
 8015a34:	20001660 	.word	0x20001660

08015a38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015a38:	b480      	push	{r7}
 8015a3a:	b085      	sub	sp, #20
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015a40:	2300      	movs	r3, #0
 8015a42:	60fb      	str	r3, [r7, #12]
 8015a44:	e016      	b.n	8015a74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015a46:	4a10      	ldr	r2, [pc, #64]	; (8015a88 <vQueueUnregisterQueue+0x50>)
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	00db      	lsls	r3, r3, #3
 8015a4c:	4413      	add	r3, r2
 8015a4e:	685b      	ldr	r3, [r3, #4]
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d10b      	bne.n	8015a6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015a56:	4a0c      	ldr	r2, [pc, #48]	; (8015a88 <vQueueUnregisterQueue+0x50>)
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015a60:	4a09      	ldr	r2, [pc, #36]	; (8015a88 <vQueueUnregisterQueue+0x50>)
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	00db      	lsls	r3, r3, #3
 8015a66:	4413      	add	r3, r2
 8015a68:	2200      	movs	r2, #0
 8015a6a:	605a      	str	r2, [r3, #4]
				break;
 8015a6c:	e006      	b.n	8015a7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	3301      	adds	r3, #1
 8015a72:	60fb      	str	r3, [r7, #12]
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2b07      	cmp	r3, #7
 8015a78:	d9e5      	bls.n	8015a46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015a7a:	bf00      	nop
 8015a7c:	bf00      	nop
 8015a7e:	3714      	adds	r7, #20
 8015a80:	46bd      	mov	sp, r7
 8015a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a86:	4770      	bx	lr
 8015a88:	20001660 	.word	0x20001660

08015a8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015a9c:	f001 fcda 	bl	8017454 <vPortEnterCritical>
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015aa6:	b25b      	sxtb	r3, r3
 8015aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015aac:	d103      	bne.n	8015ab6 <vQueueWaitForMessageRestricted+0x2a>
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015abc:	b25b      	sxtb	r3, r3
 8015abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ac2:	d103      	bne.n	8015acc <vQueueWaitForMessageRestricted+0x40>
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015acc:	f001 fcf2 	bl	80174b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d106      	bne.n	8015ae6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	3324      	adds	r3, #36	; 0x24
 8015adc:	687a      	ldr	r2, [r7, #4]
 8015ade:	68b9      	ldr	r1, [r7, #8]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f000 fc73 	bl	80163cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015ae6:	6978      	ldr	r0, [r7, #20]
 8015ae8:	f7ff fefb 	bl	80158e2 <prvUnlockQueue>
	}
 8015aec:	bf00      	nop
 8015aee:	3718      	adds	r7, #24
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b08e      	sub	sp, #56	; 0x38
 8015af8:	af04      	add	r7, sp, #16
 8015afa:	60f8      	str	r0, [r7, #12]
 8015afc:	60b9      	str	r1, [r7, #8]
 8015afe:	607a      	str	r2, [r7, #4]
 8015b00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d10a      	bne.n	8015b1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8015b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b0c:	f383 8811 	msr	BASEPRI, r3
 8015b10:	f3bf 8f6f 	isb	sy
 8015b14:	f3bf 8f4f 	dsb	sy
 8015b18:	623b      	str	r3, [r7, #32]
}
 8015b1a:	bf00      	nop
 8015b1c:	e7fe      	b.n	8015b1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d10a      	bne.n	8015b3a <xTaskCreateStatic+0x46>
	__asm volatile
 8015b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	61fb      	str	r3, [r7, #28]
}
 8015b36:	bf00      	nop
 8015b38:	e7fe      	b.n	8015b38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015b3a:	23bc      	movs	r3, #188	; 0xbc
 8015b3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	2bbc      	cmp	r3, #188	; 0xbc
 8015b42:	d00a      	beq.n	8015b5a <xTaskCreateStatic+0x66>
	__asm volatile
 8015b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b48:	f383 8811 	msr	BASEPRI, r3
 8015b4c:	f3bf 8f6f 	isb	sy
 8015b50:	f3bf 8f4f 	dsb	sy
 8015b54:	61bb      	str	r3, [r7, #24]
}
 8015b56:	bf00      	nop
 8015b58:	e7fe      	b.n	8015b58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015b5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d01e      	beq.n	8015ba0 <xTaskCreateStatic+0xac>
 8015b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d01b      	beq.n	8015ba0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	2202      	movs	r2, #2
 8015b76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	9303      	str	r3, [sp, #12]
 8015b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b80:	9302      	str	r3, [sp, #8]
 8015b82:	f107 0314 	add.w	r3, r7, #20
 8015b86:	9301      	str	r3, [sp, #4]
 8015b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8a:	9300      	str	r3, [sp, #0]
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	68b9      	ldr	r1, [r7, #8]
 8015b92:	68f8      	ldr	r0, [r7, #12]
 8015b94:	f000 f850 	bl	8015c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b9a:	f000 f8f3 	bl	8015d84 <prvAddNewTaskToReadyList>
 8015b9e:	e001      	b.n	8015ba4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015ba4:	697b      	ldr	r3, [r7, #20]
	}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3728      	adds	r7, #40	; 0x28
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015bae:	b580      	push	{r7, lr}
 8015bb0:	b08c      	sub	sp, #48	; 0x30
 8015bb2:	af04      	add	r7, sp, #16
 8015bb4:	60f8      	str	r0, [r7, #12]
 8015bb6:	60b9      	str	r1, [r7, #8]
 8015bb8:	603b      	str	r3, [r7, #0]
 8015bba:	4613      	mov	r3, r2
 8015bbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015bbe:	88fb      	ldrh	r3, [r7, #6]
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f001 fd68 	bl	8017698 <pvPortMalloc>
 8015bc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d00e      	beq.n	8015bee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015bd0:	20bc      	movs	r0, #188	; 0xbc
 8015bd2:	f001 fd61 	bl	8017698 <pvPortMalloc>
 8015bd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015bd8:	69fb      	ldr	r3, [r7, #28]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d003      	beq.n	8015be6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015bde:	69fb      	ldr	r3, [r7, #28]
 8015be0:	697a      	ldr	r2, [r7, #20]
 8015be2:	631a      	str	r2, [r3, #48]	; 0x30
 8015be4:	e005      	b.n	8015bf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015be6:	6978      	ldr	r0, [r7, #20]
 8015be8:	f001 fe22 	bl	8017830 <vPortFree>
 8015bec:	e001      	b.n	8015bf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015bf2:	69fb      	ldr	r3, [r7, #28]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d017      	beq.n	8015c28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015c00:	88fa      	ldrh	r2, [r7, #6]
 8015c02:	2300      	movs	r3, #0
 8015c04:	9303      	str	r3, [sp, #12]
 8015c06:	69fb      	ldr	r3, [r7, #28]
 8015c08:	9302      	str	r3, [sp, #8]
 8015c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0c:	9301      	str	r3, [sp, #4]
 8015c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	68b9      	ldr	r1, [r7, #8]
 8015c16:	68f8      	ldr	r0, [r7, #12]
 8015c18:	f000 f80e 	bl	8015c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015c1c:	69f8      	ldr	r0, [r7, #28]
 8015c1e:	f000 f8b1 	bl	8015d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015c22:	2301      	movs	r3, #1
 8015c24:	61bb      	str	r3, [r7, #24]
 8015c26:	e002      	b.n	8015c2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015c28:	f04f 33ff 	mov.w	r3, #4294967295
 8015c2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015c2e:	69bb      	ldr	r3, [r7, #24]
	}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3720      	adds	r7, #32
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}

08015c38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b088      	sub	sp, #32
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	60f8      	str	r0, [r7, #12]
 8015c40:	60b9      	str	r1, [r7, #8]
 8015c42:	607a      	str	r2, [r7, #4]
 8015c44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	009b      	lsls	r3, r3, #2
 8015c4e:	461a      	mov	r2, r3
 8015c50:	21a5      	movs	r1, #165	; 0xa5
 8015c52:	f00b fb8b 	bl	802136c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c5a:	6879      	ldr	r1, [r7, #4]
 8015c5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015c60:	440b      	add	r3, r1
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	4413      	add	r3, r2
 8015c66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015c68:	69bb      	ldr	r3, [r7, #24]
 8015c6a:	f023 0307 	bic.w	r3, r3, #7
 8015c6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015c70:	69bb      	ldr	r3, [r7, #24]
 8015c72:	f003 0307 	and.w	r3, r3, #7
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d00a      	beq.n	8015c90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8015c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c7e:	f383 8811 	msr	BASEPRI, r3
 8015c82:	f3bf 8f6f 	isb	sy
 8015c86:	f3bf 8f4f 	dsb	sy
 8015c8a:	617b      	str	r3, [r7, #20]
}
 8015c8c:	bf00      	nop
 8015c8e:	e7fe      	b.n	8015c8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d01f      	beq.n	8015cd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015c96:	2300      	movs	r3, #0
 8015c98:	61fb      	str	r3, [r7, #28]
 8015c9a:	e012      	b.n	8015cc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015c9c:	68ba      	ldr	r2, [r7, #8]
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	4413      	add	r3, r2
 8015ca2:	7819      	ldrb	r1, [r3, #0]
 8015ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ca6:	69fb      	ldr	r3, [r7, #28]
 8015ca8:	4413      	add	r3, r2
 8015caa:	3334      	adds	r3, #52	; 0x34
 8015cac:	460a      	mov	r2, r1
 8015cae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015cb0:	68ba      	ldr	r2, [r7, #8]
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	4413      	add	r3, r2
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d006      	beq.n	8015cca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	3301      	adds	r3, #1
 8015cc0:	61fb      	str	r3, [r7, #28]
 8015cc2:	69fb      	ldr	r3, [r7, #28]
 8015cc4:	2b0f      	cmp	r3, #15
 8015cc6:	d9e9      	bls.n	8015c9c <prvInitialiseNewTask+0x64>
 8015cc8:	e000      	b.n	8015ccc <prvInitialiseNewTask+0x94>
			{
				break;
 8015cca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cce:	2200      	movs	r2, #0
 8015cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015cd4:	e003      	b.n	8015cde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd8:	2200      	movs	r2, #0
 8015cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce0:	2b37      	cmp	r3, #55	; 0x37
 8015ce2:	d901      	bls.n	8015ce8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015ce4:	2337      	movs	r3, #55	; 0x37
 8015ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	3304      	adds	r3, #4
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7fe fe56 	bl	80149b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d06:	3318      	adds	r3, #24
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7fe fe51 	bl	80149b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d26:	2200      	movs	r2, #0
 8015d28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2e:	2200      	movs	r2, #0
 8015d30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d36:	3354      	adds	r3, #84	; 0x54
 8015d38:	2260      	movs	r2, #96	; 0x60
 8015d3a:	2100      	movs	r1, #0
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f00b fb15 	bl	802136c <memset>
 8015d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d44:	4a0c      	ldr	r2, [pc, #48]	; (8015d78 <prvInitialiseNewTask+0x140>)
 8015d46:	659a      	str	r2, [r3, #88]	; 0x58
 8015d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4a:	4a0c      	ldr	r2, [pc, #48]	; (8015d7c <prvInitialiseNewTask+0x144>)
 8015d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8015d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d50:	4a0b      	ldr	r2, [pc, #44]	; (8015d80 <prvInitialiseNewTask+0x148>)
 8015d52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015d54:	683a      	ldr	r2, [r7, #0]
 8015d56:	68f9      	ldr	r1, [r7, #12]
 8015d58:	69b8      	ldr	r0, [r7, #24]
 8015d5a:	f001 fa51 	bl	8017200 <pxPortInitialiseStack>
 8015d5e:	4602      	mov	r2, r0
 8015d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d002      	beq.n	8015d70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015d70:	bf00      	nop
 8015d72:	3720      	adds	r7, #32
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	080266a0 	.word	0x080266a0
 8015d7c:	080266c0 	.word	0x080266c0
 8015d80:	08026680 	.word	0x08026680

08015d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015d8c:	f001 fb62 	bl	8017454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015d90:	4b2d      	ldr	r3, [pc, #180]	; (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	3301      	adds	r3, #1
 8015d96:	4a2c      	ldr	r2, [pc, #176]	; (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015d9a:	4b2c      	ldr	r3, [pc, #176]	; (8015e4c <prvAddNewTaskToReadyList+0xc8>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d109      	bne.n	8015db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015da2:	4a2a      	ldr	r2, [pc, #168]	; (8015e4c <prvAddNewTaskToReadyList+0xc8>)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015da8:	4b27      	ldr	r3, [pc, #156]	; (8015e48 <prvAddNewTaskToReadyList+0xc4>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	d110      	bne.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015db0:	f000 fc38 	bl	8016624 <prvInitialiseTaskLists>
 8015db4:	e00d      	b.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015db6:	4b26      	ldr	r3, [pc, #152]	; (8015e50 <prvAddNewTaskToReadyList+0xcc>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d109      	bne.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015dbe:	4b23      	ldr	r3, [pc, #140]	; (8015e4c <prvAddNewTaskToReadyList+0xc8>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d802      	bhi.n	8015dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015dcc:	4a1f      	ldr	r2, [pc, #124]	; (8015e4c <prvAddNewTaskToReadyList+0xc8>)
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015dd2:	4b20      	ldr	r3, [pc, #128]	; (8015e54 <prvAddNewTaskToReadyList+0xd0>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	4a1e      	ldr	r2, [pc, #120]	; (8015e54 <prvAddNewTaskToReadyList+0xd0>)
 8015dda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015ddc:	4b1d      	ldr	r3, [pc, #116]	; (8015e54 <prvAddNewTaskToReadyList+0xd0>)
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015de8:	4b1b      	ldr	r3, [pc, #108]	; (8015e58 <prvAddNewTaskToReadyList+0xd4>)
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d903      	bls.n	8015df8 <prvAddNewTaskToReadyList+0x74>
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015df4:	4a18      	ldr	r2, [pc, #96]	; (8015e58 <prvAddNewTaskToReadyList+0xd4>)
 8015df6:	6013      	str	r3, [r2, #0]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	009b      	lsls	r3, r3, #2
 8015e00:	4413      	add	r3, r2
 8015e02:	009b      	lsls	r3, r3, #2
 8015e04:	4a15      	ldr	r2, [pc, #84]	; (8015e5c <prvAddNewTaskToReadyList+0xd8>)
 8015e06:	441a      	add	r2, r3
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	4610      	mov	r0, r2
 8015e10:	f7fe fddb 	bl	80149ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015e14:	f001 fb4e 	bl	80174b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015e18:	4b0d      	ldr	r3, [pc, #52]	; (8015e50 <prvAddNewTaskToReadyList+0xcc>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d00e      	beq.n	8015e3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015e20:	4b0a      	ldr	r3, [pc, #40]	; (8015e4c <prvAddNewTaskToReadyList+0xc8>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d207      	bcs.n	8015e3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015e2e:	4b0c      	ldr	r3, [pc, #48]	; (8015e60 <prvAddNewTaskToReadyList+0xdc>)
 8015e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e34:	601a      	str	r2, [r3, #0]
 8015e36:	f3bf 8f4f 	dsb	sy
 8015e3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015e3e:	bf00      	nop
 8015e40:	3708      	adds	r7, #8
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	20001b74 	.word	0x20001b74
 8015e4c:	200016a0 	.word	0x200016a0
 8015e50:	20001b80 	.word	0x20001b80
 8015e54:	20001b90 	.word	0x20001b90
 8015e58:	20001b7c 	.word	0x20001b7c
 8015e5c:	200016a4 	.word	0x200016a4
 8015e60:	e000ed04 	.word	0xe000ed04

08015e64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d017      	beq.n	8015ea6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015e76:	4b13      	ldr	r3, [pc, #76]	; (8015ec4 <vTaskDelay+0x60>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00a      	beq.n	8015e94 <vTaskDelay+0x30>
	__asm volatile
 8015e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e82:	f383 8811 	msr	BASEPRI, r3
 8015e86:	f3bf 8f6f 	isb	sy
 8015e8a:	f3bf 8f4f 	dsb	sy
 8015e8e:	60bb      	str	r3, [r7, #8]
}
 8015e90:	bf00      	nop
 8015e92:	e7fe      	b.n	8015e92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015e94:	f000 f88a 	bl	8015fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015e98:	2100      	movs	r1, #0
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f000 fe0e 	bl	8016abc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015ea0:	f000 f892 	bl	8015fc8 <xTaskResumeAll>
 8015ea4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d107      	bne.n	8015ebc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015eac:	4b06      	ldr	r3, [pc, #24]	; (8015ec8 <vTaskDelay+0x64>)
 8015eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015eb2:	601a      	str	r2, [r3, #0]
 8015eb4:	f3bf 8f4f 	dsb	sy
 8015eb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015ebc:	bf00      	nop
 8015ebe:	3710      	adds	r7, #16
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}
 8015ec4:	20001b9c 	.word	0x20001b9c
 8015ec8:	e000ed04 	.word	0xe000ed04

08015ecc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b08a      	sub	sp, #40	; 0x28
 8015ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015eda:	463a      	mov	r2, r7
 8015edc:	1d39      	adds	r1, r7, #4
 8015ede:	f107 0308 	add.w	r3, r7, #8
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f7fe fd10 	bl	8014908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	68ba      	ldr	r2, [r7, #8]
 8015eee:	9202      	str	r2, [sp, #8]
 8015ef0:	9301      	str	r3, [sp, #4]
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	9300      	str	r3, [sp, #0]
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	460a      	mov	r2, r1
 8015efa:	4924      	ldr	r1, [pc, #144]	; (8015f8c <vTaskStartScheduler+0xc0>)
 8015efc:	4824      	ldr	r0, [pc, #144]	; (8015f90 <vTaskStartScheduler+0xc4>)
 8015efe:	f7ff fdf9 	bl	8015af4 <xTaskCreateStatic>
 8015f02:	4603      	mov	r3, r0
 8015f04:	4a23      	ldr	r2, [pc, #140]	; (8015f94 <vTaskStartScheduler+0xc8>)
 8015f06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015f08:	4b22      	ldr	r3, [pc, #136]	; (8015f94 <vTaskStartScheduler+0xc8>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d002      	beq.n	8015f16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015f10:	2301      	movs	r3, #1
 8015f12:	617b      	str	r3, [r7, #20]
 8015f14:	e001      	b.n	8015f1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015f16:	2300      	movs	r3, #0
 8015f18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	2b01      	cmp	r3, #1
 8015f1e:	d102      	bne.n	8015f26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015f20:	f000 fe20 	bl	8016b64 <xTimerCreateTimerTask>
 8015f24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d11b      	bne.n	8015f64 <vTaskStartScheduler+0x98>
	__asm volatile
 8015f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f30:	f383 8811 	msr	BASEPRI, r3
 8015f34:	f3bf 8f6f 	isb	sy
 8015f38:	f3bf 8f4f 	dsb	sy
 8015f3c:	613b      	str	r3, [r7, #16]
}
 8015f3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015f40:	4b15      	ldr	r3, [pc, #84]	; (8015f98 <vTaskStartScheduler+0xcc>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	3354      	adds	r3, #84	; 0x54
 8015f46:	4a15      	ldr	r2, [pc, #84]	; (8015f9c <vTaskStartScheduler+0xd0>)
 8015f48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015f4a:	4b15      	ldr	r3, [pc, #84]	; (8015fa0 <vTaskStartScheduler+0xd4>)
 8015f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8015f50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015f52:	4b14      	ldr	r3, [pc, #80]	; (8015fa4 <vTaskStartScheduler+0xd8>)
 8015f54:	2201      	movs	r2, #1
 8015f56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015f58:	4b13      	ldr	r3, [pc, #76]	; (8015fa8 <vTaskStartScheduler+0xdc>)
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015f5e:	f001 f9d7 	bl	8017310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015f62:	e00e      	b.n	8015f82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f6a:	d10a      	bne.n	8015f82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8015f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f70:	f383 8811 	msr	BASEPRI, r3
 8015f74:	f3bf 8f6f 	isb	sy
 8015f78:	f3bf 8f4f 	dsb	sy
 8015f7c:	60fb      	str	r3, [r7, #12]
}
 8015f7e:	bf00      	nop
 8015f80:	e7fe      	b.n	8015f80 <vTaskStartScheduler+0xb4>
}
 8015f82:	bf00      	nop
 8015f84:	3718      	adds	r7, #24
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	08024028 	.word	0x08024028
 8015f90:	080165f5 	.word	0x080165f5
 8015f94:	20001b98 	.word	0x20001b98
 8015f98:	200016a0 	.word	0x200016a0
 8015f9c:	20000140 	.word	0x20000140
 8015fa0:	20001b94 	.word	0x20001b94
 8015fa4:	20001b80 	.word	0x20001b80
 8015fa8:	20001b78 	.word	0x20001b78

08015fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015fac:	b480      	push	{r7}
 8015fae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015fb0:	4b04      	ldr	r3, [pc, #16]	; (8015fc4 <vTaskSuspendAll+0x18>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	3301      	adds	r3, #1
 8015fb6:	4a03      	ldr	r2, [pc, #12]	; (8015fc4 <vTaskSuspendAll+0x18>)
 8015fb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015fba:	bf00      	nop
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc2:	4770      	bx	lr
 8015fc4:	20001b9c 	.word	0x20001b9c

08015fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b084      	sub	sp, #16
 8015fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015fd6:	4b42      	ldr	r3, [pc, #264]	; (80160e0 <xTaskResumeAll+0x118>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d10a      	bne.n	8015ff4 <xTaskResumeAll+0x2c>
	__asm volatile
 8015fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe2:	f383 8811 	msr	BASEPRI, r3
 8015fe6:	f3bf 8f6f 	isb	sy
 8015fea:	f3bf 8f4f 	dsb	sy
 8015fee:	603b      	str	r3, [r7, #0]
}
 8015ff0:	bf00      	nop
 8015ff2:	e7fe      	b.n	8015ff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015ff4:	f001 fa2e 	bl	8017454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015ff8:	4b39      	ldr	r3, [pc, #228]	; (80160e0 <xTaskResumeAll+0x118>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	3b01      	subs	r3, #1
 8015ffe:	4a38      	ldr	r2, [pc, #224]	; (80160e0 <xTaskResumeAll+0x118>)
 8016000:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016002:	4b37      	ldr	r3, [pc, #220]	; (80160e0 <xTaskResumeAll+0x118>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d162      	bne.n	80160d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801600a:	4b36      	ldr	r3, [pc, #216]	; (80160e4 <xTaskResumeAll+0x11c>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d05e      	beq.n	80160d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016012:	e02f      	b.n	8016074 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016014:	4b34      	ldr	r3, [pc, #208]	; (80160e8 <xTaskResumeAll+0x120>)
 8016016:	68db      	ldr	r3, [r3, #12]
 8016018:	68db      	ldr	r3, [r3, #12]
 801601a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	3318      	adds	r3, #24
 8016020:	4618      	mov	r0, r3
 8016022:	f7fe fd2f 	bl	8014a84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	3304      	adds	r3, #4
 801602a:	4618      	mov	r0, r3
 801602c:	f7fe fd2a 	bl	8014a84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016034:	4b2d      	ldr	r3, [pc, #180]	; (80160ec <xTaskResumeAll+0x124>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	429a      	cmp	r2, r3
 801603a:	d903      	bls.n	8016044 <xTaskResumeAll+0x7c>
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016040:	4a2a      	ldr	r2, [pc, #168]	; (80160ec <xTaskResumeAll+0x124>)
 8016042:	6013      	str	r3, [r2, #0]
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016048:	4613      	mov	r3, r2
 801604a:	009b      	lsls	r3, r3, #2
 801604c:	4413      	add	r3, r2
 801604e:	009b      	lsls	r3, r3, #2
 8016050:	4a27      	ldr	r2, [pc, #156]	; (80160f0 <xTaskResumeAll+0x128>)
 8016052:	441a      	add	r2, r3
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	3304      	adds	r3, #4
 8016058:	4619      	mov	r1, r3
 801605a:	4610      	mov	r0, r2
 801605c:	f7fe fcb5 	bl	80149ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016064:	4b23      	ldr	r3, [pc, #140]	; (80160f4 <xTaskResumeAll+0x12c>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801606a:	429a      	cmp	r2, r3
 801606c:	d302      	bcc.n	8016074 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801606e:	4b22      	ldr	r3, [pc, #136]	; (80160f8 <xTaskResumeAll+0x130>)
 8016070:	2201      	movs	r2, #1
 8016072:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016074:	4b1c      	ldr	r3, [pc, #112]	; (80160e8 <xTaskResumeAll+0x120>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d1cb      	bne.n	8016014 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d001      	beq.n	8016086 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016082:	f000 fb71 	bl	8016768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016086:	4b1d      	ldr	r3, [pc, #116]	; (80160fc <xTaskResumeAll+0x134>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d010      	beq.n	80160b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016092:	f000 f859 	bl	8016148 <xTaskIncrementTick>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d002      	beq.n	80160a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801609c:	4b16      	ldr	r3, [pc, #88]	; (80160f8 <xTaskResumeAll+0x130>)
 801609e:	2201      	movs	r2, #1
 80160a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	3b01      	subs	r3, #1
 80160a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d1f1      	bne.n	8016092 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80160ae:	4b13      	ldr	r3, [pc, #76]	; (80160fc <xTaskResumeAll+0x134>)
 80160b0:	2200      	movs	r2, #0
 80160b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80160b4:	4b10      	ldr	r3, [pc, #64]	; (80160f8 <xTaskResumeAll+0x130>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d009      	beq.n	80160d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80160bc:	2301      	movs	r3, #1
 80160be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80160c0:	4b0f      	ldr	r3, [pc, #60]	; (8016100 <xTaskResumeAll+0x138>)
 80160c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160c6:	601a      	str	r2, [r3, #0]
 80160c8:	f3bf 8f4f 	dsb	sy
 80160cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80160d0:	f001 f9f0 	bl	80174b4 <vPortExitCritical>

	return xAlreadyYielded;
 80160d4:	68bb      	ldr	r3, [r7, #8]
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3710      	adds	r7, #16
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}
 80160de:	bf00      	nop
 80160e0:	20001b9c 	.word	0x20001b9c
 80160e4:	20001b74 	.word	0x20001b74
 80160e8:	20001b34 	.word	0x20001b34
 80160ec:	20001b7c 	.word	0x20001b7c
 80160f0:	200016a4 	.word	0x200016a4
 80160f4:	200016a0 	.word	0x200016a0
 80160f8:	20001b88 	.word	0x20001b88
 80160fc:	20001b84 	.word	0x20001b84
 8016100:	e000ed04 	.word	0xe000ed04

08016104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016104:	b480      	push	{r7}
 8016106:	b083      	sub	sp, #12
 8016108:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801610a:	4b05      	ldr	r3, [pc, #20]	; (8016120 <xTaskGetTickCount+0x1c>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016110:	687b      	ldr	r3, [r7, #4]
}
 8016112:	4618      	mov	r0, r3
 8016114:	370c      	adds	r7, #12
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr
 801611e:	bf00      	nop
 8016120:	20001b78 	.word	0x20001b78

08016124 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801612a:	f001 fa75 	bl	8017618 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801612e:	2300      	movs	r3, #0
 8016130:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016132:	4b04      	ldr	r3, [pc, #16]	; (8016144 <xTaskGetTickCountFromISR+0x20>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016138:	683b      	ldr	r3, [r7, #0]
}
 801613a:	4618      	mov	r0, r3
 801613c:	3708      	adds	r7, #8
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	20001b78 	.word	0x20001b78

08016148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b086      	sub	sp, #24
 801614c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801614e:	2300      	movs	r3, #0
 8016150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016152:	4b4f      	ldr	r3, [pc, #316]	; (8016290 <xTaskIncrementTick+0x148>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2b00      	cmp	r3, #0
 8016158:	f040 808f 	bne.w	801627a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801615c:	4b4d      	ldr	r3, [pc, #308]	; (8016294 <xTaskIncrementTick+0x14c>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	3301      	adds	r3, #1
 8016162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016164:	4a4b      	ldr	r2, [pc, #300]	; (8016294 <xTaskIncrementTick+0x14c>)
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d120      	bne.n	80161b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016170:	4b49      	ldr	r3, [pc, #292]	; (8016298 <xTaskIncrementTick+0x150>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00a      	beq.n	8016190 <xTaskIncrementTick+0x48>
	__asm volatile
 801617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801617e:	f383 8811 	msr	BASEPRI, r3
 8016182:	f3bf 8f6f 	isb	sy
 8016186:	f3bf 8f4f 	dsb	sy
 801618a:	603b      	str	r3, [r7, #0]
}
 801618c:	bf00      	nop
 801618e:	e7fe      	b.n	801618e <xTaskIncrementTick+0x46>
 8016190:	4b41      	ldr	r3, [pc, #260]	; (8016298 <xTaskIncrementTick+0x150>)
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	60fb      	str	r3, [r7, #12]
 8016196:	4b41      	ldr	r3, [pc, #260]	; (801629c <xTaskIncrementTick+0x154>)
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	4a3f      	ldr	r2, [pc, #252]	; (8016298 <xTaskIncrementTick+0x150>)
 801619c:	6013      	str	r3, [r2, #0]
 801619e:	4a3f      	ldr	r2, [pc, #252]	; (801629c <xTaskIncrementTick+0x154>)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	6013      	str	r3, [r2, #0]
 80161a4:	4b3e      	ldr	r3, [pc, #248]	; (80162a0 <xTaskIncrementTick+0x158>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	3301      	adds	r3, #1
 80161aa:	4a3d      	ldr	r2, [pc, #244]	; (80162a0 <xTaskIncrementTick+0x158>)
 80161ac:	6013      	str	r3, [r2, #0]
 80161ae:	f000 fadb 	bl	8016768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80161b2:	4b3c      	ldr	r3, [pc, #240]	; (80162a4 <xTaskIncrementTick+0x15c>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	693a      	ldr	r2, [r7, #16]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d349      	bcc.n	8016250 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80161bc:	4b36      	ldr	r3, [pc, #216]	; (8016298 <xTaskIncrementTick+0x150>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d104      	bne.n	80161d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161c6:	4b37      	ldr	r3, [pc, #220]	; (80162a4 <xTaskIncrementTick+0x15c>)
 80161c8:	f04f 32ff 	mov.w	r2, #4294967295
 80161cc:	601a      	str	r2, [r3, #0]
					break;
 80161ce:	e03f      	b.n	8016250 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161d0:	4b31      	ldr	r3, [pc, #196]	; (8016298 <xTaskIncrementTick+0x150>)
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	68db      	ldr	r3, [r3, #12]
 80161d6:	68db      	ldr	r3, [r3, #12]
 80161d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80161e0:	693a      	ldr	r2, [r7, #16]
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	429a      	cmp	r2, r3
 80161e6:	d203      	bcs.n	80161f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80161e8:	4a2e      	ldr	r2, [pc, #184]	; (80162a4 <xTaskIncrementTick+0x15c>)
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80161ee:	e02f      	b.n	8016250 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	3304      	adds	r3, #4
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7fe fc45 	bl	8014a84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d004      	beq.n	801620c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	3318      	adds	r3, #24
 8016206:	4618      	mov	r0, r3
 8016208:	f7fe fc3c 	bl	8014a84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016210:	4b25      	ldr	r3, [pc, #148]	; (80162a8 <xTaskIncrementTick+0x160>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	429a      	cmp	r2, r3
 8016216:	d903      	bls.n	8016220 <xTaskIncrementTick+0xd8>
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801621c:	4a22      	ldr	r2, [pc, #136]	; (80162a8 <xTaskIncrementTick+0x160>)
 801621e:	6013      	str	r3, [r2, #0]
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016224:	4613      	mov	r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	4413      	add	r3, r2
 801622a:	009b      	lsls	r3, r3, #2
 801622c:	4a1f      	ldr	r2, [pc, #124]	; (80162ac <xTaskIncrementTick+0x164>)
 801622e:	441a      	add	r2, r3
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	3304      	adds	r3, #4
 8016234:	4619      	mov	r1, r3
 8016236:	4610      	mov	r0, r2
 8016238:	f7fe fbc7 	bl	80149ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016240:	4b1b      	ldr	r3, [pc, #108]	; (80162b0 <xTaskIncrementTick+0x168>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016246:	429a      	cmp	r2, r3
 8016248:	d3b8      	bcc.n	80161bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801624a:	2301      	movs	r3, #1
 801624c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801624e:	e7b5      	b.n	80161bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016250:	4b17      	ldr	r3, [pc, #92]	; (80162b0 <xTaskIncrementTick+0x168>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016256:	4915      	ldr	r1, [pc, #84]	; (80162ac <xTaskIncrementTick+0x164>)
 8016258:	4613      	mov	r3, r2
 801625a:	009b      	lsls	r3, r3, #2
 801625c:	4413      	add	r3, r2
 801625e:	009b      	lsls	r3, r3, #2
 8016260:	440b      	add	r3, r1
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	2b01      	cmp	r3, #1
 8016266:	d901      	bls.n	801626c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016268:	2301      	movs	r3, #1
 801626a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801626c:	4b11      	ldr	r3, [pc, #68]	; (80162b4 <xTaskIncrementTick+0x16c>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d007      	beq.n	8016284 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016274:	2301      	movs	r3, #1
 8016276:	617b      	str	r3, [r7, #20]
 8016278:	e004      	b.n	8016284 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801627a:	4b0f      	ldr	r3, [pc, #60]	; (80162b8 <xTaskIncrementTick+0x170>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	3301      	adds	r3, #1
 8016280:	4a0d      	ldr	r2, [pc, #52]	; (80162b8 <xTaskIncrementTick+0x170>)
 8016282:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016284:	697b      	ldr	r3, [r7, #20]
}
 8016286:	4618      	mov	r0, r3
 8016288:	3718      	adds	r7, #24
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	20001b9c 	.word	0x20001b9c
 8016294:	20001b78 	.word	0x20001b78
 8016298:	20001b2c 	.word	0x20001b2c
 801629c:	20001b30 	.word	0x20001b30
 80162a0:	20001b8c 	.word	0x20001b8c
 80162a4:	20001b94 	.word	0x20001b94
 80162a8:	20001b7c 	.word	0x20001b7c
 80162ac:	200016a4 	.word	0x200016a4
 80162b0:	200016a0 	.word	0x200016a0
 80162b4:	20001b88 	.word	0x20001b88
 80162b8:	20001b84 	.word	0x20001b84

080162bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80162c2:	4b2a      	ldr	r3, [pc, #168]	; (801636c <vTaskSwitchContext+0xb0>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d003      	beq.n	80162d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80162ca:	4b29      	ldr	r3, [pc, #164]	; (8016370 <vTaskSwitchContext+0xb4>)
 80162cc:	2201      	movs	r2, #1
 80162ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80162d0:	e046      	b.n	8016360 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80162d2:	4b27      	ldr	r3, [pc, #156]	; (8016370 <vTaskSwitchContext+0xb4>)
 80162d4:	2200      	movs	r2, #0
 80162d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162d8:	4b26      	ldr	r3, [pc, #152]	; (8016374 <vTaskSwitchContext+0xb8>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	60fb      	str	r3, [r7, #12]
 80162de:	e010      	b.n	8016302 <vTaskSwitchContext+0x46>
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d10a      	bne.n	80162fc <vTaskSwitchContext+0x40>
	__asm volatile
 80162e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ea:	f383 8811 	msr	BASEPRI, r3
 80162ee:	f3bf 8f6f 	isb	sy
 80162f2:	f3bf 8f4f 	dsb	sy
 80162f6:	607b      	str	r3, [r7, #4]
}
 80162f8:	bf00      	nop
 80162fa:	e7fe      	b.n	80162fa <vTaskSwitchContext+0x3e>
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	3b01      	subs	r3, #1
 8016300:	60fb      	str	r3, [r7, #12]
 8016302:	491d      	ldr	r1, [pc, #116]	; (8016378 <vTaskSwitchContext+0xbc>)
 8016304:	68fa      	ldr	r2, [r7, #12]
 8016306:	4613      	mov	r3, r2
 8016308:	009b      	lsls	r3, r3, #2
 801630a:	4413      	add	r3, r2
 801630c:	009b      	lsls	r3, r3, #2
 801630e:	440b      	add	r3, r1
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d0e4      	beq.n	80162e0 <vTaskSwitchContext+0x24>
 8016316:	68fa      	ldr	r2, [r7, #12]
 8016318:	4613      	mov	r3, r2
 801631a:	009b      	lsls	r3, r3, #2
 801631c:	4413      	add	r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	4a15      	ldr	r2, [pc, #84]	; (8016378 <vTaskSwitchContext+0xbc>)
 8016322:	4413      	add	r3, r2
 8016324:	60bb      	str	r3, [r7, #8]
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	685b      	ldr	r3, [r3, #4]
 801632a:	685a      	ldr	r2, [r3, #4]
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	605a      	str	r2, [r3, #4]
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	685a      	ldr	r2, [r3, #4]
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	3308      	adds	r3, #8
 8016338:	429a      	cmp	r2, r3
 801633a:	d104      	bne.n	8016346 <vTaskSwitchContext+0x8a>
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	685a      	ldr	r2, [r3, #4]
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	605a      	str	r2, [r3, #4]
 8016346:	68bb      	ldr	r3, [r7, #8]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	68db      	ldr	r3, [r3, #12]
 801634c:	4a0b      	ldr	r2, [pc, #44]	; (801637c <vTaskSwitchContext+0xc0>)
 801634e:	6013      	str	r3, [r2, #0]
 8016350:	4a08      	ldr	r2, [pc, #32]	; (8016374 <vTaskSwitchContext+0xb8>)
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016356:	4b09      	ldr	r3, [pc, #36]	; (801637c <vTaskSwitchContext+0xc0>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	3354      	adds	r3, #84	; 0x54
 801635c:	4a08      	ldr	r2, [pc, #32]	; (8016380 <vTaskSwitchContext+0xc4>)
 801635e:	6013      	str	r3, [r2, #0]
}
 8016360:	bf00      	nop
 8016362:	3714      	adds	r7, #20
 8016364:	46bd      	mov	sp, r7
 8016366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636a:	4770      	bx	lr
 801636c:	20001b9c 	.word	0x20001b9c
 8016370:	20001b88 	.word	0x20001b88
 8016374:	20001b7c 	.word	0x20001b7c
 8016378:	200016a4 	.word	0x200016a4
 801637c:	200016a0 	.word	0x200016a0
 8016380:	20000140 	.word	0x20000140

08016384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b084      	sub	sp, #16
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d10a      	bne.n	80163aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016398:	f383 8811 	msr	BASEPRI, r3
 801639c:	f3bf 8f6f 	isb	sy
 80163a0:	f3bf 8f4f 	dsb	sy
 80163a4:	60fb      	str	r3, [r7, #12]
}
 80163a6:	bf00      	nop
 80163a8:	e7fe      	b.n	80163a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80163aa:	4b07      	ldr	r3, [pc, #28]	; (80163c8 <vTaskPlaceOnEventList+0x44>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	3318      	adds	r3, #24
 80163b0:	4619      	mov	r1, r3
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f7fe fb2d 	bl	8014a12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80163b8:	2101      	movs	r1, #1
 80163ba:	6838      	ldr	r0, [r7, #0]
 80163bc:	f000 fb7e 	bl	8016abc <prvAddCurrentTaskToDelayedList>
}
 80163c0:	bf00      	nop
 80163c2:	3710      	adds	r7, #16
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}
 80163c8:	200016a0 	.word	0x200016a0

080163cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b086      	sub	sp, #24
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d10a      	bne.n	80163f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80163de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e2:	f383 8811 	msr	BASEPRI, r3
 80163e6:	f3bf 8f6f 	isb	sy
 80163ea:	f3bf 8f4f 	dsb	sy
 80163ee:	617b      	str	r3, [r7, #20]
}
 80163f0:	bf00      	nop
 80163f2:	e7fe      	b.n	80163f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80163f4:	4b0a      	ldr	r3, [pc, #40]	; (8016420 <vTaskPlaceOnEventListRestricted+0x54>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	3318      	adds	r3, #24
 80163fa:	4619      	mov	r1, r3
 80163fc:	68f8      	ldr	r0, [r7, #12]
 80163fe:	f7fe fae4 	bl	80149ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d002      	beq.n	801640e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016408:	f04f 33ff 	mov.w	r3, #4294967295
 801640c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801640e:	6879      	ldr	r1, [r7, #4]
 8016410:	68b8      	ldr	r0, [r7, #8]
 8016412:	f000 fb53 	bl	8016abc <prvAddCurrentTaskToDelayedList>
	}
 8016416:	bf00      	nop
 8016418:	3718      	adds	r7, #24
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}
 801641e:	bf00      	nop
 8016420:	200016a0 	.word	0x200016a0

08016424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b086      	sub	sp, #24
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	68db      	ldr	r3, [r3, #12]
 8016432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d10a      	bne.n	8016450 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801643e:	f383 8811 	msr	BASEPRI, r3
 8016442:	f3bf 8f6f 	isb	sy
 8016446:	f3bf 8f4f 	dsb	sy
 801644a:	60fb      	str	r3, [r7, #12]
}
 801644c:	bf00      	nop
 801644e:	e7fe      	b.n	801644e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	3318      	adds	r3, #24
 8016454:	4618      	mov	r0, r3
 8016456:	f7fe fb15 	bl	8014a84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801645a:	4b1e      	ldr	r3, [pc, #120]	; (80164d4 <xTaskRemoveFromEventList+0xb0>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d11d      	bne.n	801649e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	3304      	adds	r3, #4
 8016466:	4618      	mov	r0, r3
 8016468:	f7fe fb0c 	bl	8014a84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801646c:	693b      	ldr	r3, [r7, #16]
 801646e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016470:	4b19      	ldr	r3, [pc, #100]	; (80164d8 <xTaskRemoveFromEventList+0xb4>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	429a      	cmp	r2, r3
 8016476:	d903      	bls.n	8016480 <xTaskRemoveFromEventList+0x5c>
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801647c:	4a16      	ldr	r2, [pc, #88]	; (80164d8 <xTaskRemoveFromEventList+0xb4>)
 801647e:	6013      	str	r3, [r2, #0]
 8016480:	693b      	ldr	r3, [r7, #16]
 8016482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016484:	4613      	mov	r3, r2
 8016486:	009b      	lsls	r3, r3, #2
 8016488:	4413      	add	r3, r2
 801648a:	009b      	lsls	r3, r3, #2
 801648c:	4a13      	ldr	r2, [pc, #76]	; (80164dc <xTaskRemoveFromEventList+0xb8>)
 801648e:	441a      	add	r2, r3
 8016490:	693b      	ldr	r3, [r7, #16]
 8016492:	3304      	adds	r3, #4
 8016494:	4619      	mov	r1, r3
 8016496:	4610      	mov	r0, r2
 8016498:	f7fe fa97 	bl	80149ca <vListInsertEnd>
 801649c:	e005      	b.n	80164aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	3318      	adds	r3, #24
 80164a2:	4619      	mov	r1, r3
 80164a4:	480e      	ldr	r0, [pc, #56]	; (80164e0 <xTaskRemoveFromEventList+0xbc>)
 80164a6:	f7fe fa90 	bl	80149ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80164aa:	693b      	ldr	r3, [r7, #16]
 80164ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164ae:	4b0d      	ldr	r3, [pc, #52]	; (80164e4 <xTaskRemoveFromEventList+0xc0>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164b4:	429a      	cmp	r2, r3
 80164b6:	d905      	bls.n	80164c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80164b8:	2301      	movs	r3, #1
 80164ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80164bc:	4b0a      	ldr	r3, [pc, #40]	; (80164e8 <xTaskRemoveFromEventList+0xc4>)
 80164be:	2201      	movs	r2, #1
 80164c0:	601a      	str	r2, [r3, #0]
 80164c2:	e001      	b.n	80164c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80164c4:	2300      	movs	r3, #0
 80164c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80164c8:	697b      	ldr	r3, [r7, #20]
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3718      	adds	r7, #24
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}
 80164d2:	bf00      	nop
 80164d4:	20001b9c 	.word	0x20001b9c
 80164d8:	20001b7c 	.word	0x20001b7c
 80164dc:	200016a4 	.word	0x200016a4
 80164e0:	20001b34 	.word	0x20001b34
 80164e4:	200016a0 	.word	0x200016a0
 80164e8:	20001b88 	.word	0x20001b88

080164ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80164f4:	4b06      	ldr	r3, [pc, #24]	; (8016510 <vTaskInternalSetTimeOutState+0x24>)
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80164fc:	4b05      	ldr	r3, [pc, #20]	; (8016514 <vTaskInternalSetTimeOutState+0x28>)
 80164fe:	681a      	ldr	r2, [r3, #0]
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	605a      	str	r2, [r3, #4]
}
 8016504:	bf00      	nop
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650e:	4770      	bx	lr
 8016510:	20001b8c 	.word	0x20001b8c
 8016514:	20001b78 	.word	0x20001b78

08016518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b088      	sub	sp, #32
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
 8016520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d10a      	bne.n	801653e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801652c:	f383 8811 	msr	BASEPRI, r3
 8016530:	f3bf 8f6f 	isb	sy
 8016534:	f3bf 8f4f 	dsb	sy
 8016538:	613b      	str	r3, [r7, #16]
}
 801653a:	bf00      	nop
 801653c:	e7fe      	b.n	801653c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d10a      	bne.n	801655a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016548:	f383 8811 	msr	BASEPRI, r3
 801654c:	f3bf 8f6f 	isb	sy
 8016550:	f3bf 8f4f 	dsb	sy
 8016554:	60fb      	str	r3, [r7, #12]
}
 8016556:	bf00      	nop
 8016558:	e7fe      	b.n	8016558 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801655a:	f000 ff7b 	bl	8017454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801655e:	4b1d      	ldr	r3, [pc, #116]	; (80165d4 <xTaskCheckForTimeOut+0xbc>)
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	69ba      	ldr	r2, [r7, #24]
 801656a:	1ad3      	subs	r3, r2, r3
 801656c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016576:	d102      	bne.n	801657e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016578:	2300      	movs	r3, #0
 801657a:	61fb      	str	r3, [r7, #28]
 801657c:	e023      	b.n	80165c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681a      	ldr	r2, [r3, #0]
 8016582:	4b15      	ldr	r3, [pc, #84]	; (80165d8 <xTaskCheckForTimeOut+0xc0>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	429a      	cmp	r2, r3
 8016588:	d007      	beq.n	801659a <xTaskCheckForTimeOut+0x82>
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	69ba      	ldr	r2, [r7, #24]
 8016590:	429a      	cmp	r2, r3
 8016592:	d302      	bcc.n	801659a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016594:	2301      	movs	r3, #1
 8016596:	61fb      	str	r3, [r7, #28]
 8016598:	e015      	b.n	80165c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	697a      	ldr	r2, [r7, #20]
 80165a0:	429a      	cmp	r2, r3
 80165a2:	d20b      	bcs.n	80165bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80165a4:	683b      	ldr	r3, [r7, #0]
 80165a6:	681a      	ldr	r2, [r3, #0]
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	1ad2      	subs	r2, r2, r3
 80165ac:	683b      	ldr	r3, [r7, #0]
 80165ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80165b0:	6878      	ldr	r0, [r7, #4]
 80165b2:	f7ff ff9b 	bl	80164ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80165b6:	2300      	movs	r3, #0
 80165b8:	61fb      	str	r3, [r7, #28]
 80165ba:	e004      	b.n	80165c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	2200      	movs	r2, #0
 80165c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80165c2:	2301      	movs	r3, #1
 80165c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80165c6:	f000 ff75 	bl	80174b4 <vPortExitCritical>

	return xReturn;
 80165ca:	69fb      	ldr	r3, [r7, #28]
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3720      	adds	r7, #32
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}
 80165d4:	20001b78 	.word	0x20001b78
 80165d8:	20001b8c 	.word	0x20001b8c

080165dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80165dc:	b480      	push	{r7}
 80165de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80165e0:	4b03      	ldr	r3, [pc, #12]	; (80165f0 <vTaskMissedYield+0x14>)
 80165e2:	2201      	movs	r2, #1
 80165e4:	601a      	str	r2, [r3, #0]
}
 80165e6:	bf00      	nop
 80165e8:	46bd      	mov	sp, r7
 80165ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ee:	4770      	bx	lr
 80165f0:	20001b88 	.word	0x20001b88

080165f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80165fc:	f000 f852 	bl	80166a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016600:	4b06      	ldr	r3, [pc, #24]	; (801661c <prvIdleTask+0x28>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	2b01      	cmp	r3, #1
 8016606:	d9f9      	bls.n	80165fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8016608:	4b05      	ldr	r3, [pc, #20]	; (8016620 <prvIdleTask+0x2c>)
 801660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801660e:	601a      	str	r2, [r3, #0]
 8016610:	f3bf 8f4f 	dsb	sy
 8016614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016618:	e7f0      	b.n	80165fc <prvIdleTask+0x8>
 801661a:	bf00      	nop
 801661c:	200016a4 	.word	0x200016a4
 8016620:	e000ed04 	.word	0xe000ed04

08016624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801662a:	2300      	movs	r3, #0
 801662c:	607b      	str	r3, [r7, #4]
 801662e:	e00c      	b.n	801664a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	4613      	mov	r3, r2
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	4413      	add	r3, r2
 8016638:	009b      	lsls	r3, r3, #2
 801663a:	4a12      	ldr	r2, [pc, #72]	; (8016684 <prvInitialiseTaskLists+0x60>)
 801663c:	4413      	add	r3, r2
 801663e:	4618      	mov	r0, r3
 8016640:	f7fe f996 	bl	8014970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	3301      	adds	r3, #1
 8016648:	607b      	str	r3, [r7, #4]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	2b37      	cmp	r3, #55	; 0x37
 801664e:	d9ef      	bls.n	8016630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016650:	480d      	ldr	r0, [pc, #52]	; (8016688 <prvInitialiseTaskLists+0x64>)
 8016652:	f7fe f98d 	bl	8014970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016656:	480d      	ldr	r0, [pc, #52]	; (801668c <prvInitialiseTaskLists+0x68>)
 8016658:	f7fe f98a 	bl	8014970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801665c:	480c      	ldr	r0, [pc, #48]	; (8016690 <prvInitialiseTaskLists+0x6c>)
 801665e:	f7fe f987 	bl	8014970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016662:	480c      	ldr	r0, [pc, #48]	; (8016694 <prvInitialiseTaskLists+0x70>)
 8016664:	f7fe f984 	bl	8014970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016668:	480b      	ldr	r0, [pc, #44]	; (8016698 <prvInitialiseTaskLists+0x74>)
 801666a:	f7fe f981 	bl	8014970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801666e:	4b0b      	ldr	r3, [pc, #44]	; (801669c <prvInitialiseTaskLists+0x78>)
 8016670:	4a05      	ldr	r2, [pc, #20]	; (8016688 <prvInitialiseTaskLists+0x64>)
 8016672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016674:	4b0a      	ldr	r3, [pc, #40]	; (80166a0 <prvInitialiseTaskLists+0x7c>)
 8016676:	4a05      	ldr	r2, [pc, #20]	; (801668c <prvInitialiseTaskLists+0x68>)
 8016678:	601a      	str	r2, [r3, #0]
}
 801667a:	bf00      	nop
 801667c:	3708      	adds	r7, #8
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}
 8016682:	bf00      	nop
 8016684:	200016a4 	.word	0x200016a4
 8016688:	20001b04 	.word	0x20001b04
 801668c:	20001b18 	.word	0x20001b18
 8016690:	20001b34 	.word	0x20001b34
 8016694:	20001b48 	.word	0x20001b48
 8016698:	20001b60 	.word	0x20001b60
 801669c:	20001b2c 	.word	0x20001b2c
 80166a0:	20001b30 	.word	0x20001b30

080166a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80166aa:	e019      	b.n	80166e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80166ac:	f000 fed2 	bl	8017454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166b0:	4b10      	ldr	r3, [pc, #64]	; (80166f4 <prvCheckTasksWaitingTermination+0x50>)
 80166b2:	68db      	ldr	r3, [r3, #12]
 80166b4:	68db      	ldr	r3, [r3, #12]
 80166b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	3304      	adds	r3, #4
 80166bc:	4618      	mov	r0, r3
 80166be:	f7fe f9e1 	bl	8014a84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80166c2:	4b0d      	ldr	r3, [pc, #52]	; (80166f8 <prvCheckTasksWaitingTermination+0x54>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	3b01      	subs	r3, #1
 80166c8:	4a0b      	ldr	r2, [pc, #44]	; (80166f8 <prvCheckTasksWaitingTermination+0x54>)
 80166ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80166cc:	4b0b      	ldr	r3, [pc, #44]	; (80166fc <prvCheckTasksWaitingTermination+0x58>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	3b01      	subs	r3, #1
 80166d2:	4a0a      	ldr	r2, [pc, #40]	; (80166fc <prvCheckTasksWaitingTermination+0x58>)
 80166d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80166d6:	f000 feed 	bl	80174b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f000 f810 	bl	8016700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80166e0:	4b06      	ldr	r3, [pc, #24]	; (80166fc <prvCheckTasksWaitingTermination+0x58>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d1e1      	bne.n	80166ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80166e8:	bf00      	nop
 80166ea:	bf00      	nop
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	20001b48 	.word	0x20001b48
 80166f8:	20001b74 	.word	0x20001b74
 80166fc:	20001b5c 	.word	0x20001b5c

08016700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016700:	b580      	push	{r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	3354      	adds	r3, #84	; 0x54
 801670c:	4618      	mov	r0, r3
 801670e:	f00b fcbf 	bl	8022090 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016718:	2b00      	cmp	r3, #0
 801671a:	d108      	bne.n	801672e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016720:	4618      	mov	r0, r3
 8016722:	f001 f885 	bl	8017830 <vPortFree>
				vPortFree( pxTCB );
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f001 f882 	bl	8017830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801672c:	e018      	b.n	8016760 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016734:	2b01      	cmp	r3, #1
 8016736:	d103      	bne.n	8016740 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f001 f879 	bl	8017830 <vPortFree>
	}
 801673e:	e00f      	b.n	8016760 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016746:	2b02      	cmp	r3, #2
 8016748:	d00a      	beq.n	8016760 <prvDeleteTCB+0x60>
	__asm volatile
 801674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801674e:	f383 8811 	msr	BASEPRI, r3
 8016752:	f3bf 8f6f 	isb	sy
 8016756:	f3bf 8f4f 	dsb	sy
 801675a:	60fb      	str	r3, [r7, #12]
}
 801675c:	bf00      	nop
 801675e:	e7fe      	b.n	801675e <prvDeleteTCB+0x5e>
	}
 8016760:	bf00      	nop
 8016762:	3710      	adds	r7, #16
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}

08016768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016768:	b480      	push	{r7}
 801676a:	b083      	sub	sp, #12
 801676c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801676e:	4b0c      	ldr	r3, [pc, #48]	; (80167a0 <prvResetNextTaskUnblockTime+0x38>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d104      	bne.n	8016782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016778:	4b0a      	ldr	r3, [pc, #40]	; (80167a4 <prvResetNextTaskUnblockTime+0x3c>)
 801677a:	f04f 32ff 	mov.w	r2, #4294967295
 801677e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016780:	e008      	b.n	8016794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016782:	4b07      	ldr	r3, [pc, #28]	; (80167a0 <prvResetNextTaskUnblockTime+0x38>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	68db      	ldr	r3, [r3, #12]
 8016788:	68db      	ldr	r3, [r3, #12]
 801678a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	4a04      	ldr	r2, [pc, #16]	; (80167a4 <prvResetNextTaskUnblockTime+0x3c>)
 8016792:	6013      	str	r3, [r2, #0]
}
 8016794:	bf00      	nop
 8016796:	370c      	adds	r7, #12
 8016798:	46bd      	mov	sp, r7
 801679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679e:	4770      	bx	lr
 80167a0:	20001b2c 	.word	0x20001b2c
 80167a4:	20001b94 	.word	0x20001b94

080167a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80167a8:	b480      	push	{r7}
 80167aa:	b083      	sub	sp, #12
 80167ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80167ae:	4b0b      	ldr	r3, [pc, #44]	; (80167dc <xTaskGetSchedulerState+0x34>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d102      	bne.n	80167bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80167b6:	2301      	movs	r3, #1
 80167b8:	607b      	str	r3, [r7, #4]
 80167ba:	e008      	b.n	80167ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80167bc:	4b08      	ldr	r3, [pc, #32]	; (80167e0 <xTaskGetSchedulerState+0x38>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d102      	bne.n	80167ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80167c4:	2302      	movs	r3, #2
 80167c6:	607b      	str	r3, [r7, #4]
 80167c8:	e001      	b.n	80167ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80167ca:	2300      	movs	r3, #0
 80167cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80167ce:	687b      	ldr	r3, [r7, #4]
	}
 80167d0:	4618      	mov	r0, r3
 80167d2:	370c      	adds	r7, #12
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	20001b80 	.word	0x20001b80
 80167e0:	20001b9c 	.word	0x20001b9c

080167e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b084      	sub	sp, #16
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80167f0:	2300      	movs	r3, #0
 80167f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d051      	beq.n	801689e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167fe:	4b2a      	ldr	r3, [pc, #168]	; (80168a8 <xTaskPriorityInherit+0xc4>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016804:	429a      	cmp	r2, r3
 8016806:	d241      	bcs.n	801688c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	699b      	ldr	r3, [r3, #24]
 801680c:	2b00      	cmp	r3, #0
 801680e:	db06      	blt.n	801681e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016810:	4b25      	ldr	r3, [pc, #148]	; (80168a8 <xTaskPriorityInherit+0xc4>)
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801681e:	68bb      	ldr	r3, [r7, #8]
 8016820:	6959      	ldr	r1, [r3, #20]
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016826:	4613      	mov	r3, r2
 8016828:	009b      	lsls	r3, r3, #2
 801682a:	4413      	add	r3, r2
 801682c:	009b      	lsls	r3, r3, #2
 801682e:	4a1f      	ldr	r2, [pc, #124]	; (80168ac <xTaskPriorityInherit+0xc8>)
 8016830:	4413      	add	r3, r2
 8016832:	4299      	cmp	r1, r3
 8016834:	d122      	bne.n	801687c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016836:	68bb      	ldr	r3, [r7, #8]
 8016838:	3304      	adds	r3, #4
 801683a:	4618      	mov	r0, r3
 801683c:	f7fe f922 	bl	8014a84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016840:	4b19      	ldr	r3, [pc, #100]	; (80168a8 <xTaskPriorityInherit+0xc4>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801684e:	4b18      	ldr	r3, [pc, #96]	; (80168b0 <xTaskPriorityInherit+0xcc>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	429a      	cmp	r2, r3
 8016854:	d903      	bls.n	801685e <xTaskPriorityInherit+0x7a>
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801685a:	4a15      	ldr	r2, [pc, #84]	; (80168b0 <xTaskPriorityInherit+0xcc>)
 801685c:	6013      	str	r3, [r2, #0]
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016862:	4613      	mov	r3, r2
 8016864:	009b      	lsls	r3, r3, #2
 8016866:	4413      	add	r3, r2
 8016868:	009b      	lsls	r3, r3, #2
 801686a:	4a10      	ldr	r2, [pc, #64]	; (80168ac <xTaskPriorityInherit+0xc8>)
 801686c:	441a      	add	r2, r3
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	3304      	adds	r3, #4
 8016872:	4619      	mov	r1, r3
 8016874:	4610      	mov	r0, r2
 8016876:	f7fe f8a8 	bl	80149ca <vListInsertEnd>
 801687a:	e004      	b.n	8016886 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801687c:	4b0a      	ldr	r3, [pc, #40]	; (80168a8 <xTaskPriorityInherit+0xc4>)
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016882:	68bb      	ldr	r3, [r7, #8]
 8016884:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016886:	2301      	movs	r3, #1
 8016888:	60fb      	str	r3, [r7, #12]
 801688a:	e008      	b.n	801689e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016890:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <xTaskPriorityInherit+0xc4>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016896:	429a      	cmp	r2, r3
 8016898:	d201      	bcs.n	801689e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801689a:	2301      	movs	r3, #1
 801689c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801689e:	68fb      	ldr	r3, [r7, #12]
	}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3710      	adds	r7, #16
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	200016a0 	.word	0x200016a0
 80168ac:	200016a4 	.word	0x200016a4
 80168b0:	20001b7c 	.word	0x20001b7c

080168b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b086      	sub	sp, #24
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80168c0:	2300      	movs	r3, #0
 80168c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d056      	beq.n	8016978 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80168ca:	4b2e      	ldr	r3, [pc, #184]	; (8016984 <xTaskPriorityDisinherit+0xd0>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	693a      	ldr	r2, [r7, #16]
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d00a      	beq.n	80168ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80168d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d8:	f383 8811 	msr	BASEPRI, r3
 80168dc:	f3bf 8f6f 	isb	sy
 80168e0:	f3bf 8f4f 	dsb	sy
 80168e4:	60fb      	str	r3, [r7, #12]
}
 80168e6:	bf00      	nop
 80168e8:	e7fe      	b.n	80168e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80168ea:	693b      	ldr	r3, [r7, #16]
 80168ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d10a      	bne.n	8016908 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80168f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f6:	f383 8811 	msr	BASEPRI, r3
 80168fa:	f3bf 8f6f 	isb	sy
 80168fe:	f3bf 8f4f 	dsb	sy
 8016902:	60bb      	str	r3, [r7, #8]
}
 8016904:	bf00      	nop
 8016906:	e7fe      	b.n	8016906 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801690c:	1e5a      	subs	r2, r3, #1
 801690e:	693b      	ldr	r3, [r7, #16]
 8016910:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016912:	693b      	ldr	r3, [r7, #16]
 8016914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801691a:	429a      	cmp	r2, r3
 801691c:	d02c      	beq.n	8016978 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016922:	2b00      	cmp	r3, #0
 8016924:	d128      	bne.n	8016978 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	3304      	adds	r3, #4
 801692a:	4618      	mov	r0, r3
 801692c:	f7fe f8aa 	bl	8014a84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016930:	693b      	ldr	r3, [r7, #16]
 8016932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801693c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016948:	4b0f      	ldr	r3, [pc, #60]	; (8016988 <xTaskPriorityDisinherit+0xd4>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	429a      	cmp	r2, r3
 801694e:	d903      	bls.n	8016958 <xTaskPriorityDisinherit+0xa4>
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016954:	4a0c      	ldr	r2, [pc, #48]	; (8016988 <xTaskPriorityDisinherit+0xd4>)
 8016956:	6013      	str	r3, [r2, #0]
 8016958:	693b      	ldr	r3, [r7, #16]
 801695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801695c:	4613      	mov	r3, r2
 801695e:	009b      	lsls	r3, r3, #2
 8016960:	4413      	add	r3, r2
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	4a09      	ldr	r2, [pc, #36]	; (801698c <xTaskPriorityDisinherit+0xd8>)
 8016966:	441a      	add	r2, r3
 8016968:	693b      	ldr	r3, [r7, #16]
 801696a:	3304      	adds	r3, #4
 801696c:	4619      	mov	r1, r3
 801696e:	4610      	mov	r0, r2
 8016970:	f7fe f82b 	bl	80149ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016974:	2301      	movs	r3, #1
 8016976:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016978:	697b      	ldr	r3, [r7, #20]
	}
 801697a:	4618      	mov	r0, r3
 801697c:	3718      	adds	r7, #24
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
 8016982:	bf00      	nop
 8016984:	200016a0 	.word	0x200016a0
 8016988:	20001b7c 	.word	0x20001b7c
 801698c:	200016a4 	.word	0x200016a4

08016990 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016990:	b580      	push	{r7, lr}
 8016992:	b088      	sub	sp, #32
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
 8016998:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801699e:	2301      	movs	r3, #1
 80169a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d06a      	beq.n	8016a7e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80169a8:	69bb      	ldr	r3, [r7, #24]
 80169aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d10a      	bne.n	80169c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80169b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b4:	f383 8811 	msr	BASEPRI, r3
 80169b8:	f3bf 8f6f 	isb	sy
 80169bc:	f3bf 8f4f 	dsb	sy
 80169c0:	60fb      	str	r3, [r7, #12]
}
 80169c2:	bf00      	nop
 80169c4:	e7fe      	b.n	80169c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80169c6:	69bb      	ldr	r3, [r7, #24]
 80169c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169ca:	683a      	ldr	r2, [r7, #0]
 80169cc:	429a      	cmp	r2, r3
 80169ce:	d902      	bls.n	80169d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	61fb      	str	r3, [r7, #28]
 80169d4:	e002      	b.n	80169dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80169d6:	69bb      	ldr	r3, [r7, #24]
 80169d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80169dc:	69bb      	ldr	r3, [r7, #24]
 80169de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169e0:	69fa      	ldr	r2, [r7, #28]
 80169e2:	429a      	cmp	r2, r3
 80169e4:	d04b      	beq.n	8016a7e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80169e6:	69bb      	ldr	r3, [r7, #24]
 80169e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169ea:	697a      	ldr	r2, [r7, #20]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d146      	bne.n	8016a7e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80169f0:	4b25      	ldr	r3, [pc, #148]	; (8016a88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	69ba      	ldr	r2, [r7, #24]
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d10a      	bne.n	8016a10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80169fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169fe:	f383 8811 	msr	BASEPRI, r3
 8016a02:	f3bf 8f6f 	isb	sy
 8016a06:	f3bf 8f4f 	dsb	sy
 8016a0a:	60bb      	str	r3, [r7, #8]
}
 8016a0c:	bf00      	nop
 8016a0e:	e7fe      	b.n	8016a0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016a10:	69bb      	ldr	r3, [r7, #24]
 8016a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016a16:	69bb      	ldr	r3, [r7, #24]
 8016a18:	69fa      	ldr	r2, [r7, #28]
 8016a1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016a1c:	69bb      	ldr	r3, [r7, #24]
 8016a1e:	699b      	ldr	r3, [r3, #24]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	db04      	blt.n	8016a2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	6959      	ldr	r1, [r3, #20]
 8016a32:	693a      	ldr	r2, [r7, #16]
 8016a34:	4613      	mov	r3, r2
 8016a36:	009b      	lsls	r3, r3, #2
 8016a38:	4413      	add	r3, r2
 8016a3a:	009b      	lsls	r3, r3, #2
 8016a3c:	4a13      	ldr	r2, [pc, #76]	; (8016a8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016a3e:	4413      	add	r3, r2
 8016a40:	4299      	cmp	r1, r3
 8016a42:	d11c      	bne.n	8016a7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a44:	69bb      	ldr	r3, [r7, #24]
 8016a46:	3304      	adds	r3, #4
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7fe f81b 	bl	8014a84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016a4e:	69bb      	ldr	r3, [r7, #24]
 8016a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a52:	4b0f      	ldr	r3, [pc, #60]	; (8016a90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d903      	bls.n	8016a62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a5e:	4a0c      	ldr	r2, [pc, #48]	; (8016a90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016a60:	6013      	str	r3, [r2, #0]
 8016a62:	69bb      	ldr	r3, [r7, #24]
 8016a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a66:	4613      	mov	r3, r2
 8016a68:	009b      	lsls	r3, r3, #2
 8016a6a:	4413      	add	r3, r2
 8016a6c:	009b      	lsls	r3, r3, #2
 8016a6e:	4a07      	ldr	r2, [pc, #28]	; (8016a8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016a70:	441a      	add	r2, r3
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	3304      	adds	r3, #4
 8016a76:	4619      	mov	r1, r3
 8016a78:	4610      	mov	r0, r2
 8016a7a:	f7fd ffa6 	bl	80149ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016a7e:	bf00      	nop
 8016a80:	3720      	adds	r7, #32
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop
 8016a88:	200016a0 	.word	0x200016a0
 8016a8c:	200016a4 	.word	0x200016a4
 8016a90:	20001b7c 	.word	0x20001b7c

08016a94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016a94:	b480      	push	{r7}
 8016a96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016a98:	4b07      	ldr	r3, [pc, #28]	; (8016ab8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d004      	beq.n	8016aaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016aa0:	4b05      	ldr	r3, [pc, #20]	; (8016ab8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016aa6:	3201      	adds	r2, #1
 8016aa8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016aaa:	4b03      	ldr	r3, [pc, #12]	; (8016ab8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016aac:	681b      	ldr	r3, [r3, #0]
	}
 8016aae:	4618      	mov	r0, r3
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab6:	4770      	bx	lr
 8016ab8:	200016a0 	.word	0x200016a0

08016abc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b084      	sub	sp, #16
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016ac6:	4b21      	ldr	r3, [pc, #132]	; (8016b4c <prvAddCurrentTaskToDelayedList+0x90>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016acc:	4b20      	ldr	r3, [pc, #128]	; (8016b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	3304      	adds	r3, #4
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7fd ffd6 	bl	8014a84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ade:	d10a      	bne.n	8016af6 <prvAddCurrentTaskToDelayedList+0x3a>
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d007      	beq.n	8016af6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016ae6:	4b1a      	ldr	r3, [pc, #104]	; (8016b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	3304      	adds	r3, #4
 8016aec:	4619      	mov	r1, r3
 8016aee:	4819      	ldr	r0, [pc, #100]	; (8016b54 <prvAddCurrentTaskToDelayedList+0x98>)
 8016af0:	f7fd ff6b 	bl	80149ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016af4:	e026      	b.n	8016b44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016af6:	68fa      	ldr	r2, [r7, #12]
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	4413      	add	r3, r2
 8016afc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016afe:	4b14      	ldr	r3, [pc, #80]	; (8016b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	68ba      	ldr	r2, [r7, #8]
 8016b04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016b06:	68ba      	ldr	r2, [r7, #8]
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d209      	bcs.n	8016b22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016b0e:	4b12      	ldr	r3, [pc, #72]	; (8016b58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	4b0f      	ldr	r3, [pc, #60]	; (8016b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	3304      	adds	r3, #4
 8016b18:	4619      	mov	r1, r3
 8016b1a:	4610      	mov	r0, r2
 8016b1c:	f7fd ff79 	bl	8014a12 <vListInsert>
}
 8016b20:	e010      	b.n	8016b44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016b22:	4b0e      	ldr	r3, [pc, #56]	; (8016b5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8016b24:	681a      	ldr	r2, [r3, #0]
 8016b26:	4b0a      	ldr	r3, [pc, #40]	; (8016b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	3304      	adds	r3, #4
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	4610      	mov	r0, r2
 8016b30:	f7fd ff6f 	bl	8014a12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016b34:	4b0a      	ldr	r3, [pc, #40]	; (8016b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	68ba      	ldr	r2, [r7, #8]
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d202      	bcs.n	8016b44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016b3e:	4a08      	ldr	r2, [pc, #32]	; (8016b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	6013      	str	r3, [r2, #0]
}
 8016b44:	bf00      	nop
 8016b46:	3710      	adds	r7, #16
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	20001b78 	.word	0x20001b78
 8016b50:	200016a0 	.word	0x200016a0
 8016b54:	20001b60 	.word	0x20001b60
 8016b58:	20001b30 	.word	0x20001b30
 8016b5c:	20001b2c 	.word	0x20001b2c
 8016b60:	20001b94 	.word	0x20001b94

08016b64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b08a      	sub	sp, #40	; 0x28
 8016b68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016b6e:	f000 fb07 	bl	8017180 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016b72:	4b1c      	ldr	r3, [pc, #112]	; (8016be4 <xTimerCreateTimerTask+0x80>)
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d021      	beq.n	8016bbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016b82:	1d3a      	adds	r2, r7, #4
 8016b84:	f107 0108 	add.w	r1, r7, #8
 8016b88:	f107 030c 	add.w	r3, r7, #12
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7fd fed5 	bl	801493c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016b92:	6879      	ldr	r1, [r7, #4]
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	68fa      	ldr	r2, [r7, #12]
 8016b98:	9202      	str	r2, [sp, #8]
 8016b9a:	9301      	str	r3, [sp, #4]
 8016b9c:	2302      	movs	r3, #2
 8016b9e:	9300      	str	r3, [sp, #0]
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	460a      	mov	r2, r1
 8016ba4:	4910      	ldr	r1, [pc, #64]	; (8016be8 <xTimerCreateTimerTask+0x84>)
 8016ba6:	4811      	ldr	r0, [pc, #68]	; (8016bec <xTimerCreateTimerTask+0x88>)
 8016ba8:	f7fe ffa4 	bl	8015af4 <xTaskCreateStatic>
 8016bac:	4603      	mov	r3, r0
 8016bae:	4a10      	ldr	r2, [pc, #64]	; (8016bf0 <xTimerCreateTimerTask+0x8c>)
 8016bb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016bb2:	4b0f      	ldr	r3, [pc, #60]	; (8016bf0 <xTimerCreateTimerTask+0x8c>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d001      	beq.n	8016bbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016bba:	2301      	movs	r3, #1
 8016bbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d10a      	bne.n	8016bda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8016bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc8:	f383 8811 	msr	BASEPRI, r3
 8016bcc:	f3bf 8f6f 	isb	sy
 8016bd0:	f3bf 8f4f 	dsb	sy
 8016bd4:	613b      	str	r3, [r7, #16]
}
 8016bd6:	bf00      	nop
 8016bd8:	e7fe      	b.n	8016bd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016bda:	697b      	ldr	r3, [r7, #20]
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	3718      	adds	r7, #24
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}
 8016be4:	20001bd0 	.word	0x20001bd0
 8016be8:	08024030 	.word	0x08024030
 8016bec:	08016d29 	.word	0x08016d29
 8016bf0:	20001bd4 	.word	0x20001bd4

08016bf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b08a      	sub	sp, #40	; 0x28
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	60f8      	str	r0, [r7, #12]
 8016bfc:	60b9      	str	r1, [r7, #8]
 8016bfe:	607a      	str	r2, [r7, #4]
 8016c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016c02:	2300      	movs	r3, #0
 8016c04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d10a      	bne.n	8016c22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8016c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c10:	f383 8811 	msr	BASEPRI, r3
 8016c14:	f3bf 8f6f 	isb	sy
 8016c18:	f3bf 8f4f 	dsb	sy
 8016c1c:	623b      	str	r3, [r7, #32]
}
 8016c1e:	bf00      	nop
 8016c20:	e7fe      	b.n	8016c20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016c22:	4b1a      	ldr	r3, [pc, #104]	; (8016c8c <xTimerGenericCommand+0x98>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d02a      	beq.n	8016c80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	2b05      	cmp	r3, #5
 8016c3a:	dc18      	bgt.n	8016c6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016c3c:	f7ff fdb4 	bl	80167a8 <xTaskGetSchedulerState>
 8016c40:	4603      	mov	r3, r0
 8016c42:	2b02      	cmp	r3, #2
 8016c44:	d109      	bne.n	8016c5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016c46:	4b11      	ldr	r3, [pc, #68]	; (8016c8c <xTimerGenericCommand+0x98>)
 8016c48:	6818      	ldr	r0, [r3, #0]
 8016c4a:	f107 0110 	add.w	r1, r7, #16
 8016c4e:	2300      	movs	r3, #0
 8016c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c52:	f7fe f8e9 	bl	8014e28 <xQueueGenericSend>
 8016c56:	6278      	str	r0, [r7, #36]	; 0x24
 8016c58:	e012      	b.n	8016c80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016c5a:	4b0c      	ldr	r3, [pc, #48]	; (8016c8c <xTimerGenericCommand+0x98>)
 8016c5c:	6818      	ldr	r0, [r3, #0]
 8016c5e:	f107 0110 	add.w	r1, r7, #16
 8016c62:	2300      	movs	r3, #0
 8016c64:	2200      	movs	r2, #0
 8016c66:	f7fe f8df 	bl	8014e28 <xQueueGenericSend>
 8016c6a:	6278      	str	r0, [r7, #36]	; 0x24
 8016c6c:	e008      	b.n	8016c80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016c6e:	4b07      	ldr	r3, [pc, #28]	; (8016c8c <xTimerGenericCommand+0x98>)
 8016c70:	6818      	ldr	r0, [r3, #0]
 8016c72:	f107 0110 	add.w	r1, r7, #16
 8016c76:	2300      	movs	r3, #0
 8016c78:	683a      	ldr	r2, [r7, #0]
 8016c7a:	f7fe f9d3 	bl	8015024 <xQueueGenericSendFromISR>
 8016c7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3728      	adds	r7, #40	; 0x28
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}
 8016c8a:	bf00      	nop
 8016c8c:	20001bd0 	.word	0x20001bd0

08016c90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b088      	sub	sp, #32
 8016c94:	af02      	add	r7, sp, #8
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c9a:	4b22      	ldr	r3, [pc, #136]	; (8016d24 <prvProcessExpiredTimer+0x94>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	68db      	ldr	r3, [r3, #12]
 8016ca0:	68db      	ldr	r3, [r3, #12]
 8016ca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	3304      	adds	r3, #4
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7fd feeb 	bl	8014a84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016cb4:	f003 0304 	and.w	r3, r3, #4
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d022      	beq.n	8016d02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016cbc:	697b      	ldr	r3, [r7, #20]
 8016cbe:	699a      	ldr	r2, [r3, #24]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	18d1      	adds	r1, r2, r3
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	683a      	ldr	r2, [r7, #0]
 8016cc8:	6978      	ldr	r0, [r7, #20]
 8016cca:	f000 f8d1 	bl	8016e70 <prvInsertTimerInActiveList>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d01f      	beq.n	8016d14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	9300      	str	r3, [sp, #0]
 8016cd8:	2300      	movs	r3, #0
 8016cda:	687a      	ldr	r2, [r7, #4]
 8016cdc:	2100      	movs	r1, #0
 8016cde:	6978      	ldr	r0, [r7, #20]
 8016ce0:	f7ff ff88 	bl	8016bf4 <xTimerGenericCommand>
 8016ce4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016ce6:	693b      	ldr	r3, [r7, #16]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d113      	bne.n	8016d14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8016cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cf0:	f383 8811 	msr	BASEPRI, r3
 8016cf4:	f3bf 8f6f 	isb	sy
 8016cf8:	f3bf 8f4f 	dsb	sy
 8016cfc:	60fb      	str	r3, [r7, #12]
}
 8016cfe:	bf00      	nop
 8016d00:	e7fe      	b.n	8016d00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016d02:	697b      	ldr	r3, [r7, #20]
 8016d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016d08:	f023 0301 	bic.w	r3, r3, #1
 8016d0c:	b2da      	uxtb	r2, r3
 8016d0e:	697b      	ldr	r3, [r7, #20]
 8016d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	6a1b      	ldr	r3, [r3, #32]
 8016d18:	6978      	ldr	r0, [r7, #20]
 8016d1a:	4798      	blx	r3
}
 8016d1c:	bf00      	nop
 8016d1e:	3718      	adds	r7, #24
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}
 8016d24:	20001bc8 	.word	0x20001bc8

08016d28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b084      	sub	sp, #16
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016d30:	f107 0308 	add.w	r3, r7, #8
 8016d34:	4618      	mov	r0, r3
 8016d36:	f000 f857 	bl	8016de8 <prvGetNextExpireTime>
 8016d3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	4619      	mov	r1, r3
 8016d40:	68f8      	ldr	r0, [r7, #12]
 8016d42:	f000 f803 	bl	8016d4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016d46:	f000 f8d5 	bl	8016ef4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016d4a:	e7f1      	b.n	8016d30 <prvTimerTask+0x8>

08016d4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b084      	sub	sp, #16
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016d56:	f7ff f929 	bl	8015fac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016d5a:	f107 0308 	add.w	r3, r7, #8
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f000 f866 	bl	8016e30 <prvSampleTimeNow>
 8016d64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d130      	bne.n	8016dce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d10a      	bne.n	8016d88 <prvProcessTimerOrBlockTask+0x3c>
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	429a      	cmp	r2, r3
 8016d78:	d806      	bhi.n	8016d88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016d7a:	f7ff f925 	bl	8015fc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016d7e:	68f9      	ldr	r1, [r7, #12]
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f7ff ff85 	bl	8016c90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016d86:	e024      	b.n	8016dd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016d88:	683b      	ldr	r3, [r7, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d008      	beq.n	8016da0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016d8e:	4b13      	ldr	r3, [pc, #76]	; (8016ddc <prvProcessTimerOrBlockTask+0x90>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d101      	bne.n	8016d9c <prvProcessTimerOrBlockTask+0x50>
 8016d98:	2301      	movs	r3, #1
 8016d9a:	e000      	b.n	8016d9e <prvProcessTimerOrBlockTask+0x52>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016da0:	4b0f      	ldr	r3, [pc, #60]	; (8016de0 <prvProcessTimerOrBlockTask+0x94>)
 8016da2:	6818      	ldr	r0, [r3, #0]
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	1ad3      	subs	r3, r2, r3
 8016daa:	683a      	ldr	r2, [r7, #0]
 8016dac:	4619      	mov	r1, r3
 8016dae:	f7fe fe6d 	bl	8015a8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016db2:	f7ff f909 	bl	8015fc8 <xTaskResumeAll>
 8016db6:	4603      	mov	r3, r0
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d10a      	bne.n	8016dd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016dbc:	4b09      	ldr	r3, [pc, #36]	; (8016de4 <prvProcessTimerOrBlockTask+0x98>)
 8016dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dc2:	601a      	str	r2, [r3, #0]
 8016dc4:	f3bf 8f4f 	dsb	sy
 8016dc8:	f3bf 8f6f 	isb	sy
}
 8016dcc:	e001      	b.n	8016dd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016dce:	f7ff f8fb 	bl	8015fc8 <xTaskResumeAll>
}
 8016dd2:	bf00      	nop
 8016dd4:	3710      	adds	r7, #16
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}
 8016dda:	bf00      	nop
 8016ddc:	20001bcc 	.word	0x20001bcc
 8016de0:	20001bd0 	.word	0x20001bd0
 8016de4:	e000ed04 	.word	0xe000ed04

08016de8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016de8:	b480      	push	{r7}
 8016dea:	b085      	sub	sp, #20
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016df0:	4b0e      	ldr	r3, [pc, #56]	; (8016e2c <prvGetNextExpireTime+0x44>)
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d101      	bne.n	8016dfe <prvGetNextExpireTime+0x16>
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	e000      	b.n	8016e00 <prvGetNextExpireTime+0x18>
 8016dfe:	2200      	movs	r2, #0
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d105      	bne.n	8016e18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016e0c:	4b07      	ldr	r3, [pc, #28]	; (8016e2c <prvGetNextExpireTime+0x44>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	68db      	ldr	r3, [r3, #12]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	60fb      	str	r3, [r7, #12]
 8016e16:	e001      	b.n	8016e1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3714      	adds	r7, #20
 8016e22:	46bd      	mov	sp, r7
 8016e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop
 8016e2c:	20001bc8 	.word	0x20001bc8

08016e30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016e38:	f7ff f964 	bl	8016104 <xTaskGetTickCount>
 8016e3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016e3e:	4b0b      	ldr	r3, [pc, #44]	; (8016e6c <prvSampleTimeNow+0x3c>)
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	429a      	cmp	r2, r3
 8016e46:	d205      	bcs.n	8016e54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016e48:	f000 f936 	bl	80170b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2201      	movs	r2, #1
 8016e50:	601a      	str	r2, [r3, #0]
 8016e52:	e002      	b.n	8016e5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2200      	movs	r2, #0
 8016e58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016e5a:	4a04      	ldr	r2, [pc, #16]	; (8016e6c <prvSampleTimeNow+0x3c>)
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016e60:	68fb      	ldr	r3, [r7, #12]
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3710      	adds	r7, #16
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd80      	pop	{r7, pc}
 8016e6a:	bf00      	nop
 8016e6c:	20001bd8 	.word	0x20001bd8

08016e70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b086      	sub	sp, #24
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	60f8      	str	r0, [r7, #12]
 8016e78:	60b9      	str	r1, [r7, #8]
 8016e7a:	607a      	str	r2, [r7, #4]
 8016e7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	68ba      	ldr	r2, [r7, #8]
 8016e86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	68fa      	ldr	r2, [r7, #12]
 8016e8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016e8e:	68ba      	ldr	r2, [r7, #8]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d812      	bhi.n	8016ebc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e96:	687a      	ldr	r2, [r7, #4]
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	1ad2      	subs	r2, r2, r3
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	699b      	ldr	r3, [r3, #24]
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	d302      	bcc.n	8016eaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	617b      	str	r3, [r7, #20]
 8016ea8:	e01b      	b.n	8016ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016eaa:	4b10      	ldr	r3, [pc, #64]	; (8016eec <prvInsertTimerInActiveList+0x7c>)
 8016eac:	681a      	ldr	r2, [r3, #0]
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	3304      	adds	r3, #4
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	4610      	mov	r0, r2
 8016eb6:	f7fd fdac 	bl	8014a12 <vListInsert>
 8016eba:	e012      	b.n	8016ee2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016ebc:	687a      	ldr	r2, [r7, #4]
 8016ebe:	683b      	ldr	r3, [r7, #0]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d206      	bcs.n	8016ed2 <prvInsertTimerInActiveList+0x62>
 8016ec4:	68ba      	ldr	r2, [r7, #8]
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	429a      	cmp	r2, r3
 8016eca:	d302      	bcc.n	8016ed2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016ecc:	2301      	movs	r3, #1
 8016ece:	617b      	str	r3, [r7, #20]
 8016ed0:	e007      	b.n	8016ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016ed2:	4b07      	ldr	r3, [pc, #28]	; (8016ef0 <prvInsertTimerInActiveList+0x80>)
 8016ed4:	681a      	ldr	r2, [r3, #0]
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	3304      	adds	r3, #4
 8016eda:	4619      	mov	r1, r3
 8016edc:	4610      	mov	r0, r2
 8016ede:	f7fd fd98 	bl	8014a12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016ee2:	697b      	ldr	r3, [r7, #20]
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3718      	adds	r7, #24
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	20001bcc 	.word	0x20001bcc
 8016ef0:	20001bc8 	.word	0x20001bc8

08016ef4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b08e      	sub	sp, #56	; 0x38
 8016ef8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016efa:	e0ca      	b.n	8017092 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	da18      	bge.n	8016f34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016f02:	1d3b      	adds	r3, r7, #4
 8016f04:	3304      	adds	r3, #4
 8016f06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d10a      	bne.n	8016f24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8016f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f12:	f383 8811 	msr	BASEPRI, r3
 8016f16:	f3bf 8f6f 	isb	sy
 8016f1a:	f3bf 8f4f 	dsb	sy
 8016f1e:	61fb      	str	r3, [r7, #28]
}
 8016f20:	bf00      	nop
 8016f22:	e7fe      	b.n	8016f22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f2a:	6850      	ldr	r0, [r2, #4]
 8016f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f2e:	6892      	ldr	r2, [r2, #8]
 8016f30:	4611      	mov	r1, r2
 8016f32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	f2c0 80aa 	blt.w	8017090 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f42:	695b      	ldr	r3, [r3, #20]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d004      	beq.n	8016f52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f4a:	3304      	adds	r3, #4
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7fd fd99 	bl	8014a84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016f52:	463b      	mov	r3, r7
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7ff ff6b 	bl	8016e30 <prvSampleTimeNow>
 8016f5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2b09      	cmp	r3, #9
 8016f60:	f200 8097 	bhi.w	8017092 <prvProcessReceivedCommands+0x19e>
 8016f64:	a201      	add	r2, pc, #4	; (adr r2, 8016f6c <prvProcessReceivedCommands+0x78>)
 8016f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f6a:	bf00      	nop
 8016f6c:	08016f95 	.word	0x08016f95
 8016f70:	08016f95 	.word	0x08016f95
 8016f74:	08016f95 	.word	0x08016f95
 8016f78:	08017009 	.word	0x08017009
 8016f7c:	0801701d 	.word	0x0801701d
 8016f80:	08017067 	.word	0x08017067
 8016f84:	08016f95 	.word	0x08016f95
 8016f88:	08016f95 	.word	0x08016f95
 8016f8c:	08017009 	.word	0x08017009
 8016f90:	0801701d 	.word	0x0801701d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f9a:	f043 0301 	orr.w	r3, r3, #1
 8016f9e:	b2da      	uxtb	r2, r3
 8016fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016fa6:	68ba      	ldr	r2, [r7, #8]
 8016fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016faa:	699b      	ldr	r3, [r3, #24]
 8016fac:	18d1      	adds	r1, r2, r3
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fb4:	f7ff ff5c 	bl	8016e70 <prvInsertTimerInActiveList>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d069      	beq.n	8017092 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc0:	6a1b      	ldr	r3, [r3, #32]
 8016fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016fcc:	f003 0304 	and.w	r3, r3, #4
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d05e      	beq.n	8017092 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016fd4:	68ba      	ldr	r2, [r7, #8]
 8016fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd8:	699b      	ldr	r3, [r3, #24]
 8016fda:	441a      	add	r2, r3
 8016fdc:	2300      	movs	r3, #0
 8016fde:	9300      	str	r3, [sp, #0]
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	2100      	movs	r1, #0
 8016fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fe6:	f7ff fe05 	bl	8016bf4 <xTimerGenericCommand>
 8016fea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016fec:	6a3b      	ldr	r3, [r7, #32]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d14f      	bne.n	8017092 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8016ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff6:	f383 8811 	msr	BASEPRI, r3
 8016ffa:	f3bf 8f6f 	isb	sy
 8016ffe:	f3bf 8f4f 	dsb	sy
 8017002:	61bb      	str	r3, [r7, #24]
}
 8017004:	bf00      	nop
 8017006:	e7fe      	b.n	8017006 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801700e:	f023 0301 	bic.w	r3, r3, #1
 8017012:	b2da      	uxtb	r2, r3
 8017014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801701a:	e03a      	b.n	8017092 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017022:	f043 0301 	orr.w	r3, r3, #1
 8017026:	b2da      	uxtb	r2, r3
 8017028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801702e:	68ba      	ldr	r2, [r7, #8]
 8017030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017032:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017036:	699b      	ldr	r3, [r3, #24]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d10a      	bne.n	8017052 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017040:	f383 8811 	msr	BASEPRI, r3
 8017044:	f3bf 8f6f 	isb	sy
 8017048:	f3bf 8f4f 	dsb	sy
 801704c:	617b      	str	r3, [r7, #20]
}
 801704e:	bf00      	nop
 8017050:	e7fe      	b.n	8017050 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017054:	699a      	ldr	r2, [r3, #24]
 8017056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017058:	18d1      	adds	r1, r2, r3
 801705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801705e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017060:	f7ff ff06 	bl	8016e70 <prvInsertTimerInActiveList>
					break;
 8017064:	e015      	b.n	8017092 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801706c:	f003 0302 	and.w	r3, r3, #2
 8017070:	2b00      	cmp	r3, #0
 8017072:	d103      	bne.n	801707c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017076:	f000 fbdb 	bl	8017830 <vPortFree>
 801707a:	e00a      	b.n	8017092 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801707e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017082:	f023 0301 	bic.w	r3, r3, #1
 8017086:	b2da      	uxtb	r2, r3
 8017088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801708e:	e000      	b.n	8017092 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017090:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017092:	4b08      	ldr	r3, [pc, #32]	; (80170b4 <prvProcessReceivedCommands+0x1c0>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	1d39      	adds	r1, r7, #4
 8017098:	2200      	movs	r2, #0
 801709a:	4618      	mov	r0, r3
 801709c:	f7fe f8ea 	bl	8015274 <xQueueReceive>
 80170a0:	4603      	mov	r3, r0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	f47f af2a 	bne.w	8016efc <prvProcessReceivedCommands+0x8>
	}
}
 80170a8:	bf00      	nop
 80170aa:	bf00      	nop
 80170ac:	3730      	adds	r7, #48	; 0x30
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}
 80170b2:	bf00      	nop
 80170b4:	20001bd0 	.word	0x20001bd0

080170b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b088      	sub	sp, #32
 80170bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80170be:	e048      	b.n	8017152 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80170c0:	4b2d      	ldr	r3, [pc, #180]	; (8017178 <prvSwitchTimerLists+0xc0>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	68db      	ldr	r3, [r3, #12]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170ca:	4b2b      	ldr	r3, [pc, #172]	; (8017178 <prvSwitchTimerLists+0xc0>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	68db      	ldr	r3, [r3, #12]
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	3304      	adds	r3, #4
 80170d8:	4618      	mov	r0, r3
 80170da:	f7fd fcd3 	bl	8014a84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	6a1b      	ldr	r3, [r3, #32]
 80170e2:	68f8      	ldr	r0, [r7, #12]
 80170e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80170ec:	f003 0304 	and.w	r3, r3, #4
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d02e      	beq.n	8017152 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	699b      	ldr	r3, [r3, #24]
 80170f8:	693a      	ldr	r2, [r7, #16]
 80170fa:	4413      	add	r3, r2
 80170fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80170fe:	68ba      	ldr	r2, [r7, #8]
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	429a      	cmp	r2, r3
 8017104:	d90e      	bls.n	8017124 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	68ba      	ldr	r2, [r7, #8]
 801710a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	68fa      	ldr	r2, [r7, #12]
 8017110:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017112:	4b19      	ldr	r3, [pc, #100]	; (8017178 <prvSwitchTimerLists+0xc0>)
 8017114:	681a      	ldr	r2, [r3, #0]
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	3304      	adds	r3, #4
 801711a:	4619      	mov	r1, r3
 801711c:	4610      	mov	r0, r2
 801711e:	f7fd fc78 	bl	8014a12 <vListInsert>
 8017122:	e016      	b.n	8017152 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017124:	2300      	movs	r3, #0
 8017126:	9300      	str	r3, [sp, #0]
 8017128:	2300      	movs	r3, #0
 801712a:	693a      	ldr	r2, [r7, #16]
 801712c:	2100      	movs	r1, #0
 801712e:	68f8      	ldr	r0, [r7, #12]
 8017130:	f7ff fd60 	bl	8016bf4 <xTimerGenericCommand>
 8017134:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d10a      	bne.n	8017152 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017140:	f383 8811 	msr	BASEPRI, r3
 8017144:	f3bf 8f6f 	isb	sy
 8017148:	f3bf 8f4f 	dsb	sy
 801714c:	603b      	str	r3, [r7, #0]
}
 801714e:	bf00      	nop
 8017150:	e7fe      	b.n	8017150 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017152:	4b09      	ldr	r3, [pc, #36]	; (8017178 <prvSwitchTimerLists+0xc0>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d1b1      	bne.n	80170c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801715c:	4b06      	ldr	r3, [pc, #24]	; (8017178 <prvSwitchTimerLists+0xc0>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017162:	4b06      	ldr	r3, [pc, #24]	; (801717c <prvSwitchTimerLists+0xc4>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	4a04      	ldr	r2, [pc, #16]	; (8017178 <prvSwitchTimerLists+0xc0>)
 8017168:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801716a:	4a04      	ldr	r2, [pc, #16]	; (801717c <prvSwitchTimerLists+0xc4>)
 801716c:	697b      	ldr	r3, [r7, #20]
 801716e:	6013      	str	r3, [r2, #0]
}
 8017170:	bf00      	nop
 8017172:	3718      	adds	r7, #24
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}
 8017178:	20001bc8 	.word	0x20001bc8
 801717c:	20001bcc 	.word	0x20001bcc

08017180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017186:	f000 f965 	bl	8017454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801718a:	4b15      	ldr	r3, [pc, #84]	; (80171e0 <prvCheckForValidListAndQueue+0x60>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d120      	bne.n	80171d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017192:	4814      	ldr	r0, [pc, #80]	; (80171e4 <prvCheckForValidListAndQueue+0x64>)
 8017194:	f7fd fbec 	bl	8014970 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017198:	4813      	ldr	r0, [pc, #76]	; (80171e8 <prvCheckForValidListAndQueue+0x68>)
 801719a:	f7fd fbe9 	bl	8014970 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801719e:	4b13      	ldr	r3, [pc, #76]	; (80171ec <prvCheckForValidListAndQueue+0x6c>)
 80171a0:	4a10      	ldr	r2, [pc, #64]	; (80171e4 <prvCheckForValidListAndQueue+0x64>)
 80171a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80171a4:	4b12      	ldr	r3, [pc, #72]	; (80171f0 <prvCheckForValidListAndQueue+0x70>)
 80171a6:	4a10      	ldr	r2, [pc, #64]	; (80171e8 <prvCheckForValidListAndQueue+0x68>)
 80171a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80171aa:	2300      	movs	r3, #0
 80171ac:	9300      	str	r3, [sp, #0]
 80171ae:	4b11      	ldr	r3, [pc, #68]	; (80171f4 <prvCheckForValidListAndQueue+0x74>)
 80171b0:	4a11      	ldr	r2, [pc, #68]	; (80171f8 <prvCheckForValidListAndQueue+0x78>)
 80171b2:	2110      	movs	r1, #16
 80171b4:	200a      	movs	r0, #10
 80171b6:	f7fd fcf7 	bl	8014ba8 <xQueueGenericCreateStatic>
 80171ba:	4603      	mov	r3, r0
 80171bc:	4a08      	ldr	r2, [pc, #32]	; (80171e0 <prvCheckForValidListAndQueue+0x60>)
 80171be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80171c0:	4b07      	ldr	r3, [pc, #28]	; (80171e0 <prvCheckForValidListAndQueue+0x60>)
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d005      	beq.n	80171d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80171c8:	4b05      	ldr	r3, [pc, #20]	; (80171e0 <prvCheckForValidListAndQueue+0x60>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	490b      	ldr	r1, [pc, #44]	; (80171fc <prvCheckForValidListAndQueue+0x7c>)
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7fe fc08 	bl	80159e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80171d4:	f000 f96e 	bl	80174b4 <vPortExitCritical>
}
 80171d8:	bf00      	nop
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}
 80171de:	bf00      	nop
 80171e0:	20001bd0 	.word	0x20001bd0
 80171e4:	20001ba0 	.word	0x20001ba0
 80171e8:	20001bb4 	.word	0x20001bb4
 80171ec:	20001bc8 	.word	0x20001bc8
 80171f0:	20001bcc 	.word	0x20001bcc
 80171f4:	20001c7c 	.word	0x20001c7c
 80171f8:	20001bdc 	.word	0x20001bdc
 80171fc:	08024038 	.word	0x08024038

08017200 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017200:	b480      	push	{r7}
 8017202:	b085      	sub	sp, #20
 8017204:	af00      	add	r7, sp, #0
 8017206:	60f8      	str	r0, [r7, #12]
 8017208:	60b9      	str	r1, [r7, #8]
 801720a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	3b04      	subs	r3, #4
 8017210:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	3b04      	subs	r3, #4
 801721e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	f023 0201 	bic.w	r2, r3, #1
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	3b04      	subs	r3, #4
 801722e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017230:	4a0c      	ldr	r2, [pc, #48]	; (8017264 <pxPortInitialiseStack+0x64>)
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	3b14      	subs	r3, #20
 801723a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	3b04      	subs	r3, #4
 8017246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	f06f 0202 	mvn.w	r2, #2
 801724e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	3b20      	subs	r3, #32
 8017254:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017256:	68fb      	ldr	r3, [r7, #12]
}
 8017258:	4618      	mov	r0, r3
 801725a:	3714      	adds	r7, #20
 801725c:	46bd      	mov	sp, r7
 801725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017262:	4770      	bx	lr
 8017264:	08017269 	.word	0x08017269

08017268 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017268:	b480      	push	{r7}
 801726a:	b085      	sub	sp, #20
 801726c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801726e:	2300      	movs	r3, #0
 8017270:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017272:	4b12      	ldr	r3, [pc, #72]	; (80172bc <prvTaskExitError+0x54>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801727a:	d00a      	beq.n	8017292 <prvTaskExitError+0x2a>
	__asm volatile
 801727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017280:	f383 8811 	msr	BASEPRI, r3
 8017284:	f3bf 8f6f 	isb	sy
 8017288:	f3bf 8f4f 	dsb	sy
 801728c:	60fb      	str	r3, [r7, #12]
}
 801728e:	bf00      	nop
 8017290:	e7fe      	b.n	8017290 <prvTaskExitError+0x28>
	__asm volatile
 8017292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017296:	f383 8811 	msr	BASEPRI, r3
 801729a:	f3bf 8f6f 	isb	sy
 801729e:	f3bf 8f4f 	dsb	sy
 80172a2:	60bb      	str	r3, [r7, #8]
}
 80172a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80172a6:	bf00      	nop
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d0fc      	beq.n	80172a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80172ae:	bf00      	nop
 80172b0:	bf00      	nop
 80172b2:	3714      	adds	r7, #20
 80172b4:	46bd      	mov	sp, r7
 80172b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ba:	4770      	bx	lr
 80172bc:	20000010 	.word	0x20000010

080172c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80172c0:	4b07      	ldr	r3, [pc, #28]	; (80172e0 <pxCurrentTCBConst2>)
 80172c2:	6819      	ldr	r1, [r3, #0]
 80172c4:	6808      	ldr	r0, [r1, #0]
 80172c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ca:	f380 8809 	msr	PSP, r0
 80172ce:	f3bf 8f6f 	isb	sy
 80172d2:	f04f 0000 	mov.w	r0, #0
 80172d6:	f380 8811 	msr	BASEPRI, r0
 80172da:	4770      	bx	lr
 80172dc:	f3af 8000 	nop.w

080172e0 <pxCurrentTCBConst2>:
 80172e0:	200016a0 	.word	0x200016a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80172e4:	bf00      	nop
 80172e6:	bf00      	nop

080172e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80172e8:	4808      	ldr	r0, [pc, #32]	; (801730c <prvPortStartFirstTask+0x24>)
 80172ea:	6800      	ldr	r0, [r0, #0]
 80172ec:	6800      	ldr	r0, [r0, #0]
 80172ee:	f380 8808 	msr	MSP, r0
 80172f2:	f04f 0000 	mov.w	r0, #0
 80172f6:	f380 8814 	msr	CONTROL, r0
 80172fa:	b662      	cpsie	i
 80172fc:	b661      	cpsie	f
 80172fe:	f3bf 8f4f 	dsb	sy
 8017302:	f3bf 8f6f 	isb	sy
 8017306:	df00      	svc	0
 8017308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801730a:	bf00      	nop
 801730c:	e000ed08 	.word	0xe000ed08

08017310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b086      	sub	sp, #24
 8017314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017316:	4b46      	ldr	r3, [pc, #280]	; (8017430 <xPortStartScheduler+0x120>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	4a46      	ldr	r2, [pc, #280]	; (8017434 <xPortStartScheduler+0x124>)
 801731c:	4293      	cmp	r3, r2
 801731e:	d10a      	bne.n	8017336 <xPortStartScheduler+0x26>
	__asm volatile
 8017320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017324:	f383 8811 	msr	BASEPRI, r3
 8017328:	f3bf 8f6f 	isb	sy
 801732c:	f3bf 8f4f 	dsb	sy
 8017330:	613b      	str	r3, [r7, #16]
}
 8017332:	bf00      	nop
 8017334:	e7fe      	b.n	8017334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017336:	4b3e      	ldr	r3, [pc, #248]	; (8017430 <xPortStartScheduler+0x120>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	4a3f      	ldr	r2, [pc, #252]	; (8017438 <xPortStartScheduler+0x128>)
 801733c:	4293      	cmp	r3, r2
 801733e:	d10a      	bne.n	8017356 <xPortStartScheduler+0x46>
	__asm volatile
 8017340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017344:	f383 8811 	msr	BASEPRI, r3
 8017348:	f3bf 8f6f 	isb	sy
 801734c:	f3bf 8f4f 	dsb	sy
 8017350:	60fb      	str	r3, [r7, #12]
}
 8017352:	bf00      	nop
 8017354:	e7fe      	b.n	8017354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017356:	4b39      	ldr	r3, [pc, #228]	; (801743c <xPortStartScheduler+0x12c>)
 8017358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801735a:	697b      	ldr	r3, [r7, #20]
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	b2db      	uxtb	r3, r3
 8017360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	22ff      	movs	r2, #255	; 0xff
 8017366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	b2db      	uxtb	r3, r3
 801736e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017370:	78fb      	ldrb	r3, [r7, #3]
 8017372:	b2db      	uxtb	r3, r3
 8017374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017378:	b2da      	uxtb	r2, r3
 801737a:	4b31      	ldr	r3, [pc, #196]	; (8017440 <xPortStartScheduler+0x130>)
 801737c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801737e:	4b31      	ldr	r3, [pc, #196]	; (8017444 <xPortStartScheduler+0x134>)
 8017380:	2207      	movs	r2, #7
 8017382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017384:	e009      	b.n	801739a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017386:	4b2f      	ldr	r3, [pc, #188]	; (8017444 <xPortStartScheduler+0x134>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	3b01      	subs	r3, #1
 801738c:	4a2d      	ldr	r2, [pc, #180]	; (8017444 <xPortStartScheduler+0x134>)
 801738e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017390:	78fb      	ldrb	r3, [r7, #3]
 8017392:	b2db      	uxtb	r3, r3
 8017394:	005b      	lsls	r3, r3, #1
 8017396:	b2db      	uxtb	r3, r3
 8017398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801739a:	78fb      	ldrb	r3, [r7, #3]
 801739c:	b2db      	uxtb	r3, r3
 801739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80173a2:	2b80      	cmp	r3, #128	; 0x80
 80173a4:	d0ef      	beq.n	8017386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80173a6:	4b27      	ldr	r3, [pc, #156]	; (8017444 <xPortStartScheduler+0x134>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	f1c3 0307 	rsb	r3, r3, #7
 80173ae:	2b04      	cmp	r3, #4
 80173b0:	d00a      	beq.n	80173c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80173b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b6:	f383 8811 	msr	BASEPRI, r3
 80173ba:	f3bf 8f6f 	isb	sy
 80173be:	f3bf 8f4f 	dsb	sy
 80173c2:	60bb      	str	r3, [r7, #8]
}
 80173c4:	bf00      	nop
 80173c6:	e7fe      	b.n	80173c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80173c8:	4b1e      	ldr	r3, [pc, #120]	; (8017444 <xPortStartScheduler+0x134>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	021b      	lsls	r3, r3, #8
 80173ce:	4a1d      	ldr	r2, [pc, #116]	; (8017444 <xPortStartScheduler+0x134>)
 80173d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80173d2:	4b1c      	ldr	r3, [pc, #112]	; (8017444 <xPortStartScheduler+0x134>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80173da:	4a1a      	ldr	r2, [pc, #104]	; (8017444 <xPortStartScheduler+0x134>)
 80173dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	b2da      	uxtb	r2, r3
 80173e2:	697b      	ldr	r3, [r7, #20]
 80173e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80173e6:	4b18      	ldr	r3, [pc, #96]	; (8017448 <xPortStartScheduler+0x138>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	4a17      	ldr	r2, [pc, #92]	; (8017448 <xPortStartScheduler+0x138>)
 80173ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80173f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80173f2:	4b15      	ldr	r3, [pc, #84]	; (8017448 <xPortStartScheduler+0x138>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	4a14      	ldr	r2, [pc, #80]	; (8017448 <xPortStartScheduler+0x138>)
 80173f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80173fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80173fe:	f000 f8dd 	bl	80175bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017402:	4b12      	ldr	r3, [pc, #72]	; (801744c <xPortStartScheduler+0x13c>)
 8017404:	2200      	movs	r2, #0
 8017406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017408:	f000 f8fc 	bl	8017604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801740c:	4b10      	ldr	r3, [pc, #64]	; (8017450 <xPortStartScheduler+0x140>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	4a0f      	ldr	r2, [pc, #60]	; (8017450 <xPortStartScheduler+0x140>)
 8017412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017418:	f7ff ff66 	bl	80172e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801741c:	f7fe ff4e 	bl	80162bc <vTaskSwitchContext>
	prvTaskExitError();
 8017420:	f7ff ff22 	bl	8017268 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017424:	2300      	movs	r3, #0
}
 8017426:	4618      	mov	r0, r3
 8017428:	3718      	adds	r7, #24
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}
 801742e:	bf00      	nop
 8017430:	e000ed00 	.word	0xe000ed00
 8017434:	410fc271 	.word	0x410fc271
 8017438:	410fc270 	.word	0x410fc270
 801743c:	e000e400 	.word	0xe000e400
 8017440:	20001ccc 	.word	0x20001ccc
 8017444:	20001cd0 	.word	0x20001cd0
 8017448:	e000ed20 	.word	0xe000ed20
 801744c:	20000010 	.word	0x20000010
 8017450:	e000ef34 	.word	0xe000ef34

08017454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017454:	b480      	push	{r7}
 8017456:	b083      	sub	sp, #12
 8017458:	af00      	add	r7, sp, #0
	__asm volatile
 801745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801745e:	f383 8811 	msr	BASEPRI, r3
 8017462:	f3bf 8f6f 	isb	sy
 8017466:	f3bf 8f4f 	dsb	sy
 801746a:	607b      	str	r3, [r7, #4]
}
 801746c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801746e:	4b0f      	ldr	r3, [pc, #60]	; (80174ac <vPortEnterCritical+0x58>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	3301      	adds	r3, #1
 8017474:	4a0d      	ldr	r2, [pc, #52]	; (80174ac <vPortEnterCritical+0x58>)
 8017476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017478:	4b0c      	ldr	r3, [pc, #48]	; (80174ac <vPortEnterCritical+0x58>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	2b01      	cmp	r3, #1
 801747e:	d10f      	bne.n	80174a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017480:	4b0b      	ldr	r3, [pc, #44]	; (80174b0 <vPortEnterCritical+0x5c>)
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	b2db      	uxtb	r3, r3
 8017486:	2b00      	cmp	r3, #0
 8017488:	d00a      	beq.n	80174a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748e:	f383 8811 	msr	BASEPRI, r3
 8017492:	f3bf 8f6f 	isb	sy
 8017496:	f3bf 8f4f 	dsb	sy
 801749a:	603b      	str	r3, [r7, #0]
}
 801749c:	bf00      	nop
 801749e:	e7fe      	b.n	801749e <vPortEnterCritical+0x4a>
	}
}
 80174a0:	bf00      	nop
 80174a2:	370c      	adds	r7, #12
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr
 80174ac:	20000010 	.word	0x20000010
 80174b0:	e000ed04 	.word	0xe000ed04

080174b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80174b4:	b480      	push	{r7}
 80174b6:	b083      	sub	sp, #12
 80174b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80174ba:	4b12      	ldr	r3, [pc, #72]	; (8017504 <vPortExitCritical+0x50>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d10a      	bne.n	80174d8 <vPortExitCritical+0x24>
	__asm volatile
 80174c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174c6:	f383 8811 	msr	BASEPRI, r3
 80174ca:	f3bf 8f6f 	isb	sy
 80174ce:	f3bf 8f4f 	dsb	sy
 80174d2:	607b      	str	r3, [r7, #4]
}
 80174d4:	bf00      	nop
 80174d6:	e7fe      	b.n	80174d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80174d8:	4b0a      	ldr	r3, [pc, #40]	; (8017504 <vPortExitCritical+0x50>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	3b01      	subs	r3, #1
 80174de:	4a09      	ldr	r2, [pc, #36]	; (8017504 <vPortExitCritical+0x50>)
 80174e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80174e2:	4b08      	ldr	r3, [pc, #32]	; (8017504 <vPortExitCritical+0x50>)
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d105      	bne.n	80174f6 <vPortExitCritical+0x42>
 80174ea:	2300      	movs	r3, #0
 80174ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	f383 8811 	msr	BASEPRI, r3
}
 80174f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80174f6:	bf00      	nop
 80174f8:	370c      	adds	r7, #12
 80174fa:	46bd      	mov	sp, r7
 80174fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017500:	4770      	bx	lr
 8017502:	bf00      	nop
 8017504:	20000010 	.word	0x20000010
	...

08017510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017510:	f3ef 8009 	mrs	r0, PSP
 8017514:	f3bf 8f6f 	isb	sy
 8017518:	4b15      	ldr	r3, [pc, #84]	; (8017570 <pxCurrentTCBConst>)
 801751a:	681a      	ldr	r2, [r3, #0]
 801751c:	f01e 0f10 	tst.w	lr, #16
 8017520:	bf08      	it	eq
 8017522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801752a:	6010      	str	r0, [r2, #0]
 801752c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017534:	f380 8811 	msr	BASEPRI, r0
 8017538:	f3bf 8f4f 	dsb	sy
 801753c:	f3bf 8f6f 	isb	sy
 8017540:	f7fe febc 	bl	80162bc <vTaskSwitchContext>
 8017544:	f04f 0000 	mov.w	r0, #0
 8017548:	f380 8811 	msr	BASEPRI, r0
 801754c:	bc09      	pop	{r0, r3}
 801754e:	6819      	ldr	r1, [r3, #0]
 8017550:	6808      	ldr	r0, [r1, #0]
 8017552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017556:	f01e 0f10 	tst.w	lr, #16
 801755a:	bf08      	it	eq
 801755c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017560:	f380 8809 	msr	PSP, r0
 8017564:	f3bf 8f6f 	isb	sy
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop
 801756c:	f3af 8000 	nop.w

08017570 <pxCurrentTCBConst>:
 8017570:	200016a0 	.word	0x200016a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017574:	bf00      	nop
 8017576:	bf00      	nop

08017578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
	__asm volatile
 801757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017582:	f383 8811 	msr	BASEPRI, r3
 8017586:	f3bf 8f6f 	isb	sy
 801758a:	f3bf 8f4f 	dsb	sy
 801758e:	607b      	str	r3, [r7, #4]
}
 8017590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017592:	f7fe fdd9 	bl	8016148 <xTaskIncrementTick>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d003      	beq.n	80175a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801759c:	4b06      	ldr	r3, [pc, #24]	; (80175b8 <xPortSysTickHandler+0x40>)
 801759e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175a2:	601a      	str	r2, [r3, #0]
 80175a4:	2300      	movs	r3, #0
 80175a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	f383 8811 	msr	BASEPRI, r3
}
 80175ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80175b0:	bf00      	nop
 80175b2:	3708      	adds	r7, #8
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}
 80175b8:	e000ed04 	.word	0xe000ed04

080175bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80175bc:	b480      	push	{r7}
 80175be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80175c0:	4b0b      	ldr	r3, [pc, #44]	; (80175f0 <vPortSetupTimerInterrupt+0x34>)
 80175c2:	2200      	movs	r2, #0
 80175c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80175c6:	4b0b      	ldr	r3, [pc, #44]	; (80175f4 <vPortSetupTimerInterrupt+0x38>)
 80175c8:	2200      	movs	r2, #0
 80175ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80175cc:	4b0a      	ldr	r3, [pc, #40]	; (80175f8 <vPortSetupTimerInterrupt+0x3c>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	4a0a      	ldr	r2, [pc, #40]	; (80175fc <vPortSetupTimerInterrupt+0x40>)
 80175d2:	fba2 2303 	umull	r2, r3, r2, r3
 80175d6:	099b      	lsrs	r3, r3, #6
 80175d8:	4a09      	ldr	r2, [pc, #36]	; (8017600 <vPortSetupTimerInterrupt+0x44>)
 80175da:	3b01      	subs	r3, #1
 80175dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80175de:	4b04      	ldr	r3, [pc, #16]	; (80175f0 <vPortSetupTimerInterrupt+0x34>)
 80175e0:	2207      	movs	r2, #7
 80175e2:	601a      	str	r2, [r3, #0]
}
 80175e4:	bf00      	nop
 80175e6:	46bd      	mov	sp, r7
 80175e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ec:	4770      	bx	lr
 80175ee:	bf00      	nop
 80175f0:	e000e010 	.word	0xe000e010
 80175f4:	e000e018 	.word	0xe000e018
 80175f8:	20000000 	.word	0x20000000
 80175fc:	10624dd3 	.word	0x10624dd3
 8017600:	e000e014 	.word	0xe000e014

08017604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017614 <vPortEnableVFP+0x10>
 8017608:	6801      	ldr	r1, [r0, #0]
 801760a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801760e:	6001      	str	r1, [r0, #0]
 8017610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017612:	bf00      	nop
 8017614:	e000ed88 	.word	0xe000ed88

08017618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017618:	b480      	push	{r7}
 801761a:	b085      	sub	sp, #20
 801761c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801761e:	f3ef 8305 	mrs	r3, IPSR
 8017622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	2b0f      	cmp	r3, #15
 8017628:	d914      	bls.n	8017654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801762a:	4a17      	ldr	r2, [pc, #92]	; (8017688 <vPortValidateInterruptPriority+0x70>)
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	4413      	add	r3, r2
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017634:	4b15      	ldr	r3, [pc, #84]	; (801768c <vPortValidateInterruptPriority+0x74>)
 8017636:	781b      	ldrb	r3, [r3, #0]
 8017638:	7afa      	ldrb	r2, [r7, #11]
 801763a:	429a      	cmp	r2, r3
 801763c:	d20a      	bcs.n	8017654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017642:	f383 8811 	msr	BASEPRI, r3
 8017646:	f3bf 8f6f 	isb	sy
 801764a:	f3bf 8f4f 	dsb	sy
 801764e:	607b      	str	r3, [r7, #4]
}
 8017650:	bf00      	nop
 8017652:	e7fe      	b.n	8017652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017654:	4b0e      	ldr	r3, [pc, #56]	; (8017690 <vPortValidateInterruptPriority+0x78>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801765c:	4b0d      	ldr	r3, [pc, #52]	; (8017694 <vPortValidateInterruptPriority+0x7c>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	429a      	cmp	r2, r3
 8017662:	d90a      	bls.n	801767a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017668:	f383 8811 	msr	BASEPRI, r3
 801766c:	f3bf 8f6f 	isb	sy
 8017670:	f3bf 8f4f 	dsb	sy
 8017674:	603b      	str	r3, [r7, #0]
}
 8017676:	bf00      	nop
 8017678:	e7fe      	b.n	8017678 <vPortValidateInterruptPriority+0x60>
	}
 801767a:	bf00      	nop
 801767c:	3714      	adds	r7, #20
 801767e:	46bd      	mov	sp, r7
 8017680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017684:	4770      	bx	lr
 8017686:	bf00      	nop
 8017688:	e000e3f0 	.word	0xe000e3f0
 801768c:	20001ccc 	.word	0x20001ccc
 8017690:	e000ed0c 	.word	0xe000ed0c
 8017694:	20001cd0 	.word	0x20001cd0

08017698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b08a      	sub	sp, #40	; 0x28
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80176a0:	2300      	movs	r3, #0
 80176a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80176a4:	f7fe fc82 	bl	8015fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80176a8:	4b5b      	ldr	r3, [pc, #364]	; (8017818 <pvPortMalloc+0x180>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d101      	bne.n	80176b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80176b0:	f000 f920 	bl	80178f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80176b4:	4b59      	ldr	r3, [pc, #356]	; (801781c <pvPortMalloc+0x184>)
 80176b6:	681a      	ldr	r2, [r3, #0]
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	4013      	ands	r3, r2
 80176bc:	2b00      	cmp	r3, #0
 80176be:	f040 8093 	bne.w	80177e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d01d      	beq.n	8017704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80176c8:	2208      	movs	r2, #8
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	4413      	add	r3, r2
 80176ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f003 0307 	and.w	r3, r3, #7
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d014      	beq.n	8017704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	f023 0307 	bic.w	r3, r3, #7
 80176e0:	3308      	adds	r3, #8
 80176e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f003 0307 	and.w	r3, r3, #7
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d00a      	beq.n	8017704 <pvPortMalloc+0x6c>
	__asm volatile
 80176ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f2:	f383 8811 	msr	BASEPRI, r3
 80176f6:	f3bf 8f6f 	isb	sy
 80176fa:	f3bf 8f4f 	dsb	sy
 80176fe:	617b      	str	r3, [r7, #20]
}
 8017700:	bf00      	nop
 8017702:	e7fe      	b.n	8017702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d06e      	beq.n	80177e8 <pvPortMalloc+0x150>
 801770a:	4b45      	ldr	r3, [pc, #276]	; (8017820 <pvPortMalloc+0x188>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	687a      	ldr	r2, [r7, #4]
 8017710:	429a      	cmp	r2, r3
 8017712:	d869      	bhi.n	80177e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017714:	4b43      	ldr	r3, [pc, #268]	; (8017824 <pvPortMalloc+0x18c>)
 8017716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017718:	4b42      	ldr	r3, [pc, #264]	; (8017824 <pvPortMalloc+0x18c>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801771e:	e004      	b.n	801772a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801772c:	685b      	ldr	r3, [r3, #4]
 801772e:	687a      	ldr	r2, [r7, #4]
 8017730:	429a      	cmp	r2, r3
 8017732:	d903      	bls.n	801773c <pvPortMalloc+0xa4>
 8017734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d1f1      	bne.n	8017720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801773c:	4b36      	ldr	r3, [pc, #216]	; (8017818 <pvPortMalloc+0x180>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017742:	429a      	cmp	r2, r3
 8017744:	d050      	beq.n	80177e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017746:	6a3b      	ldr	r3, [r7, #32]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	2208      	movs	r2, #8
 801774c:	4413      	add	r3, r2
 801774e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017752:	681a      	ldr	r2, [r3, #0]
 8017754:	6a3b      	ldr	r3, [r7, #32]
 8017756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775a:	685a      	ldr	r2, [r3, #4]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	1ad2      	subs	r2, r2, r3
 8017760:	2308      	movs	r3, #8
 8017762:	005b      	lsls	r3, r3, #1
 8017764:	429a      	cmp	r2, r3
 8017766:	d91f      	bls.n	80177a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	4413      	add	r3, r2
 801776e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017770:	69bb      	ldr	r3, [r7, #24]
 8017772:	f003 0307 	and.w	r3, r3, #7
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00a      	beq.n	8017790 <pvPortMalloc+0xf8>
	__asm volatile
 801777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801777e:	f383 8811 	msr	BASEPRI, r3
 8017782:	f3bf 8f6f 	isb	sy
 8017786:	f3bf 8f4f 	dsb	sy
 801778a:	613b      	str	r3, [r7, #16]
}
 801778c:	bf00      	nop
 801778e:	e7fe      	b.n	801778e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017792:	685a      	ldr	r2, [r3, #4]
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	1ad2      	subs	r2, r2, r3
 8017798:	69bb      	ldr	r3, [r7, #24]
 801779a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80177a2:	69b8      	ldr	r0, [r7, #24]
 80177a4:	f000 f908 	bl	80179b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80177a8:	4b1d      	ldr	r3, [pc, #116]	; (8017820 <pvPortMalloc+0x188>)
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ae:	685b      	ldr	r3, [r3, #4]
 80177b0:	1ad3      	subs	r3, r2, r3
 80177b2:	4a1b      	ldr	r2, [pc, #108]	; (8017820 <pvPortMalloc+0x188>)
 80177b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80177b6:	4b1a      	ldr	r3, [pc, #104]	; (8017820 <pvPortMalloc+0x188>)
 80177b8:	681a      	ldr	r2, [r3, #0]
 80177ba:	4b1b      	ldr	r3, [pc, #108]	; (8017828 <pvPortMalloc+0x190>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	429a      	cmp	r2, r3
 80177c0:	d203      	bcs.n	80177ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80177c2:	4b17      	ldr	r3, [pc, #92]	; (8017820 <pvPortMalloc+0x188>)
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	4a18      	ldr	r2, [pc, #96]	; (8017828 <pvPortMalloc+0x190>)
 80177c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80177ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177cc:	685a      	ldr	r2, [r3, #4]
 80177ce:	4b13      	ldr	r3, [pc, #76]	; (801781c <pvPortMalloc+0x184>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	431a      	orrs	r2, r3
 80177d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80177d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177da:	2200      	movs	r2, #0
 80177dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80177de:	4b13      	ldr	r3, [pc, #76]	; (801782c <pvPortMalloc+0x194>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	3301      	adds	r3, #1
 80177e4:	4a11      	ldr	r2, [pc, #68]	; (801782c <pvPortMalloc+0x194>)
 80177e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80177e8:	f7fe fbee 	bl	8015fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	f003 0307 	and.w	r3, r3, #7
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d00a      	beq.n	801780c <pvPortMalloc+0x174>
	__asm volatile
 80177f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177fa:	f383 8811 	msr	BASEPRI, r3
 80177fe:	f3bf 8f6f 	isb	sy
 8017802:	f3bf 8f4f 	dsb	sy
 8017806:	60fb      	str	r3, [r7, #12]
}
 8017808:	bf00      	nop
 801780a:	e7fe      	b.n	801780a <pvPortMalloc+0x172>
	return pvReturn;
 801780c:	69fb      	ldr	r3, [r7, #28]
}
 801780e:	4618      	mov	r0, r3
 8017810:	3728      	adds	r7, #40	; 0x28
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
 8017816:	bf00      	nop
 8017818:	200058dc 	.word	0x200058dc
 801781c:	200058f0 	.word	0x200058f0
 8017820:	200058e0 	.word	0x200058e0
 8017824:	200058d4 	.word	0x200058d4
 8017828:	200058e4 	.word	0x200058e4
 801782c:	200058e8 	.word	0x200058e8

08017830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b086      	sub	sp, #24
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d04d      	beq.n	80178de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017842:	2308      	movs	r3, #8
 8017844:	425b      	negs	r3, r3
 8017846:	697a      	ldr	r2, [r7, #20]
 8017848:	4413      	add	r3, r2
 801784a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801784c:	697b      	ldr	r3, [r7, #20]
 801784e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	685a      	ldr	r2, [r3, #4]
 8017854:	4b24      	ldr	r3, [pc, #144]	; (80178e8 <vPortFree+0xb8>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	4013      	ands	r3, r2
 801785a:	2b00      	cmp	r3, #0
 801785c:	d10a      	bne.n	8017874 <vPortFree+0x44>
	__asm volatile
 801785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017862:	f383 8811 	msr	BASEPRI, r3
 8017866:	f3bf 8f6f 	isb	sy
 801786a:	f3bf 8f4f 	dsb	sy
 801786e:	60fb      	str	r3, [r7, #12]
}
 8017870:	bf00      	nop
 8017872:	e7fe      	b.n	8017872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d00a      	beq.n	8017892 <vPortFree+0x62>
	__asm volatile
 801787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017880:	f383 8811 	msr	BASEPRI, r3
 8017884:	f3bf 8f6f 	isb	sy
 8017888:	f3bf 8f4f 	dsb	sy
 801788c:	60bb      	str	r3, [r7, #8]
}
 801788e:	bf00      	nop
 8017890:	e7fe      	b.n	8017890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	685a      	ldr	r2, [r3, #4]
 8017896:	4b14      	ldr	r3, [pc, #80]	; (80178e8 <vPortFree+0xb8>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	4013      	ands	r3, r2
 801789c:	2b00      	cmp	r3, #0
 801789e:	d01e      	beq.n	80178de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d11a      	bne.n	80178de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	685a      	ldr	r2, [r3, #4]
 80178ac:	4b0e      	ldr	r3, [pc, #56]	; (80178e8 <vPortFree+0xb8>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	43db      	mvns	r3, r3
 80178b2:	401a      	ands	r2, r3
 80178b4:	693b      	ldr	r3, [r7, #16]
 80178b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80178b8:	f7fe fb78 	bl	8015fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80178bc:	693b      	ldr	r3, [r7, #16]
 80178be:	685a      	ldr	r2, [r3, #4]
 80178c0:	4b0a      	ldr	r3, [pc, #40]	; (80178ec <vPortFree+0xbc>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	4413      	add	r3, r2
 80178c6:	4a09      	ldr	r2, [pc, #36]	; (80178ec <vPortFree+0xbc>)
 80178c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80178ca:	6938      	ldr	r0, [r7, #16]
 80178cc:	f000 f874 	bl	80179b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80178d0:	4b07      	ldr	r3, [pc, #28]	; (80178f0 <vPortFree+0xc0>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	3301      	adds	r3, #1
 80178d6:	4a06      	ldr	r2, [pc, #24]	; (80178f0 <vPortFree+0xc0>)
 80178d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80178da:	f7fe fb75 	bl	8015fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80178de:	bf00      	nop
 80178e0:	3718      	adds	r7, #24
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}
 80178e6:	bf00      	nop
 80178e8:	200058f0 	.word	0x200058f0
 80178ec:	200058e0 	.word	0x200058e0
 80178f0:	200058ec 	.word	0x200058ec

080178f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80178f4:	b480      	push	{r7}
 80178f6:	b085      	sub	sp, #20
 80178f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80178fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80178fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017900:	4b27      	ldr	r3, [pc, #156]	; (80179a0 <prvHeapInit+0xac>)
 8017902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f003 0307 	and.w	r3, r3, #7
 801790a:	2b00      	cmp	r3, #0
 801790c:	d00c      	beq.n	8017928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	3307      	adds	r3, #7
 8017912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	f023 0307 	bic.w	r3, r3, #7
 801791a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801791c:	68ba      	ldr	r2, [r7, #8]
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	1ad3      	subs	r3, r2, r3
 8017922:	4a1f      	ldr	r2, [pc, #124]	; (80179a0 <prvHeapInit+0xac>)
 8017924:	4413      	add	r3, r2
 8017926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801792c:	4a1d      	ldr	r2, [pc, #116]	; (80179a4 <prvHeapInit+0xb0>)
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017932:	4b1c      	ldr	r3, [pc, #112]	; (80179a4 <prvHeapInit+0xb0>)
 8017934:	2200      	movs	r2, #0
 8017936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	68ba      	ldr	r2, [r7, #8]
 801793c:	4413      	add	r3, r2
 801793e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017940:	2208      	movs	r2, #8
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	1a9b      	subs	r3, r3, r2
 8017946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	f023 0307 	bic.w	r3, r3, #7
 801794e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	4a15      	ldr	r2, [pc, #84]	; (80179a8 <prvHeapInit+0xb4>)
 8017954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017956:	4b14      	ldr	r3, [pc, #80]	; (80179a8 <prvHeapInit+0xb4>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	2200      	movs	r2, #0
 801795c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801795e:	4b12      	ldr	r3, [pc, #72]	; (80179a8 <prvHeapInit+0xb4>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	2200      	movs	r2, #0
 8017964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	68fa      	ldr	r2, [r7, #12]
 801796e:	1ad2      	subs	r2, r2, r3
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017974:	4b0c      	ldr	r3, [pc, #48]	; (80179a8 <prvHeapInit+0xb4>)
 8017976:	681a      	ldr	r2, [r3, #0]
 8017978:	683b      	ldr	r3, [r7, #0]
 801797a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	685b      	ldr	r3, [r3, #4]
 8017980:	4a0a      	ldr	r2, [pc, #40]	; (80179ac <prvHeapInit+0xb8>)
 8017982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	685b      	ldr	r3, [r3, #4]
 8017988:	4a09      	ldr	r2, [pc, #36]	; (80179b0 <prvHeapInit+0xbc>)
 801798a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801798c:	4b09      	ldr	r3, [pc, #36]	; (80179b4 <prvHeapInit+0xc0>)
 801798e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017992:	601a      	str	r2, [r3, #0]
}
 8017994:	bf00      	nop
 8017996:	3714      	adds	r7, #20
 8017998:	46bd      	mov	sp, r7
 801799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799e:	4770      	bx	lr
 80179a0:	20001cd4 	.word	0x20001cd4
 80179a4:	200058d4 	.word	0x200058d4
 80179a8:	200058dc 	.word	0x200058dc
 80179ac:	200058e4 	.word	0x200058e4
 80179b0:	200058e0 	.word	0x200058e0
 80179b4:	200058f0 	.word	0x200058f0

080179b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80179b8:	b480      	push	{r7}
 80179ba:	b085      	sub	sp, #20
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80179c0:	4b28      	ldr	r3, [pc, #160]	; (8017a64 <prvInsertBlockIntoFreeList+0xac>)
 80179c2:	60fb      	str	r3, [r7, #12]
 80179c4:	e002      	b.n	80179cc <prvInsertBlockIntoFreeList+0x14>
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	60fb      	str	r3, [r7, #12]
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	687a      	ldr	r2, [r7, #4]
 80179d2:	429a      	cmp	r2, r3
 80179d4:	d8f7      	bhi.n	80179c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	68ba      	ldr	r2, [r7, #8]
 80179e0:	4413      	add	r3, r2
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d108      	bne.n	80179fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	685a      	ldr	r2, [r3, #4]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	441a      	add	r2, r3
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	685b      	ldr	r3, [r3, #4]
 8017a02:	68ba      	ldr	r2, [r7, #8]
 8017a04:	441a      	add	r2, r3
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d118      	bne.n	8017a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	681a      	ldr	r2, [r3, #0]
 8017a12:	4b15      	ldr	r3, [pc, #84]	; (8017a68 <prvInsertBlockIntoFreeList+0xb0>)
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d00d      	beq.n	8017a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	685a      	ldr	r2, [r3, #4]
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	685b      	ldr	r3, [r3, #4]
 8017a24:	441a      	add	r2, r3
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	681a      	ldr	r2, [r3, #0]
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	601a      	str	r2, [r3, #0]
 8017a34:	e008      	b.n	8017a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017a36:	4b0c      	ldr	r3, [pc, #48]	; (8017a68 <prvInsertBlockIntoFreeList+0xb0>)
 8017a38:	681a      	ldr	r2, [r3, #0]
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	601a      	str	r2, [r3, #0]
 8017a3e:	e003      	b.n	8017a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	681a      	ldr	r2, [r3, #0]
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017a48:	68fa      	ldr	r2, [r7, #12]
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	429a      	cmp	r2, r3
 8017a4e:	d002      	beq.n	8017a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	687a      	ldr	r2, [r7, #4]
 8017a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017a56:	bf00      	nop
 8017a58:	3714      	adds	r7, #20
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a60:	4770      	bx	lr
 8017a62:	bf00      	nop
 8017a64:	200058d4 	.word	0x200058d4
 8017a68:	200058dc 	.word	0x200058dc

08017a6c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8017a6c:	b480      	push	{r7}
 8017a6e:	b083      	sub	sp, #12
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
    {
 8017a74:	4a04      	ldr	r2, [pc, #16]	; (8017a88 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	601a      	str	r2, [r3, #0]
    }
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	370c      	adds	r7, #12
 8017a80:	46bd      	mov	sp, r7
 8017a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a86:	4770      	bx	lr
 8017a88:	08024920 	.word	0x08024920

08017a8c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b082      	sub	sp, #8
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
    }
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f7ff ffe9 	bl	8017a6c <_ZN8touchgfx12FontProviderD1Ev>
 8017a9a:	2104      	movs	r1, #4
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f009 fabf 	bl	8021020 <_ZdlPvj>
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	460b      	mov	r3, r1
 8017ab6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8017ab8:	887b      	ldrh	r3, [r7, #2]
 8017aba:	2b0c      	cmp	r3, #12
 8017abc:	d85d      	bhi.n	8017b7a <_ZN23ApplicationFontProvider7getFontEt+0xce>
 8017abe:	a201      	add	r2, pc, #4	; (adr r2, 8017ac4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8017ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ac4:	08017af9 	.word	0x08017af9
 8017ac8:	08017b03 	.word	0x08017b03
 8017acc:	08017b0d 	.word	0x08017b0d
 8017ad0:	08017b17 	.word	0x08017b17
 8017ad4:	08017b21 	.word	0x08017b21
 8017ad8:	08017b2b 	.word	0x08017b2b
 8017adc:	08017b35 	.word	0x08017b35
 8017ae0:	08017b3f 	.word	0x08017b3f
 8017ae4:	08017b49 	.word	0x08017b49
 8017ae8:	08017b53 	.word	0x08017b53
 8017aec:	08017b5d 	.word	0x08017b5d
 8017af0:	08017b67 	.word	0x08017b67
 8017af4:	08017b71 	.word	0x08017b71
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8017af8:	f001 f938 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017afc:	4603      	mov	r3, r0
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	e03c      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::BUTTONSENG:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8017b02:	f001 f933 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b06:	4603      	mov	r3, r0
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	e037      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::TITLES:
        // AGENCYB_TTF_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8017b0c:	f001 f92e 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b10:	4603      	mov	r3, r0
 8017b12:	689b      	ldr	r3, [r3, #8]
 8017b14:	e032      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MEDIUMTITLE:
        // AGENCYB_TTF_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8017b16:	f001 f929 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	68db      	ldr	r3, [r3, #12]
 8017b1e:	e02d      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::BACKBUTTON:
        // AGENCYB_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8017b20:	f001 f924 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b24:	4603      	mov	r3, r0
 8017b26:	691b      	ldr	r3, [r3, #16]
 8017b28:	e028      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::DISPLAY:
        // AGENCYB_TTF_28_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8017b2a:	f001 f91f 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	695b      	ldr	r3, [r3, #20]
 8017b32:	e023      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MODE:
        // AGENCYB_TTF_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8017b34:	f001 f91a 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	699b      	ldr	r3, [r3, #24]
 8017b3c:	e01e      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::KEYBOARD:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8017b3e:	f001 f915 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b42:	4603      	mov	r3, r0
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	e019      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::MAINTEXT:
        // AGENCYB_TTF_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8017b48:	f001 f910 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	685b      	ldr	r3, [r3, #4]
 8017b50:	e014      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::ITALICARIAL14:
        // AGENCYB_TTF_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8017b52:	f001 f90b 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b56:	4603      	mov	r3, r0
 8017b58:	691b      	ldr	r3, [r3, #16]
 8017b5a:	e00f      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::SMALLARIEL10:
        // AGENCYB_TTF_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 8017b5c:	f001 f906 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b60:	4603      	mov	r3, r0
 8017b62:	69db      	ldr	r3, [r3, #28]
 8017b64:	e00a      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[8]);
 8017b66:	f001 f901 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	6a1b      	ldr	r3, [r3, #32]
 8017b6e:	e005      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[9]);
 8017b70:	f001 f8fc 	bl	8018d6c <_ZN17TypedTextDatabase8getFontsEv>
 8017b74:	4603      	mov	r3, r0
 8017b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b78:	e000      	b.n	8017b7c <_ZN23ApplicationFontProvider7getFontEt+0xd0>
    default:
        return 0;
 8017b7a:	2300      	movs	r3, #0
    }
}
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	3708      	adds	r7, #8
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bd80      	pop	{r7, pc}

08017b84 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 8;         // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 9;         // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 10;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b082      	sub	sp, #8
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
 8017b8c:	4a05      	ldr	r2, [pc, #20]	; (8017ba4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	601a      	str	r2, [r3, #0]
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7ff ff69 	bl	8017a6c <_ZN8touchgfx12FontProviderD1Ev>
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	3708      	adds	r7, #8
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}
 8017ba4:	0802490c 	.word	0x0802490c

08017ba8 <_ZN23ApplicationFontProviderD0Ev>:
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b082      	sub	sp, #8
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
 8017bb0:	6878      	ldr	r0, [r7, #4]
 8017bb2:	f7ff ffe7 	bl	8017b84 <_ZN23ApplicationFontProviderD1Ev>
 8017bb6:	2104      	movs	r1, #4
 8017bb8:	6878      	ldr	r0, [r7, #4]
 8017bba:	f009 fa31 	bl	8021020 <_ZdlPvj>
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3708      	adds	r7, #8
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}

08017bc8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8017bc8:	b480      	push	{r7}
 8017bca:	b083      	sub	sp, #12
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
    {
 8017bd0:	4a04      	ldr	r2, [pc, #16]	; (8017be4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	601a      	str	r2, [r3, #0]
    }
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	4618      	mov	r0, r3
 8017bda:	370c      	adds	r7, #12
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be2:	4770      	bx	lr
 8017be4:	0802499c 	.word	0x0802499c

08017be8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
    }
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f7ff ffe9 	bl	8017bc8 <_ZN8touchgfx4FontD1Ev>
 8017bf6:	2110      	movs	r1, #16
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f009 fa11 	bl	8021020 <_ZdlPvj>
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	4618      	mov	r0, r3
 8017c02:	3708      	adds	r7, #8
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8017c08:	b590      	push	{r4, r7, lr}
 8017c0a:	b087      	sub	sp, #28
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	460b      	mov	r3, r1
 8017c12:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8017c14:	887b      	ldrh	r3, [r7, #2]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d101      	bne.n	8017c1e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	e010      	b.n	8017c40 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8017c22:	2300      	movs	r3, #0
 8017c24:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	3308      	adds	r3, #8
 8017c2c:	681c      	ldr	r4, [r3, #0]
 8017c2e:	f107 030f 	add.w	r3, r7, #15
 8017c32:	f107 0210 	add.w	r2, r7, #16
 8017c36:	8879      	ldrh	r1, [r7, #2]
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	47a0      	blx	r4
 8017c3c:	6178      	str	r0, [r7, #20]
        return glyph;
 8017c3e:	697b      	ldr	r3, [r7, #20]
    }
 8017c40:	4618      	mov	r0, r3
 8017c42:	371c      	adds	r7, #28
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd90      	pop	{r4, r7, pc}

08017c48 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8017c48:	b480      	push	{r7}
 8017c4a:	b083      	sub	sp, #12
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	895b      	ldrh	r3, [r3, #10]
    }
 8017c54:	4618      	mov	r0, r3
 8017c56:	370c      	adds	r7, #12
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5e:	4770      	bx	lr

08017c60 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8017c60:	b480      	push	{r7}
 8017c62:	b083      	sub	sp, #12
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	899b      	ldrh	r3, [r3, #12]
    }
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	370c      	adds	r7, #12
 8017c70:	46bd      	mov	sp, r7
 8017c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c76:	4770      	bx	lr

08017c78 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8017c78:	b480      	push	{r7}
 8017c7a:	b083      	sub	sp, #12
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	889b      	ldrh	r3, [r3, #4]
    }
 8017c84:	4618      	mov	r0, r3
 8017c86:	370c      	adds	r7, #12
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8e:	4770      	bx	lr

08017c90 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8017c90:	b480      	push	{r7}
 8017c92:	b083      	sub	sp, #12
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	889a      	ldrh	r2, [r3, #4]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	799b      	ldrb	r3, [r3, #6]
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	4413      	add	r3, r2
 8017ca4:	b29b      	uxth	r3, r3
    }
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	370c      	adds	r7, #12
 8017caa:	46bd      	mov	sp, r7
 8017cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb0:	4770      	bx	lr

08017cb2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8017cb2:	b480      	push	{r7}
 8017cb4:	b083      	sub	sp, #12
 8017cb6:	af00      	add	r7, sp, #0
 8017cb8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	79db      	ldrb	r3, [r3, #7]
 8017cbe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8017cc2:	b2db      	uxtb	r3, r3
    }
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	370c      	adds	r7, #12
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cce:	4770      	bx	lr

08017cd0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8017cd0:	b480      	push	{r7}
 8017cd2:	b083      	sub	sp, #12
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	79db      	ldrb	r3, [r3, #7]
 8017cdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017ce0:	b2db      	uxtb	r3, r3
    }
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	370c      	adds	r7, #12
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr
	...

08017cf0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b082      	sub	sp, #8
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	4a05      	ldr	r2, [pc, #20]	; (8017d10 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	601a      	str	r2, [r3, #0]
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7ff ff61 	bl	8017bc8 <_ZN8touchgfx4FontD1Ev>
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	3708      	adds	r7, #8
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}
 8017d10:	080255a4 	.word	0x080255a4

08017d14 <_ZN8touchgfx9ConstFontD0Ev>:
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b082      	sub	sp, #8
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
 8017d1c:	6878      	ldr	r0, [r7, #4]
 8017d1e:	f7ff ffe7 	bl	8017cf0 <_ZN8touchgfx9ConstFontD1Ev>
 8017d22:	2118      	movs	r1, #24
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f009 f97b 	bl	8021020 <_ZdlPvj>
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	3708      	adds	r7, #8
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b082      	sub	sp, #8
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
 8017d3c:	4a05      	ldr	r2, [pc, #20]	; (8017d54 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	601a      	str	r2, [r3, #0]
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7ff ffd3 	bl	8017cf0 <_ZN8touchgfx9ConstFontD1Ev>
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3708      	adds	r7, #8
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}
 8017d54:	08024944 	.word	0x08024944

08017d58 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b082      	sub	sp, #8
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	6878      	ldr	r0, [r7, #4]
 8017d62:	f7ff ffe7 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 8017d66:	2128      	movs	r1, #40	; 0x28
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f009 f959 	bl	8021020 <_ZdlPvj>
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	4618      	mov	r0, r3
 8017d72:	3708      	adds	r7, #8
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8017d78:	b480      	push	{r7}
 8017d7a:	b083      	sub	sp, #12
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
    {
 8017d80:	4a04      	ldr	r2, [pc, #16]	; (8017d94 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	601a      	str	r2, [r3, #0]
    }
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	4618      	mov	r0, r3
 8017d8a:	370c      	adds	r7, #12
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d92:	4770      	bx	lr
 8017d94:	08024934 	.word	0x08024934

08017d98 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
    }
 8017da0:	6878      	ldr	r0, [r7, #4]
 8017da2:	f7ff ffe9 	bl	8017d78 <_ZN8touchgfx9TypedTextD1Ev>
 8017da6:	2108      	movs	r1, #8
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f009 f939 	bl	8021020 <_ZdlPvj>
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	4618      	mov	r0, r3
 8017db2:	3708      	adds	r7, #8
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}

08017db8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	6a1b      	ldr	r3, [r3, #32]
    }
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	370c      	adds	r7, #12
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr

08017dd0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8017dd0:	b480      	push	{r7}
 8017dd2:	b083      	sub	sp, #12
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8017ddc:	4618      	mov	r0, r3
 8017dde:	370c      	adds	r7, #12
 8017de0:	46bd      	mov	sp, r7
 8017de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de6:	4770      	bx	lr

08017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b08c      	sub	sp, #48	; 0x30
 8017dec:	af08      	add	r7, sp, #32
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	4611      	mov	r1, r2
 8017df4:	461a      	mov	r2, r3
 8017df6:	460b      	mov	r3, r1
 8017df8:	80fb      	strh	r3, [r7, #6]
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8017dfe:	68f8      	ldr	r0, [r7, #12]
 8017e00:	88b9      	ldrh	r1, [r7, #4]
 8017e02:	88fa      	ldrh	r2, [r7, #6]
 8017e04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017e06:	9306      	str	r3, [sp, #24]
 8017e08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017e0a:	9305      	str	r3, [sp, #20]
 8017e0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017e10:	9304      	str	r3, [sp, #16]
 8017e12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017e16:	9303      	str	r3, [sp, #12]
 8017e18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e1c:	9302      	str	r3, [sp, #8]
 8017e1e:	7f3b      	ldrb	r3, [r7, #28]
 8017e20:	9301      	str	r3, [sp, #4]
 8017e22:	7e3b      	ldrb	r3, [r7, #24]
 8017e24:	9300      	str	r3, [sp, #0]
 8017e26:	460b      	mov	r3, r1
 8017e28:	68b9      	ldr	r1, [r7, #8]
 8017e2a:	f005 fea5 	bl	801db78 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8017e2e:	4a0a      	ldr	r2, [pc, #40]	; (8017e58 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	601a      	str	r2, [r3, #0]
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e38:	619a      	str	r2, [r3, #24]
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e3e:	61da      	str	r2, [r3, #28]
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017e44:	621a      	str	r2, [r3, #32]
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017e4a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3710      	adds	r7, #16
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	08024944 	.word	0x08024944

08017e5c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8017e5c:	b480      	push	{r7}
 8017e5e:	b085      	sub	sp, #20
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
 8017e64:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	699b      	ldr	r3, [r3, #24]
 8017e6a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	889b      	ldrh	r3, [r3, #4]
 8017e70:	0adb      	lsrs	r3, r3, #11
 8017e72:	b29b      	uxth	r3, r3
 8017e74:	009b      	lsls	r3, r3, #2
 8017e76:	68fa      	ldr	r2, [r7, #12]
 8017e78:	4413      	add	r3, r2
 8017e7a:	681a      	ldr	r2, [r3, #0]
 8017e7c:	683b      	ldr	r3, [r7, #0]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	4413      	add	r3, r2
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3714      	adds	r7, #20
 8017e86:	46bd      	mov	sp, r7
 8017e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8c:	4770      	bx	lr

08017e8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8017e8e:	b480      	push	{r7}
 8017e90:	b089      	sub	sp, #36	; 0x24
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	60f8      	str	r0, [r7, #12]
 8017e96:	460b      	mov	r3, r1
 8017e98:	607a      	str	r2, [r7, #4]
 8017e9a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d003      	beq.n	8017eaa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	7b1b      	ldrb	r3, [r3, #12]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d101      	bne.n	8017eae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8017eaa:	2300      	movs	r3, #0
 8017eac:	e030      	b.n	8017f10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	69da      	ldr	r2, [r3, #28]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8017eb6:	697b      	ldr	r3, [r7, #20]
 8017eb8:	7b5b      	ldrb	r3, [r3, #13]
 8017eba:	021b      	lsls	r3, r3, #8
 8017ebc:	b21b      	sxth	r3, r3
 8017ebe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017ec2:	b219      	sxth	r1, r3
 8017ec4:	697b      	ldr	r3, [r7, #20]
 8017ec6:	7adb      	ldrb	r3, [r3, #11]
 8017ec8:	b21b      	sxth	r3, r3
 8017eca:	430b      	orrs	r3, r1
 8017ecc:	b21b      	sxth	r3, r3
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	009b      	lsls	r3, r3, #2
 8017ed2:	4413      	add	r3, r2
 8017ed4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	7b1b      	ldrb	r3, [r3, #12]
 8017eda:	837b      	strh	r3, [r7, #26]
 8017edc:	8b7b      	ldrh	r3, [r7, #26]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d015      	beq.n	8017f0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8017ee2:	69fb      	ldr	r3, [r7, #28]
 8017ee4:	881b      	ldrh	r3, [r3, #0]
 8017ee6:	897a      	ldrh	r2, [r7, #10]
 8017ee8:	429a      	cmp	r2, r3
 8017eea:	d103      	bne.n	8017ef4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8017eec:	69fb      	ldr	r3, [r7, #28]
 8017eee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017ef2:	e00d      	b.n	8017f10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8017ef4:	69fb      	ldr	r3, [r7, #28]
 8017ef6:	881b      	ldrh	r3, [r3, #0]
 8017ef8:	897a      	ldrh	r2, [r7, #10]
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d306      	bcc.n	8017f0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8017efe:	8b7b      	ldrh	r3, [r7, #26]
 8017f00:	3b01      	subs	r3, #1
 8017f02:	837b      	strh	r3, [r7, #26]
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	3304      	adds	r3, #4
 8017f08:	61fb      	str	r3, [r7, #28]
 8017f0a:	e7e7      	b.n	8017edc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8017f0c:	bf00      	nop
        }
    }
    return 0;
 8017f0e:	2300      	movs	r3, #0
}
 8017f10:	4618      	mov	r0, r3
 8017f12:	3724      	adds	r7, #36	; 0x24
 8017f14:	46bd      	mov	sp, r7
 8017f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1a:	4770      	bx	lr

08017f1c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_12_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_12_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_12_4bpp(glyphs_AGENCYB_TTF_12_4bpp, 65, 12, 2, 4, 1, 1, 1, unicodes_AGENCYB_TTF_12_4bpp, kerning_AGENCYB_TTF_12_4bpp, 63, 0, 0, 0);
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	af00      	add	r7, sp, #0
 8017f20:	4801      	ldr	r0, [pc, #4]	; (8017f28 <__tcf_0+0xc>)
 8017f22:	f7ff ff07 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	200058f4 	.word	0x200058f4

08017f2c <_Z27getFont_AGENCYB_TTF_12_4bppv>:
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b08c      	sub	sp, #48	; 0x30
 8017f30:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_12_4bpp(glyphs_AGENCYB_TTF_12_4bpp, 65, 12, 2, 4, 1, 1, 1, unicodes_AGENCYB_TTF_12_4bpp, kerning_AGENCYB_TTF_12_4bpp, 63, 0, 0, 0);
 8017f32:	4b1f      	ldr	r3, [pc, #124]	; (8017fb0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 8017f34:	781b      	ldrb	r3, [r3, #0]
 8017f36:	f3bf 8f5b 	dmb	ish
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	f003 0301 	and.w	r3, r3, #1
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	bf0c      	ite	eq
 8017f44:	2301      	moveq	r3, #1
 8017f46:	2300      	movne	r3, #0
 8017f48:	b2db      	uxtb	r3, r3
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d02c      	beq.n	8017fa8 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x7c>
 8017f4e:	4818      	ldr	r0, [pc, #96]	; (8017fb0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 8017f50:	f009 f868 	bl	8021024 <__cxa_guard_acquire>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	bf14      	ite	ne
 8017f5a:	2301      	movne	r3, #1
 8017f5c:	2300      	moveq	r3, #0
 8017f5e:	b2db      	uxtb	r3, r3
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d021      	beq.n	8017fa8 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x7c>
 8017f64:	2300      	movs	r3, #0
 8017f66:	930a      	str	r3, [sp, #40]	; 0x28
 8017f68:	2300      	movs	r3, #0
 8017f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	9308      	str	r3, [sp, #32]
 8017f70:	233f      	movs	r3, #63	; 0x3f
 8017f72:	9307      	str	r3, [sp, #28]
 8017f74:	4b0f      	ldr	r3, [pc, #60]	; (8017fb4 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x88>)
 8017f76:	9306      	str	r3, [sp, #24]
 8017f78:	4b0f      	ldr	r3, [pc, #60]	; (8017fb8 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x8c>)
 8017f7a:	9305      	str	r3, [sp, #20]
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	9304      	str	r3, [sp, #16]
 8017f80:	2301      	movs	r3, #1
 8017f82:	9303      	str	r3, [sp, #12]
 8017f84:	2301      	movs	r3, #1
 8017f86:	9302      	str	r3, [sp, #8]
 8017f88:	2304      	movs	r3, #4
 8017f8a:	9301      	str	r3, [sp, #4]
 8017f8c:	2302      	movs	r3, #2
 8017f8e:	9300      	str	r3, [sp, #0]
 8017f90:	230c      	movs	r3, #12
 8017f92:	2241      	movs	r2, #65	; 0x41
 8017f94:	4909      	ldr	r1, [pc, #36]	; (8017fbc <_Z27getFont_AGENCYB_TTF_12_4bppv+0x90>)
 8017f96:	480a      	ldr	r0, [pc, #40]	; (8017fc0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x94>)
 8017f98:	f7ff ff26 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8017f9c:	4809      	ldr	r0, [pc, #36]	; (8017fc4 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x98>)
 8017f9e:	f009 f88b 	bl	80210b8 <atexit>
 8017fa2:	4803      	ldr	r0, [pc, #12]	; (8017fb0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x84>)
 8017fa4:	f009 f84a 	bl	802103c <__cxa_guard_release>
    return AGENCYB_TTF_12_4bpp;
 8017fa8:	4b05      	ldr	r3, [pc, #20]	; (8017fc0 <_Z27getFont_AGENCYB_TTF_12_4bppv+0x94>)
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	2000591c 	.word	0x2000591c
 8017fb4:	0803d854 	.word	0x0803d854
 8017fb8:	0803db48 	.word	0x0803db48
 8017fbc:	0803ad58 	.word	0x0803ad58
 8017fc0:	200058f4 	.word	0x200058f4
 8017fc4:	08017f1d 	.word	0x08017f1d

08017fc8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_14_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_14_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_14_4bpp(glyphs_AGENCYB_TTF_14_4bpp, 113, 14, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_14_4bpp, kerning_AGENCYB_TTF_14_4bpp, 63, 0, 0, 0);
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	af00      	add	r7, sp, #0
 8017fcc:	4801      	ldr	r0, [pc, #4]	; (8017fd4 <__tcf_0+0xc>)
 8017fce:	f7ff feb1 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 8017fd2:	bd80      	pop	{r7, pc}
 8017fd4:	20005920 	.word	0x20005920

08017fd8 <_Z27getFont_AGENCYB_TTF_14_4bppv>:
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b08c      	sub	sp, #48	; 0x30
 8017fdc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_14_4bpp(glyphs_AGENCYB_TTF_14_4bpp, 113, 14, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_14_4bpp, kerning_AGENCYB_TTF_14_4bpp, 63, 0, 0, 0);
 8017fde:	4b1f      	ldr	r3, [pc, #124]	; (801805c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 8017fe0:	781b      	ldrb	r3, [r3, #0]
 8017fe2:	f3bf 8f5b 	dmb	ish
 8017fe6:	b2db      	uxtb	r3, r3
 8017fe8:	f003 0301 	and.w	r3, r3, #1
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	bf0c      	ite	eq
 8017ff0:	2301      	moveq	r3, #1
 8017ff2:	2300      	movne	r3, #0
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d02c      	beq.n	8018054 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x7c>
 8017ffa:	4818      	ldr	r0, [pc, #96]	; (801805c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 8017ffc:	f009 f812 	bl	8021024 <__cxa_guard_acquire>
 8018000:	4603      	mov	r3, r0
 8018002:	2b00      	cmp	r3, #0
 8018004:	bf14      	ite	ne
 8018006:	2301      	movne	r3, #1
 8018008:	2300      	moveq	r3, #0
 801800a:	b2db      	uxtb	r3, r3
 801800c:	2b00      	cmp	r3, #0
 801800e:	d021      	beq.n	8018054 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x7c>
 8018010:	2300      	movs	r3, #0
 8018012:	930a      	str	r3, [sp, #40]	; 0x28
 8018014:	2300      	movs	r3, #0
 8018016:	9309      	str	r3, [sp, #36]	; 0x24
 8018018:	2300      	movs	r3, #0
 801801a:	9308      	str	r3, [sp, #32]
 801801c:	233f      	movs	r3, #63	; 0x3f
 801801e:	9307      	str	r3, [sp, #28]
 8018020:	4b0f      	ldr	r3, [pc, #60]	; (8018060 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x88>)
 8018022:	9306      	str	r3, [sp, #24]
 8018024:	4b0f      	ldr	r3, [pc, #60]	; (8018064 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x8c>)
 8018026:	9305      	str	r3, [sp, #20]
 8018028:	2301      	movs	r3, #1
 801802a:	9304      	str	r3, [sp, #16]
 801802c:	2301      	movs	r3, #1
 801802e:	9303      	str	r3, [sp, #12]
 8018030:	2301      	movs	r3, #1
 8018032:	9302      	str	r3, [sp, #8]
 8018034:	2304      	movs	r3, #4
 8018036:	9301      	str	r3, [sp, #4]
 8018038:	2304      	movs	r3, #4
 801803a:	9300      	str	r3, [sp, #0]
 801803c:	230e      	movs	r3, #14
 801803e:	2271      	movs	r2, #113	; 0x71
 8018040:	4909      	ldr	r1, [pc, #36]	; (8018068 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x90>)
 8018042:	480a      	ldr	r0, [pc, #40]	; (801806c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x94>)
 8018044:	f7ff fed0 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8018048:	4809      	ldr	r0, [pc, #36]	; (8018070 <_Z27getFont_AGENCYB_TTF_14_4bppv+0x98>)
 801804a:	f009 f835 	bl	80210b8 <atexit>
 801804e:	4803      	ldr	r0, [pc, #12]	; (801805c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x84>)
 8018050:	f008 fff4 	bl	802103c <__cxa_guard_release>
    return AGENCYB_TTF_14_4bpp;
 8018054:	4b05      	ldr	r3, [pc, #20]	; (801806c <_Z27getFont_AGENCYB_TTF_14_4bppv+0x94>)
}
 8018056:	4618      	mov	r0, r3
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}
 801805c:	20005948 	.word	0x20005948
 8018060:	0803d858 	.word	0x0803d858
 8018064:	0803db4c 	.word	0x0803db4c
 8018068:	0803b0e8 	.word	0x0803b0e8
 801806c:	20005920 	.word	0x20005920
 8018070:	08017fc9 	.word	0x08017fc9

08018074 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_20_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_20_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_20_4bpp(glyphs_AGENCYB_TTF_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_20_4bpp, kerning_AGENCYB_TTF_20_4bpp, 63, 0, 0, 0);
 8018074:	b580      	push	{r7, lr}
 8018076:	af00      	add	r7, sp, #0
 8018078:	4801      	ldr	r0, [pc, #4]	; (8018080 <__tcf_0+0xc>)
 801807a:	f7ff fe5b 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 801807e:	bd80      	pop	{r7, pc}
 8018080:	2000594c 	.word	0x2000594c

08018084 <_Z27getFont_AGENCYB_TTF_20_4bppv>:
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b08c      	sub	sp, #48	; 0x30
 8018088:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_20_4bpp(glyphs_AGENCYB_TTF_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_20_4bpp, kerning_AGENCYB_TTF_20_4bpp, 63, 0, 0, 0);
 801808a:	4b1f      	ldr	r3, [pc, #124]	; (8018108 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 801808c:	781b      	ldrb	r3, [r3, #0]
 801808e:	f3bf 8f5b 	dmb	ish
 8018092:	b2db      	uxtb	r3, r3
 8018094:	f003 0301 	and.w	r3, r3, #1
 8018098:	2b00      	cmp	r3, #0
 801809a:	bf0c      	ite	eq
 801809c:	2301      	moveq	r3, #1
 801809e:	2300      	movne	r3, #0
 80180a0:	b2db      	uxtb	r3, r3
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d02c      	beq.n	8018100 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x7c>
 80180a6:	4818      	ldr	r0, [pc, #96]	; (8018108 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 80180a8:	f008 ffbc 	bl	8021024 <__cxa_guard_acquire>
 80180ac:	4603      	mov	r3, r0
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	bf14      	ite	ne
 80180b2:	2301      	movne	r3, #1
 80180b4:	2300      	moveq	r3, #0
 80180b6:	b2db      	uxtb	r3, r3
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d021      	beq.n	8018100 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x7c>
 80180bc:	2300      	movs	r3, #0
 80180be:	930a      	str	r3, [sp, #40]	; 0x28
 80180c0:	2300      	movs	r3, #0
 80180c2:	9309      	str	r3, [sp, #36]	; 0x24
 80180c4:	2300      	movs	r3, #0
 80180c6:	9308      	str	r3, [sp, #32]
 80180c8:	233f      	movs	r3, #63	; 0x3f
 80180ca:	9307      	str	r3, [sp, #28]
 80180cc:	4b0f      	ldr	r3, [pc, #60]	; (801810c <_Z27getFont_AGENCYB_TTF_20_4bppv+0x88>)
 80180ce:	9306      	str	r3, [sp, #24]
 80180d0:	4b0f      	ldr	r3, [pc, #60]	; (8018110 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x8c>)
 80180d2:	9305      	str	r3, [sp, #20]
 80180d4:	2301      	movs	r3, #1
 80180d6:	9304      	str	r3, [sp, #16]
 80180d8:	2301      	movs	r3, #1
 80180da:	9303      	str	r3, [sp, #12]
 80180dc:	2301      	movs	r3, #1
 80180de:	9302      	str	r3, [sp, #8]
 80180e0:	2304      	movs	r3, #4
 80180e2:	9301      	str	r3, [sp, #4]
 80180e4:	2304      	movs	r3, #4
 80180e6:	9300      	str	r3, [sp, #0]
 80180e8:	2314      	movs	r3, #20
 80180ea:	226e      	movs	r2, #110	; 0x6e
 80180ec:	4909      	ldr	r1, [pc, #36]	; (8018114 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x90>)
 80180ee:	480a      	ldr	r0, [pc, #40]	; (8018118 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x94>)
 80180f0:	f7ff fe7a 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80180f4:	4809      	ldr	r0, [pc, #36]	; (801811c <_Z27getFont_AGENCYB_TTF_20_4bppv+0x98>)
 80180f6:	f008 ffdf 	bl	80210b8 <atexit>
 80180fa:	4803      	ldr	r0, [pc, #12]	; (8018108 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x84>)
 80180fc:	f008 ff9e 	bl	802103c <__cxa_guard_release>
    return AGENCYB_TTF_20_4bpp;
 8018100:	4b05      	ldr	r3, [pc, #20]	; (8018118 <_Z27getFont_AGENCYB_TTF_20_4bppv+0x94>)
}
 8018102:	4618      	mov	r0, r3
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}
 8018108:	20005974 	.word	0x20005974
 801810c:	0803d85c 	.word	0x0803d85c
 8018110:	0803db60 	.word	0x0803db60
 8018114:	0803b718 	.word	0x0803b718
 8018118:	2000594c 	.word	0x2000594c
 801811c:	08018075 	.word	0x08018075

08018120 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_24_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_24_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_24_4bpp(glyphs_AGENCYB_TTF_24_4bpp, 63, 24, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_24_4bpp, kerning_AGENCYB_TTF_24_4bpp, 63, 0, 0, 0);
 8018120:	b580      	push	{r7, lr}
 8018122:	af00      	add	r7, sp, #0
 8018124:	4801      	ldr	r0, [pc, #4]	; (801812c <__tcf_0+0xc>)
 8018126:	f7ff fe05 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 801812a:	bd80      	pop	{r7, pc}
 801812c:	20005978 	.word	0x20005978

08018130 <_Z27getFont_AGENCYB_TTF_24_4bppv>:
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b08c      	sub	sp, #48	; 0x30
 8018134:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_24_4bpp(glyphs_AGENCYB_TTF_24_4bpp, 63, 24, 4, 4, 1, 1, 1, unicodes_AGENCYB_TTF_24_4bpp, kerning_AGENCYB_TTF_24_4bpp, 63, 0, 0, 0);
 8018136:	4b1f      	ldr	r3, [pc, #124]	; (80181b4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	f3bf 8f5b 	dmb	ish
 801813e:	b2db      	uxtb	r3, r3
 8018140:	f003 0301 	and.w	r3, r3, #1
 8018144:	2b00      	cmp	r3, #0
 8018146:	bf0c      	ite	eq
 8018148:	2301      	moveq	r3, #1
 801814a:	2300      	movne	r3, #0
 801814c:	b2db      	uxtb	r3, r3
 801814e:	2b00      	cmp	r3, #0
 8018150:	d02c      	beq.n	80181ac <_Z27getFont_AGENCYB_TTF_24_4bppv+0x7c>
 8018152:	4818      	ldr	r0, [pc, #96]	; (80181b4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 8018154:	f008 ff66 	bl	8021024 <__cxa_guard_acquire>
 8018158:	4603      	mov	r3, r0
 801815a:	2b00      	cmp	r3, #0
 801815c:	bf14      	ite	ne
 801815e:	2301      	movne	r3, #1
 8018160:	2300      	moveq	r3, #0
 8018162:	b2db      	uxtb	r3, r3
 8018164:	2b00      	cmp	r3, #0
 8018166:	d021      	beq.n	80181ac <_Z27getFont_AGENCYB_TTF_24_4bppv+0x7c>
 8018168:	2300      	movs	r3, #0
 801816a:	930a      	str	r3, [sp, #40]	; 0x28
 801816c:	2300      	movs	r3, #0
 801816e:	9309      	str	r3, [sp, #36]	; 0x24
 8018170:	2300      	movs	r3, #0
 8018172:	9308      	str	r3, [sp, #32]
 8018174:	233f      	movs	r3, #63	; 0x3f
 8018176:	9307      	str	r3, [sp, #28]
 8018178:	4b0f      	ldr	r3, [pc, #60]	; (80181b8 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x88>)
 801817a:	9306      	str	r3, [sp, #24]
 801817c:	4b0f      	ldr	r3, [pc, #60]	; (80181bc <_Z27getFont_AGENCYB_TTF_24_4bppv+0x8c>)
 801817e:	9305      	str	r3, [sp, #20]
 8018180:	2301      	movs	r3, #1
 8018182:	9304      	str	r3, [sp, #16]
 8018184:	2301      	movs	r3, #1
 8018186:	9303      	str	r3, [sp, #12]
 8018188:	2301      	movs	r3, #1
 801818a:	9302      	str	r3, [sp, #8]
 801818c:	2304      	movs	r3, #4
 801818e:	9301      	str	r3, [sp, #4]
 8018190:	2304      	movs	r3, #4
 8018192:	9300      	str	r3, [sp, #0]
 8018194:	2318      	movs	r3, #24
 8018196:	223f      	movs	r2, #63	; 0x3f
 8018198:	4909      	ldr	r1, [pc, #36]	; (80181c0 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x90>)
 801819a:	480a      	ldr	r0, [pc, #40]	; (80181c4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x94>)
 801819c:	f7ff fe24 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80181a0:	4809      	ldr	r0, [pc, #36]	; (80181c8 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x98>)
 80181a2:	f008 ff89 	bl	80210b8 <atexit>
 80181a6:	4803      	ldr	r0, [pc, #12]	; (80181b4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x84>)
 80181a8:	f008 ff48 	bl	802103c <__cxa_guard_release>
    return AGENCYB_TTF_24_4bpp;
 80181ac:	4b05      	ldr	r3, [pc, #20]	; (80181c4 <_Z27getFont_AGENCYB_TTF_24_4bppv+0x94>)
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}
 80181b4:	200059a0 	.word	0x200059a0
 80181b8:	0803d860 	.word	0x0803d860
 80181bc:	0803db74 	.word	0x0803db74
 80181c0:	0803bd1c 	.word	0x0803bd1c
 80181c4:	20005978 	.word	0x20005978
 80181c8:	08018121 	.word	0x08018121

080181cc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_28_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_28_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_28_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_28_4bpp(glyphs_AGENCYB_TTF_28_4bpp, 110, 28, 6, 4, 1, 1, 1, unicodes_AGENCYB_TTF_28_4bpp, kerning_AGENCYB_TTF_28_4bpp, 63, 0, 0, 0);
 80181cc:	b580      	push	{r7, lr}
 80181ce:	af00      	add	r7, sp, #0
 80181d0:	4801      	ldr	r0, [pc, #4]	; (80181d8 <__tcf_0+0xc>)
 80181d2:	f7ff fdaf 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 80181d6:	bd80      	pop	{r7, pc}
 80181d8:	200059a4 	.word	0x200059a4

080181dc <_Z27getFont_AGENCYB_TTF_28_4bppv>:
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b08c      	sub	sp, #48	; 0x30
 80181e0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_28_4bpp(glyphs_AGENCYB_TTF_28_4bpp, 110, 28, 6, 4, 1, 1, 1, unicodes_AGENCYB_TTF_28_4bpp, kerning_AGENCYB_TTF_28_4bpp, 63, 0, 0, 0);
 80181e2:	4b1f      	ldr	r3, [pc, #124]	; (8018260 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 80181e4:	781b      	ldrb	r3, [r3, #0]
 80181e6:	f3bf 8f5b 	dmb	ish
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	f003 0301 	and.w	r3, r3, #1
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	bf0c      	ite	eq
 80181f4:	2301      	moveq	r3, #1
 80181f6:	2300      	movne	r3, #0
 80181f8:	b2db      	uxtb	r3, r3
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d02c      	beq.n	8018258 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x7c>
 80181fe:	4818      	ldr	r0, [pc, #96]	; (8018260 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 8018200:	f008 ff10 	bl	8021024 <__cxa_guard_acquire>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	bf14      	ite	ne
 801820a:	2301      	movne	r3, #1
 801820c:	2300      	moveq	r3, #0
 801820e:	b2db      	uxtb	r3, r3
 8018210:	2b00      	cmp	r3, #0
 8018212:	d021      	beq.n	8018258 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x7c>
 8018214:	2300      	movs	r3, #0
 8018216:	930a      	str	r3, [sp, #40]	; 0x28
 8018218:	2300      	movs	r3, #0
 801821a:	9309      	str	r3, [sp, #36]	; 0x24
 801821c:	2300      	movs	r3, #0
 801821e:	9308      	str	r3, [sp, #32]
 8018220:	233f      	movs	r3, #63	; 0x3f
 8018222:	9307      	str	r3, [sp, #28]
 8018224:	4b0f      	ldr	r3, [pc, #60]	; (8018264 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x88>)
 8018226:	9306      	str	r3, [sp, #24]
 8018228:	4b0f      	ldr	r3, [pc, #60]	; (8018268 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x8c>)
 801822a:	9305      	str	r3, [sp, #20]
 801822c:	2301      	movs	r3, #1
 801822e:	9304      	str	r3, [sp, #16]
 8018230:	2301      	movs	r3, #1
 8018232:	9303      	str	r3, [sp, #12]
 8018234:	2301      	movs	r3, #1
 8018236:	9302      	str	r3, [sp, #8]
 8018238:	2304      	movs	r3, #4
 801823a:	9301      	str	r3, [sp, #4]
 801823c:	2306      	movs	r3, #6
 801823e:	9300      	str	r3, [sp, #0]
 8018240:	231c      	movs	r3, #28
 8018242:	226e      	movs	r2, #110	; 0x6e
 8018244:	4909      	ldr	r1, [pc, #36]	; (801826c <_Z27getFont_AGENCYB_TTF_28_4bppv+0x90>)
 8018246:	480a      	ldr	r0, [pc, #40]	; (8018270 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x94>)
 8018248:	f7ff fdce 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 801824c:	4809      	ldr	r0, [pc, #36]	; (8018274 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x98>)
 801824e:	f008 ff33 	bl	80210b8 <atexit>
 8018252:	4803      	ldr	r0, [pc, #12]	; (8018260 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x84>)
 8018254:	f008 fef2 	bl	802103c <__cxa_guard_release>
    return AGENCYB_TTF_28_4bpp;
 8018258:	4b05      	ldr	r3, [pc, #20]	; (8018270 <_Z27getFont_AGENCYB_TTF_28_4bppv+0x94>)
}
 801825a:	4618      	mov	r0, r3
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}
 8018260:	200059cc 	.word	0x200059cc
 8018264:	0803d864 	.word	0x0803d864
 8018268:	0803db78 	.word	0x0803db78
 801826c:	0803c090 	.word	0x0803c090
 8018270:	200059a4 	.word	0x200059a4
 8018274:	080181cd 	.word	0x080181cd

08018278 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_30_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_30_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_30_4bpp(glyphs_AGENCYB_TTF_30_4bpp, 65, 30, 5, 4, 1, 1, 0, unicodes_AGENCYB_TTF_30_4bpp, kerning_AGENCYB_TTF_30_4bpp, 63, 0, 0, 0);
 8018278:	b580      	push	{r7, lr}
 801827a:	af00      	add	r7, sp, #0
 801827c:	4801      	ldr	r0, [pc, #4]	; (8018284 <__tcf_0+0xc>)
 801827e:	f7ff fd59 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 8018282:	bd80      	pop	{r7, pc}
 8018284:	200059d0 	.word	0x200059d0

08018288 <_Z27getFont_AGENCYB_TTF_30_4bppv>:
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b08c      	sub	sp, #48	; 0x30
 801828c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_30_4bpp(glyphs_AGENCYB_TTF_30_4bpp, 65, 30, 5, 4, 1, 1, 0, unicodes_AGENCYB_TTF_30_4bpp, kerning_AGENCYB_TTF_30_4bpp, 63, 0, 0, 0);
 801828e:	4b1f      	ldr	r3, [pc, #124]	; (801830c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 8018290:	781b      	ldrb	r3, [r3, #0]
 8018292:	f3bf 8f5b 	dmb	ish
 8018296:	b2db      	uxtb	r3, r3
 8018298:	f003 0301 	and.w	r3, r3, #1
 801829c:	2b00      	cmp	r3, #0
 801829e:	bf0c      	ite	eq
 80182a0:	2301      	moveq	r3, #1
 80182a2:	2300      	movne	r3, #0
 80182a4:	b2db      	uxtb	r3, r3
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d02c      	beq.n	8018304 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x7c>
 80182aa:	4818      	ldr	r0, [pc, #96]	; (801830c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 80182ac:	f008 feba 	bl	8021024 <__cxa_guard_acquire>
 80182b0:	4603      	mov	r3, r0
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	bf14      	ite	ne
 80182b6:	2301      	movne	r3, #1
 80182b8:	2300      	moveq	r3, #0
 80182ba:	b2db      	uxtb	r3, r3
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d021      	beq.n	8018304 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x7c>
 80182c0:	2300      	movs	r3, #0
 80182c2:	930a      	str	r3, [sp, #40]	; 0x28
 80182c4:	2300      	movs	r3, #0
 80182c6:	9309      	str	r3, [sp, #36]	; 0x24
 80182c8:	2300      	movs	r3, #0
 80182ca:	9308      	str	r3, [sp, #32]
 80182cc:	233f      	movs	r3, #63	; 0x3f
 80182ce:	9307      	str	r3, [sp, #28]
 80182d0:	4b0f      	ldr	r3, [pc, #60]	; (8018310 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x88>)
 80182d2:	9306      	str	r3, [sp, #24]
 80182d4:	4b0f      	ldr	r3, [pc, #60]	; (8018314 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x8c>)
 80182d6:	9305      	str	r3, [sp, #20]
 80182d8:	2300      	movs	r3, #0
 80182da:	9304      	str	r3, [sp, #16]
 80182dc:	2301      	movs	r3, #1
 80182de:	9303      	str	r3, [sp, #12]
 80182e0:	2301      	movs	r3, #1
 80182e2:	9302      	str	r3, [sp, #8]
 80182e4:	2304      	movs	r3, #4
 80182e6:	9301      	str	r3, [sp, #4]
 80182e8:	2305      	movs	r3, #5
 80182ea:	9300      	str	r3, [sp, #0]
 80182ec:	231e      	movs	r3, #30
 80182ee:	2241      	movs	r2, #65	; 0x41
 80182f0:	4909      	ldr	r1, [pc, #36]	; (8018318 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x90>)
 80182f2:	480a      	ldr	r0, [pc, #40]	; (801831c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x94>)
 80182f4:	f7ff fd78 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80182f8:	4809      	ldr	r0, [pc, #36]	; (8018320 <_Z27getFont_AGENCYB_TTF_30_4bppv+0x98>)
 80182fa:	f008 fedd 	bl	80210b8 <atexit>
 80182fe:	4803      	ldr	r0, [pc, #12]	; (801830c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x84>)
 8018300:	f008 fe9c 	bl	802103c <__cxa_guard_release>
    return AGENCYB_TTF_30_4bpp;
 8018304:	4b05      	ldr	r3, [pc, #20]	; (801831c <_Z27getFont_AGENCYB_TTF_30_4bppv+0x94>)
}
 8018306:	4618      	mov	r0, r3
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}
 801830c:	200059f8 	.word	0x200059f8
 8018310:	0803d868 	.word	0x0803d868
 8018314:	0803db8c 	.word	0x0803db8c
 8018318:	0803c694 	.word	0x0803c694
 801831c:	200059d0 	.word	0x200059d0
 8018320:	08018279 	.word	0x08018279

08018324 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_AGENCYB_TTF_50_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_AGENCYB_TTF_50_4bpp();

touchgfx::GeneratedFont& getFont_AGENCYB_TTF_50_4bpp()
{
    static touchgfx::GeneratedFont AGENCYB_TTF_50_4bpp(glyphs_AGENCYB_TTF_50_4bpp, 67, 50, 9, 4, 1, 2, 0, unicodes_AGENCYB_TTF_50_4bpp, kerning_AGENCYB_TTF_50_4bpp, 63, 0, 0, 0);
 8018324:	b580      	push	{r7, lr}
 8018326:	af00      	add	r7, sp, #0
 8018328:	4801      	ldr	r0, [pc, #4]	; (8018330 <__tcf_0+0xc>)
 801832a:	f7ff fd03 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 801832e:	bd80      	pop	{r7, pc}
 8018330:	200059fc 	.word	0x200059fc

08018334 <_Z27getFont_AGENCYB_TTF_50_4bppv>:
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b08c      	sub	sp, #48	; 0x30
 8018338:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont AGENCYB_TTF_50_4bpp(glyphs_AGENCYB_TTF_50_4bpp, 67, 50, 9, 4, 1, 2, 0, unicodes_AGENCYB_TTF_50_4bpp, kerning_AGENCYB_TTF_50_4bpp, 63, 0, 0, 0);
 801833a:	4b1f      	ldr	r3, [pc, #124]	; (80183b8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	f3bf 8f5b 	dmb	ish
 8018342:	b2db      	uxtb	r3, r3
 8018344:	f003 0301 	and.w	r3, r3, #1
 8018348:	2b00      	cmp	r3, #0
 801834a:	bf0c      	ite	eq
 801834c:	2301      	moveq	r3, #1
 801834e:	2300      	movne	r3, #0
 8018350:	b2db      	uxtb	r3, r3
 8018352:	2b00      	cmp	r3, #0
 8018354:	d02c      	beq.n	80183b0 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x7c>
 8018356:	4818      	ldr	r0, [pc, #96]	; (80183b8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 8018358:	f008 fe64 	bl	8021024 <__cxa_guard_acquire>
 801835c:	4603      	mov	r3, r0
 801835e:	2b00      	cmp	r3, #0
 8018360:	bf14      	ite	ne
 8018362:	2301      	movne	r3, #1
 8018364:	2300      	moveq	r3, #0
 8018366:	b2db      	uxtb	r3, r3
 8018368:	2b00      	cmp	r3, #0
 801836a:	d021      	beq.n	80183b0 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x7c>
 801836c:	2300      	movs	r3, #0
 801836e:	930a      	str	r3, [sp, #40]	; 0x28
 8018370:	2300      	movs	r3, #0
 8018372:	9309      	str	r3, [sp, #36]	; 0x24
 8018374:	2300      	movs	r3, #0
 8018376:	9308      	str	r3, [sp, #32]
 8018378:	233f      	movs	r3, #63	; 0x3f
 801837a:	9307      	str	r3, [sp, #28]
 801837c:	4b0f      	ldr	r3, [pc, #60]	; (80183bc <_Z27getFont_AGENCYB_TTF_50_4bppv+0x88>)
 801837e:	9306      	str	r3, [sp, #24]
 8018380:	4b0f      	ldr	r3, [pc, #60]	; (80183c0 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x8c>)
 8018382:	9305      	str	r3, [sp, #20]
 8018384:	2300      	movs	r3, #0
 8018386:	9304      	str	r3, [sp, #16]
 8018388:	2302      	movs	r3, #2
 801838a:	9303      	str	r3, [sp, #12]
 801838c:	2301      	movs	r3, #1
 801838e:	9302      	str	r3, [sp, #8]
 8018390:	2304      	movs	r3, #4
 8018392:	9301      	str	r3, [sp, #4]
 8018394:	2309      	movs	r3, #9
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	2332      	movs	r3, #50	; 0x32
 801839a:	2243      	movs	r2, #67	; 0x43
 801839c:	4909      	ldr	r1, [pc, #36]	; (80183c4 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x90>)
 801839e:	480a      	ldr	r0, [pc, #40]	; (80183c8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x94>)
 80183a0:	f7ff fd22 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80183a4:	4809      	ldr	r0, [pc, #36]	; (80183cc <_Z27getFont_AGENCYB_TTF_50_4bppv+0x98>)
 80183a6:	f008 fe87 	bl	80210b8 <atexit>
 80183aa:	4803      	ldr	r0, [pc, #12]	; (80183b8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x84>)
 80183ac:	f008 fe46 	bl	802103c <__cxa_guard_release>
    return AGENCYB_TTF_50_4bpp;
 80183b0:	4b05      	ldr	r3, [pc, #20]	; (80183c8 <_Z27getFont_AGENCYB_TTF_50_4bppv+0x94>)
}
 80183b2:	4618      	mov	r0, r3
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}
 80183b8:	20005a24 	.word	0x20005a24
 80183bc:	0803d86c 	.word	0x0803d86c
 80183c0:	0803db90 	.word	0x0803db90
 80183c4:	0803ca24 	.word	0x0803ca24
 80183c8:	200059fc 	.word	0x200059fc
 80183cc:	08018325 	.word	0x08018325

080183d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 63, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80183d0:	b580      	push	{r7, lr}
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	4801      	ldr	r0, [pc, #4]	; (80183dc <__tcf_0+0xc>)
 80183d6:	f7ff fcad 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 80183da:	bd80      	pop	{r7, pc}
 80183dc:	20005a28 	.word	0x20005a28

080183e0 <_Z23getFont_verdana_10_4bppv>:
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b08c      	sub	sp, #48	; 0x30
 80183e4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 63, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80183e6:	4b1f      	ldr	r3, [pc, #124]	; (8018464 <_Z23getFont_verdana_10_4bppv+0x84>)
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	f3bf 8f5b 	dmb	ish
 80183ee:	b2db      	uxtb	r3, r3
 80183f0:	f003 0301 	and.w	r3, r3, #1
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	bf0c      	ite	eq
 80183f8:	2301      	moveq	r3, #1
 80183fa:	2300      	movne	r3, #0
 80183fc:	b2db      	uxtb	r3, r3
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d02c      	beq.n	801845c <_Z23getFont_verdana_10_4bppv+0x7c>
 8018402:	4818      	ldr	r0, [pc, #96]	; (8018464 <_Z23getFont_verdana_10_4bppv+0x84>)
 8018404:	f008 fe0e 	bl	8021024 <__cxa_guard_acquire>
 8018408:	4603      	mov	r3, r0
 801840a:	2b00      	cmp	r3, #0
 801840c:	bf14      	ite	ne
 801840e:	2301      	movne	r3, #1
 8018410:	2300      	moveq	r3, #0
 8018412:	b2db      	uxtb	r3, r3
 8018414:	2b00      	cmp	r3, #0
 8018416:	d021      	beq.n	801845c <_Z23getFont_verdana_10_4bppv+0x7c>
 8018418:	2300      	movs	r3, #0
 801841a:	930a      	str	r3, [sp, #40]	; 0x28
 801841c:	2300      	movs	r3, #0
 801841e:	9309      	str	r3, [sp, #36]	; 0x24
 8018420:	2300      	movs	r3, #0
 8018422:	9308      	str	r3, [sp, #32]
 8018424:	233f      	movs	r3, #63	; 0x3f
 8018426:	9307      	str	r3, [sp, #28]
 8018428:	4b0f      	ldr	r3, [pc, #60]	; (8018468 <_Z23getFont_verdana_10_4bppv+0x88>)
 801842a:	9306      	str	r3, [sp, #24]
 801842c:	4b0f      	ldr	r3, [pc, #60]	; (801846c <_Z23getFont_verdana_10_4bppv+0x8c>)
 801842e:	9305      	str	r3, [sp, #20]
 8018430:	2301      	movs	r3, #1
 8018432:	9304      	str	r3, [sp, #16]
 8018434:	2301      	movs	r3, #1
 8018436:	9303      	str	r3, [sp, #12]
 8018438:	2301      	movs	r3, #1
 801843a:	9302      	str	r3, [sp, #8]
 801843c:	2304      	movs	r3, #4
 801843e:	9301      	str	r3, [sp, #4]
 8018440:	2302      	movs	r3, #2
 8018442:	9300      	str	r3, [sp, #0]
 8018444:	230a      	movs	r3, #10
 8018446:	223f      	movs	r2, #63	; 0x3f
 8018448:	4909      	ldr	r1, [pc, #36]	; (8018470 <_Z23getFont_verdana_10_4bppv+0x90>)
 801844a:	480a      	ldr	r0, [pc, #40]	; (8018474 <_Z23getFont_verdana_10_4bppv+0x94>)
 801844c:	f7ff fccc 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8018450:	4809      	ldr	r0, [pc, #36]	; (8018478 <_Z23getFont_verdana_10_4bppv+0x98>)
 8018452:	f008 fe31 	bl	80210b8 <atexit>
 8018456:	4803      	ldr	r0, [pc, #12]	; (8018464 <_Z23getFont_verdana_10_4bppv+0x84>)
 8018458:	f008 fdf0 	bl	802103c <__cxa_guard_release>
    return verdana_10_4bpp;
 801845c:	4b05      	ldr	r3, [pc, #20]	; (8018474 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 801845e:	4618      	mov	r0, r3
 8018460:	46bd      	mov	sp, r7
 8018462:	bd80      	pop	{r7, pc}
 8018464:	20005a50 	.word	0x20005a50
 8018468:	0803d870 	.word	0x0803d870
 801846c:	0803db94 	.word	0x0803db94
 8018470:	0803cdd0 	.word	0x0803cdd0
 8018474:	20005a28 	.word	0x20005a28
 8018478:	080183d1 	.word	0x080183d1

0801847c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 801847c:	b580      	push	{r7, lr}
 801847e:	af00      	add	r7, sp, #0
 8018480:	4801      	ldr	r0, [pc, #4]	; (8018488 <__tcf_0+0xc>)
 8018482:	f7ff fc57 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 8018486:	bd80      	pop	{r7, pc}
 8018488:	20005a54 	.word	0x20005a54

0801848c <_Z23getFont_verdana_20_4bppv>:
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b08c      	sub	sp, #48	; 0x30
 8018490:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8018492:	4b1f      	ldr	r3, [pc, #124]	; (8018510 <_Z23getFont_verdana_20_4bppv+0x84>)
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	f3bf 8f5b 	dmb	ish
 801849a:	b2db      	uxtb	r3, r3
 801849c:	f003 0301 	and.w	r3, r3, #1
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	bf0c      	ite	eq
 80184a4:	2301      	moveq	r3, #1
 80184a6:	2300      	movne	r3, #0
 80184a8:	b2db      	uxtb	r3, r3
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d02c      	beq.n	8018508 <_Z23getFont_verdana_20_4bppv+0x7c>
 80184ae:	4818      	ldr	r0, [pc, #96]	; (8018510 <_Z23getFont_verdana_20_4bppv+0x84>)
 80184b0:	f008 fdb8 	bl	8021024 <__cxa_guard_acquire>
 80184b4:	4603      	mov	r3, r0
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	bf14      	ite	ne
 80184ba:	2301      	movne	r3, #1
 80184bc:	2300      	moveq	r3, #0
 80184be:	b2db      	uxtb	r3, r3
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d021      	beq.n	8018508 <_Z23getFont_verdana_20_4bppv+0x7c>
 80184c4:	2300      	movs	r3, #0
 80184c6:	930a      	str	r3, [sp, #40]	; 0x28
 80184c8:	2300      	movs	r3, #0
 80184ca:	9309      	str	r3, [sp, #36]	; 0x24
 80184cc:	2300      	movs	r3, #0
 80184ce:	9308      	str	r3, [sp, #32]
 80184d0:	233f      	movs	r3, #63	; 0x3f
 80184d2:	9307      	str	r3, [sp, #28]
 80184d4:	4b0f      	ldr	r3, [pc, #60]	; (8018514 <_Z23getFont_verdana_20_4bppv+0x88>)
 80184d6:	9306      	str	r3, [sp, #24]
 80184d8:	4b0f      	ldr	r3, [pc, #60]	; (8018518 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80184da:	9305      	str	r3, [sp, #20]
 80184dc:	2301      	movs	r3, #1
 80184de:	9304      	str	r3, [sp, #16]
 80184e0:	2301      	movs	r3, #1
 80184e2:	9303      	str	r3, [sp, #12]
 80184e4:	2301      	movs	r3, #1
 80184e6:	9302      	str	r3, [sp, #8]
 80184e8:	2304      	movs	r3, #4
 80184ea:	9301      	str	r3, [sp, #4]
 80184ec:	2304      	movs	r3, #4
 80184ee:	9300      	str	r3, [sp, #0]
 80184f0:	2314      	movs	r3, #20
 80184f2:	2242      	movs	r2, #66	; 0x42
 80184f4:	4909      	ldr	r1, [pc, #36]	; (801851c <_Z23getFont_verdana_20_4bppv+0x90>)
 80184f6:	480a      	ldr	r0, [pc, #40]	; (8018520 <_Z23getFont_verdana_20_4bppv+0x94>)
 80184f8:	f7ff fc76 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80184fc:	4809      	ldr	r0, [pc, #36]	; (8018524 <_Z23getFont_verdana_20_4bppv+0x98>)
 80184fe:	f008 fddb 	bl	80210b8 <atexit>
 8018502:	4803      	ldr	r0, [pc, #12]	; (8018510 <_Z23getFont_verdana_20_4bppv+0x84>)
 8018504:	f008 fd9a 	bl	802103c <__cxa_guard_release>
    return verdana_20_4bpp;
 8018508:	4b05      	ldr	r3, [pc, #20]	; (8018520 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 801850a:	4618      	mov	r0, r3
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}
 8018510:	20005a7c 	.word	0x20005a7c
 8018514:	0803d874 	.word	0x0803d874
 8018518:	0803db98 	.word	0x0803db98
 801851c:	0803d144 	.word	0x0803d144
 8018520:	20005a54 	.word	0x20005a54
 8018524:	0801847d 	.word	0x0801847d

08018528 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 63, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8018528:	b580      	push	{r7, lr}
 801852a:	af00      	add	r7, sp, #0
 801852c:	4801      	ldr	r0, [pc, #4]	; (8018534 <__tcf_0+0xc>)
 801852e:	f7ff fc01 	bl	8017d34 <_ZN8touchgfx13GeneratedFontD1Ev>
 8018532:	bd80      	pop	{r7, pc}
 8018534:	20005a80 	.word	0x20005a80

08018538 <_Z23getFont_verdana_40_4bppv>:
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b08c      	sub	sp, #48	; 0x30
 801853c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 63, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 801853e:	4b1f      	ldr	r3, [pc, #124]	; (80185bc <_Z23getFont_verdana_40_4bppv+0x84>)
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	f3bf 8f5b 	dmb	ish
 8018546:	b2db      	uxtb	r3, r3
 8018548:	f003 0301 	and.w	r3, r3, #1
 801854c:	2b00      	cmp	r3, #0
 801854e:	bf0c      	ite	eq
 8018550:	2301      	moveq	r3, #1
 8018552:	2300      	movne	r3, #0
 8018554:	b2db      	uxtb	r3, r3
 8018556:	2b00      	cmp	r3, #0
 8018558:	d02c      	beq.n	80185b4 <_Z23getFont_verdana_40_4bppv+0x7c>
 801855a:	4818      	ldr	r0, [pc, #96]	; (80185bc <_Z23getFont_verdana_40_4bppv+0x84>)
 801855c:	f008 fd62 	bl	8021024 <__cxa_guard_acquire>
 8018560:	4603      	mov	r3, r0
 8018562:	2b00      	cmp	r3, #0
 8018564:	bf14      	ite	ne
 8018566:	2301      	movne	r3, #1
 8018568:	2300      	moveq	r3, #0
 801856a:	b2db      	uxtb	r3, r3
 801856c:	2b00      	cmp	r3, #0
 801856e:	d021      	beq.n	80185b4 <_Z23getFont_verdana_40_4bppv+0x7c>
 8018570:	2300      	movs	r3, #0
 8018572:	930a      	str	r3, [sp, #40]	; 0x28
 8018574:	2300      	movs	r3, #0
 8018576:	9309      	str	r3, [sp, #36]	; 0x24
 8018578:	2300      	movs	r3, #0
 801857a:	9308      	str	r3, [sp, #32]
 801857c:	233f      	movs	r3, #63	; 0x3f
 801857e:	9307      	str	r3, [sp, #28]
 8018580:	4b0f      	ldr	r3, [pc, #60]	; (80185c0 <_Z23getFont_verdana_40_4bppv+0x88>)
 8018582:	9306      	str	r3, [sp, #24]
 8018584:	4b0f      	ldr	r3, [pc, #60]	; (80185c4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8018586:	9305      	str	r3, [sp, #20]
 8018588:	2302      	movs	r3, #2
 801858a:	9304      	str	r3, [sp, #16]
 801858c:	2302      	movs	r3, #2
 801858e:	9303      	str	r3, [sp, #12]
 8018590:	2301      	movs	r3, #1
 8018592:	9302      	str	r3, [sp, #8]
 8018594:	2304      	movs	r3, #4
 8018596:	9301      	str	r3, [sp, #4]
 8018598:	2308      	movs	r3, #8
 801859a:	9300      	str	r3, [sp, #0]
 801859c:	2328      	movs	r3, #40	; 0x28
 801859e:	223f      	movs	r2, #63	; 0x3f
 80185a0:	4909      	ldr	r1, [pc, #36]	; (80185c8 <_Z23getFont_verdana_40_4bppv+0x90>)
 80185a2:	480a      	ldr	r0, [pc, #40]	; (80185cc <_Z23getFont_verdana_40_4bppv+0x94>)
 80185a4:	f7ff fc20 	bl	8017de8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80185a8:	4809      	ldr	r0, [pc, #36]	; (80185d0 <_Z23getFont_verdana_40_4bppv+0x98>)
 80185aa:	f008 fd85 	bl	80210b8 <atexit>
 80185ae:	4803      	ldr	r0, [pc, #12]	; (80185bc <_Z23getFont_verdana_40_4bppv+0x84>)
 80185b0:	f008 fd44 	bl	802103c <__cxa_guard_release>
    return verdana_40_4bpp;
 80185b4:	4b05      	ldr	r3, [pc, #20]	; (80185cc <_Z23getFont_verdana_40_4bppv+0x94>)
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}
 80185bc:	20005aa8 	.word	0x20005aa8
 80185c0:	0803d9b0 	.word	0x0803d9b0
 80185c4:	0803db9c 	.word	0x0803db9c
 80185c8:	0803d4e0 	.word	0x0803d4e0
 80185cc:	20005a80 	.word	0x20005a80
 80185d0:	08018529 	.word	0x08018529

080185d4 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80185d4:	b480      	push	{r7}
 80185d6:	b083      	sub	sp, #12
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
        : color(0)
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	2200      	movs	r2, #0
 80185e0:	601a      	str	r2, [r3, #0]
    {
    }
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	4618      	mov	r0, r3
 80185e6:	370c      	adds	r7, #12
 80185e8:	46bd      	mov	sp, r7
 80185ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ee:	4770      	bx	lr

080185f0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 80185f0:	b480      	push	{r7}
 80185f2:	b083      	sub	sp, #12
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
 80185f8:	6039      	str	r1, [r7, #0]
        : color(col)
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	683a      	ldr	r2, [r7, #0]
 80185fe:	601a      	str	r2, [r3, #0]
    {
    }
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	4618      	mov	r0, r3
 8018604:	370c      	adds	r7, #12
 8018606:	46bd      	mov	sp, r7
 8018608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860c:	4770      	bx	lr

0801860e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801860e:	b480      	push	{r7}
 8018610:	b083      	sub	sp, #12
 8018612:	af00      	add	r7, sp, #0
 8018614:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	2200      	movs	r2, #0
 801861a:	801a      	strh	r2, [r3, #0]
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2200      	movs	r2, #0
 8018620:	805a      	strh	r2, [r3, #2]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	2200      	movs	r2, #0
 8018626:	809a      	strh	r2, [r3, #4]
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	2200      	movs	r2, #0
 801862c:	80da      	strh	r2, [r3, #6]
    {
    }
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	4618      	mov	r0, r3
 8018632:	370c      	adds	r7, #12
 8018634:	46bd      	mov	sp, r7
 8018636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863a:	4770      	bx	lr

0801863c <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 801863c:	b480      	push	{r7}
 801863e:	b085      	sub	sp, #20
 8018640:	af00      	add	r7, sp, #0
 8018642:	60f8      	str	r0, [r7, #12]
 8018644:	4608      	mov	r0, r1
 8018646:	4611      	mov	r1, r2
 8018648:	461a      	mov	r2, r3
 801864a:	4603      	mov	r3, r0
 801864c:	817b      	strh	r3, [r7, #10]
 801864e:	460b      	mov	r3, r1
 8018650:	813b      	strh	r3, [r7, #8]
 8018652:	4613      	mov	r3, r2
 8018654:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	897a      	ldrh	r2, [r7, #10]
 801865a:	801a      	strh	r2, [r3, #0]
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	893a      	ldrh	r2, [r7, #8]
 8018660:	805a      	strh	r2, [r3, #2]
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	88fa      	ldrh	r2, [r7, #6]
 8018666:	809a      	strh	r2, [r3, #4]
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	8b3a      	ldrh	r2, [r7, #24]
 801866c:	80da      	strh	r2, [r3, #6]
    {
    }
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	4618      	mov	r0, r3
 8018672:	3714      	adds	r7, #20
 8018674:	46bd      	mov	sp, r7
 8018676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867a:	4770      	bx	lr

0801867c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 801867c:	b580      	push	{r7, lr}
 801867e:	b082      	sub	sp, #8
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	460b      	mov	r3, r1
 8018686:	807b      	strh	r3, [r7, #2]
 8018688:	4613      	mov	r3, r2
 801868a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	3330      	adds	r3, #48	; 0x30
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018698:	4611      	mov	r1, r2
 801869a:	6878      	ldr	r0, [r7, #4]
 801869c:	4798      	blx	r3
        setY(y);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	3334      	adds	r3, #52	; 0x34
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80186aa:	4611      	mov	r1, r2
 80186ac:	6878      	ldr	r0, [r7, #4]
 80186ae:	4798      	blx	r3
    }
 80186b0:	bf00      	nop
 80186b2:	3708      	adds	r7, #8
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80186b8:	b480      	push	{r7}
 80186ba:	b083      	sub	sp, #12
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	460b      	mov	r3, r1
 80186c2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80186c4:	4a06      	ldr	r2, [pc, #24]	; (80186e0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	601a      	str	r2, [r3, #0]
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	887a      	ldrh	r2, [r7, #2]
 80186ce:	809a      	strh	r2, [r3, #4]
    }
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	4618      	mov	r0, r3
 80186d4:	370c      	adds	r7, #12
 80186d6:	46bd      	mov	sp, r7
 80186d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186dc:	4770      	bx	lr
 80186de:	bf00      	nop
 80186e0:	08024934 	.word	0x08024934

080186e4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80186e4:	b480      	push	{r7}
 80186e6:	af00      	add	r7, sp, #0
    {
        return instance;
 80186e8:	4b03      	ldr	r3, [pc, #12]	; (80186f8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80186ea:	681b      	ldr	r3, [r3, #0]
    }
 80186ec:	4618      	mov	r0, r3
 80186ee:	46bd      	mov	sp, r7
 80186f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f4:	4770      	bx	lr
 80186f6:	bf00      	nop
 80186f8:	20007318 	.word	0x20007318

080186fc <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80186fc:	b480      	push	{r7}
 80186fe:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8018700:	4b0b      	ldr	r3, [pc, #44]	; (8018730 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8018708:	2b00      	cmp	r3, #0
 801870a:	d008      	beq.n	801871e <_ZN8touchgfx3HAL3lcdEv+0x22>
 801870c:	4b08      	ldr	r3, [pc, #32]	; (8018730 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018712:	2b00      	cmp	r3, #0
 8018714:	d003      	beq.n	801871e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8018716:	4b06      	ldr	r3, [pc, #24]	; (8018730 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801871c:	e002      	b.n	8018724 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 801871e:	4b04      	ldr	r3, [pc, #16]	; (8018730 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	689b      	ldr	r3, [r3, #8]
    }
 8018724:	4618      	mov	r0, r3
 8018726:	46bd      	mov	sp, r7
 8018728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801872c:	4770      	bx	lr
 801872e:	bf00      	nop
 8018730:	20007318 	.word	0x20007318

08018734 <_ZN8touchgfx8Keyboard6LayoutD1Ev>:

    /**
     * Definition of the keyboard layout. The keyboard can handle changing layouts, so
     * different keyboard modes can be implemented by changing layouts and key mappings.
     */
    struct Layout
 8018734:	b580      	push	{r7, lr}
 8018736:	b082      	sub	sp, #8
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	331c      	adds	r3, #28
 8018740:	4618      	mov	r0, r3
 8018742:	f7ff fb19 	bl	8017d78 <_ZN8touchgfx9TypedTextD1Ev>
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	4618      	mov	r0, r3
 801874a:	3708      	adds	r7, #8
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}

08018750 <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotoSyringeSelectionScreenWipeTransitionSouthImpl()
{
    touchgfx::makeTransition<SyringeSelectionView, SyringeSelectionPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 8018750:	b590      	push	{r4, r7, lr}
 8018752:	b085      	sub	sp, #20
 8018754:	af02      	add	r7, sp, #8
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	6039      	str	r1, [r7, #0]
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	2b01      	cmp	r3, #1
 801875e:	f040 81d3 	bne.w	8018b08 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8018762:	683b      	ldr	r3, [r7, #0]
 8018764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018768:	4293      	cmp	r3, r2
 801876a:	f040 81cd 	bne.w	8018b08 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
    {26, Rect(63 + 28 * 3, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(63 + 28 * 4, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(63 + 28 * 5, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(63 + 28 * 6, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(62, 193, 252, 40), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};
 801876e:	4cda      	ldr	r4, [pc, #872]	; (8018ad8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8018770:	2301      	movs	r3, #1
 8018772:	7023      	strb	r3, [r4, #0]
 8018774:	1ca0      	adds	r0, r4, #2
 8018776:	2328      	movs	r3, #40	; 0x28
 8018778:	9300      	str	r3, [sp, #0]
 801877a:	231a      	movs	r3, #26
 801877c:	223d      	movs	r2, #61	; 0x3d
 801877e:	2107      	movs	r1, #7
 8018780:	f7ff ff5c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018784:	2328      	movs	r3, #40	; 0x28
 8018786:	8163      	strh	r3, [r4, #10]
 8018788:	340c      	adds	r4, #12
 801878a:	2302      	movs	r3, #2
 801878c:	7023      	strb	r3, [r4, #0]
 801878e:	1ca0      	adds	r0, r4, #2
 8018790:	2328      	movs	r3, #40	; 0x28
 8018792:	9300      	str	r3, [sp, #0]
 8018794:	231a      	movs	r3, #26
 8018796:	223d      	movs	r2, #61	; 0x3d
 8018798:	2123      	movs	r1, #35	; 0x23
 801879a:	f7ff ff4f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801879e:	2328      	movs	r3, #40	; 0x28
 80187a0:	8163      	strh	r3, [r4, #10]
 80187a2:	340c      	adds	r4, #12
 80187a4:	2303      	movs	r3, #3
 80187a6:	7023      	strb	r3, [r4, #0]
 80187a8:	1ca0      	adds	r0, r4, #2
 80187aa:	2328      	movs	r3, #40	; 0x28
 80187ac:	9300      	str	r3, [sp, #0]
 80187ae:	231a      	movs	r3, #26
 80187b0:	223d      	movs	r2, #61	; 0x3d
 80187b2:	213f      	movs	r1, #63	; 0x3f
 80187b4:	f7ff ff42 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80187b8:	2328      	movs	r3, #40	; 0x28
 80187ba:	8163      	strh	r3, [r4, #10]
 80187bc:	340c      	adds	r4, #12
 80187be:	2304      	movs	r3, #4
 80187c0:	7023      	strb	r3, [r4, #0]
 80187c2:	1ca0      	adds	r0, r4, #2
 80187c4:	2328      	movs	r3, #40	; 0x28
 80187c6:	9300      	str	r3, [sp, #0]
 80187c8:	231a      	movs	r3, #26
 80187ca:	223d      	movs	r2, #61	; 0x3d
 80187cc:	215b      	movs	r1, #91	; 0x5b
 80187ce:	f7ff ff35 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80187d2:	2328      	movs	r3, #40	; 0x28
 80187d4:	8163      	strh	r3, [r4, #10]
 80187d6:	340c      	adds	r4, #12
 80187d8:	2305      	movs	r3, #5
 80187da:	7023      	strb	r3, [r4, #0]
 80187dc:	1ca0      	adds	r0, r4, #2
 80187de:	2328      	movs	r3, #40	; 0x28
 80187e0:	9300      	str	r3, [sp, #0]
 80187e2:	231a      	movs	r3, #26
 80187e4:	223d      	movs	r2, #61	; 0x3d
 80187e6:	2177      	movs	r1, #119	; 0x77
 80187e8:	f7ff ff28 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80187ec:	2328      	movs	r3, #40	; 0x28
 80187ee:	8163      	strh	r3, [r4, #10]
 80187f0:	340c      	adds	r4, #12
 80187f2:	2306      	movs	r3, #6
 80187f4:	7023      	strb	r3, [r4, #0]
 80187f6:	1ca0      	adds	r0, r4, #2
 80187f8:	2328      	movs	r3, #40	; 0x28
 80187fa:	9300      	str	r3, [sp, #0]
 80187fc:	231a      	movs	r3, #26
 80187fe:	223d      	movs	r2, #61	; 0x3d
 8018800:	2193      	movs	r1, #147	; 0x93
 8018802:	f7ff ff1b 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018806:	2328      	movs	r3, #40	; 0x28
 8018808:	8163      	strh	r3, [r4, #10]
 801880a:	340c      	adds	r4, #12
 801880c:	2307      	movs	r3, #7
 801880e:	7023      	strb	r3, [r4, #0]
 8018810:	1ca0      	adds	r0, r4, #2
 8018812:	2328      	movs	r3, #40	; 0x28
 8018814:	9300      	str	r3, [sp, #0]
 8018816:	231a      	movs	r3, #26
 8018818:	223d      	movs	r2, #61	; 0x3d
 801881a:	21af      	movs	r1, #175	; 0xaf
 801881c:	f7ff ff0e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018820:	2328      	movs	r3, #40	; 0x28
 8018822:	8163      	strh	r3, [r4, #10]
 8018824:	340c      	adds	r4, #12
 8018826:	2308      	movs	r3, #8
 8018828:	7023      	strb	r3, [r4, #0]
 801882a:	1ca0      	adds	r0, r4, #2
 801882c:	2328      	movs	r3, #40	; 0x28
 801882e:	9300      	str	r3, [sp, #0]
 8018830:	231a      	movs	r3, #26
 8018832:	223d      	movs	r2, #61	; 0x3d
 8018834:	21cb      	movs	r1, #203	; 0xcb
 8018836:	f7ff ff01 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801883a:	2328      	movs	r3, #40	; 0x28
 801883c:	8163      	strh	r3, [r4, #10]
 801883e:	340c      	adds	r4, #12
 8018840:	2309      	movs	r3, #9
 8018842:	7023      	strb	r3, [r4, #0]
 8018844:	1ca0      	adds	r0, r4, #2
 8018846:	2328      	movs	r3, #40	; 0x28
 8018848:	9300      	str	r3, [sp, #0]
 801884a:	231a      	movs	r3, #26
 801884c:	223d      	movs	r2, #61	; 0x3d
 801884e:	21e7      	movs	r1, #231	; 0xe7
 8018850:	f7ff fef4 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018854:	2328      	movs	r3, #40	; 0x28
 8018856:	8163      	strh	r3, [r4, #10]
 8018858:	340c      	adds	r4, #12
 801885a:	230a      	movs	r3, #10
 801885c:	7023      	strb	r3, [r4, #0]
 801885e:	1ca0      	adds	r0, r4, #2
 8018860:	2328      	movs	r3, #40	; 0x28
 8018862:	9300      	str	r3, [sp, #0]
 8018864:	231a      	movs	r3, #26
 8018866:	223d      	movs	r2, #61	; 0x3d
 8018868:	f240 1103 	movw	r1, #259	; 0x103
 801886c:	f7ff fee6 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018870:	2328      	movs	r3, #40	; 0x28
 8018872:	8163      	strh	r3, [r4, #10]
 8018874:	340c      	adds	r4, #12
 8018876:	230b      	movs	r3, #11
 8018878:	7023      	strb	r3, [r4, #0]
 801887a:	1ca0      	adds	r0, r4, #2
 801887c:	2328      	movs	r3, #40	; 0x28
 801887e:	9300      	str	r3, [sp, #0]
 8018880:	231a      	movs	r3, #26
 8018882:	223d      	movs	r2, #61	; 0x3d
 8018884:	f240 111f 	movw	r1, #287	; 0x11f
 8018888:	f7ff fed8 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801888c:	2328      	movs	r3, #40	; 0x28
 801888e:	8163      	strh	r3, [r4, #10]
 8018890:	340c      	adds	r4, #12
 8018892:	230c      	movs	r3, #12
 8018894:	7023      	strb	r3, [r4, #0]
 8018896:	1ca0      	adds	r0, r4, #2
 8018898:	2328      	movs	r3, #40	; 0x28
 801889a:	9300      	str	r3, [sp, #0]
 801889c:	231a      	movs	r3, #26
 801889e:	2269      	movs	r2, #105	; 0x69
 80188a0:	2107      	movs	r1, #7
 80188a2:	f7ff fecb 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80188a6:	2328      	movs	r3, #40	; 0x28
 80188a8:	8163      	strh	r3, [r4, #10]
 80188aa:	340c      	adds	r4, #12
 80188ac:	230d      	movs	r3, #13
 80188ae:	7023      	strb	r3, [r4, #0]
 80188b0:	1ca0      	adds	r0, r4, #2
 80188b2:	2328      	movs	r3, #40	; 0x28
 80188b4:	9300      	str	r3, [sp, #0]
 80188b6:	231a      	movs	r3, #26
 80188b8:	2269      	movs	r2, #105	; 0x69
 80188ba:	2123      	movs	r1, #35	; 0x23
 80188bc:	f7ff febe 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80188c0:	2328      	movs	r3, #40	; 0x28
 80188c2:	8163      	strh	r3, [r4, #10]
 80188c4:	340c      	adds	r4, #12
 80188c6:	230e      	movs	r3, #14
 80188c8:	7023      	strb	r3, [r4, #0]
 80188ca:	1ca0      	adds	r0, r4, #2
 80188cc:	2328      	movs	r3, #40	; 0x28
 80188ce:	9300      	str	r3, [sp, #0]
 80188d0:	231a      	movs	r3, #26
 80188d2:	2269      	movs	r2, #105	; 0x69
 80188d4:	213f      	movs	r1, #63	; 0x3f
 80188d6:	f7ff feb1 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80188da:	2328      	movs	r3, #40	; 0x28
 80188dc:	8163      	strh	r3, [r4, #10]
 80188de:	340c      	adds	r4, #12
 80188e0:	230f      	movs	r3, #15
 80188e2:	7023      	strb	r3, [r4, #0]
 80188e4:	1ca0      	adds	r0, r4, #2
 80188e6:	2328      	movs	r3, #40	; 0x28
 80188e8:	9300      	str	r3, [sp, #0]
 80188ea:	231a      	movs	r3, #26
 80188ec:	2269      	movs	r2, #105	; 0x69
 80188ee:	215b      	movs	r1, #91	; 0x5b
 80188f0:	f7ff fea4 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80188f4:	2328      	movs	r3, #40	; 0x28
 80188f6:	8163      	strh	r3, [r4, #10]
 80188f8:	340c      	adds	r4, #12
 80188fa:	2310      	movs	r3, #16
 80188fc:	7023      	strb	r3, [r4, #0]
 80188fe:	1ca0      	adds	r0, r4, #2
 8018900:	2328      	movs	r3, #40	; 0x28
 8018902:	9300      	str	r3, [sp, #0]
 8018904:	231a      	movs	r3, #26
 8018906:	2269      	movs	r2, #105	; 0x69
 8018908:	2177      	movs	r1, #119	; 0x77
 801890a:	f7ff fe97 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801890e:	2328      	movs	r3, #40	; 0x28
 8018910:	8163      	strh	r3, [r4, #10]
 8018912:	340c      	adds	r4, #12
 8018914:	2311      	movs	r3, #17
 8018916:	7023      	strb	r3, [r4, #0]
 8018918:	1ca0      	adds	r0, r4, #2
 801891a:	2328      	movs	r3, #40	; 0x28
 801891c:	9300      	str	r3, [sp, #0]
 801891e:	231a      	movs	r3, #26
 8018920:	2269      	movs	r2, #105	; 0x69
 8018922:	2193      	movs	r1, #147	; 0x93
 8018924:	f7ff fe8a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018928:	2328      	movs	r3, #40	; 0x28
 801892a:	8163      	strh	r3, [r4, #10]
 801892c:	340c      	adds	r4, #12
 801892e:	2312      	movs	r3, #18
 8018930:	7023      	strb	r3, [r4, #0]
 8018932:	1ca0      	adds	r0, r4, #2
 8018934:	2328      	movs	r3, #40	; 0x28
 8018936:	9300      	str	r3, [sp, #0]
 8018938:	231a      	movs	r3, #26
 801893a:	2269      	movs	r2, #105	; 0x69
 801893c:	21af      	movs	r1, #175	; 0xaf
 801893e:	f7ff fe7d 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018942:	2328      	movs	r3, #40	; 0x28
 8018944:	8163      	strh	r3, [r4, #10]
 8018946:	340c      	adds	r4, #12
 8018948:	2313      	movs	r3, #19
 801894a:	7023      	strb	r3, [r4, #0]
 801894c:	1ca0      	adds	r0, r4, #2
 801894e:	2328      	movs	r3, #40	; 0x28
 8018950:	9300      	str	r3, [sp, #0]
 8018952:	231a      	movs	r3, #26
 8018954:	2269      	movs	r2, #105	; 0x69
 8018956:	21cb      	movs	r1, #203	; 0xcb
 8018958:	f7ff fe70 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801895c:	2328      	movs	r3, #40	; 0x28
 801895e:	8163      	strh	r3, [r4, #10]
 8018960:	340c      	adds	r4, #12
 8018962:	2314      	movs	r3, #20
 8018964:	7023      	strb	r3, [r4, #0]
 8018966:	1ca0      	adds	r0, r4, #2
 8018968:	2328      	movs	r3, #40	; 0x28
 801896a:	9300      	str	r3, [sp, #0]
 801896c:	231a      	movs	r3, #26
 801896e:	2269      	movs	r2, #105	; 0x69
 8018970:	21e7      	movs	r1, #231	; 0xe7
 8018972:	f7ff fe63 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018976:	2328      	movs	r3, #40	; 0x28
 8018978:	8163      	strh	r3, [r4, #10]
 801897a:	340c      	adds	r4, #12
 801897c:	2315      	movs	r3, #21
 801897e:	7023      	strb	r3, [r4, #0]
 8018980:	1ca0      	adds	r0, r4, #2
 8018982:	2328      	movs	r3, #40	; 0x28
 8018984:	9300      	str	r3, [sp, #0]
 8018986:	231a      	movs	r3, #26
 8018988:	2269      	movs	r2, #105	; 0x69
 801898a:	f240 1103 	movw	r1, #259	; 0x103
 801898e:	f7ff fe55 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018992:	2328      	movs	r3, #40	; 0x28
 8018994:	8163      	strh	r3, [r4, #10]
 8018996:	340c      	adds	r4, #12
 8018998:	2316      	movs	r3, #22
 801899a:	7023      	strb	r3, [r4, #0]
 801899c:	1ca0      	adds	r0, r4, #2
 801899e:	2328      	movs	r3, #40	; 0x28
 80189a0:	9300      	str	r3, [sp, #0]
 80189a2:	231a      	movs	r3, #26
 80189a4:	2269      	movs	r2, #105	; 0x69
 80189a6:	f240 111f 	movw	r1, #287	; 0x11f
 80189aa:	f7ff fe47 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80189ae:	2328      	movs	r3, #40	; 0x28
 80189b0:	8163      	strh	r3, [r4, #10]
 80189b2:	340c      	adds	r4, #12
 80189b4:	2317      	movs	r3, #23
 80189b6:	7023      	strb	r3, [r4, #0]
 80189b8:	1ca0      	adds	r0, r4, #2
 80189ba:	2328      	movs	r3, #40	; 0x28
 80189bc:	9300      	str	r3, [sp, #0]
 80189be:	231a      	movs	r3, #26
 80189c0:	2295      	movs	r2, #149	; 0x95
 80189c2:	213f      	movs	r1, #63	; 0x3f
 80189c4:	f7ff fe3a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80189c8:	2328      	movs	r3, #40	; 0x28
 80189ca:	8163      	strh	r3, [r4, #10]
 80189cc:	340c      	adds	r4, #12
 80189ce:	2318      	movs	r3, #24
 80189d0:	7023      	strb	r3, [r4, #0]
 80189d2:	1ca0      	adds	r0, r4, #2
 80189d4:	2328      	movs	r3, #40	; 0x28
 80189d6:	9300      	str	r3, [sp, #0]
 80189d8:	231a      	movs	r3, #26
 80189da:	2295      	movs	r2, #149	; 0x95
 80189dc:	215b      	movs	r1, #91	; 0x5b
 80189de:	f7ff fe2d 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80189e2:	2328      	movs	r3, #40	; 0x28
 80189e4:	8163      	strh	r3, [r4, #10]
 80189e6:	340c      	adds	r4, #12
 80189e8:	2319      	movs	r3, #25
 80189ea:	7023      	strb	r3, [r4, #0]
 80189ec:	1ca0      	adds	r0, r4, #2
 80189ee:	2328      	movs	r3, #40	; 0x28
 80189f0:	9300      	str	r3, [sp, #0]
 80189f2:	231a      	movs	r3, #26
 80189f4:	2295      	movs	r2, #149	; 0x95
 80189f6:	2177      	movs	r1, #119	; 0x77
 80189f8:	f7ff fe20 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80189fc:	2328      	movs	r3, #40	; 0x28
 80189fe:	8163      	strh	r3, [r4, #10]
 8018a00:	340c      	adds	r4, #12
 8018a02:	231a      	movs	r3, #26
 8018a04:	7023      	strb	r3, [r4, #0]
 8018a06:	1ca0      	adds	r0, r4, #2
 8018a08:	2328      	movs	r3, #40	; 0x28
 8018a0a:	9300      	str	r3, [sp, #0]
 8018a0c:	231a      	movs	r3, #26
 8018a0e:	2295      	movs	r2, #149	; 0x95
 8018a10:	2193      	movs	r1, #147	; 0x93
 8018a12:	f7ff fe13 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018a16:	2328      	movs	r3, #40	; 0x28
 8018a18:	8163      	strh	r3, [r4, #10]
 8018a1a:	340c      	adds	r4, #12
 8018a1c:	231b      	movs	r3, #27
 8018a1e:	7023      	strb	r3, [r4, #0]
 8018a20:	1ca0      	adds	r0, r4, #2
 8018a22:	2328      	movs	r3, #40	; 0x28
 8018a24:	9300      	str	r3, [sp, #0]
 8018a26:	231a      	movs	r3, #26
 8018a28:	2295      	movs	r2, #149	; 0x95
 8018a2a:	21af      	movs	r1, #175	; 0xaf
 8018a2c:	f7ff fe06 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018a30:	2328      	movs	r3, #40	; 0x28
 8018a32:	8163      	strh	r3, [r4, #10]
 8018a34:	340c      	adds	r4, #12
 8018a36:	231c      	movs	r3, #28
 8018a38:	7023      	strb	r3, [r4, #0]
 8018a3a:	1ca0      	adds	r0, r4, #2
 8018a3c:	2328      	movs	r3, #40	; 0x28
 8018a3e:	9300      	str	r3, [sp, #0]
 8018a40:	231a      	movs	r3, #26
 8018a42:	2295      	movs	r2, #149	; 0x95
 8018a44:	21cb      	movs	r1, #203	; 0xcb
 8018a46:	f7ff fdf9 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018a4a:	2328      	movs	r3, #40	; 0x28
 8018a4c:	8163      	strh	r3, [r4, #10]
 8018a4e:	340c      	adds	r4, #12
 8018a50:	231d      	movs	r3, #29
 8018a52:	7023      	strb	r3, [r4, #0]
 8018a54:	1ca0      	adds	r0, r4, #2
 8018a56:	2328      	movs	r3, #40	; 0x28
 8018a58:	9300      	str	r3, [sp, #0]
 8018a5a:	231a      	movs	r3, #26
 8018a5c:	2295      	movs	r2, #149	; 0x95
 8018a5e:	21e7      	movs	r1, #231	; 0xe7
 8018a60:	f7ff fdec 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018a64:	2328      	movs	r3, #40	; 0x28
 8018a66:	8163      	strh	r3, [r4, #10]
 8018a68:	340c      	adds	r4, #12
 8018a6a:	231e      	movs	r3, #30
 8018a6c:	7023      	strb	r3, [r4, #0]
 8018a6e:	1ca0      	adds	r0, r4, #2
 8018a70:	2328      	movs	r3, #40	; 0x28
 8018a72:	9300      	str	r3, [sp, #0]
 8018a74:	23fc      	movs	r3, #252	; 0xfc
 8018a76:	22c1      	movs	r2, #193	; 0xc1
 8018a78:	213e      	movs	r1, #62	; 0x3e
 8018a7a:	f7ff fddf 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018a7e:	232b      	movs	r3, #43	; 0x2b
 8018a80:	8163      	strh	r3, [r4, #10]
static Keyboard::CallbackArea callbackAreas[3] =
{
    {Rect(5, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID},     // caps-lock
    {Rect(258, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID},  // backspace
    {Rect(5, 193, 56, 40), 0, BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID},       // mode
};
 8018a82:	4c16      	ldr	r4, [pc, #88]	; (8018adc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8018a84:	4620      	mov	r0, r4
 8018a86:	2328      	movs	r3, #40	; 0x28
 8018a88:	9300      	str	r3, [sp, #0]
 8018a8a:	2338      	movs	r3, #56	; 0x38
 8018a8c:	2295      	movs	r2, #149	; 0x95
 8018a8e:	2105      	movs	r1, #5
 8018a90:	f7ff fdd4 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018a94:	2300      	movs	r3, #0
 8018a96:	60a3      	str	r3, [r4, #8]
 8018a98:	232a      	movs	r3, #42	; 0x2a
 8018a9a:	81a3      	strh	r3, [r4, #12]
 8018a9c:	3410      	adds	r4, #16
 8018a9e:	4620      	mov	r0, r4
 8018aa0:	2328      	movs	r3, #40	; 0x28
 8018aa2:	9300      	str	r3, [sp, #0]
 8018aa4:	2338      	movs	r3, #56	; 0x38
 8018aa6:	2295      	movs	r2, #149	; 0x95
 8018aa8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8018aac:	f7ff fdc6 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	60a3      	str	r3, [r4, #8]
 8018ab4:	2327      	movs	r3, #39	; 0x27
 8018ab6:	81a3      	strh	r3, [r4, #12]
 8018ab8:	3410      	adds	r4, #16
 8018aba:	4620      	mov	r0, r4
 8018abc:	2328      	movs	r3, #40	; 0x28
 8018abe:	9300      	str	r3, [sp, #0]
 8018ac0:	2338      	movs	r3, #56	; 0x38
 8018ac2:	22c1      	movs	r2, #193	; 0xc1
 8018ac4:	2105      	movs	r1, #5
 8018ac6:	f7ff fdb9 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018aca:	2300      	movs	r3, #0
 8018acc:	60a3      	str	r3, [r4, #8]
 8018ace:	2329      	movs	r3, #41	; 0x29
 8018ad0:	81a3      	strh	r3, [r4, #12]
#else
#error Unknown USE_BPP
#endif
    Typography::KEYBOARD,
    0
};
 8018ad2:	2328      	movs	r3, #40	; 0x28
 8018ad4:	9300      	str	r3, [sp, #0]
 8018ad6:	e003      	b.n	8018ae0 <_Z41__static_initialization_and_destruction_0ii+0x390>
 8018ad8:	20005aac 	.word	0x20005aac
 8018adc:	20005c14 	.word	0x20005c14
 8018ae0:	f44f 739a 	mov.w	r3, #308	; 0x134
 8018ae4:	220a      	movs	r2, #10
 8018ae6:	210f      	movs	r1, #15
 8018ae8:	480f      	ldr	r0, [pc, #60]	; (8018b28 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8018aea:	f7ff fda7 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018aee:	2130      	movs	r1, #48	; 0x30
 8018af0:	480e      	ldr	r0, [pc, #56]	; (8018b2c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8018af2:	f7ff fde1 	bl	80186b8 <_ZN8touchgfx9TypedTextC1Et>
 8018af6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018afa:	480d      	ldr	r0, [pc, #52]	; (8018b30 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8018afc:	f7ff fd78 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
 8018b00:	2100      	movs	r1, #0
 8018b02:	480c      	ldr	r0, [pc, #48]	; (8018b34 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8018b04:	f7ff fd74 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d107      	bne.n	8018b1e <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b14:	4293      	cmp	r3, r2
 8018b16:	d102      	bne.n	8018b1e <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 8018b18:	4807      	ldr	r0, [pc, #28]	; (8018b38 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8018b1a:	f7ff fe0b 	bl	8018734 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 8018b1e:	bf00      	nop
 8018b20:	370c      	adds	r7, #12
 8018b22:	46bd      	mov	sp, r7
 8018b24:	bd90      	pop	{r4, r7, pc}
 8018b26:	bf00      	nop
 8018b28:	20000026 	.word	0x20000026
 8018b2c:	20000030 	.word	0x20000030
 8018b30:	20000038 	.word	0x20000038
 8018b34:	20000040 	.word	0x20000040
 8018b38:	20000014 	.word	0x20000014

08018b3c <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b44:	2001      	movs	r0, #1
 8018b46:	f7ff fe03 	bl	8018750 <_Z41__static_initialization_and_destruction_0ii>
 8018b4a:	bd80      	pop	{r7, pc}

08018b4c <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	af00      	add	r7, sp, #0
 8018b50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b54:	2000      	movs	r0, #0
 8018b56:	f7ff fdfb 	bl	8018750 <_Z41__static_initialization_and_destruction_0ii>
 8018b5a:	bd80      	pop	{r7, pc}

08018b5c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8018b5c:	b480      	push	{r7}
 8018b5e:	b085      	sub	sp, #20
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	60f8      	str	r0, [r7, #12]
 8018b64:	460b      	mov	r3, r1
 8018b66:	607a      	str	r2, [r7, #4]
 8018b68:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8018b6a:	2300      	movs	r3, #0
    }
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	3714      	adds	r7, #20
 8018b70:	46bd      	mov	sp, r7
 8018b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b76:	4770      	bx	lr

08018b78 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8018b78:	b480      	push	{r7}
 8018b7a:	b083      	sub	sp, #12
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8018b80:	2300      	movs	r3, #0
    }
 8018b82:	4618      	mov	r0, r3
 8018b84:	370c      	adds	r7, #12
 8018b86:	46bd      	mov	sp, r7
 8018b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8c:	4770      	bx	lr

08018b8e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8018b8e:	b480      	push	{r7}
 8018b90:	b083      	sub	sp, #12
 8018b92:	af00      	add	r7, sp, #0
 8018b94:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8018b96:	2300      	movs	r3, #0
    }
 8018b98:	4618      	mov	r0, r3
 8018b9a:	370c      	adds	r7, #12
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba2:	4770      	bx	lr

08018ba4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8018ba4:	b40e      	push	{r1, r2, r3}
 8018ba6:	b580      	push	{r7, lr}
 8018ba8:	b085      	sub	sp, #20
 8018baa:	af00      	add	r7, sp, #0
 8018bac:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8018bae:	f107 0320 	add.w	r3, r7, #32
 8018bb2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	69fa      	ldr	r2, [r7, #28]
 8018bb8:	2100      	movs	r1, #0
 8018bba:	6878      	ldr	r0, [r7, #4]
 8018bbc:	f004 feba 	bl	801d934 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8018bc4:	89fb      	ldrh	r3, [r7, #14]
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	3714      	adds	r7, #20
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018bd0:	b003      	add	sp, #12
 8018bd2:	4770      	bx	lr

08018bd4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8018bd4:	b40c      	push	{r2, r3}
 8018bd6:	b580      	push	{r7, lr}
 8018bd8:	b084      	sub	sp, #16
 8018bda:	af00      	add	r7, sp, #0
 8018bdc:	6078      	str	r0, [r7, #4]
 8018bde:	460b      	mov	r3, r1
 8018be0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8018be2:	f107 031c 	add.w	r3, r7, #28
 8018be6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8018be8:	78f9      	ldrb	r1, [r7, #3]
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	69ba      	ldr	r2, [r7, #24]
 8018bee:	6878      	ldr	r0, [r7, #4]
 8018bf0:	f004 fea0 	bl	801d934 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8018bf8:	89fb      	ldrh	r3, [r7, #14]
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3710      	adds	r7, #16
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018c04:	b002      	add	sp, #8
 8018c06:	4770      	bx	lr

08018c08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b08a      	sub	sp, #40	; 0x28
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
 8018c10:	460b      	mov	r3, r1
 8018c12:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d016      	beq.n	8018c4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	3322      	adds	r3, #34	; 0x22
 8018c20:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8018c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c24:	8adb      	ldrh	r3, [r3, #22]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d105      	bne.n	8018c36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8018c2a:	4b43      	ldr	r3, [pc, #268]	; (8018d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8018c2c:	4a43      	ldr	r2, [pc, #268]	; (8018d3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8018c2e:	21c0      	movs	r1, #192	; 0xc0
 8018c30:	4843      	ldr	r0, [pc, #268]	; (8018d40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8018c32:	f008 fa23 	bl	802107c <__assert_func>
            return buffer[pos];
 8018c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c38:	8a9b      	ldrh	r3, [r3, #20]
 8018c3a:	461a      	mov	r2, r3
 8018c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d001      	beq.n	8018c4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8018c46:	2301      	movs	r3, #1
 8018c48:	e000      	b.n	8018c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d06a      	beq.n	8018d26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f005 fd37 	bl	801e6c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	3322      	adds	r3, #34	; 0x22
 8018c5a:	623b      	str	r3, [r7, #32]
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8018c60:	6a3b      	ldr	r3, [r7, #32]
 8018c62:	8adb      	ldrh	r3, [r3, #22]
 8018c64:	8bfa      	ldrh	r2, [r7, #30]
 8018c66:	429a      	cmp	r2, r3
 8018c68:	d305      	bcc.n	8018c76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8018c6a:	4b36      	ldr	r3, [pc, #216]	; (8018d44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8018c6c:	4a36      	ldr	r2, [pc, #216]	; (8018d48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8018c6e:	21c5      	movs	r1, #197	; 0xc5
 8018c70:	4833      	ldr	r0, [pc, #204]	; (8018d40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8018c72:	f008 fa03 	bl	802107c <__assert_func>
            const uint16_t index = pos + offset;
 8018c76:	6a3b      	ldr	r3, [r7, #32]
 8018c78:	8a9a      	ldrh	r2, [r3, #20]
 8018c7a:	8bfb      	ldrh	r3, [r7, #30]
 8018c7c:	4413      	add	r3, r2
 8018c7e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8018c80:	8bbb      	ldrh	r3, [r7, #28]
 8018c82:	2b09      	cmp	r3, #9
 8018c84:	d801      	bhi.n	8018c8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8018c86:	8bbb      	ldrh	r3, [r7, #28]
 8018c88:	e001      	b.n	8018c8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8018c8a:	8bbb      	ldrh	r3, [r7, #28]
 8018c8c:	3b0a      	subs	r3, #10
 8018c8e:	6a3a      	ldr	r2, [r7, #32]
 8018c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018c94:	f640 123f 	movw	r2, #2367	; 0x93f
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	bf0c      	ite	eq
 8018c9c:	2301      	moveq	r3, #1
 8018c9e:	2300      	movne	r3, #0
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d03f      	beq.n	8018d26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	3322      	adds	r3, #34	; 0x22
 8018caa:	687a      	ldr	r2, [r7, #4]
 8018cac:	3222      	adds	r2, #34	; 0x22
 8018cae:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8018cb0:	68ba      	ldr	r2, [r7, #8]
 8018cb2:	8ad2      	ldrh	r2, [r2, #22]
 8018cb4:	2a00      	cmp	r2, #0
 8018cb6:	d105      	bne.n	8018cc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8018cb8:	4b1f      	ldr	r3, [pc, #124]	; (8018d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8018cba:	4a20      	ldr	r2, [pc, #128]	; (8018d3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8018cbc:	21c0      	movs	r1, #192	; 0xc0
 8018cbe:	4820      	ldr	r0, [pc, #128]	; (8018d40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8018cc0:	f008 f9dc 	bl	802107c <__assert_func>
            return buffer[pos];
 8018cc4:	68ba      	ldr	r2, [r7, #8]
 8018cc6:	8a92      	ldrh	r2, [r2, #20]
 8018cc8:	4611      	mov	r1, r2
 8018cca:	68ba      	ldr	r2, [r7, #8]
 8018ccc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8018cd0:	613b      	str	r3, [r7, #16]
 8018cd2:	4613      	mov	r3, r2
 8018cd4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8018cd6:	693b      	ldr	r3, [r7, #16]
 8018cd8:	8adb      	ldrh	r3, [r3, #22]
 8018cda:	2b01      	cmp	r3, #1
 8018cdc:	d806      	bhi.n	8018cec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8018cde:	4b1b      	ldr	r3, [pc, #108]	; (8018d4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8018ce0:	4a1b      	ldr	r2, [pc, #108]	; (8018d50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8018ce2:	f240 110d 	movw	r1, #269	; 0x10d
 8018ce6:	4816      	ldr	r0, [pc, #88]	; (8018d40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8018ce8:	f008 f9c8 	bl	802107c <__assert_func>
            const uint16_t index = pos + 1;
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	8a9b      	ldrh	r3, [r3, #20]
 8018cf0:	3301      	adds	r3, #1
 8018cf2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8018cf4:	89bb      	ldrh	r3, [r7, #12]
 8018cf6:	2b09      	cmp	r3, #9
 8018cf8:	d801      	bhi.n	8018cfe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8018cfa:	89bb      	ldrh	r3, [r7, #12]
 8018cfc:	e000      	b.n	8018d00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8018cfe:	2300      	movs	r3, #0
 8018d00:	693a      	ldr	r2, [r7, #16]
 8018d02:	89f9      	ldrh	r1, [r7, #14]
 8018d04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8018d08:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	3322      	adds	r3, #34	; 0x22
 8018d0e:	61bb      	str	r3, [r7, #24]
 8018d10:	f640 133f 	movw	r3, #2367	; 0x93f
 8018d14:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8018d16:	69bb      	ldr	r3, [r7, #24]
 8018d18:	8a9b      	ldrh	r3, [r3, #20]
 8018d1a:	4619      	mov	r1, r3
 8018d1c:	69bb      	ldr	r3, [r7, #24]
 8018d1e:	8afa      	ldrh	r2, [r7, #22]
 8018d20:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8018d24:	bf00      	nop
        }
    }
    return getNextChar();
 8018d26:	6878      	ldr	r0, [r7, #4]
 8018d28:	f005 fbb0 	bl	801e48c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018d2c:	4603      	mov	r3, r0
}
 8018d2e:	4618      	mov	r0, r3
 8018d30:	3728      	adds	r7, #40	; 0x28
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}
 8018d36:	bf00      	nop
 8018d38:	08024040 	.word	0x08024040
 8018d3c:	0802404c 	.word	0x0802404c
 8018d40:	080240f8 	.word	0x080240f8
 8018d44:	08024140 	.word	0x08024140
 8018d48:	08024150 	.word	0x08024150
 8018d4c:	08024224 	.word	0x08024224
 8018d50:	08024230 	.word	0x08024230

08018d54 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8018d5c:	6878      	ldr	r0, [r7, #4]
 8018d5e:	f005 fb4d 	bl	801e3fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8018d62:	bf00      	nop
 8018d64:	3708      	adds	r7, #8
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
	...

08018d6c <_ZN17TypedTextDatabase8getFontsEv>:
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}

const touchgfx::Font** getFonts()
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8018d70:	4b02      	ldr	r3, [pc, #8]	; (8018d7c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8018d72:	4618      	mov	r0, r3
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr
 8018d7c:	20005c44 	.word	0x20005c44

08018d80 <_Z41__static_initialization_and_destruction_0ii>:
    case 9:
        touchgfx_fonts[9] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b082      	sub	sp, #8
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2b01      	cmp	r3, #1
 8018d8e:	d136      	bne.n	8018dfe <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d96:	4293      	cmp	r3, r2
 8018d98:	d131      	bne.n	8018dfe <_Z41__static_initialization_and_destruction_0ii+0x7e>
    &(getFont_verdana_20_4bpp()),
 8018d9a:	f7ff fb77 	bl	801848c <_Z23getFont_verdana_20_4bppv>
 8018d9e:	4603      	mov	r3, r0
};
 8018da0:	4a19      	ldr	r2, [pc, #100]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018da2:	6013      	str	r3, [r2, #0]
    &(getFont_AGENCYB_TTF_20_4bpp()),
 8018da4:	f7ff f96e 	bl	8018084 <_Z27getFont_AGENCYB_TTF_20_4bppv>
 8018da8:	4603      	mov	r3, r0
};
 8018daa:	4a17      	ldr	r2, [pc, #92]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018dac:	6053      	str	r3, [r2, #4]
    &(getFont_AGENCYB_TTF_50_4bpp()),
 8018dae:	f7ff fac1 	bl	8018334 <_Z27getFont_AGENCYB_TTF_50_4bppv>
 8018db2:	4603      	mov	r3, r0
};
 8018db4:	4a14      	ldr	r2, [pc, #80]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018db6:	6093      	str	r3, [r2, #8]
    &(getFont_AGENCYB_TTF_30_4bpp()),
 8018db8:	f7ff fa66 	bl	8018288 <_Z27getFont_AGENCYB_TTF_30_4bppv>
 8018dbc:	4603      	mov	r3, r0
};
 8018dbe:	4a12      	ldr	r2, [pc, #72]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018dc0:	60d3      	str	r3, [r2, #12]
    &(getFont_AGENCYB_TTF_14_4bpp()),
 8018dc2:	f7ff f909 	bl	8017fd8 <_Z27getFont_AGENCYB_TTF_14_4bppv>
 8018dc6:	4603      	mov	r3, r0
};
 8018dc8:	4a0f      	ldr	r2, [pc, #60]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018dca:	6113      	str	r3, [r2, #16]
    &(getFont_AGENCYB_TTF_28_4bpp()),
 8018dcc:	f7ff fa06 	bl	80181dc <_Z27getFont_AGENCYB_TTF_28_4bppv>
 8018dd0:	4603      	mov	r3, r0
};
 8018dd2:	4a0d      	ldr	r2, [pc, #52]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018dd4:	6153      	str	r3, [r2, #20]
    &(getFont_AGENCYB_TTF_24_4bpp()),
 8018dd6:	f7ff f9ab 	bl	8018130 <_Z27getFont_AGENCYB_TTF_24_4bppv>
 8018dda:	4603      	mov	r3, r0
};
 8018ddc:	4a0a      	ldr	r2, [pc, #40]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018dde:	6193      	str	r3, [r2, #24]
    &(getFont_AGENCYB_TTF_12_4bpp()),
 8018de0:	f7ff f8a4 	bl	8017f2c <_Z27getFont_AGENCYB_TTF_12_4bppv>
 8018de4:	4603      	mov	r3, r0
};
 8018de6:	4a08      	ldr	r2, [pc, #32]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018de8:	61d3      	str	r3, [r2, #28]
    &(getFont_verdana_40_4bpp()),
 8018dea:	f7ff fba5 	bl	8018538 <_Z23getFont_verdana_40_4bppv>
 8018dee:	4603      	mov	r3, r0
};
 8018df0:	4a05      	ldr	r2, [pc, #20]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018df2:	6213      	str	r3, [r2, #32]
    &(getFont_verdana_10_4bpp())
 8018df4:	f7ff faf4 	bl	80183e0 <_Z23getFont_verdana_10_4bppv>
 8018df8:	4603      	mov	r3, r0
};
 8018dfa:	4a03      	ldr	r2, [pc, #12]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018dfc:	6253      	str	r3, [r2, #36]	; 0x24
} // namespace TypedTextDatabase
 8018dfe:	bf00      	nop
 8018e00:	3708      	adds	r7, #8
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	20005c44 	.word	0x20005c44

08018e0c <_GLOBAL__sub_I_touchgfx_fonts>:
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	af00      	add	r7, sp, #0
 8018e10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018e14:	2001      	movs	r0, #1
 8018e16:	f7ff ffb3 	bl	8018d80 <_Z41__static_initialization_and_destruction_0ii>
 8018e1a:	bd80      	pop	{r7, pc}

08018e1c <_Z41__static_initialization_and_destruction_0ii>:
}

Unicode::UnicodeChar * CustomKeyboard::getBuffer()
{
	return keyboard.getBuffer();
}
 8018e1c:	b590      	push	{r4, r7, lr}
 8018e1e:	b085      	sub	sp, #20
 8018e20:	af02      	add	r7, sp, #8
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	f040 81d3 	bne.w	80191d4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e34:	4293      	cmp	r3, r2
 8018e36:	f040 81cd 	bne.w	80191d4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8018e3a:	4cda      	ldr	r4, [pc, #872]	; (80191a4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	7023      	strb	r3, [r4, #0]
 8018e40:	1ca0      	adds	r0, r4, #2
 8018e42:	2328      	movs	r3, #40	; 0x28
 8018e44:	9300      	str	r3, [sp, #0]
 8018e46:	231a      	movs	r3, #26
 8018e48:	223d      	movs	r2, #61	; 0x3d
 8018e4a:	2107      	movs	r1, #7
 8018e4c:	f7ff fbf6 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018e50:	2328      	movs	r3, #40	; 0x28
 8018e52:	8163      	strh	r3, [r4, #10]
 8018e54:	340c      	adds	r4, #12
 8018e56:	2302      	movs	r3, #2
 8018e58:	7023      	strb	r3, [r4, #0]
 8018e5a:	1ca0      	adds	r0, r4, #2
 8018e5c:	2328      	movs	r3, #40	; 0x28
 8018e5e:	9300      	str	r3, [sp, #0]
 8018e60:	231a      	movs	r3, #26
 8018e62:	223d      	movs	r2, #61	; 0x3d
 8018e64:	2123      	movs	r1, #35	; 0x23
 8018e66:	f7ff fbe9 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018e6a:	2328      	movs	r3, #40	; 0x28
 8018e6c:	8163      	strh	r3, [r4, #10]
 8018e6e:	340c      	adds	r4, #12
 8018e70:	2303      	movs	r3, #3
 8018e72:	7023      	strb	r3, [r4, #0]
 8018e74:	1ca0      	adds	r0, r4, #2
 8018e76:	2328      	movs	r3, #40	; 0x28
 8018e78:	9300      	str	r3, [sp, #0]
 8018e7a:	231a      	movs	r3, #26
 8018e7c:	223d      	movs	r2, #61	; 0x3d
 8018e7e:	213f      	movs	r1, #63	; 0x3f
 8018e80:	f7ff fbdc 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018e84:	2328      	movs	r3, #40	; 0x28
 8018e86:	8163      	strh	r3, [r4, #10]
 8018e88:	340c      	adds	r4, #12
 8018e8a:	2304      	movs	r3, #4
 8018e8c:	7023      	strb	r3, [r4, #0]
 8018e8e:	1ca0      	adds	r0, r4, #2
 8018e90:	2328      	movs	r3, #40	; 0x28
 8018e92:	9300      	str	r3, [sp, #0]
 8018e94:	231a      	movs	r3, #26
 8018e96:	223d      	movs	r2, #61	; 0x3d
 8018e98:	215b      	movs	r1, #91	; 0x5b
 8018e9a:	f7ff fbcf 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018e9e:	2328      	movs	r3, #40	; 0x28
 8018ea0:	8163      	strh	r3, [r4, #10]
 8018ea2:	340c      	adds	r4, #12
 8018ea4:	2305      	movs	r3, #5
 8018ea6:	7023      	strb	r3, [r4, #0]
 8018ea8:	1ca0      	adds	r0, r4, #2
 8018eaa:	2328      	movs	r3, #40	; 0x28
 8018eac:	9300      	str	r3, [sp, #0]
 8018eae:	231a      	movs	r3, #26
 8018eb0:	223d      	movs	r2, #61	; 0x3d
 8018eb2:	2177      	movs	r1, #119	; 0x77
 8018eb4:	f7ff fbc2 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018eb8:	2328      	movs	r3, #40	; 0x28
 8018eba:	8163      	strh	r3, [r4, #10]
 8018ebc:	340c      	adds	r4, #12
 8018ebe:	2306      	movs	r3, #6
 8018ec0:	7023      	strb	r3, [r4, #0]
 8018ec2:	1ca0      	adds	r0, r4, #2
 8018ec4:	2328      	movs	r3, #40	; 0x28
 8018ec6:	9300      	str	r3, [sp, #0]
 8018ec8:	231a      	movs	r3, #26
 8018eca:	223d      	movs	r2, #61	; 0x3d
 8018ecc:	2193      	movs	r1, #147	; 0x93
 8018ece:	f7ff fbb5 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018ed2:	2328      	movs	r3, #40	; 0x28
 8018ed4:	8163      	strh	r3, [r4, #10]
 8018ed6:	340c      	adds	r4, #12
 8018ed8:	2307      	movs	r3, #7
 8018eda:	7023      	strb	r3, [r4, #0]
 8018edc:	1ca0      	adds	r0, r4, #2
 8018ede:	2328      	movs	r3, #40	; 0x28
 8018ee0:	9300      	str	r3, [sp, #0]
 8018ee2:	231a      	movs	r3, #26
 8018ee4:	223d      	movs	r2, #61	; 0x3d
 8018ee6:	21af      	movs	r1, #175	; 0xaf
 8018ee8:	f7ff fba8 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018eec:	2328      	movs	r3, #40	; 0x28
 8018eee:	8163      	strh	r3, [r4, #10]
 8018ef0:	340c      	adds	r4, #12
 8018ef2:	2308      	movs	r3, #8
 8018ef4:	7023      	strb	r3, [r4, #0]
 8018ef6:	1ca0      	adds	r0, r4, #2
 8018ef8:	2328      	movs	r3, #40	; 0x28
 8018efa:	9300      	str	r3, [sp, #0]
 8018efc:	231a      	movs	r3, #26
 8018efe:	223d      	movs	r2, #61	; 0x3d
 8018f00:	21cb      	movs	r1, #203	; 0xcb
 8018f02:	f7ff fb9b 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018f06:	2328      	movs	r3, #40	; 0x28
 8018f08:	8163      	strh	r3, [r4, #10]
 8018f0a:	340c      	adds	r4, #12
 8018f0c:	2309      	movs	r3, #9
 8018f0e:	7023      	strb	r3, [r4, #0]
 8018f10:	1ca0      	adds	r0, r4, #2
 8018f12:	2328      	movs	r3, #40	; 0x28
 8018f14:	9300      	str	r3, [sp, #0]
 8018f16:	231a      	movs	r3, #26
 8018f18:	223d      	movs	r2, #61	; 0x3d
 8018f1a:	21e7      	movs	r1, #231	; 0xe7
 8018f1c:	f7ff fb8e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018f20:	2328      	movs	r3, #40	; 0x28
 8018f22:	8163      	strh	r3, [r4, #10]
 8018f24:	340c      	adds	r4, #12
 8018f26:	230a      	movs	r3, #10
 8018f28:	7023      	strb	r3, [r4, #0]
 8018f2a:	1ca0      	adds	r0, r4, #2
 8018f2c:	2328      	movs	r3, #40	; 0x28
 8018f2e:	9300      	str	r3, [sp, #0]
 8018f30:	231a      	movs	r3, #26
 8018f32:	223d      	movs	r2, #61	; 0x3d
 8018f34:	f240 1103 	movw	r1, #259	; 0x103
 8018f38:	f7ff fb80 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018f3c:	2328      	movs	r3, #40	; 0x28
 8018f3e:	8163      	strh	r3, [r4, #10]
 8018f40:	340c      	adds	r4, #12
 8018f42:	230b      	movs	r3, #11
 8018f44:	7023      	strb	r3, [r4, #0]
 8018f46:	1ca0      	adds	r0, r4, #2
 8018f48:	2328      	movs	r3, #40	; 0x28
 8018f4a:	9300      	str	r3, [sp, #0]
 8018f4c:	231a      	movs	r3, #26
 8018f4e:	223d      	movs	r2, #61	; 0x3d
 8018f50:	f240 111f 	movw	r1, #287	; 0x11f
 8018f54:	f7ff fb72 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018f58:	2328      	movs	r3, #40	; 0x28
 8018f5a:	8163      	strh	r3, [r4, #10]
 8018f5c:	340c      	adds	r4, #12
 8018f5e:	230c      	movs	r3, #12
 8018f60:	7023      	strb	r3, [r4, #0]
 8018f62:	1ca0      	adds	r0, r4, #2
 8018f64:	2328      	movs	r3, #40	; 0x28
 8018f66:	9300      	str	r3, [sp, #0]
 8018f68:	231a      	movs	r3, #26
 8018f6a:	2269      	movs	r2, #105	; 0x69
 8018f6c:	2107      	movs	r1, #7
 8018f6e:	f7ff fb65 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018f72:	2328      	movs	r3, #40	; 0x28
 8018f74:	8163      	strh	r3, [r4, #10]
 8018f76:	340c      	adds	r4, #12
 8018f78:	230d      	movs	r3, #13
 8018f7a:	7023      	strb	r3, [r4, #0]
 8018f7c:	1ca0      	adds	r0, r4, #2
 8018f7e:	2328      	movs	r3, #40	; 0x28
 8018f80:	9300      	str	r3, [sp, #0]
 8018f82:	231a      	movs	r3, #26
 8018f84:	2269      	movs	r2, #105	; 0x69
 8018f86:	2123      	movs	r1, #35	; 0x23
 8018f88:	f7ff fb58 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018f8c:	2328      	movs	r3, #40	; 0x28
 8018f8e:	8163      	strh	r3, [r4, #10]
 8018f90:	340c      	adds	r4, #12
 8018f92:	230e      	movs	r3, #14
 8018f94:	7023      	strb	r3, [r4, #0]
 8018f96:	1ca0      	adds	r0, r4, #2
 8018f98:	2328      	movs	r3, #40	; 0x28
 8018f9a:	9300      	str	r3, [sp, #0]
 8018f9c:	231a      	movs	r3, #26
 8018f9e:	2269      	movs	r2, #105	; 0x69
 8018fa0:	213f      	movs	r1, #63	; 0x3f
 8018fa2:	f7ff fb4b 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018fa6:	2328      	movs	r3, #40	; 0x28
 8018fa8:	8163      	strh	r3, [r4, #10]
 8018faa:	340c      	adds	r4, #12
 8018fac:	230f      	movs	r3, #15
 8018fae:	7023      	strb	r3, [r4, #0]
 8018fb0:	1ca0      	adds	r0, r4, #2
 8018fb2:	2328      	movs	r3, #40	; 0x28
 8018fb4:	9300      	str	r3, [sp, #0]
 8018fb6:	231a      	movs	r3, #26
 8018fb8:	2269      	movs	r2, #105	; 0x69
 8018fba:	215b      	movs	r1, #91	; 0x5b
 8018fbc:	f7ff fb3e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018fc0:	2328      	movs	r3, #40	; 0x28
 8018fc2:	8163      	strh	r3, [r4, #10]
 8018fc4:	340c      	adds	r4, #12
 8018fc6:	2310      	movs	r3, #16
 8018fc8:	7023      	strb	r3, [r4, #0]
 8018fca:	1ca0      	adds	r0, r4, #2
 8018fcc:	2328      	movs	r3, #40	; 0x28
 8018fce:	9300      	str	r3, [sp, #0]
 8018fd0:	231a      	movs	r3, #26
 8018fd2:	2269      	movs	r2, #105	; 0x69
 8018fd4:	2177      	movs	r1, #119	; 0x77
 8018fd6:	f7ff fb31 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018fda:	2328      	movs	r3, #40	; 0x28
 8018fdc:	8163      	strh	r3, [r4, #10]
 8018fde:	340c      	adds	r4, #12
 8018fe0:	2311      	movs	r3, #17
 8018fe2:	7023      	strb	r3, [r4, #0]
 8018fe4:	1ca0      	adds	r0, r4, #2
 8018fe6:	2328      	movs	r3, #40	; 0x28
 8018fe8:	9300      	str	r3, [sp, #0]
 8018fea:	231a      	movs	r3, #26
 8018fec:	2269      	movs	r2, #105	; 0x69
 8018fee:	2193      	movs	r1, #147	; 0x93
 8018ff0:	f7ff fb24 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8018ff4:	2328      	movs	r3, #40	; 0x28
 8018ff6:	8163      	strh	r3, [r4, #10]
 8018ff8:	340c      	adds	r4, #12
 8018ffa:	2312      	movs	r3, #18
 8018ffc:	7023      	strb	r3, [r4, #0]
 8018ffe:	1ca0      	adds	r0, r4, #2
 8019000:	2328      	movs	r3, #40	; 0x28
 8019002:	9300      	str	r3, [sp, #0]
 8019004:	231a      	movs	r3, #26
 8019006:	2269      	movs	r2, #105	; 0x69
 8019008:	21af      	movs	r1, #175	; 0xaf
 801900a:	f7ff fb17 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801900e:	2328      	movs	r3, #40	; 0x28
 8019010:	8163      	strh	r3, [r4, #10]
 8019012:	340c      	adds	r4, #12
 8019014:	2313      	movs	r3, #19
 8019016:	7023      	strb	r3, [r4, #0]
 8019018:	1ca0      	adds	r0, r4, #2
 801901a:	2328      	movs	r3, #40	; 0x28
 801901c:	9300      	str	r3, [sp, #0]
 801901e:	231a      	movs	r3, #26
 8019020:	2269      	movs	r2, #105	; 0x69
 8019022:	21cb      	movs	r1, #203	; 0xcb
 8019024:	f7ff fb0a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019028:	2328      	movs	r3, #40	; 0x28
 801902a:	8163      	strh	r3, [r4, #10]
 801902c:	340c      	adds	r4, #12
 801902e:	2314      	movs	r3, #20
 8019030:	7023      	strb	r3, [r4, #0]
 8019032:	1ca0      	adds	r0, r4, #2
 8019034:	2328      	movs	r3, #40	; 0x28
 8019036:	9300      	str	r3, [sp, #0]
 8019038:	231a      	movs	r3, #26
 801903a:	2269      	movs	r2, #105	; 0x69
 801903c:	21e7      	movs	r1, #231	; 0xe7
 801903e:	f7ff fafd 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019042:	2328      	movs	r3, #40	; 0x28
 8019044:	8163      	strh	r3, [r4, #10]
 8019046:	340c      	adds	r4, #12
 8019048:	2315      	movs	r3, #21
 801904a:	7023      	strb	r3, [r4, #0]
 801904c:	1ca0      	adds	r0, r4, #2
 801904e:	2328      	movs	r3, #40	; 0x28
 8019050:	9300      	str	r3, [sp, #0]
 8019052:	231a      	movs	r3, #26
 8019054:	2269      	movs	r2, #105	; 0x69
 8019056:	f240 1103 	movw	r1, #259	; 0x103
 801905a:	f7ff faef 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801905e:	2328      	movs	r3, #40	; 0x28
 8019060:	8163      	strh	r3, [r4, #10]
 8019062:	340c      	adds	r4, #12
 8019064:	2316      	movs	r3, #22
 8019066:	7023      	strb	r3, [r4, #0]
 8019068:	1ca0      	adds	r0, r4, #2
 801906a:	2328      	movs	r3, #40	; 0x28
 801906c:	9300      	str	r3, [sp, #0]
 801906e:	231a      	movs	r3, #26
 8019070:	2269      	movs	r2, #105	; 0x69
 8019072:	f240 111f 	movw	r1, #287	; 0x11f
 8019076:	f7ff fae1 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801907a:	2328      	movs	r3, #40	; 0x28
 801907c:	8163      	strh	r3, [r4, #10]
 801907e:	340c      	adds	r4, #12
 8019080:	2317      	movs	r3, #23
 8019082:	7023      	strb	r3, [r4, #0]
 8019084:	1ca0      	adds	r0, r4, #2
 8019086:	2328      	movs	r3, #40	; 0x28
 8019088:	9300      	str	r3, [sp, #0]
 801908a:	231a      	movs	r3, #26
 801908c:	2295      	movs	r2, #149	; 0x95
 801908e:	213f      	movs	r1, #63	; 0x3f
 8019090:	f7ff fad4 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019094:	2328      	movs	r3, #40	; 0x28
 8019096:	8163      	strh	r3, [r4, #10]
 8019098:	340c      	adds	r4, #12
 801909a:	2318      	movs	r3, #24
 801909c:	7023      	strb	r3, [r4, #0]
 801909e:	1ca0      	adds	r0, r4, #2
 80190a0:	2328      	movs	r3, #40	; 0x28
 80190a2:	9300      	str	r3, [sp, #0]
 80190a4:	231a      	movs	r3, #26
 80190a6:	2295      	movs	r2, #149	; 0x95
 80190a8:	215b      	movs	r1, #91	; 0x5b
 80190aa:	f7ff fac7 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80190ae:	2328      	movs	r3, #40	; 0x28
 80190b0:	8163      	strh	r3, [r4, #10]
 80190b2:	340c      	adds	r4, #12
 80190b4:	2319      	movs	r3, #25
 80190b6:	7023      	strb	r3, [r4, #0]
 80190b8:	1ca0      	adds	r0, r4, #2
 80190ba:	2328      	movs	r3, #40	; 0x28
 80190bc:	9300      	str	r3, [sp, #0]
 80190be:	231a      	movs	r3, #26
 80190c0:	2295      	movs	r2, #149	; 0x95
 80190c2:	2177      	movs	r1, #119	; 0x77
 80190c4:	f7ff faba 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80190c8:	2328      	movs	r3, #40	; 0x28
 80190ca:	8163      	strh	r3, [r4, #10]
 80190cc:	340c      	adds	r4, #12
 80190ce:	231a      	movs	r3, #26
 80190d0:	7023      	strb	r3, [r4, #0]
 80190d2:	1ca0      	adds	r0, r4, #2
 80190d4:	2328      	movs	r3, #40	; 0x28
 80190d6:	9300      	str	r3, [sp, #0]
 80190d8:	231a      	movs	r3, #26
 80190da:	2295      	movs	r2, #149	; 0x95
 80190dc:	2193      	movs	r1, #147	; 0x93
 80190de:	f7ff faad 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80190e2:	2328      	movs	r3, #40	; 0x28
 80190e4:	8163      	strh	r3, [r4, #10]
 80190e6:	340c      	adds	r4, #12
 80190e8:	231b      	movs	r3, #27
 80190ea:	7023      	strb	r3, [r4, #0]
 80190ec:	1ca0      	adds	r0, r4, #2
 80190ee:	2328      	movs	r3, #40	; 0x28
 80190f0:	9300      	str	r3, [sp, #0]
 80190f2:	231a      	movs	r3, #26
 80190f4:	2295      	movs	r2, #149	; 0x95
 80190f6:	21af      	movs	r1, #175	; 0xaf
 80190f8:	f7ff faa0 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80190fc:	2328      	movs	r3, #40	; 0x28
 80190fe:	8163      	strh	r3, [r4, #10]
 8019100:	340c      	adds	r4, #12
 8019102:	231c      	movs	r3, #28
 8019104:	7023      	strb	r3, [r4, #0]
 8019106:	1ca0      	adds	r0, r4, #2
 8019108:	2328      	movs	r3, #40	; 0x28
 801910a:	9300      	str	r3, [sp, #0]
 801910c:	231a      	movs	r3, #26
 801910e:	2295      	movs	r2, #149	; 0x95
 8019110:	21cb      	movs	r1, #203	; 0xcb
 8019112:	f7ff fa93 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019116:	2328      	movs	r3, #40	; 0x28
 8019118:	8163      	strh	r3, [r4, #10]
 801911a:	340c      	adds	r4, #12
 801911c:	231d      	movs	r3, #29
 801911e:	7023      	strb	r3, [r4, #0]
 8019120:	1ca0      	adds	r0, r4, #2
 8019122:	2328      	movs	r3, #40	; 0x28
 8019124:	9300      	str	r3, [sp, #0]
 8019126:	231a      	movs	r3, #26
 8019128:	2295      	movs	r2, #149	; 0x95
 801912a:	21e7      	movs	r1, #231	; 0xe7
 801912c:	f7ff fa86 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019130:	2328      	movs	r3, #40	; 0x28
 8019132:	8163      	strh	r3, [r4, #10]
 8019134:	340c      	adds	r4, #12
 8019136:	231e      	movs	r3, #30
 8019138:	7023      	strb	r3, [r4, #0]
 801913a:	1ca0      	adds	r0, r4, #2
 801913c:	2328      	movs	r3, #40	; 0x28
 801913e:	9300      	str	r3, [sp, #0]
 8019140:	23fc      	movs	r3, #252	; 0xfc
 8019142:	22c1      	movs	r2, #193	; 0xc1
 8019144:	213e      	movs	r1, #62	; 0x3e
 8019146:	f7ff fa79 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801914a:	232b      	movs	r3, #43	; 0x2b
 801914c:	8163      	strh	r3, [r4, #10]
};
 801914e:	4c16      	ldr	r4, [pc, #88]	; (80191a8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019150:	4620      	mov	r0, r4
 8019152:	2328      	movs	r3, #40	; 0x28
 8019154:	9300      	str	r3, [sp, #0]
 8019156:	2338      	movs	r3, #56	; 0x38
 8019158:	2295      	movs	r2, #149	; 0x95
 801915a:	2105      	movs	r1, #5
 801915c:	f7ff fa6e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019160:	2300      	movs	r3, #0
 8019162:	60a3      	str	r3, [r4, #8]
 8019164:	232a      	movs	r3, #42	; 0x2a
 8019166:	81a3      	strh	r3, [r4, #12]
 8019168:	3410      	adds	r4, #16
 801916a:	4620      	mov	r0, r4
 801916c:	2328      	movs	r3, #40	; 0x28
 801916e:	9300      	str	r3, [sp, #0]
 8019170:	2338      	movs	r3, #56	; 0x38
 8019172:	2295      	movs	r2, #149	; 0x95
 8019174:	f44f 7181 	mov.w	r1, #258	; 0x102
 8019178:	f7ff fa60 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801917c:	2300      	movs	r3, #0
 801917e:	60a3      	str	r3, [r4, #8]
 8019180:	2327      	movs	r3, #39	; 0x27
 8019182:	81a3      	strh	r3, [r4, #12]
 8019184:	3410      	adds	r4, #16
 8019186:	4620      	mov	r0, r4
 8019188:	2328      	movs	r3, #40	; 0x28
 801918a:	9300      	str	r3, [sp, #0]
 801918c:	2338      	movs	r3, #56	; 0x38
 801918e:	22c1      	movs	r2, #193	; 0xc1
 8019190:	2105      	movs	r1, #5
 8019192:	f7ff fa53 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019196:	2300      	movs	r3, #0
 8019198:	60a3      	str	r3, [r4, #8]
 801919a:	2329      	movs	r3, #41	; 0x29
 801919c:	81a3      	strh	r3, [r4, #12]
};
 801919e:	2328      	movs	r3, #40	; 0x28
 80191a0:	9300      	str	r3, [sp, #0]
 80191a2:	e003      	b.n	80191ac <_Z41__static_initialization_and_destruction_0ii+0x390>
 80191a4:	20005c6c 	.word	0x20005c6c
 80191a8:	20005dd4 	.word	0x20005dd4
 80191ac:	f44f 739a 	mov.w	r3, #308	; 0x134
 80191b0:	220a      	movs	r2, #10
 80191b2:	210f      	movs	r1, #15
 80191b4:	480f      	ldr	r0, [pc, #60]	; (80191f4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80191b6:	f7ff fa41 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80191ba:	2130      	movs	r1, #48	; 0x30
 80191bc:	480e      	ldr	r0, [pc, #56]	; (80191f8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80191be:	f7ff fa7b 	bl	80186b8 <_ZN8touchgfx9TypedTextC1Et>
 80191c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80191c6:	480d      	ldr	r0, [pc, #52]	; (80191fc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80191c8:	f7ff fa12 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
 80191cc:	2100      	movs	r1, #0
 80191ce:	480c      	ldr	r0, [pc, #48]	; (8019200 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80191d0:	f7ff fa0e 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d107      	bne.n	80191ea <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191e0:	4293      	cmp	r3, r2
 80191e2:	d102      	bne.n	80191ea <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80191e4:	4807      	ldr	r0, [pc, #28]	; (8019204 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80191e6:	f7ff faa5 	bl	8018734 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 80191ea:	bf00      	nop
 80191ec:	370c      	adds	r7, #12
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd90      	pop	{r4, r7, pc}
 80191f2:	bf00      	nop
 80191f4:	20000056 	.word	0x20000056
 80191f8:	20000060 	.word	0x20000060
 80191fc:	20000068 	.word	0x20000068
 8019200:	20000070 	.word	0x20000070
 8019204:	20000044 	.word	0x20000044

08019208 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 8019208:	b580      	push	{r7, lr}
 801920a:	af00      	add	r7, sp, #0
 801920c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019210:	2001      	movs	r0, #1
 8019212:	f7ff fe03 	bl	8018e1c <_Z41__static_initialization_and_destruction_0ii>
 8019216:	bd80      	pop	{r7, pc}

08019218 <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 8019218:	b580      	push	{r7, lr}
 801921a:	af00      	add	r7, sp, #0
 801921c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019220:	2000      	movs	r0, #0
 8019222:	f7ff fdfb 	bl	8018e1c <_Z41__static_initialization_and_destruction_0ii>
 8019226:	bd80      	pop	{r7, pc}

08019228 <_Z41__static_initialization_and_destruction_0ii>:
}

void KeyboardPresenter::AlarmOrEvent(void)
{
        view.AlarmOrEvent();
}
 8019228:	b590      	push	{r4, r7, lr}
 801922a:	b085      	sub	sp, #20
 801922c:	af02      	add	r7, sp, #8
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	6039      	str	r1, [r7, #0]
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2b01      	cmp	r3, #1
 8019236:	f040 81d3 	bne.w	80195e0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019240:	4293      	cmp	r3, r2
 8019242:	f040 81cd 	bne.w	80195e0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8019246:	4cda      	ldr	r4, [pc, #872]	; (80195b0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8019248:	2301      	movs	r3, #1
 801924a:	7023      	strb	r3, [r4, #0]
 801924c:	1ca0      	adds	r0, r4, #2
 801924e:	2328      	movs	r3, #40	; 0x28
 8019250:	9300      	str	r3, [sp, #0]
 8019252:	231a      	movs	r3, #26
 8019254:	223d      	movs	r2, #61	; 0x3d
 8019256:	2107      	movs	r1, #7
 8019258:	f7ff f9f0 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801925c:	2328      	movs	r3, #40	; 0x28
 801925e:	8163      	strh	r3, [r4, #10]
 8019260:	340c      	adds	r4, #12
 8019262:	2302      	movs	r3, #2
 8019264:	7023      	strb	r3, [r4, #0]
 8019266:	1ca0      	adds	r0, r4, #2
 8019268:	2328      	movs	r3, #40	; 0x28
 801926a:	9300      	str	r3, [sp, #0]
 801926c:	231a      	movs	r3, #26
 801926e:	223d      	movs	r2, #61	; 0x3d
 8019270:	2123      	movs	r1, #35	; 0x23
 8019272:	f7ff f9e3 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019276:	2328      	movs	r3, #40	; 0x28
 8019278:	8163      	strh	r3, [r4, #10]
 801927a:	340c      	adds	r4, #12
 801927c:	2303      	movs	r3, #3
 801927e:	7023      	strb	r3, [r4, #0]
 8019280:	1ca0      	adds	r0, r4, #2
 8019282:	2328      	movs	r3, #40	; 0x28
 8019284:	9300      	str	r3, [sp, #0]
 8019286:	231a      	movs	r3, #26
 8019288:	223d      	movs	r2, #61	; 0x3d
 801928a:	213f      	movs	r1, #63	; 0x3f
 801928c:	f7ff f9d6 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019290:	2328      	movs	r3, #40	; 0x28
 8019292:	8163      	strh	r3, [r4, #10]
 8019294:	340c      	adds	r4, #12
 8019296:	2304      	movs	r3, #4
 8019298:	7023      	strb	r3, [r4, #0]
 801929a:	1ca0      	adds	r0, r4, #2
 801929c:	2328      	movs	r3, #40	; 0x28
 801929e:	9300      	str	r3, [sp, #0]
 80192a0:	231a      	movs	r3, #26
 80192a2:	223d      	movs	r2, #61	; 0x3d
 80192a4:	215b      	movs	r1, #91	; 0x5b
 80192a6:	f7ff f9c9 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80192aa:	2328      	movs	r3, #40	; 0x28
 80192ac:	8163      	strh	r3, [r4, #10]
 80192ae:	340c      	adds	r4, #12
 80192b0:	2305      	movs	r3, #5
 80192b2:	7023      	strb	r3, [r4, #0]
 80192b4:	1ca0      	adds	r0, r4, #2
 80192b6:	2328      	movs	r3, #40	; 0x28
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	231a      	movs	r3, #26
 80192bc:	223d      	movs	r2, #61	; 0x3d
 80192be:	2177      	movs	r1, #119	; 0x77
 80192c0:	f7ff f9bc 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80192c4:	2328      	movs	r3, #40	; 0x28
 80192c6:	8163      	strh	r3, [r4, #10]
 80192c8:	340c      	adds	r4, #12
 80192ca:	2306      	movs	r3, #6
 80192cc:	7023      	strb	r3, [r4, #0]
 80192ce:	1ca0      	adds	r0, r4, #2
 80192d0:	2328      	movs	r3, #40	; 0x28
 80192d2:	9300      	str	r3, [sp, #0]
 80192d4:	231a      	movs	r3, #26
 80192d6:	223d      	movs	r2, #61	; 0x3d
 80192d8:	2193      	movs	r1, #147	; 0x93
 80192da:	f7ff f9af 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80192de:	2328      	movs	r3, #40	; 0x28
 80192e0:	8163      	strh	r3, [r4, #10]
 80192e2:	340c      	adds	r4, #12
 80192e4:	2307      	movs	r3, #7
 80192e6:	7023      	strb	r3, [r4, #0]
 80192e8:	1ca0      	adds	r0, r4, #2
 80192ea:	2328      	movs	r3, #40	; 0x28
 80192ec:	9300      	str	r3, [sp, #0]
 80192ee:	231a      	movs	r3, #26
 80192f0:	223d      	movs	r2, #61	; 0x3d
 80192f2:	21af      	movs	r1, #175	; 0xaf
 80192f4:	f7ff f9a2 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80192f8:	2328      	movs	r3, #40	; 0x28
 80192fa:	8163      	strh	r3, [r4, #10]
 80192fc:	340c      	adds	r4, #12
 80192fe:	2308      	movs	r3, #8
 8019300:	7023      	strb	r3, [r4, #0]
 8019302:	1ca0      	adds	r0, r4, #2
 8019304:	2328      	movs	r3, #40	; 0x28
 8019306:	9300      	str	r3, [sp, #0]
 8019308:	231a      	movs	r3, #26
 801930a:	223d      	movs	r2, #61	; 0x3d
 801930c:	21cb      	movs	r1, #203	; 0xcb
 801930e:	f7ff f995 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019312:	2328      	movs	r3, #40	; 0x28
 8019314:	8163      	strh	r3, [r4, #10]
 8019316:	340c      	adds	r4, #12
 8019318:	2309      	movs	r3, #9
 801931a:	7023      	strb	r3, [r4, #0]
 801931c:	1ca0      	adds	r0, r4, #2
 801931e:	2328      	movs	r3, #40	; 0x28
 8019320:	9300      	str	r3, [sp, #0]
 8019322:	231a      	movs	r3, #26
 8019324:	223d      	movs	r2, #61	; 0x3d
 8019326:	21e7      	movs	r1, #231	; 0xe7
 8019328:	f7ff f988 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801932c:	2328      	movs	r3, #40	; 0x28
 801932e:	8163      	strh	r3, [r4, #10]
 8019330:	340c      	adds	r4, #12
 8019332:	230a      	movs	r3, #10
 8019334:	7023      	strb	r3, [r4, #0]
 8019336:	1ca0      	adds	r0, r4, #2
 8019338:	2328      	movs	r3, #40	; 0x28
 801933a:	9300      	str	r3, [sp, #0]
 801933c:	231a      	movs	r3, #26
 801933e:	223d      	movs	r2, #61	; 0x3d
 8019340:	f240 1103 	movw	r1, #259	; 0x103
 8019344:	f7ff f97a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019348:	2328      	movs	r3, #40	; 0x28
 801934a:	8163      	strh	r3, [r4, #10]
 801934c:	340c      	adds	r4, #12
 801934e:	230b      	movs	r3, #11
 8019350:	7023      	strb	r3, [r4, #0]
 8019352:	1ca0      	adds	r0, r4, #2
 8019354:	2328      	movs	r3, #40	; 0x28
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	231a      	movs	r3, #26
 801935a:	223d      	movs	r2, #61	; 0x3d
 801935c:	f240 111f 	movw	r1, #287	; 0x11f
 8019360:	f7ff f96c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019364:	2328      	movs	r3, #40	; 0x28
 8019366:	8163      	strh	r3, [r4, #10]
 8019368:	340c      	adds	r4, #12
 801936a:	230c      	movs	r3, #12
 801936c:	7023      	strb	r3, [r4, #0]
 801936e:	1ca0      	adds	r0, r4, #2
 8019370:	2328      	movs	r3, #40	; 0x28
 8019372:	9300      	str	r3, [sp, #0]
 8019374:	231a      	movs	r3, #26
 8019376:	2269      	movs	r2, #105	; 0x69
 8019378:	2107      	movs	r1, #7
 801937a:	f7ff f95f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801937e:	2328      	movs	r3, #40	; 0x28
 8019380:	8163      	strh	r3, [r4, #10]
 8019382:	340c      	adds	r4, #12
 8019384:	230d      	movs	r3, #13
 8019386:	7023      	strb	r3, [r4, #0]
 8019388:	1ca0      	adds	r0, r4, #2
 801938a:	2328      	movs	r3, #40	; 0x28
 801938c:	9300      	str	r3, [sp, #0]
 801938e:	231a      	movs	r3, #26
 8019390:	2269      	movs	r2, #105	; 0x69
 8019392:	2123      	movs	r1, #35	; 0x23
 8019394:	f7ff f952 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019398:	2328      	movs	r3, #40	; 0x28
 801939a:	8163      	strh	r3, [r4, #10]
 801939c:	340c      	adds	r4, #12
 801939e:	230e      	movs	r3, #14
 80193a0:	7023      	strb	r3, [r4, #0]
 80193a2:	1ca0      	adds	r0, r4, #2
 80193a4:	2328      	movs	r3, #40	; 0x28
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	231a      	movs	r3, #26
 80193aa:	2269      	movs	r2, #105	; 0x69
 80193ac:	213f      	movs	r1, #63	; 0x3f
 80193ae:	f7ff f945 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80193b2:	2328      	movs	r3, #40	; 0x28
 80193b4:	8163      	strh	r3, [r4, #10]
 80193b6:	340c      	adds	r4, #12
 80193b8:	230f      	movs	r3, #15
 80193ba:	7023      	strb	r3, [r4, #0]
 80193bc:	1ca0      	adds	r0, r4, #2
 80193be:	2328      	movs	r3, #40	; 0x28
 80193c0:	9300      	str	r3, [sp, #0]
 80193c2:	231a      	movs	r3, #26
 80193c4:	2269      	movs	r2, #105	; 0x69
 80193c6:	215b      	movs	r1, #91	; 0x5b
 80193c8:	f7ff f938 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80193cc:	2328      	movs	r3, #40	; 0x28
 80193ce:	8163      	strh	r3, [r4, #10]
 80193d0:	340c      	adds	r4, #12
 80193d2:	2310      	movs	r3, #16
 80193d4:	7023      	strb	r3, [r4, #0]
 80193d6:	1ca0      	adds	r0, r4, #2
 80193d8:	2328      	movs	r3, #40	; 0x28
 80193da:	9300      	str	r3, [sp, #0]
 80193dc:	231a      	movs	r3, #26
 80193de:	2269      	movs	r2, #105	; 0x69
 80193e0:	2177      	movs	r1, #119	; 0x77
 80193e2:	f7ff f92b 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80193e6:	2328      	movs	r3, #40	; 0x28
 80193e8:	8163      	strh	r3, [r4, #10]
 80193ea:	340c      	adds	r4, #12
 80193ec:	2311      	movs	r3, #17
 80193ee:	7023      	strb	r3, [r4, #0]
 80193f0:	1ca0      	adds	r0, r4, #2
 80193f2:	2328      	movs	r3, #40	; 0x28
 80193f4:	9300      	str	r3, [sp, #0]
 80193f6:	231a      	movs	r3, #26
 80193f8:	2269      	movs	r2, #105	; 0x69
 80193fa:	2193      	movs	r1, #147	; 0x93
 80193fc:	f7ff f91e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019400:	2328      	movs	r3, #40	; 0x28
 8019402:	8163      	strh	r3, [r4, #10]
 8019404:	340c      	adds	r4, #12
 8019406:	2312      	movs	r3, #18
 8019408:	7023      	strb	r3, [r4, #0]
 801940a:	1ca0      	adds	r0, r4, #2
 801940c:	2328      	movs	r3, #40	; 0x28
 801940e:	9300      	str	r3, [sp, #0]
 8019410:	231a      	movs	r3, #26
 8019412:	2269      	movs	r2, #105	; 0x69
 8019414:	21af      	movs	r1, #175	; 0xaf
 8019416:	f7ff f911 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801941a:	2328      	movs	r3, #40	; 0x28
 801941c:	8163      	strh	r3, [r4, #10]
 801941e:	340c      	adds	r4, #12
 8019420:	2313      	movs	r3, #19
 8019422:	7023      	strb	r3, [r4, #0]
 8019424:	1ca0      	adds	r0, r4, #2
 8019426:	2328      	movs	r3, #40	; 0x28
 8019428:	9300      	str	r3, [sp, #0]
 801942a:	231a      	movs	r3, #26
 801942c:	2269      	movs	r2, #105	; 0x69
 801942e:	21cb      	movs	r1, #203	; 0xcb
 8019430:	f7ff f904 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019434:	2328      	movs	r3, #40	; 0x28
 8019436:	8163      	strh	r3, [r4, #10]
 8019438:	340c      	adds	r4, #12
 801943a:	2314      	movs	r3, #20
 801943c:	7023      	strb	r3, [r4, #0]
 801943e:	1ca0      	adds	r0, r4, #2
 8019440:	2328      	movs	r3, #40	; 0x28
 8019442:	9300      	str	r3, [sp, #0]
 8019444:	231a      	movs	r3, #26
 8019446:	2269      	movs	r2, #105	; 0x69
 8019448:	21e7      	movs	r1, #231	; 0xe7
 801944a:	f7ff f8f7 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801944e:	2328      	movs	r3, #40	; 0x28
 8019450:	8163      	strh	r3, [r4, #10]
 8019452:	340c      	adds	r4, #12
 8019454:	2315      	movs	r3, #21
 8019456:	7023      	strb	r3, [r4, #0]
 8019458:	1ca0      	adds	r0, r4, #2
 801945a:	2328      	movs	r3, #40	; 0x28
 801945c:	9300      	str	r3, [sp, #0]
 801945e:	231a      	movs	r3, #26
 8019460:	2269      	movs	r2, #105	; 0x69
 8019462:	f240 1103 	movw	r1, #259	; 0x103
 8019466:	f7ff f8e9 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801946a:	2328      	movs	r3, #40	; 0x28
 801946c:	8163      	strh	r3, [r4, #10]
 801946e:	340c      	adds	r4, #12
 8019470:	2316      	movs	r3, #22
 8019472:	7023      	strb	r3, [r4, #0]
 8019474:	1ca0      	adds	r0, r4, #2
 8019476:	2328      	movs	r3, #40	; 0x28
 8019478:	9300      	str	r3, [sp, #0]
 801947a:	231a      	movs	r3, #26
 801947c:	2269      	movs	r2, #105	; 0x69
 801947e:	f240 111f 	movw	r1, #287	; 0x11f
 8019482:	f7ff f8db 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019486:	2328      	movs	r3, #40	; 0x28
 8019488:	8163      	strh	r3, [r4, #10]
 801948a:	340c      	adds	r4, #12
 801948c:	2317      	movs	r3, #23
 801948e:	7023      	strb	r3, [r4, #0]
 8019490:	1ca0      	adds	r0, r4, #2
 8019492:	2328      	movs	r3, #40	; 0x28
 8019494:	9300      	str	r3, [sp, #0]
 8019496:	231a      	movs	r3, #26
 8019498:	2295      	movs	r2, #149	; 0x95
 801949a:	213f      	movs	r1, #63	; 0x3f
 801949c:	f7ff f8ce 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80194a0:	2328      	movs	r3, #40	; 0x28
 80194a2:	8163      	strh	r3, [r4, #10]
 80194a4:	340c      	adds	r4, #12
 80194a6:	2318      	movs	r3, #24
 80194a8:	7023      	strb	r3, [r4, #0]
 80194aa:	1ca0      	adds	r0, r4, #2
 80194ac:	2328      	movs	r3, #40	; 0x28
 80194ae:	9300      	str	r3, [sp, #0]
 80194b0:	231a      	movs	r3, #26
 80194b2:	2295      	movs	r2, #149	; 0x95
 80194b4:	215b      	movs	r1, #91	; 0x5b
 80194b6:	f7ff f8c1 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80194ba:	2328      	movs	r3, #40	; 0x28
 80194bc:	8163      	strh	r3, [r4, #10]
 80194be:	340c      	adds	r4, #12
 80194c0:	2319      	movs	r3, #25
 80194c2:	7023      	strb	r3, [r4, #0]
 80194c4:	1ca0      	adds	r0, r4, #2
 80194c6:	2328      	movs	r3, #40	; 0x28
 80194c8:	9300      	str	r3, [sp, #0]
 80194ca:	231a      	movs	r3, #26
 80194cc:	2295      	movs	r2, #149	; 0x95
 80194ce:	2177      	movs	r1, #119	; 0x77
 80194d0:	f7ff f8b4 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80194d4:	2328      	movs	r3, #40	; 0x28
 80194d6:	8163      	strh	r3, [r4, #10]
 80194d8:	340c      	adds	r4, #12
 80194da:	231a      	movs	r3, #26
 80194dc:	7023      	strb	r3, [r4, #0]
 80194de:	1ca0      	adds	r0, r4, #2
 80194e0:	2328      	movs	r3, #40	; 0x28
 80194e2:	9300      	str	r3, [sp, #0]
 80194e4:	231a      	movs	r3, #26
 80194e6:	2295      	movs	r2, #149	; 0x95
 80194e8:	2193      	movs	r1, #147	; 0x93
 80194ea:	f7ff f8a7 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80194ee:	2328      	movs	r3, #40	; 0x28
 80194f0:	8163      	strh	r3, [r4, #10]
 80194f2:	340c      	adds	r4, #12
 80194f4:	231b      	movs	r3, #27
 80194f6:	7023      	strb	r3, [r4, #0]
 80194f8:	1ca0      	adds	r0, r4, #2
 80194fa:	2328      	movs	r3, #40	; 0x28
 80194fc:	9300      	str	r3, [sp, #0]
 80194fe:	231a      	movs	r3, #26
 8019500:	2295      	movs	r2, #149	; 0x95
 8019502:	21af      	movs	r1, #175	; 0xaf
 8019504:	f7ff f89a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019508:	2328      	movs	r3, #40	; 0x28
 801950a:	8163      	strh	r3, [r4, #10]
 801950c:	340c      	adds	r4, #12
 801950e:	231c      	movs	r3, #28
 8019510:	7023      	strb	r3, [r4, #0]
 8019512:	1ca0      	adds	r0, r4, #2
 8019514:	2328      	movs	r3, #40	; 0x28
 8019516:	9300      	str	r3, [sp, #0]
 8019518:	231a      	movs	r3, #26
 801951a:	2295      	movs	r2, #149	; 0x95
 801951c:	21cb      	movs	r1, #203	; 0xcb
 801951e:	f7ff f88d 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019522:	2328      	movs	r3, #40	; 0x28
 8019524:	8163      	strh	r3, [r4, #10]
 8019526:	340c      	adds	r4, #12
 8019528:	231d      	movs	r3, #29
 801952a:	7023      	strb	r3, [r4, #0]
 801952c:	1ca0      	adds	r0, r4, #2
 801952e:	2328      	movs	r3, #40	; 0x28
 8019530:	9300      	str	r3, [sp, #0]
 8019532:	231a      	movs	r3, #26
 8019534:	2295      	movs	r2, #149	; 0x95
 8019536:	21e7      	movs	r1, #231	; 0xe7
 8019538:	f7ff f880 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801953c:	2328      	movs	r3, #40	; 0x28
 801953e:	8163      	strh	r3, [r4, #10]
 8019540:	340c      	adds	r4, #12
 8019542:	231e      	movs	r3, #30
 8019544:	7023      	strb	r3, [r4, #0]
 8019546:	1ca0      	adds	r0, r4, #2
 8019548:	2328      	movs	r3, #40	; 0x28
 801954a:	9300      	str	r3, [sp, #0]
 801954c:	23fc      	movs	r3, #252	; 0xfc
 801954e:	22c1      	movs	r2, #193	; 0xc1
 8019550:	213e      	movs	r1, #62	; 0x3e
 8019552:	f7ff f873 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019556:	232b      	movs	r3, #43	; 0x2b
 8019558:	8163      	strh	r3, [r4, #10]
};
 801955a:	4c16      	ldr	r4, [pc, #88]	; (80195b4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 801955c:	4620      	mov	r0, r4
 801955e:	2328      	movs	r3, #40	; 0x28
 8019560:	9300      	str	r3, [sp, #0]
 8019562:	2338      	movs	r3, #56	; 0x38
 8019564:	2295      	movs	r2, #149	; 0x95
 8019566:	2105      	movs	r1, #5
 8019568:	f7ff f868 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801956c:	2300      	movs	r3, #0
 801956e:	60a3      	str	r3, [r4, #8]
 8019570:	232a      	movs	r3, #42	; 0x2a
 8019572:	81a3      	strh	r3, [r4, #12]
 8019574:	3410      	adds	r4, #16
 8019576:	4620      	mov	r0, r4
 8019578:	2328      	movs	r3, #40	; 0x28
 801957a:	9300      	str	r3, [sp, #0]
 801957c:	2338      	movs	r3, #56	; 0x38
 801957e:	2295      	movs	r2, #149	; 0x95
 8019580:	f44f 7181 	mov.w	r1, #258	; 0x102
 8019584:	f7ff f85a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019588:	2300      	movs	r3, #0
 801958a:	60a3      	str	r3, [r4, #8]
 801958c:	2327      	movs	r3, #39	; 0x27
 801958e:	81a3      	strh	r3, [r4, #12]
 8019590:	3410      	adds	r4, #16
 8019592:	4620      	mov	r0, r4
 8019594:	2328      	movs	r3, #40	; 0x28
 8019596:	9300      	str	r3, [sp, #0]
 8019598:	2338      	movs	r3, #56	; 0x38
 801959a:	22c1      	movs	r2, #193	; 0xc1
 801959c:	2105      	movs	r1, #5
 801959e:	f7ff f84d 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80195a2:	2300      	movs	r3, #0
 80195a4:	60a3      	str	r3, [r4, #8]
 80195a6:	2329      	movs	r3, #41	; 0x29
 80195a8:	81a3      	strh	r3, [r4, #12]
};
 80195aa:	2328      	movs	r3, #40	; 0x28
 80195ac:	9300      	str	r3, [sp, #0]
 80195ae:	e003      	b.n	80195b8 <_Z41__static_initialization_and_destruction_0ii+0x390>
 80195b0:	20005e04 	.word	0x20005e04
 80195b4:	20005f6c 	.word	0x20005f6c
 80195b8:	f44f 739a 	mov.w	r3, #308	; 0x134
 80195bc:	220a      	movs	r2, #10
 80195be:	210f      	movs	r1, #15
 80195c0:	480f      	ldr	r0, [pc, #60]	; (8019600 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80195c2:	f7ff f83b 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80195c6:	2130      	movs	r1, #48	; 0x30
 80195c8:	480e      	ldr	r0, [pc, #56]	; (8019604 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80195ca:	f7ff f875 	bl	80186b8 <_ZN8touchgfx9TypedTextC1Et>
 80195ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80195d2:	480d      	ldr	r0, [pc, #52]	; (8019608 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80195d4:	f7ff f80c 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
 80195d8:	2100      	movs	r1, #0
 80195da:	480c      	ldr	r0, [pc, #48]	; (801960c <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80195dc:	f7ff f808 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d107      	bne.n	80195f6 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80195ec:	4293      	cmp	r3, r2
 80195ee:	d102      	bne.n	80195f6 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80195f0:	4807      	ldr	r0, [pc, #28]	; (8019610 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80195f2:	f7ff f89f 	bl	8018734 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 80195f6:	bf00      	nop
 80195f8:	370c      	adds	r7, #12
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd90      	pop	{r4, r7, pc}
 80195fe:	bf00      	nop
 8019600:	20000086 	.word	0x20000086
 8019604:	20000090 	.word	0x20000090
 8019608:	20000098 	.word	0x20000098
 801960c:	200000a0 	.word	0x200000a0
 8019610:	20000074 	.word	0x20000074

08019614 <_GLOBAL__sub_I__ZN17KeyboardPresenterC2ER12KeyboardView>:
 8019614:	b580      	push	{r7, lr}
 8019616:	af00      	add	r7, sp, #0
 8019618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801961c:	2001      	movs	r0, #1
 801961e:	f7ff fe03 	bl	8019228 <_Z41__static_initialization_and_destruction_0ii>
 8019622:	bd80      	pop	{r7, pc}

08019624 <_GLOBAL__sub_D__ZN17KeyboardPresenterC2ER12KeyboardView>:
 8019624:	b580      	push	{r7, lr}
 8019626:	af00      	add	r7, sp, #0
 8019628:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801962c:	2000      	movs	r0, #0
 801962e:	f7ff fdfb 	bl	8019228 <_Z41__static_initialization_and_destruction_0ii>
 8019632:	bd80      	pop	{r7, pc}

08019634 <_Z41__static_initialization_and_destruction_0ii>:
}

void KeyboardView::AlarmOrEvent(void)
{
	static_cast<FrontendApplication*>(Application::getInstance())->gotoMainScreenNoTransition();
}
 8019634:	b590      	push	{r4, r7, lr}
 8019636:	b085      	sub	sp, #20
 8019638:	af02      	add	r7, sp, #8
 801963a:	6078      	str	r0, [r7, #4]
 801963c:	6039      	str	r1, [r7, #0]
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	2b01      	cmp	r3, #1
 8019642:	f040 81d3 	bne.w	80199ec <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801964c:	4293      	cmp	r3, r2
 801964e:	f040 81cd 	bne.w	80199ec <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 8019652:	4cda      	ldr	r4, [pc, #872]	; (80199bc <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8019654:	2301      	movs	r3, #1
 8019656:	7023      	strb	r3, [r4, #0]
 8019658:	1ca0      	adds	r0, r4, #2
 801965a:	2328      	movs	r3, #40	; 0x28
 801965c:	9300      	str	r3, [sp, #0]
 801965e:	231a      	movs	r3, #26
 8019660:	223d      	movs	r2, #61	; 0x3d
 8019662:	2107      	movs	r1, #7
 8019664:	f7fe ffea 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019668:	2328      	movs	r3, #40	; 0x28
 801966a:	8163      	strh	r3, [r4, #10]
 801966c:	340c      	adds	r4, #12
 801966e:	2302      	movs	r3, #2
 8019670:	7023      	strb	r3, [r4, #0]
 8019672:	1ca0      	adds	r0, r4, #2
 8019674:	2328      	movs	r3, #40	; 0x28
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	231a      	movs	r3, #26
 801967a:	223d      	movs	r2, #61	; 0x3d
 801967c:	2123      	movs	r1, #35	; 0x23
 801967e:	f7fe ffdd 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019682:	2328      	movs	r3, #40	; 0x28
 8019684:	8163      	strh	r3, [r4, #10]
 8019686:	340c      	adds	r4, #12
 8019688:	2303      	movs	r3, #3
 801968a:	7023      	strb	r3, [r4, #0]
 801968c:	1ca0      	adds	r0, r4, #2
 801968e:	2328      	movs	r3, #40	; 0x28
 8019690:	9300      	str	r3, [sp, #0]
 8019692:	231a      	movs	r3, #26
 8019694:	223d      	movs	r2, #61	; 0x3d
 8019696:	213f      	movs	r1, #63	; 0x3f
 8019698:	f7fe ffd0 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801969c:	2328      	movs	r3, #40	; 0x28
 801969e:	8163      	strh	r3, [r4, #10]
 80196a0:	340c      	adds	r4, #12
 80196a2:	2304      	movs	r3, #4
 80196a4:	7023      	strb	r3, [r4, #0]
 80196a6:	1ca0      	adds	r0, r4, #2
 80196a8:	2328      	movs	r3, #40	; 0x28
 80196aa:	9300      	str	r3, [sp, #0]
 80196ac:	231a      	movs	r3, #26
 80196ae:	223d      	movs	r2, #61	; 0x3d
 80196b0:	215b      	movs	r1, #91	; 0x5b
 80196b2:	f7fe ffc3 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80196b6:	2328      	movs	r3, #40	; 0x28
 80196b8:	8163      	strh	r3, [r4, #10]
 80196ba:	340c      	adds	r4, #12
 80196bc:	2305      	movs	r3, #5
 80196be:	7023      	strb	r3, [r4, #0]
 80196c0:	1ca0      	adds	r0, r4, #2
 80196c2:	2328      	movs	r3, #40	; 0x28
 80196c4:	9300      	str	r3, [sp, #0]
 80196c6:	231a      	movs	r3, #26
 80196c8:	223d      	movs	r2, #61	; 0x3d
 80196ca:	2177      	movs	r1, #119	; 0x77
 80196cc:	f7fe ffb6 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80196d0:	2328      	movs	r3, #40	; 0x28
 80196d2:	8163      	strh	r3, [r4, #10]
 80196d4:	340c      	adds	r4, #12
 80196d6:	2306      	movs	r3, #6
 80196d8:	7023      	strb	r3, [r4, #0]
 80196da:	1ca0      	adds	r0, r4, #2
 80196dc:	2328      	movs	r3, #40	; 0x28
 80196de:	9300      	str	r3, [sp, #0]
 80196e0:	231a      	movs	r3, #26
 80196e2:	223d      	movs	r2, #61	; 0x3d
 80196e4:	2193      	movs	r1, #147	; 0x93
 80196e6:	f7fe ffa9 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80196ea:	2328      	movs	r3, #40	; 0x28
 80196ec:	8163      	strh	r3, [r4, #10]
 80196ee:	340c      	adds	r4, #12
 80196f0:	2307      	movs	r3, #7
 80196f2:	7023      	strb	r3, [r4, #0]
 80196f4:	1ca0      	adds	r0, r4, #2
 80196f6:	2328      	movs	r3, #40	; 0x28
 80196f8:	9300      	str	r3, [sp, #0]
 80196fa:	231a      	movs	r3, #26
 80196fc:	223d      	movs	r2, #61	; 0x3d
 80196fe:	21af      	movs	r1, #175	; 0xaf
 8019700:	f7fe ff9c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019704:	2328      	movs	r3, #40	; 0x28
 8019706:	8163      	strh	r3, [r4, #10]
 8019708:	340c      	adds	r4, #12
 801970a:	2308      	movs	r3, #8
 801970c:	7023      	strb	r3, [r4, #0]
 801970e:	1ca0      	adds	r0, r4, #2
 8019710:	2328      	movs	r3, #40	; 0x28
 8019712:	9300      	str	r3, [sp, #0]
 8019714:	231a      	movs	r3, #26
 8019716:	223d      	movs	r2, #61	; 0x3d
 8019718:	21cb      	movs	r1, #203	; 0xcb
 801971a:	f7fe ff8f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801971e:	2328      	movs	r3, #40	; 0x28
 8019720:	8163      	strh	r3, [r4, #10]
 8019722:	340c      	adds	r4, #12
 8019724:	2309      	movs	r3, #9
 8019726:	7023      	strb	r3, [r4, #0]
 8019728:	1ca0      	adds	r0, r4, #2
 801972a:	2328      	movs	r3, #40	; 0x28
 801972c:	9300      	str	r3, [sp, #0]
 801972e:	231a      	movs	r3, #26
 8019730:	223d      	movs	r2, #61	; 0x3d
 8019732:	21e7      	movs	r1, #231	; 0xe7
 8019734:	f7fe ff82 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019738:	2328      	movs	r3, #40	; 0x28
 801973a:	8163      	strh	r3, [r4, #10]
 801973c:	340c      	adds	r4, #12
 801973e:	230a      	movs	r3, #10
 8019740:	7023      	strb	r3, [r4, #0]
 8019742:	1ca0      	adds	r0, r4, #2
 8019744:	2328      	movs	r3, #40	; 0x28
 8019746:	9300      	str	r3, [sp, #0]
 8019748:	231a      	movs	r3, #26
 801974a:	223d      	movs	r2, #61	; 0x3d
 801974c:	f240 1103 	movw	r1, #259	; 0x103
 8019750:	f7fe ff74 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019754:	2328      	movs	r3, #40	; 0x28
 8019756:	8163      	strh	r3, [r4, #10]
 8019758:	340c      	adds	r4, #12
 801975a:	230b      	movs	r3, #11
 801975c:	7023      	strb	r3, [r4, #0]
 801975e:	1ca0      	adds	r0, r4, #2
 8019760:	2328      	movs	r3, #40	; 0x28
 8019762:	9300      	str	r3, [sp, #0]
 8019764:	231a      	movs	r3, #26
 8019766:	223d      	movs	r2, #61	; 0x3d
 8019768:	f240 111f 	movw	r1, #287	; 0x11f
 801976c:	f7fe ff66 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019770:	2328      	movs	r3, #40	; 0x28
 8019772:	8163      	strh	r3, [r4, #10]
 8019774:	340c      	adds	r4, #12
 8019776:	230c      	movs	r3, #12
 8019778:	7023      	strb	r3, [r4, #0]
 801977a:	1ca0      	adds	r0, r4, #2
 801977c:	2328      	movs	r3, #40	; 0x28
 801977e:	9300      	str	r3, [sp, #0]
 8019780:	231a      	movs	r3, #26
 8019782:	2269      	movs	r2, #105	; 0x69
 8019784:	2107      	movs	r1, #7
 8019786:	f7fe ff59 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801978a:	2328      	movs	r3, #40	; 0x28
 801978c:	8163      	strh	r3, [r4, #10]
 801978e:	340c      	adds	r4, #12
 8019790:	230d      	movs	r3, #13
 8019792:	7023      	strb	r3, [r4, #0]
 8019794:	1ca0      	adds	r0, r4, #2
 8019796:	2328      	movs	r3, #40	; 0x28
 8019798:	9300      	str	r3, [sp, #0]
 801979a:	231a      	movs	r3, #26
 801979c:	2269      	movs	r2, #105	; 0x69
 801979e:	2123      	movs	r1, #35	; 0x23
 80197a0:	f7fe ff4c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80197a4:	2328      	movs	r3, #40	; 0x28
 80197a6:	8163      	strh	r3, [r4, #10]
 80197a8:	340c      	adds	r4, #12
 80197aa:	230e      	movs	r3, #14
 80197ac:	7023      	strb	r3, [r4, #0]
 80197ae:	1ca0      	adds	r0, r4, #2
 80197b0:	2328      	movs	r3, #40	; 0x28
 80197b2:	9300      	str	r3, [sp, #0]
 80197b4:	231a      	movs	r3, #26
 80197b6:	2269      	movs	r2, #105	; 0x69
 80197b8:	213f      	movs	r1, #63	; 0x3f
 80197ba:	f7fe ff3f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80197be:	2328      	movs	r3, #40	; 0x28
 80197c0:	8163      	strh	r3, [r4, #10]
 80197c2:	340c      	adds	r4, #12
 80197c4:	230f      	movs	r3, #15
 80197c6:	7023      	strb	r3, [r4, #0]
 80197c8:	1ca0      	adds	r0, r4, #2
 80197ca:	2328      	movs	r3, #40	; 0x28
 80197cc:	9300      	str	r3, [sp, #0]
 80197ce:	231a      	movs	r3, #26
 80197d0:	2269      	movs	r2, #105	; 0x69
 80197d2:	215b      	movs	r1, #91	; 0x5b
 80197d4:	f7fe ff32 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80197d8:	2328      	movs	r3, #40	; 0x28
 80197da:	8163      	strh	r3, [r4, #10]
 80197dc:	340c      	adds	r4, #12
 80197de:	2310      	movs	r3, #16
 80197e0:	7023      	strb	r3, [r4, #0]
 80197e2:	1ca0      	adds	r0, r4, #2
 80197e4:	2328      	movs	r3, #40	; 0x28
 80197e6:	9300      	str	r3, [sp, #0]
 80197e8:	231a      	movs	r3, #26
 80197ea:	2269      	movs	r2, #105	; 0x69
 80197ec:	2177      	movs	r1, #119	; 0x77
 80197ee:	f7fe ff25 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80197f2:	2328      	movs	r3, #40	; 0x28
 80197f4:	8163      	strh	r3, [r4, #10]
 80197f6:	340c      	adds	r4, #12
 80197f8:	2311      	movs	r3, #17
 80197fa:	7023      	strb	r3, [r4, #0]
 80197fc:	1ca0      	adds	r0, r4, #2
 80197fe:	2328      	movs	r3, #40	; 0x28
 8019800:	9300      	str	r3, [sp, #0]
 8019802:	231a      	movs	r3, #26
 8019804:	2269      	movs	r2, #105	; 0x69
 8019806:	2193      	movs	r1, #147	; 0x93
 8019808:	f7fe ff18 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801980c:	2328      	movs	r3, #40	; 0x28
 801980e:	8163      	strh	r3, [r4, #10]
 8019810:	340c      	adds	r4, #12
 8019812:	2312      	movs	r3, #18
 8019814:	7023      	strb	r3, [r4, #0]
 8019816:	1ca0      	adds	r0, r4, #2
 8019818:	2328      	movs	r3, #40	; 0x28
 801981a:	9300      	str	r3, [sp, #0]
 801981c:	231a      	movs	r3, #26
 801981e:	2269      	movs	r2, #105	; 0x69
 8019820:	21af      	movs	r1, #175	; 0xaf
 8019822:	f7fe ff0b 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019826:	2328      	movs	r3, #40	; 0x28
 8019828:	8163      	strh	r3, [r4, #10]
 801982a:	340c      	adds	r4, #12
 801982c:	2313      	movs	r3, #19
 801982e:	7023      	strb	r3, [r4, #0]
 8019830:	1ca0      	adds	r0, r4, #2
 8019832:	2328      	movs	r3, #40	; 0x28
 8019834:	9300      	str	r3, [sp, #0]
 8019836:	231a      	movs	r3, #26
 8019838:	2269      	movs	r2, #105	; 0x69
 801983a:	21cb      	movs	r1, #203	; 0xcb
 801983c:	f7fe fefe 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019840:	2328      	movs	r3, #40	; 0x28
 8019842:	8163      	strh	r3, [r4, #10]
 8019844:	340c      	adds	r4, #12
 8019846:	2314      	movs	r3, #20
 8019848:	7023      	strb	r3, [r4, #0]
 801984a:	1ca0      	adds	r0, r4, #2
 801984c:	2328      	movs	r3, #40	; 0x28
 801984e:	9300      	str	r3, [sp, #0]
 8019850:	231a      	movs	r3, #26
 8019852:	2269      	movs	r2, #105	; 0x69
 8019854:	21e7      	movs	r1, #231	; 0xe7
 8019856:	f7fe fef1 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801985a:	2328      	movs	r3, #40	; 0x28
 801985c:	8163      	strh	r3, [r4, #10]
 801985e:	340c      	adds	r4, #12
 8019860:	2315      	movs	r3, #21
 8019862:	7023      	strb	r3, [r4, #0]
 8019864:	1ca0      	adds	r0, r4, #2
 8019866:	2328      	movs	r3, #40	; 0x28
 8019868:	9300      	str	r3, [sp, #0]
 801986a:	231a      	movs	r3, #26
 801986c:	2269      	movs	r2, #105	; 0x69
 801986e:	f240 1103 	movw	r1, #259	; 0x103
 8019872:	f7fe fee3 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019876:	2328      	movs	r3, #40	; 0x28
 8019878:	8163      	strh	r3, [r4, #10]
 801987a:	340c      	adds	r4, #12
 801987c:	2316      	movs	r3, #22
 801987e:	7023      	strb	r3, [r4, #0]
 8019880:	1ca0      	adds	r0, r4, #2
 8019882:	2328      	movs	r3, #40	; 0x28
 8019884:	9300      	str	r3, [sp, #0]
 8019886:	231a      	movs	r3, #26
 8019888:	2269      	movs	r2, #105	; 0x69
 801988a:	f240 111f 	movw	r1, #287	; 0x11f
 801988e:	f7fe fed5 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019892:	2328      	movs	r3, #40	; 0x28
 8019894:	8163      	strh	r3, [r4, #10]
 8019896:	340c      	adds	r4, #12
 8019898:	2317      	movs	r3, #23
 801989a:	7023      	strb	r3, [r4, #0]
 801989c:	1ca0      	adds	r0, r4, #2
 801989e:	2328      	movs	r3, #40	; 0x28
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	231a      	movs	r3, #26
 80198a4:	2295      	movs	r2, #149	; 0x95
 80198a6:	213f      	movs	r1, #63	; 0x3f
 80198a8:	f7fe fec8 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80198ac:	2328      	movs	r3, #40	; 0x28
 80198ae:	8163      	strh	r3, [r4, #10]
 80198b0:	340c      	adds	r4, #12
 80198b2:	2318      	movs	r3, #24
 80198b4:	7023      	strb	r3, [r4, #0]
 80198b6:	1ca0      	adds	r0, r4, #2
 80198b8:	2328      	movs	r3, #40	; 0x28
 80198ba:	9300      	str	r3, [sp, #0]
 80198bc:	231a      	movs	r3, #26
 80198be:	2295      	movs	r2, #149	; 0x95
 80198c0:	215b      	movs	r1, #91	; 0x5b
 80198c2:	f7fe febb 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80198c6:	2328      	movs	r3, #40	; 0x28
 80198c8:	8163      	strh	r3, [r4, #10]
 80198ca:	340c      	adds	r4, #12
 80198cc:	2319      	movs	r3, #25
 80198ce:	7023      	strb	r3, [r4, #0]
 80198d0:	1ca0      	adds	r0, r4, #2
 80198d2:	2328      	movs	r3, #40	; 0x28
 80198d4:	9300      	str	r3, [sp, #0]
 80198d6:	231a      	movs	r3, #26
 80198d8:	2295      	movs	r2, #149	; 0x95
 80198da:	2177      	movs	r1, #119	; 0x77
 80198dc:	f7fe feae 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80198e0:	2328      	movs	r3, #40	; 0x28
 80198e2:	8163      	strh	r3, [r4, #10]
 80198e4:	340c      	adds	r4, #12
 80198e6:	231a      	movs	r3, #26
 80198e8:	7023      	strb	r3, [r4, #0]
 80198ea:	1ca0      	adds	r0, r4, #2
 80198ec:	2328      	movs	r3, #40	; 0x28
 80198ee:	9300      	str	r3, [sp, #0]
 80198f0:	231a      	movs	r3, #26
 80198f2:	2295      	movs	r2, #149	; 0x95
 80198f4:	2193      	movs	r1, #147	; 0x93
 80198f6:	f7fe fea1 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80198fa:	2328      	movs	r3, #40	; 0x28
 80198fc:	8163      	strh	r3, [r4, #10]
 80198fe:	340c      	adds	r4, #12
 8019900:	231b      	movs	r3, #27
 8019902:	7023      	strb	r3, [r4, #0]
 8019904:	1ca0      	adds	r0, r4, #2
 8019906:	2328      	movs	r3, #40	; 0x28
 8019908:	9300      	str	r3, [sp, #0]
 801990a:	231a      	movs	r3, #26
 801990c:	2295      	movs	r2, #149	; 0x95
 801990e:	21af      	movs	r1, #175	; 0xaf
 8019910:	f7fe fe94 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019914:	2328      	movs	r3, #40	; 0x28
 8019916:	8163      	strh	r3, [r4, #10]
 8019918:	340c      	adds	r4, #12
 801991a:	231c      	movs	r3, #28
 801991c:	7023      	strb	r3, [r4, #0]
 801991e:	1ca0      	adds	r0, r4, #2
 8019920:	2328      	movs	r3, #40	; 0x28
 8019922:	9300      	str	r3, [sp, #0]
 8019924:	231a      	movs	r3, #26
 8019926:	2295      	movs	r2, #149	; 0x95
 8019928:	21cb      	movs	r1, #203	; 0xcb
 801992a:	f7fe fe87 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801992e:	2328      	movs	r3, #40	; 0x28
 8019930:	8163      	strh	r3, [r4, #10]
 8019932:	340c      	adds	r4, #12
 8019934:	231d      	movs	r3, #29
 8019936:	7023      	strb	r3, [r4, #0]
 8019938:	1ca0      	adds	r0, r4, #2
 801993a:	2328      	movs	r3, #40	; 0x28
 801993c:	9300      	str	r3, [sp, #0]
 801993e:	231a      	movs	r3, #26
 8019940:	2295      	movs	r2, #149	; 0x95
 8019942:	21e7      	movs	r1, #231	; 0xe7
 8019944:	f7fe fe7a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019948:	2328      	movs	r3, #40	; 0x28
 801994a:	8163      	strh	r3, [r4, #10]
 801994c:	340c      	adds	r4, #12
 801994e:	231e      	movs	r3, #30
 8019950:	7023      	strb	r3, [r4, #0]
 8019952:	1ca0      	adds	r0, r4, #2
 8019954:	2328      	movs	r3, #40	; 0x28
 8019956:	9300      	str	r3, [sp, #0]
 8019958:	23fc      	movs	r3, #252	; 0xfc
 801995a:	22c1      	movs	r2, #193	; 0xc1
 801995c:	213e      	movs	r1, #62	; 0x3e
 801995e:	f7fe fe6d 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019962:	232b      	movs	r3, #43	; 0x2b
 8019964:	8163      	strh	r3, [r4, #10]
};
 8019966:	4c16      	ldr	r4, [pc, #88]	; (80199c0 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019968:	4620      	mov	r0, r4
 801996a:	2328      	movs	r3, #40	; 0x28
 801996c:	9300      	str	r3, [sp, #0]
 801996e:	2338      	movs	r3, #56	; 0x38
 8019970:	2295      	movs	r2, #149	; 0x95
 8019972:	2105      	movs	r1, #5
 8019974:	f7fe fe62 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019978:	2300      	movs	r3, #0
 801997a:	60a3      	str	r3, [r4, #8]
 801997c:	232a      	movs	r3, #42	; 0x2a
 801997e:	81a3      	strh	r3, [r4, #12]
 8019980:	3410      	adds	r4, #16
 8019982:	4620      	mov	r0, r4
 8019984:	2328      	movs	r3, #40	; 0x28
 8019986:	9300      	str	r3, [sp, #0]
 8019988:	2338      	movs	r3, #56	; 0x38
 801998a:	2295      	movs	r2, #149	; 0x95
 801998c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8019990:	f7fe fe54 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 8019994:	2300      	movs	r3, #0
 8019996:	60a3      	str	r3, [r4, #8]
 8019998:	2327      	movs	r3, #39	; 0x27
 801999a:	81a3      	strh	r3, [r4, #12]
 801999c:	3410      	adds	r4, #16
 801999e:	4620      	mov	r0, r4
 80199a0:	2328      	movs	r3, #40	; 0x28
 80199a2:	9300      	str	r3, [sp, #0]
 80199a4:	2338      	movs	r3, #56	; 0x38
 80199a6:	22c1      	movs	r2, #193	; 0xc1
 80199a8:	2105      	movs	r1, #5
 80199aa:	f7fe fe47 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80199ae:	2300      	movs	r3, #0
 80199b0:	60a3      	str	r3, [r4, #8]
 80199b2:	2329      	movs	r3, #41	; 0x29
 80199b4:	81a3      	strh	r3, [r4, #12]
};
 80199b6:	2328      	movs	r3, #40	; 0x28
 80199b8:	9300      	str	r3, [sp, #0]
 80199ba:	e003      	b.n	80199c4 <_Z41__static_initialization_and_destruction_0ii+0x390>
 80199bc:	20005f9c 	.word	0x20005f9c
 80199c0:	20006104 	.word	0x20006104
 80199c4:	f44f 739a 	mov.w	r3, #308	; 0x134
 80199c8:	220a      	movs	r2, #10
 80199ca:	210f      	movs	r1, #15
 80199cc:	480f      	ldr	r0, [pc, #60]	; (8019a0c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80199ce:	f7fe fe35 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 80199d2:	2130      	movs	r1, #48	; 0x30
 80199d4:	480e      	ldr	r0, [pc, #56]	; (8019a10 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80199d6:	f7fe fe6f 	bl	80186b8 <_ZN8touchgfx9TypedTextC1Et>
 80199da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80199de:	480d      	ldr	r0, [pc, #52]	; (8019a14 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80199e0:	f7fe fe06 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
 80199e4:	2100      	movs	r1, #0
 80199e6:	480c      	ldr	r0, [pc, #48]	; (8019a18 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80199e8:	f7fe fe02 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d107      	bne.n	8019a02 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80199f2:	683b      	ldr	r3, [r7, #0]
 80199f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80199f8:	4293      	cmp	r3, r2
 80199fa:	d102      	bne.n	8019a02 <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 80199fc:	4807      	ldr	r0, [pc, #28]	; (8019a1c <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80199fe:	f7fe fe99 	bl	8018734 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 8019a02:	bf00      	nop
 8019a04:	370c      	adds	r7, #12
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd90      	pop	{r4, r7, pc}
 8019a0a:	bf00      	nop
 8019a0c:	200000b6 	.word	0x200000b6
 8019a10:	200000c0 	.word	0x200000c0
 8019a14:	200000c8 	.word	0x200000c8
 8019a18:	200000d0 	.word	0x200000d0
 8019a1c:	200000a4 	.word	0x200000a4

08019a20 <_GLOBAL__sub_I__ZN12KeyboardViewC2Ev>:
 8019a20:	b580      	push	{r7, lr}
 8019a22:	af00      	add	r7, sp, #0
 8019a24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019a28:	2001      	movs	r0, #1
 8019a2a:	f7ff fe03 	bl	8019634 <_Z41__static_initialization_and_destruction_0ii>
 8019a2e:	bd80      	pop	{r7, pc}

08019a30 <_GLOBAL__sub_D__ZN12KeyboardViewC2Ev>:
 8019a30:	b580      	push	{r7, lr}
 8019a32:	af00      	add	r7, sp, #0
 8019a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019a38:	2000      	movs	r0, #0
 8019a3a:	f7ff fdfb 	bl	8019634 <_Z41__static_initialization_and_destruction_0ii>
 8019a3e:	bd80      	pop	{r7, pc}

08019a40 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8019a40:	b480      	push	{r7}
 8019a42:	b083      	sub	sp, #12
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
    {
 8019a48:	4a04      	ldr	r2, [pc, #16]	; (8019a5c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	601a      	str	r2, [r3, #0]
    }
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	4618      	mov	r0, r3
 8019a52:	370c      	adds	r7, #12
 8019a54:	46bd      	mov	sp, r7
 8019a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5a:	4770      	bx	lr
 8019a5c:	08024a08 	.word	0x08024a08

08019a60 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b082      	sub	sp, #8
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
    }
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f7ff ffe9 	bl	8019a40 <_ZN8touchgfx15TouchControllerD1Ev>
 8019a6e:	2104      	movs	r1, #4
 8019a70:	6878      	ldr	r0, [r7, #4]
 8019a72:	f007 fad5 	bl	8021020 <_ZdlPvj>
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	4618      	mov	r0, r3
 8019a7a:	3708      	adds	r7, #8
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd80      	pop	{r7, pc}

08019a80 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8019a80:	b480      	push	{r7}
 8019a82:	b083      	sub	sp, #12
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8019a88:	bf00      	nop
 8019a8a:	370c      	adds	r7, #12
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a92:	4770      	bx	lr

08019a94 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8019a94:	b480      	push	{r7}
 8019a96:	b085      	sub	sp, #20
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	60f8      	str	r0, [r7, #12]
 8019a9c:	60b9      	str	r1, [r7, #8]
 8019a9e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8019aa0:	2300      	movs	r3, #0
}
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	3714      	adds	r7, #20
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aac:	4770      	bx	lr
	...

08019ab0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b082      	sub	sp, #8
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
 8019ab8:	4a05      	ldr	r2, [pc, #20]	; (8019ad0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	601a      	str	r2, [r3, #0]
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7ff ffbd 	bl	8019a40 <_ZN8touchgfx15TouchControllerD1Ev>
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	4618      	mov	r0, r3
 8019aca:	3708      	adds	r7, #8
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}
 8019ad0:	080249f0 	.word	0x080249f0

08019ad4 <_ZN20STM32TouchControllerD0Ev>:
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6878      	ldr	r0, [r7, #4]
 8019ade:	f7ff ffe7 	bl	8019ab0 <_ZN20STM32TouchControllerD1Ev>
 8019ae2:	2104      	movs	r1, #4
 8019ae4:	6878      	ldr	r0, [r7, #4]
 8019ae6:	f007 fa9b 	bl	8021020 <_ZdlPvj>
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	4618      	mov	r0, r3
 8019aee:	3708      	adds	r7, #8
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}

08019af4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8019af4:	b480      	push	{r7}
 8019af6:	b083      	sub	sp, #12
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	4603      	mov	r3, r0
 8019afc:	71fb      	strb	r3, [r7, #7]

}
 8019afe:	bf00      	nop
 8019b00:	370c      	adds	r7, #12
 8019b02:	46bd      	mov	sp, r7
 8019b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b08:	4770      	bx	lr

08019b0a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8019b0a:	b480      	push	{r7}
 8019b0c:	b083      	sub	sp, #12
 8019b0e:	af00      	add	r7, sp, #0
 8019b10:	4603      	mov	r3, r0
 8019b12:	71fb      	strb	r3, [r7, #7]

}
 8019b14:	bf00      	nop
 8019b16:	370c      	adds	r7, #12
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1e:	4770      	bx	lr

08019b20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8019b20:	b480      	push	{r7}
 8019b22:	b083      	sub	sp, #12
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	4603      	mov	r3, r0
 8019b28:	71fb      	strb	r3, [r7, #7]

}
 8019b2a:	bf00      	nop
 8019b2c:	370c      	adds	r7, #12
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b34:	4770      	bx	lr
	...

08019b38 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8019b38:	b480      	push	{r7}
 8019b3a:	b083      	sub	sp, #12
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
    {
 8019b40:	4a04      	ldr	r2, [pc, #16]	; (8019b54 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	601a      	str	r2, [r3, #0]
    }
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	4618      	mov	r0, r3
 8019b4a:	370c      	adds	r7, #12
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b52:	4770      	bx	lr
 8019b54:	08024ec8 	.word	0x08024ec8

08019b58 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b082      	sub	sp, #8
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
    }
 8019b60:	6878      	ldr	r0, [r7, #4]
 8019b62:	f7ff ffe9 	bl	8019b38 <_ZN8touchgfx3HALD1Ev>
 8019b66:	217c      	movs	r1, #124	; 0x7c
 8019b68:	6878      	ldr	r0, [r7, #4]
 8019b6a:	f007 fa59 	bl	8021020 <_ZdlPvj>
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	4618      	mov	r0, r3
 8019b72:	3708      	adds	r7, #8
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}

08019b78 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8019b78:	b480      	push	{r7}
 8019b7a:	b083      	sub	sp, #12
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
 8019b80:	460b      	mov	r3, r1
 8019b82:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	78fa      	ldrb	r2, [r7, #3]
 8019b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	2201      	movs	r2, #1
 8019b90:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8019b94:	bf00      	nop
 8019b96:	370c      	adds	r7, #12
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9e:	4770      	bx	lr

08019ba0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b082      	sub	sp, #8
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	6078      	str	r0, [r7, #4]
 8019ba8:	460b      	mov	r3, r1
 8019baa:	807b      	strh	r3, [r7, #2]
 8019bac:	4613      	mov	r3, r2
 8019bae:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8019bb0:	4b0c      	ldr	r3, [pc, #48]	; (8019be4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8019bb2:	881b      	ldrh	r3, [r3, #0]
 8019bb4:	887a      	ldrh	r2, [r7, #2]
 8019bb6:	429a      	cmp	r2, r3
 8019bb8:	d304      	bcc.n	8019bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8019bba:	4b0b      	ldr	r3, [pc, #44]	; (8019be8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8019bbc:	881b      	ldrh	r3, [r3, #0]
 8019bbe:	883a      	ldrh	r2, [r7, #0]
 8019bc0:	429a      	cmp	r2, r3
 8019bc2:	d205      	bcs.n	8019bd0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8019bc4:	4b09      	ldr	r3, [pc, #36]	; (8019bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8019bc6:	4a0a      	ldr	r2, [pc, #40]	; (8019bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8019bc8:	219e      	movs	r1, #158	; 0x9e
 8019bca:	480a      	ldr	r0, [pc, #40]	; (8019bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8019bcc:	f007 fa56 	bl	802107c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8019bd0:	4a09      	ldr	r2, [pc, #36]	; (8019bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8019bd2:	887b      	ldrh	r3, [r7, #2]
 8019bd4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8019bd6:	4a09      	ldr	r2, [pc, #36]	; (8019bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8019bd8:	883b      	ldrh	r3, [r7, #0]
 8019bda:	8013      	strh	r3, [r2, #0]
    }
 8019bdc:	bf00      	nop
 8019bde:	3708      	adds	r7, #8
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}
 8019be4:	2000730a 	.word	0x2000730a
 8019be8:	2000730c 	.word	0x2000730c
 8019bec:	080242e4 	.word	0x080242e4
 8019bf0:	08024348 	.word	0x08024348
 8019bf4:	0802438c 	.word	0x0802438c
 8019bf8:	20007310 	.word	0x20007310
 8019bfc:	20007312 	.word	0x20007312

08019c00 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b082      	sub	sp, #8
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d009      	beq.n	8019c26 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	685a      	ldr	r2, [r3, #4]
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	685b      	ldr	r3, [r3, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	4610      	mov	r0, r2
 8019c20:	4798      	blx	r3
 8019c22:	4603      	mov	r3, r0
 8019c24:	e000      	b.n	8019c28 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8019c26:	2300      	movs	r3, #0
    }
 8019c28:	4618      	mov	r0, r3
 8019c2a:	3708      	adds	r7, #8
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	bd80      	pop	{r7, pc}

08019c30 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b082      	sub	sp, #8
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8019c38:	6878      	ldr	r0, [r7, #4]
 8019c3a:	f002 fe3f 	bl	801c8bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	33ac      	adds	r3, #172	; 0xac
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	6878      	ldr	r0, [r7, #4]
 8019c48:	4798      	blx	r3
    }
 8019c4a:	bf00      	nop
 8019c4c:	3708      	adds	r7, #8
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}

08019c52 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8019c52:	b480      	push	{r7}
 8019c54:	b083      	sub	sp, #12
 8019c56:	af00      	add	r7, sp, #0
 8019c58:	6078      	str	r0, [r7, #4]
 8019c5a:	6039      	str	r1, [r7, #0]
    {
        return false;
 8019c5c:	2300      	movs	r3, #0
    }
 8019c5e:	4618      	mov	r0, r3
 8019c60:	370c      	adds	r7, #12
 8019c62:	46bd      	mov	sp, r7
 8019c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c68:	4770      	bx	lr
	...

08019c6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	60f8      	str	r0, [r7, #12]
 8019c74:	60b9      	str	r1, [r7, #8]
 8019c76:	607a      	str	r2, [r7, #4]
 8019c78:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d106      	bne.n	8019c8e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8019c80:	4b0f      	ldr	r3, [pc, #60]	; (8019cc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8019c82:	4a10      	ldr	r2, [pc, #64]	; (8019cc4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8019c84:	f240 21bb 	movw	r1, #699	; 0x2bb
 8019c88:	480f      	ldr	r0, [pc, #60]	; (8019cc8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8019c8a:	f007 f9f7 	bl	802107c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	68ba      	ldr	r2, [r7, #8]
 8019c92:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	687a      	ldr	r2, [r7, #4]
 8019c98:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	bf14      	ite	ne
 8019ca0:	2301      	movne	r3, #1
 8019ca2:	2300      	moveq	r3, #0
 8019ca4:	b2da      	uxtb	r2, r3
 8019ca6:	4b09      	ldr	r3, [pc, #36]	; (8019ccc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8019ca8:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	338c      	adds	r3, #140	; 0x8c
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	6839      	ldr	r1, [r7, #0]
 8019cb4:	68f8      	ldr	r0, [r7, #12]
 8019cb6:	4798      	blx	r3
    }
 8019cb8:	bf00      	nop
 8019cba:	3710      	adds	r7, #16
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	bd80      	pop	{r7, pc}
 8019cc0:	080243d0 	.word	0x080243d0
 8019cc4:	08024408 	.word	0x08024408
 8019cc8:	0802438c 	.word	0x0802438c
 8019ccc:	20007314 	.word	0x20007314

08019cd0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8019cd0:	b480      	push	{r7}
 8019cd2:	b083      	sub	sp, #12
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
 8019cd8:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	683a      	ldr	r2, [r7, #0]
 8019cde:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	bf14      	ite	ne
 8019ce6:	2301      	movne	r3, #1
 8019ce8:	2300      	moveq	r3, #0
 8019cea:	b2da      	uxtb	r2, r3
 8019cec:	4b03      	ldr	r3, [pc, #12]	; (8019cfc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8019cee:	701a      	strb	r2, [r3, #0]
    }
 8019cf0:	bf00      	nop
 8019cf2:	370c      	adds	r7, #12
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfa:	4770      	bx	lr
 8019cfc:	20007315 	.word	0x20007315

08019d00 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8019d00:	b480      	push	{r7}
 8019d02:	b083      	sub	sp, #12
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8019d08:	2300      	movs	r3, #0
    }
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	370c      	adds	r7, #12
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d14:	4770      	bx	lr

08019d16 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8019d16:	b580      	push	{r7, lr}
 8019d18:	b082      	sub	sp, #8
 8019d1a:	af00      	add	r7, sp, #0
 8019d1c:	6078      	str	r0, [r7, #4]
 8019d1e:	460b      	mov	r3, r1
 8019d20:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d004      	beq.n	8019d34 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d2e:	887a      	ldrh	r2, [r7, #2]
 8019d30:	4610      	mov	r0, r2
 8019d32:	4798      	blx	r3
        }
    }
 8019d34:	bf00      	nop
 8019d36:	3708      	adds	r7, #8
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}

08019d3c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b082      	sub	sp, #8
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	685a      	ldr	r2, [r3, #4]
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	685b      	ldr	r3, [r3, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	3318      	adds	r3, #24
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	4610      	mov	r0, r2
 8019d54:	4798      	blx	r3
 8019d56:	4603      	mov	r3, r0
    }
 8019d58:	4618      	mov	r0, r3
 8019d5a:	3708      	adds	r7, #8
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	bd80      	pop	{r7, pc}

08019d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8019d60:	b480      	push	{r7}
 8019d62:	b085      	sub	sp, #20
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019d74:	429a      	cmp	r2, r3
 8019d76:	d011      	beq.n	8019d9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8019d78:	4b14      	ldr	r3, [pc, #80]	; (8019dcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8019d7a:	781b      	ldrb	r3, [r3, #0]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d11e      	bne.n	8019dbe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8019d80:	4b13      	ldr	r3, [pc, #76]	; (8019dd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8019d82:	881b      	ldrh	r3, [r3, #0]
 8019d84:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8019d86:	4b13      	ldr	r3, [pc, #76]	; (8019dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8019d88:	881a      	ldrh	r2, [r3, #0]
 8019d8a:	4b11      	ldr	r3, [pc, #68]	; (8019dd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8019d8c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8019d8e:	4a11      	ldr	r2, [pc, #68]	; (8019dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8019d90:	89bb      	ldrh	r3, [r7, #12]
 8019d92:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8019d94:	4b0d      	ldr	r3, [pc, #52]	; (8019dcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8019d96:	2201      	movs	r2, #1
 8019d98:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8019d9a:	e010      	b.n	8019dbe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8019d9c:	4b0b      	ldr	r3, [pc, #44]	; (8019dcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d00c      	beq.n	8019dbe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8019da4:	4b0a      	ldr	r3, [pc, #40]	; (8019dd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8019da6:	881b      	ldrh	r3, [r3, #0]
 8019da8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8019daa:	4b0a      	ldr	r3, [pc, #40]	; (8019dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8019dac:	881a      	ldrh	r2, [r3, #0]
 8019dae:	4b08      	ldr	r3, [pc, #32]	; (8019dd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8019db0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8019db2:	4a08      	ldr	r2, [pc, #32]	; (8019dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8019db4:	89fb      	ldrh	r3, [r7, #14]
 8019db6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8019db8:	4b04      	ldr	r3, [pc, #16]	; (8019dcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8019dba:	2200      	movs	r2, #0
 8019dbc:	701a      	strb	r2, [r3, #0]
    }
 8019dbe:	bf00      	nop
 8019dc0:	3714      	adds	r7, #20
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc8:	4770      	bx	lr
 8019dca:	bf00      	nop
 8019dcc:	2000730e 	.word	0x2000730e
 8019dd0:	2000730c 	.word	0x2000730c
 8019dd4:	2000730a 	.word	0x2000730a

08019dd8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b082      	sub	sp, #8
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	4618      	mov	r0, r3
 8019de4:	f001 fef4 	bl	801bbd0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8019de8:	bf00      	nop
 8019dea:	3708      	adds	r7, #8
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd80      	pop	{r7, pc}

08019df0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b082      	sub	sp, #8
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	4a05      	ldr	r2, [pc, #20]	; (8019e10 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	601a      	str	r2, [r3, #0]
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	4618      	mov	r0, r3
 8019e02:	f7ff fe99 	bl	8019b38 <_ZN8touchgfx3HALD1Ev>
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	4618      	mov	r0, r3
 8019e0a:	3708      	adds	r7, #8
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	bd80      	pop	{r7, pc}
 8019e10:	08024b6c 	.word	0x08024b6c

08019e14 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b082      	sub	sp, #8
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
 8019e1c:	6878      	ldr	r0, [r7, #4]
 8019e1e:	f7ff ffe7 	bl	8019df0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8019e22:	217c      	movs	r1, #124	; 0x7c
 8019e24:	6878      	ldr	r0, [r7, #4]
 8019e26:	f007 f8fb 	bl	8021020 <_ZdlPvj>
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	3708      	adds	r7, #8
 8019e30:	46bd      	mov	sp, r7
 8019e32:	bd80      	pop	{r7, pc}

08019e34 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b082      	sub	sp, #8
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7ff ffca 	bl	8019dd8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8019e44:	bf00      	nop
 8019e46:	3708      	adds	r7, #8
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	bd80      	pop	{r7, pc}

08019e4c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b082      	sub	sp, #8
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	4618      	mov	r0, r3
 8019e58:	f001 f9f0 	bl	801b23c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8019e5c:	bf00      	nop
 8019e5e:	3708      	adds	r7, #8
 8019e60:	46bd      	mov	sp, r7
 8019e62:	bd80      	pop	{r7, pc}

08019e64 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8019e64:	b580      	push	{r7, lr}
 8019e66:	b082      	sub	sp, #8
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f001 fa90 	bl	801b394 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8019e74:	4603      	mov	r3, r0
}
 8019e76:	4618      	mov	r0, r3
 8019e78:	3708      	adds	r7, #8
 8019e7a:	46bd      	mov	sp, r7
 8019e7c:	bd80      	pop	{r7, pc}

08019e7e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8019e7e:	b580      	push	{r7, lr}
 8019e80:	b082      	sub	sp, #8
 8019e82:	af00      	add	r7, sp, #0
 8019e84:	6078      	str	r0, [r7, #4]
 8019e86:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	6839      	ldr	r1, [r7, #0]
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f001 fa8f 	bl	801b3b0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8019e92:	bf00      	nop
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}

08019e9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8019e9a:	b580      	push	{r7, lr}
 8019e9c:	b082      	sub	sp, #8
 8019e9e:	af00      	add	r7, sp, #0
 8019ea0:	6078      	str	r0, [r7, #4]
 8019ea2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	6839      	ldr	r1, [r7, #0]
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	f001 fa97 	bl	801b3dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8019eae:	bf00      	nop
 8019eb0:	3708      	adds	r7, #8
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bd80      	pop	{r7, pc}

08019eb6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8019eb6:	b580      	push	{r7, lr}
 8019eb8:	b084      	sub	sp, #16
 8019eba:	af00      	add	r7, sp, #0
 8019ebc:	60f8      	str	r0, [r7, #12]
 8019ebe:	60b9      	str	r1, [r7, #8]
 8019ec0:	607a      	str	r2, [r7, #4]
 8019ec2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8019ec4:	68f8      	ldr	r0, [r7, #12]
 8019ec6:	683b      	ldr	r3, [r7, #0]
 8019ec8:	687a      	ldr	r2, [r7, #4]
 8019eca:	68b9      	ldr	r1, [r7, #8]
 8019ecc:	f001 fade 	bl	801b48c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8019ed0:	4603      	mov	r3, r0
}
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	3710      	adds	r7, #16
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}

08019eda <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8019eda:	b580      	push	{r7, lr}
 8019edc:	b082      	sub	sp, #8
 8019ede:	af00      	add	r7, sp, #0
 8019ee0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	f001 f9d7 	bl	801b298 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8019eea:	bf00      	nop
 8019eec:	3708      	adds	r7, #8
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	bd80      	pop	{r7, pc}

08019ef2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8019ef2:	b580      	push	{r7, lr}
 8019ef4:	b082      	sub	sp, #8
 8019ef6:	af00      	add	r7, sp, #0
 8019ef8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	4618      	mov	r0, r3
 8019efe:	f001 f9db 	bl	801b2b8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8019f02:	bf00      	nop
 8019f04:	3708      	adds	r7, #8
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bd80      	pop	{r7, pc}

08019f0a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8019f0a:	b580      	push	{r7, lr}
 8019f0c:	b082      	sub	sp, #8
 8019f0e:	af00      	add	r7, sp, #0
 8019f10:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	4618      	mov	r0, r3
 8019f16:	f001 f9dd 	bl	801b2d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8019f1a:	bf00      	nop
 8019f1c:	3708      	adds	r7, #8
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	bd80      	pop	{r7, pc}

08019f22 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8019f22:	b580      	push	{r7, lr}
 8019f24:	b082      	sub	sp, #8
 8019f26:	af00      	add	r7, sp, #0
 8019f28:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f001 f9df 	bl	801b2f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8019f32:	bf00      	nop
 8019f34:	3708      	adds	r7, #8
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
	...

08019f3c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b082      	sub	sp, #8
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
 8019f44:	4a05      	ldr	r2, [pc, #20]	; (8019f5c <_ZN11TouchGFXHALD1Ev+0x20>)
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	601a      	str	r2, [r3, #0]
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	f7ff ff4f 	bl	8019df0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	4618      	mov	r0, r3
 8019f56:	3708      	adds	r7, #8
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}
 8019f5c:	08024a20 	.word	0x08024a20

08019f60 <_ZN11TouchGFXHALD0Ev>:
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b082      	sub	sp, #8
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	6878      	ldr	r0, [r7, #4]
 8019f6a:	f7ff ffe7 	bl	8019f3c <_ZN11TouchGFXHALD1Ev>
 8019f6e:	217c      	movs	r1, #124	; 0x7c
 8019f70:	6878      	ldr	r0, [r7, #4]
 8019f72:	f007 f855 	bl	8021020 <_ZdlPvj>
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	4618      	mov	r0, r3
 8019f7a:	3708      	adds	r7, #8
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bd80      	pop	{r7, pc}

08019f80 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8019f80:	b580      	push	{r7, lr}
 8019f82:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8019f84:	2200      	movs	r2, #0
 8019f86:	2101      	movs	r1, #1
 8019f88:	2001      	movs	r0, #1
 8019f8a:	f7fa fa47 	bl	801441c <osSemaphoreNew>
 8019f8e:	4603      	mov	r3, r0
 8019f90:	4a0f      	ldr	r2, [pc, #60]	; (8019fd0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8019f92:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8019f94:	4b0e      	ldr	r3, [pc, #56]	; (8019fd0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d105      	bne.n	8019fa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8019f9c:	4b0d      	ldr	r3, [pc, #52]	; (8019fd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8019f9e:	4a0e      	ldr	r2, [pc, #56]	; (8019fd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8019fa0:	2129      	movs	r1, #41	; 0x29
 8019fa2:	480e      	ldr	r0, [pc, #56]	; (8019fdc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8019fa4:	f007 f86a 	bl	802107c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8019fa8:	2200      	movs	r2, #0
 8019faa:	2104      	movs	r1, #4
 8019fac:	2001      	movs	r0, #1
 8019fae:	f7fa fb79 	bl	80146a4 <osMessageQueueNew>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	4a0a      	ldr	r2, [pc, #40]	; (8019fe0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8019fb6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8019fb8:	4b09      	ldr	r3, [pc, #36]	; (8019fe0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d105      	bne.n	8019fcc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8019fc0:	4b08      	ldr	r3, [pc, #32]	; (8019fe4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8019fc2:	4a05      	ldr	r2, [pc, #20]	; (8019fd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8019fc4:	212d      	movs	r1, #45	; 0x2d
 8019fc6:	4805      	ldr	r0, [pc, #20]	; (8019fdc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8019fc8:	f007 f858 	bl	802107c <__assert_func>
}
 8019fcc:	bf00      	nop
 8019fce:	bd80      	pop	{r7, pc}
 8019fd0:	20006134 	.word	0x20006134
 8019fd4:	08024458 	.word	0x08024458
 8019fd8:	080244a4 	.word	0x080244a4
 8019fdc:	080244d4 	.word	0x080244d4
 8019fe0:	20006138 	.word	0x20006138
 8019fe4:	08024500 	.word	0x08024500

08019fe8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8019fe8:	b580      	push	{r7, lr}
 8019fea:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8019fec:	4b04      	ldr	r3, [pc, #16]	; (801a000 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	f7fa fa9b 	bl	8014530 <osSemaphoreAcquire>
}
 8019ffa:	bf00      	nop
 8019ffc:	bd80      	pop	{r7, pc}
 8019ffe:	bf00      	nop
 801a000:	20006134 	.word	0x20006134

0801a004 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801a004:	b580      	push	{r7, lr}
 801a006:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801a008:	4b03      	ldr	r3, [pc, #12]	; (801a018 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	4618      	mov	r0, r3
 801a00e:	f7fa fae1 	bl	80145d4 <osSemaphoreRelease>
}
 801a012:	bf00      	nop
 801a014:	bd80      	pop	{r7, pc}
 801a016:	bf00      	nop
 801a018:	20006134 	.word	0x20006134

0801a01c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 801a020:	4b03      	ldr	r3, [pc, #12]	; (801a030 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	2100      	movs	r1, #0
 801a026:	4618      	mov	r0, r3
 801a028:	f7fa fa82 	bl	8014530 <osSemaphoreAcquire>
}
 801a02c:	bf00      	nop
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	20006134 	.word	0x20006134

0801a034 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801a034:	b580      	push	{r7, lr}
 801a036:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801a038:	4b03      	ldr	r3, [pc, #12]	; (801a048 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	4618      	mov	r0, r3
 801a03e:	f7fa fac9 	bl	80145d4 <osSemaphoreRelease>
}
 801a042:	bf00      	nop
 801a044:	bd80      	pop	{r7, pc}
 801a046:	bf00      	nop
 801a048:	20006134 	.word	0x20006134

0801a04c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 801a050:	4b04      	ldr	r3, [pc, #16]	; (801a064 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 801a052:	6818      	ldr	r0, [r3, #0]
 801a054:	2300      	movs	r3, #0
 801a056:	2200      	movs	r2, #0
 801a058:	4903      	ldr	r1, [pc, #12]	; (801a068 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 801a05a:	f7fa fb97 	bl	801478c <osMessageQueuePut>
}
 801a05e:	bf00      	nop
 801a060:	bd80      	pop	{r7, pc}
 801a062:	bf00      	nop
 801a064:	20006138 	.word	0x20006138
 801a068:	200000d4 	.word	0x200000d4

0801a06c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b082      	sub	sp, #8
 801a070:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 801a072:	4b09      	ldr	r3, [pc, #36]	; (801a098 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801a074:	6818      	ldr	r0, [r3, #0]
 801a076:	1d39      	adds	r1, r7, #4
 801a078:	2300      	movs	r3, #0
 801a07a:	2200      	movs	r2, #0
 801a07c:	f7fa fbe6 	bl	801484c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 801a080:	4b05      	ldr	r3, [pc, #20]	; (801a098 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801a082:	6818      	ldr	r0, [r3, #0]
 801a084:	1d39      	adds	r1, r7, #4
 801a086:	f04f 33ff 	mov.w	r3, #4294967295
 801a08a:	2200      	movs	r2, #0
 801a08c:	f7fa fbde 	bl	801484c <osMessageQueueGet>
}
 801a090:	bf00      	nop
 801a092:	3708      	adds	r7, #8
 801a094:	46bd      	mov	sp, r7
 801a096:	bd80      	pop	{r7, pc}
 801a098:	20006138 	.word	0x20006138

0801a09c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b082      	sub	sp, #8
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 801a0a6:	88fb      	ldrh	r3, [r7, #6]
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7fa f99c 	bl	80143e6 <osDelay>
}
 801a0ae:	bf00      	nop
 801a0b0:	3708      	adds	r7, #8
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
	...

0801a0b8 <__NVIC_DisableIRQ>:
{
 801a0b8:	b480      	push	{r7}
 801a0ba:	b083      	sub	sp, #12
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	4603      	mov	r3, r0
 801a0c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a0c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	db12      	blt.n	801a0f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a0ca:	88fb      	ldrh	r3, [r7, #6]
 801a0cc:	f003 021f 	and.w	r2, r3, #31
 801a0d0:	490a      	ldr	r1, [pc, #40]	; (801a0fc <__NVIC_DisableIRQ+0x44>)
 801a0d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a0d6:	095b      	lsrs	r3, r3, #5
 801a0d8:	2001      	movs	r0, #1
 801a0da:	fa00 f202 	lsl.w	r2, r0, r2
 801a0de:	3320      	adds	r3, #32
 801a0e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801a0e4:	f3bf 8f4f 	dsb	sy
}
 801a0e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a0ea:	f3bf 8f6f 	isb	sy
}
 801a0ee:	bf00      	nop
}
 801a0f0:	bf00      	nop
 801a0f2:	370c      	adds	r7, #12
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fa:	4770      	bx	lr
 801a0fc:	e000e100 	.word	0xe000e100

0801a100 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 801a100:	b480      	push	{r7}
 801a102:	b083      	sub	sp, #12
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
        return color;
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	681b      	ldr	r3, [r3, #0]
    }
 801a10c:	4618      	mov	r0, r3
 801a10e:	370c      	adds	r7, #12
 801a110:	46bd      	mov	sp, r7
 801a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a116:	4770      	bx	lr

0801a118 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 801a118:	b480      	push	{r7}
 801a11a:	b083      	sub	sp, #12
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
    {
 801a120:	4a04      	ldr	r2, [pc, #16]	; (801a134 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	601a      	str	r2, [r3, #0]
    }
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	4618      	mov	r0, r3
 801a12a:	370c      	adds	r7, #12
 801a12c:	46bd      	mov	sp, r7
 801a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a132:	4770      	bx	lr
 801a134:	08024b48 	.word	0x08024b48

0801a138 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801a138:	b580      	push	{r7, lr}
 801a13a:	b082      	sub	sp, #8
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	6078      	str	r0, [r7, #4]
    }
 801a140:	6878      	ldr	r0, [r7, #4]
 801a142:	f7ff ffe9 	bl	801a118 <_ZN8touchgfx9DMA_QueueD1Ev>
 801a146:	2104      	movs	r1, #4
 801a148:	6878      	ldr	r0, [r7, #4]
 801a14a:	f006 ff69 	bl	8021020 <_ZdlPvj>
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	4618      	mov	r0, r3
 801a152:	3708      	adds	r7, #8
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 801a158:	b580      	push	{r7, lr}
 801a15a:	b082      	sub	sp, #8
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	3344      	adds	r3, #68	; 0x44
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	4798      	blx	r3
    }
 801a16c:	bf00      	nop
 801a16e:	3708      	adds	r7, #8
 801a170:	46bd      	mov	sp, r7
 801a172:	bd80      	pop	{r7, pc}

0801a174 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801a174:	b480      	push	{r7}
 801a176:	b083      	sub	sp, #12
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
    {
 801a17c:	4a04      	ldr	r2, [pc, #16]	; (801a190 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	601a      	str	r2, [r3, #0]
    }
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	4618      	mov	r0, r3
 801a186:	370c      	adds	r7, #12
 801a188:	46bd      	mov	sp, r7
 801a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18e:	4770      	bx	lr
 801a190:	08025428 	.word	0x08025428

0801a194 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801a194:	b580      	push	{r7, lr}
 801a196:	b082      	sub	sp, #8
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
    }
 801a19c:	6878      	ldr	r0, [r7, #4]
 801a19e:	f7ff ffe9 	bl	801a174 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801a1a2:	210c      	movs	r1, #12
 801a1a4:	6878      	ldr	r0, [r7, #4]
 801a1a6:	f006 ff3b 	bl	8021020 <_ZdlPvj>
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	3708      	adds	r7, #8
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}

0801a1b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801a1b4:	b480      	push	{r7}
 801a1b6:	b083      	sub	sp, #12
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
 801a1bc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801a1be:	4a09      	ldr	r2, [pc, #36]	; (801a1e4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	601a      	str	r2, [r3, #0]
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	683a      	ldr	r2, [r7, #0]
 801a1c8:	605a      	str	r2, [r3, #4]
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	721a      	strb	r2, [r3, #8]
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	725a      	strb	r2, [r3, #9]
    {
    }
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	4618      	mov	r0, r3
 801a1da:	370c      	adds	r7, #12
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e2:	4770      	bx	lr
 801a1e4:	08025428 	.word	0x08025428

0801a1e8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 801a1e8:	b480      	push	{r7}
 801a1ea:	b083      	sub	sp, #12
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 801a1f0:	2301      	movs	r3, #1
    }
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	370c      	adds	r7, #12
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fc:	4770      	bx	lr

0801a1fe <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b082      	sub	sp, #8
 801a202:	af00      	add	r7, sp, #0
 801a204:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801a206:	687a      	ldr	r2, [r7, #4]
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	3328      	adds	r3, #40	; 0x28
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	4610      	mov	r0, r2
 801a212:	4798      	blx	r3
    }
 801a214:	bf00      	nop
 801a216:	3708      	adds	r7, #8
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}

0801a21c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	685a      	ldr	r2, [r3, #4]
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	685b      	ldr	r3, [r3, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	3314      	adds	r3, #20
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	4610      	mov	r0, r2
 801a234:	4798      	blx	r3
    }
 801a236:	bf00      	nop
 801a238:	3708      	adds	r7, #8
 801a23a:	46bd      	mov	sp, r7
 801a23c:	bd80      	pop	{r7, pc}
	...

0801a240 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 801a240:	b580      	push	{r7, lr}
 801a242:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 801a244:	4b13      	ldr	r3, [pc, #76]	; (801a294 <DMA2D_IRQHandler+0x54>)
 801a246:	685b      	ldr	r3, [r3, #4]
 801a248:	f003 0302 	and.w	r3, r3, #2
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	bf14      	ite	ne
 801a250:	2301      	movne	r3, #1
 801a252:	2300      	moveq	r3, #0
 801a254:	b2db      	uxtb	r3, r3
 801a256:	2b00      	cmp	r3, #0
 801a258:	d019      	beq.n	801a28e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 801a25a:	4b0e      	ldr	r3, [pc, #56]	; (801a294 <DMA2D_IRQHandler+0x54>)
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a262:	2b00      	cmp	r3, #0
 801a264:	bf14      	ite	ne
 801a266:	2301      	movne	r3, #1
 801a268:	2300      	moveq	r3, #0
 801a26a:	b2db      	uxtb	r3, r3
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d00e      	beq.n	801a28e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 801a270:	4b08      	ldr	r3, [pc, #32]	; (801a294 <DMA2D_IRQHandler+0x54>)
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	4a07      	ldr	r2, [pc, #28]	; (801a294 <DMA2D_IRQHandler+0x54>)
 801a276:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a27a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 801a27c:	4b05      	ldr	r3, [pc, #20]	; (801a294 <DMA2D_IRQHandler+0x54>)
 801a27e:	2202      	movs	r2, #2
 801a280:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801a282:	f7fe fa2f 	bl	80186e4 <_ZN8touchgfx3HAL11getInstanceEv>
 801a286:	4603      	mov	r3, r0
 801a288:	4618      	mov	r0, r3
 801a28a:	f7ff ffc7 	bl	801a21c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 801a28e:	bf00      	nop
 801a290:	bd80      	pop	{r7, pc}
 801a292:	bf00      	nop
 801a294:	52001000 	.word	0x52001000

0801a298 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801a298:	b580      	push	{r7, lr}
 801a29a:	b082      	sub	sp, #8
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	330c      	adds	r3, #12
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	f7fe f995 	bl	80185d4 <_ZN8touchgfx9colortypeC1Ev>
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	3708      	adds	r7, #8
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	bd80      	pop	{r7, pc}

0801a2b4 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 801a2b4:	b5b0      	push	{r4, r5, r7, lr}
 801a2b6:	b082      	sub	sp, #8
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801a2bc:	687a      	ldr	r2, [r7, #4]
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	330c      	adds	r3, #12
 801a2c2:	4619      	mov	r1, r3
 801a2c4:	4610      	mov	r0, r2
 801a2c6:	f7ff ff75 	bl	801a1b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801a2ca:	4a0e      	ldr	r2, [pc, #56]	; (801a304 <_ZN8STM32DMAC1Ev+0x50>)
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	601a      	str	r2, [r3, #0]
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	f103 000c 	add.w	r0, r3, #12
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	3320      	adds	r3, #32
 801a2da:	2260      	movs	r2, #96	; 0x60
 801a2dc:	4619      	mov	r1, r3
 801a2de:	f002 fc51 	bl	801cb84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	3320      	adds	r3, #32
 801a2e6:	245f      	movs	r4, #95	; 0x5f
 801a2e8:	461d      	mov	r5, r3
 801a2ea:	2c00      	cmp	r4, #0
 801a2ec:	db05      	blt.n	801a2fa <_ZN8STM32DMAC1Ev+0x46>
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	f7ff ffd2 	bl	801a298 <_ZN8touchgfx6BlitOpC1Ev>
 801a2f4:	3524      	adds	r5, #36	; 0x24
 801a2f6:	3c01      	subs	r4, #1
 801a2f8:	e7f7      	b.n	801a2ea <_ZN8STM32DMAC1Ev+0x36>
{
}
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	3708      	adds	r7, #8
 801a300:	46bd      	mov	sp, r7
 801a302:	bdb0      	pop	{r4, r5, r7, pc}
 801a304:	08024af8 	.word	0x08024af8

0801a308 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 801a308:	b580      	push	{r7, lr}
 801a30a:	b082      	sub	sp, #8
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
 801a310:	4a09      	ldr	r2, [pc, #36]	; (801a338 <_ZN8STM32DMAD1Ev+0x30>)
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801a316:	205a      	movs	r0, #90	; 0x5a
 801a318:	f7ff fece 	bl	801a0b8 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	330c      	adds	r3, #12
 801a320:	4618      	mov	r0, r3
 801a322:	f000 fac9 	bl	801a8b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	4618      	mov	r0, r3
 801a32a:	f7ff ff23 	bl	801a174 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	4618      	mov	r0, r3
 801a332:	3708      	adds	r7, #8
 801a334:	46bd      	mov	sp, r7
 801a336:	bd80      	pop	{r7, pc}
 801a338:	08024af8 	.word	0x08024af8

0801a33c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
}
 801a344:	6878      	ldr	r0, [r7, #4]
 801a346:	f7ff ffdf 	bl	801a308 <_ZN8STM32DMAD1Ev>
 801a34a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 801a34e:	6878      	ldr	r0, [r7, #4]
 801a350:	f006 fe66 	bl	8021020 <_ZdlPvj>
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	4618      	mov	r0, r3
 801a358:	3708      	adds	r7, #8
 801a35a:	46bd      	mov	sp, r7
 801a35c:	bd80      	pop	{r7, pc}
	...

0801a360 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b084      	sub	sp, #16
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801a368:	4b13      	ldr	r3, [pc, #76]	; (801a3b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801a36a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801a36e:	4a12      	ldr	r2, [pc, #72]	; (801a3b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801a370:	f043 0310 	orr.w	r3, r3, #16
 801a374:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 801a378:	4b0f      	ldr	r3, [pc, #60]	; (801a3b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801a37a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801a37e:	f003 0310 	and.w	r3, r3, #16
 801a382:	60fb      	str	r3, [r7, #12]
 801a384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801a386:	4b0c      	ldr	r3, [pc, #48]	; (801a3b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801a388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a38a:	4a0b      	ldr	r2, [pc, #44]	; (801a3b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801a38c:	f043 0310 	orr.w	r3, r3, #16
 801a390:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801a392:	4b09      	ldr	r3, [pc, #36]	; (801a3b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801a394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a396:	4a08      	ldr	r2, [pc, #32]	; (801a3b8 <_ZN8STM32DMA10initializeEv+0x58>)
 801a398:	f023 0310 	bic.w	r3, r3, #16
 801a39c:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801a39e:	2200      	movs	r2, #0
 801a3a0:	2105      	movs	r1, #5
 801a3a2:	205a      	movs	r0, #90	; 0x5a
 801a3a4:	f7ec fecc 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801a3a8:	205a      	movs	r0, #90	; 0x5a
 801a3aa:	f7ec fee3 	bl	8007174 <HAL_NVIC_EnableIRQ>
}
 801a3ae:	bf00      	nop
 801a3b0:	3710      	adds	r7, #16
 801a3b2:	46bd      	mov	sp, r7
 801a3b4:	bd80      	pop	{r7, pc}
 801a3b6:	bf00      	nop
 801a3b8:	58024400 	.word	0x58024400

0801a3bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b084      	sub	sp, #16
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	6078      	str	r0, [r7, #4]
 801a3c4:	460b      	mov	r3, r1
 801a3c6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	60fb      	str	r3, [r7, #12]

    switch (format)
 801a3cc:	78fb      	ldrb	r3, [r7, #3]
 801a3ce:	2b0b      	cmp	r3, #11
 801a3d0:	d826      	bhi.n	801a420 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801a3d2:	a201      	add	r2, pc, #4	; (adr r2, 801a3d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3d8:	0801a415 	.word	0x0801a415
 801a3dc:	0801a40f 	.word	0x0801a40f
 801a3e0:	0801a409 	.word	0x0801a409
 801a3e4:	0801a421 	.word	0x0801a421
 801a3e8:	0801a421 	.word	0x0801a421
 801a3ec:	0801a421 	.word	0x0801a421
 801a3f0:	0801a421 	.word	0x0801a421
 801a3f4:	0801a41b 	.word	0x0801a41b
 801a3f8:	0801a41b 	.word	0x0801a41b
 801a3fc:	0801a41b 	.word	0x0801a41b
 801a400:	0801a41b 	.word	0x0801a41b
 801a404:	0801a41b 	.word	0x0801a41b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801a408:	2300      	movs	r3, #0
 801a40a:	60fb      	str	r3, [r7, #12]
        break;
 801a40c:	e00e      	b.n	801a42c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801a40e:	2301      	movs	r3, #1
 801a410:	60fb      	str	r3, [r7, #12]
        break;
 801a412:	e00b      	b.n	801a42c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 801a414:	2302      	movs	r3, #2
 801a416:	60fb      	str	r3, [r7, #12]
        break;
 801a418:	e008      	b.n	801a42c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 801a41a:	2305      	movs	r3, #5
 801a41c:	60fb      	str	r3, [r7, #12]
        break;
 801a41e:	e005      	b.n	801a42c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801a420:	4b05      	ldr	r3, [pc, #20]	; (801a438 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801a422:	4a06      	ldr	r2, [pc, #24]	; (801a43c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 801a424:	216f      	movs	r1, #111	; 0x6f
 801a426:	4806      	ldr	r0, [pc, #24]	; (801a440 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 801a428:	f006 fe28 	bl	802107c <__assert_func>
        break;
    }

    return dma2dColorMode;
 801a42c:	68fb      	ldr	r3, [r7, #12]
}
 801a42e:	4618      	mov	r0, r3
 801a430:	3710      	adds	r7, #16
 801a432:	46bd      	mov	sp, r7
 801a434:	bd80      	pop	{r7, pc}
 801a436:	bf00      	nop
 801a438:	08024544 	.word	0x08024544
 801a43c:	08024560 	.word	0x08024560
 801a440:	080245ac 	.word	0x080245ac

0801a444 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b084      	sub	sp, #16
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	460b      	mov	r3, r1
 801a44e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801a450:	2300      	movs	r3, #0
 801a452:	60fb      	str	r3, [r7, #12]

    switch (format)
 801a454:	78fb      	ldrb	r3, [r7, #3]
 801a456:	2b0a      	cmp	r3, #10
 801a458:	d821      	bhi.n	801a49e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801a45a:	a201      	add	r2, pc, #4	; (adr r2, 801a460 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a460:	0801a499 	.word	0x0801a499
 801a464:	0801a493 	.word	0x0801a493
 801a468:	0801a48d 	.word	0x0801a48d
 801a46c:	0801a49f 	.word	0x0801a49f
 801a470:	0801a49f 	.word	0x0801a49f
 801a474:	0801a49f 	.word	0x0801a49f
 801a478:	0801a49f 	.word	0x0801a49f
 801a47c:	0801a493 	.word	0x0801a493
 801a480:	0801a493 	.word	0x0801a493
 801a484:	0801a493 	.word	0x0801a493
 801a488:	0801a493 	.word	0x0801a493
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801a48c:	2300      	movs	r3, #0
 801a48e:	60fb      	str	r3, [r7, #12]
        break;
 801a490:	e00b      	b.n	801a4aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801a492:	2301      	movs	r3, #1
 801a494:	60fb      	str	r3, [r7, #12]
        break;
 801a496:	e008      	b.n	801a4aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 801a498:	2302      	movs	r3, #2
 801a49a:	60fb      	str	r3, [r7, #12]
        break;
 801a49c:	e005      	b.n	801a4aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801a49e:	4b05      	ldr	r3, [pc, #20]	; (801a4b4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 801a4a0:	4a05      	ldr	r2, [pc, #20]	; (801a4b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801a4a2:	2190      	movs	r1, #144	; 0x90
 801a4a4:	4805      	ldr	r0, [pc, #20]	; (801a4bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801a4a6:	f006 fde9 	bl	802107c <__assert_func>
        break;
    }

    return dma2dColorMode;
 801a4aa:	68fb      	ldr	r3, [r7, #12]
}
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	3710      	adds	r7, #16
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}
 801a4b4:	08024544 	.word	0x08024544
 801a4b8:	080245d8 	.word	0x080245d8
 801a4bc:	080245ac 	.word	0x080245ac

0801a4c0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 801a4c0:	b480      	push	{r7}
 801a4c2:	b083      	sub	sp, #12
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 801a4c8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	370c      	adds	r7, #12
 801a4d0:	46bd      	mov	sp, r7
 801a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d6:	4770      	bx	lr

0801a4d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 801a4d8:	b590      	push	{r4, r7, lr}
 801a4da:	b089      	sub	sp, #36	; 0x24
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
 801a4e0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801a4e2:	683b      	ldr	r3, [r7, #0]
 801a4e4:	7f5b      	ldrb	r3, [r3, #29]
 801a4e6:	4619      	mov	r1, r3
 801a4e8:	6878      	ldr	r0, [r7, #4]
 801a4ea:	f7ff ff67 	bl	801a3bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801a4ee:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801a4f0:	683b      	ldr	r3, [r7, #0]
 801a4f2:	7f9b      	ldrb	r3, [r3, #30]
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	6878      	ldr	r0, [r7, #4]
 801a4f8:	f7ff ff60 	bl	801a3bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801a4fc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	7f9b      	ldrb	r3, [r3, #30]
 801a502:	4619      	mov	r1, r3
 801a504:	6878      	ldr	r0, [r7, #4]
 801a506:	f7ff ff9d 	bl	801a444 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801a50a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801a50c:	683b      	ldr	r3, [r7, #0]
 801a50e:	8b5b      	ldrh	r3, [r3, #26]
 801a510:	461a      	mov	r2, r3
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	8a9b      	ldrh	r3, [r3, #20]
 801a516:	1ad2      	subs	r2, r2, r3
 801a518:	4b92      	ldr	r3, [pc, #584]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a51a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801a51c:	683b      	ldr	r3, [r7, #0]
 801a51e:	8b5b      	ldrh	r3, [r3, #26]
 801a520:	461a      	mov	r2, r3
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	8a9b      	ldrh	r3, [r3, #20]
 801a526:	1ad2      	subs	r2, r2, r3
 801a528:	4b8e      	ldr	r3, [pc, #568]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a52a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	8b1b      	ldrh	r3, [r3, #24]
 801a530:	461a      	mov	r2, r3
 801a532:	683b      	ldr	r3, [r7, #0]
 801a534:	8a9b      	ldrh	r3, [r3, #20]
 801a536:	1ad2      	subs	r2, r2, r3
 801a538:	4b8a      	ldr	r3, [pc, #552]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a53a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801a53c:	4a89      	ldr	r2, [pc, #548]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a53e:	693b      	ldr	r3, [r7, #16]
 801a540:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	8adb      	ldrh	r3, [r3, #22]
 801a546:	461a      	mov	r2, r3
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	8a9b      	ldrh	r3, [r3, #20]
 801a54c:	041b      	lsls	r3, r3, #16
 801a54e:	431a      	orrs	r2, r3
 801a550:	4b84      	ldr	r3, [pc, #528]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a554:	683b      	ldr	r3, [r7, #0]
 801a556:	691a      	ldr	r2, [r3, #16]
 801a558:	4b82      	ldr	r3, [pc, #520]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a55a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 801a55c:	683b      	ldr	r3, [r7, #0]
 801a55e:	685a      	ldr	r2, [r3, #4]
 801a560:	4b80      	ldr	r3, [pc, #512]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a562:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 801a564:	683b      	ldr	r3, [r7, #0]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a56c:	d036      	beq.n	801a5dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 801a56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a572:	f200 80e2 	bhi.w	801a73a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801a576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a57a:	d014      	beq.n	801a5a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 801a57c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a580:	f200 80db 	bhi.w	801a73a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801a584:	2b80      	cmp	r3, #128	; 0x80
 801a586:	d059      	beq.n	801a63c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 801a588:	2b80      	cmp	r3, #128	; 0x80
 801a58a:	f200 80d6 	bhi.w	801a73a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801a58e:	2b40      	cmp	r3, #64	; 0x40
 801a590:	f000 80be 	beq.w	801a710 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 801a594:	2b40      	cmp	r3, #64	; 0x40
 801a596:	f200 80d0 	bhi.w	801a73a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801a59a:	2b04      	cmp	r3, #4
 801a59c:	d039      	beq.n	801a612 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 801a59e:	2b20      	cmp	r3, #32
 801a5a0:	f000 80b6 	beq.w	801a710 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 801a5a4:	e0c9      	b.n	801a73a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801a5a6:	683b      	ldr	r3, [r7, #0]
 801a5a8:	7f1b      	ldrb	r3, [r3, #28]
 801a5aa:	061b      	lsls	r3, r3, #24
 801a5ac:	4619      	mov	r1, r3
 801a5ae:	4a6d      	ldr	r2, [pc, #436]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5b0:	4b6d      	ldr	r3, [pc, #436]	; (801a768 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801a5b2:	430b      	orrs	r3, r1
 801a5b4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801a5b6:	683b      	ldr	r3, [r7, #0]
 801a5b8:	330c      	adds	r3, #12
 801a5ba:	4c6a      	ldr	r4, [pc, #424]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7ff fd9f 	bl	801a100 <_ZNK8touchgfx9colortypecvmEv>
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801a5c6:	4a67      	ldr	r2, [pc, #412]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5c8:	697b      	ldr	r3, [r7, #20]
 801a5ca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	691a      	ldr	r2, [r3, #16]
 801a5d0:	4b64      	ldr	r3, [pc, #400]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5d2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801a5d4:	4b63      	ldr	r3, [pc, #396]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5d6:	4a65      	ldr	r2, [pc, #404]	; (801a76c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801a5d8:	601a      	str	r2, [r3, #0]
        break;
 801a5da:	e0da      	b.n	801a792 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	7f1b      	ldrb	r3, [r3, #28]
 801a5e0:	061b      	lsls	r3, r3, #24
 801a5e2:	4619      	mov	r1, r3
 801a5e4:	4a5f      	ldr	r2, [pc, #380]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5e6:	4b62      	ldr	r3, [pc, #392]	; (801a770 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801a5e8:	430b      	orrs	r3, r1
 801a5ea:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	330c      	adds	r3, #12
 801a5f0:	4c5c      	ldr	r4, [pc, #368]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7ff fd84 	bl	801a100 <_ZNK8touchgfx9colortypecvmEv>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801a5fc:	4a59      	ldr	r2, [pc, #356]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a5fe:	697b      	ldr	r3, [r7, #20]
 801a600:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	691a      	ldr	r2, [r3, #16]
 801a606:	4b57      	ldr	r3, [pc, #348]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a608:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801a60a:	4b56      	ldr	r3, [pc, #344]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a60c:	4a57      	ldr	r2, [pc, #348]	; (801a76c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801a60e:	601a      	str	r2, [r3, #0]
        break;
 801a610:	e0bf      	b.n	801a792 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	7f1b      	ldrb	r3, [r3, #28]
 801a616:	061b      	lsls	r3, r3, #24
 801a618:	461a      	mov	r2, r3
 801a61a:	69bb      	ldr	r3, [r7, #24]
 801a61c:	4313      	orrs	r3, r2
 801a61e:	4a51      	ldr	r2, [pc, #324]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a624:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801a626:	4a4f      	ldr	r2, [pc, #316]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a628:	697b      	ldr	r3, [r7, #20]
 801a62a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	691a      	ldr	r2, [r3, #16]
 801a630:	4b4c      	ldr	r3, [pc, #304]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a632:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801a634:	4b4b      	ldr	r3, [pc, #300]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a636:	4a4d      	ldr	r2, [pc, #308]	; (801a76c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801a638:	601a      	str	r2, [r3, #0]
        break;
 801a63a:	e0aa      	b.n	801a792 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 801a63c:	2301      	movs	r3, #1
 801a63e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801a640:	683b      	ldr	r3, [r7, #0]
 801a642:	689b      	ldr	r3, [r3, #8]
 801a644:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	1d1a      	adds	r2, r3, #4
 801a64a:	4b46      	ldr	r3, [pc, #280]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a64c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801a64e:	683b      	ldr	r3, [r7, #0]
 801a650:	7f1b      	ldrb	r3, [r3, #28]
 801a652:	061b      	lsls	r3, r3, #24
 801a654:	461a      	mov	r2, r3
 801a656:	69bb      	ldr	r3, [r7, #24]
 801a658:	4313      	orrs	r3, r2
 801a65a:	4a42      	ldr	r2, [pc, #264]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a65c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a660:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801a662:	4a40      	ldr	r2, [pc, #256]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	691a      	ldr	r2, [r3, #16]
 801a66c:	4b3d      	ldr	r3, [pc, #244]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a66e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	881b      	ldrh	r3, [r3, #0]
 801a674:	b2db      	uxtb	r3, r3
 801a676:	2b00      	cmp	r3, #0
 801a678:	d002      	beq.n	801a680 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 801a67a:	2b01      	cmp	r3, #1
 801a67c:	d00d      	beq.n	801a69a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 801a67e:	e020      	b.n	801a6c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801a680:	4b38      	ldr	r3, [pc, #224]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a682:	69da      	ldr	r2, [r3, #28]
 801a684:	4b3b      	ldr	r3, [pc, #236]	; (801a774 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801a686:	4013      	ands	r3, r2
 801a688:	68fa      	ldr	r2, [r7, #12]
 801a68a:	8852      	ldrh	r2, [r2, #2]
 801a68c:	3a01      	subs	r2, #1
 801a68e:	0212      	lsls	r2, r2, #8
 801a690:	4611      	mov	r1, r2
 801a692:	4a34      	ldr	r2, [pc, #208]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a694:	430b      	orrs	r3, r1
 801a696:	61d3      	str	r3, [r2, #28]
                break;
 801a698:	e01a      	b.n	801a6d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 801a69a:	683b      	ldr	r3, [r7, #0]
 801a69c:	7f1b      	ldrb	r3, [r3, #28]
 801a69e:	2bff      	cmp	r3, #255	; 0xff
 801a6a0:	d101      	bne.n	801a6a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 801a6a6:	4b2f      	ldr	r3, [pc, #188]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a6a8:	69da      	ldr	r2, [r3, #28]
 801a6aa:	4b32      	ldr	r3, [pc, #200]	; (801a774 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801a6ac:	4013      	ands	r3, r2
 801a6ae:	68fa      	ldr	r2, [r7, #12]
 801a6b0:	8852      	ldrh	r2, [r2, #2]
 801a6b2:	3a01      	subs	r2, #1
 801a6b4:	0212      	lsls	r2, r2, #8
 801a6b6:	4313      	orrs	r3, r2
 801a6b8:	4a2a      	ldr	r2, [pc, #168]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a6ba:	f043 0310 	orr.w	r3, r3, #16
 801a6be:	61d3      	str	r3, [r2, #28]
                break;
 801a6c0:	e006      	b.n	801a6d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 801a6c2:	4b2d      	ldr	r3, [pc, #180]	; (801a778 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801a6c4:	4a2d      	ldr	r2, [pc, #180]	; (801a77c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801a6c6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 801a6ca:	482d      	ldr	r0, [pc, #180]	; (801a780 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801a6cc:	f006 fcd6 	bl	802107c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 801a6d0:	4b24      	ldr	r3, [pc, #144]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a6d2:	69db      	ldr	r3, [r3, #28]
 801a6d4:	4a23      	ldr	r2, [pc, #140]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a6d6:	f043 0320 	orr.w	r3, r3, #32
 801a6da:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801a6dc:	4b21      	ldr	r3, [pc, #132]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a6de:	69db      	ldr	r3, [r3, #28]
 801a6e0:	f003 0320 	and.w	r3, r3, #32
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	bf14      	ite	ne
 801a6e8:	2301      	movne	r3, #1
 801a6ea:	2300      	moveq	r3, #0
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d000      	beq.n	801a6f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 801a6f2:	e7f3      	b.n	801a6dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 801a6f4:	4b1b      	ldr	r3, [pc, #108]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a6f6:	2210      	movs	r2, #16
 801a6f8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 801a6fa:	7ffb      	ldrb	r3, [r7, #31]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d003      	beq.n	801a708 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801a700:	4b18      	ldr	r3, [pc, #96]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a702:	4a1a      	ldr	r2, [pc, #104]	; (801a76c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801a704:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 801a706:	e044      	b.n	801a792 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801a708:	4b16      	ldr	r3, [pc, #88]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a70a:	4a1e      	ldr	r2, [pc, #120]	; (801a784 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801a70c:	601a      	str	r2, [r3, #0]
        break;
 801a70e:	e040      	b.n	801a792 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801a710:	683b      	ldr	r3, [r7, #0]
 801a712:	7f1b      	ldrb	r3, [r3, #28]
 801a714:	061b      	lsls	r3, r3, #24
 801a716:	461a      	mov	r2, r3
 801a718:	69bb      	ldr	r3, [r7, #24]
 801a71a:	4313      	orrs	r3, r2
 801a71c:	4a11      	ldr	r2, [pc, #68]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a71e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a722:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801a724:	4a0f      	ldr	r2, [pc, #60]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	691a      	ldr	r2, [r3, #16]
 801a72e:	4b0d      	ldr	r3, [pc, #52]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a730:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801a732:	4b0c      	ldr	r3, [pc, #48]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a734:	4a0d      	ldr	r2, [pc, #52]	; (801a76c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801a736:	601a      	str	r2, [r3, #0]
        break;
 801a738:	e02b      	b.n	801a792 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	7f1b      	ldrb	r3, [r3, #28]
 801a73e:	061b      	lsls	r3, r3, #24
 801a740:	461a      	mov	r2, r3
 801a742:	69bb      	ldr	r3, [r7, #24]
 801a744:	4313      	orrs	r3, r2
 801a746:	4a07      	ldr	r2, [pc, #28]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a74c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 801a74e:	683b      	ldr	r3, [r7, #0]
 801a750:	7f5a      	ldrb	r2, [r3, #29]
 801a752:	683b      	ldr	r3, [r7, #0]
 801a754:	7f9b      	ldrb	r3, [r3, #30]
 801a756:	429a      	cmp	r2, r3
 801a758:	d016      	beq.n	801a788 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801a75a:	4b02      	ldr	r3, [pc, #8]	; (801a764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801a75c:	4a09      	ldr	r2, [pc, #36]	; (801a784 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801a75e:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 801a760:	e016      	b.n	801a790 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 801a762:	bf00      	nop
 801a764:	52001000 	.word	0x52001000
 801a768:	0002000a 	.word	0x0002000a
 801a76c:	00020201 	.word	0x00020201
 801a770:	00020009 	.word	0x00020009
 801a774:	ffff00ef 	.word	0xffff00ef
 801a778:	08024624 	.word	0x08024624
 801a77c:	08024640 	.word	0x08024640
 801a780:	080245ac 	.word	0x080245ac
 801a784:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 801a788:	4b04      	ldr	r3, [pc, #16]	; (801a79c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 801a78a:	f240 2201 	movw	r2, #513	; 0x201
 801a78e:	601a      	str	r2, [r3, #0]
        break;
 801a790:	bf00      	nop
    }
}
 801a792:	bf00      	nop
 801a794:	3724      	adds	r7, #36	; 0x24
 801a796:	46bd      	mov	sp, r7
 801a798:	bd90      	pop	{r4, r7, pc}
 801a79a:	bf00      	nop
 801a79c:	52001000 	.word	0x52001000

0801a7a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 801a7a0:	b590      	push	{r4, r7, lr}
 801a7a2:	b085      	sub	sp, #20
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
 801a7a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801a7aa:	683b      	ldr	r3, [r7, #0]
 801a7ac:	7f9b      	ldrb	r3, [r3, #30]
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	6878      	ldr	r0, [r7, #4]
 801a7b2:	f7ff fe47 	bl	801a444 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801a7b6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801a7b8:	4a3b      	ldr	r2, [pc, #236]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801a7be:	683b      	ldr	r3, [r7, #0]
 801a7c0:	8adb      	ldrh	r3, [r3, #22]
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	8a9b      	ldrh	r3, [r3, #20]
 801a7c8:	041b      	lsls	r3, r3, #16
 801a7ca:	431a      	orrs	r2, r3
 801a7cc:	4b36      	ldr	r3, [pc, #216]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a7ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a7d0:	683b      	ldr	r3, [r7, #0]
 801a7d2:	691a      	ldr	r2, [r3, #16]
 801a7d4:	4b34      	ldr	r3, [pc, #208]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a7d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801a7d8:	683b      	ldr	r3, [r7, #0]
 801a7da:	8b5b      	ldrh	r3, [r3, #26]
 801a7dc:	461a      	mov	r2, r3
 801a7de:	683b      	ldr	r3, [r7, #0]
 801a7e0:	8a9b      	ldrh	r3, [r3, #20]
 801a7e2:	1ad2      	subs	r2, r2, r3
 801a7e4:	4b30      	ldr	r3, [pc, #192]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a7e6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	2b08      	cmp	r3, #8
 801a7ee:	d12e      	bne.n	801a84e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801a7f0:	683b      	ldr	r3, [r7, #0]
 801a7f2:	8b5b      	ldrh	r3, [r3, #26]
 801a7f4:	461a      	mov	r2, r3
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	8a9b      	ldrh	r3, [r3, #20]
 801a7fa:	1ad2      	subs	r2, r2, r3
 801a7fc:	4b2a      	ldr	r3, [pc, #168]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a7fe:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801a800:	683b      	ldr	r3, [r7, #0]
 801a802:	8b5b      	ldrh	r3, [r3, #26]
 801a804:	461a      	mov	r2, r3
 801a806:	683b      	ldr	r3, [r7, #0]
 801a808:	8a9b      	ldrh	r3, [r3, #20]
 801a80a:	1ad2      	subs	r2, r2, r3
 801a80c:	4b26      	ldr	r3, [pc, #152]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a80e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801a810:	4a25      	ldr	r2, [pc, #148]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	7f1b      	ldrb	r3, [r3, #28]
 801a81a:	061b      	lsls	r3, r3, #24
 801a81c:	4619      	mov	r1, r3
 801a81e:	4a22      	ldr	r2, [pc, #136]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a820:	4b22      	ldr	r3, [pc, #136]	; (801a8ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 801a822:	430b      	orrs	r3, r1
 801a824:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801a826:	683b      	ldr	r3, [r7, #0]
 801a828:	330c      	adds	r3, #12
 801a82a:	4c1f      	ldr	r4, [pc, #124]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a82c:	4618      	mov	r0, r3
 801a82e:	f7ff fc67 	bl	801a100 <_ZNK8touchgfx9colortypecvmEv>
 801a832:	4603      	mov	r3, r0
 801a834:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a836:	683b      	ldr	r3, [r7, #0]
 801a838:	691a      	ldr	r2, [r3, #16]
 801a83a:	4b1b      	ldr	r3, [pc, #108]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a83c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801a83e:	683b      	ldr	r3, [r7, #0]
 801a840:	691a      	ldr	r2, [r3, #16]
 801a842:	4b19      	ldr	r3, [pc, #100]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a844:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 801a846:	4b18      	ldr	r3, [pc, #96]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a848:	4a19      	ldr	r2, [pc, #100]	; (801a8b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801a84a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 801a84c:	e027      	b.n	801a89e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801a84e:	4a16      	ldr	r2, [pc, #88]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801a854:	4b14      	ldr	r3, [pc, #80]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a856:	2200      	movs	r2, #0
 801a858:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 801a85a:	683b      	ldr	r3, [r7, #0]
 801a85c:	330c      	adds	r3, #12
 801a85e:	4618      	mov	r0, r3
 801a860:	f7ff fc4e 	bl	801a100 <_ZNK8touchgfx9colortypecvmEv>
 801a864:	4603      	mov	r3, r0
 801a866:	0a1b      	lsrs	r3, r3, #8
 801a868:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	330c      	adds	r3, #12
 801a870:	4618      	mov	r0, r3
 801a872:	f7ff fc45 	bl	801a100 <_ZNK8touchgfx9colortypecvmEv>
 801a876:	4603      	mov	r3, r0
 801a878:	095b      	lsrs	r3, r3, #5
 801a87a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a87e:	431c      	orrs	r4, r3
 801a880:	683b      	ldr	r3, [r7, #0]
 801a882:	330c      	adds	r3, #12
 801a884:	4618      	mov	r0, r3
 801a886:	f7ff fc3b 	bl	801a100 <_ZNK8touchgfx9colortypecvmEv>
 801a88a:	4603      	mov	r3, r0
 801a88c:	08db      	lsrs	r3, r3, #3
 801a88e:	f003 031f 	and.w	r3, r3, #31
 801a892:	4a05      	ldr	r2, [pc, #20]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a894:	4323      	orrs	r3, r4
 801a896:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 801a898:	4b03      	ldr	r3, [pc, #12]	; (801a8a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801a89a:	4a06      	ldr	r2, [pc, #24]	; (801a8b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 801a89c:	601a      	str	r2, [r3, #0]
}
 801a89e:	bf00      	nop
 801a8a0:	3714      	adds	r7, #20
 801a8a2:	46bd      	mov	sp, r7
 801a8a4:	bd90      	pop	{r4, r7, pc}
 801a8a6:	bf00      	nop
 801a8a8:	52001000 	.word	0x52001000
 801a8ac:	00010009 	.word	0x00010009
 801a8b0:	00020201 	.word	0x00020201
 801a8b4:	00030201 	.word	0x00030201

0801a8b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b082      	sub	sp, #8
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
 801a8c0:	4a05      	ldr	r2, [pc, #20]	; (801a8d8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	601a      	str	r2, [r3, #0]
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	f7ff fc25 	bl	801a118 <_ZN8touchgfx9DMA_QueueD1Ev>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	3708      	adds	r7, #8
 801a8d4:	46bd      	mov	sp, r7
 801a8d6:	bd80      	pop	{r7, pc}
 801a8d8:	08025478 	.word	0x08025478

0801a8dc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b082      	sub	sp, #8
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
 801a8e4:	6878      	ldr	r0, [r7, #4]
 801a8e6:	f7ff ffe7 	bl	801a8b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801a8ea:	2114      	movs	r1, #20
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f006 fb97 	bl	8021020 <_ZdlPvj>
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	3708      	adds	r7, #8
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	bd80      	pop	{r7, pc}

0801a8fc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801a8fc:	b480      	push	{r7}
 801a8fe:	b083      	sub	sp, #12
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
    {
 801a904:	4a04      	ldr	r2, [pc, #16]	; (801a918 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	601a      	str	r2, [r3, #0]
    }
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	4618      	mov	r0, r3
 801a90e:	370c      	adds	r7, #12
 801a910:	46bd      	mov	sp, r7
 801a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a916:	4770      	bx	lr
 801a918:	0802554c 	.word	0x0802554c

0801a91c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b082      	sub	sp, #8
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
    }
 801a924:	6878      	ldr	r0, [r7, #4]
 801a926:	f7ff ffe9 	bl	801a8fc <_ZN8touchgfx3LCDD1Ev>
 801a92a:	2108      	movs	r1, #8
 801a92c:	6878      	ldr	r0, [r7, #4]
 801a92e:	f006 fb77 	bl	8021020 <_ZdlPvj>
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	4618      	mov	r0, r3
 801a936:	3708      	adds	r7, #8
 801a938:	46bd      	mov	sp, r7
 801a93a:	bd80      	pop	{r7, pc}

0801a93c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801a93c:	b480      	push	{r7}
 801a93e:	b083      	sub	sp, #12
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2200      	movs	r2, #0
 801a948:	801a      	strh	r2, [r3, #0]
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	2200      	movs	r2, #0
 801a94e:	805a      	strh	r2, [r3, #2]
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2200      	movs	r2, #0
 801a954:	809a      	strh	r2, [r3, #4]
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2200      	movs	r2, #0
 801a95a:	80da      	strh	r2, [r3, #6]
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	2200      	movs	r2, #0
 801a960:	811a      	strh	r2, [r3, #8]
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2200      	movs	r2, #0
 801a966:	815a      	strh	r2, [r3, #10]
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2200      	movs	r2, #0
 801a96c:	819a      	strh	r2, [r3, #12]
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	2200      	movs	r2, #0
 801a972:	739a      	strb	r2, [r3, #14]
        {
        }
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	4618      	mov	r0, r3
 801a978:	370c      	adds	r7, #12
 801a97a:	46bd      	mov	sp, r7
 801a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a980:	4770      	bx	lr

0801a982 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801a982:	b580      	push	{r7, lr}
 801a984:	b082      	sub	sp, #8
 801a986:	af00      	add	r7, sp, #0
 801a988:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	4618      	mov	r0, r3
 801a98e:	f7ff ffd5 	bl	801a93c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	2200      	movs	r2, #0
 801a996:	611a      	str	r2, [r3, #16]
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2200      	movs	r2, #0
 801a99c:	829a      	strh	r2, [r3, #20]
    {
    }
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	3708      	adds	r7, #8
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}

0801a9a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	60f8      	str	r0, [r7, #12]
 801a9b0:	60b9      	str	r1, [r7, #8]
 801a9b2:	607a      	str	r2, [r7, #4]
 801a9b4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 801a9b6:	4a55      	ldr	r2, [pc, #340]	; (801ab0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	601a      	str	r2, [r3, #0]
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	68ba      	ldr	r2, [r7, #8]
 801a9c0:	605a      	str	r2, [r3, #4]
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	687a      	ldr	r2, [r7, #4]
 801a9c6:	609a      	str	r2, [r3, #8]
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	683a      	ldr	r2, [r7, #0]
 801a9cc:	60da      	str	r2, [r3, #12]
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	611a      	str	r2, [r3, #16]
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	615a      	str	r2, [r3, #20]
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	2200      	movs	r2, #0
 801a9de:	619a      	str	r2, [r3, #24]
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	331c      	adds	r3, #28
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f7ff ffcc 	bl	801a982 <_ZN8touchgfx8GesturesC1Ev>
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	639a      	str	r2, [r3, #56]	; 0x38
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	63da      	str	r2, [r3, #60]	; 0x3c
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	2200      	movs	r2, #0
 801aa02:	641a      	str	r2, [r3, #64]	; 0x40
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	2200      	movs	r2, #0
 801aa08:	645a      	str	r2, [r3, #68]	; 0x44
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	2201      	movs	r2, #1
 801aa16:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	2200      	movs	r2, #0
 801aa26:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	64da      	str	r2, [r3, #76]	; 0x4c
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	3350      	adds	r3, #80	; 0x50
 801aa34:	4618      	mov	r0, r3
 801aa36:	f7fd fdea 	bl	801860e <_ZN8touchgfx4RectC1Ev>
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	659a      	str	r2, [r3, #88]	; 0x58
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	2200      	movs	r2, #0
 801aa44:	65da      	str	r2, [r3, #92]	; 0x5c
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	2200      	movs	r2, #0
 801aa4a:	661a      	str	r2, [r3, #96]	; 0x60
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	2201      	movs	r2, #1
 801aa50:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	2200      	movs	r2, #0
 801aa58:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	2201      	movs	r2, #1
 801aa68:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	2200      	movs	r2, #0
 801aa70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	2200      	movs	r2, #0
 801aa78:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	2200      	movs	r2, #0
 801aa80:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	2200      	movs	r2, #0
 801aa88:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	2200      	movs	r2, #0
 801aa90:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	2200      	movs	r2, #0
 801aa98:	671a      	str	r2, [r3, #112]	; 0x70
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	2200      	movs	r2, #0
 801aaae:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	2201      	movs	r2, #1
 801aab6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	2201      	movs	r2, #1
 801aabe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 801aac2:	4a13      	ldr	r2, [pc, #76]	; (801ab10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 801aac8:	4a12      	ldr	r2, [pc, #72]	; (801ab14 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801aaca:	8b3b      	ldrh	r3, [r7, #24]
 801aacc:	8013      	strh	r3, [r2, #0]
 801aace:	4b11      	ldr	r3, [pc, #68]	; (801ab14 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801aad0:	881a      	ldrh	r2, [r3, #0]
 801aad2:	4b11      	ldr	r3, [pc, #68]	; (801ab18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 801aad4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801aad6:	4a11      	ldr	r2, [pc, #68]	; (801ab1c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801aad8:	8bbb      	ldrh	r3, [r7, #28]
 801aada:	8013      	strh	r3, [r2, #0]
 801aadc:	4b0f      	ldr	r3, [pc, #60]	; (801ab1c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801aade:	881a      	ldrh	r2, [r3, #0]
 801aae0:	4b0f      	ldr	r3, [pc, #60]	; (801ab20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 801aae2:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 801aae4:	4b0f      	ldr	r3, [pc, #60]	; (801ab24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 801aae6:	2200      	movs	r2, #0
 801aae8:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801aaea:	8b3a      	ldrh	r2, [r7, #24]
 801aaec:	8bbb      	ldrh	r3, [r7, #28]
 801aaee:	429a      	cmp	r2, r3
 801aaf0:	bf34      	ite	cc
 801aaf2:	2301      	movcc	r3, #1
 801aaf4:	2300      	movcs	r3, #0
 801aaf6:	b2db      	uxtb	r3, r3
 801aaf8:	461a      	mov	r2, r3
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	4618      	mov	r0, r3
 801ab04:	3710      	adds	r7, #16
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd80      	pop	{r7, pc}
 801ab0a:	bf00      	nop
 801ab0c:	08024ec8 	.word	0x08024ec8
 801ab10:	20007318 	.word	0x20007318
 801ab14:	2000730a 	.word	0x2000730a
 801ab18:	20007310 	.word	0x20007310
 801ab1c:	2000730c 	.word	0x2000730c
 801ab20:	20007312 	.word	0x20007312
 801ab24:	2000730e 	.word	0x2000730e

0801ab28 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b086      	sub	sp, #24
 801ab2c:	af02      	add	r7, sp, #8
 801ab2e:	60f8      	str	r0, [r7, #12]
 801ab30:	60b9      	str	r1, [r7, #8]
 801ab32:	607a      	str	r2, [r7, #4]
 801ab34:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801ab36:	68f8      	ldr	r0, [r7, #12]
 801ab38:	8bbb      	ldrh	r3, [r7, #28]
 801ab3a:	9301      	str	r3, [sp, #4]
 801ab3c:	8b3b      	ldrh	r3, [r7, #24]
 801ab3e:	9300      	str	r3, [sp, #0]
 801ab40:	683b      	ldr	r3, [r7, #0]
 801ab42:	687a      	ldr	r2, [r7, #4]
 801ab44:	68b9      	ldr	r1, [r7, #8]
 801ab46:	f7ff ff2f 	bl	801a9a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801ab4a:	4a04      	ldr	r2, [pc, #16]	; (801ab5c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	601a      	str	r2, [r3, #0]
    }
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	4618      	mov	r0, r3
 801ab54:	3710      	adds	r7, #16
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	bf00      	nop
 801ab5c:	08024b6c 	.word	0x08024b6c

0801ab60 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b086      	sub	sp, #24
 801ab64:	af02      	add	r7, sp, #8
 801ab66:	60f8      	str	r0, [r7, #12]
 801ab68:	60b9      	str	r1, [r7, #8]
 801ab6a:	607a      	str	r2, [r7, #4]
 801ab6c:	603b      	str	r3, [r7, #0]
 801ab6e:	68f8      	ldr	r0, [r7, #12]
 801ab70:	8bbb      	ldrh	r3, [r7, #28]
 801ab72:	9301      	str	r3, [sp, #4]
 801ab74:	8b3b      	ldrh	r3, [r7, #24]
 801ab76:	9300      	str	r3, [sp, #0]
 801ab78:	683b      	ldr	r3, [r7, #0]
 801ab7a:	687a      	ldr	r2, [r7, #4]
 801ab7c:	68b9      	ldr	r1, [r7, #8]
 801ab7e:	f7ff ffd3 	bl	801ab28 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801ab82:	4a04      	ldr	r2, [pc, #16]	; (801ab94 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	601a      	str	r2, [r3, #0]
    }
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	3710      	adds	r7, #16
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	bd80      	pop	{r7, pc}
 801ab92:	bf00      	nop
 801ab94:	08024a20 	.word	0x08024a20

0801ab98 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801ab98:	b480      	push	{r7}
 801ab9a:	b083      	sub	sp, #12
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
 801aba0:	4a04      	ldr	r2, [pc, #16]	; (801abb4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	601a      	str	r2, [r3, #0]
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	4618      	mov	r0, r3
 801abaa:	370c      	adds	r7, #12
 801abac:	46bd      	mov	sp, r7
 801abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb2:	4770      	bx	lr
 801abb4:	08024a08 	.word	0x08024a08

0801abb8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801abb8:	b580      	push	{r7, lr}
 801abba:	b082      	sub	sp, #8
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	6078      	str	r0, [r7, #4]
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	4618      	mov	r0, r3
 801abc4:	f7ff ffe8 	bl	801ab98 <_ZN8touchgfx15TouchControllerC1Ev>
 801abc8:	4a03      	ldr	r2, [pc, #12]	; (801abd8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	601a      	str	r2, [r3, #0]
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	4618      	mov	r0, r3
 801abd2:	3708      	adds	r7, #8
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}
 801abd8:	080249f0 	.word	0x080249f0

0801abdc <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801abdc:	b580      	push	{r7, lr}
 801abde:	b082      	sub	sp, #8
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	4a05      	ldr	r2, [pc, #20]	; (801abfc <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	601a      	str	r2, [r3, #0]
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	4618      	mov	r0, r3
 801abee:	f7ff fe85 	bl	801a8fc <_ZN8touchgfx3LCDD1Ev>
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	4618      	mov	r0, r3
 801abf6:	3708      	adds	r7, #8
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}
 801abfc:	08026170 	.word	0x08026170

0801ac00 <_ZN8touchgfx8LCD16bppD0Ev>:
 801ac00:	b580      	push	{r7, lr}
 801ac02:	b082      	sub	sp, #8
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	6078      	str	r0, [r7, #4]
 801ac08:	6878      	ldr	r0, [r7, #4]
 801ac0a:	f7ff ffe7 	bl	801abdc <_ZN8touchgfx8LCD16bppD1Ev>
 801ac0e:	2178      	movs	r1, #120	; 0x78
 801ac10:	6878      	ldr	r0, [r7, #4]
 801ac12:	f006 fa05 	bl	8021020 <_ZdlPvj>
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3708      	adds	r7, #8
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 801ac20:	b590      	push	{r4, r7, lr}
 801ac22:	b085      	sub	sp, #20
 801ac24:	af02      	add	r7, sp, #8
 801ac26:	6078      	str	r0, [r7, #4]
 801ac28:	6039      	str	r1, [r7, #0]
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	2b01      	cmp	r3, #1
 801ac2e:	f040 81e8 	bne.w	801b002 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	f040 81e2 	bne.w	801b002 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
};
 801ac3e:	4cda      	ldr	r4, [pc, #872]	; (801afa8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 801ac40:	2301      	movs	r3, #1
 801ac42:	7023      	strb	r3, [r4, #0]
 801ac44:	1ca0      	adds	r0, r4, #2
 801ac46:	2328      	movs	r3, #40	; 0x28
 801ac48:	9300      	str	r3, [sp, #0]
 801ac4a:	231a      	movs	r3, #26
 801ac4c:	223d      	movs	r2, #61	; 0x3d
 801ac4e:	2107      	movs	r1, #7
 801ac50:	f7fd fcf4 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ac54:	2328      	movs	r3, #40	; 0x28
 801ac56:	8163      	strh	r3, [r4, #10]
 801ac58:	340c      	adds	r4, #12
 801ac5a:	2302      	movs	r3, #2
 801ac5c:	7023      	strb	r3, [r4, #0]
 801ac5e:	1ca0      	adds	r0, r4, #2
 801ac60:	2328      	movs	r3, #40	; 0x28
 801ac62:	9300      	str	r3, [sp, #0]
 801ac64:	231a      	movs	r3, #26
 801ac66:	223d      	movs	r2, #61	; 0x3d
 801ac68:	2123      	movs	r1, #35	; 0x23
 801ac6a:	f7fd fce7 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ac6e:	2328      	movs	r3, #40	; 0x28
 801ac70:	8163      	strh	r3, [r4, #10]
 801ac72:	340c      	adds	r4, #12
 801ac74:	2303      	movs	r3, #3
 801ac76:	7023      	strb	r3, [r4, #0]
 801ac78:	1ca0      	adds	r0, r4, #2
 801ac7a:	2328      	movs	r3, #40	; 0x28
 801ac7c:	9300      	str	r3, [sp, #0]
 801ac7e:	231a      	movs	r3, #26
 801ac80:	223d      	movs	r2, #61	; 0x3d
 801ac82:	213f      	movs	r1, #63	; 0x3f
 801ac84:	f7fd fcda 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ac88:	2328      	movs	r3, #40	; 0x28
 801ac8a:	8163      	strh	r3, [r4, #10]
 801ac8c:	340c      	adds	r4, #12
 801ac8e:	2304      	movs	r3, #4
 801ac90:	7023      	strb	r3, [r4, #0]
 801ac92:	1ca0      	adds	r0, r4, #2
 801ac94:	2328      	movs	r3, #40	; 0x28
 801ac96:	9300      	str	r3, [sp, #0]
 801ac98:	231a      	movs	r3, #26
 801ac9a:	223d      	movs	r2, #61	; 0x3d
 801ac9c:	215b      	movs	r1, #91	; 0x5b
 801ac9e:	f7fd fccd 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801aca2:	2328      	movs	r3, #40	; 0x28
 801aca4:	8163      	strh	r3, [r4, #10]
 801aca6:	340c      	adds	r4, #12
 801aca8:	2305      	movs	r3, #5
 801acaa:	7023      	strb	r3, [r4, #0]
 801acac:	1ca0      	adds	r0, r4, #2
 801acae:	2328      	movs	r3, #40	; 0x28
 801acb0:	9300      	str	r3, [sp, #0]
 801acb2:	231a      	movs	r3, #26
 801acb4:	223d      	movs	r2, #61	; 0x3d
 801acb6:	2177      	movs	r1, #119	; 0x77
 801acb8:	f7fd fcc0 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801acbc:	2328      	movs	r3, #40	; 0x28
 801acbe:	8163      	strh	r3, [r4, #10]
 801acc0:	340c      	adds	r4, #12
 801acc2:	2306      	movs	r3, #6
 801acc4:	7023      	strb	r3, [r4, #0]
 801acc6:	1ca0      	adds	r0, r4, #2
 801acc8:	2328      	movs	r3, #40	; 0x28
 801acca:	9300      	str	r3, [sp, #0]
 801accc:	231a      	movs	r3, #26
 801acce:	223d      	movs	r2, #61	; 0x3d
 801acd0:	2193      	movs	r1, #147	; 0x93
 801acd2:	f7fd fcb3 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801acd6:	2328      	movs	r3, #40	; 0x28
 801acd8:	8163      	strh	r3, [r4, #10]
 801acda:	340c      	adds	r4, #12
 801acdc:	2307      	movs	r3, #7
 801acde:	7023      	strb	r3, [r4, #0]
 801ace0:	1ca0      	adds	r0, r4, #2
 801ace2:	2328      	movs	r3, #40	; 0x28
 801ace4:	9300      	str	r3, [sp, #0]
 801ace6:	231a      	movs	r3, #26
 801ace8:	223d      	movs	r2, #61	; 0x3d
 801acea:	21af      	movs	r1, #175	; 0xaf
 801acec:	f7fd fca6 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801acf0:	2328      	movs	r3, #40	; 0x28
 801acf2:	8163      	strh	r3, [r4, #10]
 801acf4:	340c      	adds	r4, #12
 801acf6:	2308      	movs	r3, #8
 801acf8:	7023      	strb	r3, [r4, #0]
 801acfa:	1ca0      	adds	r0, r4, #2
 801acfc:	2328      	movs	r3, #40	; 0x28
 801acfe:	9300      	str	r3, [sp, #0]
 801ad00:	231a      	movs	r3, #26
 801ad02:	223d      	movs	r2, #61	; 0x3d
 801ad04:	21cb      	movs	r1, #203	; 0xcb
 801ad06:	f7fd fc99 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ad0a:	2328      	movs	r3, #40	; 0x28
 801ad0c:	8163      	strh	r3, [r4, #10]
 801ad0e:	340c      	adds	r4, #12
 801ad10:	2309      	movs	r3, #9
 801ad12:	7023      	strb	r3, [r4, #0]
 801ad14:	1ca0      	adds	r0, r4, #2
 801ad16:	2328      	movs	r3, #40	; 0x28
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	231a      	movs	r3, #26
 801ad1c:	223d      	movs	r2, #61	; 0x3d
 801ad1e:	21e7      	movs	r1, #231	; 0xe7
 801ad20:	f7fd fc8c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ad24:	2328      	movs	r3, #40	; 0x28
 801ad26:	8163      	strh	r3, [r4, #10]
 801ad28:	340c      	adds	r4, #12
 801ad2a:	230a      	movs	r3, #10
 801ad2c:	7023      	strb	r3, [r4, #0]
 801ad2e:	1ca0      	adds	r0, r4, #2
 801ad30:	2328      	movs	r3, #40	; 0x28
 801ad32:	9300      	str	r3, [sp, #0]
 801ad34:	231a      	movs	r3, #26
 801ad36:	223d      	movs	r2, #61	; 0x3d
 801ad38:	f240 1103 	movw	r1, #259	; 0x103
 801ad3c:	f7fd fc7e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ad40:	2328      	movs	r3, #40	; 0x28
 801ad42:	8163      	strh	r3, [r4, #10]
 801ad44:	340c      	adds	r4, #12
 801ad46:	230b      	movs	r3, #11
 801ad48:	7023      	strb	r3, [r4, #0]
 801ad4a:	1ca0      	adds	r0, r4, #2
 801ad4c:	2328      	movs	r3, #40	; 0x28
 801ad4e:	9300      	str	r3, [sp, #0]
 801ad50:	231a      	movs	r3, #26
 801ad52:	223d      	movs	r2, #61	; 0x3d
 801ad54:	f240 111f 	movw	r1, #287	; 0x11f
 801ad58:	f7fd fc70 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ad5c:	2328      	movs	r3, #40	; 0x28
 801ad5e:	8163      	strh	r3, [r4, #10]
 801ad60:	340c      	adds	r4, #12
 801ad62:	230c      	movs	r3, #12
 801ad64:	7023      	strb	r3, [r4, #0]
 801ad66:	1ca0      	adds	r0, r4, #2
 801ad68:	2328      	movs	r3, #40	; 0x28
 801ad6a:	9300      	str	r3, [sp, #0]
 801ad6c:	231a      	movs	r3, #26
 801ad6e:	2269      	movs	r2, #105	; 0x69
 801ad70:	2107      	movs	r1, #7
 801ad72:	f7fd fc63 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ad76:	2328      	movs	r3, #40	; 0x28
 801ad78:	8163      	strh	r3, [r4, #10]
 801ad7a:	340c      	adds	r4, #12
 801ad7c:	230d      	movs	r3, #13
 801ad7e:	7023      	strb	r3, [r4, #0]
 801ad80:	1ca0      	adds	r0, r4, #2
 801ad82:	2328      	movs	r3, #40	; 0x28
 801ad84:	9300      	str	r3, [sp, #0]
 801ad86:	231a      	movs	r3, #26
 801ad88:	2269      	movs	r2, #105	; 0x69
 801ad8a:	2123      	movs	r1, #35	; 0x23
 801ad8c:	f7fd fc56 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ad90:	2328      	movs	r3, #40	; 0x28
 801ad92:	8163      	strh	r3, [r4, #10]
 801ad94:	340c      	adds	r4, #12
 801ad96:	230e      	movs	r3, #14
 801ad98:	7023      	strb	r3, [r4, #0]
 801ad9a:	1ca0      	adds	r0, r4, #2
 801ad9c:	2328      	movs	r3, #40	; 0x28
 801ad9e:	9300      	str	r3, [sp, #0]
 801ada0:	231a      	movs	r3, #26
 801ada2:	2269      	movs	r2, #105	; 0x69
 801ada4:	213f      	movs	r1, #63	; 0x3f
 801ada6:	f7fd fc49 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801adaa:	2328      	movs	r3, #40	; 0x28
 801adac:	8163      	strh	r3, [r4, #10]
 801adae:	340c      	adds	r4, #12
 801adb0:	230f      	movs	r3, #15
 801adb2:	7023      	strb	r3, [r4, #0]
 801adb4:	1ca0      	adds	r0, r4, #2
 801adb6:	2328      	movs	r3, #40	; 0x28
 801adb8:	9300      	str	r3, [sp, #0]
 801adba:	231a      	movs	r3, #26
 801adbc:	2269      	movs	r2, #105	; 0x69
 801adbe:	215b      	movs	r1, #91	; 0x5b
 801adc0:	f7fd fc3c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801adc4:	2328      	movs	r3, #40	; 0x28
 801adc6:	8163      	strh	r3, [r4, #10]
 801adc8:	340c      	adds	r4, #12
 801adca:	2310      	movs	r3, #16
 801adcc:	7023      	strb	r3, [r4, #0]
 801adce:	1ca0      	adds	r0, r4, #2
 801add0:	2328      	movs	r3, #40	; 0x28
 801add2:	9300      	str	r3, [sp, #0]
 801add4:	231a      	movs	r3, #26
 801add6:	2269      	movs	r2, #105	; 0x69
 801add8:	2177      	movs	r1, #119	; 0x77
 801adda:	f7fd fc2f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801adde:	2328      	movs	r3, #40	; 0x28
 801ade0:	8163      	strh	r3, [r4, #10]
 801ade2:	340c      	adds	r4, #12
 801ade4:	2311      	movs	r3, #17
 801ade6:	7023      	strb	r3, [r4, #0]
 801ade8:	1ca0      	adds	r0, r4, #2
 801adea:	2328      	movs	r3, #40	; 0x28
 801adec:	9300      	str	r3, [sp, #0]
 801adee:	231a      	movs	r3, #26
 801adf0:	2269      	movs	r2, #105	; 0x69
 801adf2:	2193      	movs	r1, #147	; 0x93
 801adf4:	f7fd fc22 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801adf8:	2328      	movs	r3, #40	; 0x28
 801adfa:	8163      	strh	r3, [r4, #10]
 801adfc:	340c      	adds	r4, #12
 801adfe:	2312      	movs	r3, #18
 801ae00:	7023      	strb	r3, [r4, #0]
 801ae02:	1ca0      	adds	r0, r4, #2
 801ae04:	2328      	movs	r3, #40	; 0x28
 801ae06:	9300      	str	r3, [sp, #0]
 801ae08:	231a      	movs	r3, #26
 801ae0a:	2269      	movs	r2, #105	; 0x69
 801ae0c:	21af      	movs	r1, #175	; 0xaf
 801ae0e:	f7fd fc15 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ae12:	2328      	movs	r3, #40	; 0x28
 801ae14:	8163      	strh	r3, [r4, #10]
 801ae16:	340c      	adds	r4, #12
 801ae18:	2313      	movs	r3, #19
 801ae1a:	7023      	strb	r3, [r4, #0]
 801ae1c:	1ca0      	adds	r0, r4, #2
 801ae1e:	2328      	movs	r3, #40	; 0x28
 801ae20:	9300      	str	r3, [sp, #0]
 801ae22:	231a      	movs	r3, #26
 801ae24:	2269      	movs	r2, #105	; 0x69
 801ae26:	21cb      	movs	r1, #203	; 0xcb
 801ae28:	f7fd fc08 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ae2c:	2328      	movs	r3, #40	; 0x28
 801ae2e:	8163      	strh	r3, [r4, #10]
 801ae30:	340c      	adds	r4, #12
 801ae32:	2314      	movs	r3, #20
 801ae34:	7023      	strb	r3, [r4, #0]
 801ae36:	1ca0      	adds	r0, r4, #2
 801ae38:	2328      	movs	r3, #40	; 0x28
 801ae3a:	9300      	str	r3, [sp, #0]
 801ae3c:	231a      	movs	r3, #26
 801ae3e:	2269      	movs	r2, #105	; 0x69
 801ae40:	21e7      	movs	r1, #231	; 0xe7
 801ae42:	f7fd fbfb 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ae46:	2328      	movs	r3, #40	; 0x28
 801ae48:	8163      	strh	r3, [r4, #10]
 801ae4a:	340c      	adds	r4, #12
 801ae4c:	2315      	movs	r3, #21
 801ae4e:	7023      	strb	r3, [r4, #0]
 801ae50:	1ca0      	adds	r0, r4, #2
 801ae52:	2328      	movs	r3, #40	; 0x28
 801ae54:	9300      	str	r3, [sp, #0]
 801ae56:	231a      	movs	r3, #26
 801ae58:	2269      	movs	r2, #105	; 0x69
 801ae5a:	f240 1103 	movw	r1, #259	; 0x103
 801ae5e:	f7fd fbed 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ae62:	2328      	movs	r3, #40	; 0x28
 801ae64:	8163      	strh	r3, [r4, #10]
 801ae66:	340c      	adds	r4, #12
 801ae68:	2316      	movs	r3, #22
 801ae6a:	7023      	strb	r3, [r4, #0]
 801ae6c:	1ca0      	adds	r0, r4, #2
 801ae6e:	2328      	movs	r3, #40	; 0x28
 801ae70:	9300      	str	r3, [sp, #0]
 801ae72:	231a      	movs	r3, #26
 801ae74:	2269      	movs	r2, #105	; 0x69
 801ae76:	f240 111f 	movw	r1, #287	; 0x11f
 801ae7a:	f7fd fbdf 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ae7e:	2328      	movs	r3, #40	; 0x28
 801ae80:	8163      	strh	r3, [r4, #10]
 801ae82:	340c      	adds	r4, #12
 801ae84:	2317      	movs	r3, #23
 801ae86:	7023      	strb	r3, [r4, #0]
 801ae88:	1ca0      	adds	r0, r4, #2
 801ae8a:	2328      	movs	r3, #40	; 0x28
 801ae8c:	9300      	str	r3, [sp, #0]
 801ae8e:	231a      	movs	r3, #26
 801ae90:	2295      	movs	r2, #149	; 0x95
 801ae92:	213f      	movs	r1, #63	; 0x3f
 801ae94:	f7fd fbd2 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ae98:	2328      	movs	r3, #40	; 0x28
 801ae9a:	8163      	strh	r3, [r4, #10]
 801ae9c:	340c      	adds	r4, #12
 801ae9e:	2318      	movs	r3, #24
 801aea0:	7023      	strb	r3, [r4, #0]
 801aea2:	1ca0      	adds	r0, r4, #2
 801aea4:	2328      	movs	r3, #40	; 0x28
 801aea6:	9300      	str	r3, [sp, #0]
 801aea8:	231a      	movs	r3, #26
 801aeaa:	2295      	movs	r2, #149	; 0x95
 801aeac:	215b      	movs	r1, #91	; 0x5b
 801aeae:	f7fd fbc5 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801aeb2:	2328      	movs	r3, #40	; 0x28
 801aeb4:	8163      	strh	r3, [r4, #10]
 801aeb6:	340c      	adds	r4, #12
 801aeb8:	2319      	movs	r3, #25
 801aeba:	7023      	strb	r3, [r4, #0]
 801aebc:	1ca0      	adds	r0, r4, #2
 801aebe:	2328      	movs	r3, #40	; 0x28
 801aec0:	9300      	str	r3, [sp, #0]
 801aec2:	231a      	movs	r3, #26
 801aec4:	2295      	movs	r2, #149	; 0x95
 801aec6:	2177      	movs	r1, #119	; 0x77
 801aec8:	f7fd fbb8 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801aecc:	2328      	movs	r3, #40	; 0x28
 801aece:	8163      	strh	r3, [r4, #10]
 801aed0:	340c      	adds	r4, #12
 801aed2:	231a      	movs	r3, #26
 801aed4:	7023      	strb	r3, [r4, #0]
 801aed6:	1ca0      	adds	r0, r4, #2
 801aed8:	2328      	movs	r3, #40	; 0x28
 801aeda:	9300      	str	r3, [sp, #0]
 801aedc:	231a      	movs	r3, #26
 801aede:	2295      	movs	r2, #149	; 0x95
 801aee0:	2193      	movs	r1, #147	; 0x93
 801aee2:	f7fd fbab 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801aee6:	2328      	movs	r3, #40	; 0x28
 801aee8:	8163      	strh	r3, [r4, #10]
 801aeea:	340c      	adds	r4, #12
 801aeec:	231b      	movs	r3, #27
 801aeee:	7023      	strb	r3, [r4, #0]
 801aef0:	1ca0      	adds	r0, r4, #2
 801aef2:	2328      	movs	r3, #40	; 0x28
 801aef4:	9300      	str	r3, [sp, #0]
 801aef6:	231a      	movs	r3, #26
 801aef8:	2295      	movs	r2, #149	; 0x95
 801aefa:	21af      	movs	r1, #175	; 0xaf
 801aefc:	f7fd fb9e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801af00:	2328      	movs	r3, #40	; 0x28
 801af02:	8163      	strh	r3, [r4, #10]
 801af04:	340c      	adds	r4, #12
 801af06:	231c      	movs	r3, #28
 801af08:	7023      	strb	r3, [r4, #0]
 801af0a:	1ca0      	adds	r0, r4, #2
 801af0c:	2328      	movs	r3, #40	; 0x28
 801af0e:	9300      	str	r3, [sp, #0]
 801af10:	231a      	movs	r3, #26
 801af12:	2295      	movs	r2, #149	; 0x95
 801af14:	21cb      	movs	r1, #203	; 0xcb
 801af16:	f7fd fb91 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801af1a:	2328      	movs	r3, #40	; 0x28
 801af1c:	8163      	strh	r3, [r4, #10]
 801af1e:	340c      	adds	r4, #12
 801af20:	231d      	movs	r3, #29
 801af22:	7023      	strb	r3, [r4, #0]
 801af24:	1ca0      	adds	r0, r4, #2
 801af26:	2328      	movs	r3, #40	; 0x28
 801af28:	9300      	str	r3, [sp, #0]
 801af2a:	231a      	movs	r3, #26
 801af2c:	2295      	movs	r2, #149	; 0x95
 801af2e:	21e7      	movs	r1, #231	; 0xe7
 801af30:	f7fd fb84 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801af34:	2328      	movs	r3, #40	; 0x28
 801af36:	8163      	strh	r3, [r4, #10]
 801af38:	340c      	adds	r4, #12
 801af3a:	231e      	movs	r3, #30
 801af3c:	7023      	strb	r3, [r4, #0]
 801af3e:	1ca0      	adds	r0, r4, #2
 801af40:	2328      	movs	r3, #40	; 0x28
 801af42:	9300      	str	r3, [sp, #0]
 801af44:	23fc      	movs	r3, #252	; 0xfc
 801af46:	22c1      	movs	r2, #193	; 0xc1
 801af48:	213e      	movs	r1, #62	; 0x3e
 801af4a:	f7fd fb77 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801af4e:	232b      	movs	r3, #43	; 0x2b
 801af50:	8163      	strh	r3, [r4, #10]
};
 801af52:	4c16      	ldr	r4, [pc, #88]	; (801afac <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 801af54:	4620      	mov	r0, r4
 801af56:	2328      	movs	r3, #40	; 0x28
 801af58:	9300      	str	r3, [sp, #0]
 801af5a:	2338      	movs	r3, #56	; 0x38
 801af5c:	2295      	movs	r2, #149	; 0x95
 801af5e:	2105      	movs	r1, #5
 801af60:	f7fd fb6c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801af64:	2300      	movs	r3, #0
 801af66:	60a3      	str	r3, [r4, #8]
 801af68:	232a      	movs	r3, #42	; 0x2a
 801af6a:	81a3      	strh	r3, [r4, #12]
 801af6c:	3410      	adds	r4, #16
 801af6e:	4620      	mov	r0, r4
 801af70:	2328      	movs	r3, #40	; 0x28
 801af72:	9300      	str	r3, [sp, #0]
 801af74:	2338      	movs	r3, #56	; 0x38
 801af76:	2295      	movs	r2, #149	; 0x95
 801af78:	f44f 7181 	mov.w	r1, #258	; 0x102
 801af7c:	f7fd fb5e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801af80:	2300      	movs	r3, #0
 801af82:	60a3      	str	r3, [r4, #8]
 801af84:	2327      	movs	r3, #39	; 0x27
 801af86:	81a3      	strh	r3, [r4, #12]
 801af88:	3410      	adds	r4, #16
 801af8a:	4620      	mov	r0, r4
 801af8c:	2328      	movs	r3, #40	; 0x28
 801af8e:	9300      	str	r3, [sp, #0]
 801af90:	2338      	movs	r3, #56	; 0x38
 801af92:	22c1      	movs	r2, #193	; 0xc1
 801af94:	2105      	movs	r1, #5
 801af96:	f7fd fb51 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801af9a:	2300      	movs	r3, #0
 801af9c:	60a3      	str	r3, [r4, #8]
 801af9e:	2329      	movs	r3, #41	; 0x29
 801afa0:	81a3      	strh	r3, [r4, #12]
};
 801afa2:	2328      	movs	r3, #40	; 0x28
 801afa4:	9300      	str	r3, [sp, #0]
 801afa6:	e003      	b.n	801afb0 <_Z41__static_initialization_and_destruction_0ii+0x390>
 801afa8:	2000613c 	.word	0x2000613c
 801afac:	200062a4 	.word	0x200062a4
 801afb0:	f44f 739a 	mov.w	r3, #308	; 0x134
 801afb4:	220a      	movs	r2, #10
 801afb6:	210f      	movs	r1, #15
 801afb8:	4821      	ldr	r0, [pc, #132]	; (801b040 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 801afba:	f7fd fb3f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801afbe:	2130      	movs	r1, #48	; 0x30
 801afc0:	4820      	ldr	r0, [pc, #128]	; (801b044 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 801afc2:	f7fd fb79 	bl	80186b8 <_ZN8touchgfx9TypedTextC1Et>
 801afc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801afca:	481f      	ldr	r0, [pc, #124]	; (801b048 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 801afcc:	f7fd fb10 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
 801afd0:	2100      	movs	r1, #0
 801afd2:	481e      	ldr	r0, [pc, #120]	; (801b04c <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 801afd4:	f7fd fb0c 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
static STM32TouchController tc;
 801afd8:	481d      	ldr	r0, [pc, #116]	; (801b050 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 801afda:	f7ff fded 	bl	801abb8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 801afde:	481d      	ldr	r0, [pc, #116]	; (801b054 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 801afe0:	f7ff f968 	bl	801a2b4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801afe4:	481c      	ldr	r0, [pc, #112]	; (801b058 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 801afe6:	f004 fc8b 	bl	801f900 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801afea:	f44f 7388 	mov.w	r3, #272	; 0x110
 801afee:	9301      	str	r3, [sp, #4]
 801aff0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801aff4:	9300      	str	r3, [sp, #0]
 801aff6:	4b16      	ldr	r3, [pc, #88]	; (801b050 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 801aff8:	4a17      	ldr	r2, [pc, #92]	; (801b058 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 801affa:	4916      	ldr	r1, [pc, #88]	; (801b054 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 801affc:	4817      	ldr	r0, [pc, #92]	; (801b05c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 801affe:	f7ff fdaf 	bl	801ab60 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d116      	bne.n	801b036 <_Z41__static_initialization_and_destruction_0ii+0x416>
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b00e:	4293      	cmp	r3, r2
 801b010:	d111      	bne.n	801b036 <_Z41__static_initialization_and_destruction_0ii+0x416>
 801b012:	4812      	ldr	r0, [pc, #72]	; (801b05c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 801b014:	f7fe ff92 	bl	8019f3c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801b018:	4811      	ldr	r0, [pc, #68]	; (801b060 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 801b01a:	f7fc fdb3 	bl	8017b84 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801b01e:	480e      	ldr	r0, [pc, #56]	; (801b058 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 801b020:	f7ff fddc 	bl	801abdc <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801b024:	480b      	ldr	r0, [pc, #44]	; (801b054 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 801b026:	f7ff f96f 	bl	801a308 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801b02a:	4809      	ldr	r0, [pc, #36]	; (801b050 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 801b02c:	f7fe fd40 	bl	8019ab0 <_ZN20STM32TouchControllerD1Ev>
static const Keyboard::Layout layout =
 801b030:	480c      	ldr	r0, [pc, #48]	; (801b064 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 801b032:	f7fd fb7f 	bl	8018734 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
}
 801b036:	bf00      	nop
 801b038:	370c      	adds	r7, #12
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd90      	pop	{r4, r7, pc}
 801b03e:	bf00      	nop
 801b040:	200000ea 	.word	0x200000ea
 801b044:	200000f4 	.word	0x200000f4
 801b048:	200000fc 	.word	0x200000fc
 801b04c:	20000104 	.word	0x20000104
 801b050:	200062d4 	.word	0x200062d4
 801b054:	200062d8 	.word	0x200062d8
 801b058:	20007078 	.word	0x20007078
 801b05c:	200070f0 	.word	0x200070f0
 801b060:	20000108 	.word	0x20000108
 801b064:	200000d8 	.word	0x200000d8

0801b068 <_GLOBAL__sub_I_touchgfx_init>:
 801b068:	b580      	push	{r7, lr}
 801b06a:	af00      	add	r7, sp, #0
 801b06c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b070:	2001      	movs	r0, #1
 801b072:	f7ff fdd5 	bl	801ac20 <_Z41__static_initialization_and_destruction_0ii>
 801b076:	bd80      	pop	{r7, pc}

0801b078 <_GLOBAL__sub_D_touchgfx_init>:
 801b078:	b580      	push	{r7, lr}
 801b07a:	af00      	add	r7, sp, #0
 801b07c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b080:	2000      	movs	r0, #0
 801b082:	f7ff fdcd 	bl	801ac20 <_Z41__static_initialization_and_destruction_0ii>
 801b086:	bd80      	pop	{r7, pc}

0801b088 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801b088:	b580      	push	{r7, lr}
 801b08a:	b082      	sub	sp, #8
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	3320      	adds	r3, #32
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	6878      	ldr	r0, [r7, #4]
 801b09a:	4798      	blx	r3
    }
 801b09c:	bf00      	nop
 801b09e:	3708      	adds	r7, #8
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bd80      	pop	{r7, pc}

0801b0a4 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801b0a4:	b480      	push	{r7}
 801b0a6:	b083      	sub	sp, #12
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801b0b2:	3301      	adds	r3, #1
 801b0b4:	b2da      	uxtb	r2, r3
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801b0bc:	bf00      	nop
 801b0be:	370c      	adds	r7, #12
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c6:	4770      	bx	lr

0801b0c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b082      	sub	sp, #8
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	6078      	str	r0, [r7, #4]
 801b0d0:	460b      	mov	r3, r1
 801b0d2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801b0d4:	78fb      	ldrb	r3, [r7, #3]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d002      	beq.n	801b0e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801b0da:	78fb      	ldrb	r3, [r7, #3]
 801b0dc:	2b02      	cmp	r3, #2
 801b0de:	d105      	bne.n	801b0ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	78fa      	ldrb	r2, [r7, #3]
 801b0e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801b0e8:	2301      	movs	r3, #1
 801b0ea:	e027      	b.n	801b13c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 801b0ec:	78fb      	ldrb	r3, [r7, #3]
 801b0ee:	2b01      	cmp	r3, #1
 801b0f0:	d123      	bne.n	801b13a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d014      	beq.n	801b124 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	339c      	adds	r3, #156	; 0x9c
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	6878      	ldr	r0, [r7, #4]
 801b104:	4798      	blx	r3
 801b106:	4603      	mov	r3, r0
 801b108:	461a      	mov	r2, r3
 801b10a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b10e:	429a      	cmp	r2, r3
 801b110:	d008      	beq.n	801b124 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801b112:	4b0c      	ldr	r3, [pc, #48]	; (801b144 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801b114:	781b      	ldrb	r3, [r3, #0]
 801b116:	f083 0301 	eor.w	r3, r3, #1
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d001      	beq.n	801b124 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801b120:	2301      	movs	r3, #1
 801b122:	e000      	b.n	801b126 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801b124:	2300      	movs	r3, #0
 801b126:	2b00      	cmp	r3, #0
 801b128:	d005      	beq.n	801b136 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	78fa      	ldrb	r2, [r7, #3]
 801b12e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801b132:	2301      	movs	r3, #1
 801b134:	e002      	b.n	801b13c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801b136:	2300      	movs	r3, #0
 801b138:	e000      	b.n	801b13c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801b13a:	2300      	movs	r3, #0
    }
 801b13c:	4618      	mov	r0, r3
 801b13e:	3708      	adds	r7, #8
 801b140:	46bd      	mov	sp, r7
 801b142:	bd80      	pop	{r7, pc}
 801b144:	20007314 	.word	0x20007314

0801b148 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 801b148:	b480      	push	{r7}
 801b14a:	b083      	sub	sp, #12
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
 801b150:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	683a      	ldr	r2, [r7, #0]
 801b156:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801b158:	bf00      	nop
 801b15a:	370c      	adds	r7, #12
 801b15c:	46bd      	mov	sp, r7
 801b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b162:	4770      	bx	lr

0801b164 <__NVIC_EnableIRQ>:
{
 801b164:	b480      	push	{r7}
 801b166:	b083      	sub	sp, #12
 801b168:	af00      	add	r7, sp, #0
 801b16a:	4603      	mov	r3, r0
 801b16c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b16e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b172:	2b00      	cmp	r3, #0
 801b174:	db0b      	blt.n	801b18e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b176:	88fb      	ldrh	r3, [r7, #6]
 801b178:	f003 021f 	and.w	r2, r3, #31
 801b17c:	4907      	ldr	r1, [pc, #28]	; (801b19c <__NVIC_EnableIRQ+0x38>)
 801b17e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b182:	095b      	lsrs	r3, r3, #5
 801b184:	2001      	movs	r0, #1
 801b186:	fa00 f202 	lsl.w	r2, r0, r2
 801b18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b18e:	bf00      	nop
 801b190:	370c      	adds	r7, #12
 801b192:	46bd      	mov	sp, r7
 801b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b198:	4770      	bx	lr
 801b19a:	bf00      	nop
 801b19c:	e000e100 	.word	0xe000e100

0801b1a0 <__NVIC_DisableIRQ>:
{
 801b1a0:	b480      	push	{r7}
 801b1a2:	b083      	sub	sp, #12
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b1aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	db12      	blt.n	801b1d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b1b2:	88fb      	ldrh	r3, [r7, #6]
 801b1b4:	f003 021f 	and.w	r2, r3, #31
 801b1b8:	490a      	ldr	r1, [pc, #40]	; (801b1e4 <__NVIC_DisableIRQ+0x44>)
 801b1ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b1be:	095b      	lsrs	r3, r3, #5
 801b1c0:	2001      	movs	r0, #1
 801b1c2:	fa00 f202 	lsl.w	r2, r0, r2
 801b1c6:	3320      	adds	r3, #32
 801b1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801b1cc:	f3bf 8f4f 	dsb	sy
}
 801b1d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b1d2:	f3bf 8f6f 	isb	sy
}
 801b1d6:	bf00      	nop
}
 801b1d8:	bf00      	nop
 801b1da:	370c      	adds	r7, #12
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e2:	4770      	bx	lr
 801b1e4:	e000e100 	.word	0xe000e100

0801b1e8 <__NVIC_SetPriority>:
{
 801b1e8:	b480      	push	{r7}
 801b1ea:	b083      	sub	sp, #12
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	6039      	str	r1, [r7, #0]
 801b1f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b1f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	db0a      	blt.n	801b212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1fc:	683b      	ldr	r3, [r7, #0]
 801b1fe:	b2da      	uxtb	r2, r3
 801b200:	490c      	ldr	r1, [pc, #48]	; (801b234 <__NVIC_SetPriority+0x4c>)
 801b202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b206:	0112      	lsls	r2, r2, #4
 801b208:	b2d2      	uxtb	r2, r2
 801b20a:	440b      	add	r3, r1
 801b20c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801b210:	e00a      	b.n	801b228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b212:	683b      	ldr	r3, [r7, #0]
 801b214:	b2da      	uxtb	r2, r3
 801b216:	4908      	ldr	r1, [pc, #32]	; (801b238 <__NVIC_SetPriority+0x50>)
 801b218:	88fb      	ldrh	r3, [r7, #6]
 801b21a:	f003 030f 	and.w	r3, r3, #15
 801b21e:	3b04      	subs	r3, #4
 801b220:	0112      	lsls	r2, r2, #4
 801b222:	b2d2      	uxtb	r2, r2
 801b224:	440b      	add	r3, r1
 801b226:	761a      	strb	r2, [r3, #24]
}
 801b228:	bf00      	nop
 801b22a:	370c      	adds	r7, #12
 801b22c:	46bd      	mov	sp, r7
 801b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b232:	4770      	bx	lr
 801b234:	e000e100 	.word	0xe000e100
 801b238:	e000ed00 	.word	0xe000ed00

0801b23c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801b23c:	b5b0      	push	{r4, r5, r7, lr}
 801b23e:	b082      	sub	sp, #8
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	4618      	mov	r0, r3
 801b248:	f000 fd17 	bl	801bc7a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801b24c:	687d      	ldr	r5, [r7, #4]
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	3364      	adds	r3, #100	; 0x64
 801b254:	681c      	ldr	r4, [r3, #0]
 801b256:	f002 fb5d 	bl	801d914 <_ZN8touchgfx11Application11getInstanceEv>
 801b25a:	4603      	mov	r3, r0
 801b25c:	4619      	mov	r1, r3
 801b25e:	4628      	mov	r0, r5
 801b260:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	490b      	ldr	r1, [pc, #44]	; (801b294 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 801b266:	4618      	mov	r0, r3
 801b268:	f7ff ff6e 	bl	801b148 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	2101      	movs	r1, #1
 801b270:	4618      	mov	r0, r3
 801b272:	f7ff ff29 	bl	801b0c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 801b276:	6878      	ldr	r0, [r7, #4]
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	3388      	adds	r3, #136	; 0x88
 801b27e:	681c      	ldr	r4, [r3, #0]
 801b280:	2300      	movs	r3, #0
 801b282:	2200      	movs	r2, #0
 801b284:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 801b288:	47a0      	blx	r4
}
 801b28a:	bf00      	nop
 801b28c:	3708      	adds	r7, #8
 801b28e:	46bd      	mov	sp, r7
 801b290:	bdb0      	pop	{r4, r5, r7, pc}
 801b292:	bf00      	nop
 801b294:	0801a09d 	.word	0x0801a09d

0801b298 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b082      	sub	sp, #8
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801b2a0:	2109      	movs	r1, #9
 801b2a2:	205a      	movs	r0, #90	; 0x5a
 801b2a4:	f7ff ffa0 	bl	801b1e8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801b2a8:	2109      	movs	r1, #9
 801b2aa:	2058      	movs	r0, #88	; 0x58
 801b2ac:	f7ff ff9c 	bl	801b1e8 <__NVIC_SetPriority>
}
 801b2b0:	bf00      	nop
 801b2b2:	3708      	adds	r7, #8
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	bd80      	pop	{r7, pc}

0801b2b8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b082      	sub	sp, #8
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801b2c0:	205a      	movs	r0, #90	; 0x5a
 801b2c2:	f7ff ff4f 	bl	801b164 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801b2c6:	2058      	movs	r0, #88	; 0x58
 801b2c8:	f7ff ff4c 	bl	801b164 <__NVIC_EnableIRQ>
}
 801b2cc:	bf00      	nop
 801b2ce:	3708      	adds	r7, #8
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	bd80      	pop	{r7, pc}

0801b2d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b082      	sub	sp, #8
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801b2dc:	205a      	movs	r0, #90	; 0x5a
 801b2de:	f7ff ff5f 	bl	801b1a0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801b2e2:	2058      	movs	r0, #88	; 0x58
 801b2e4:	f7ff ff5c 	bl	801b1a0 <__NVIC_DisableIRQ>
}
 801b2e8:	bf00      	nop
 801b2ea:	3708      	adds	r7, #8
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd80      	pop	{r7, pc}

0801b2f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801b2f0:	b480      	push	{r7}
 801b2f2:	b083      	sub	sp, #12
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801b2f8:	4b11      	ldr	r3, [pc, #68]	; (801b340 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801b2fa:	68db      	ldr	r3, [r3, #12]
 801b2fc:	b29b      	uxth	r3, r3
 801b2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b302:	b29b      	uxth	r3, r3
 801b304:	3b01      	subs	r3, #1
 801b306:	b29a      	uxth	r2, r3
 801b308:	4b0e      	ldr	r3, [pc, #56]	; (801b344 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801b30a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801b30c:	4b0c      	ldr	r3, [pc, #48]	; (801b340 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801b30e:	691b      	ldr	r3, [r3, #16]
 801b310:	b29b      	uxth	r3, r3
 801b312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b316:	b29b      	uxth	r3, r3
 801b318:	3b01      	subs	r3, #1
 801b31a:	b29a      	uxth	r2, r3
 801b31c:	4b0a      	ldr	r3, [pc, #40]	; (801b348 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801b31e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801b320:	4b08      	ldr	r3, [pc, #32]	; (801b344 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801b322:	881a      	ldrh	r2, [r3, #0]
 801b324:	4b06      	ldr	r3, [pc, #24]	; (801b340 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801b326:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801b328:	4b05      	ldr	r3, [pc, #20]	; (801b340 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801b32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b32c:	4a04      	ldr	r2, [pc, #16]	; (801b340 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801b32e:	f043 0301 	orr.w	r3, r3, #1
 801b332:	6353      	str	r3, [r2, #52]	; 0x34
}
 801b334:	bf00      	nop
 801b336:	370c      	adds	r7, #12
 801b338:	46bd      	mov	sp, r7
 801b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b33e:	4770      	bx	lr
 801b340:	50001000 	.word	0x50001000
 801b344:	20007306 	.word	0x20007306
 801b348:	20007308 	.word	0x20007308

0801b34c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b082      	sub	sp, #8
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	4618      	mov	r0, r3
 801b358:	f000 fc76 	bl	801bc48 <_ZN8touchgfx3HAL10beginFrameEv>
 801b35c:	4603      	mov	r3, r0
}
 801b35e:	4618      	mov	r0, r3
 801b360:	3708      	adds	r7, #8
 801b362:	46bd      	mov	sp, r7
 801b364:	bd80      	pop	{r7, pc}
	...

0801b368 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b082      	sub	sp, #8
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801b376:	2b00      	cmp	r3, #0
 801b378:	d002      	beq.n	801b380 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 801b37a:	4b05      	ldr	r3, [pc, #20]	; (801b390 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 801b37c:	2201      	movs	r2, #1
 801b37e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	4618      	mov	r0, r3
 801b384:	f000 fc6c 	bl	801bc60 <_ZN8touchgfx3HAL8endFrameEv>
}
 801b388:	bf00      	nop
 801b38a:	3708      	adds	r7, #8
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bd80      	pop	{r7, pc}
 801b390:	20007304 	.word	0x20007304

0801b394 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801b394:	b480      	push	{r7}
 801b396:	b083      	sub	sp, #12
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801b39c:	4b03      	ldr	r3, [pc, #12]	; (801b3ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801b39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	370c      	adds	r7, #12
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3aa:	4770      	bx	lr
 801b3ac:	50001084 	.word	0x50001084

0801b3b0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801b3b0:	b480      	push	{r7}
 801b3b2:	b083      	sub	sp, #12
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
 801b3b8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801b3ba:	4a06      	ldr	r2, [pc, #24]	; (801b3d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801b3bc:	683b      	ldr	r3, [r7, #0]
 801b3be:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801b3c0:	4b05      	ldr	r3, [pc, #20]	; (801b3d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801b3c2:	2201      	movs	r2, #1
 801b3c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 801b3c6:	bf00      	nop
 801b3c8:	370c      	adds	r7, #12
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d0:	4770      	bx	lr
 801b3d2:	bf00      	nop
 801b3d4:	50001084 	.word	0x50001084
 801b3d8:	50001000 	.word	0x50001000

0801b3dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b086      	sub	sp, #24
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
 801b3e4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6839      	ldr	r1, [r7, #0]
 801b3ea:	4618      	mov	r0, r3
 801b3ec:	f000 fbf6 	bl	801bbdc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801b3f0:	4b25      	ldr	r3, [pc, #148]	; (801b488 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 801b3f2:	695b      	ldr	r3, [r3, #20]
 801b3f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	bf14      	ite	ne
 801b3fc:	2301      	movne	r3, #1
 801b3fe:	2300      	moveq	r3, #0
 801b400:	b2db      	uxtb	r3, r3
 801b402:	2b00      	cmp	r3, #0
 801b404:	d03c      	beq.n	801b480 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801b406:	4b20      	ldr	r3, [pc, #128]	; (801b488 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 801b408:	2200      	movs	r2, #0
 801b40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801b40e:	f3bf 8f4f 	dsb	sy
}
 801b412:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 801b414:	4b1c      	ldr	r3, [pc, #112]	; (801b488 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 801b416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b41a:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801b41c:	697b      	ldr	r3, [r7, #20]
 801b41e:	0b5b      	lsrs	r3, r3, #13
 801b420:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801b424:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801b426:	697b      	ldr	r3, [r7, #20]
 801b428:	08db      	lsrs	r3, r3, #3
 801b42a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b42e:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801b430:	693b      	ldr	r3, [r7, #16]
 801b432:	015a      	lsls	r2, r3, #5
 801b434:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801b438:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801b43a:	68fa      	ldr	r2, [r7, #12]
 801b43c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801b43e:	4912      	ldr	r1, [pc, #72]	; (801b488 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 801b440:	4313      	orrs	r3, r2
 801b442:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	1e5a      	subs	r2, r3, #1
 801b44a:	60fa      	str	r2, [r7, #12]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	bf14      	ite	ne
 801b450:	2301      	movne	r3, #1
 801b452:	2300      	moveq	r3, #0
 801b454:	b2db      	uxtb	r3, r3
 801b456:	2b00      	cmp	r3, #0
 801b458:	d000      	beq.n	801b45c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 801b45a:	e7e9      	b.n	801b430 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 801b45c:	693b      	ldr	r3, [r7, #16]
 801b45e:	1e5a      	subs	r2, r3, #1
 801b460:	613a      	str	r2, [r7, #16]
 801b462:	2b00      	cmp	r3, #0
 801b464:	bf14      	ite	ne
 801b466:	2301      	movne	r3, #1
 801b468:	2300      	moveq	r3, #0
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d000      	beq.n	801b472 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 801b470:	e7d9      	b.n	801b426 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 801b472:	f3bf 8f4f 	dsb	sy
}
 801b476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b478:	f3bf 8f6f 	isb	sy
}
 801b47c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 801b47e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 801b480:	bf00      	nop
 801b482:	3718      	adds	r7, #24
 801b484:	46bd      	mov	sp, r7
 801b486:	bd80      	pop	{r7, pc}
 801b488:	e000ed00 	.word	0xe000ed00

0801b48c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b084      	sub	sp, #16
 801b490:	af00      	add	r7, sp, #0
 801b492:	60f8      	str	r0, [r7, #12]
 801b494:	60b9      	str	r1, [r7, #8]
 801b496:	607a      	str	r2, [r7, #4]
 801b498:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 801b49a:	68f8      	ldr	r0, [r7, #12]
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	687a      	ldr	r2, [r7, #4]
 801b4a0:	68b9      	ldr	r1, [r7, #8]
 801b4a2:	f000 fd04 	bl	801beae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801b4a6:	4603      	mov	r3, r0
}
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	3710      	adds	r7, #16
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bd80      	pop	{r7, pc}

0801b4b0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 801b4b0:	b480      	push	{r7}
 801b4b2:	b085      	sub	sp, #20
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801b4b8:	4b0d      	ldr	r3, [pc, #52]	; (801b4f0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801b4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4bc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801b4be:	4b0c      	ldr	r3, [pc, #48]	; (801b4f0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801b4c0:	68db      	ldr	r3, [r3, #12]
 801b4c2:	b29b      	uxth	r3, r3
 801b4c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b4c8:	b29b      	uxth	r3, r3
 801b4ca:	3301      	adds	r3, #1
 801b4cc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 801b4ce:	89fa      	ldrh	r2, [r7, #14]
 801b4d0:	89bb      	ldrh	r3, [r7, #12]
 801b4d2:	429a      	cmp	r2, r3
 801b4d4:	d304      	bcc.n	801b4e0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801b4d6:	89fa      	ldrh	r2, [r7, #14]
 801b4d8:	89bb      	ldrh	r3, [r7, #12]
 801b4da:	1ad3      	subs	r3, r2, r3
 801b4dc:	b29b      	uxth	r3, r3
 801b4de:	e000      	b.n	801b4e2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 801b4e0:	2300      	movs	r3, #0
}
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	3714      	adds	r7, #20
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ec:	4770      	bx	lr
 801b4ee:	bf00      	nop
 801b4f0:	50001000 	.word	0x50001000

0801b4f4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 801b4f4:	b480      	push	{r7}
 801b4f6:	b087      	sub	sp, #28
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801b4fc:	4b26      	ldr	r3, [pc, #152]	; (801b598 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 801b4fe:	695b      	ldr	r3, [r3, #20]
 801b500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b504:	2b00      	cmp	r3, #0
 801b506:	bf14      	ite	ne
 801b508:	2301      	movne	r3, #1
 801b50a:	2300      	moveq	r3, #0
 801b50c:	b2db      	uxtb	r3, r3
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d03c      	beq.n	801b58c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801b512:	4b21      	ldr	r3, [pc, #132]	; (801b598 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 801b514:	2200      	movs	r2, #0
 801b516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801b51a:	f3bf 8f4f 	dsb	sy
}
 801b51e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801b520:	4b1d      	ldr	r3, [pc, #116]	; (801b598 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 801b522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b526:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801b528:	697b      	ldr	r3, [r7, #20]
 801b52a:	0b5b      	lsrs	r3, r3, #13
 801b52c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801b530:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	08db      	lsrs	r3, r3, #3
 801b536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b53a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801b53c:	693b      	ldr	r3, [r7, #16]
 801b53e:	015a      	lsls	r2, r3, #5
 801b540:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801b544:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801b546:	68fa      	ldr	r2, [r7, #12]
 801b548:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801b54a:	4913      	ldr	r1, [pc, #76]	; (801b598 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 801b54c:	4313      	orrs	r3, r2
 801b54e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	1e5a      	subs	r2, r3, #1
 801b556:	60fa      	str	r2, [r7, #12]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	bf14      	ite	ne
 801b55c:	2301      	movne	r3, #1
 801b55e:	2300      	moveq	r3, #0
 801b560:	b2db      	uxtb	r3, r3
 801b562:	2b00      	cmp	r3, #0
 801b564:	d000      	beq.n	801b568 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 801b566:	e7e9      	b.n	801b53c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 801b568:	693b      	ldr	r3, [r7, #16]
 801b56a:	1e5a      	subs	r2, r3, #1
 801b56c:	613a      	str	r2, [r7, #16]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	bf14      	ite	ne
 801b572:	2301      	movne	r3, #1
 801b574:	2300      	moveq	r3, #0
 801b576:	b2db      	uxtb	r3, r3
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d000      	beq.n	801b57e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 801b57c:	e7d9      	b.n	801b532 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801b57e:	f3bf 8f4f 	dsb	sy
}
 801b582:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b584:	f3bf 8f6f 	isb	sy
}
 801b588:	bf00      	nop
}
 801b58a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 801b58c:	bf00      	nop
 801b58e:	371c      	adds	r7, #28
 801b590:	46bd      	mov	sp, r7
 801b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b596:	4770      	bx	lr
 801b598:	e000ed00 	.word	0xe000ed00

0801b59c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 801b59c:	b480      	push	{r7}
 801b59e:	b087      	sub	sp, #28
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801b5a4:	4b26      	ldr	r3, [pc, #152]	; (801b640 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 801b5a6:	695b      	ldr	r3, [r3, #20]
 801b5a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	bf14      	ite	ne
 801b5b0:	2301      	movne	r3, #1
 801b5b2:	2300      	moveq	r3, #0
 801b5b4:	b2db      	uxtb	r3, r3
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d03c      	beq.n	801b634 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801b5ba:	4b21      	ldr	r3, [pc, #132]	; (801b640 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 801b5bc:	2200      	movs	r2, #0
 801b5be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801b5c2:	f3bf 8f4f 	dsb	sy
}
 801b5c6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801b5c8:	4b1d      	ldr	r3, [pc, #116]	; (801b640 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 801b5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b5ce:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801b5d0:	697b      	ldr	r3, [r7, #20]
 801b5d2:	0b5b      	lsrs	r3, r3, #13
 801b5d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801b5d8:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801b5da:	697b      	ldr	r3, [r7, #20]
 801b5dc:	08db      	lsrs	r3, r3, #3
 801b5de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b5e2:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801b5e4:	693b      	ldr	r3, [r7, #16]
 801b5e6:	015a      	lsls	r2, r3, #5
 801b5e8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801b5ec:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801b5ee:	68fa      	ldr	r2, [r7, #12]
 801b5f0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801b5f2:	4913      	ldr	r1, [pc, #76]	; (801b640 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 801b5f4:	4313      	orrs	r3, r2
 801b5f6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	1e5a      	subs	r2, r3, #1
 801b5fe:	60fa      	str	r2, [r7, #12]
 801b600:	2b00      	cmp	r3, #0
 801b602:	bf14      	ite	ne
 801b604:	2301      	movne	r3, #1
 801b606:	2300      	moveq	r3, #0
 801b608:	b2db      	uxtb	r3, r3
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d000      	beq.n	801b610 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 801b60e:	e7e9      	b.n	801b5e4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 801b610:	693b      	ldr	r3, [r7, #16]
 801b612:	1e5a      	subs	r2, r3, #1
 801b614:	613a      	str	r2, [r7, #16]
 801b616:	2b00      	cmp	r3, #0
 801b618:	bf14      	ite	ne
 801b61a:	2301      	movne	r3, #1
 801b61c:	2300      	moveq	r3, #0
 801b61e:	b2db      	uxtb	r3, r3
 801b620:	2b00      	cmp	r3, #0
 801b622:	d000      	beq.n	801b626 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 801b624:	e7d9      	b.n	801b5da <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801b626:	f3bf 8f4f 	dsb	sy
}
 801b62a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b62c:	f3bf 8f6f 	isb	sy
}
 801b630:	bf00      	nop
}
 801b632:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 801b634:	bf00      	nop
 801b636:	371c      	adds	r7, #28
 801b638:	46bd      	mov	sp, r7
 801b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63e:	4770      	bx	lr
 801b640:	e000ed00 	.word	0xe000ed00

0801b644 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 801b644:	b580      	push	{r7, lr}
 801b646:	b082      	sub	sp, #8
 801b648:	af00      	add	r7, sp, #0
 801b64a:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 801b64c:	f7fd f84a 	bl	80186e4 <_ZN8touchgfx3HAL11getInstanceEv>
 801b650:	4603      	mov	r3, r0
 801b652:	2b00      	cmp	r3, #0
 801b654:	bf0c      	ite	eq
 801b656:	2301      	moveq	r3, #1
 801b658:	2300      	movne	r3, #0
 801b65a:	b2db      	uxtb	r3, r3
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d132      	bne.n	801b6c6 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 801b660:	4b1b      	ldr	r3, [pc, #108]	; (801b6d0 <HAL_LTDC_LineEventCallback+0x8c>)
 801b662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b664:	4a1b      	ldr	r2, [pc, #108]	; (801b6d4 <HAL_LTDC_LineEventCallback+0x90>)
 801b666:	8812      	ldrh	r2, [r2, #0]
 801b668:	4293      	cmp	r3, r2
 801b66a:	bf0c      	ite	eq
 801b66c:	2301      	moveq	r3, #1
 801b66e:	2300      	movne	r3, #0
 801b670:	b2db      	uxtb	r3, r3
 801b672:	2b00      	cmp	r3, #0
 801b674:	d017      	beq.n	801b6a6 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801b676:	4b18      	ldr	r3, [pc, #96]	; (801b6d8 <HAL_LTDC_LineEventCallback+0x94>)
 801b678:	881b      	ldrh	r3, [r3, #0]
 801b67a:	4619      	mov	r1, r3
 801b67c:	6878      	ldr	r0, [r7, #4]
 801b67e:	f7ec fb69 	bl	8007d54 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801b682:	f7fd f82f 	bl	80186e4 <_ZN8touchgfx3HAL11getInstanceEv>
 801b686:	4603      	mov	r3, r0
 801b688:	4618      	mov	r0, r3
 801b68a:	f7ff fd0b 	bl	801b0a4 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801b68e:	f7fe fcdd 	bl	801a04c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801b692:	f7fd f827 	bl	80186e4 <_ZN8touchgfx3HAL11getInstanceEv>
 801b696:	4603      	mov	r3, r0
 801b698:	4618      	mov	r0, r3
 801b69a:	f001 f90f 	bl	801c8bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801b69e:	2000      	movs	r0, #0
 801b6a0:	f7fe fa28 	bl	8019af4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b6a4:	e010      	b.n	801b6c8 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801b6a6:	4b0b      	ldr	r3, [pc, #44]	; (801b6d4 <HAL_LTDC_LineEventCallback+0x90>)
 801b6a8:	881b      	ldrh	r3, [r3, #0]
 801b6aa:	4619      	mov	r1, r3
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f7ec fb51 	bl	8007d54 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 801b6b2:	f7fd f817 	bl	80186e4 <_ZN8touchgfx3HAL11getInstanceEv>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	f7ff fce5 	bl	801b088 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801b6be:	2000      	movs	r0, #0
 801b6c0:	f7fe fa23 	bl	8019b0a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b6c4:	e000      	b.n	801b6c8 <HAL_LTDC_LineEventCallback+0x84>
            return;
 801b6c6:	bf00      	nop
        }
    }
 801b6c8:	3708      	adds	r7, #8
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	50001000 	.word	0x50001000
 801b6d4:	20007306 	.word	0x20007306
 801b6d8:	20007308 	.word	0x20007308

0801b6dc <_Z41__static_initialization_and_destruction_0ii>:
}
 801b6dc:	b590      	push	{r4, r7, lr}
 801b6de:	b085      	sub	sp, #20
 801b6e0:	af02      	add	r7, sp, #8
 801b6e2:	6078      	str	r0, [r7, #4]
 801b6e4:	6039      	str	r1, [r7, #0]
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	2b01      	cmp	r3, #1
 801b6ea:	f040 81d3 	bne.w	801ba94 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
 801b6ee:	683b      	ldr	r3, [r7, #0]
 801b6f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b6f4:	4293      	cmp	r3, r2
 801b6f6:	f040 81cd 	bne.w	801ba94 <_Z41__static_initialization_and_destruction_0ii+0x3b8>
};
 801b6fa:	4cda      	ldr	r4, [pc, #872]	; (801ba64 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 801b6fc:	2301      	movs	r3, #1
 801b6fe:	7023      	strb	r3, [r4, #0]
 801b700:	1ca0      	adds	r0, r4, #2
 801b702:	2328      	movs	r3, #40	; 0x28
 801b704:	9300      	str	r3, [sp, #0]
 801b706:	231a      	movs	r3, #26
 801b708:	223d      	movs	r2, #61	; 0x3d
 801b70a:	2107      	movs	r1, #7
 801b70c:	f7fc ff96 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b710:	2328      	movs	r3, #40	; 0x28
 801b712:	8163      	strh	r3, [r4, #10]
 801b714:	340c      	adds	r4, #12
 801b716:	2302      	movs	r3, #2
 801b718:	7023      	strb	r3, [r4, #0]
 801b71a:	1ca0      	adds	r0, r4, #2
 801b71c:	2328      	movs	r3, #40	; 0x28
 801b71e:	9300      	str	r3, [sp, #0]
 801b720:	231a      	movs	r3, #26
 801b722:	223d      	movs	r2, #61	; 0x3d
 801b724:	2123      	movs	r1, #35	; 0x23
 801b726:	f7fc ff89 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b72a:	2328      	movs	r3, #40	; 0x28
 801b72c:	8163      	strh	r3, [r4, #10]
 801b72e:	340c      	adds	r4, #12
 801b730:	2303      	movs	r3, #3
 801b732:	7023      	strb	r3, [r4, #0]
 801b734:	1ca0      	adds	r0, r4, #2
 801b736:	2328      	movs	r3, #40	; 0x28
 801b738:	9300      	str	r3, [sp, #0]
 801b73a:	231a      	movs	r3, #26
 801b73c:	223d      	movs	r2, #61	; 0x3d
 801b73e:	213f      	movs	r1, #63	; 0x3f
 801b740:	f7fc ff7c 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b744:	2328      	movs	r3, #40	; 0x28
 801b746:	8163      	strh	r3, [r4, #10]
 801b748:	340c      	adds	r4, #12
 801b74a:	2304      	movs	r3, #4
 801b74c:	7023      	strb	r3, [r4, #0]
 801b74e:	1ca0      	adds	r0, r4, #2
 801b750:	2328      	movs	r3, #40	; 0x28
 801b752:	9300      	str	r3, [sp, #0]
 801b754:	231a      	movs	r3, #26
 801b756:	223d      	movs	r2, #61	; 0x3d
 801b758:	215b      	movs	r1, #91	; 0x5b
 801b75a:	f7fc ff6f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b75e:	2328      	movs	r3, #40	; 0x28
 801b760:	8163      	strh	r3, [r4, #10]
 801b762:	340c      	adds	r4, #12
 801b764:	2305      	movs	r3, #5
 801b766:	7023      	strb	r3, [r4, #0]
 801b768:	1ca0      	adds	r0, r4, #2
 801b76a:	2328      	movs	r3, #40	; 0x28
 801b76c:	9300      	str	r3, [sp, #0]
 801b76e:	231a      	movs	r3, #26
 801b770:	223d      	movs	r2, #61	; 0x3d
 801b772:	2177      	movs	r1, #119	; 0x77
 801b774:	f7fc ff62 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b778:	2328      	movs	r3, #40	; 0x28
 801b77a:	8163      	strh	r3, [r4, #10]
 801b77c:	340c      	adds	r4, #12
 801b77e:	2306      	movs	r3, #6
 801b780:	7023      	strb	r3, [r4, #0]
 801b782:	1ca0      	adds	r0, r4, #2
 801b784:	2328      	movs	r3, #40	; 0x28
 801b786:	9300      	str	r3, [sp, #0]
 801b788:	231a      	movs	r3, #26
 801b78a:	223d      	movs	r2, #61	; 0x3d
 801b78c:	2193      	movs	r1, #147	; 0x93
 801b78e:	f7fc ff55 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b792:	2328      	movs	r3, #40	; 0x28
 801b794:	8163      	strh	r3, [r4, #10]
 801b796:	340c      	adds	r4, #12
 801b798:	2307      	movs	r3, #7
 801b79a:	7023      	strb	r3, [r4, #0]
 801b79c:	1ca0      	adds	r0, r4, #2
 801b79e:	2328      	movs	r3, #40	; 0x28
 801b7a0:	9300      	str	r3, [sp, #0]
 801b7a2:	231a      	movs	r3, #26
 801b7a4:	223d      	movs	r2, #61	; 0x3d
 801b7a6:	21af      	movs	r1, #175	; 0xaf
 801b7a8:	f7fc ff48 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b7ac:	2328      	movs	r3, #40	; 0x28
 801b7ae:	8163      	strh	r3, [r4, #10]
 801b7b0:	340c      	adds	r4, #12
 801b7b2:	2308      	movs	r3, #8
 801b7b4:	7023      	strb	r3, [r4, #0]
 801b7b6:	1ca0      	adds	r0, r4, #2
 801b7b8:	2328      	movs	r3, #40	; 0x28
 801b7ba:	9300      	str	r3, [sp, #0]
 801b7bc:	231a      	movs	r3, #26
 801b7be:	223d      	movs	r2, #61	; 0x3d
 801b7c0:	21cb      	movs	r1, #203	; 0xcb
 801b7c2:	f7fc ff3b 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b7c6:	2328      	movs	r3, #40	; 0x28
 801b7c8:	8163      	strh	r3, [r4, #10]
 801b7ca:	340c      	adds	r4, #12
 801b7cc:	2309      	movs	r3, #9
 801b7ce:	7023      	strb	r3, [r4, #0]
 801b7d0:	1ca0      	adds	r0, r4, #2
 801b7d2:	2328      	movs	r3, #40	; 0x28
 801b7d4:	9300      	str	r3, [sp, #0]
 801b7d6:	231a      	movs	r3, #26
 801b7d8:	223d      	movs	r2, #61	; 0x3d
 801b7da:	21e7      	movs	r1, #231	; 0xe7
 801b7dc:	f7fc ff2e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b7e0:	2328      	movs	r3, #40	; 0x28
 801b7e2:	8163      	strh	r3, [r4, #10]
 801b7e4:	340c      	adds	r4, #12
 801b7e6:	230a      	movs	r3, #10
 801b7e8:	7023      	strb	r3, [r4, #0]
 801b7ea:	1ca0      	adds	r0, r4, #2
 801b7ec:	2328      	movs	r3, #40	; 0x28
 801b7ee:	9300      	str	r3, [sp, #0]
 801b7f0:	231a      	movs	r3, #26
 801b7f2:	223d      	movs	r2, #61	; 0x3d
 801b7f4:	f240 1103 	movw	r1, #259	; 0x103
 801b7f8:	f7fc ff20 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b7fc:	2328      	movs	r3, #40	; 0x28
 801b7fe:	8163      	strh	r3, [r4, #10]
 801b800:	340c      	adds	r4, #12
 801b802:	230b      	movs	r3, #11
 801b804:	7023      	strb	r3, [r4, #0]
 801b806:	1ca0      	adds	r0, r4, #2
 801b808:	2328      	movs	r3, #40	; 0x28
 801b80a:	9300      	str	r3, [sp, #0]
 801b80c:	231a      	movs	r3, #26
 801b80e:	223d      	movs	r2, #61	; 0x3d
 801b810:	f240 111f 	movw	r1, #287	; 0x11f
 801b814:	f7fc ff12 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b818:	2328      	movs	r3, #40	; 0x28
 801b81a:	8163      	strh	r3, [r4, #10]
 801b81c:	340c      	adds	r4, #12
 801b81e:	230c      	movs	r3, #12
 801b820:	7023      	strb	r3, [r4, #0]
 801b822:	1ca0      	adds	r0, r4, #2
 801b824:	2328      	movs	r3, #40	; 0x28
 801b826:	9300      	str	r3, [sp, #0]
 801b828:	231a      	movs	r3, #26
 801b82a:	2269      	movs	r2, #105	; 0x69
 801b82c:	2107      	movs	r1, #7
 801b82e:	f7fc ff05 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b832:	2328      	movs	r3, #40	; 0x28
 801b834:	8163      	strh	r3, [r4, #10]
 801b836:	340c      	adds	r4, #12
 801b838:	230d      	movs	r3, #13
 801b83a:	7023      	strb	r3, [r4, #0]
 801b83c:	1ca0      	adds	r0, r4, #2
 801b83e:	2328      	movs	r3, #40	; 0x28
 801b840:	9300      	str	r3, [sp, #0]
 801b842:	231a      	movs	r3, #26
 801b844:	2269      	movs	r2, #105	; 0x69
 801b846:	2123      	movs	r1, #35	; 0x23
 801b848:	f7fc fef8 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b84c:	2328      	movs	r3, #40	; 0x28
 801b84e:	8163      	strh	r3, [r4, #10]
 801b850:	340c      	adds	r4, #12
 801b852:	230e      	movs	r3, #14
 801b854:	7023      	strb	r3, [r4, #0]
 801b856:	1ca0      	adds	r0, r4, #2
 801b858:	2328      	movs	r3, #40	; 0x28
 801b85a:	9300      	str	r3, [sp, #0]
 801b85c:	231a      	movs	r3, #26
 801b85e:	2269      	movs	r2, #105	; 0x69
 801b860:	213f      	movs	r1, #63	; 0x3f
 801b862:	f7fc feeb 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b866:	2328      	movs	r3, #40	; 0x28
 801b868:	8163      	strh	r3, [r4, #10]
 801b86a:	340c      	adds	r4, #12
 801b86c:	230f      	movs	r3, #15
 801b86e:	7023      	strb	r3, [r4, #0]
 801b870:	1ca0      	adds	r0, r4, #2
 801b872:	2328      	movs	r3, #40	; 0x28
 801b874:	9300      	str	r3, [sp, #0]
 801b876:	231a      	movs	r3, #26
 801b878:	2269      	movs	r2, #105	; 0x69
 801b87a:	215b      	movs	r1, #91	; 0x5b
 801b87c:	f7fc fede 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b880:	2328      	movs	r3, #40	; 0x28
 801b882:	8163      	strh	r3, [r4, #10]
 801b884:	340c      	adds	r4, #12
 801b886:	2310      	movs	r3, #16
 801b888:	7023      	strb	r3, [r4, #0]
 801b88a:	1ca0      	adds	r0, r4, #2
 801b88c:	2328      	movs	r3, #40	; 0x28
 801b88e:	9300      	str	r3, [sp, #0]
 801b890:	231a      	movs	r3, #26
 801b892:	2269      	movs	r2, #105	; 0x69
 801b894:	2177      	movs	r1, #119	; 0x77
 801b896:	f7fc fed1 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b89a:	2328      	movs	r3, #40	; 0x28
 801b89c:	8163      	strh	r3, [r4, #10]
 801b89e:	340c      	adds	r4, #12
 801b8a0:	2311      	movs	r3, #17
 801b8a2:	7023      	strb	r3, [r4, #0]
 801b8a4:	1ca0      	adds	r0, r4, #2
 801b8a6:	2328      	movs	r3, #40	; 0x28
 801b8a8:	9300      	str	r3, [sp, #0]
 801b8aa:	231a      	movs	r3, #26
 801b8ac:	2269      	movs	r2, #105	; 0x69
 801b8ae:	2193      	movs	r1, #147	; 0x93
 801b8b0:	f7fc fec4 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b8b4:	2328      	movs	r3, #40	; 0x28
 801b8b6:	8163      	strh	r3, [r4, #10]
 801b8b8:	340c      	adds	r4, #12
 801b8ba:	2312      	movs	r3, #18
 801b8bc:	7023      	strb	r3, [r4, #0]
 801b8be:	1ca0      	adds	r0, r4, #2
 801b8c0:	2328      	movs	r3, #40	; 0x28
 801b8c2:	9300      	str	r3, [sp, #0]
 801b8c4:	231a      	movs	r3, #26
 801b8c6:	2269      	movs	r2, #105	; 0x69
 801b8c8:	21af      	movs	r1, #175	; 0xaf
 801b8ca:	f7fc feb7 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b8ce:	2328      	movs	r3, #40	; 0x28
 801b8d0:	8163      	strh	r3, [r4, #10]
 801b8d2:	340c      	adds	r4, #12
 801b8d4:	2313      	movs	r3, #19
 801b8d6:	7023      	strb	r3, [r4, #0]
 801b8d8:	1ca0      	adds	r0, r4, #2
 801b8da:	2328      	movs	r3, #40	; 0x28
 801b8dc:	9300      	str	r3, [sp, #0]
 801b8de:	231a      	movs	r3, #26
 801b8e0:	2269      	movs	r2, #105	; 0x69
 801b8e2:	21cb      	movs	r1, #203	; 0xcb
 801b8e4:	f7fc feaa 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b8e8:	2328      	movs	r3, #40	; 0x28
 801b8ea:	8163      	strh	r3, [r4, #10]
 801b8ec:	340c      	adds	r4, #12
 801b8ee:	2314      	movs	r3, #20
 801b8f0:	7023      	strb	r3, [r4, #0]
 801b8f2:	1ca0      	adds	r0, r4, #2
 801b8f4:	2328      	movs	r3, #40	; 0x28
 801b8f6:	9300      	str	r3, [sp, #0]
 801b8f8:	231a      	movs	r3, #26
 801b8fa:	2269      	movs	r2, #105	; 0x69
 801b8fc:	21e7      	movs	r1, #231	; 0xe7
 801b8fe:	f7fc fe9d 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b902:	2328      	movs	r3, #40	; 0x28
 801b904:	8163      	strh	r3, [r4, #10]
 801b906:	340c      	adds	r4, #12
 801b908:	2315      	movs	r3, #21
 801b90a:	7023      	strb	r3, [r4, #0]
 801b90c:	1ca0      	adds	r0, r4, #2
 801b90e:	2328      	movs	r3, #40	; 0x28
 801b910:	9300      	str	r3, [sp, #0]
 801b912:	231a      	movs	r3, #26
 801b914:	2269      	movs	r2, #105	; 0x69
 801b916:	f240 1103 	movw	r1, #259	; 0x103
 801b91a:	f7fc fe8f 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b91e:	2328      	movs	r3, #40	; 0x28
 801b920:	8163      	strh	r3, [r4, #10]
 801b922:	340c      	adds	r4, #12
 801b924:	2316      	movs	r3, #22
 801b926:	7023      	strb	r3, [r4, #0]
 801b928:	1ca0      	adds	r0, r4, #2
 801b92a:	2328      	movs	r3, #40	; 0x28
 801b92c:	9300      	str	r3, [sp, #0]
 801b92e:	231a      	movs	r3, #26
 801b930:	2269      	movs	r2, #105	; 0x69
 801b932:	f240 111f 	movw	r1, #287	; 0x11f
 801b936:	f7fc fe81 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b93a:	2328      	movs	r3, #40	; 0x28
 801b93c:	8163      	strh	r3, [r4, #10]
 801b93e:	340c      	adds	r4, #12
 801b940:	2317      	movs	r3, #23
 801b942:	7023      	strb	r3, [r4, #0]
 801b944:	1ca0      	adds	r0, r4, #2
 801b946:	2328      	movs	r3, #40	; 0x28
 801b948:	9300      	str	r3, [sp, #0]
 801b94a:	231a      	movs	r3, #26
 801b94c:	2295      	movs	r2, #149	; 0x95
 801b94e:	213f      	movs	r1, #63	; 0x3f
 801b950:	f7fc fe74 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b954:	2328      	movs	r3, #40	; 0x28
 801b956:	8163      	strh	r3, [r4, #10]
 801b958:	340c      	adds	r4, #12
 801b95a:	2318      	movs	r3, #24
 801b95c:	7023      	strb	r3, [r4, #0]
 801b95e:	1ca0      	adds	r0, r4, #2
 801b960:	2328      	movs	r3, #40	; 0x28
 801b962:	9300      	str	r3, [sp, #0]
 801b964:	231a      	movs	r3, #26
 801b966:	2295      	movs	r2, #149	; 0x95
 801b968:	215b      	movs	r1, #91	; 0x5b
 801b96a:	f7fc fe67 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b96e:	2328      	movs	r3, #40	; 0x28
 801b970:	8163      	strh	r3, [r4, #10]
 801b972:	340c      	adds	r4, #12
 801b974:	2319      	movs	r3, #25
 801b976:	7023      	strb	r3, [r4, #0]
 801b978:	1ca0      	adds	r0, r4, #2
 801b97a:	2328      	movs	r3, #40	; 0x28
 801b97c:	9300      	str	r3, [sp, #0]
 801b97e:	231a      	movs	r3, #26
 801b980:	2295      	movs	r2, #149	; 0x95
 801b982:	2177      	movs	r1, #119	; 0x77
 801b984:	f7fc fe5a 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b988:	2328      	movs	r3, #40	; 0x28
 801b98a:	8163      	strh	r3, [r4, #10]
 801b98c:	340c      	adds	r4, #12
 801b98e:	231a      	movs	r3, #26
 801b990:	7023      	strb	r3, [r4, #0]
 801b992:	1ca0      	adds	r0, r4, #2
 801b994:	2328      	movs	r3, #40	; 0x28
 801b996:	9300      	str	r3, [sp, #0]
 801b998:	231a      	movs	r3, #26
 801b99a:	2295      	movs	r2, #149	; 0x95
 801b99c:	2193      	movs	r1, #147	; 0x93
 801b99e:	f7fc fe4d 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b9a2:	2328      	movs	r3, #40	; 0x28
 801b9a4:	8163      	strh	r3, [r4, #10]
 801b9a6:	340c      	adds	r4, #12
 801b9a8:	231b      	movs	r3, #27
 801b9aa:	7023      	strb	r3, [r4, #0]
 801b9ac:	1ca0      	adds	r0, r4, #2
 801b9ae:	2328      	movs	r3, #40	; 0x28
 801b9b0:	9300      	str	r3, [sp, #0]
 801b9b2:	231a      	movs	r3, #26
 801b9b4:	2295      	movs	r2, #149	; 0x95
 801b9b6:	21af      	movs	r1, #175	; 0xaf
 801b9b8:	f7fc fe40 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b9bc:	2328      	movs	r3, #40	; 0x28
 801b9be:	8163      	strh	r3, [r4, #10]
 801b9c0:	340c      	adds	r4, #12
 801b9c2:	231c      	movs	r3, #28
 801b9c4:	7023      	strb	r3, [r4, #0]
 801b9c6:	1ca0      	adds	r0, r4, #2
 801b9c8:	2328      	movs	r3, #40	; 0x28
 801b9ca:	9300      	str	r3, [sp, #0]
 801b9cc:	231a      	movs	r3, #26
 801b9ce:	2295      	movs	r2, #149	; 0x95
 801b9d0:	21cb      	movs	r1, #203	; 0xcb
 801b9d2:	f7fc fe33 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b9d6:	2328      	movs	r3, #40	; 0x28
 801b9d8:	8163      	strh	r3, [r4, #10]
 801b9da:	340c      	adds	r4, #12
 801b9dc:	231d      	movs	r3, #29
 801b9de:	7023      	strb	r3, [r4, #0]
 801b9e0:	1ca0      	adds	r0, r4, #2
 801b9e2:	2328      	movs	r3, #40	; 0x28
 801b9e4:	9300      	str	r3, [sp, #0]
 801b9e6:	231a      	movs	r3, #26
 801b9e8:	2295      	movs	r2, #149	; 0x95
 801b9ea:	21e7      	movs	r1, #231	; 0xe7
 801b9ec:	f7fc fe26 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801b9f0:	2328      	movs	r3, #40	; 0x28
 801b9f2:	8163      	strh	r3, [r4, #10]
 801b9f4:	340c      	adds	r4, #12
 801b9f6:	231e      	movs	r3, #30
 801b9f8:	7023      	strb	r3, [r4, #0]
 801b9fa:	1ca0      	adds	r0, r4, #2
 801b9fc:	2328      	movs	r3, #40	; 0x28
 801b9fe:	9300      	str	r3, [sp, #0]
 801ba00:	23fc      	movs	r3, #252	; 0xfc
 801ba02:	22c1      	movs	r2, #193	; 0xc1
 801ba04:	213e      	movs	r1, #62	; 0x3e
 801ba06:	f7fc fe19 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ba0a:	232b      	movs	r3, #43	; 0x2b
 801ba0c:	8163      	strh	r3, [r4, #10]
};
 801ba0e:	4c16      	ldr	r4, [pc, #88]	; (801ba68 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 801ba10:	4620      	mov	r0, r4
 801ba12:	2328      	movs	r3, #40	; 0x28
 801ba14:	9300      	str	r3, [sp, #0]
 801ba16:	2338      	movs	r3, #56	; 0x38
 801ba18:	2295      	movs	r2, #149	; 0x95
 801ba1a:	2105      	movs	r1, #5
 801ba1c:	f7fc fe0e 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ba20:	2300      	movs	r3, #0
 801ba22:	60a3      	str	r3, [r4, #8]
 801ba24:	232a      	movs	r3, #42	; 0x2a
 801ba26:	81a3      	strh	r3, [r4, #12]
 801ba28:	3410      	adds	r4, #16
 801ba2a:	4620      	mov	r0, r4
 801ba2c:	2328      	movs	r3, #40	; 0x28
 801ba2e:	9300      	str	r3, [sp, #0]
 801ba30:	2338      	movs	r3, #56	; 0x38
 801ba32:	2295      	movs	r2, #149	; 0x95
 801ba34:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ba38:	f7fc fe00 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	60a3      	str	r3, [r4, #8]
 801ba40:	2327      	movs	r3, #39	; 0x27
 801ba42:	81a3      	strh	r3, [r4, #12]
 801ba44:	3410      	adds	r4, #16
 801ba46:	4620      	mov	r0, r4
 801ba48:	2328      	movs	r3, #40	; 0x28
 801ba4a:	9300      	str	r3, [sp, #0]
 801ba4c:	2338      	movs	r3, #56	; 0x38
 801ba4e:	22c1      	movs	r2, #193	; 0xc1
 801ba50:	2105      	movs	r1, #5
 801ba52:	f7fc fdf3 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ba56:	2300      	movs	r3, #0
 801ba58:	60a3      	str	r3, [r4, #8]
 801ba5a:	2329      	movs	r3, #41	; 0x29
 801ba5c:	81a3      	strh	r3, [r4, #12]
};
 801ba5e:	2328      	movs	r3, #40	; 0x28
 801ba60:	9300      	str	r3, [sp, #0]
 801ba62:	e003      	b.n	801ba6c <_Z41__static_initialization_and_destruction_0ii+0x390>
 801ba64:	2000716c 	.word	0x2000716c
 801ba68:	200072d4 	.word	0x200072d4
 801ba6c:	f44f 739a 	mov.w	r3, #308	; 0x134
 801ba70:	220a      	movs	r2, #10
 801ba72:	210f      	movs	r1, #15
 801ba74:	480f      	ldr	r0, [pc, #60]	; (801bab4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 801ba76:	f7fc fde1 	bl	801863c <_ZN8touchgfx4RectC1Essss>
 801ba7a:	2130      	movs	r1, #48	; 0x30
 801ba7c:	480e      	ldr	r0, [pc, #56]	; (801bab8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 801ba7e:	f7fc fe1b 	bl	80186b8 <_ZN8touchgfx9TypedTextC1Et>
 801ba82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ba86:	480d      	ldr	r0, [pc, #52]	; (801babc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 801ba88:	f7fc fdb2 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
 801ba8c:	2100      	movs	r1, #0
 801ba8e:	480c      	ldr	r0, [pc, #48]	; (801bac0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 801ba90:	f7fc fdae 	bl	80185f0 <_ZN8touchgfx9colortypeC1Em>
static const Keyboard::Layout layout =
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d107      	bne.n	801baaa <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801baa0:	4293      	cmp	r3, r2
 801baa2:	d102      	bne.n	801baaa <_Z41__static_initialization_and_destruction_0ii+0x3ce>
 801baa4:	4807      	ldr	r0, [pc, #28]	; (801bac4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 801baa6:	f7fc fe45 	bl	8018734 <_ZN8touchgfx8Keyboard6LayoutD1Ev>
 801baaa:	bf00      	nop
 801baac:	370c      	adds	r7, #12
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd90      	pop	{r4, r7, pc}
 801bab2:	bf00      	nop
 801bab4:	2000011e 	.word	0x2000011e
 801bab8:	20000128 	.word	0x20000128
 801babc:	20000130 	.word	0x20000130
 801bac0:	20000138 	.word	0x20000138
 801bac4:	2000010c 	.word	0x2000010c

0801bac8 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 801bac8:	b580      	push	{r7, lr}
 801baca:	af00      	add	r7, sp, #0
 801bacc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bad0:	2001      	movs	r0, #1
 801bad2:	f7ff fe03 	bl	801b6dc <_Z41__static_initialization_and_destruction_0ii>
 801bad6:	bd80      	pop	{r7, pc}

0801bad8 <_GLOBAL__sub_D__ZN20TouchGFXGeneratedHAL10initializeEv>:
 801bad8:	b580      	push	{r7, lr}
 801bada:	af00      	add	r7, sp, #0
 801badc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bae0:	2000      	movs	r0, #0
 801bae2:	f7ff fdfb 	bl	801b6dc <_Z41__static_initialization_and_destruction_0ii>
 801bae6:	bd80      	pop	{r7, pc}

0801bae8 <_ZN8touchgfx4RectaNERKS0_>:
 801bae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801baec:	f9b1 7000 	ldrsh.w	r7, [r1]
 801baf0:	888c      	ldrh	r4, [r1, #4]
 801baf2:	f9b0 9000 	ldrsh.w	r9, [r0]
 801baf6:	443c      	add	r4, r7
 801baf8:	b2a4      	uxth	r4, r4
 801bafa:	fa0f f884 	sxth.w	r8, r4
 801bafe:	45c1      	cmp	r9, r8
 801bb00:	da2f      	bge.n	801bb62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801bb02:	8882      	ldrh	r2, [r0, #4]
 801bb04:	444a      	add	r2, r9
 801bb06:	b292      	uxth	r2, r2
 801bb08:	fa0f fe82 	sxth.w	lr, r2
 801bb0c:	4577      	cmp	r7, lr
 801bb0e:	da28      	bge.n	801bb62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801bb10:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801bb14:	88cb      	ldrh	r3, [r1, #6]
 801bb16:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801bb1a:	442b      	add	r3, r5
 801bb1c:	b21b      	sxth	r3, r3
 801bb1e:	429e      	cmp	r6, r3
 801bb20:	da1f      	bge.n	801bb62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801bb22:	88c3      	ldrh	r3, [r0, #6]
 801bb24:	4433      	add	r3, r6
 801bb26:	b29b      	uxth	r3, r3
 801bb28:	fa0f fc83 	sxth.w	ip, r3
 801bb2c:	4565      	cmp	r5, ip
 801bb2e:	da18      	bge.n	801bb62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801bb30:	454f      	cmp	r7, r9
 801bb32:	bfb8      	it	lt
 801bb34:	464f      	movlt	r7, r9
 801bb36:	42b5      	cmp	r5, r6
 801bb38:	bfb8      	it	lt
 801bb3a:	4635      	movlt	r5, r6
 801bb3c:	45f0      	cmp	r8, lr
 801bb3e:	bfd8      	it	le
 801bb40:	4622      	movle	r2, r4
 801bb42:	1bd2      	subs	r2, r2, r7
 801bb44:	8082      	strh	r2, [r0, #4]
 801bb46:	884a      	ldrh	r2, [r1, #2]
 801bb48:	88c9      	ldrh	r1, [r1, #6]
 801bb4a:	8007      	strh	r7, [r0, #0]
 801bb4c:	440a      	add	r2, r1
 801bb4e:	8045      	strh	r5, [r0, #2]
 801bb50:	b292      	uxth	r2, r2
 801bb52:	b211      	sxth	r1, r2
 801bb54:	458c      	cmp	ip, r1
 801bb56:	bfa8      	it	ge
 801bb58:	4613      	movge	r3, r2
 801bb5a:	1b5b      	subs	r3, r3, r5
 801bb5c:	80c3      	strh	r3, [r0, #6]
 801bb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb62:	2300      	movs	r3, #0
 801bb64:	8003      	strh	r3, [r0, #0]
 801bb66:	8043      	strh	r3, [r0, #2]
 801bb68:	8083      	strh	r3, [r0, #4]
 801bb6a:	80c3      	strh	r3, [r0, #6]
 801bb6c:	e7f7      	b.n	801bb5e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801bb6e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801bb6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	dd06      	ble.n	801bb84 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801bb76:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801bb7a:	2800      	cmp	r0, #0
 801bb7c:	bfcc      	ite	gt
 801bb7e:	2000      	movgt	r0, #0
 801bb80:	2001      	movle	r0, #1
 801bb82:	4770      	bx	lr
 801bb84:	2001      	movs	r0, #1
 801bb86:	4770      	bx	lr

0801bb88 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801bb88:	2000      	movs	r0, #0
 801bb8a:	4770      	bx	lr

0801bb8c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801bb8c:	2001      	movs	r0, #1
 801bb8e:	4770      	bx	lr

0801bb90 <_ZN8touchgfx9DragEventD1Ev>:
 801bb90:	4770      	bx	lr

0801bb92 <_ZN8touchgfx10ClickEventD1Ev>:
 801bb92:	4770      	bx	lr

0801bb94 <_ZN8touchgfx10ClickEventD0Ev>:
 801bb94:	b510      	push	{r4, lr}
 801bb96:	4604      	mov	r4, r0
 801bb98:	210c      	movs	r1, #12
 801bb9a:	f005 fa41 	bl	8021020 <_ZdlPvj>
 801bb9e:	4620      	mov	r0, r4
 801bba0:	bd10      	pop	{r4, pc}

0801bba2 <_ZN8touchgfx9DragEventD0Ev>:
 801bba2:	b510      	push	{r4, lr}
 801bba4:	4604      	mov	r4, r0
 801bba6:	2110      	movs	r1, #16
 801bba8:	f005 fa3a 	bl	8021020 <_ZdlPvj>
 801bbac:	4620      	mov	r0, r4
 801bbae:	bd10      	pop	{r4, pc}

0801bbb0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801bbb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bbb4:	4770      	bx	lr

0801bbb6 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801bbb6:	4770      	bx	lr

0801bbb8 <_ZN8touchgfx3HAL10FlushCacheEv>:
 801bbb8:	4770      	bx	lr

0801bbba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801bbba:	6803      	ldr	r3, [r0, #0]
 801bbbc:	b513      	push	{r0, r1, r4, lr}
 801bbbe:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	e9cd 3300 	strd	r3, r3, [sp]
 801bbc8:	466b      	mov	r3, sp
 801bbca:	47a0      	blx	r4
 801bbcc:	b002      	add	sp, #8
 801bbce:	bd10      	pop	{r4, pc}

0801bbd0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801bbd0:	2301      	movs	r3, #1
 801bbd2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801bbd6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801bbda:	4770      	bx	lr

0801bbdc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801bbdc:	2301      	movs	r3, #1
 801bbde:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801bbe2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801bbe6:	4770      	bx	lr

0801bbe8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801bbe8:	6843      	ldr	r3, [r0, #4]
 801bbea:	2201      	movs	r2, #1
 801bbec:	725a      	strb	r2, [r3, #9]
 801bbee:	6840      	ldr	r0, [r0, #4]
 801bbf0:	6803      	ldr	r3, [r0, #0]
 801bbf2:	691b      	ldr	r3, [r3, #16]
 801bbf4:	4718      	bx	r3

0801bbf6 <_ZN8touchgfx3HAL8flushDMAEv>:
 801bbf6:	6840      	ldr	r0, [r0, #4]
 801bbf8:	6803      	ldr	r3, [r0, #0]
 801bbfa:	689b      	ldr	r3, [r3, #8]
 801bbfc:	4718      	bx	r3

0801bbfe <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801bbfe:	b530      	push	{r4, r5, lr}
 801bc00:	b08b      	sub	sp, #44	; 0x2c
 801bc02:	6804      	ldr	r4, [r0, #0]
 801bc04:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801bc08:	9509      	str	r5, [sp, #36]	; 0x24
 801bc0a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801bc0e:	9508      	str	r5, [sp, #32]
 801bc10:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801bc14:	9507      	str	r5, [sp, #28]
 801bc16:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801bc1a:	9506      	str	r5, [sp, #24]
 801bc1c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801bc20:	9505      	str	r5, [sp, #20]
 801bc22:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801bc26:	9504      	str	r5, [sp, #16]
 801bc28:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801bc2c:	9503      	str	r5, [sp, #12]
 801bc2e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801bc32:	9502      	str	r5, [sp, #8]
 801bc34:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801bc38:	e9cd 3500 	strd	r3, r5, [sp]
 801bc3c:	4613      	mov	r3, r2
 801bc3e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801bc40:	2200      	movs	r2, #0
 801bc42:	47a0      	blx	r4
 801bc44:	b00b      	add	sp, #44	; 0x2c
 801bc46:	bd30      	pop	{r4, r5, pc}

0801bc48 <_ZN8touchgfx3HAL10beginFrameEv>:
 801bc48:	4b04      	ldr	r3, [pc, #16]	; (801bc5c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801bc4a:	781b      	ldrb	r3, [r3, #0]
 801bc4c:	b123      	cbz	r3, 801bc58 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801bc4e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801bc52:	f080 0001 	eor.w	r0, r0, #1
 801bc56:	4770      	bx	lr
 801bc58:	2001      	movs	r0, #1
 801bc5a:	4770      	bx	lr
 801bc5c:	20007314 	.word	0x20007314

0801bc60 <_ZN8touchgfx3HAL8endFrameEv>:
 801bc60:	b510      	push	{r4, lr}
 801bc62:	4604      	mov	r4, r0
 801bc64:	6840      	ldr	r0, [r0, #4]
 801bc66:	6803      	ldr	r3, [r0, #0]
 801bc68:	689b      	ldr	r3, [r3, #8]
 801bc6a:	4798      	blx	r3
 801bc6c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801bc70:	b113      	cbz	r3, 801bc78 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801bc72:	2301      	movs	r3, #1
 801bc74:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801bc78:	bd10      	pop	{r4, pc}

0801bc7a <_ZN8touchgfx3HAL10initializeEv>:
 801bc7a:	b510      	push	{r4, lr}
 801bc7c:	4604      	mov	r4, r0
 801bc7e:	f7fe f97f 	bl	8019f80 <_ZN8touchgfx10OSWrappers10initializeEv>
 801bc82:	6860      	ldr	r0, [r4, #4]
 801bc84:	6803      	ldr	r3, [r0, #0]
 801bc86:	68db      	ldr	r3, [r3, #12]
 801bc88:	4798      	blx	r3
 801bc8a:	68e0      	ldr	r0, [r4, #12]
 801bc8c:	6803      	ldr	r3, [r0, #0]
 801bc8e:	689b      	ldr	r3, [r3, #8]
 801bc90:	4798      	blx	r3
 801bc92:	6823      	ldr	r3, [r4, #0]
 801bc94:	4620      	mov	r0, r4
 801bc96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc9c:	4718      	bx	r3

0801bc9e <_ZN8touchgfx3HAL9taskEntryEv>:
 801bc9e:	b508      	push	{r3, lr}
 801bca0:	6803      	ldr	r3, [r0, #0]
 801bca2:	4604      	mov	r4, r0
 801bca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bca8:	4798      	blx	r3
 801bcaa:	6823      	ldr	r3, [r4, #0]
 801bcac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bcae:	4620      	mov	r0, r4
 801bcb0:	4798      	blx	r3
 801bcb2:	f7fe f9db 	bl	801a06c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801bcb6:	6823      	ldr	r3, [r4, #0]
 801bcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bcba:	e7f8      	b.n	801bcae <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801bcbc <_ZN8touchgfx3HAL4tickEv>:
 801bcbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bcbe:	6803      	ldr	r3, [r0, #0]
 801bcc0:	4604      	mov	r4, r0
 801bcc2:	4d5b      	ldr	r5, [pc, #364]	; (801be30 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801bcc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801bcc8:	4798      	blx	r3
 801bcca:	2800      	cmp	r0, #0
 801bccc:	f000 8095 	beq.w	801bdfa <_ZN8touchgfx3HAL4tickEv+0x13e>
 801bcd0:	2001      	movs	r0, #1
 801bcd2:	2600      	movs	r6, #0
 801bcd4:	f7fd ff0e 	bl	8019af4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801bcd8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801bcdc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801bce0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801bce4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801bce8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801bcec:	b133      	cbz	r3, 801bcfc <_ZN8touchgfx3HAL4tickEv+0x40>
 801bcee:	6823      	ldr	r3, [r4, #0]
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801bcf6:	4798      	blx	r3
 801bcf8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801bcfc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801bd00:	2601      	movs	r6, #1
 801bd02:	6862      	ldr	r2, [r4, #4]
 801bd04:	f083 0301 	eor.w	r3, r3, #1
 801bd08:	702e      	strb	r6, [r5, #0]
 801bd0a:	7253      	strb	r3, [r2, #9]
 801bd0c:	f001 fe02 	bl	801d914 <_ZN8touchgfx11Application11getInstanceEv>
 801bd10:	6803      	ldr	r3, [r0, #0]
 801bd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd14:	4798      	blx	r3
 801bd16:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801bd1a:	b90b      	cbnz	r3, 801bd20 <_ZN8touchgfx3HAL4tickEv+0x64>
 801bd1c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801bd20:	f001 fdf8 	bl	801d914 <_ZN8touchgfx11Application11getInstanceEv>
 801bd24:	6803      	ldr	r3, [r0, #0]
 801bd26:	695b      	ldr	r3, [r3, #20]
 801bd28:	4798      	blx	r3
 801bd2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd2c:	6803      	ldr	r3, [r0, #0]
 801bd2e:	691b      	ldr	r3, [r3, #16]
 801bd30:	4798      	blx	r3
 801bd32:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801bd36:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801bd3a:	3b01      	subs	r3, #1
 801bd3c:	b2db      	uxtb	r3, r3
 801bd3e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801bd42:	b10a      	cbz	r2, 801bd48 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d1eb      	bne.n	801bd20 <_ZN8touchgfx3HAL4tickEv+0x64>
 801bd48:	4a3a      	ldr	r2, [pc, #232]	; (801be34 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801bd4a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801bd4e:	7813      	ldrb	r3, [r2, #0]
 801bd50:	3301      	adds	r3, #1
 801bd52:	b25b      	sxtb	r3, r3
 801bd54:	4299      	cmp	r1, r3
 801bd56:	7013      	strb	r3, [r2, #0]
 801bd58:	dc10      	bgt.n	801bd7c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	68e0      	ldr	r0, [r4, #12]
 801bd5e:	a902      	add	r1, sp, #8
 801bd60:	7013      	strb	r3, [r2, #0]
 801bd62:	aa03      	add	r2, sp, #12
 801bd64:	6803      	ldr	r3, [r0, #0]
 801bd66:	68db      	ldr	r3, [r3, #12]
 801bd68:	4798      	blx	r3
 801bd6a:	6823      	ldr	r3, [r4, #0]
 801bd6c:	2800      	cmp	r0, #0
 801bd6e:	d050      	beq.n	801be12 <_ZN8touchgfx3HAL4tickEv+0x156>
 801bd70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801bd74:	4620      	mov	r0, r4
 801bd76:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801bd7a:	4798      	blx	r3
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	6960      	ldr	r0, [r4, #20]
 801bd80:	f88d 3007 	strb.w	r3, [sp, #7]
 801bd84:	b158      	cbz	r0, 801bd9e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801bd86:	6803      	ldr	r3, [r0, #0]
 801bd88:	f10d 0107 	add.w	r1, sp, #7
 801bd8c:	68db      	ldr	r3, [r3, #12]
 801bd8e:	4798      	blx	r3
 801bd90:	b128      	cbz	r0, 801bd9e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801bd92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd94:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801bd98:	6803      	ldr	r3, [r0, #0]
 801bd9a:	68db      	ldr	r3, [r3, #12]
 801bd9c:	4798      	blx	r3
 801bd9e:	f104 001c 	add.w	r0, r4, #28
 801bda2:	f005 f88d 	bl	8020ec0 <_ZN8touchgfx8Gestures4tickEv>
 801bda6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801bdaa:	b30b      	cbz	r3, 801bdf0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801bdac:	6920      	ldr	r0, [r4, #16]
 801bdae:	6803      	ldr	r3, [r0, #0]
 801bdb0:	691b      	ldr	r3, [r3, #16]
 801bdb2:	4798      	blx	r3
 801bdb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bdb6:	4606      	mov	r6, r0
 801bdb8:	b903      	cbnz	r3, 801bdbc <_ZN8touchgfx3HAL4tickEv+0x100>
 801bdba:	6720      	str	r0, [r4, #112]	; 0x70
 801bdbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bdbe:	4a1e      	ldr	r2, [pc, #120]	; (801be38 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801bdc0:	1af3      	subs	r3, r6, r3
 801bdc2:	4293      	cmp	r3, r2
 801bdc4:	d914      	bls.n	801bdf0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801bdc6:	6920      	ldr	r0, [r4, #16]
 801bdc8:	6803      	ldr	r3, [r0, #0]
 801bdca:	699b      	ldr	r3, [r3, #24]
 801bdcc:	4798      	blx	r3
 801bdce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bdd0:	2264      	movs	r2, #100	; 0x64
 801bdd2:	1af3      	subs	r3, r6, r3
 801bdd4:	fbb3 f3f2 	udiv	r3, r3, r2
 801bdd8:	fbb0 f0f3 	udiv	r0, r0, r3
 801bddc:	2800      	cmp	r0, #0
 801bdde:	dc1d      	bgt.n	801be1c <_ZN8touchgfx3HAL4tickEv+0x160>
 801bde0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801bde4:	6920      	ldr	r0, [r4, #16]
 801bde6:	2100      	movs	r1, #0
 801bde8:	6803      	ldr	r3, [r0, #0]
 801bdea:	69db      	ldr	r3, [r3, #28]
 801bdec:	4798      	blx	r3
 801bdee:	6726      	str	r6, [r4, #112]	; 0x70
 801bdf0:	f001 fd90 	bl	801d914 <_ZN8touchgfx11Application11getInstanceEv>
 801bdf4:	6803      	ldr	r3, [r0, #0]
 801bdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdf8:	4798      	blx	r3
 801bdfa:	6823      	ldr	r3, [r4, #0]
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801be02:	4798      	blx	r3
 801be04:	2001      	movs	r0, #1
 801be06:	f7fd fe80 	bl	8019b0a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801be0a:	2300      	movs	r3, #0
 801be0c:	702b      	strb	r3, [r5, #0]
 801be0e:	b004      	add	sp, #16
 801be10:	bd70      	pop	{r4, r5, r6, pc}
 801be12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801be16:	4620      	mov	r0, r4
 801be18:	4798      	blx	r3
 801be1a:	e7af      	b.n	801bd7c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801be1c:	2863      	cmp	r0, #99	; 0x63
 801be1e:	bfcb      	itete	gt
 801be20:	2300      	movgt	r3, #0
 801be22:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801be26:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801be2a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801be2e:	e7d9      	b.n	801bde4 <_ZN8touchgfx3HAL4tickEv+0x128>
 801be30:	2000731c 	.word	0x2000731c
 801be34:	2000731d 	.word	0x2000731d
 801be38:	05f5e100 	.word	0x05f5e100

0801be3c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801be3c:	f7fe b8e2 	b.w	801a004 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801be40 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801be40:	6581      	str	r1, [r0, #88]	; 0x58
 801be42:	301c      	adds	r0, #28
 801be44:	f005 b83a 	b.w	8020ebc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801be48 <_ZN8touchgfx3HAL5touchEll>:
 801be48:	b530      	push	{r4, r5, lr}
 801be4a:	b087      	sub	sp, #28
 801be4c:	4604      	mov	r4, r0
 801be4e:	a804      	add	r0, sp, #16
 801be50:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801be54:	f001 fcb8 	bl	801d7c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801be58:	9b04      	ldr	r3, [sp, #16]
 801be5a:	a906      	add	r1, sp, #24
 801be5c:	a803      	add	r0, sp, #12
 801be5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801be62:	9b05      	ldr	r3, [sp, #20]
 801be64:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801be68:	f001 fd00 	bl	801d86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801be6c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801be70:	f104 001c 	add.w	r0, r4, #28
 801be74:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801be78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801be7c:	b189      	cbz	r1, 801bea2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801be7e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801be82:	9300      	str	r3, [sp, #0]
 801be84:	4613      	mov	r3, r2
 801be86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801be8a:	462a      	mov	r2, r5
 801be8c:	f005 f826 	bl	8020edc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801be90:	b128      	cbz	r0, 801be9e <_ZN8touchgfx3HAL5touchEll+0x56>
 801be92:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801be96:	65e3      	str	r3, [r4, #92]	; 0x5c
 801be98:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801be9c:	6623      	str	r3, [r4, #96]	; 0x60
 801be9e:	b007      	add	sp, #28
 801bea0:	bd30      	pop	{r4, r5, pc}
 801bea2:	f005 f85b 	bl	8020f5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801bea6:	2301      	movs	r3, #1
 801bea8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801beac:	e7f1      	b.n	801be92 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801beae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801beae:	b510      	push	{r4, lr}
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d046      	beq.n	801bf42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801beb4:	ea81 0002 	eor.w	r0, r1, r2
 801beb8:	07c4      	lsls	r4, r0, #31
 801beba:	d508      	bpl.n	801bece <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801bebc:	440b      	add	r3, r1
 801bebe:	3a01      	subs	r2, #1
 801bec0:	428b      	cmp	r3, r1
 801bec2:	d93e      	bls.n	801bf42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801bec4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801bec8:	f801 0b01 	strb.w	r0, [r1], #1
 801becc:	e7f8      	b.n	801bec0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801bece:	07d0      	lsls	r0, r2, #31
 801bed0:	bf42      	ittt	mi
 801bed2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801bed6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801beda:	f801 0b01 	strbmi.w	r0, [r1], #1
 801bede:	2b01      	cmp	r3, #1
 801bee0:	d911      	bls.n	801bf06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801bee2:	ea81 0402 	eor.w	r4, r1, r2
 801bee6:	4610      	mov	r0, r2
 801bee8:	07a4      	lsls	r4, r4, #30
 801beea:	d022      	beq.n	801bf32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801beec:	f023 0401 	bic.w	r4, r3, #1
 801bef0:	440c      	add	r4, r1
 801bef2:	428c      	cmp	r4, r1
 801bef4:	4602      	mov	r2, r0
 801bef6:	d904      	bls.n	801bf02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801bef8:	8812      	ldrh	r2, [r2, #0]
 801befa:	3002      	adds	r0, #2
 801befc:	f821 2b02 	strh.w	r2, [r1], #2
 801bf00:	e7f7      	b.n	801bef2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801bf02:	f003 0301 	and.w	r3, r3, #1
 801bf06:	f023 0003 	bic.w	r0, r3, #3
 801bf0a:	4408      	add	r0, r1
 801bf0c:	4288      	cmp	r0, r1
 801bf0e:	4614      	mov	r4, r2
 801bf10:	d904      	bls.n	801bf1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801bf12:	6824      	ldr	r4, [r4, #0]
 801bf14:	3204      	adds	r2, #4
 801bf16:	f841 4b04 	str.w	r4, [r1], #4
 801bf1a:	e7f7      	b.n	801bf0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801bf1c:	f003 0303 	and.w	r3, r3, #3
 801bf20:	3a01      	subs	r2, #1
 801bf22:	440b      	add	r3, r1
 801bf24:	428b      	cmp	r3, r1
 801bf26:	d90c      	bls.n	801bf42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801bf28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801bf2c:	f801 0b01 	strb.w	r0, [r1], #1
 801bf30:	e7f8      	b.n	801bf24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801bf32:	0790      	lsls	r0, r2, #30
 801bf34:	d0e7      	beq.n	801bf06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801bf36:	f832 0b02 	ldrh.w	r0, [r2], #2
 801bf3a:	3b02      	subs	r3, #2
 801bf3c:	f821 0b02 	strh.w	r0, [r1], #2
 801bf40:	e7e1      	b.n	801bf06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801bf42:	2001      	movs	r0, #1
 801bf44:	bd10      	pop	{r4, pc}

0801bf46 <_ZN8touchgfx3HAL7noTouchEv>:
 801bf46:	b510      	push	{r4, lr}
 801bf48:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801bf4c:	4604      	mov	r4, r0
 801bf4e:	b153      	cbz	r3, 801bf66 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801bf50:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801bf54:	2101      	movs	r1, #1
 801bf56:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801bf5a:	301c      	adds	r0, #28
 801bf5c:	f004 fffe 	bl	8020f5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801bf60:	2300      	movs	r3, #0
 801bf62:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801bf66:	bd10      	pop	{r4, pc}

0801bf68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801bf68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf6c:	4604      	mov	r4, r0
 801bf6e:	6980      	ldr	r0, [r0, #24]
 801bf70:	b085      	sub	sp, #20
 801bf72:	460f      	mov	r7, r1
 801bf74:	4690      	mov	r8, r2
 801bf76:	4699      	mov	r9, r3
 801bf78:	b930      	cbnz	r0, 801bf88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801bf7a:	4b1c      	ldr	r3, [pc, #112]	; (801bfec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 801bf7c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 801bf80:	4a1b      	ldr	r2, [pc, #108]	; (801bff0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801bf82:	481c      	ldr	r0, [pc, #112]	; (801bff4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 801bf84:	f005 f87a 	bl	802107c <__assert_func>
 801bf88:	ad04      	add	r5, sp, #16
 801bf8a:	2600      	movs	r6, #0
 801bf8c:	f845 6d04 	str.w	r6, [r5, #-4]!
 801bf90:	6806      	ldr	r6, [r0, #0]
 801bf92:	9501      	str	r5, [sp, #4]
 801bf94:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801bf98:	9500      	str	r5, [sp, #0]
 801bf9a:	6835      	ldr	r5, [r6, #0]
 801bf9c:	47a8      	blx	r5
 801bf9e:	4d16      	ldr	r5, [pc, #88]	; (801bff8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801bfa0:	4606      	mov	r6, r0
 801bfa2:	f8a5 9000 	strh.w	r9, [r5]
 801bfa6:	f7fc fba9 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801bfaa:	6803      	ldr	r3, [r0, #0]
 801bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfae:	4798      	blx	r3
 801bfb0:	2801      	cmp	r0, #1
 801bfb2:	d012      	beq.n	801bfda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801bfb4:	d306      	bcc.n	801bfc4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801bfb6:	280d      	cmp	r0, #13
 801bfb8:	d80b      	bhi.n	801bfd2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801bfba:	4b10      	ldr	r3, [pc, #64]	; (801bffc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801bfbc:	f240 115b 	movw	r1, #347	; 0x15b
 801bfc0:	4a0b      	ldr	r2, [pc, #44]	; (801bff0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801bfc2:	e7de      	b.n	801bf82 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801bfc4:	882b      	ldrh	r3, [r5, #0]
 801bfc6:	fb08 7203 	mla	r2, r8, r3, r7
 801bfca:	9b03      	ldr	r3, [sp, #12]
 801bfcc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801bfd0:	63e3      	str	r3, [r4, #60]	; 0x3c
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	b005      	add	sp, #20
 801bfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfda:	882a      	ldrh	r2, [r5, #0]
 801bfdc:	9b03      	ldr	r3, [sp, #12]
 801bfde:	fb08 7202 	mla	r2, r8, r2, r7
 801bfe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bfe6:	1a9a      	subs	r2, r3, r2
 801bfe8:	63e2      	str	r2, [r4, #60]	; 0x3c
 801bfea:	e7f2      	b.n	801bfd2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801bfec:	08024dca 	.word	0x08024dca
 801bff0:	08025163 	.word	0x08025163
 801bff4:	08024e0f 	.word	0x08024e0f
 801bff8:	20007310 	.word	0x20007310
 801bffc:	08024e35 	.word	0x08024e35

0801c000 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801c000:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c002:	b08b      	sub	sp, #44	; 0x2c
 801c004:	4617      	mov	r7, r2
 801c006:	4604      	mov	r4, r0
 801c008:	460e      	mov	r6, r1
 801c00a:	461d      	mov	r5, r3
 801c00c:	f7fc fb76 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c010:	6803      	ldr	r3, [r0, #0]
 801c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c014:	4798      	blx	r3
 801c016:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801c01a:	9007      	str	r0, [sp, #28]
 801c01c:	4631      	mov	r1, r6
 801c01e:	6822      	ldr	r2, [r4, #0]
 801c020:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801c024:	4b0c      	ldr	r3, [pc, #48]	; (801c058 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801c026:	4620      	mov	r0, r4
 801c028:	881b      	ldrh	r3, [r3, #0]
 801c02a:	9306      	str	r3, [sp, #24]
 801c02c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801c030:	9305      	str	r3, [sp, #20]
 801c032:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801c036:	9304      	str	r3, [sp, #16]
 801c038:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801c03c:	9303      	str	r3, [sp, #12]
 801c03e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c042:	9302      	str	r3, [sp, #8]
 801c044:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c048:	e9cd 5300 	strd	r5, r3, [sp]
 801c04c:	463b      	mov	r3, r7
 801c04e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801c050:	2200      	movs	r2, #0
 801c052:	47a8      	blx	r5
 801c054:	b00b      	add	sp, #44	; 0x2c
 801c056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c058:	20007310 	.word	0x20007310

0801c05c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801c05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c060:	4698      	mov	r8, r3
 801c062:	6803      	ldr	r3, [r0, #0]
 801c064:	b08b      	sub	sp, #44	; 0x2c
 801c066:	4617      	mov	r7, r2
 801c068:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801c06a:	460e      	mov	r6, r1
 801c06c:	4b13      	ldr	r3, [pc, #76]	; (801c0bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801c06e:	4604      	mov	r4, r0
 801c070:	f8b3 9000 	ldrh.w	r9, [r3]
 801c074:	f7fc fb42 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c078:	6803      	ldr	r3, [r0, #0]
 801c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c07c:	4798      	blx	r3
 801c07e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801c082:	2200      	movs	r2, #0
 801c084:	4631      	mov	r1, r6
 801c086:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801c08a:	2302      	movs	r3, #2
 801c08c:	4620      	mov	r0, r4
 801c08e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801c092:	2301      	movs	r3, #1
 801c094:	9305      	str	r3, [sp, #20]
 801c096:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801c09a:	9304      	str	r3, [sp, #16]
 801c09c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801c0a0:	9303      	str	r3, [sp, #12]
 801c0a2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801c0a6:	9302      	str	r3, [sp, #8]
 801c0a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801c0ac:	e9cd 8300 	strd	r8, r3, [sp]
 801c0b0:	463b      	mov	r3, r7
 801c0b2:	47a8      	blx	r5
 801c0b4:	b00b      	add	sp, #44	; 0x2c
 801c0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0ba:	bf00      	nop
 801c0bc:	20007310 	.word	0x20007310

0801c0c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801c0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c0c4:	4698      	mov	r8, r3
 801c0c6:	6803      	ldr	r3, [r0, #0]
 801c0c8:	b087      	sub	sp, #28
 801c0ca:	460e      	mov	r6, r1
 801c0cc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801c0ce:	4617      	mov	r7, r2
 801c0d0:	4b0f      	ldr	r3, [pc, #60]	; (801c110 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801c0d2:	4604      	mov	r4, r0
 801c0d4:	f8b3 9000 	ldrh.w	r9, [r3]
 801c0d8:	f7fc fb10 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c0dc:	6803      	ldr	r3, [r0, #0]
 801c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0e0:	4798      	blx	r3
 801c0e2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801c0e6:	463a      	mov	r2, r7
 801c0e8:	4631      	mov	r1, r6
 801c0ea:	f8cd 900c 	str.w	r9, [sp, #12]
 801c0ee:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801c0f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801c0f6:	4620      	mov	r0, r4
 801c0f8:	9302      	str	r3, [sp, #8]
 801c0fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801c0fe:	9301      	str	r3, [sp, #4]
 801c100:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c104:	9300      	str	r3, [sp, #0]
 801c106:	4643      	mov	r3, r8
 801c108:	47a8      	blx	r5
 801c10a:	b007      	add	sp, #28
 801c10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c110:	20007310 	.word	0x20007310

0801c114 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801c114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c118:	4604      	mov	r4, r0
 801c11a:	b08f      	sub	sp, #60	; 0x3c
 801c11c:	4610      	mov	r0, r2
 801c11e:	460d      	mov	r5, r1
 801c120:	4691      	mov	r9, r2
 801c122:	461e      	mov	r6, r3
 801c124:	f002 fd36 	bl	801eb94 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801c128:	2800      	cmp	r0, #0
 801c12a:	f000 809c 	beq.w	801c266 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 801c12e:	6823      	ldr	r3, [r4, #0]
 801c130:	4620      	mov	r0, r4
 801c132:	f8df b194 	ldr.w	fp, [pc, #404]	; 801c2c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801c136:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801c13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c13c:	4798      	blx	r3
 801c13e:	6823      	ldr	r3, [r4, #0]
 801c140:	4620      	mov	r0, r4
 801c142:	f8df a188 	ldr.w	sl, [pc, #392]	; 801c2cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c148:	4798      	blx	r3
 801c14a:	f8bb 3000 	ldrh.w	r3, [fp]
 801c14e:	4f5b      	ldr	r7, [pc, #364]	; (801c2bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801c150:	9301      	str	r3, [sp, #4]
 801c152:	f8ba 3000 	ldrh.w	r3, [sl]
 801c156:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801c15a:	4640      	mov	r0, r8
 801c15c:	9302      	str	r3, [sp, #8]
 801c15e:	883b      	ldrh	r3, [r7, #0]
 801c160:	9303      	str	r3, [sp, #12]
 801c162:	4b57      	ldr	r3, [pc, #348]	; (801c2c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801c164:	881a      	ldrh	r2, [r3, #0]
 801c166:	9305      	str	r3, [sp, #20]
 801c168:	9204      	str	r2, [sp, #16]
 801c16a:	f002 fd1f 	bl	801ebac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c16e:	8038      	strh	r0, [r7, #0]
 801c170:	4640      	mov	r0, r8
 801c172:	f002 fd5f 	bl	801ec34 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c176:	9b05      	ldr	r3, [sp, #20]
 801c178:	8018      	strh	r0, [r3, #0]
 801c17a:	4b52      	ldr	r3, [pc, #328]	; (801c2c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801c17c:	781b      	ldrb	r3, [r3, #0]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d174      	bne.n	801c26c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801c182:	883b      	ldrh	r3, [r7, #0]
 801c184:	f8aa 0000 	strh.w	r0, [sl]
 801c188:	f8ab 3000 	strh.w	r3, [fp]
 801c18c:	4648      	mov	r0, r9
 801c18e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801c192:	f002 fcff 	bl	801eb94 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801c196:	2200      	movs	r2, #0
 801c198:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801c19c:	4611      	mov	r1, r2
 801c19e:	4628      	mov	r0, r5
 801c1a0:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801c1a4:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801c1a8:	f7fc fa68 	bl	801867c <_ZN8touchgfx8Drawable5setXYEss>
 801c1ac:	2301      	movs	r3, #1
 801c1ae:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801c1b2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801c1b6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	dd5c      	ble.n	801c278 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801c1be:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	dd58      	ble.n	801c278 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801c1c6:	462a      	mov	r2, r5
 801c1c8:	ab0a      	add	r3, sp, #40	; 0x28
 801c1ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801c1ce:	6851      	ldr	r1, [r2, #4]
 801c1d0:	c303      	stmia	r3!, {r0, r1}
 801c1d2:	4631      	mov	r1, r6
 801c1d4:	a80a      	add	r0, sp, #40	; 0x28
 801c1d6:	f7ff fc87 	bl	801bae8 <_ZN8touchgfx4RectaNERKS0_>
 801c1da:	4b38      	ldr	r3, [pc, #224]	; (801c2bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801c1dc:	2100      	movs	r1, #0
 801c1de:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c1e2:	4b37      	ldr	r3, [pc, #220]	; (801c2c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801c1e4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c1e8:	aa0a      	add	r2, sp, #40	; 0x28
 801c1ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c1ee:	910c      	str	r1, [sp, #48]	; 0x30
 801c1f0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c1f4:	ab08      	add	r3, sp, #32
 801c1f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c1fa:	e883 0003 	stmia.w	r3, {r0, r1}
 801c1fe:	4618      	mov	r0, r3
 801c200:	a90c      	add	r1, sp, #48	; 0x30
 801c202:	f7ff fc71 	bl	801bae8 <_ZN8touchgfx4RectaNERKS0_>
 801c206:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d13c      	bne.n	801c286 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 801c20c:	2000      	movs	r0, #0
 801c20e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801c212:	2600      	movs	r6, #0
 801c214:	696b      	ldr	r3, [r5, #20]
 801c216:	a908      	add	r1, sp, #32
 801c218:	682a      	ldr	r2, [r5, #0]
 801c21a:	4628      	mov	r0, r5
 801c21c:	9305      	str	r3, [sp, #20]
 801c21e:	616e      	str	r6, [r5, #20]
 801c220:	6892      	ldr	r2, [r2, #8]
 801c222:	4790      	blx	r2
 801c224:	9b05      	ldr	r3, [sp, #20]
 801c226:	4652      	mov	r2, sl
 801c228:	4649      	mov	r1, r9
 801c22a:	616b      	str	r3, [r5, #20]
 801c22c:	4628      	mov	r0, r5
 801c22e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801c232:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801c236:	f7fc fa21 	bl	801867c <_ZN8touchgfx8Drawable5setXYEss>
 801c23a:	9a01      	ldr	r2, [sp, #4]
 801c23c:	4b22      	ldr	r3, [pc, #136]	; (801c2c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801c23e:	4620      	mov	r0, r4
 801c240:	801a      	strh	r2, [r3, #0]
 801c242:	9a02      	ldr	r2, [sp, #8]
 801c244:	4b21      	ldr	r3, [pc, #132]	; (801c2cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801c246:	801a      	strh	r2, [r3, #0]
 801c248:	9a03      	ldr	r2, [sp, #12]
 801c24a:	4b1c      	ldr	r3, [pc, #112]	; (801c2bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801c24c:	801a      	strh	r2, [r3, #0]
 801c24e:	4b1c      	ldr	r3, [pc, #112]	; (801c2c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801c250:	9a04      	ldr	r2, [sp, #16]
 801c252:	801a      	strh	r2, [r3, #0]
 801c254:	6823      	ldr	r3, [r4, #0]
 801c256:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801c25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c25c:	4798      	blx	r3
 801c25e:	6823      	ldr	r3, [r4, #0]
 801c260:	4620      	mov	r0, r4
 801c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c264:	4798      	blx	r3
 801c266:	b00f      	add	sp, #60	; 0x3c
 801c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c26c:	883b      	ldrh	r3, [r7, #0]
 801c26e:	f8ab 0000 	strh.w	r0, [fp]
 801c272:	f8aa 3000 	strh.w	r3, [sl]
 801c276:	e789      	b.n	801c18c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 801c278:	462a      	mov	r2, r5
 801c27a:	ab0a      	add	r3, sp, #40	; 0x28
 801c27c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801c280:	6851      	ldr	r1, [r2, #4]
 801c282:	c303      	stmia	r3!, {r0, r1}
 801c284:	e7a9      	b.n	801c1da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 801c286:	a807      	add	r0, sp, #28
 801c288:	f002 fe36 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c28c:	4606      	mov	r6, r0
 801c28e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801c290:	6803      	ldr	r3, [r0, #0]
 801c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c294:	4798      	blx	r3
 801c296:	4286      	cmp	r6, r0
 801c298:	d1b8      	bne.n	801c20c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 801c29a:	f7fc fa2f 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c29e:	6803      	ldr	r3, [r0, #0]
 801c2a0:	4606      	mov	r6, r0
 801c2a2:	a807      	add	r0, sp, #28
 801c2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c2a6:	9305      	str	r3, [sp, #20]
 801c2a8:	f002 fe26 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c2ac:	9b05      	ldr	r3, [sp, #20]
 801c2ae:	4601      	mov	r1, r0
 801c2b0:	4630      	mov	r0, r6
 801c2b2:	4798      	blx	r3
 801c2b4:	f080 0001 	eor.w	r0, r0, #1
 801c2b8:	b2c0      	uxtb	r0, r0
 801c2ba:	e7a8      	b.n	801c20e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801c2bc:	2000730a 	.word	0x2000730a
 801c2c0:	2000730c 	.word	0x2000730c
 801c2c4:	2000730e 	.word	0x2000730e
 801c2c8:	20007310 	.word	0x20007310
 801c2cc:	20007312 	.word	0x20007312

0801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801c2d0:	4b07      	ldr	r3, [pc, #28]	; (801c2f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801c2d2:	b510      	push	{r4, lr}
 801c2d4:	781b      	ldrb	r3, [r3, #0]
 801c2d6:	4604      	mov	r4, r0
 801c2d8:	b13b      	cbz	r3, 801c2ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801c2da:	6803      	ldr	r3, [r0, #0]
 801c2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2de:	4798      	blx	r3
 801c2e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c2e2:	4283      	cmp	r3, r0
 801c2e4:	d101      	bne.n	801c2ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801c2e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801c2e8:	bd10      	pop	{r4, pc}
 801c2ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801c2ec:	e7fc      	b.n	801c2e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801c2ee:	bf00      	nop
 801c2f0:	20007314 	.word	0x20007314

0801c2f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801c2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2f8:	b08a      	sub	sp, #40	; 0x28
 801c2fa:	4692      	mov	sl, r2
 801c2fc:	461d      	mov	r5, r3
 801c2fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c302:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 801c306:	2400      	movs	r4, #0
 801c308:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 801c30c:	4606      	mov	r6, r0
 801c30e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801c312:	fb09 a505 	mla	r5, r9, r5, sl
 801c316:	9404      	str	r4, [sp, #16]
 801c318:	f8ad 8018 	strh.w	r8, [sp, #24]
 801c31c:	f8ad 701a 	strh.w	r7, [sp, #26]
 801c320:	f88d 4020 	strb.w	r4, [sp, #32]
 801c324:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801c328:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801c32c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c330:	f7ff ffce 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c334:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c338:	f8ad 901e 	strh.w	r9, [sp, #30]
 801c33c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801c340:	9505      	str	r5, [sp, #20]
 801c342:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801c346:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801c34a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801c34e:	f1b8 0f00 	cmp.w	r8, #0
 801c352:	d000      	beq.n	801c356 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 801c354:	b937      	cbnz	r7, 801c364 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 801c356:	4b0d      	ldr	r3, [pc, #52]	; (801c38c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 801c358:	f240 2102 	movw	r1, #514	; 0x202
 801c35c:	4a0c      	ldr	r2, [pc, #48]	; (801c390 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 801c35e:	480d      	ldr	r0, [pc, #52]	; (801c394 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 801c360:	f004 fe8c 	bl	802107c <__assert_func>
 801c364:	6833      	ldr	r3, [r6, #0]
 801c366:	4630      	mov	r0, r6
 801c368:	9c01      	ldr	r4, [sp, #4]
 801c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c36c:	4798      	blx	r3
 801c36e:	4220      	tst	r0, r4
 801c370:	d104      	bne.n	801c37c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 801c372:	4b09      	ldr	r3, [pc, #36]	; (801c398 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 801c374:	f240 2103 	movw	r1, #515	; 0x203
 801c378:	4a05      	ldr	r2, [pc, #20]	; (801c390 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 801c37a:	e7f0      	b.n	801c35e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 801c37c:	6870      	ldr	r0, [r6, #4]
 801c37e:	a901      	add	r1, sp, #4
 801c380:	6803      	ldr	r3, [r0, #0]
 801c382:	685b      	ldr	r3, [r3, #4]
 801c384:	4798      	blx	r3
 801c386:	b00a      	add	sp, #40	; 0x28
 801c388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c38c:	08024c64 	.word	0x08024c64
 801c390:	08024f98 	.word	0x08024f98
 801c394:	08024e0f 	.word	0x08024e0f
 801c398:	08024c9c 	.word	0x08024c9c

0801c39c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3a0:	b08b      	sub	sp, #44	; 0x2c
 801c3a2:	4693      	mov	fp, r2
 801c3a4:	461d      	mov	r5, r3
 801c3a6:	2400      	movs	r4, #0
 801c3a8:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 801c3ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c3b0:	468a      	mov	sl, r1
 801c3b2:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 801c3b6:	fb09 b505 	mla	r5, r9, r5, fp
 801c3ba:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 801c3be:	4606      	mov	r6, r0
 801c3c0:	9404      	str	r4, [sp, #16]
 801c3c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c3c6:	f7ff ff83 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c3ca:	f8ad 8018 	strh.w	r8, [sp, #24]
 801c3ce:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c3d2:	f8ad 701a 	strh.w	r7, [sp, #26]
 801c3d6:	f8ad 401c 	strh.w	r4, [sp, #28]
 801c3da:	9505      	str	r5, [sp, #20]
 801c3dc:	f8ad 901e 	strh.w	r9, [sp, #30]
 801c3e0:	f8cd a010 	str.w	sl, [sp, #16]
 801c3e4:	f8ad 4020 	strh.w	r4, [sp, #32]
 801c3e8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801c3ec:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801c3f0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801c3f4:	f1b8 0f00 	cmp.w	r8, #0
 801c3f8:	d000      	beq.n	801c3fc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 801c3fa:	b937      	cbnz	r7, 801c40a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 801c3fc:	4b0d      	ldr	r3, [pc, #52]	; (801c434 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 801c3fe:	f240 2119 	movw	r1, #537	; 0x219
 801c402:	4a0d      	ldr	r2, [pc, #52]	; (801c438 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 801c404:	480d      	ldr	r0, [pc, #52]	; (801c43c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 801c406:	f004 fe39 	bl	802107c <__assert_func>
 801c40a:	6833      	ldr	r3, [r6, #0]
 801c40c:	4630      	mov	r0, r6
 801c40e:	9c01      	ldr	r4, [sp, #4]
 801c410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c412:	4798      	blx	r3
 801c414:	4220      	tst	r0, r4
 801c416:	d104      	bne.n	801c422 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 801c418:	4b09      	ldr	r3, [pc, #36]	; (801c440 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 801c41a:	f240 211a 	movw	r1, #538	; 0x21a
 801c41e:	4a06      	ldr	r2, [pc, #24]	; (801c438 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 801c420:	e7f0      	b.n	801c404 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 801c422:	6870      	ldr	r0, [r6, #4]
 801c424:	a901      	add	r1, sp, #4
 801c426:	6803      	ldr	r3, [r0, #0]
 801c428:	685b      	ldr	r3, [r3, #4]
 801c42a:	4798      	blx	r3
 801c42c:	b00b      	add	sp, #44	; 0x2c
 801c42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c432:	bf00      	nop
 801c434:	08024ce1 	.word	0x08024ce1
 801c438:	0802500e 	.word	0x0802500e
 801c43c:	08024e0f 	.word	0x08024e0f
 801c440:	08024d19 	.word	0x08024d19

0801c444 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801c444:	b508      	push	{r3, lr}
 801c446:	290d      	cmp	r1, #13
 801c448:	d817      	bhi.n	801c47a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801c44a:	e8df f001 	tbb	[pc, r1]
 801c44e:	090b      	.short	0x090b
 801c450:	0d0d0d07 	.word	0x0d0d0d07
 801c454:	1414140d 	.word	0x1414140d
 801c458:	0d0d1414 	.word	0x0d0d1414
 801c45c:	2020      	movs	r0, #32
 801c45e:	bd08      	pop	{r3, pc}
 801c460:	2018      	movs	r0, #24
 801c462:	e7fc      	b.n	801c45e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c464:	2010      	movs	r0, #16
 801c466:	e7fa      	b.n	801c45e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c468:	4b05      	ldr	r3, [pc, #20]	; (801c480 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801c46a:	f240 2183 	movw	r1, #643	; 0x283
 801c46e:	4a05      	ldr	r2, [pc, #20]	; (801c484 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801c470:	4805      	ldr	r0, [pc, #20]	; (801c488 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801c472:	f004 fe03 	bl	802107c <__assert_func>
 801c476:	2008      	movs	r0, #8
 801c478:	e7f1      	b.n	801c45e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c47a:	2000      	movs	r0, #0
 801c47c:	e7ef      	b.n	801c45e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c47e:	bf00      	nop
 801c480:	08024e8b 	.word	0x08024e8b
 801c484:	08025339 	.word	0x08025339
 801c488:	08024e0f 	.word	0x08024e0f

0801c48c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801c48c:	b570      	push	{r4, r5, r6, lr}
 801c48e:	460d      	mov	r5, r1
 801c490:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801c494:	4616      	mov	r6, r2
 801c496:	461c      	mov	r4, r3
 801c498:	f7ff ffd4 	bl	801c444 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801c49c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801c4a0:	10c0      	asrs	r0, r0, #3
 801c4a2:	fb06 5101 	mla	r1, r6, r1, r5
 801c4a6:	fb00 4001 	mla	r0, r0, r1, r4
 801c4aa:	bd70      	pop	{r4, r5, r6, pc}

0801c4ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801c4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4b0:	b08c      	sub	sp, #48	; 0x30
 801c4b2:	f04f 0c00 	mov.w	ip, #0
 801c4b6:	4604      	mov	r4, r0
 801c4b8:	469a      	mov	sl, r3
 801c4ba:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801c4be:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 801c4c2:	2d0b      	cmp	r5, #11
 801c4c4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 801c4c8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 801c4cc:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 801c4d0:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 801c4d4:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801c4d8:	f8cd c018 	str.w	ip, [sp, #24]
 801c4dc:	d130      	bne.n	801c540 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 801c4de:	2080      	movs	r0, #128	; 0x80
 801c4e0:	9205      	str	r2, [sp, #20]
 801c4e2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801c4e6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801c4ea:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801c4ee:	f8ad 7020 	strh.w	r7, [sp, #32]
 801c4f2:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 801c4f6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801c4fa:	4620      	mov	r0, r4
 801c4fc:	f7ff fee8 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c500:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c504:	4603      	mov	r3, r0
 801c506:	4651      	mov	r1, sl
 801c508:	4620      	mov	r0, r4
 801c50a:	e9cd 9800 	strd	r9, r8, [sp]
 801c50e:	f7ff ffbd 	bl	801c48c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801c512:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 801c516:	9007      	str	r0, [sp, #28]
 801c518:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801c51c:	2300      	movs	r3, #0
 801c51e:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 801c522:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801c526:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 801c52a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801c52e:	b107      	cbz	r7, 801c532 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 801c530:	b9d6      	cbnz	r6, 801c568 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 801c532:	4b17      	ldr	r3, [pc, #92]	; (801c590 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 801c534:	f240 11c9 	movw	r1, #457	; 0x1c9
 801c538:	4a16      	ldr	r2, [pc, #88]	; (801c594 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 801c53a:	4817      	ldr	r0, [pc, #92]	; (801c598 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 801c53c:	f004 fd9e 	bl	802107c <__assert_func>
 801c540:	2d02      	cmp	r5, #2
 801c542:	d108      	bne.n	801c556 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801c544:	2bff      	cmp	r3, #255	; 0xff
 801c546:	d104      	bne.n	801c552 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 801c548:	2800      	cmp	r0, #0
 801c54a:	bf14      	ite	ne
 801c54c:	2040      	movne	r0, #64	; 0x40
 801c54e:	2020      	moveq	r0, #32
 801c550:	e7c6      	b.n	801c4e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801c552:	2040      	movs	r0, #64	; 0x40
 801c554:	e7c4      	b.n	801c4e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801c556:	2bff      	cmp	r3, #255	; 0xff
 801c558:	d104      	bne.n	801c564 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 801c55a:	2800      	cmp	r0, #0
 801c55c:	bf14      	ite	ne
 801c55e:	2004      	movne	r0, #4
 801c560:	2001      	moveq	r0, #1
 801c562:	e7bd      	b.n	801c4e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801c564:	2004      	movs	r0, #4
 801c566:	e7bb      	b.n	801c4e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801c568:	6823      	ldr	r3, [r4, #0]
 801c56a:	4620      	mov	r0, r4
 801c56c:	9d03      	ldr	r5, [sp, #12]
 801c56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c570:	4798      	blx	r3
 801c572:	4228      	tst	r0, r5
 801c574:	d104      	bne.n	801c580 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 801c576:	4b09      	ldr	r3, [pc, #36]	; (801c59c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 801c578:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801c57c:	4a05      	ldr	r2, [pc, #20]	; (801c594 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 801c57e:	e7dc      	b.n	801c53a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 801c580:	6860      	ldr	r0, [r4, #4]
 801c582:	a903      	add	r1, sp, #12
 801c584:	6803      	ldr	r3, [r0, #0]
 801c586:	685b      	ldr	r3, [r3, #4]
 801c588:	4798      	blx	r3
 801c58a:	b00c      	add	sp, #48	; 0x30
 801c58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c590:	08024c64 	.word	0x08024c64
 801c594:	080251c7 	.word	0x080251c7
 801c598:	08024e0f 	.word	0x08024e0f
 801c59c:	08024c9c 	.word	0x08024c9c

0801c5a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5a4:	b08d      	sub	sp, #52	; 0x34
 801c5a6:	469b      	mov	fp, r3
 801c5a8:	2500      	movs	r5, #0
 801c5aa:	4604      	mov	r4, r0
 801c5ac:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 801c5b0:	4692      	mov	sl, r2
 801c5b2:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801c5b6:	4689      	mov	r9, r1
 801c5b8:	2fff      	cmp	r7, #255	; 0xff
 801c5ba:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 801c5be:	9506      	str	r5, [sp, #24]
 801c5c0:	bf14      	ite	ne
 801c5c2:	2308      	movne	r3, #8
 801c5c4:	2302      	moveq	r3, #2
 801c5c6:	e9cd 3503 	strd	r3, r5, [sp, #12]
 801c5ca:	f7ff fe81 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c5ce:	465a      	mov	r2, fp
 801c5d0:	4603      	mov	r3, r0
 801c5d2:	4651      	mov	r1, sl
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	e9cd 8600 	strd	r8, r6, [sp]
 801c5da:	f7ff ff57 	bl	801c48c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801c5de:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801c5e2:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 801c5e6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c5ea:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801c5ee:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801c5f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c5f6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801c5fa:	9d03      	ldr	r5, [sp, #12]
 801c5fc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801c600:	6823      	ldr	r3, [r4, #0]
 801c602:	9007      	str	r0, [sp, #28]
 801c604:	4620      	mov	r0, r4
 801c606:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 801c60a:	f8cd 9018 	str.w	r9, [sp, #24]
 801c60e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 801c612:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 801c616:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801c61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c61c:	4798      	blx	r3
 801c61e:	4228      	tst	r0, r5
 801c620:	d106      	bne.n	801c630 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 801c622:	4b07      	ldr	r3, [pc, #28]	; (801c640 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 801c624:	f44f 710c 	mov.w	r1, #560	; 0x230
 801c628:	4a06      	ldr	r2, [pc, #24]	; (801c644 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 801c62a:	4807      	ldr	r0, [pc, #28]	; (801c648 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 801c62c:	f004 fd26 	bl	802107c <__assert_func>
 801c630:	6860      	ldr	r0, [r4, #4]
 801c632:	a903      	add	r1, sp, #12
 801c634:	6803      	ldr	r3, [r0, #0]
 801c636:	685b      	ldr	r3, [r3, #4]
 801c638:	4798      	blx	r3
 801c63a:	b00d      	add	sp, #52	; 0x34
 801c63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c640:	08024c9c 	.word	0x08024c9c
 801c644:	0802529e 	.word	0x0802529e
 801c648:	08024e0f 	.word	0x08024e0f

0801c64c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801c64c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801c650:	461f      	mov	r7, r3
 801c652:	4b0b      	ldr	r3, [pc, #44]	; (801c680 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801c654:	460d      	mov	r5, r1
 801c656:	4616      	mov	r6, r2
 801c658:	f8b3 8000 	ldrh.w	r8, [r3]
 801c65c:	4604      	mov	r4, r0
 801c65e:	f7fc f84d 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c662:	6803      	ldr	r3, [r0, #0]
 801c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c666:	4798      	blx	r3
 801c668:	463b      	mov	r3, r7
 801c66a:	4632      	mov	r2, r6
 801c66c:	4629      	mov	r1, r5
 801c66e:	e9cd 8000 	strd	r8, r0, [sp]
 801c672:	4620      	mov	r0, r4
 801c674:	f7ff ff0a 	bl	801c48c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801c678:	b002      	add	sp, #8
 801c67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c67e:	bf00      	nop
 801c680:	20007310 	.word	0x20007310

0801c684 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801c684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c688:	b08b      	sub	sp, #44	; 0x2c
 801c68a:	4699      	mov	r9, r3
 801c68c:	4690      	mov	r8, r2
 801c68e:	4604      	mov	r4, r0
 801c690:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801c694:	2500      	movs	r5, #0
 801c696:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 801c69a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801c69e:	9504      	str	r5, [sp, #16]
 801c6a0:	f8ad 7018 	strh.w	r7, [sp, #24]
 801c6a4:	f8ad 601a 	strh.w	r6, [sp, #26]
 801c6a8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801c6ac:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801c6b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c6b4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801c6b8:	f88d 3020 	strb.w	r3, [sp, #32]
 801c6bc:	f7ff fe08 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c6c0:	464a      	mov	r2, r9
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	4641      	mov	r1, r8
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	f7ff ffc0 	bl	801c64c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c6cc:	4b19      	ldr	r3, [pc, #100]	; (801c734 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 801c6ce:	9005      	str	r0, [sp, #20]
 801c6d0:	881b      	ldrh	r3, [r3, #0]
 801c6d2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c6d6:	f7fc f811 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c6da:	6803      	ldr	r3, [r0, #0]
 801c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6de:	4798      	blx	r3
 801c6e0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801c6e4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801c6e8:	b107      	cbz	r7, 801c6ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 801c6ea:	b936      	cbnz	r6, 801c6fa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 801c6ec:	4b12      	ldr	r3, [pc, #72]	; (801c738 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 801c6ee:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801c6f2:	4a12      	ldr	r2, [pc, #72]	; (801c73c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801c6f4:	4812      	ldr	r0, [pc, #72]	; (801c740 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801c6f6:	f004 fcc1 	bl	802107c <__assert_func>
 801c6fa:	6823      	ldr	r3, [r4, #0]
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	9e01      	ldr	r6, [sp, #4]
 801c700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c702:	4798      	blx	r3
 801c704:	4230      	tst	r0, r6
 801c706:	d104      	bne.n	801c712 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 801c708:	4b0e      	ldr	r3, [pc, #56]	; (801c744 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 801c70a:	f240 11e7 	movw	r1, #487	; 0x1e7
 801c70e:	4a0b      	ldr	r2, [pc, #44]	; (801c73c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801c710:	e7f0      	b.n	801c6f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 801c712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c714:	a901      	add	r1, sp, #4
 801c716:	6860      	ldr	r0, [r4, #4]
 801c718:	9304      	str	r3, [sp, #16]
 801c71a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 801c71e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801c722:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801c726:	6803      	ldr	r3, [r0, #0]
 801c728:	685b      	ldr	r3, [r3, #4]
 801c72a:	4798      	blx	r3
 801c72c:	b00b      	add	sp, #44	; 0x2c
 801c72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c732:	bf00      	nop
 801c734:	20007310 	.word	0x20007310
 801c738:	08024c64 	.word	0x08024c64
 801c73c:	08025073 	.word	0x08025073
 801c740:	08024e0f 	.word	0x08024e0f
 801c744:	08024c9c 	.word	0x08024c9c

0801c748 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801c748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c74a:	b08d      	sub	sp, #52	; 0x34
 801c74c:	4604      	mov	r4, r0
 801c74e:	466b      	mov	r3, sp
 801c750:	e883 0006 	stmia.w	r3, {r1, r2}
 801c754:	4b21      	ldr	r3, [pc, #132]	; (801c7dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801c756:	781b      	ldrb	r3, [r3, #0]
 801c758:	b933      	cbnz	r3, 801c768 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801c75a:	4b21      	ldr	r3, [pc, #132]	; (801c7e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801c75c:	f240 2141 	movw	r1, #577	; 0x241
 801c760:	4a20      	ldr	r2, [pc, #128]	; (801c7e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801c762:	4821      	ldr	r0, [pc, #132]	; (801c7e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 801c764:	f004 fc8a 	bl	802107c <__assert_func>
 801c768:	2300      	movs	r3, #0
 801c76a:	2501      	movs	r5, #1
 801c76c:	f8bd 6000 	ldrh.w	r6, [sp]
 801c770:	9306      	str	r3, [sp, #24]
 801c772:	6803      	ldr	r3, [r0, #0]
 801c774:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801c778:	9503      	str	r5, [sp, #12]
 801c77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c77c:	4798      	blx	r3
 801c77e:	463a      	mov	r2, r7
 801c780:	4631      	mov	r1, r6
 801c782:	4603      	mov	r3, r0
 801c784:	4620      	mov	r0, r4
 801c786:	f7ff ff61 	bl	801c64c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c78a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801c78c:	9004      	str	r0, [sp, #16]
 801c78e:	9307      	str	r3, [sp, #28]
 801c790:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c794:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c798:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c79c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c7a0:	4b12      	ldr	r3, [pc, #72]	; (801c7ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 801c7a2:	881b      	ldrh	r3, [r3, #0]
 801c7a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c7a8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c7ac:	f7fb ffa6 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c7b0:	6803      	ldr	r3, [r0, #0]
 801c7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7b4:	4798      	blx	r3
 801c7b6:	23ff      	movs	r3, #255	; 0xff
 801c7b8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801c7bc:	a903      	add	r1, sp, #12
 801c7be:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801c7c2:	6860      	ldr	r0, [r4, #4]
 801c7c4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801c7c8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801c7cc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801c7d0:	6803      	ldr	r3, [r0, #0]
 801c7d2:	685b      	ldr	r3, [r3, #4]
 801c7d4:	4798      	blx	r3
 801c7d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801c7d8:	b00d      	add	sp, #52	; 0x34
 801c7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7dc:	20007315 	.word	0x20007315
 801c7e0:	08024d63 	.word	0x08024d63
 801c7e4:	0802511d 	.word	0x0802511d
 801c7e8:	08024e0f 	.word	0x08024e0f
 801c7ec:	20007310 	.word	0x20007310

0801c7f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7f4:	b08c      	sub	sp, #48	; 0x30
 801c7f6:	461e      	mov	r6, r3
 801c7f8:	2300      	movs	r3, #0
 801c7fa:	4604      	mov	r4, r0
 801c7fc:	466d      	mov	r5, sp
 801c7fe:	9306      	str	r3, [sp, #24]
 801c800:	6803      	ldr	r3, [r0, #0]
 801c802:	e885 0006 	stmia.w	r5, {r1, r2}
 801c806:	2501      	movs	r5, #1
 801c808:	f8bd 7000 	ldrh.w	r7, [sp]
 801c80c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801c810:	9503      	str	r5, [sp, #12]
 801c812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c814:	4798      	blx	r3
 801c816:	4642      	mov	r2, r8
 801c818:	4639      	mov	r1, r7
 801c81a:	4603      	mov	r3, r0
 801c81c:	4620      	mov	r0, r4
 801c81e:	f7ff ff15 	bl	801c64c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c822:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c826:	9004      	str	r0, [sp, #16]
 801c828:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c82c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c830:	9607      	str	r6, [sp, #28]
 801c832:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c836:	4b10      	ldr	r3, [pc, #64]	; (801c878 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801c838:	881b      	ldrh	r3, [r3, #0]
 801c83a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c83e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c840:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c844:	f7fb ff5a 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801c848:	6803      	ldr	r3, [r0, #0]
 801c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c84c:	4798      	blx	r3
 801c84e:	23ff      	movs	r3, #255	; 0xff
 801c850:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801c854:	a903      	add	r1, sp, #12
 801c856:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801c85a:	6860      	ldr	r0, [r4, #4]
 801c85c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801c860:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801c864:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801c868:	6803      	ldr	r3, [r0, #0]
 801c86a:	685b      	ldr	r3, [r3, #4]
 801c86c:	4798      	blx	r3
 801c86e:	4630      	mov	r0, r6
 801c870:	b00c      	add	sp, #48	; 0x30
 801c872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c876:	bf00      	nop
 801c878:	20007310 	.word	0x20007310

0801c87c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801c87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c87e:	b085      	sub	sp, #20
 801c880:	4605      	mov	r5, r0
 801c882:	ac02      	add	r4, sp, #8
 801c884:	e884 0006 	stmia.w	r4, {r1, r2}
 801c888:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801c88c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801c890:	f7ff fd1e 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c894:	4631      	mov	r1, r6
 801c896:	4603      	mov	r3, r0
 801c898:	463a      	mov	r2, r7
 801c89a:	4628      	mov	r0, r5
 801c89c:	f7ff fed6 	bl	801c64c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c8a0:	4a05      	ldr	r2, [pc, #20]	; (801c8b8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801c8a2:	682b      	ldr	r3, [r5, #0]
 801c8a4:	8812      	ldrh	r2, [r2, #0]
 801c8a6:	9200      	str	r2, [sp, #0]
 801c8a8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	4628      	mov	r0, r5
 801c8ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c8b2:	47b0      	blx	r6
 801c8b4:	b005      	add	sp, #20
 801c8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8b8:	20007310 	.word	0x20007310

0801c8bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801c8bc:	b570      	push	{r4, r5, r6, lr}
 801c8be:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801c8c2:	4604      	mov	r4, r0
 801c8c4:	b19b      	cbz	r3, 801c8ee <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801c8c6:	2002      	movs	r0, #2
 801c8c8:	f7fd f92a 	bl	8019b20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801c8d4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801c8d8:	6823      	ldr	r3, [r4, #0]
 801c8da:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801c8de:	f7ff fcf7 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c8e2:	4601      	mov	r1, r0
 801c8e4:	4620      	mov	r0, r4
 801c8e6:	462b      	mov	r3, r5
 801c8e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8ec:	4718      	bx	r3
 801c8ee:	bd70      	pop	{r4, r5, r6, pc}

0801c8f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801c8f0:	b538      	push	{r3, r4, r5, lr}
 801c8f2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801c8f6:	4604      	mov	r4, r0
 801c8f8:	460d      	mov	r5, r1
 801c8fa:	428b      	cmp	r3, r1
 801c8fc:	d006      	beq.n	801c90c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801c8fe:	6803      	ldr	r3, [r0, #0]
 801c900:	b929      	cbnz	r1, 801c90e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801c902:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801c906:	4798      	blx	r3
 801c908:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801c90c:	bd38      	pop	{r3, r4, r5, pc}
 801c90e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801c912:	e7f8      	b.n	801c906 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801c914 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801c914:	4b0d      	ldr	r3, [pc, #52]	; (801c94c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801c916:	b510      	push	{r4, lr}
 801c918:	781b      	ldrb	r3, [r3, #0]
 801c91a:	4604      	mov	r4, r0
 801c91c:	b95b      	cbnz	r3, 801c936 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801c91e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801c922:	2b02      	cmp	r3, #2
 801c924:	d007      	beq.n	801c936 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801c926:	6840      	ldr	r0, [r0, #4]
 801c928:	f000 f938 	bl	801cb9c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801c92c:	b118      	cbz	r0, 801c936 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801c92e:	6862      	ldr	r2, [r4, #4]
 801c930:	7a53      	ldrb	r3, [r2, #9]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d0fc      	beq.n	801c930 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801c936:	f7fd fb57 	bl	8019fe8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801c93a:	4620      	mov	r0, r4
 801c93c:	2100      	movs	r1, #0
 801c93e:	f7ff ffd7 	bl	801c8f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801c942:	4620      	mov	r0, r4
 801c944:	f7ff fcc4 	bl	801c2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c948:	bd10      	pop	{r4, pc}
 801c94a:	bf00      	nop
 801c94c:	20007314 	.word	0x20007314

0801c950 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801c950:	4770      	bx	lr

0801c952 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801c952:	2000      	movs	r0, #0
 801c954:	4770      	bx	lr

0801c956 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801c956:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801c95a:	1a13      	subs	r3, r2, r0
 801c95c:	4258      	negs	r0, r3
 801c95e:	4158      	adcs	r0, r3
 801c960:	4770      	bx	lr

0801c962 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801c962:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801c966:	1a9b      	subs	r3, r3, r2
 801c968:	2b00      	cmp	r3, #0
 801c96a:	bfdc      	itt	le
 801c96c:	6882      	ldrle	r2, [r0, #8]
 801c96e:	189b      	addle	r3, r3, r2
 801c970:	2b01      	cmp	r3, #1
 801c972:	bfcc      	ite	gt
 801c974:	2000      	movgt	r0, #0
 801c976:	2001      	movle	r0, #1
 801c978:	4770      	bx	lr

0801c97a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801c97a:	6902      	ldr	r2, [r0, #16]
 801c97c:	6843      	ldr	r3, [r0, #4]
 801c97e:	2024      	movs	r0, #36	; 0x24
 801c980:	fb00 3002 	mla	r0, r0, r2, r3
 801c984:	4770      	bx	lr

0801c986 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801c986:	6803      	ldr	r3, [r0, #0]
 801c988:	691b      	ldr	r3, [r3, #16]
 801c98a:	4718      	bx	r3

0801c98c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801c98c:	4770      	bx	lr

0801c98e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801c98e:	4770      	bx	lr

0801c990 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801c990:	2301      	movs	r3, #1
 801c992:	b570      	push	{r4, r5, r6, lr}
 801c994:	7203      	strb	r3, [r0, #8]
 801c996:	4604      	mov	r4, r0
 801c998:	6840      	ldr	r0, [r0, #4]
 801c99a:	6803      	ldr	r3, [r0, #0]
 801c99c:	699b      	ldr	r3, [r3, #24]
 801c99e:	4798      	blx	r3
 801c9a0:	6803      	ldr	r3, [r0, #0]
 801c9a2:	4605      	mov	r5, r0
 801c9a4:	2b40      	cmp	r3, #64	; 0x40
 801c9a6:	d039      	beq.n	801ca1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801c9a8:	d815      	bhi.n	801c9d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801c9aa:	2b04      	cmp	r3, #4
 801c9ac:	d022      	beq.n	801c9f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801c9ae:	d808      	bhi.n	801c9c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801c9b0:	2b01      	cmp	r3, #1
 801c9b2:	d033      	beq.n	801ca1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801c9b4:	2b02      	cmp	r3, #2
 801c9b6:	d108      	bne.n	801c9ca <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 801c9b8:	6823      	ldr	r3, [r4, #0]
 801c9ba:	4620      	mov	r0, r4
 801c9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9be:	4798      	blx	r3
 801c9c0:	e025      	b.n	801ca0e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801c9c2:	2b08      	cmp	r3, #8
 801c9c4:	d01e      	beq.n	801ca04 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801c9c6:	2b20      	cmp	r3, #32
 801c9c8:	d028      	beq.n	801ca1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801c9ca:	4b17      	ldr	r3, [pc, #92]	; (801ca28 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801c9cc:	2188      	movs	r1, #136	; 0x88
 801c9ce:	4a17      	ldr	r2, [pc, #92]	; (801ca2c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 801c9d0:	4817      	ldr	r0, [pc, #92]	; (801ca30 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801c9d2:	f004 fb53 	bl	802107c <__assert_func>
 801c9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c9da:	d01f      	beq.n	801ca1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801c9dc:	d804      	bhi.n	801c9e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801c9de:	2b80      	cmp	r3, #128	; 0x80
 801c9e0:	d01c      	beq.n	801ca1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801c9e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c9e6:	e7ef      	b.n	801c9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 801c9e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9ec:	d016      	beq.n	801ca1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801c9ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c9f2:	e7e0      	b.n	801c9b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801c9f4:	6823      	ldr	r3, [r4, #0]
 801c9f6:	7f01      	ldrb	r1, [r0, #28]
 801c9f8:	4620      	mov	r0, r4
 801c9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9fc:	4798      	blx	r3
 801c9fe:	6823      	ldr	r3, [r4, #0]
 801ca00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca02:	e006      	b.n	801ca12 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801ca04:	6823      	ldr	r3, [r4, #0]
 801ca06:	7f01      	ldrb	r1, [r0, #28]
 801ca08:	4620      	mov	r0, r4
 801ca0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca0c:	4798      	blx	r3
 801ca0e:	6823      	ldr	r3, [r4, #0]
 801ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca12:	4629      	mov	r1, r5
 801ca14:	4620      	mov	r0, r4
 801ca16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca1a:	4718      	bx	r3
 801ca1c:	6823      	ldr	r3, [r4, #0]
 801ca1e:	4620      	mov	r0, r4
 801ca20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ca22:	4798      	blx	r3
 801ca24:	e7eb      	b.n	801c9fe <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801ca26:	bf00      	nop
 801ca28:	08025382 	.word	0x08025382
 801ca2c:	08025494 	.word	0x08025494
 801ca30:	080253a7 	.word	0x080253a7

0801ca34 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801ca34:	b570      	push	{r4, r5, r6, lr}
 801ca36:	4604      	mov	r4, r0
 801ca38:	460e      	mov	r6, r1
 801ca3a:	6860      	ldr	r0, [r4, #4]
 801ca3c:	6803      	ldr	r3, [r0, #0]
 801ca3e:	685b      	ldr	r3, [r3, #4]
 801ca40:	4798      	blx	r3
 801ca42:	2800      	cmp	r0, #0
 801ca44:	d1f9      	bne.n	801ca3a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801ca46:	4d0d      	ldr	r5, [pc, #52]	; (801ca7c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801ca48:	6828      	ldr	r0, [r5, #0]
 801ca4a:	6803      	ldr	r3, [r0, #0]
 801ca4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ca4e:	4798      	blx	r3
 801ca50:	f7fd fae4 	bl	801a01c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801ca54:	6828      	ldr	r0, [r5, #0]
 801ca56:	2101      	movs	r1, #1
 801ca58:	f7ff ff4a 	bl	801c8f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801ca5c:	6860      	ldr	r0, [r4, #4]
 801ca5e:	4631      	mov	r1, r6
 801ca60:	6803      	ldr	r3, [r0, #0]
 801ca62:	689b      	ldr	r3, [r3, #8]
 801ca64:	4798      	blx	r3
 801ca66:	6823      	ldr	r3, [r4, #0]
 801ca68:	4620      	mov	r0, r4
 801ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca6c:	4798      	blx	r3
 801ca6e:	6828      	ldr	r0, [r5, #0]
 801ca70:	6803      	ldr	r3, [r0, #0]
 801ca72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ca78:	4718      	bx	r3
 801ca7a:	bf00      	nop
 801ca7c:	20007318 	.word	0x20007318

0801ca80 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801ca80:	b508      	push	{r3, lr}
 801ca82:	f7fd fab1 	bl	8019fe8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801ca86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ca8a:	f7fd babb 	b.w	801a004 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801ca8e <_ZN8touchgfx13DMA_Interface5startEv>:
 801ca8e:	b510      	push	{r4, lr}
 801ca90:	4604      	mov	r4, r0
 801ca92:	6840      	ldr	r0, [r0, #4]
 801ca94:	6803      	ldr	r3, [r0, #0]
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	4798      	blx	r3
 801ca9a:	b948      	cbnz	r0, 801cab0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801ca9c:	7a63      	ldrb	r3, [r4, #9]
 801ca9e:	b13b      	cbz	r3, 801cab0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801caa0:	7a23      	ldrb	r3, [r4, #8]
 801caa2:	b92b      	cbnz	r3, 801cab0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801caa4:	6823      	ldr	r3, [r4, #0]
 801caa6:	4620      	mov	r0, r4
 801caa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801caae:	4718      	bx	r3
 801cab0:	bd10      	pop	{r4, pc}
	...

0801cab4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801cab4:	b510      	push	{r4, lr}
 801cab6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801caba:	1ad2      	subs	r2, r2, r3
 801cabc:	2a00      	cmp	r2, #0
 801cabe:	bfdc      	itt	le
 801cac0:	6884      	ldrle	r4, [r0, #8]
 801cac2:	1912      	addle	r2, r2, r4
 801cac4:	2a01      	cmp	r2, #1
 801cac6:	dd17      	ble.n	801caf8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801cac8:	6842      	ldr	r2, [r0, #4]
 801caca:	2424      	movs	r4, #36	; 0x24
 801cacc:	fb04 2303 	mla	r3, r4, r3, r2
 801cad0:	f101 0220 	add.w	r2, r1, #32
 801cad4:	f851 4b04 	ldr.w	r4, [r1], #4
 801cad8:	4291      	cmp	r1, r2
 801cada:	f843 4b04 	str.w	r4, [r3], #4
 801cade:	d1f9      	bne.n	801cad4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801cae0:	780a      	ldrb	r2, [r1, #0]
 801cae2:	701a      	strb	r2, [r3, #0]
 801cae4:	68c3      	ldr	r3, [r0, #12]
 801cae6:	6882      	ldr	r2, [r0, #8]
 801cae8:	f3bf 8f5b 	dmb	ish
 801caec:	3301      	adds	r3, #1
 801caee:	429a      	cmp	r2, r3
 801caf0:	bfd8      	it	le
 801caf2:	1a9b      	suble	r3, r3, r2
 801caf4:	60c3      	str	r3, [r0, #12]
 801caf6:	bd10      	pop	{r4, pc}
 801caf8:	4b02      	ldr	r3, [pc, #8]	; (801cb04 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801cafa:	2136      	movs	r1, #54	; 0x36
 801cafc:	4a02      	ldr	r2, [pc, #8]	; (801cb08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801cafe:	4803      	ldr	r0, [pc, #12]	; (801cb0c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801cb00:	f004 fabc 	bl	802107c <__assert_func>
 801cb04:	080253cd 	.word	0x080253cd
 801cb08:	080254c4 	.word	0x080254c4
 801cb0c:	080253a7 	.word	0x080253a7

0801cb10 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801cb10:	b510      	push	{r4, lr}
 801cb12:	6803      	ldr	r3, [r0, #0]
 801cb14:	4604      	mov	r4, r0
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	4798      	blx	r3
 801cb1a:	b128      	cbz	r0, 801cb28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801cb1c:	4b07      	ldr	r3, [pc, #28]	; (801cb3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801cb1e:	213c      	movs	r1, #60	; 0x3c
 801cb20:	4a07      	ldr	r2, [pc, #28]	; (801cb40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801cb22:	4808      	ldr	r0, [pc, #32]	; (801cb44 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801cb24:	f004 faaa 	bl	802107c <__assert_func>
 801cb28:	6923      	ldr	r3, [r4, #16]
 801cb2a:	68a2      	ldr	r2, [r4, #8]
 801cb2c:	f3bf 8f5b 	dmb	ish
 801cb30:	3301      	adds	r3, #1
 801cb32:	429a      	cmp	r2, r3
 801cb34:	bfd8      	it	le
 801cb36:	1a9b      	suble	r3, r3, r2
 801cb38:	6123      	str	r3, [r4, #16]
 801cb3a:	bd10      	pop	{r4, pc}
 801cb3c:	080253f0 	.word	0x080253f0
 801cb40:	08025512 	.word	0x08025512
 801cb44:	080253a7 	.word	0x080253a7

0801cb48 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801cb48:	b570      	push	{r4, r5, r6, lr}
 801cb4a:	4604      	mov	r4, r0
 801cb4c:	6840      	ldr	r0, [r0, #4]
 801cb4e:	6803      	ldr	r3, [r0, #0]
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	4798      	blx	r3
 801cb54:	4605      	mov	r5, r0
 801cb56:	b930      	cbnz	r0, 801cb66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801cb58:	7a23      	ldrb	r3, [r4, #8]
 801cb5a:	b123      	cbz	r3, 801cb66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801cb5c:	6860      	ldr	r0, [r4, #4]
 801cb5e:	6803      	ldr	r3, [r0, #0]
 801cb60:	695b      	ldr	r3, [r3, #20]
 801cb62:	4798      	blx	r3
 801cb64:	7225      	strb	r5, [r4, #8]
 801cb66:	6860      	ldr	r0, [r4, #4]
 801cb68:	6803      	ldr	r3, [r0, #0]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	4798      	blx	r3
 801cb6e:	b928      	cbnz	r0, 801cb7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801cb70:	6823      	ldr	r3, [r4, #0]
 801cb72:	4620      	mov	r0, r4
 801cb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb7a:	4718      	bx	r3
 801cb7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb80:	f7fd ba58 	b.w	801a034 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801cb84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801cb84:	b510      	push	{r4, lr}
 801cb86:	6082      	str	r2, [r0, #8]
 801cb88:	2200      	movs	r2, #0
 801cb8a:	4c03      	ldr	r4, [pc, #12]	; (801cb98 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801cb8c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801cb90:	e9c0 4100 	strd	r4, r1, [r0]
 801cb94:	bd10      	pop	{r4, pc}
 801cb96:	bf00      	nop
 801cb98:	08025478 	.word	0x08025478

0801cb9c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801cb9c:	6840      	ldr	r0, [r0, #4]
 801cb9e:	6803      	ldr	r3, [r0, #0]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	4718      	bx	r3

0801cba4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801cba4:	b510      	push	{r4, lr}
 801cba6:	6803      	ldr	r3, [r0, #0]
 801cba8:	460c      	mov	r4, r1
 801cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbac:	4798      	blx	r3
 801cbae:	1b03      	subs	r3, r0, r4
 801cbb0:	4258      	negs	r0, r3
 801cbb2:	4158      	adcs	r0, r3
 801cbb4:	bd10      	pop	{r4, pc}
	...

0801cbb8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801cbb8:	4b01      	ldr	r3, [pc, #4]	; (801cbc0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801cbba:	6019      	str	r1, [r3, #0]
 801cbbc:	4770      	bx	lr
 801cbbe:	bf00      	nop
 801cbc0:	20007320 	.word	0x20007320

0801cbc4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801cbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbc8:	4696      	mov	lr, r2
 801cbca:	b097      	sub	sp, #92	; 0x5c
 801cbcc:	4605      	mov	r5, r0
 801cbce:	4614      	mov	r4, r2
 801cbd0:	460e      	mov	r6, r1
 801cbd2:	461f      	mov	r7, r3
 801cbd4:	f10d 0c1c 	add.w	ip, sp, #28
 801cbd8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801cbdc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801cbe0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801cbe4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cbe8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cbec:	f8de 3000 	ldr.w	r3, [lr]
 801cbf0:	f104 0e14 	add.w	lr, r4, #20
 801cbf4:	f8cc 3000 	str.w	r3, [ip]
 801cbf8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801cbfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cc00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc04:	f8de 3000 	ldr.w	r3, [lr]
 801cc08:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801cc0c:	f8cc 3000 	str.w	r3, [ip]
 801cc10:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801cc14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cc18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc1c:	f8de 3000 	ldr.w	r3, [lr]
 801cc20:	4631      	mov	r1, r6
 801cc22:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cc24:	4628      	mov	r0, r5
 801cc26:	f8cc 3000 	str.w	r3, [ip]
 801cc2a:	682b      	ldr	r3, [r5, #0]
 801cc2c:	9201      	str	r2, [sp, #4]
 801cc2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cc30:	f8cd 8008 	str.w	r8, [sp, #8]
 801cc34:	9200      	str	r2, [sp, #0]
 801cc36:	aa07      	add	r2, sp, #28
 801cc38:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801cc3c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801cc40:	463b      	mov	r3, r7
 801cc42:	47d8      	blx	fp
 801cc44:	46a6      	mov	lr, r4
 801cc46:	f10d 0c1c 	add.w	ip, sp, #28
 801cc4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cc4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc52:	f8de 3000 	ldr.w	r3, [lr]
 801cc56:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801cc5a:	343c      	adds	r4, #60	; 0x3c
 801cc5c:	f8cc 3000 	str.w	r3, [ip]
 801cc60:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801cc64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cc68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc6c:	f8de 3000 	ldr.w	r3, [lr]
 801cc70:	f8cc 3000 	str.w	r3, [ip]
 801cc74:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801cc78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cc7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc7e:	6823      	ldr	r3, [r4, #0]
 801cc80:	4631      	mov	r1, r6
 801cc82:	4628      	mov	r0, r5
 801cc84:	f8cc 3000 	str.w	r3, [ip]
 801cc88:	682b      	ldr	r3, [r5, #0]
 801cc8a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801cc8e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cc90:	f8cd 8008 	str.w	r8, [sp, #8]
 801cc94:	9201      	str	r2, [sp, #4]
 801cc96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cc98:	9200      	str	r2, [sp, #0]
 801cc9a:	aa07      	add	r2, sp, #28
 801cc9c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801cc9e:	463b      	mov	r3, r7
 801cca0:	47a0      	blx	r4
 801cca2:	b017      	add	sp, #92	; 0x5c
 801cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cca8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cca8:	2000      	movs	r0, #0
 801ccaa:	4770      	bx	lr

0801ccac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccb0:	b08d      	sub	sp, #52	; 0x34
 801ccb2:	4688      	mov	r8, r1
 801ccb4:	f8d3 c000 	ldr.w	ip, [r3]
 801ccb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ccba:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801ccbe:	680f      	ldr	r7, [r1, #0]
 801ccc0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801ccc4:	eba7 070c 	sub.w	r7, r7, ip
 801ccc8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801cccc:	edd3 6a07 	vldr	s13, [r3, #28]
 801ccd0:	42bc      	cmp	r4, r7
 801ccd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ccd4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801ccd8:	bfa8      	it	ge
 801ccda:	463c      	movge	r4, r7
 801ccdc:	f9b1 9000 	ldrsh.w	r9, [r1]
 801cce0:	f9ba 1000 	ldrsh.w	r1, [sl]
 801cce4:	ee07 4a90 	vmov	s15, r4
 801cce8:	eb09 0e0c 	add.w	lr, r9, ip
 801ccec:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801ccf0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801ccf4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801ccf8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801ccfc:	4571      	cmp	r1, lr
 801ccfe:	ee25 4a04 	vmul.f32	s8, s10, s8
 801cd02:	ee65 4a24 	vmul.f32	s9, s10, s9
 801cd06:	ee25 5a27 	vmul.f32	s10, s10, s15
 801cd0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801cd0e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801cd12:	ee32 1a05 	vadd.f32	s2, s4, s10
 801cd16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cd1a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801cd1e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cd22:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cd26:	f340 808c 	ble.w	801ce42 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801cd2a:	eba1 060e 	sub.w	r6, r1, lr
 801cd2e:	fb96 f5f4 	sdiv	r5, r6, r4
 801cd32:	ee07 5a10 	vmov	s14, r5
 801cd36:	2d00      	cmp	r5, #0
 801cd38:	fb04 6615 	mls	r6, r4, r5, r6
 801cd3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd40:	eea7 0a04 	vfma.f32	s0, s14, s8
 801cd44:	eee7 0a24 	vfma.f32	s1, s14, s9
 801cd48:	eea7 1a05 	vfma.f32	s2, s14, s10
 801cd4c:	dd12      	ble.n	801cd74 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801cd4e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801cd52:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801cd56:	ee31 2a45 	vsub.f32	s4, s2, s10
 801cd5a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801cd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd62:	bf14      	ite	ne
 801cd64:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801cd68:	eeb0 7a67 	vmoveq.f32	s14, s15
 801cd6c:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cd70:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cd74:	fb05 f204 	mul.w	r2, r5, r4
 801cd78:	1abf      	subs	r7, r7, r2
 801cd7a:	4494      	add	ip, r2
 801cd7c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801cd80:	4411      	add	r1, r2
 801cd82:	eb09 020c 	add.w	r2, r9, ip
 801cd86:	b209      	sxth	r1, r1
 801cd88:	443a      	add	r2, r7
 801cd8a:	428a      	cmp	r2, r1
 801cd8c:	bfc4      	itt	gt
 801cd8e:	eba1 0209 	subgt.w	r2, r1, r9
 801cd92:	eba2 070c 	subgt.w	r7, r2, ip
 801cd96:	2f00      	cmp	r7, #0
 801cd98:	dd50      	ble.n	801ce3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801cd9a:	fb97 f1f4 	sdiv	r1, r7, r4
 801cd9e:	fb04 7211 	mls	r2, r4, r1, r7
 801cda2:	b90a      	cbnz	r2, 801cda8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801cda4:	3901      	subs	r1, #1
 801cda6:	4622      	mov	r2, r4
 801cda8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801cdac:	6840      	ldr	r0, [r0, #4]
 801cdae:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801cdb2:	44b6      	add	lr, r6
 801cdb4:	f8d0 a000 	ldr.w	sl, [r0]
 801cdb8:	2900      	cmp	r1, #0
 801cdba:	bfcc      	ite	gt
 801cdbc:	46a1      	movgt	r9, r4
 801cdbe:	4691      	movle	r9, r2
 801cdc0:	900b      	str	r0, [sp, #44]	; 0x2c
 801cdc2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801cdc4:	fb04 e505 	mla	r5, r4, r5, lr
 801cdc8:	eef0 6a42 	vmov.f32	s13, s4
 801cdcc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801cdd0:	9008      	str	r0, [sp, #32]
 801cdd2:	eeb0 7a61 	vmov.f32	s14, s3
 801cdd6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801cdd8:	695b      	ldr	r3, [r3, #20]
 801cdda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cdde:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801cde2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cde6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801cde8:	445b      	add	r3, fp
 801cdea:	9307      	str	r3, [sp, #28]
 801cdec:	ee16 3a90 	vmov	r3, s13
 801cdf0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801cdf4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801cdf8:	ee21 3a23 	vmul.f32	s6, s2, s7
 801cdfc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801ce00:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ce04:	ee17 7a90 	vmov	r7, s15
 801ce08:	ee73 7a42 	vsub.f32	s15, s6, s4
 801ce0c:	fb97 f7f4 	sdiv	r7, r7, r4
 801ce10:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ce14:	ee17 ca90 	vmov	ip, s15
 801ce18:	fb9c fcf4 	sdiv	ip, ip, r4
 801ce1c:	fb0c 3306 	mla	r3, ip, r6, r3
 801ce20:	9302      	str	r3, [sp, #8]
 801ce22:	ee17 3a10 	vmov	r3, s14
 801ce26:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801ce2a:	fb07 3706 	mla	r7, r7, r6, r3
 801ce2e:	eba9 0306 	sub.w	r3, r9, r6
 801ce32:	e9cd 4700 	strd	r4, r7, [sp]
 801ce36:	f8da 4008 	ldr.w	r4, [sl, #8]
 801ce3a:	47a0      	blx	r4
 801ce3c:	b00d      	add	sp, #52	; 0x34
 801ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce42:	2500      	movs	r5, #0
 801ce44:	462e      	mov	r6, r5
 801ce46:	e799      	b.n	801cd7c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801ce48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce4c:	b0db      	sub	sp, #364	; 0x16c
 801ce4e:	461d      	mov	r5, r3
 801ce50:	4614      	mov	r4, r2
 801ce52:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801ce56:	910f      	str	r1, [sp, #60]	; 0x3c
 801ce58:	4629      	mov	r1, r5
 801ce5a:	930a      	str	r3, [sp, #40]	; 0x28
 801ce5c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801ce60:	9009      	str	r0, [sp, #36]	; 0x24
 801ce62:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce64:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801ce68:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801ce6c:	9310      	str	r3, [sp, #64]	; 0x40
 801ce6e:	6803      	ldr	r3, [r0, #0]
 801ce70:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801ce72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ce76:	47b8      	blx	r7
 801ce78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce7a:	6058      	str	r0, [r3, #4]
 801ce7c:	2800      	cmp	r0, #0
 801ce7e:	f000 83a1 	beq.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ce82:	682b      	ldr	r3, [r5, #0]
 801ce84:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801ce88:	ed94 7a02 	vldr	s14, [r4, #8]
 801ce8c:	9314      	str	r3, [sp, #80]	; 0x50
 801ce8e:	686b      	ldr	r3, [r5, #4]
 801ce90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ce94:	9315      	str	r3, [sp, #84]	; 0x54
 801ce96:	4bc1      	ldr	r3, [pc, #772]	; (801d19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801ce98:	7819      	ldrb	r1, [r3, #0]
 801ce9a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801ce9e:	2900      	cmp	r1, #0
 801cea0:	bf16      	itet	ne
 801cea2:	4619      	movne	r1, r3
 801cea4:	4611      	moveq	r1, r2
 801cea6:	4613      	movne	r3, r2
 801cea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceac:	9116      	str	r1, [sp, #88]	; 0x58
 801ceae:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801ceb2:	f240 8387 	bls.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ceb6:	ed94 7a07 	vldr	s14, [r4, #28]
 801ceba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cec2:	f240 837f 	bls.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cec6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801ceca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ced2:	f240 8377 	bls.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ced6:	6822      	ldr	r2, [r4, #0]
 801ced8:	4bb1      	ldr	r3, [pc, #708]	; (801d1a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801ceda:	429a      	cmp	r2, r3
 801cedc:	f2c0 8372 	blt.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cee0:	49b0      	ldr	r1, [pc, #704]	; (801d1a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801cee2:	6963      	ldr	r3, [r4, #20]
 801cee4:	428a      	cmp	r2, r1
 801cee6:	f300 836d 	bgt.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ceea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801ceee:	48ae      	ldr	r0, [pc, #696]	; (801d1a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801cef0:	33ff      	adds	r3, #255	; 0xff
 801cef2:	4283      	cmp	r3, r0
 801cef4:	f200 8366 	bhi.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cefa:	4dac      	ldr	r5, [pc, #688]	; (801d1ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801cefc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801cf00:	33ff      	adds	r3, #255	; 0xff
 801cf02:	42ab      	cmp	r3, r5
 801cf04:	f200 835e 	bhi.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cf08:	6862      	ldr	r2, [r4, #4]
 801cf0a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801cf0e:	33ff      	adds	r3, #255	; 0xff
 801cf10:	4283      	cmp	r3, r0
 801cf12:	f200 8357 	bhi.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cf16:	69a1      	ldr	r1, [r4, #24]
 801cf18:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801cf1c:	33ff      	adds	r3, #255	; 0xff
 801cf1e:	4283      	cmp	r3, r0
 801cf20:	f200 8350 	bhi.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cf24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cf26:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801cf2a:	30ff      	adds	r0, #255	; 0xff
 801cf2c:	42a8      	cmp	r0, r5
 801cf2e:	f200 8349 	bhi.w	801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cf32:	428a      	cmp	r2, r1
 801cf34:	f280 8110 	bge.w	801d158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801cf38:	429a      	cmp	r2, r3
 801cf3a:	f300 8119 	bgt.w	801d170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801cf3e:	4299      	cmp	r1, r3
 801cf40:	f280 811d 	bge.w	801d17e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801cf44:	2502      	movs	r5, #2
 801cf46:	2701      	movs	r7, #1
 801cf48:	46a9      	mov	r9, r5
 801cf4a:	46b8      	mov	r8, r7
 801cf4c:	f04f 0a00 	mov.w	sl, #0
 801cf50:	4621      	mov	r1, r4
 801cf52:	a849      	add	r0, sp, #292	; 0x124
 801cf54:	f001 fbe4 	bl	801e720 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801cf58:	4622      	mov	r2, r4
 801cf5a:	4653      	mov	r3, sl
 801cf5c:	a949      	add	r1, sp, #292	; 0x124
 801cf5e:	f8cd 9000 	str.w	r9, [sp]
 801cf62:	a819      	add	r0, sp, #100	; 0x64
 801cf64:	f001 fd0c 	bl	801e980 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801cf68:	4622      	mov	r2, r4
 801cf6a:	4653      	mov	r3, sl
 801cf6c:	a949      	add	r1, sp, #292	; 0x124
 801cf6e:	f8cd 8000 	str.w	r8, [sp]
 801cf72:	a829      	add	r0, sp, #164	; 0xa4
 801cf74:	f001 fd04 	bl	801e980 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801cf78:	4643      	mov	r3, r8
 801cf7a:	4622      	mov	r2, r4
 801cf7c:	a949      	add	r1, sp, #292	; 0x124
 801cf7e:	f8cd 9000 	str.w	r9, [sp]
 801cf82:	a839      	add	r0, sp, #228	; 0xe4
 801cf84:	f001 fcfc 	bl	801e980 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801cf88:	42af      	cmp	r7, r5
 801cf8a:	af12      	add	r7, sp, #72	; 0x48
 801cf8c:	bfb7      	itett	lt
 801cf8e:	2300      	movlt	r3, #0
 801cf90:	2301      	movge	r3, #1
 801cf92:	ad29      	addlt	r5, sp, #164	; 0xa4
 801cf94:	ac19      	addlt	r4, sp, #100	; 0x64
 801cf96:	bfb1      	iteee	lt
 801cf98:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cf9a:	ad19      	addge	r5, sp, #100	; 0x64
 801cf9c:	930e      	strge	r3, [sp, #56]	; 0x38
 801cf9e:	ac29      	addge	r4, sp, #164	; 0xa4
 801cfa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cfa6:	e887 0003 	stmia.w	r7, {r0, r1}
 801cfaa:	b928      	cbnz	r0, 801cfb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801cfac:	4b80      	ldr	r3, [pc, #512]	; (801d1b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801cfae:	6818      	ldr	r0, [r3, #0]
 801cfb0:	6803      	ldr	r3, [r0, #0]
 801cfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfb4:	4798      	blx	r3
 801cfb6:	6038      	str	r0, [r7, #0]
 801cfb8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801cfba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801cfbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cfc2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801cfc4:	930c      	str	r3, [sp, #48]	; 0x30
 801cfc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cfc8:	6963      	ldr	r3, [r4, #20]
 801cfca:	440b      	add	r3, r1
 801cfcc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801cfd0:	4408      	add	r0, r1
 801cfd2:	b200      	sxth	r0, r0
 801cfd4:	4283      	cmp	r3, r0
 801cfd6:	900d      	str	r0, [sp, #52]	; 0x34
 801cfd8:	f280 80dd 	bge.w	801d196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801cfdc:	428b      	cmp	r3, r1
 801cfde:	da08      	bge.n	801cff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801cfe0:	2a00      	cmp	r2, #0
 801cfe2:	dd06      	ble.n	801cff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801cfe4:	1acb      	subs	r3, r1, r3
 801cfe6:	429a      	cmp	r2, r3
 801cfe8:	f2c0 80e4 	blt.w	801d1b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	f300 80e2 	bgt.w	801d1b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801cff2:	6967      	ldr	r7, [r4, #20]
 801cff4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801cff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cffa:	443b      	add	r3, r7
 801cffc:	461f      	mov	r7, r3
 801cffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d000:	1bdf      	subs	r7, r3, r7
 801d002:	4297      	cmp	r7, r2
 801d004:	bfa8      	it	ge
 801d006:	4617      	movge	r7, r2
 801d008:	2f00      	cmp	r7, #0
 801d00a:	f340 8166 	ble.w	801d2da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801d00e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d010:	6829      	ldr	r1, [r5, #0]
 801d012:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d016:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d01a:	4411      	add	r1, r2
 801d01c:	6820      	ldr	r0, [r4, #0]
 801d01e:	4299      	cmp	r1, r3
 801d020:	dd1a      	ble.n	801d058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d022:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d026:	4402      	add	r2, r0
 801d028:	440b      	add	r3, r1
 801d02a:	b21b      	sxth	r3, r3
 801d02c:	429a      	cmp	r2, r3
 801d02e:	dc13      	bgt.n	801d058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d032:	a912      	add	r1, sp, #72	; 0x48
 801d034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d036:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	9206      	str	r2, [sp, #24]
 801d03c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d03e:	9500      	str	r5, [sp, #0]
 801d040:	9205      	str	r2, [sp, #20]
 801d042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d044:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d048:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d04a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d04e:	aa49      	add	r2, sp, #292	; 0x124
 801d050:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801d054:	4623      	mov	r3, r4
 801d056:	47c8      	blx	r9
 801d058:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d05c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d060:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d064:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d068:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d06c:	68a1      	ldr	r1, [r4, #8]
 801d06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d072:	ed94 6a08 	vldr	s12, [r4, #32]
 801d076:	edd4 6a07 	vldr	s13, [r4, #28]
 801d07a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d07e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d082:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d086:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d08a:	edc4 6a07 	vstr	s13, [r4, #28]
 801d08e:	441a      	add	r2, r3
 801d090:	6963      	ldr	r3, [r4, #20]
 801d092:	3301      	adds	r3, #1
 801d094:	6022      	str	r2, [r4, #0]
 801d096:	6163      	str	r3, [r4, #20]
 801d098:	69a3      	ldr	r3, [r4, #24]
 801d09a:	3b01      	subs	r3, #1
 801d09c:	61a3      	str	r3, [r4, #24]
 801d09e:	6923      	ldr	r3, [r4, #16]
 801d0a0:	440b      	add	r3, r1
 801d0a2:	68e1      	ldr	r1, [r4, #12]
 801d0a4:	428b      	cmp	r3, r1
 801d0a6:	6123      	str	r3, [r4, #16]
 801d0a8:	db15      	blt.n	801d0d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801d0aa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d0ae:	3201      	adds	r2, #1
 801d0b0:	1a5b      	subs	r3, r3, r1
 801d0b2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d0b6:	6022      	str	r2, [r4, #0]
 801d0b8:	6123      	str	r3, [r4, #16]
 801d0ba:	edc4 6a07 	vstr	s13, [r4, #28]
 801d0be:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d0c2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d0c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d0ca:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d0ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d0d2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d0d6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d0da:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d0de:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d0e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d0e6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d0ea:	68a9      	ldr	r1, [r5, #8]
 801d0ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d0f0:	ed95 6a08 	vldr	s12, [r5, #32]
 801d0f4:	edd5 6a07 	vldr	s13, [r5, #28]
 801d0f8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d0fc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d100:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d104:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d108:	edc5 6a07 	vstr	s13, [r5, #28]
 801d10c:	441a      	add	r2, r3
 801d10e:	696b      	ldr	r3, [r5, #20]
 801d110:	3301      	adds	r3, #1
 801d112:	602a      	str	r2, [r5, #0]
 801d114:	616b      	str	r3, [r5, #20]
 801d116:	69ab      	ldr	r3, [r5, #24]
 801d118:	3b01      	subs	r3, #1
 801d11a:	61ab      	str	r3, [r5, #24]
 801d11c:	692b      	ldr	r3, [r5, #16]
 801d11e:	440b      	add	r3, r1
 801d120:	68e9      	ldr	r1, [r5, #12]
 801d122:	428b      	cmp	r3, r1
 801d124:	612b      	str	r3, [r5, #16]
 801d126:	db15      	blt.n	801d154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801d128:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d12c:	3201      	adds	r2, #1
 801d12e:	1a5b      	subs	r3, r3, r1
 801d130:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d134:	602a      	str	r2, [r5, #0]
 801d136:	612b      	str	r3, [r5, #16]
 801d138:	edc5 6a07 	vstr	s13, [r5, #28]
 801d13c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d140:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d144:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d148:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d14c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d150:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d154:	3f01      	subs	r7, #1
 801d156:	e757      	b.n	801d008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801d158:	4299      	cmp	r1, r3
 801d15a:	dc13      	bgt.n	801d184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801d15c:	429a      	cmp	r2, r3
 801d15e:	da14      	bge.n	801d18a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801d160:	2502      	movs	r5, #2
 801d162:	2703      	movs	r7, #3
 801d164:	f04f 0800 	mov.w	r8, #0
 801d168:	46a9      	mov	r9, r5
 801d16a:	f04f 0a01 	mov.w	sl, #1
 801d16e:	e6ef      	b.n	801cf50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d170:	2501      	movs	r5, #1
 801d172:	2700      	movs	r7, #0
 801d174:	46a9      	mov	r9, r5
 801d176:	46b8      	mov	r8, r7
 801d178:	f04f 0a02 	mov.w	sl, #2
 801d17c:	e6e8      	b.n	801cf50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d17e:	2501      	movs	r5, #1
 801d180:	2702      	movs	r7, #2
 801d182:	e6e1      	b.n	801cf48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801d184:	2500      	movs	r5, #0
 801d186:	2701      	movs	r7, #1
 801d188:	e7f4      	b.n	801d174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801d18a:	2702      	movs	r7, #2
 801d18c:	2503      	movs	r5, #3
 801d18e:	f04f 0900 	mov.w	r9, #0
 801d192:	46b8      	mov	r8, r7
 801d194:	e7e9      	b.n	801d16a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801d196:	4613      	mov	r3, r2
 801d198:	e728      	b.n	801cfec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801d19a:	bf00      	nop
 801d19c:	2000730e 	.word	0x2000730e
 801d1a0:	fffd8f01 	.word	0xfffd8f01
 801d1a4:	00027100 	.word	0x00027100
 801d1a8:	0004e1ff 	.word	0x0004e1ff
 801d1ac:	0004e1fe 	.word	0x0004e1fe
 801d1b0:	20007318 	.word	0x20007318
 801d1b4:	4613      	mov	r3, r2
 801d1b6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801d1b8:	469e      	mov	lr, r3
 801d1ba:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801d1bc:	469c      	mov	ip, r3
 801d1be:	9111      	str	r1, [sp, #68]	; 0x44
 801d1c0:	f04f 0900 	mov.w	r9, #0
 801d1c4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801d1c8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801d1cc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801d1d0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801d1d4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801d1d8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d1dc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801d1e0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801d1e4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801d1e8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801d1ec:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801d1f0:	f1bc 0f00 	cmp.w	ip, #0
 801d1f4:	d147      	bne.n	801d286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801d1f6:	eb03 0c07 	add.w	ip, r3, r7
 801d1fa:	1ad7      	subs	r7, r2, r3
 801d1fc:	f1b9 0f00 	cmp.w	r9, #0
 801d200:	d009      	beq.n	801d216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801d202:	9029      	str	r0, [sp, #164]	; 0xa4
 801d204:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801d208:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801d20c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801d210:	912d      	str	r1, [sp, #180]	; 0xb4
 801d212:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801d216:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d218:	f04f 0800 	mov.w	r8, #0
 801d21c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d220:	9111      	str	r1, [sp, #68]	; 0x44
 801d222:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d226:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d22a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d22e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d232:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d236:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d23a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d23e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d242:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d246:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d24a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d24e:	f1be 0f00 	cmp.w	lr, #0
 801d252:	d031      	beq.n	801d2b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801d254:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d256:	4450      	add	r0, sl
 801d258:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d25c:	4431      	add	r1, r6
 801d25e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d262:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d266:	4549      	cmp	r1, r9
 801d268:	db08      	blt.n	801d27c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801d26a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d26e:	3001      	adds	r0, #1
 801d270:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d274:	eba1 0109 	sub.w	r1, r1, r9
 801d278:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d27c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d280:	f04f 0801 	mov.w	r8, #1
 801d284:	e7e3      	b.n	801d24e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801d286:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d288:	4450      	add	r0, sl
 801d28a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d28e:	4431      	add	r1, r6
 801d290:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d294:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d298:	4541      	cmp	r1, r8
 801d29a:	db08      	blt.n	801d2ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801d29c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d2a0:	3001      	adds	r0, #1
 801d2a2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d2a6:	eba1 0108 	sub.w	r1, r1, r8
 801d2aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d2ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2b2:	f04f 0901 	mov.w	r9, #1
 801d2b6:	e79b      	b.n	801d1f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801d2b8:	449c      	add	ip, r3
 801d2ba:	1aff      	subs	r7, r7, r3
 801d2bc:	f1b8 0f00 	cmp.w	r8, #0
 801d2c0:	d009      	beq.n	801d2d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801d2c2:	9019      	str	r0, [sp, #100]	; 0x64
 801d2c4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d2c8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d2cc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d2d0:	911d      	str	r1, [sp, #116]	; 0x74
 801d2d2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d2d6:	1ad2      	subs	r2, r2, r3
 801d2d8:	e68b      	b.n	801cff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2dc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	f000 80d1 	beq.w	801d486 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801d2e4:	ad19      	add	r5, sp, #100	; 0x64
 801d2e6:	ac39      	add	r4, sp, #228	; 0xe4
 801d2e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d2ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d2ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d2f2:	930c      	str	r3, [sp, #48]	; 0x30
 801d2f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d2f6:	6963      	ldr	r3, [r4, #20]
 801d2f8:	440b      	add	r3, r1
 801d2fa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d2fe:	4408      	add	r0, r1
 801d300:	b200      	sxth	r0, r0
 801d302:	4283      	cmp	r3, r0
 801d304:	900d      	str	r0, [sp, #52]	; 0x34
 801d306:	f280 80c1 	bge.w	801d48c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801d30a:	428b      	cmp	r3, r1
 801d30c:	da08      	bge.n	801d320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d30e:	2a00      	cmp	r2, #0
 801d310:	dd06      	ble.n	801d320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d312:	1acb      	subs	r3, r1, r3
 801d314:	429a      	cmp	r2, r3
 801d316:	f2c0 80bb 	blt.w	801d490 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	f300 80b9 	bgt.w	801d492 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801d320:	6967      	ldr	r7, [r4, #20]
 801d322:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801d326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d328:	443b      	add	r3, r7
 801d32a:	461f      	mov	r7, r3
 801d32c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d32e:	1bdf      	subs	r7, r3, r7
 801d330:	4297      	cmp	r7, r2
 801d332:	bfa8      	it	ge
 801d334:	4617      	movge	r7, r2
 801d336:	2f00      	cmp	r7, #0
 801d338:	f340 813c 	ble.w	801d5b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801d33c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d33e:	6829      	ldr	r1, [r5, #0]
 801d340:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d344:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d348:	4411      	add	r1, r2
 801d34a:	6820      	ldr	r0, [r4, #0]
 801d34c:	4299      	cmp	r1, r3
 801d34e:	dd1a      	ble.n	801d386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d350:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d354:	4402      	add	r2, r0
 801d356:	440b      	add	r3, r1
 801d358:	b21b      	sxth	r3, r3
 801d35a:	429a      	cmp	r2, r3
 801d35c:	dc13      	bgt.n	801d386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d35e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d360:	a912      	add	r1, sp, #72	; 0x48
 801d362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d364:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	9206      	str	r2, [sp, #24]
 801d36a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d36c:	9500      	str	r5, [sp, #0]
 801d36e:	9205      	str	r2, [sp, #20]
 801d370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d372:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d376:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d378:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d37c:	aa49      	add	r2, sp, #292	; 0x124
 801d37e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801d382:	4623      	mov	r3, r4
 801d384:	47c8      	blx	r9
 801d386:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d38a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d38e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d392:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d396:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d39a:	68a1      	ldr	r1, [r4, #8]
 801d39c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d3a0:	ed94 6a08 	vldr	s12, [r4, #32]
 801d3a4:	edd4 6a07 	vldr	s13, [r4, #28]
 801d3a8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d3ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d3b0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d3b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d3b8:	edc4 6a07 	vstr	s13, [r4, #28]
 801d3bc:	441a      	add	r2, r3
 801d3be:	6963      	ldr	r3, [r4, #20]
 801d3c0:	3301      	adds	r3, #1
 801d3c2:	6022      	str	r2, [r4, #0]
 801d3c4:	6163      	str	r3, [r4, #20]
 801d3c6:	69a3      	ldr	r3, [r4, #24]
 801d3c8:	3b01      	subs	r3, #1
 801d3ca:	61a3      	str	r3, [r4, #24]
 801d3cc:	6923      	ldr	r3, [r4, #16]
 801d3ce:	440b      	add	r3, r1
 801d3d0:	68e1      	ldr	r1, [r4, #12]
 801d3d2:	428b      	cmp	r3, r1
 801d3d4:	6123      	str	r3, [r4, #16]
 801d3d6:	db15      	blt.n	801d404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801d3d8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d3dc:	3201      	adds	r2, #1
 801d3de:	1a5b      	subs	r3, r3, r1
 801d3e0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d3e4:	6022      	str	r2, [r4, #0]
 801d3e6:	6123      	str	r3, [r4, #16]
 801d3e8:	edc4 6a07 	vstr	s13, [r4, #28]
 801d3ec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d3f0:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d3f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d3f8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d3fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d400:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d404:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d408:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d40c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d410:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d414:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d418:	68a9      	ldr	r1, [r5, #8]
 801d41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d41e:	ed95 6a08 	vldr	s12, [r5, #32]
 801d422:	edd5 6a07 	vldr	s13, [r5, #28]
 801d426:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d42a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d42e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d432:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d436:	edc5 6a07 	vstr	s13, [r5, #28]
 801d43a:	441a      	add	r2, r3
 801d43c:	696b      	ldr	r3, [r5, #20]
 801d43e:	3301      	adds	r3, #1
 801d440:	602a      	str	r2, [r5, #0]
 801d442:	616b      	str	r3, [r5, #20]
 801d444:	69ab      	ldr	r3, [r5, #24]
 801d446:	3b01      	subs	r3, #1
 801d448:	61ab      	str	r3, [r5, #24]
 801d44a:	692b      	ldr	r3, [r5, #16]
 801d44c:	440b      	add	r3, r1
 801d44e:	68e9      	ldr	r1, [r5, #12]
 801d450:	428b      	cmp	r3, r1
 801d452:	612b      	str	r3, [r5, #16]
 801d454:	db15      	blt.n	801d482 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801d456:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d45a:	3201      	adds	r2, #1
 801d45c:	1a5b      	subs	r3, r3, r1
 801d45e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d462:	602a      	str	r2, [r5, #0]
 801d464:	612b      	str	r3, [r5, #16]
 801d466:	edc5 6a07 	vstr	s13, [r5, #28]
 801d46a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d46e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d472:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d476:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d47a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d47e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d482:	3f01      	subs	r7, #1
 801d484:	e757      	b.n	801d336 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801d486:	ad39      	add	r5, sp, #228	; 0xe4
 801d488:	ac19      	add	r4, sp, #100	; 0x64
 801d48a:	e72d      	b.n	801d2e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801d48c:	4613      	mov	r3, r2
 801d48e:	e744      	b.n	801d31a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801d490:	4613      	mov	r3, r2
 801d492:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801d494:	469e      	mov	lr, r3
 801d496:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801d49a:	461f      	mov	r7, r3
 801d49c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801d4a0:	f04f 0900 	mov.w	r9, #0
 801d4a4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801d4a8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801d4ac:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801d4b0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801d4b4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801d4b8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801d4ba:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801d4be:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801d4c2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801d4c6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801d4ca:	960e      	str	r6, [sp, #56]	; 0x38
 801d4cc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801d4d0:	2f00      	cmp	r7, #0
 801d4d2:	d146      	bne.n	801d562 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801d4d4:	449c      	add	ip, r3
 801d4d6:	1ad7      	subs	r7, r2, r3
 801d4d8:	f1b9 0f00 	cmp.w	r9, #0
 801d4dc:	d009      	beq.n	801d4f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801d4de:	9039      	str	r0, [sp, #228]	; 0xe4
 801d4e0:	913d      	str	r1, [sp, #244]	; 0xf4
 801d4e2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801d4e6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801d4ea:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801d4ee:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801d4f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d4f4:	f04f 0800 	mov.w	r8, #0
 801d4f8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d4fc:	910e      	str	r1, [sp, #56]	; 0x38
 801d4fe:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d502:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d506:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d50a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d50e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d512:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d516:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d51a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d51e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d522:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d526:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d52a:	f1be 0f00 	cmp.w	lr, #0
 801d52e:	d030      	beq.n	801d592 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801d530:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d532:	4450      	add	r0, sl
 801d534:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d538:	4431      	add	r1, r6
 801d53a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d53e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d542:	4549      	cmp	r1, r9
 801d544:	db08      	blt.n	801d558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801d546:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d54a:	3001      	adds	r0, #1
 801d54c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d550:	eba1 0109 	sub.w	r1, r1, r9
 801d554:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d558:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d55c:	f04f 0801 	mov.w	r8, #1
 801d560:	e7e3      	b.n	801d52a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801d562:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d564:	4450      	add	r0, sl
 801d566:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d56a:	4431      	add	r1, r6
 801d56c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d570:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d574:	4541      	cmp	r1, r8
 801d576:	db08      	blt.n	801d58a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801d578:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d57c:	3001      	adds	r0, #1
 801d57e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d582:	eba1 0108 	sub.w	r1, r1, r8
 801d586:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d58a:	3f01      	subs	r7, #1
 801d58c:	f04f 0901 	mov.w	r9, #1
 801d590:	e79e      	b.n	801d4d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801d592:	449c      	add	ip, r3
 801d594:	1aff      	subs	r7, r7, r3
 801d596:	f1b8 0f00 	cmp.w	r8, #0
 801d59a:	d009      	beq.n	801d5b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801d59c:	9019      	str	r0, [sp, #100]	; 0x64
 801d59e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d5a2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d5a6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d5aa:	911d      	str	r1, [sp, #116]	; 0x74
 801d5ac:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d5b0:	1ad2      	subs	r2, r2, r3
 801d5b2:	e6b5      	b.n	801d320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d5b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	b923      	cbnz	r3, 801d5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d5ba:	4b04      	ldr	r3, [pc, #16]	; (801d5cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801d5bc:	6818      	ldr	r0, [r3, #0]
 801d5be:	6803      	ldr	r3, [r0, #0]
 801d5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5c2:	4798      	blx	r3
 801d5c4:	b05b      	add	sp, #364	; 0x16c
 801d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5ca:	bf00      	nop
 801d5cc:	20007318 	.word	0x20007318

0801d5d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801d5d0:	2b02      	cmp	r3, #2
 801d5d2:	b510      	push	{r4, lr}
 801d5d4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d5d8:	d00b      	beq.n	801d5f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801d5da:	2b03      	cmp	r3, #3
 801d5dc:	d00e      	beq.n	801d5fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801d5de:	2b01      	cmp	r3, #1
 801d5e0:	d001      	beq.n	801d5e6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801d5e2:	1860      	adds	r0, r4, r1
 801d5e4:	bd10      	pop	{r4, pc}
 801d5e6:	8880      	ldrh	r0, [r0, #4]
 801d5e8:	4420      	add	r0, r4
 801d5ea:	b200      	sxth	r0, r0
 801d5ec:	1a80      	subs	r0, r0, r2
 801d5ee:	3801      	subs	r0, #1
 801d5f0:	e7f8      	b.n	801d5e4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801d5f2:	8880      	ldrh	r0, [r0, #4]
 801d5f4:	4420      	add	r0, r4
 801d5f6:	b200      	sxth	r0, r0
 801d5f8:	1a40      	subs	r0, r0, r1
 801d5fa:	e7f8      	b.n	801d5ee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801d5fc:	18a0      	adds	r0, r4, r2
 801d5fe:	e7f1      	b.n	801d5e4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801d600 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801d600:	2b02      	cmp	r3, #2
 801d602:	b510      	push	{r4, lr}
 801d604:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801d608:	d006      	beq.n	801d618 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801d60a:	2b03      	cmp	r3, #3
 801d60c:	d00a      	beq.n	801d624 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801d60e:	2b01      	cmp	r3, #1
 801d610:	bf14      	ite	ne
 801d612:	18a0      	addne	r0, r4, r2
 801d614:	1860      	addeq	r0, r4, r1
 801d616:	bd10      	pop	{r4, pc}
 801d618:	88c0      	ldrh	r0, [r0, #6]
 801d61a:	4420      	add	r0, r4
 801d61c:	b200      	sxth	r0, r0
 801d61e:	1a80      	subs	r0, r0, r2
 801d620:	3801      	subs	r0, #1
 801d622:	e7f8      	b.n	801d616 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801d624:	88c0      	ldrh	r0, [r0, #6]
 801d626:	4420      	add	r0, r4
 801d628:	b200      	sxth	r0, r0
 801d62a:	1a40      	subs	r0, r0, r1
 801d62c:	e7f8      	b.n	801d620 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801d630 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801d630:	4b01      	ldr	r3, [pc, #4]	; (801d638 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801d632:	2200      	movs	r2, #0
 801d634:	601a      	str	r2, [r3, #0]
 801d636:	4770      	bx	lr
 801d638:	20007320 	.word	0x20007320

0801d63c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801d63c:	4603      	mov	r3, r0
 801d63e:	b1c8      	cbz	r0, 801d674 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801d640:	0c02      	lsrs	r2, r0, #16
 801d642:	0412      	lsls	r2, r2, #16
 801d644:	b9a2      	cbnz	r2, 801d670 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801d646:	0403      	lsls	r3, r0, #16
 801d648:	2010      	movs	r0, #16
 801d64a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d64e:	bf04      	itt	eq
 801d650:	021b      	lsleq	r3, r3, #8
 801d652:	3008      	addeq	r0, #8
 801d654:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d658:	bf04      	itt	eq
 801d65a:	011b      	lsleq	r3, r3, #4
 801d65c:	3004      	addeq	r0, #4
 801d65e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d662:	bf04      	itt	eq
 801d664:	009b      	lsleq	r3, r3, #2
 801d666:	3002      	addeq	r0, #2
 801d668:	2b00      	cmp	r3, #0
 801d66a:	db04      	blt.n	801d676 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801d66c:	3001      	adds	r0, #1
 801d66e:	4770      	bx	lr
 801d670:	2000      	movs	r0, #0
 801d672:	e7ea      	b.n	801d64a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801d674:	2020      	movs	r0, #32
 801d676:	4770      	bx	lr

0801d678 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d67c:	b087      	sub	sp, #28
 801d67e:	4681      	mov	r9, r0
 801d680:	4698      	mov	r8, r3
 801d682:	4610      	mov	r0, r2
 801d684:	460d      	mov	r5, r1
 801d686:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801d68a:	b981      	cbnz	r1, 801d6ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801d68c:	b14b      	cbz	r3, 801d6a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801d68e:	460b      	mov	r3, r1
 801d690:	464a      	mov	r2, r9
 801d692:	4641      	mov	r1, r8
 801d694:	e9cd 4700 	strd	r4, r7, [sp]
 801d698:	f7ff ffee 	bl	801d678 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d69c:	b007      	add	sp, #28
 801d69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6a2:	f04f 33ff 	mov.w	r3, #4294967295
 801d6a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d6aa:	603b      	str	r3, [r7, #0]
 801d6ac:	e7f6      	b.n	801d69c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801d6ae:	fa32 fa01 	lsrs.w	sl, r2, r1
 801d6b2:	d107      	bne.n	801d6c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801d6b4:	fb09 f602 	mul.w	r6, r9, r2
 801d6b8:	fbb6 f0f4 	udiv	r0, r6, r4
 801d6bc:	fb04 6610 	mls	r6, r4, r0, r6
 801d6c0:	603e      	str	r6, [r7, #0]
 801d6c2:	e7eb      	b.n	801d69c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801d6c4:	2601      	movs	r6, #1
 801d6c6:	fa09 fb01 	lsl.w	fp, r9, r1
 801d6ca:	408e      	lsls	r6, r1
 801d6cc:	fbbb f3f4 	udiv	r3, fp, r4
 801d6d0:	3e01      	subs	r6, #1
 801d6d2:	9302      	str	r3, [sp, #8]
 801d6d4:	fb0a f303 	mul.w	r3, sl, r3
 801d6d8:	4016      	ands	r6, r2
 801d6da:	9303      	str	r3, [sp, #12]
 801d6dc:	4630      	mov	r0, r6
 801d6de:	f7ff ffad 	bl	801d63c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d6e2:	464a      	mov	r2, r9
 801d6e4:	460b      	mov	r3, r1
 801d6e6:	4601      	mov	r1, r0
 801d6e8:	4630      	mov	r0, r6
 801d6ea:	e9cd 4700 	strd	r4, r7, [sp]
 801d6ee:	f7ff ffc3 	bl	801d678 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d6f2:	9b02      	ldr	r3, [sp, #8]
 801d6f4:	4606      	mov	r6, r0
 801d6f6:	eb05 0108 	add.w	r1, r5, r8
 801d6fa:	fb04 bb13 	mls	fp, r4, r3, fp
 801d6fe:	4658      	mov	r0, fp
 801d700:	f7ff ff9c 	bl	801d63c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d704:	ab05      	add	r3, sp, #20
 801d706:	465a      	mov	r2, fp
 801d708:	e9cd 4300 	strd	r4, r3, [sp]
 801d70c:	4603      	mov	r3, r0
 801d70e:	4650      	mov	r0, sl
 801d710:	f7ff ffb2 	bl	801d678 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d714:	6839      	ldr	r1, [r7, #0]
 801d716:	9a05      	ldr	r2, [sp, #20]
 801d718:	9b03      	ldr	r3, [sp, #12]
 801d71a:	4411      	add	r1, r2
 801d71c:	fbb1 f2f4 	udiv	r2, r1, r4
 801d720:	18d3      	adds	r3, r2, r3
 801d722:	fb04 1412 	mls	r4, r4, r2, r1
 801d726:	441e      	add	r6, r3
 801d728:	603c      	str	r4, [r7, #0]
 801d72a:	4430      	add	r0, r6
 801d72c:	e7b6      	b.n	801d69c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801d72e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801d72e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d732:	b085      	sub	sp, #20
 801d734:	f1b0 0900 	subs.w	r9, r0, #0
 801d738:	461d      	mov	r5, r3
 801d73a:	4617      	mov	r7, r2
 801d73c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d73e:	bfbb      	ittet	lt
 801d740:	f1c9 0900 	rsblt	r9, r9, #0
 801d744:	f04f 36ff 	movlt.w	r6, #4294967295
 801d748:	2601      	movge	r6, #1
 801d74a:	6823      	ldrlt	r3, [r4, #0]
 801d74c:	bfbc      	itt	lt
 801d74e:	425b      	neglt	r3, r3
 801d750:	6023      	strlt	r3, [r4, #0]
 801d752:	2a00      	cmp	r2, #0
 801d754:	da04      	bge.n	801d760 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801d756:	6823      	ldr	r3, [r4, #0]
 801d758:	4257      	negs	r7, r2
 801d75a:	4276      	negs	r6, r6
 801d75c:	425b      	negs	r3, r3
 801d75e:	6023      	str	r3, [r4, #0]
 801d760:	2d00      	cmp	r5, #0
 801d762:	4638      	mov	r0, r7
 801d764:	bfba      	itte	lt
 801d766:	426d      	neglt	r5, r5
 801d768:	f04f 38ff 	movlt.w	r8, #4294967295
 801d76c:	f04f 0801 	movge.w	r8, #1
 801d770:	f7ff ff64 	bl	801d63c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d774:	ab03      	add	r3, sp, #12
 801d776:	463a      	mov	r2, r7
 801d778:	e9cd 5300 	strd	r5, r3, [sp]
 801d77c:	4603      	mov	r3, r0
 801d77e:	4648      	mov	r0, r9
 801d780:	f7ff ff7a 	bl	801d678 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d784:	6823      	ldr	r3, [r4, #0]
 801d786:	9a03      	ldr	r2, [sp, #12]
 801d788:	4546      	cmp	r6, r8
 801d78a:	441a      	add	r2, r3
 801d78c:	fb92 f3f5 	sdiv	r3, r2, r5
 801d790:	4418      	add	r0, r3
 801d792:	fb05 2313 	mls	r3, r5, r3, r2
 801d796:	bf18      	it	ne
 801d798:	4240      	negne	r0, r0
 801d79a:	1c72      	adds	r2, r6, #1
 801d79c:	6023      	str	r3, [r4, #0]
 801d79e:	d105      	bne.n	801d7ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	f1c3 0200 	rsb	r2, r3, #0
 801d7a6:	db0b      	blt.n	801d7c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801d7a8:	6022      	str	r2, [r4, #0]
 801d7aa:	e006      	b.n	801d7ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d7ac:	2e01      	cmp	r6, #1
 801d7ae:	d104      	bne.n	801d7ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	da02      	bge.n	801d7ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d7b4:	442b      	add	r3, r5
 801d7b6:	3801      	subs	r0, #1
 801d7b8:	6023      	str	r3, [r4, #0]
 801d7ba:	b005      	add	sp, #20
 801d7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7c0:	3801      	subs	r0, #1
 801d7c2:	1b52      	subs	r2, r2, r5
 801d7c4:	e7f0      	b.n	801d7a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801d7c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801d7c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d7cc:	4c1c      	ldr	r4, [pc, #112]	; (801d840 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801d7ce:	4605      	mov	r5, r0
 801d7d0:	6807      	ldr	r7, [r0, #0]
 801d7d2:	69a3      	ldr	r3, [r4, #24]
 801d7d4:	b92b      	cbnz	r3, 801d7e2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801d7d6:	6840      	ldr	r0, [r0, #4]
 801d7d8:	e9c5 7000 	strd	r7, r0, [r5]
 801d7dc:	b004      	add	sp, #16
 801d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7e2:	f04f 0802 	mov.w	r8, #2
 801d7e6:	68a2      	ldr	r2, [r4, #8]
 801d7e8:	ae04      	add	r6, sp, #16
 801d7ea:	6820      	ldr	r0, [r4, #0]
 801d7ec:	fb93 f1f8 	sdiv	r1, r3, r8
 801d7f0:	440a      	add	r2, r1
 801d7f2:	69e1      	ldr	r1, [r4, #28]
 801d7f4:	f846 2d04 	str.w	r2, [r6, #-4]!
 801d7f8:	463a      	mov	r2, r7
 801d7fa:	9600      	str	r6, [sp, #0]
 801d7fc:	f7ff ff97 	bl	801d72e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d800:	69a3      	ldr	r3, [r4, #24]
 801d802:	4607      	mov	r7, r0
 801d804:	686a      	ldr	r2, [r5, #4]
 801d806:	6a21      	ldr	r1, [r4, #32]
 801d808:	9600      	str	r6, [sp, #0]
 801d80a:	6860      	ldr	r0, [r4, #4]
 801d80c:	f7ff ff8f 	bl	801d72e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d810:	69a3      	ldr	r3, [r4, #24]
 801d812:	6962      	ldr	r2, [r4, #20]
 801d814:	4407      	add	r7, r0
 801d816:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d818:	9600      	str	r6, [sp, #0]
 801d81a:	68e0      	ldr	r0, [r4, #12]
 801d81c:	fb93 f8f8 	sdiv	r8, r3, r8
 801d820:	4442      	add	r2, r8
 801d822:	9203      	str	r2, [sp, #12]
 801d824:	682a      	ldr	r2, [r5, #0]
 801d826:	f7ff ff82 	bl	801d72e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d82a:	4680      	mov	r8, r0
 801d82c:	9600      	str	r6, [sp, #0]
 801d82e:	69a3      	ldr	r3, [r4, #24]
 801d830:	686a      	ldr	r2, [r5, #4]
 801d832:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801d834:	6920      	ldr	r0, [r4, #16]
 801d836:	f7ff ff7a 	bl	801d72e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d83a:	4440      	add	r0, r8
 801d83c:	e7cc      	b.n	801d7d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801d83e:	bf00      	nop
 801d840:	20007324 	.word	0x20007324

0801d844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801d844:	4b07      	ldr	r3, [pc, #28]	; (801d864 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801d846:	781b      	ldrb	r3, [r3, #0]
 801d848:	2b01      	cmp	r3, #1
 801d84a:	d109      	bne.n	801d860 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801d84c:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d850:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d854:	8003      	strh	r3, [r0, #0]
 801d856:	4b04      	ldr	r3, [pc, #16]	; (801d868 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801d858:	881b      	ldrh	r3, [r3, #0]
 801d85a:	3b01      	subs	r3, #1
 801d85c:	1a9b      	subs	r3, r3, r2
 801d85e:	800b      	strh	r3, [r1, #0]
 801d860:	4770      	bx	lr
 801d862:	bf00      	nop
 801d864:	2000730e 	.word	0x2000730e
 801d868:	2000730a 	.word	0x2000730a

0801d86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801d86c:	4b07      	ldr	r3, [pc, #28]	; (801d88c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801d86e:	b510      	push	{r4, lr}
 801d870:	781b      	ldrb	r3, [r3, #0]
 801d872:	2b01      	cmp	r3, #1
 801d874:	d108      	bne.n	801d888 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801d876:	4b06      	ldr	r3, [pc, #24]	; (801d890 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801d878:	880c      	ldrh	r4, [r1, #0]
 801d87a:	881b      	ldrh	r3, [r3, #0]
 801d87c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d880:	3b01      	subs	r3, #1
 801d882:	1b1b      	subs	r3, r3, r4
 801d884:	8003      	strh	r3, [r0, #0]
 801d886:	800a      	strh	r2, [r1, #0]
 801d888:	bd10      	pop	{r4, pc}
 801d88a:	bf00      	nop
 801d88c:	2000730e 	.word	0x2000730e
 801d890:	2000730a 	.word	0x2000730a

0801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801d894:	4b08      	ldr	r3, [pc, #32]	; (801d8b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801d896:	781b      	ldrb	r3, [r3, #0]
 801d898:	2b01      	cmp	r3, #1
 801d89a:	d10c      	bne.n	801d8b6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801d89c:	8803      	ldrh	r3, [r0, #0]
 801d89e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801d8a2:	8842      	ldrh	r2, [r0, #2]
 801d8a4:	8002      	strh	r2, [r0, #0]
 801d8a6:	185a      	adds	r2, r3, r1
 801d8a8:	4b04      	ldr	r3, [pc, #16]	; (801d8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801d8aa:	881b      	ldrh	r3, [r3, #0]
 801d8ac:	1a9b      	subs	r3, r3, r2
 801d8ae:	8043      	strh	r3, [r0, #2]
 801d8b0:	88c3      	ldrh	r3, [r0, #6]
 801d8b2:	80c1      	strh	r1, [r0, #6]
 801d8b4:	8083      	strh	r3, [r0, #4]
 801d8b6:	4770      	bx	lr
 801d8b8:	2000730e 	.word	0x2000730e
 801d8bc:	2000730a 	.word	0x2000730a

0801d8c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801d8c0:	4b07      	ldr	r3, [pc, #28]	; (801d8e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801d8c2:	b510      	push	{r4, lr}
 801d8c4:	781b      	ldrb	r3, [r3, #0]
 801d8c6:	2b01      	cmp	r3, #1
 801d8c8:	d108      	bne.n	801d8dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801d8ca:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d8ce:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d8d2:	8003      	strh	r3, [r0, #0]
 801d8d4:	8893      	ldrh	r3, [r2, #4]
 801d8d6:	3b01      	subs	r3, #1
 801d8d8:	1b1b      	subs	r3, r3, r4
 801d8da:	800b      	strh	r3, [r1, #0]
 801d8dc:	bd10      	pop	{r4, pc}
 801d8de:	bf00      	nop
 801d8e0:	2000730e 	.word	0x2000730e

0801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801d8e4:	4b0a      	ldr	r3, [pc, #40]	; (801d910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801d8e6:	460a      	mov	r2, r1
 801d8e8:	b510      	push	{r4, lr}
 801d8ea:	781b      	ldrb	r3, [r3, #0]
 801d8ec:	2b01      	cmp	r3, #1
 801d8ee:	d10d      	bne.n	801d90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801d8f0:	8881      	ldrh	r1, [r0, #4]
 801d8f2:	8803      	ldrh	r3, [r0, #0]
 801d8f4:	440b      	add	r3, r1
 801d8f6:	4601      	mov	r1, r0
 801d8f8:	3b01      	subs	r3, #1
 801d8fa:	f821 3b02 	strh.w	r3, [r1], #2
 801d8fe:	f7ff ffdf 	bl	801d8c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801d902:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d906:	88c2      	ldrh	r2, [r0, #6]
 801d908:	80c3      	strh	r3, [r0, #6]
 801d90a:	8082      	strh	r2, [r0, #4]
 801d90c:	bd10      	pop	{r4, pc}
 801d90e:	bf00      	nop
 801d910:	2000730e 	.word	0x2000730e

0801d914 <_ZN8touchgfx11Application11getInstanceEv>:
 801d914:	4b01      	ldr	r3, [pc, #4]	; (801d91c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801d916:	6818      	ldr	r0, [r3, #0]
 801d918:	4770      	bx	lr
 801d91a:	bf00      	nop
 801d91c:	20007358 	.word	0x20007358

0801d920 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801d920:	4b03      	ldr	r3, [pc, #12]	; (801d930 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801d922:	2200      	movs	r2, #0
 801d924:	801a      	strh	r2, [r3, #0]
 801d926:	805a      	strh	r2, [r3, #2]
 801d928:	809a      	strh	r2, [r3, #4]
 801d92a:	80da      	strh	r2, [r3, #6]
 801d92c:	4770      	bx	lr
 801d92e:	bf00      	nop
 801d930:	20007350 	.word	0x20007350

0801d934 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d938:	b09d      	sub	sp, #116	; 0x74
 801d93a:	4606      	mov	r6, r0
 801d93c:	4614      	mov	r4, r2
 801d93e:	468a      	mov	sl, r1
 801d940:	a803      	add	r0, sp, #12
 801d942:	461d      	mov	r5, r3
 801d944:	f000 f9ae 	bl	801dca4 <_ZN8touchgfx12TextProviderC1Ev>
 801d948:	6833      	ldr	r3, [r6, #0]
 801d94a:	4630      	mov	r0, r6
 801d94c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801d950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d952:	4798      	blx	r3
 801d954:	6833      	ldr	r3, [r6, #0]
 801d956:	4607      	mov	r7, r0
 801d958:	4630      	mov	r0, r6
 801d95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d95c:	4798      	blx	r3
 801d95e:	462a      	mov	r2, r5
 801d960:	2500      	movs	r5, #0
 801d962:	4621      	mov	r1, r4
 801d964:	9000      	str	r0, [sp, #0]
 801d966:	463b      	mov	r3, r7
 801d968:	462c      	mov	r4, r5
 801d96a:	46a9      	mov	r9, r5
 801d96c:	46a8      	mov	r8, r5
 801d96e:	a803      	add	r0, sp, #12
 801d970:	f000 f9eb 	bl	801dd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d974:	2300      	movs	r3, #0
 801d976:	9302      	str	r3, [sp, #8]
 801d978:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d97c:	429c      	cmp	r4, r3
 801d97e:	d002      	beq.n	801d986 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801d980:	455c      	cmp	r4, fp
 801d982:	bf18      	it	ne
 801d984:	4625      	movne	r5, r4
 801d986:	ab02      	add	r3, sp, #8
 801d988:	4632      	mov	r2, r6
 801d98a:	4651      	mov	r1, sl
 801d98c:	a803      	add	r0, sp, #12
 801d98e:	f000 fcdd 	bl	801e34c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d992:	4604      	mov	r4, r0
 801d994:	b108      	cbz	r0, 801d99a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801d996:	280a      	cmp	r0, #10
 801d998:	d10a      	bne.n	801d9b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801d99a:	45c1      	cmp	r9, r8
 801d99c:	bf38      	it	cc
 801d99e:	46c1      	movcc	r9, r8
 801d9a0:	f04f 0800 	mov.w	r8, #0
 801d9a4:	2c00      	cmp	r4, #0
 801d9a6:	d1e5      	bne.n	801d974 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d9a8:	4648      	mov	r0, r9
 801d9aa:	b01d      	add	sp, #116	; 0x74
 801d9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9b0:	9a02      	ldr	r2, [sp, #8]
 801d9b2:	2a00      	cmp	r2, #0
 801d9b4:	d0de      	beq.n	801d974 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d9b6:	7b57      	ldrb	r7, [r2, #13]
 801d9b8:	4629      	mov	r1, r5
 801d9ba:	6833      	ldr	r3, [r6, #0]
 801d9bc:	007f      	lsls	r7, r7, #1
 801d9be:	8894      	ldrh	r4, [r2, #4]
 801d9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9c2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d9c6:	7a97      	ldrb	r7, [r2, #10]
 801d9c8:	4307      	orrs	r7, r0
 801d9ca:	4630      	mov	r0, r6
 801d9cc:	4798      	blx	r3
 801d9ce:	4438      	add	r0, r7
 801d9d0:	4480      	add	r8, r0
 801d9d2:	fa1f f888 	uxth.w	r8, r8
 801d9d6:	e7e5      	b.n	801d9a4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801d9d8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801d9d8:	b508      	push	{r3, lr}
 801d9da:	6803      	ldr	r3, [r0, #0]
 801d9dc:	68db      	ldr	r3, [r3, #12]
 801d9de:	4798      	blx	r3
 801d9e0:	b128      	cbz	r0, 801d9ee <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801d9e2:	7b43      	ldrb	r3, [r0, #13]
 801d9e4:	7a80      	ldrb	r0, [r0, #10]
 801d9e6:	005b      	lsls	r3, r3, #1
 801d9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d9ec:	4318      	orrs	r0, r3
 801d9ee:	bd08      	pop	{r3, pc}

0801d9f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801d9f0:	b40e      	push	{r1, r2, r3}
 801d9f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9f4:	b09e      	sub	sp, #120	; 0x78
 801d9f6:	4605      	mov	r5, r0
 801d9f8:	ab23      	add	r3, sp, #140	; 0x8c
 801d9fa:	a805      	add	r0, sp, #20
 801d9fc:	f853 4b04 	ldr.w	r4, [r3], #4
 801da00:	9303      	str	r3, [sp, #12]
 801da02:	f000 f94f 	bl	801dca4 <_ZN8touchgfx12TextProviderC1Ev>
 801da06:	682b      	ldr	r3, [r5, #0]
 801da08:	4628      	mov	r0, r5
 801da0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da0c:	4798      	blx	r3
 801da0e:	682b      	ldr	r3, [r5, #0]
 801da10:	4606      	mov	r6, r0
 801da12:	4628      	mov	r0, r5
 801da14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da16:	4798      	blx	r3
 801da18:	4633      	mov	r3, r6
 801da1a:	4621      	mov	r1, r4
 801da1c:	ae1e      	add	r6, sp, #120	; 0x78
 801da1e:	2400      	movs	r4, #0
 801da20:	9000      	str	r0, [sp, #0]
 801da22:	9a03      	ldr	r2, [sp, #12]
 801da24:	a805      	add	r0, sp, #20
 801da26:	f000 f990 	bl	801dd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801da2a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801da2e:	462a      	mov	r2, r5
 801da30:	4633      	mov	r3, r6
 801da32:	4621      	mov	r1, r4
 801da34:	a805      	add	r0, sp, #20
 801da36:	f000 fc89 	bl	801e34c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801da3a:	b300      	cbz	r0, 801da7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801da3c:	280a      	cmp	r0, #10
 801da3e:	d01a      	beq.n	801da76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801da40:	9f04      	ldr	r7, [sp, #16]
 801da42:	b1c7      	cbz	r7, 801da76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801da44:	7b78      	ldrb	r0, [r7, #13]
 801da46:	7a3b      	ldrb	r3, [r7, #8]
 801da48:	00c1      	lsls	r1, r0, #3
 801da4a:	88aa      	ldrh	r2, [r5, #4]
 801da4c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801da50:	4319      	orrs	r1, r3
 801da52:	0643      	lsls	r3, r0, #25
 801da54:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801da58:	bf48      	it	mi
 801da5a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801da5e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801da62:	bf48      	it	mi
 801da64:	b219      	sxthmi	r1, r3
 801da66:	79fb      	ldrb	r3, [r7, #7]
 801da68:	4303      	orrs	r3, r0
 801da6a:	4413      	add	r3, r2
 801da6c:	1a5b      	subs	r3, r3, r1
 801da6e:	b29b      	uxth	r3, r3
 801da70:	42a3      	cmp	r3, r4
 801da72:	bfc8      	it	gt
 801da74:	b21c      	sxthgt	r4, r3
 801da76:	4633      	mov	r3, r6
 801da78:	462a      	mov	r2, r5
 801da7a:	2100      	movs	r1, #0
 801da7c:	e7da      	b.n	801da34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801da7e:	b2a0      	uxth	r0, r4
 801da80:	b01e      	add	sp, #120	; 0x78
 801da82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801da86:	b003      	add	sp, #12
 801da88:	4770      	bx	lr

0801da8a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801da8a:	b40e      	push	{r1, r2, r3}
 801da8c:	b570      	push	{r4, r5, r6, lr}
 801da8e:	b09d      	sub	sp, #116	; 0x74
 801da90:	4604      	mov	r4, r0
 801da92:	ab21      	add	r3, sp, #132	; 0x84
 801da94:	a803      	add	r0, sp, #12
 801da96:	f853 5b04 	ldr.w	r5, [r3], #4
 801da9a:	9302      	str	r3, [sp, #8]
 801da9c:	f000 f902 	bl	801dca4 <_ZN8touchgfx12TextProviderC1Ev>
 801daa0:	6823      	ldr	r3, [r4, #0]
 801daa2:	4620      	mov	r0, r4
 801daa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801daa6:	4798      	blx	r3
 801daa8:	6823      	ldr	r3, [r4, #0]
 801daaa:	4606      	mov	r6, r0
 801daac:	4620      	mov	r0, r4
 801daae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dab0:	2401      	movs	r4, #1
 801dab2:	4798      	blx	r3
 801dab4:	4633      	mov	r3, r6
 801dab6:	9000      	str	r0, [sp, #0]
 801dab8:	4629      	mov	r1, r5
 801daba:	9a02      	ldr	r2, [sp, #8]
 801dabc:	a803      	add	r0, sp, #12
 801dabe:	f000 f944 	bl	801dd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dac2:	a803      	add	r0, sp, #12
 801dac4:	f000 fce2 	bl	801e48c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dac8:	b2a3      	uxth	r3, r4
 801daca:	b138      	cbz	r0, 801dadc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801dacc:	280a      	cmp	r0, #10
 801dace:	a803      	add	r0, sp, #12
 801dad0:	bf04      	itt	eq
 801dad2:	3301      	addeq	r3, #1
 801dad4:	b21c      	sxtheq	r4, r3
 801dad6:	f000 fcd9 	bl	801e48c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dada:	e7f5      	b.n	801dac8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801dadc:	4618      	mov	r0, r3
 801dade:	b01d      	add	sp, #116	; 0x74
 801dae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dae4:	b003      	add	sp, #12
 801dae6:	4770      	bx	lr

0801dae8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801dae8:	b40e      	push	{r1, r2, r3}
 801daea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801daec:	b09e      	sub	sp, #120	; 0x78
 801daee:	4604      	mov	r4, r0
 801daf0:	ab23      	add	r3, sp, #140	; 0x8c
 801daf2:	a805      	add	r0, sp, #20
 801daf4:	f853 5b04 	ldr.w	r5, [r3], #4
 801daf8:	9303      	str	r3, [sp, #12]
 801dafa:	f000 f8d3 	bl	801dca4 <_ZN8touchgfx12TextProviderC1Ev>
 801dafe:	6823      	ldr	r3, [r4, #0]
 801db00:	4620      	mov	r0, r4
 801db02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db04:	4798      	blx	r3
 801db06:	6823      	ldr	r3, [r4, #0]
 801db08:	4606      	mov	r6, r0
 801db0a:	4620      	mov	r0, r4
 801db0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db0e:	4798      	blx	r3
 801db10:	4633      	mov	r3, r6
 801db12:	4629      	mov	r1, r5
 801db14:	9000      	str	r0, [sp, #0]
 801db16:	9a03      	ldr	r2, [sp, #12]
 801db18:	a805      	add	r0, sp, #20
 801db1a:	f000 f916 	bl	801dd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801db1e:	ad1e      	add	r5, sp, #120	; 0x78
 801db20:	2100      	movs	r1, #0
 801db22:	26ff      	movs	r6, #255	; 0xff
 801db24:	4622      	mov	r2, r4
 801db26:	a805      	add	r0, sp, #20
 801db28:	f845 1d68 	str.w	r1, [r5, #-104]!
 801db2c:	462b      	mov	r3, r5
 801db2e:	f000 fc0d 	bl	801e34c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801db32:	b1d8      	cbz	r0, 801db6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801db34:	280a      	cmp	r0, #10
 801db36:	d012      	beq.n	801db5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801db38:	9804      	ldr	r0, [sp, #16]
 801db3a:	b180      	cbz	r0, 801db5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801db3c:	7b47      	ldrb	r7, [r0, #13]
 801db3e:	7922      	ldrb	r2, [r4, #4]
 801db40:	00fb      	lsls	r3, r7, #3
 801db42:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801db46:	7a03      	ldrb	r3, [r0, #8]
 801db48:	430b      	orrs	r3, r1
 801db4a:	0679      	lsls	r1, r7, #25
 801db4c:	bf44      	itt	mi
 801db4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801db52:	b21b      	sxthmi	r3, r3
 801db54:	1ad3      	subs	r3, r2, r3
 801db56:	b2db      	uxtb	r3, r3
 801db58:	429e      	cmp	r6, r3
 801db5a:	bf28      	it	cs
 801db5c:	461e      	movcs	r6, r3
 801db5e:	462b      	mov	r3, r5
 801db60:	4622      	mov	r2, r4
 801db62:	2100      	movs	r1, #0
 801db64:	a805      	add	r0, sp, #20
 801db66:	f000 fbf1 	bl	801e34c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801db6a:	e7e2      	b.n	801db32 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801db6c:	4630      	mov	r0, r6
 801db6e:	b01e      	add	sp, #120	; 0x78
 801db70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801db74:	b003      	add	sp, #12
 801db76:	4770      	bx	lr

0801db78 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801db78:	b530      	push	{r4, r5, lr}
 801db7a:	8083      	strh	r3, [r0, #4]
 801db7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801db80:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801db84:	7183      	strb	r3, [r0, #6]
 801db86:	79c3      	ldrb	r3, [r0, #7]
 801db88:	6101      	str	r1, [r0, #16]
 801db8a:	f365 0306 	bfi	r3, r5, #0, #7
 801db8e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801db92:	8282      	strh	r2, [r0, #20]
 801db94:	f365 13c7 	bfi	r3, r5, #7, #1
 801db98:	71c3      	strb	r3, [r0, #7]
 801db9a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801db9e:	7203      	strb	r3, [r0, #8]
 801dba0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801dba4:	7243      	strb	r3, [r0, #9]
 801dba6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dbaa:	8143      	strh	r3, [r0, #10]
 801dbac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801dbb0:	8183      	strh	r3, [r0, #12]
 801dbb2:	4b01      	ldr	r3, [pc, #4]	; (801dbb8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801dbb4:	6003      	str	r3, [r0, #0]
 801dbb6:	bd30      	pop	{r4, r5, pc}
 801dbb8:	080255a4 	.word	0x080255a4

0801dbbc <_ZNK8touchgfx9ConstFont4findEt>:
 801dbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbbe:	6904      	ldr	r4, [r0, #16]
 801dbc0:	b3bc      	cbz	r4, 801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dbc2:	88a3      	ldrh	r3, [r4, #4]
 801dbc4:	8a82      	ldrh	r2, [r0, #20]
 801dbc6:	1acb      	subs	r3, r1, r3
 801dbc8:	f102 32ff 	add.w	r2, r2, #4294967295
 801dbcc:	d431      	bmi.n	801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dbce:	4293      	cmp	r3, r2
 801dbd0:	dd0c      	ble.n	801dbec <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801dbd2:	230e      	movs	r3, #14
 801dbd4:	fb03 4302 	mla	r3, r3, r2, r4
 801dbd8:	889b      	ldrh	r3, [r3, #4]
 801dbda:	1a5b      	subs	r3, r3, r1
 801dbdc:	1ad3      	subs	r3, r2, r3
 801dbde:	429a      	cmp	r2, r3
 801dbe0:	db27      	blt.n	801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	bfbc      	itt	lt
 801dbe6:	2302      	movlt	r3, #2
 801dbe8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801dbec:	2500      	movs	r5, #0
 801dbee:	260e      	movs	r6, #14
 801dbf0:	4295      	cmp	r5, r2
 801dbf2:	dc1e      	bgt.n	801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dbf4:	fb06 4003 	mla	r0, r6, r3, r4
 801dbf8:	8887      	ldrh	r7, [r0, #4]
 801dbfa:	42b9      	cmp	r1, r7
 801dbfc:	d01a      	beq.n	801dc34 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801dbfe:	d20d      	bcs.n	801dc1c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801dc00:	1e5a      	subs	r2, r3, #1
 801dc02:	4295      	cmp	r5, r2
 801dc04:	dc15      	bgt.n	801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc06:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801dc0a:	1a5b      	subs	r3, r3, r1
 801dc0c:	1ad3      	subs	r3, r2, r3
 801dc0e:	429a      	cmp	r2, r3
 801dc10:	db0f      	blt.n	801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc12:	429d      	cmp	r5, r3
 801dc14:	ddec      	ble.n	801dbf0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dc16:	1953      	adds	r3, r2, r5
 801dc18:	105b      	asrs	r3, r3, #1
 801dc1a:	e7e9      	b.n	801dbf0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dc1c:	1c5d      	adds	r5, r3, #1
 801dc1e:	42aa      	cmp	r2, r5
 801dc20:	db07      	blt.n	801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc22:	8a43      	ldrh	r3, [r0, #18]
 801dc24:	1acb      	subs	r3, r1, r3
 801dc26:	442b      	add	r3, r5
 801dc28:	429d      	cmp	r5, r3
 801dc2a:	dc02      	bgt.n	801dc32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801dc2c:	429a      	cmp	r2, r3
 801dc2e:	dadf      	bge.n	801dbf0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801dc30:	e7f1      	b.n	801dc16 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801dc32:	2000      	movs	r0, #0
 801dc34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dc36 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801dc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc38:	4604      	mov	r4, r0
 801dc3a:	4617      	mov	r7, r2
 801dc3c:	461e      	mov	r6, r3
 801dc3e:	b911      	cbnz	r1, 801dc46 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801dc40:	2500      	movs	r5, #0
 801dc42:	4628      	mov	r0, r5
 801dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc46:	290a      	cmp	r1, #10
 801dc48:	d0fa      	beq.n	801dc40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dc4a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801dc4e:	4291      	cmp	r1, r2
 801dc50:	d0f6      	beq.n	801dc40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dc52:	f242 020b 	movw	r2, #8203	; 0x200b
 801dc56:	4291      	cmp	r1, r2
 801dc58:	d0f2      	beq.n	801dc40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dc5a:	f7ff ffaf 	bl	801dbbc <_ZNK8touchgfx9ConstFont4findEt>
 801dc5e:	4605      	mov	r5, r0
 801dc60:	b950      	cbnz	r0, 801dc78 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801dc62:	6823      	ldr	r3, [r4, #0]
 801dc64:	4620      	mov	r0, r4
 801dc66:	691b      	ldr	r3, [r3, #16]
 801dc68:	4798      	blx	r3
 801dc6a:	4601      	mov	r1, r0
 801dc6c:	4620      	mov	r0, r4
 801dc6e:	f7ff ffa5 	bl	801dbbc <_ZNK8touchgfx9ConstFont4findEt>
 801dc72:	4605      	mov	r5, r0
 801dc74:	2800      	cmp	r0, #0
 801dc76:	d0e3      	beq.n	801dc40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801dc78:	6823      	ldr	r3, [r4, #0]
 801dc7a:	4629      	mov	r1, r5
 801dc7c:	4620      	mov	r0, r4
 801dc7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dc80:	4798      	blx	r3
 801dc82:	6038      	str	r0, [r7, #0]
 801dc84:	6823      	ldr	r3, [r4, #0]
 801dc86:	4620      	mov	r0, r4
 801dc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc8a:	4798      	blx	r3
 801dc8c:	7030      	strb	r0, [r6, #0]
 801dc8e:	e7d8      	b.n	801dc42 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801dc90 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801dc90:	2002      	movs	r0, #2
 801dc92:	4770      	bx	lr

0801dc94 <_ZN8touchgfx12GestureEventD1Ev>:
 801dc94:	4770      	bx	lr

0801dc96 <_ZN8touchgfx12GestureEventD0Ev>:
 801dc96:	b510      	push	{r4, lr}
 801dc98:	4604      	mov	r4, r0
 801dc9a:	210c      	movs	r1, #12
 801dc9c:	f003 f9c0 	bl	8021020 <_ZdlPvj>
 801dca0:	4620      	mov	r0, r4
 801dca2:	bd10      	pop	{r4, pc}

0801dca4 <_ZN8touchgfx12TextProviderC1Ev>:
 801dca4:	b538      	push	{r3, r4, r5, lr}
 801dca6:	2500      	movs	r5, #0
 801dca8:	2302      	movs	r3, #2
 801dcaa:	4604      	mov	r4, r0
 801dcac:	220e      	movs	r2, #14
 801dcae:	7403      	strb	r3, [r0, #16]
 801dcb0:	4629      	mov	r1, r5
 801dcb2:	6145      	str	r5, [r0, #20]
 801dcb4:	7605      	strb	r5, [r0, #24]
 801dcb6:	83c5      	strh	r5, [r0, #30]
 801dcb8:	8405      	strh	r5, [r0, #32]
 801dcba:	86c5      	strh	r5, [r0, #54]	; 0x36
 801dcbc:	8705      	strh	r5, [r0, #56]	; 0x38
 801dcbe:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801dcc0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801dcc4:	e9c0 5500 	strd	r5, r5, [r0]
 801dcc8:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801dccc:	304c      	adds	r0, #76	; 0x4c
 801dcce:	f003 fb4d 	bl	802136c <memset>
 801dcd2:	2301      	movs	r3, #1
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801dcda:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801dcde:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801dce2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801dce6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801dcea:	f7fb f833 	bl	8018d54 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801dcee:	4620      	mov	r0, r4
 801dcf0:	bd38      	pop	{r3, r4, r5, pc}

0801dcf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801dcf2:	b530      	push	{r4, r5, lr}
 801dcf4:	2500      	movs	r5, #0
 801dcf6:	2401      	movs	r4, #1
 801dcf8:	6843      	ldr	r3, [r0, #4]
 801dcfa:	b913      	cbnz	r3, 801dd02 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801dcfc:	6803      	ldr	r3, [r0, #0]
 801dcfe:	b313      	cbz	r3, 801dd46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801dd00:	6043      	str	r3, [r0, #4]
 801dd02:	7e03      	ldrb	r3, [r0, #24]
 801dd04:	b143      	cbz	r3, 801dd18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801dd06:	6943      	ldr	r3, [r0, #20]
 801dd08:	b12b      	cbz	r3, 801dd16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801dd0a:	881a      	ldrh	r2, [r3, #0]
 801dd0c:	b11a      	cbz	r2, 801dd16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801dd0e:	1c9a      	adds	r2, r3, #2
 801dd10:	6142      	str	r2, [r0, #20]
 801dd12:	8818      	ldrh	r0, [r3, #0]
 801dd14:	bd30      	pop	{r4, r5, pc}
 801dd16:	7605      	strb	r5, [r0, #24]
 801dd18:	6843      	ldr	r3, [r0, #4]
 801dd1a:	8819      	ldrh	r1, [r3, #0]
 801dd1c:	b199      	cbz	r1, 801dd46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801dd1e:	1c9a      	adds	r2, r3, #2
 801dd20:	2902      	cmp	r1, #2
 801dd22:	6042      	str	r2, [r0, #4]
 801dd24:	d1f5      	bne.n	801dd12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801dd26:	7c03      	ldrb	r3, [r0, #16]
 801dd28:	2b01      	cmp	r3, #1
 801dd2a:	d8e5      	bhi.n	801dcf8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801dd2c:	1c5a      	adds	r2, r3, #1
 801dd2e:	3302      	adds	r3, #2
 801dd30:	7402      	strb	r2, [r0, #16]
 801dd32:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801dd36:	6143      	str	r3, [r0, #20]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d0dd      	beq.n	801dcf8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801dd3c:	881b      	ldrh	r3, [r3, #0]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d0da      	beq.n	801dcf8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801dd42:	7604      	strb	r4, [r0, #24]
 801dd44:	e7d8      	b.n	801dcf8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801dd46:	2000      	movs	r0, #0
 801dd48:	e7e4      	b.n	801dd14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801dd4a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801dd4a:	6001      	str	r1, [r0, #0]
 801dd4c:	2100      	movs	r1, #0
 801dd4e:	b430      	push	{r4, r5}
 801dd50:	6041      	str	r1, [r0, #4]
 801dd52:	6815      	ldr	r5, [r2, #0]
 801dd54:	6085      	str	r5, [r0, #8]
 801dd56:	6852      	ldr	r2, [r2, #4]
 801dd58:	6443      	str	r3, [r0, #68]	; 0x44
 801dd5a:	9b02      	ldr	r3, [sp, #8]
 801dd5c:	60c2      	str	r2, [r0, #12]
 801dd5e:	7401      	strb	r1, [r0, #16]
 801dd60:	6141      	str	r1, [r0, #20]
 801dd62:	7601      	strb	r1, [r0, #24]
 801dd64:	8701      	strh	r1, [r0, #56]	; 0x38
 801dd66:	8401      	strh	r1, [r0, #32]
 801dd68:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801dd6c:	6483      	str	r3, [r0, #72]	; 0x48
 801dd6e:	bc30      	pop	{r4, r5}
 801dd70:	f7fa bff0 	b.w	8018d54 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801dd74 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd76:	4605      	mov	r5, r0
 801dd78:	4608      	mov	r0, r1
 801dd7a:	b1f1      	cbz	r1, 801ddba <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801dd7c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801dd80:	460b      	mov	r3, r1
 801dd82:	f101 0708 	add.w	r7, r1, #8
 801dd86:	4622      	mov	r2, r4
 801dd88:	6818      	ldr	r0, [r3, #0]
 801dd8a:	3308      	adds	r3, #8
 801dd8c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801dd90:	4626      	mov	r6, r4
 801dd92:	42bb      	cmp	r3, r7
 801dd94:	c603      	stmia	r6!, {r0, r1}
 801dd96:	4634      	mov	r4, r6
 801dd98:	d1f6      	bne.n	801dd88 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801dd9a:	6818      	ldr	r0, [r3, #0]
 801dd9c:	6030      	str	r0, [r6, #0]
 801dd9e:	4610      	mov	r0, r2
 801dda0:	889b      	ldrh	r3, [r3, #4]
 801dda2:	80b3      	strh	r3, [r6, #4]
 801dda4:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801dda8:	015b      	lsls	r3, r3, #5
 801ddaa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ddae:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801ddb2:	430b      	orrs	r3, r1
 801ddb4:	425b      	negs	r3, r3
 801ddb6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ddba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ddbc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ddbc:	b538      	push	{r3, r4, r5, lr}
 801ddbe:	460c      	mov	r4, r1
 801ddc0:	6811      	ldr	r1, [r2, #0]
 801ddc2:	4610      	mov	r0, r2
 801ddc4:	68cd      	ldr	r5, [r1, #12]
 801ddc6:	4619      	mov	r1, r3
 801ddc8:	47a8      	blx	r5
 801ddca:	2800      	cmp	r0, #0
 801ddcc:	bf08      	it	eq
 801ddce:	4620      	moveq	r0, r4
 801ddd0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ddd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ddd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddd6:	4604      	mov	r4, r0
 801ddd8:	4615      	mov	r5, r2
 801ddda:	4608      	mov	r0, r1
 801dddc:	b93a      	cbnz	r2, 801ddee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ddde:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801dde2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801dde6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801ddea:	4628      	mov	r0, r5
 801ddec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddee:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ddf2:	8893      	ldrh	r3, [r2, #4]
 801ddf4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ddf8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ddfc:	79ee      	ldrb	r6, [r5, #7]
 801ddfe:	4316      	orrs	r6, r2
 801de00:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801de04:	189a      	adds	r2, r3, r2
 801de06:	b2b7      	uxth	r7, r6
 801de08:	b291      	uxth	r1, r2
 801de0a:	291d      	cmp	r1, #29
 801de0c:	f200 8084 	bhi.w	801df18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801de10:	2201      	movs	r2, #1
 801de12:	10f6      	asrs	r6, r6, #3
 801de14:	408a      	lsls	r2, r1
 801de16:	4978      	ldr	r1, [pc, #480]	; (801dff8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801de18:	420a      	tst	r2, r1
 801de1a:	d12e      	bne.n	801de7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801de1c:	f412 7f60 	tst.w	r2, #896	; 0x380
 801de20:	d07a      	beq.n	801df18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801de22:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801de26:	462b      	mov	r3, r5
 801de28:	f105 0e08 	add.w	lr, r5, #8
 801de2c:	4615      	mov	r5, r2
 801de2e:	6818      	ldr	r0, [r3, #0]
 801de30:	3308      	adds	r3, #8
 801de32:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801de36:	4694      	mov	ip, r2
 801de38:	4573      	cmp	r3, lr
 801de3a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801de3e:	4662      	mov	r2, ip
 801de40:	d1f5      	bne.n	801de2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801de42:	6818      	ldr	r0, [r3, #0]
 801de44:	f8cc 0000 	str.w	r0, [ip]
 801de48:	889b      	ldrh	r3, [r3, #4]
 801de4a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801de4e:	b2b3      	uxth	r3, r6
 801de50:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801de54:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801de58:	1aca      	subs	r2, r1, r3
 801de5a:	1bcf      	subs	r7, r1, r7
 801de5c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801de60:	b292      	uxth	r2, r2
 801de62:	1afb      	subs	r3, r7, r3
 801de64:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801de68:	10d2      	asrs	r2, r2, #3
 801de6a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801de6e:	4302      	orrs	r2, r0
 801de70:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801de74:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801de78:	e7b7      	b.n	801ddea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801de7a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801de7c:	b92b      	cbnz	r3, 801de8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801de7e:	4b5f      	ldr	r3, [pc, #380]	; (801dffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801de80:	21c0      	movs	r1, #192	; 0xc0
 801de82:	4a5f      	ldr	r2, [pc, #380]	; (801e000 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801de84:	485f      	ldr	r0, [pc, #380]	; (801e004 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801de86:	f003 f8f9 	bl	802107c <__assert_func>
 801de8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801de8c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801de90:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801de92:	f640 6333 	movw	r3, #3635	; 0xe33
 801de96:	4299      	cmp	r1, r3
 801de98:	d110      	bne.n	801debc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801de9a:	6803      	ldr	r3, [r0, #0]
 801de9c:	68db      	ldr	r3, [r3, #12]
 801de9e:	4798      	blx	r3
 801dea0:	7b41      	ldrb	r1, [r0, #13]
 801dea2:	00cb      	lsls	r3, r1, #3
 801dea4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dea8:	7a03      	ldrb	r3, [r0, #8]
 801deaa:	0648      	lsls	r0, r1, #25
 801deac:	ea43 0302 	orr.w	r3, r3, r2
 801deb0:	bf44      	itt	mi
 801deb2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801deb6:	b21b      	sxthmi	r3, r3
 801deb8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801debc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801dec0:	462a      	mov	r2, r5
 801dec2:	f105 0c08 	add.w	ip, r5, #8
 801dec6:	443b      	add	r3, r7
 801dec8:	4433      	add	r3, r6
 801deca:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801dece:	b29b      	uxth	r3, r3
 801ded0:	4635      	mov	r5, r6
 801ded2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ded6:	6810      	ldr	r0, [r2, #0]
 801ded8:	3208      	adds	r2, #8
 801deda:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801dede:	4637      	mov	r7, r6
 801dee0:	4562      	cmp	r2, ip
 801dee2:	c703      	stmia	r7!, {r0, r1}
 801dee4:	463e      	mov	r6, r7
 801dee6:	d1f6      	bne.n	801ded6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801dee8:	6810      	ldr	r0, [r2, #0]
 801deea:	6038      	str	r0, [r7, #0]
 801deec:	8892      	ldrh	r2, [r2, #4]
 801deee:	80ba      	strh	r2, [r7, #4]
 801def0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801def4:	10db      	asrs	r3, r3, #3
 801def6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801defa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801defe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801df02:	4313      	orrs	r3, r2
 801df04:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801df08:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801df0c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801df10:	1a9b      	subs	r3, r3, r2
 801df12:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801df16:	e768      	b.n	801ddea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801df18:	f023 0204 	bic.w	r2, r3, #4
 801df1c:	f640 611b 	movw	r1, #3611	; 0xe1b
 801df20:	428a      	cmp	r2, r1
 801df22:	d003      	beq.n	801df2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801df24:	f640 621d 	movw	r2, #3613	; 0xe1d
 801df28:	4293      	cmp	r3, r2
 801df2a:	d120      	bne.n	801df6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801df2c:	3b01      	subs	r3, #1
 801df2e:	4602      	mov	r2, r0
 801df30:	4629      	mov	r1, r5
 801df32:	4620      	mov	r0, r4
 801df34:	b29b      	uxth	r3, r3
 801df36:	f7ff ff41 	bl	801ddbc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801df3a:	7b41      	ldrb	r1, [r0, #13]
 801df3c:	00cb      	lsls	r3, r1, #3
 801df3e:	0649      	lsls	r1, r1, #25
 801df40:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801df44:	7a03      	ldrb	r3, [r0, #8]
 801df46:	ea43 0302 	orr.w	r3, r3, r2
 801df4a:	bf44      	itt	mi
 801df4c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801df50:	b21b      	sxthmi	r3, r3
 801df52:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801df56:	7b6b      	ldrb	r3, [r5, #13]
 801df58:	7aaa      	ldrb	r2, [r5, #10]
 801df5a:	005b      	lsls	r3, r3, #1
 801df5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801df60:	4313      	orrs	r3, r2
 801df62:	115a      	asrs	r2, r3, #5
 801df64:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801df68:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801df6c:	e035      	b.n	801dfda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801df6e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801df72:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801df76:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801df7a:	7a2a      	ldrb	r2, [r5, #8]
 801df7c:	ea42 0201 	orr.w	r2, r2, r1
 801df80:	f640 6109 	movw	r1, #3593	; 0xe09
 801df84:	bf1c      	itt	ne
 801df86:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801df8a:	b212      	sxthne	r2, r2
 801df8c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801df90:	f023 0210 	bic.w	r2, r3, #16
 801df94:	428a      	cmp	r2, r1
 801df96:	d003      	beq.n	801dfa0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801df98:	f640 6213 	movw	r2, #3603	; 0xe13
 801df9c:	4293      	cmp	r3, r2
 801df9e:	d129      	bne.n	801dff4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801dfa0:	7b6e      	ldrb	r6, [r5, #13]
 801dfa2:	4629      	mov	r1, r5
 801dfa4:	0076      	lsls	r6, r6, #1
 801dfa6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801dfaa:	7aae      	ldrb	r6, [r5, #10]
 801dfac:	4316      	orrs	r6, r2
 801dfae:	f640 6213 	movw	r2, #3603	; 0xe13
 801dfb2:	4293      	cmp	r3, r2
 801dfb4:	4602      	mov	r2, r0
 801dfb6:	4620      	mov	r0, r4
 801dfb8:	bf16      	itet	ne
 801dfba:	f103 33ff 	addne.w	r3, r3, #4294967295
 801dfbe:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801dfc2:	b29b      	uxthne	r3, r3
 801dfc4:	f7ff fefa 	bl	801ddbc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dfc8:	7b43      	ldrb	r3, [r0, #13]
 801dfca:	7a82      	ldrb	r2, [r0, #10]
 801dfcc:	005b      	lsls	r3, r3, #1
 801dfce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dfd2:	4313      	orrs	r3, r2
 801dfd4:	1af6      	subs	r6, r6, r3
 801dfd6:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801dfda:	7b69      	ldrb	r1, [r5, #13]
 801dfdc:	00cb      	lsls	r3, r1, #3
 801dfde:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dfe2:	7a2b      	ldrb	r3, [r5, #8]
 801dfe4:	4313      	orrs	r3, r2
 801dfe6:	064a      	lsls	r2, r1, #25
 801dfe8:	bf44      	itt	mi
 801dfea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dfee:	b21b      	sxthmi	r3, r3
 801dff0:	1bdb      	subs	r3, r3, r7
 801dff2:	e73f      	b.n	801de74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801dff4:	2300      	movs	r3, #0
 801dff6:	e7b7      	b.n	801df68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801dff8:	3fc00079 	.word	0x3fc00079
 801dffc:	08025608 	.word	0x08025608
 801e000:	0802587a 	.word	0x0802587a
 801e004:	08025611 	.word	0x08025611

0801e008 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801e008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e00c:	4604      	mov	r4, r0
 801e00e:	b942      	cbnz	r2, 801e022 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801e010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e014:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801e018:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801e01c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e020:	e046      	b.n	801e0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e022:	7b51      	ldrb	r1, [r2, #13]
 801e024:	8893      	ldrh	r3, [r2, #4]
 801e026:	010f      	lsls	r7, r1, #4
 801e028:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801e02c:	79d7      	ldrb	r7, [r2, #7]
 801e02e:	4307      	orrs	r7, r0
 801e030:	2f04      	cmp	r7, #4
 801e032:	b2bd      	uxth	r5, r7
 801e034:	bfcc      	ite	gt
 801e036:	08bf      	lsrgt	r7, r7, #2
 801e038:	2701      	movle	r7, #1
 801e03a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801e03e:	f200 80ab 	bhi.w	801e198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801e042:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801e046:	4283      	cmp	r3, r0
 801e048:	d216      	bcs.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e04a:	f240 605b 	movw	r0, #1627	; 0x65b
 801e04e:	4283      	cmp	r3, r0
 801e050:	d859      	bhi.n	801e106 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801e052:	f240 6057 	movw	r0, #1623	; 0x657
 801e056:	4283      	cmp	r3, r0
 801e058:	d20e      	bcs.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e05a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e05e:	d24a      	bcs.n	801e0f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801e060:	f240 604e 	movw	r0, #1614	; 0x64e
 801e064:	4283      	cmp	r3, r0
 801e066:	d207      	bcs.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e068:	f240 601a 	movw	r0, #1562	; 0x61a
 801e06c:	4283      	cmp	r3, r0
 801e06e:	d02a      	beq.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e070:	d821      	bhi.n	801e0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801e072:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801e076:	d35b      	bcc.n	801e130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e078:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801e07c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e080:	f040 80d0 	bne.w	801e224 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801e084:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801e088:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e08c:	f040 80ca 	bne.w	801e224 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801e090:	00cb      	lsls	r3, r1, #3
 801e092:	0649      	lsls	r1, r1, #25
 801e094:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e098:	7a13      	ldrb	r3, [r2, #8]
 801e09a:	ea43 0300 	orr.w	r3, r3, r0
 801e09e:	bf44      	itt	mi
 801e0a0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e0a4:	b21b      	sxthmi	r3, r3
 801e0a6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e0aa:	1b5d      	subs	r5, r3, r5
 801e0ac:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e0b0:	4610      	mov	r0, r2
 801e0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e0b6:	f240 604b 	movw	r0, #1611	; 0x64b
 801e0ba:	4283      	cmp	r3, r0
 801e0bc:	d338      	bcc.n	801e130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e0be:	f240 604c 	movw	r0, #1612	; 0x64c
 801e0c2:	4283      	cmp	r3, r0
 801e0c4:	d9d8      	bls.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e0c6:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801e0ca:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801e0ce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e0d2:	f040 80f2 	bne.w	801e2ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801e0d6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e0da:	f040 80ee 	bne.w	801e2ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801e0de:	00cb      	lsls	r3, r1, #3
 801e0e0:	064e      	lsls	r6, r1, #25
 801e0e2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e0e6:	7a13      	ldrb	r3, [r2, #8]
 801e0e8:	ea43 0300 	orr.w	r3, r3, r0
 801e0ec:	bf44      	itt	mi
 801e0ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e0f2:	b21b      	sxthmi	r3, r3
 801e0f4:	e7d9      	b.n	801e0aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801e0f6:	f240 6054 	movw	r0, #1620	; 0x654
 801e0fa:	4283      	cmp	r3, r0
 801e0fc:	d8e3      	bhi.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e0fe:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e102:	d9e0      	bls.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e104:	e7b8      	b.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e106:	f240 6074 	movw	r0, #1652	; 0x674
 801e10a:	4283      	cmp	r3, r0
 801e10c:	d0b4      	beq.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e10e:	d82d      	bhi.n	801e16c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801e110:	f240 605e 	movw	r0, #1630	; 0x65e
 801e114:	4283      	cmp	r3, r0
 801e116:	d804      	bhi.n	801e122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801e118:	f240 605d 	movw	r0, #1629	; 0x65d
 801e11c:	4283      	cmp	r3, r0
 801e11e:	d3d2      	bcc.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e120:	e7aa      	b.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e122:	f240 605f 	movw	r0, #1631	; 0x65f
 801e126:	4283      	cmp	r3, r0
 801e128:	d0cd      	beq.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e12a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801e12e:	d0a3      	beq.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e130:	00cb      	lsls	r3, r1, #3
 801e132:	0649      	lsls	r1, r1, #25
 801e134:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e138:	7a13      	ldrb	r3, [r2, #8]
 801e13a:	ea43 0300 	orr.w	r3, r3, r0
 801e13e:	bf44      	itt	mi
 801e140:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e144:	b21b      	sxthmi	r3, r3
 801e146:	1b5d      	subs	r5, r3, r5
 801e148:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e14c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e150:	7b53      	ldrb	r3, [r2, #13]
 801e152:	015b      	lsls	r3, r3, #5
 801e154:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e158:	7993      	ldrb	r3, [r2, #6]
 801e15a:	430b      	orrs	r3, r1
 801e15c:	2105      	movs	r1, #5
 801e15e:	005b      	lsls	r3, r3, #1
 801e160:	fb93 f3f1 	sdiv	r3, r3, r1
 801e164:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801e168:	440b      	add	r3, r1
 801e16a:	e757      	b.n	801e01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801e16c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801e170:	4283      	cmp	r3, r0
 801e172:	d809      	bhi.n	801e188 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801e174:	f240 60df 	movw	r0, #1759	; 0x6df
 801e178:	4283      	cmp	r3, r0
 801e17a:	f4bf af7d 	bcs.w	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e17e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801e182:	2b05      	cmp	r3, #5
 801e184:	d8d4      	bhi.n	801e130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e186:	e777      	b.n	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e188:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801e18c:	4283      	cmp	r3, r0
 801e18e:	d09a      	beq.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e190:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801e194:	4283      	cmp	r3, r0
 801e196:	e7ca      	b.n	801e12e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801e198:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801e19c:	d22b      	bcs.n	801e1f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801e19e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801e1a2:	4283      	cmp	r3, r0
 801e1a4:	d28f      	bcs.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e1a6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e1aa:	4283      	cmp	r3, r0
 801e1ac:	d816      	bhi.n	801e1dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801e1ae:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801e1b2:	4283      	cmp	r3, r0
 801e1b4:	f4bf af60 	bcs.w	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e1b8:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801e1bc:	4283      	cmp	r3, r0
 801e1be:	d80a      	bhi.n	801e1d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801e1c0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801e1c4:	4283      	cmp	r3, r0
 801e1c6:	f4bf af57 	bcs.w	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e1ca:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801e1ce:	4283      	cmp	r3, r0
 801e1d0:	f43f af79 	beq.w	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e1d4:	e7ac      	b.n	801e130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e1d6:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801e1da:	e7f8      	b.n	801e1ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801e1dc:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801e1e0:	4283      	cmp	r3, r0
 801e1e2:	d802      	bhi.n	801e1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801e1e4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e1e8:	e798      	b.n	801e11c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801e1ea:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801e1ee:	4283      	cmp	r3, r0
 801e1f0:	f47f af42 	bne.w	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e1f4:	e767      	b.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e1f6:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801e1fa:	4283      	cmp	r3, r0
 801e1fc:	f43f af63 	beq.w	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e200:	d802      	bhi.n	801e208 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801e202:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801e206:	e7f2      	b.n	801e1ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801e208:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801e20c:	4283      	cmp	r3, r0
 801e20e:	d805      	bhi.n	801e21c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801e210:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801e214:	4283      	cmp	r3, r0
 801e216:	f4ff af2f 	bcc.w	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e21a:	e754      	b.n	801e0c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e21c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801e220:	4283      	cmp	r3, r0
 801e222:	e7af      	b.n	801e184 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801e224:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801e228:	4617      	mov	r7, r2
 801e22a:	f102 0808 	add.w	r8, r2, #8
 801e22e:	4666      	mov	r6, ip
 801e230:	6838      	ldr	r0, [r7, #0]
 801e232:	3708      	adds	r7, #8
 801e234:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801e238:	46e6      	mov	lr, ip
 801e23a:	4547      	cmp	r7, r8
 801e23c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801e240:	46f4      	mov	ip, lr
 801e242:	d1f5      	bne.n	801e230 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801e244:	6838      	ldr	r0, [r7, #0]
 801e246:	f8ce 0000 	str.w	r0, [lr]
 801e24a:	88b9      	ldrh	r1, [r7, #4]
 801e24c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801e250:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e254:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e258:	d009      	beq.n	801e26e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801e25a:	7b51      	ldrb	r1, [r2, #13]
 801e25c:	7992      	ldrb	r2, [r2, #6]
 801e25e:	0149      	lsls	r1, r1, #5
 801e260:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e264:	4311      	orrs	r1, r2
 801e266:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e26a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e26e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e272:	d00d      	beq.n	801e290 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801e274:	442b      	add	r3, r5
 801e276:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e27a:	b29b      	uxth	r3, r3
 801e27c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e280:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e284:	10db      	asrs	r3, r3, #3
 801e286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e28a:	4313      	orrs	r3, r2
 801e28c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e290:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e294:	00cb      	lsls	r3, r1, #3
 801e296:	064f      	lsls	r7, r1, #25
 801e298:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e29c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e2a0:	ea43 0302 	orr.w	r3, r3, r2
 801e2a4:	bf44      	itt	mi
 801e2a6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e2aa:	b21b      	sxthmi	r3, r3
 801e2ac:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e2b0:	1b5d      	subs	r5, r3, r5
 801e2b2:	4632      	mov	r2, r6
 801e2b4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e2b8:	e6fa      	b.n	801e0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e2ba:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801e2be:	4694      	mov	ip, r2
 801e2c0:	f102 0908 	add.w	r9, r2, #8
 801e2c4:	4676      	mov	r6, lr
 801e2c6:	f8dc 0000 	ldr.w	r0, [ip]
 801e2ca:	f10c 0c08 	add.w	ip, ip, #8
 801e2ce:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801e2d2:	46f0      	mov	r8, lr
 801e2d4:	45cc      	cmp	ip, r9
 801e2d6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e2da:	46c6      	mov	lr, r8
 801e2dc:	d1f3      	bne.n	801e2c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801e2de:	f8dc 0000 	ldr.w	r0, [ip]
 801e2e2:	f8c8 0000 	str.w	r0, [r8]
 801e2e6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801e2ea:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e2ee:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e2f2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e2f6:	d009      	beq.n	801e30c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801e2f8:	7b51      	ldrb	r1, [r2, #13]
 801e2fa:	7992      	ldrb	r2, [r2, #6]
 801e2fc:	0149      	lsls	r1, r1, #5
 801e2fe:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e302:	4311      	orrs	r1, r2
 801e304:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e308:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e30c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e310:	d00d      	beq.n	801e32e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801e312:	1bdb      	subs	r3, r3, r7
 801e314:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e318:	b29b      	uxth	r3, r3
 801e31a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e31e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e322:	10db      	asrs	r3, r3, #3
 801e324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e328:	4313      	orrs	r3, r2
 801e32a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e32e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e332:	00cb      	lsls	r3, r1, #3
 801e334:	0648      	lsls	r0, r1, #25
 801e336:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e33a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e33e:	ea43 0302 	orr.w	r3, r3, r2
 801e342:	bf44      	itt	mi
 801e344:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e348:	b21b      	sxthmi	r3, r3
 801e34a:	e7b1      	b.n	801e2b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801e34c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e350:	461e      	mov	r6, r3
 801e352:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e354:	4604      	mov	r4, r0
 801e356:	4617      	mov	r7, r2
 801e358:	b92b      	cbnz	r3, 801e366 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801e35a:	4b25      	ldr	r3, [pc, #148]	; (801e3f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801e35c:	21c0      	movs	r1, #192	; 0xc0
 801e35e:	4a25      	ldr	r2, [pc, #148]	; (801e3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801e360:	4825      	ldr	r0, [pc, #148]	; (801e3f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801e362:	f002 fe8b 	bl	802107c <__assert_func>
 801e366:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e368:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e36c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e370:	f7fa fc4a 	bl	8018c08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e374:	4605      	mov	r5, r0
 801e376:	b918      	cbnz	r0, 801e380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801e378:	6030      	str	r0, [r6, #0]
 801e37a:	4628      	mov	r0, r5
 801e37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e380:	683b      	ldr	r3, [r7, #0]
 801e382:	4601      	mov	r1, r0
 801e384:	4638      	mov	r0, r7
 801e386:	68db      	ldr	r3, [r3, #12]
 801e388:	4798      	blx	r3
 801e38a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e38e:	4602      	mov	r2, r0
 801e390:	6030      	str	r0, [r6, #0]
 801e392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e396:	d213      	bcs.n	801e3c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801e398:	4643      	mov	r3, r8
 801e39a:	4639      	mov	r1, r7
 801e39c:	4620      	mov	r0, r4
 801e39e:	f7ff fe33 	bl	801e008 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e3a2:	6030      	str	r0, [r6, #0]
 801e3a4:	6833      	ldr	r3, [r6, #0]
 801e3a6:	b143      	cbz	r3, 801e3ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801e3a8:	7b5a      	ldrb	r2, [r3, #13]
 801e3aa:	7a9b      	ldrb	r3, [r3, #10]
 801e3ac:	0052      	lsls	r2, r2, #1
 801e3ae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e3b2:	4313      	orrs	r3, r2
 801e3b4:	bf0c      	ite	eq
 801e3b6:	2301      	moveq	r3, #1
 801e3b8:	2300      	movne	r3, #0
 801e3ba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e3be:	e7dc      	b.n	801e37a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801e3c0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e3c4:	b29b      	uxth	r3, r3
 801e3c6:	2b7f      	cmp	r3, #127	; 0x7f
 801e3c8:	d804      	bhi.n	801e3d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801e3ca:	4639      	mov	r1, r7
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f7ff fd01 	bl	801ddd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e3d2:	e7e6      	b.n	801e3a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e3d4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d0e3      	beq.n	801e3a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e3dc:	f640 1302 	movw	r3, #2306	; 0x902
 801e3e0:	429d      	cmp	r5, r3
 801e3e2:	d1df      	bne.n	801e3a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e3e4:	4601      	mov	r1, r0
 801e3e6:	4620      	mov	r0, r4
 801e3e8:	f7ff fcc4 	bl	801dd74 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e3ec:	e7d9      	b.n	801e3a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e3ee:	bf00      	nop
 801e3f0:	08025608 	.word	0x08025608
 801e3f4:	0802587a 	.word	0x0802587a
 801e3f8:	08025611 	.word	0x08025611

0801e3fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801e3fc:	b510      	push	{r4, lr}
 801e3fe:	4604      	mov	r4, r0
 801e400:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801e404:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e406:	b9d9      	cbnz	r1, 801e440 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801e408:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e40a:	2b0a      	cmp	r3, #10
 801e40c:	d037      	beq.n	801e47e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e40e:	4620      	mov	r0, r4
 801e410:	f7ff fc6f 	bl	801dcf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801e414:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e416:	2b09      	cmp	r3, #9
 801e418:	d906      	bls.n	801e428 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801e41a:	4b19      	ldr	r3, [pc, #100]	; (801e480 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801e41c:	f44f 7182 	mov.w	r1, #260	; 0x104
 801e420:	4a18      	ldr	r2, [pc, #96]	; (801e484 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801e422:	4819      	ldr	r0, [pc, #100]	; (801e488 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801e424:	f002 fe2a 	bl	802107c <__assert_func>
 801e428:	1c5a      	adds	r2, r3, #1
 801e42a:	8722      	strh	r2, [r4, #56]	; 0x38
 801e42c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e42e:	4413      	add	r3, r2
 801e430:	b29b      	uxth	r3, r3
 801e432:	2b09      	cmp	r3, #9
 801e434:	bf88      	it	hi
 801e436:	3b0a      	subhi	r3, #10
 801e438:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e43c:	8458      	strh	r0, [r3, #34]	; 0x22
 801e43e:	e7e3      	b.n	801e408 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801e440:	2b0a      	cmp	r3, #10
 801e442:	d01c      	beq.n	801e47e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e444:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801e446:	3901      	subs	r1, #1
 801e448:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801e44c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801e44e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801e452:	1c51      	adds	r1, r2, #1
 801e454:	b289      	uxth	r1, r1
 801e456:	2901      	cmp	r1, #1
 801e458:	bf8a      	itet	hi
 801e45a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e45e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801e460:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801e462:	2b09      	cmp	r3, #9
 801e464:	d8d9      	bhi.n	801e41a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801e466:	1c5a      	adds	r2, r3, #1
 801e468:	8722      	strh	r2, [r4, #56]	; 0x38
 801e46a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e46c:	4413      	add	r3, r2
 801e46e:	b29b      	uxth	r3, r3
 801e470:	2b09      	cmp	r3, #9
 801e472:	bf88      	it	hi
 801e474:	3b0a      	subhi	r3, #10
 801e476:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e47a:	8458      	strh	r0, [r3, #34]	; 0x22
 801e47c:	e7c0      	b.n	801e400 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801e47e:	bd10      	pop	{r4, pc}
 801e480:	0802563d 	.word	0x0802563d
 801e484:	080259d0 	.word	0x080259d0
 801e488:	08025611 	.word	0x08025611

0801e48c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801e48c:	b538      	push	{r3, r4, r5, lr}
 801e48e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801e490:	4604      	mov	r4, r0
 801e492:	b92a      	cbnz	r2, 801e4a0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801e494:	4b13      	ldr	r3, [pc, #76]	; (801e4e4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801e496:	21d5      	movs	r1, #213	; 0xd5
 801e498:	4a13      	ldr	r2, [pc, #76]	; (801e4e8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801e49a:	4814      	ldr	r0, [pc, #80]	; (801e4ec <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801e49c:	f002 fdee 	bl	802107c <__assert_func>
 801e4a0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e4a2:	3a01      	subs	r2, #1
 801e4a4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801e4a8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801e4aa:	8702      	strh	r2, [r0, #56]	; 0x38
 801e4ac:	1c5a      	adds	r2, r3, #1
 801e4ae:	b292      	uxth	r2, r2
 801e4b0:	2a09      	cmp	r2, #9
 801e4b2:	bf8a      	itet	hi
 801e4b4:	3b09      	subhi	r3, #9
 801e4b6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801e4b8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801e4ba:	f7ff ff9f 	bl	801e3fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e4be:	8c23      	ldrh	r3, [r4, #32]
 801e4c0:	2b01      	cmp	r3, #1
 801e4c2:	bf9c      	itt	ls
 801e4c4:	3301      	addls	r3, #1
 801e4c6:	8423      	strhls	r3, [r4, #32]
 801e4c8:	8be3      	ldrh	r3, [r4, #30]
 801e4ca:	b90b      	cbnz	r3, 801e4d0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801e4cc:	2302      	movs	r3, #2
 801e4ce:	83e3      	strh	r3, [r4, #30]
 801e4d0:	8be3      	ldrh	r3, [r4, #30]
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	3b01      	subs	r3, #1
 801e4d6:	b29b      	uxth	r3, r3
 801e4d8:	83e3      	strh	r3, [r4, #30]
 801e4da:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e4de:	8365      	strh	r5, [r4, #26]
 801e4e0:	bd38      	pop	{r3, r4, r5, pc}
 801e4e2:	bf00      	nop
 801e4e4:	08025608 	.word	0x08025608
 801e4e8:	08025925 	.word	0x08025925
 801e4ec:	08025611 	.word	0x08025611

0801e4f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801e4f0:	428a      	cmp	r2, r1
 801e4f2:	b538      	push	{r3, r4, r5, lr}
 801e4f4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801e4f6:	d90c      	bls.n	801e512 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801e4f8:	b92c      	cbnz	r4, 801e506 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801e4fa:	4b1c      	ldr	r3, [pc, #112]	; (801e56c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801e4fc:	21e1      	movs	r1, #225	; 0xe1
 801e4fe:	4a1c      	ldr	r2, [pc, #112]	; (801e570 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801e500:	481c      	ldr	r0, [pc, #112]	; (801e574 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801e502:	f002 fdbb 	bl	802107c <__assert_func>
 801e506:	3c01      	subs	r4, #1
 801e508:	4b1b      	ldr	r3, [pc, #108]	; (801e578 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801e50a:	4a1c      	ldr	r2, [pc, #112]	; (801e57c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801e50c:	21c5      	movs	r1, #197	; 0xc5
 801e50e:	8704      	strh	r4, [r0, #56]	; 0x38
 801e510:	e7f6      	b.n	801e500 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e512:	428c      	cmp	r4, r1
 801e514:	d203      	bcs.n	801e51e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801e516:	4b1a      	ldr	r3, [pc, #104]	; (801e580 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801e518:	21cb      	movs	r1, #203	; 0xcb
 801e51a:	4a1a      	ldr	r2, [pc, #104]	; (801e584 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801e51c:	e7f0      	b.n	801e500 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e51e:	1a64      	subs	r4, r4, r1
 801e520:	250a      	movs	r5, #10
 801e522:	8704      	strh	r4, [r0, #56]	; 0x38
 801e524:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801e526:	4421      	add	r1, r4
 801e528:	b289      	uxth	r1, r1
 801e52a:	2909      	cmp	r1, #9
 801e52c:	bf88      	it	hi
 801e52e:	390a      	subhi	r1, #10
 801e530:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e532:	b1ba      	cbz	r2, 801e564 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801e534:	3a01      	subs	r2, #1
 801e536:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801e538:	b292      	uxth	r2, r2
 801e53a:	2909      	cmp	r1, #9
 801e53c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801e540:	d903      	bls.n	801e54a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801e542:	4b11      	ldr	r3, [pc, #68]	; (801e588 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801e544:	21e6      	movs	r1, #230	; 0xe6
 801e546:	4a11      	ldr	r2, [pc, #68]	; (801e58c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801e548:	e7da      	b.n	801e500 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e54a:	3101      	adds	r1, #1
 801e54c:	8701      	strh	r1, [r0, #56]	; 0x38
 801e54e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e550:	b901      	cbnz	r1, 801e554 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801e552:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e554:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e556:	3901      	subs	r1, #1
 801e558:	b289      	uxth	r1, r1
 801e55a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e55c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e560:	844c      	strh	r4, [r1, #34]	; 0x22
 801e562:	e7e6      	b.n	801e532 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801e564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e568:	f7ff bf48 	b.w	801e3fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e56c:	08025608 	.word	0x08025608
 801e570:	080256fe 	.word	0x080256fe
 801e574:	08025611 	.word	0x08025611
 801e578:	08025649 	.word	0x08025649
 801e57c:	080257a8 	.word	0x080257a8
 801e580:	08025657 	.word	0x08025657
 801e584:	08025a7f 	.word	0x08025a7f
 801e588:	08025663 	.word	0x08025663
 801e58c:	08025676 	.word	0x08025676

0801e590 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e590:	3a01      	subs	r2, #1
 801e592:	b570      	push	{r4, r5, r6, lr}
 801e594:	b292      	uxth	r2, r2
 801e596:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801e59a:	42b2      	cmp	r2, r6
 801e59c:	d019      	beq.n	801e5d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801e59e:	8c04      	ldrh	r4, [r0, #32]
 801e5a0:	f831 5b02 	ldrh.w	r5, [r1], #2
 801e5a4:	4294      	cmp	r4, r2
 801e5a6:	d805      	bhi.n	801e5b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801e5a8:	4b19      	ldr	r3, [pc, #100]	; (801e610 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e5aa:	4a1a      	ldr	r2, [pc, #104]	; (801e614 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801e5ac:	21c5      	movs	r1, #197	; 0xc5
 801e5ae:	481a      	ldr	r0, [pc, #104]	; (801e618 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801e5b0:	f002 fd64 	bl	802107c <__assert_func>
 801e5b4:	8bc4      	ldrh	r4, [r0, #30]
 801e5b6:	4414      	add	r4, r2
 801e5b8:	3a01      	subs	r2, #1
 801e5ba:	b2a4      	uxth	r4, r4
 801e5bc:	b292      	uxth	r2, r2
 801e5be:	2c01      	cmp	r4, #1
 801e5c0:	bf88      	it	hi
 801e5c2:	3c02      	subhi	r4, #2
 801e5c4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e5c8:	8b64      	ldrh	r4, [r4, #26]
 801e5ca:	42ac      	cmp	r4, r5
 801e5cc:	d0e5      	beq.n	801e59a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801e5ce:	2000      	movs	r0, #0
 801e5d0:	bd70      	pop	{r4, r5, r6, pc}
 801e5d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e5d6:	2400      	movs	r4, #0
 801e5d8:	4413      	add	r3, r2
 801e5da:	b2a2      	uxth	r2, r4
 801e5dc:	429a      	cmp	r2, r3
 801e5de:	da14      	bge.n	801e60a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801e5e0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801e5e2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e5e6:	4296      	cmp	r6, r2
 801e5e8:	d802      	bhi.n	801e5f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801e5ea:	4b09      	ldr	r3, [pc, #36]	; (801e610 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e5ec:	4a0b      	ldr	r2, [pc, #44]	; (801e61c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801e5ee:	e7dd      	b.n	801e5ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801e5f0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e5f2:	3401      	adds	r4, #1
 801e5f4:	4432      	add	r2, r6
 801e5f6:	b292      	uxth	r2, r2
 801e5f8:	2a09      	cmp	r2, #9
 801e5fa:	bf88      	it	hi
 801e5fc:	3a0a      	subhi	r2, #10
 801e5fe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e602:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e604:	42aa      	cmp	r2, r5
 801e606:	d0e8      	beq.n	801e5da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801e608:	e7e1      	b.n	801e5ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801e60a:	2001      	movs	r0, #1
 801e60c:	e7e0      	b.n	801e5d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801e60e:	bf00      	nop
 801e610:	08025649 	.word	0x08025649
 801e614:	08025b03 	.word	0x08025b03
 801e618:	08025611 	.word	0x08025611
 801e61c:	080257a8 	.word	0x080257a8

0801e620 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e624:	4605      	mov	r5, r0
 801e626:	4616      	mov	r6, r2
 801e628:	1c8c      	adds	r4, r1, #2
 801e62a:	8809      	ldrh	r1, [r1, #0]
 801e62c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e630:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e634:	42b3      	cmp	r3, r6
 801e636:	d124      	bne.n	801e682 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e638:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e63c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e640:	f001 070f 	and.w	r7, r1, #15
 801e644:	4652      	mov	r2, sl
 801e646:	f8cd 8000 	str.w	r8, [sp]
 801e64a:	464b      	mov	r3, r9
 801e64c:	4621      	mov	r1, r4
 801e64e:	4628      	mov	r0, r5
 801e650:	f7ff ff9e 	bl	801e590 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e654:	4683      	mov	fp, r0
 801e656:	b168      	cbz	r0, 801e674 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e658:	eb0a 0109 	add.w	r1, sl, r9
 801e65c:	463a      	mov	r2, r7
 801e65e:	4628      	mov	r0, r5
 801e660:	4441      	add	r1, r8
 801e662:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e666:	4649      	mov	r1, r9
 801e668:	f7ff ff42 	bl	801e4f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e66c:	4658      	mov	r0, fp
 801e66e:	b003      	add	sp, #12
 801e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e674:	eb07 010a 	add.w	r1, r7, sl
 801e678:	4449      	add	r1, r9
 801e67a:	4441      	add	r1, r8
 801e67c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e680:	e7d2      	b.n	801e628 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e682:	f04f 0b00 	mov.w	fp, #0
 801e686:	e7f1      	b.n	801e66c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e688 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e688:	b570      	push	{r4, r5, r6, lr}
 801e68a:	8810      	ldrh	r0, [r2, #0]
 801e68c:	4298      	cmp	r0, r3
 801e68e:	d817      	bhi.n	801e6c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e690:	1e48      	subs	r0, r1, #1
 801e692:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e696:	4298      	cmp	r0, r3
 801e698:	d312      	bcc.n	801e6c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e69a:	2400      	movs	r4, #0
 801e69c:	428c      	cmp	r4, r1
 801e69e:	d20f      	bcs.n	801e6c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e6a0:	1860      	adds	r0, r4, r1
 801e6a2:	1040      	asrs	r0, r0, #1
 801e6a4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e6a8:	0085      	lsls	r5, r0, #2
 801e6aa:	42b3      	cmp	r3, r6
 801e6ac:	d902      	bls.n	801e6b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e6ae:	3001      	adds	r0, #1
 801e6b0:	b284      	uxth	r4, r0
 801e6b2:	e7f3      	b.n	801e69c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e6b4:	d201      	bcs.n	801e6ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e6b6:	b281      	uxth	r1, r0
 801e6b8:	e7f0      	b.n	801e69c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e6ba:	442a      	add	r2, r5
 801e6bc:	8850      	ldrh	r0, [r2, #2]
 801e6be:	bd70      	pop	{r4, r5, r6, pc}
 801e6c0:	2000      	movs	r0, #0
 801e6c2:	e7fc      	b.n	801e6be <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e6c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6c8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e6ca:	4604      	mov	r4, r0
 801e6cc:	260b      	movs	r6, #11
 801e6ce:	886f      	ldrh	r7, [r5, #2]
 801e6d0:	087f      	lsrs	r7, r7, #1
 801e6d2:	3e01      	subs	r6, #1
 801e6d4:	d01b      	beq.n	801e70e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e6d6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e6d8:	b92b      	cbnz	r3, 801e6e6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801e6da:	4b0e      	ldr	r3, [pc, #56]	; (801e714 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801e6dc:	21c0      	movs	r1, #192	; 0xc0
 801e6de:	4a0e      	ldr	r2, [pc, #56]	; (801e718 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801e6e0:	480e      	ldr	r0, [pc, #56]	; (801e71c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801e6e2:	f002 fccb 	bl	802107c <__assert_func>
 801e6e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e6e8:	462a      	mov	r2, r5
 801e6ea:	4639      	mov	r1, r7
 801e6ec:	4620      	mov	r0, r4
 801e6ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e6f2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e6f6:	4643      	mov	r3, r8
 801e6f8:	f7ff ffc6 	bl	801e688 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e6fc:	b138      	cbz	r0, 801e70e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e6fe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e702:	4642      	mov	r2, r8
 801e704:	4620      	mov	r0, r4
 801e706:	f7ff ff8b 	bl	801e620 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e70a:	2800      	cmp	r0, #0
 801e70c:	d1e1      	bne.n	801e6d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e712:	bf00      	nop
 801e714:	08025608 	.word	0x08025608
 801e718:	0802587a 	.word	0x0802587a
 801e71c:	08025611 	.word	0x08025611

0801e720 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e720:	b570      	push	{r4, r5, r6, lr}
 801e722:	694a      	ldr	r2, [r1, #20]
 801e724:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e726:	684b      	ldr	r3, [r1, #4]
 801e728:	1b54      	subs	r4, r2, r5
 801e72a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e72c:	f000 8106 	beq.w	801e93c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e730:	1b9b      	subs	r3, r3, r6
 801e732:	d003      	beq.n	801e73c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e734:	4363      	muls	r3, r4
 801e736:	2210      	movs	r2, #16
 801e738:	fb93 f3f2 	sdiv	r3, r3, r2
 801e73c:	680c      	ldr	r4, [r1, #0]
 801e73e:	698a      	ldr	r2, [r1, #24]
 801e740:	1b65      	subs	r5, r4, r5
 801e742:	f000 80fd 	beq.w	801e940 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e746:	1b92      	subs	r2, r2, r6
 801e748:	d003      	beq.n	801e752 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e74a:	436a      	muls	r2, r5
 801e74c:	2410      	movs	r4, #16
 801e74e:	fb92 f2f4 	sdiv	r2, r2, r4
 801e752:	1a9b      	subs	r3, r3, r2
 801e754:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801e97c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e75c:	460a      	mov	r2, r1
 801e75e:	ee07 3a90 	vmov	s15, r3
 801e762:	f100 040c 	add.w	r4, r0, #12
 801e766:	4603      	mov	r3, r0
 801e768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e76c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e770:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e774:	eeb1 6a43 	vneg.f32	s12, s6
 801e778:	edd2 7a02 	vldr	s15, [r2, #8]
 801e77c:	3214      	adds	r2, #20
 801e77e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e782:	ece3 6a01 	vstmia	r3!, {s13}
 801e786:	429c      	cmp	r4, r3
 801e788:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e78c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e790:	edc3 7a02 	vstr	s15, [r3, #8]
 801e794:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e798:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e79c:	edc3 7a05 	vstr	s15, [r3, #20]
 801e7a0:	d1ea      	bne.n	801e778 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e7a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e7a4:	698b      	ldr	r3, [r1, #24]
 801e7a6:	edd0 4a02 	vldr	s9, [r0, #8]
 801e7aa:	1a9b      	subs	r3, r3, r2
 801e7ac:	edd0 3a00 	vldr	s7, [r0]
 801e7b0:	edd0 6a01 	vldr	s13, [r0, #4]
 801e7b4:	ee07 3a90 	vmov	s15, r3
 801e7b8:	684b      	ldr	r3, [r1, #4]
 801e7ba:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e7be:	ed90 5a05 	vldr	s10, [r0, #20]
 801e7c2:	1a9b      	subs	r3, r3, r2
 801e7c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e7c8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e7cc:	ed90 2a03 	vldr	s4, [r0, #12]
 801e7d0:	ee07 3a10 	vmov	s14, r3
 801e7d4:	edd0 5a04 	vldr	s11, [r0, #16]
 801e7d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e7dc:	ed90 1a07 	vldr	s2, [r0, #28]
 801e7e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e7e4:	edd0 2a06 	vldr	s5, [r0, #24]
 801e7e8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e7ec:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e7f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e7f4:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e7f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e7fc:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e800:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e804:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e806:	694a      	ldr	r2, [r1, #20]
 801e808:	1b13      	subs	r3, r2, r4
 801e80a:	ee07 3a10 	vmov	s14, r3
 801e80e:	680b      	ldr	r3, [r1, #0]
 801e810:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e814:	1b1b      	subs	r3, r3, r4
 801e816:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e81a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e81e:	ee07 3a10 	vmov	s14, r3
 801e822:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e826:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e82a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e82e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e832:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e836:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e838:	698b      	ldr	r3, [r1, #24]
 801e83a:	1a9b      	subs	r3, r3, r2
 801e83c:	ee06 3a90 	vmov	s13, r3
 801e840:	684b      	ldr	r3, [r1, #4]
 801e842:	1a9b      	subs	r3, r3, r2
 801e844:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e848:	ee07 3a10 	vmov	s14, r3
 801e84c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e850:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e854:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e858:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e85c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e860:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e864:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e868:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e86a:	694a      	ldr	r2, [r1, #20]
 801e86c:	1b13      	subs	r3, r2, r4
 801e86e:	ee07 3a10 	vmov	s14, r3
 801e872:	680b      	ldr	r3, [r1, #0]
 801e874:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e878:	1b1b      	subs	r3, r3, r4
 801e87a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e87e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e882:	ee07 3a10 	vmov	s14, r3
 801e886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e88a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e88e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e892:	edd0 5a08 	vldr	s11, [r0, #32]
 801e896:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e89a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e89e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e8a2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801e8a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e8a8:	698b      	ldr	r3, [r1, #24]
 801e8aa:	1a9b      	subs	r3, r3, r2
 801e8ac:	ee07 3a10 	vmov	s14, r3
 801e8b0:	684b      	ldr	r3, [r1, #4]
 801e8b2:	1a9b      	subs	r3, r3, r2
 801e8b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e8b8:	ee01 3a90 	vmov	s3, r3
 801e8bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e8c0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e8c4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e8c8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e8cc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e8d0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e8d4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e8d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e8da:	694a      	ldr	r2, [r1, #20]
 801e8dc:	1b13      	subs	r3, r2, r4
 801e8de:	ee03 3a10 	vmov	s6, r3
 801e8e2:	680b      	ldr	r3, [r1, #0]
 801e8e4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e8e8:	1b1b      	subs	r3, r3, r4
 801e8ea:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e8ee:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e8f2:	ee03 3a10 	vmov	s6, r3
 801e8f6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e8fa:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e8fe:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e902:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e906:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e90a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801e90e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e912:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e91a:	dd13      	ble.n	801e944 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e91c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e920:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e924:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e926:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e92a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e932:	dd15      	ble.n	801e960 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e938:	6403      	str	r3, [r0, #64]	; 0x40
 801e93a:	bd70      	pop	{r4, r5, r6, pc}
 801e93c:	4623      	mov	r3, r4
 801e93e:	e6fd      	b.n	801e73c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e940:	462a      	mov	r2, r5
 801e942:	e706      	b.n	801e752 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e944:	d502      	bpl.n	801e94c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e946:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e94a:	e7e9      	b.n	801e920 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e94c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e950:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e954:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e95c:	dade      	bge.n	801e91c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e95e:	e7f2      	b.n	801e946 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e960:	d502      	bpl.n	801e968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e962:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e966:	e7e7      	b.n	801e938 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e968:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e96c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e970:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e978:	dadc      	bge.n	801e934 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e97a:	e7f2      	b.n	801e962 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e97c:	3d800000 	.word	0x3d800000

0801e980 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e984:	2714      	movs	r7, #20
 801e986:	435f      	muls	r7, r3
 801e988:	eb02 0c07 	add.w	ip, r2, r7
 801e98c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e990:	f115 0e0f 	adds.w	lr, r5, #15
 801e994:	d433      	bmi.n	801e9fe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 801e996:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801e99a:	9c08      	ldr	r4, [sp, #32]
 801e99c:	2614      	movs	r6, #20
 801e99e:	f8c0 e014 	str.w	lr, [r0, #20]
 801e9a2:	4366      	muls	r6, r4
 801e9a4:	eb02 0806 	add.w	r8, r2, r6
 801e9a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e9ac:	f115 040f 	adds.w	r4, r5, #15
 801e9b0:	d431      	bmi.n	801ea16 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 801e9b2:	1124      	asrs	r4, r4, #4
 801e9b4:	eba4 040e 	sub.w	r4, r4, lr
 801e9b8:	6184      	str	r4, [r0, #24]
 801e9ba:	2c00      	cmp	r4, #0
 801e9bc:	f000 80aa 	beq.w	801eb14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 801e9c0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801e9c4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e9c8:	5995      	ldr	r5, [r2, r6]
 801e9ca:	eba4 0809 	sub.w	r8, r4, r9
 801e9ce:	59d4      	ldr	r4, [r2, r7]
 801e9d0:	eba5 0a04 	sub.w	sl, r5, r4
 801e9d4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801e9d8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801e9dc:	2e00      	cmp	r6, #0
 801e9de:	fb0e fe05 	mul.w	lr, lr, r5
 801e9e2:	fb0a ee19 	mls	lr, sl, r9, lr
 801e9e6:	fb08 e404 	mla	r4, r8, r4, lr
 801e9ea:	f104 34ff 	add.w	r4, r4, #4294967295
 801e9ee:	4434      	add	r4, r6
 801e9f0:	dc1d      	bgt.n	801ea2e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 801e9f2:	4b5b      	ldr	r3, [pc, #364]	; (801eb60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 801e9f4:	21f7      	movs	r1, #247	; 0xf7
 801e9f6:	4a5b      	ldr	r2, [pc, #364]	; (801eb64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 801e9f8:	485b      	ldr	r0, [pc, #364]	; (801eb68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 801e9fa:	f002 fb3f 	bl	802107c <__assert_func>
 801e9fe:	2410      	movs	r4, #16
 801ea00:	f1c5 0501 	rsb	r5, r5, #1
 801ea04:	fb9e fef4 	sdiv	lr, lr, r4
 801ea08:	f015 050f 	ands.w	r5, r5, #15
 801ea0c:	bf18      	it	ne
 801ea0e:	2501      	movne	r5, #1
 801ea10:	ebae 0e05 	sub.w	lr, lr, r5
 801ea14:	e7c1      	b.n	801e99a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 801ea16:	f04f 0910 	mov.w	r9, #16
 801ea1a:	f1c5 0501 	rsb	r5, r5, #1
 801ea1e:	fb94 f4f9 	sdiv	r4, r4, r9
 801ea22:	f015 050f 	ands.w	r5, r5, #15
 801ea26:	bf18      	it	ne
 801ea28:	2501      	movne	r5, #1
 801ea2a:	1b64      	subs	r4, r4, r5
 801ea2c:	e7c2      	b.n	801e9b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 801ea2e:	2c00      	cmp	r4, #0
 801ea30:	db72      	blt.n	801eb18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 801ea32:	fb94 fef6 	sdiv	lr, r4, r6
 801ea36:	fb06 441e 	mls	r4, r6, lr, r4
 801ea3a:	f8c0 e000 	str.w	lr, [r0]
 801ea3e:	6104      	str	r4, [r0, #16]
 801ea40:	2d00      	cmp	r5, #0
 801ea42:	db7b      	blt.n	801eb3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 801ea44:	fb95 f4f6 	sdiv	r4, r5, r6
 801ea48:	fb06 5514 	mls	r5, r6, r4, r5
 801ea4c:	6044      	str	r4, [r0, #4]
 801ea4e:	6085      	str	r5, [r0, #8]
 801ea50:	60c6      	str	r6, [r0, #12]
 801ea52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ea56:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801ea5a:	6945      	ldr	r5, [r0, #20]
 801ea5c:	59d2      	ldr	r2, [r2, r7]
 801ea5e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801ea62:	eddf 6a42 	vldr	s13, [pc, #264]	; 801eb6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 801ea66:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801ea6a:	ee07 4a10 	vmov	s14, r4
 801ea6e:	6804      	ldr	r4, [r0, #0]
 801ea70:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801ea74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea78:	ee07 2a90 	vmov	s15, r2
 801ea7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ea80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ea88:	edd3 6a00 	vldr	s13, [r3]
 801ea8c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ea90:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801ea94:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ea98:	edc0 6a07 	vstr	s13, [r0, #28]
 801ea9c:	edd0 6a01 	vldr	s13, [r0, #4]
 801eaa0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801eaa4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801eaa8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801eaac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801eab0:	ed80 6a08 	vstr	s12, [r0, #32]
 801eab4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801eab6:	6242      	str	r2, [r0, #36]	; 0x24
 801eab8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801eabc:	ed93 6a03 	vldr	s12, [r3, #12]
 801eac0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801eac4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801eac8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801eacc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801ead0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801ead4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801ead8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801eadc:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801eae0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801eae2:	6302      	str	r2, [r0, #48]	; 0x30
 801eae4:	ed93 6a06 	vldr	s12, [r3, #24]
 801eae8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801eaec:	eea5 6a87 	vfma.f32	s12, s11, s14
 801eaf0:	eeb0 7a46 	vmov.f32	s14, s12
 801eaf4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801eaf8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801eafc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801eb00:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801eb04:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801eb08:	eee6 7a87 	vfma.f32	s15, s13, s14
 801eb0c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801eb10:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801eb12:	63c3      	str	r3, [r0, #60]	; 0x3c
 801eb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb18:	4264      	negs	r4, r4
 801eb1a:	fb94 fef6 	sdiv	lr, r4, r6
 801eb1e:	f1ce 0800 	rsb	r8, lr, #0
 801eb22:	fb06 441e 	mls	r4, r6, lr, r4
 801eb26:	f8c0 8000 	str.w	r8, [r0]
 801eb2a:	6104      	str	r4, [r0, #16]
 801eb2c:	2c00      	cmp	r4, #0
 801eb2e:	d087      	beq.n	801ea40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 801eb30:	ea6f 0e0e 	mvn.w	lr, lr
 801eb34:	1b34      	subs	r4, r6, r4
 801eb36:	f8c0 e000 	str.w	lr, [r0]
 801eb3a:	e780      	b.n	801ea3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 801eb3c:	426d      	negs	r5, r5
 801eb3e:	fb95 f4f6 	sdiv	r4, r5, r6
 801eb42:	f1c4 0e00 	rsb	lr, r4, #0
 801eb46:	fb06 5514 	mls	r5, r6, r4, r5
 801eb4a:	f8c0 e004 	str.w	lr, [r0, #4]
 801eb4e:	6085      	str	r5, [r0, #8]
 801eb50:	2d00      	cmp	r5, #0
 801eb52:	f43f af7d 	beq.w	801ea50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 801eb56:	43e4      	mvns	r4, r4
 801eb58:	1b75      	subs	r5, r6, r5
 801eb5a:	6044      	str	r4, [r0, #4]
 801eb5c:	e777      	b.n	801ea4e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 801eb5e:	bf00      	nop
 801eb60:	08025bd4 	.word	0x08025bd4
 801eb64:	08025c13 	.word	0x08025c13
 801eb68:	08025be4 	.word	0x08025be4
 801eb6c:	3d800000 	.word	0x3d800000

0801eb70 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801eb70:	4b06      	ldr	r3, [pc, #24]	; (801eb8c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801eb72:	881a      	ldrh	r2, [r3, #0]
 801eb74:	4282      	cmp	r2, r0
 801eb76:	d807      	bhi.n	801eb88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801eb78:	4b05      	ldr	r3, [pc, #20]	; (801eb90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801eb7a:	881b      	ldrh	r3, [r3, #0]
 801eb7c:	4413      	add	r3, r2
 801eb7e:	4298      	cmp	r0, r3
 801eb80:	bfac      	ite	ge
 801eb82:	2000      	movge	r0, #0
 801eb84:	2001      	movlt	r0, #1
 801eb86:	4770      	bx	lr
 801eb88:	2000      	movs	r0, #0
 801eb8a:	4770      	bx	lr
 801eb8c:	20007364 	.word	0x20007364
 801eb90:	20007366 	.word	0x20007366

0801eb94 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801eb94:	b508      	push	{r3, lr}
 801eb96:	4601      	mov	r1, r0
 801eb98:	f7ff ffea 	bl	801eb70 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eb9c:	b118      	cbz	r0, 801eba6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801eb9e:	4b02      	ldr	r3, [pc, #8]	; (801eba8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801eba6:	bd08      	pop	{r3, pc}
 801eba8:	2000735c 	.word	0x2000735c

0801ebac <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ebac:	b508      	push	{r3, lr}
 801ebae:	4b17      	ldr	r3, [pc, #92]	; (801ec0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ebb0:	6819      	ldr	r1, [r3, #0]
 801ebb2:	b931      	cbnz	r1, 801ebc2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ebb4:	4b16      	ldr	r3, [pc, #88]	; (801ec10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ebb6:	f240 4184 	movw	r1, #1156	; 0x484
 801ebba:	4a16      	ldr	r2, [pc, #88]	; (801ec14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ebbc:	4816      	ldr	r0, [pc, #88]	; (801ec18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ebbe:	f002 fa5d 	bl	802107c <__assert_func>
 801ebc2:	4a16      	ldr	r2, [pc, #88]	; (801ec1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ebc4:	8803      	ldrh	r3, [r0, #0]
 801ebc6:	8812      	ldrh	r2, [r2, #0]
 801ebc8:	4293      	cmp	r3, r2
 801ebca:	d204      	bcs.n	801ebd6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ebcc:	2214      	movs	r2, #20
 801ebce:	fb02 1303 	mla	r3, r2, r3, r1
 801ebd2:	8918      	ldrh	r0, [r3, #8]
 801ebd4:	bd08      	pop	{r3, pc}
 801ebd6:	4912      	ldr	r1, [pc, #72]	; (801ec20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 801ebd8:	8809      	ldrh	r1, [r1, #0]
 801ebda:	4411      	add	r1, r2
 801ebdc:	428b      	cmp	r3, r1
 801ebde:	da06      	bge.n	801ebee <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ebe0:	1a9b      	subs	r3, r3, r2
 801ebe2:	4a10      	ldr	r2, [pc, #64]	; (801ec24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 801ebe4:	210e      	movs	r1, #14
 801ebe6:	6812      	ldr	r2, [r2, #0]
 801ebe8:	fb01 2303 	mla	r3, r1, r3, r2
 801ebec:	e7f1      	b.n	801ebd2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ebee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ebf2:	4293      	cmp	r3, r2
 801ebf4:	d107      	bne.n	801ec06 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 801ebf6:	4b0c      	ldr	r3, [pc, #48]	; (801ec28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 801ebf8:	781b      	ldrb	r3, [r3, #0]
 801ebfa:	b913      	cbnz	r3, 801ec02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 801ebfc:	4b0b      	ldr	r3, [pc, #44]	; (801ec2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 801ebfe:	8818      	ldrh	r0, [r3, #0]
 801ec00:	e7e8      	b.n	801ebd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ec02:	4b0b      	ldr	r3, [pc, #44]	; (801ec30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 801ec04:	e7fb      	b.n	801ebfe <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 801ec06:	2000      	movs	r0, #0
 801ec08:	e7e4      	b.n	801ebd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ec0a:	bf00      	nop
 801ec0c:	20007368 	.word	0x20007368
 801ec10:	08025cb1 	.word	0x08025cb1
 801ec14:	08025d54 	.word	0x08025d54
 801ec18:	08025c8c 	.word	0x08025c8c
 801ec1c:	20007364 	.word	0x20007364
 801ec20:	20007366 	.word	0x20007366
 801ec24:	20007360 	.word	0x20007360
 801ec28:	2000730e 	.word	0x2000730e
 801ec2c:	20007310 	.word	0x20007310
 801ec30:	20007312 	.word	0x20007312

0801ec34 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ec34:	b508      	push	{r3, lr}
 801ec36:	4b17      	ldr	r3, [pc, #92]	; (801ec94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ec38:	6819      	ldr	r1, [r3, #0]
 801ec3a:	b931      	cbnz	r1, 801ec4a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801ec3c:	4b16      	ldr	r3, [pc, #88]	; (801ec98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ec3e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 801ec42:	4a16      	ldr	r2, [pc, #88]	; (801ec9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ec44:	4816      	ldr	r0, [pc, #88]	; (801eca0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ec46:	f002 fa19 	bl	802107c <__assert_func>
 801ec4a:	4a16      	ldr	r2, [pc, #88]	; (801eca4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ec4c:	8803      	ldrh	r3, [r0, #0]
 801ec4e:	8812      	ldrh	r2, [r2, #0]
 801ec50:	4293      	cmp	r3, r2
 801ec52:	d204      	bcs.n	801ec5e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ec54:	2214      	movs	r2, #20
 801ec56:	fb02 1303 	mla	r3, r2, r3, r1
 801ec5a:	8958      	ldrh	r0, [r3, #10]
 801ec5c:	bd08      	pop	{r3, pc}
 801ec5e:	4912      	ldr	r1, [pc, #72]	; (801eca8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 801ec60:	8809      	ldrh	r1, [r1, #0]
 801ec62:	4411      	add	r1, r2
 801ec64:	428b      	cmp	r3, r1
 801ec66:	da06      	bge.n	801ec76 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ec68:	1a9b      	subs	r3, r3, r2
 801ec6a:	4a10      	ldr	r2, [pc, #64]	; (801ecac <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 801ec6c:	210e      	movs	r1, #14
 801ec6e:	6812      	ldr	r2, [r2, #0]
 801ec70:	fb01 2303 	mla	r3, r1, r3, r2
 801ec74:	e7f1      	b.n	801ec5a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ec76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ec7a:	4293      	cmp	r3, r2
 801ec7c:	d107      	bne.n	801ec8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 801ec7e:	4b0c      	ldr	r3, [pc, #48]	; (801ecb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 801ec80:	781b      	ldrb	r3, [r3, #0]
 801ec82:	b913      	cbnz	r3, 801ec8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 801ec84:	4b0b      	ldr	r3, [pc, #44]	; (801ecb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 801ec86:	8818      	ldrh	r0, [r3, #0]
 801ec88:	e7e8      	b.n	801ec5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ec8a:	4b0b      	ldr	r3, [pc, #44]	; (801ecb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 801ec8c:	e7fb      	b.n	801ec86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 801ec8e:	2000      	movs	r0, #0
 801ec90:	e7e4      	b.n	801ec5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ec92:	bf00      	nop
 801ec94:	20007368 	.word	0x20007368
 801ec98:	08025cb1 	.word	0x08025cb1
 801ec9c:	08025d80 	.word	0x08025d80
 801eca0:	08025c8c 	.word	0x08025c8c
 801eca4:	20007364 	.word	0x20007364
 801eca8:	20007366 	.word	0x20007366
 801ecac:	20007360 	.word	0x20007360
 801ecb0:	2000730e 	.word	0x2000730e
 801ecb4:	20007312 	.word	0x20007312
 801ecb8:	20007310 	.word	0x20007310

0801ecbc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ecbc:	4b23      	ldr	r3, [pc, #140]	; (801ed4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ecbe:	b510      	push	{r4, lr}
 801ecc0:	681c      	ldr	r4, [r3, #0]
 801ecc2:	b934      	cbnz	r4, 801ecd2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ecc4:	4b22      	ldr	r3, [pc, #136]	; (801ed50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ecc6:	f240 41ac 	movw	r1, #1196	; 0x4ac
 801ecca:	4a22      	ldr	r2, [pc, #136]	; (801ed54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801eccc:	4822      	ldr	r0, [pc, #136]	; (801ed58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ecce:	f002 f9d5 	bl	802107c <__assert_func>
 801ecd2:	4a22      	ldr	r2, [pc, #136]	; (801ed5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ecd4:	880b      	ldrh	r3, [r1, #0]
 801ecd6:	8812      	ldrh	r2, [r2, #0]
 801ecd8:	4293      	cmp	r3, r2
 801ecda:	d211      	bcs.n	801ed00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ecdc:	2214      	movs	r2, #20
 801ecde:	fb02 4303 	mla	r3, r2, r3, r4
 801ece2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ece6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ecea:	8a1a      	ldrh	r2, [r3, #16]
 801ecec:	8a5b      	ldrh	r3, [r3, #18]
 801ecee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ecf2:	8004      	strh	r4, [r0, #0]
 801ecf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ecf8:	8041      	strh	r1, [r0, #2]
 801ecfa:	8082      	strh	r2, [r0, #4]
 801ecfc:	80c3      	strh	r3, [r0, #6]
 801ecfe:	e00e      	b.n	801ed1e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ed00:	4917      	ldr	r1, [pc, #92]	; (801ed60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ed02:	8809      	ldrh	r1, [r1, #0]
 801ed04:	4411      	add	r1, r2
 801ed06:	428b      	cmp	r3, r1
 801ed08:	da0a      	bge.n	801ed20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ed0a:	1a9b      	subs	r3, r3, r2
 801ed0c:	4a15      	ldr	r2, [pc, #84]	; (801ed64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ed0e:	210e      	movs	r1, #14
 801ed10:	6812      	ldr	r2, [r2, #0]
 801ed12:	fb01 2303 	mla	r3, r1, r3, r2
 801ed16:	681a      	ldr	r2, [r3, #0]
 801ed18:	6002      	str	r2, [r0, #0]
 801ed1a:	685a      	ldr	r2, [r3, #4]
 801ed1c:	6042      	str	r2, [r0, #4]
 801ed1e:	bd10      	pop	{r4, pc}
 801ed20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ed24:	4293      	cmp	r3, r2
 801ed26:	d10b      	bne.n	801ed40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ed28:	4b0f      	ldr	r3, [pc, #60]	; (801ed68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ed2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ed2e:	4b0f      	ldr	r3, [pc, #60]	; (801ed6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ed30:	8081      	strh	r1, [r0, #4]
 801ed32:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ed36:	2300      	movs	r3, #0
 801ed38:	80c2      	strh	r2, [r0, #6]
 801ed3a:	8003      	strh	r3, [r0, #0]
 801ed3c:	8043      	strh	r3, [r0, #2]
 801ed3e:	e7ee      	b.n	801ed1e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ed40:	2300      	movs	r3, #0
 801ed42:	8003      	strh	r3, [r0, #0]
 801ed44:	8043      	strh	r3, [r0, #2]
 801ed46:	8083      	strh	r3, [r0, #4]
 801ed48:	e7d8      	b.n	801ecfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801ed4a:	bf00      	nop
 801ed4c:	20007368 	.word	0x20007368
 801ed50:	08025cb1 	.word	0x08025cb1
 801ed54:	08025ced 	.word	0x08025ced
 801ed58:	08025c8c 	.word	0x08025c8c
 801ed5c:	20007364 	.word	0x20007364
 801ed60:	20007366 	.word	0x20007366
 801ed64:	20007360 	.word	0x20007360
 801ed68:	2000730a 	.word	0x2000730a
 801ed6c:	2000730c 	.word	0x2000730c

0801ed70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ed70:	4b18      	ldr	r3, [pc, #96]	; (801edd4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	b34b      	cbz	r3, 801edca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ed76:	4a18      	ldr	r2, [pc, #96]	; (801edd8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ed78:	8800      	ldrh	r0, [r0, #0]
 801ed7a:	8812      	ldrh	r2, [r2, #0]
 801ed7c:	4290      	cmp	r0, r2
 801ed7e:	d211      	bcs.n	801eda4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801ed80:	2214      	movs	r2, #20
 801ed82:	fb02 3300 	mla	r3, r2, r0, r3
 801ed86:	8a1a      	ldrh	r2, [r3, #16]
 801ed88:	8919      	ldrh	r1, [r3, #8]
 801ed8a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ed8e:	428a      	cmp	r2, r1
 801ed90:	db1d      	blt.n	801edce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ed92:	8a58      	ldrh	r0, [r3, #18]
 801ed94:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ed98:	895b      	ldrh	r3, [r3, #10]
 801ed9a:	4298      	cmp	r0, r3
 801ed9c:	bfac      	ite	ge
 801ed9e:	2000      	movge	r0, #0
 801eda0:	2001      	movlt	r0, #1
 801eda2:	4770      	bx	lr
 801eda4:	4b0d      	ldr	r3, [pc, #52]	; (801eddc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801eda6:	881b      	ldrh	r3, [r3, #0]
 801eda8:	4413      	add	r3, r2
 801edaa:	4298      	cmp	r0, r3
 801edac:	da0d      	bge.n	801edca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801edae:	4b0c      	ldr	r3, [pc, #48]	; (801ede0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801edb0:	1a80      	subs	r0, r0, r2
 801edb2:	220e      	movs	r2, #14
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	fb02 3300 	mla	r3, r2, r0, r3
 801edba:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801edbe:	891a      	ldrh	r2, [r3, #8]
 801edc0:	4291      	cmp	r1, r2
 801edc2:	db04      	blt.n	801edce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801edc4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801edc8:	e7e6      	b.n	801ed98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801edca:	2000      	movs	r0, #0
 801edcc:	4770      	bx	lr
 801edce:	2001      	movs	r0, #1
 801edd0:	4770      	bx	lr
 801edd2:	bf00      	nop
 801edd4:	20007368 	.word	0x20007368
 801edd8:	20007364 	.word	0x20007364
 801eddc:	20007366 	.word	0x20007366
 801ede0:	20007360 	.word	0x20007360

0801ede4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ede4:	b508      	push	{r3, lr}
 801ede6:	4b12      	ldr	r3, [pc, #72]	; (801ee30 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ede8:	6819      	ldr	r1, [r3, #0]
 801edea:	b931      	cbnz	r1, 801edfa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801edec:	4b11      	ldr	r3, [pc, #68]	; (801ee34 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801edee:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 801edf2:	4a11      	ldr	r2, [pc, #68]	; (801ee38 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801edf4:	4811      	ldr	r0, [pc, #68]	; (801ee3c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801edf6:	f002 f941 	bl	802107c <__assert_func>
 801edfa:	8803      	ldrh	r3, [r0, #0]
 801edfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ee00:	4293      	cmp	r3, r2
 801ee02:	d012      	beq.n	801ee2a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ee04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ee08:	4293      	cmp	r3, r2
 801ee0a:	d103      	bne.n	801ee14 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ee0c:	4b0c      	ldr	r3, [pc, #48]	; (801ee40 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ee12:	bd08      	pop	{r3, pc}
 801ee14:	4a0b      	ldr	r2, [pc, #44]	; (801ee44 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ee16:	6812      	ldr	r2, [r2, #0]
 801ee18:	b11a      	cbz	r2, 801ee22 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ee1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ee1e:	2800      	cmp	r0, #0
 801ee20:	d1f7      	bne.n	801ee12 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ee22:	2214      	movs	r2, #20
 801ee24:	4353      	muls	r3, r2
 801ee26:	58c8      	ldr	r0, [r1, r3]
 801ee28:	e7f3      	b.n	801ee12 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ee2a:	2000      	movs	r0, #0
 801ee2c:	e7f1      	b.n	801ee12 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ee2e:	bf00      	nop
 801ee30:	20007368 	.word	0x20007368
 801ee34:	08025cb1 	.word	0x08025cb1
 801ee38:	08025d23 	.word	0x08025d23
 801ee3c:	08025c8c 	.word	0x08025c8c
 801ee40:	20007318 	.word	0x20007318
 801ee44:	2000735c 	.word	0x2000735c

0801ee48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ee48:	8802      	ldrh	r2, [r0, #0]
 801ee4a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ee4e:	429a      	cmp	r2, r3
 801ee50:	d845      	bhi.n	801eede <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ee52:	4b24      	ldr	r3, [pc, #144]	; (801eee4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ee54:	8818      	ldrh	r0, [r3, #0]
 801ee56:	4282      	cmp	r2, r0
 801ee58:	d221      	bcs.n	801ee9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ee5a:	4b23      	ldr	r3, [pc, #140]	; (801eee8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ee5c:	6819      	ldr	r1, [r3, #0]
 801ee5e:	2314      	movs	r3, #20
 801ee60:	fb03 1302 	mla	r3, r3, r2, r1
 801ee64:	6858      	ldr	r0, [r3, #4]
 801ee66:	2800      	cmp	r0, #0
 801ee68:	d03a      	beq.n	801eee0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ee6a:	4920      	ldr	r1, [pc, #128]	; (801eeec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ee6c:	6809      	ldr	r1, [r1, #0]
 801ee6e:	2900      	cmp	r1, #0
 801ee70:	d036      	beq.n	801eee0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ee72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ee76:	2900      	cmp	r1, #0
 801ee78:	d032      	beq.n	801eee0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ee7a:	891a      	ldrh	r2, [r3, #8]
 801ee7c:	8958      	ldrh	r0, [r3, #10]
 801ee7e:	4350      	muls	r0, r2
 801ee80:	7c5a      	ldrb	r2, [r3, #17]
 801ee82:	7cdb      	ldrb	r3, [r3, #19]
 801ee84:	0952      	lsrs	r2, r2, #5
 801ee86:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ee8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ee8e:	2b0b      	cmp	r3, #11
 801ee90:	bf18      	it	ne
 801ee92:	0040      	lslne	r0, r0, #1
 801ee94:	3003      	adds	r0, #3
 801ee96:	f020 0003 	bic.w	r0, r0, #3
 801ee9a:	4408      	add	r0, r1
 801ee9c:	4770      	bx	lr
 801ee9e:	4b14      	ldr	r3, [pc, #80]	; (801eef0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801eea0:	881b      	ldrh	r3, [r3, #0]
 801eea2:	4403      	add	r3, r0
 801eea4:	429a      	cmp	r2, r3
 801eea6:	da1a      	bge.n	801eede <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801eea8:	4b12      	ldr	r3, [pc, #72]	; (801eef4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801eeaa:	1a10      	subs	r0, r2, r0
 801eeac:	210e      	movs	r1, #14
 801eeae:	681b      	ldr	r3, [r3, #0]
 801eeb0:	fb01 3000 	mla	r0, r1, r0, r3
 801eeb4:	7b03      	ldrb	r3, [r0, #12]
 801eeb6:	f003 031f 	and.w	r3, r3, #31
 801eeba:	2b0b      	cmp	r3, #11
 801eebc:	d10b      	bne.n	801eed6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801eebe:	8903      	ldrh	r3, [r0, #8]
 801eec0:	8940      	ldrh	r0, [r0, #10]
 801eec2:	4358      	muls	r0, r3
 801eec4:	4b09      	ldr	r3, [pc, #36]	; (801eeec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801eec6:	3003      	adds	r0, #3
 801eec8:	6819      	ldr	r1, [r3, #0]
 801eeca:	f020 0303 	bic.w	r3, r0, #3
 801eece:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801eed2:	4418      	add	r0, r3
 801eed4:	4770      	bx	lr
 801eed6:	2b0d      	cmp	r3, #13
 801eed8:	d101      	bne.n	801eede <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801eeda:	300d      	adds	r0, #13
 801eedc:	4770      	bx	lr
 801eede:	2000      	movs	r0, #0
 801eee0:	4770      	bx	lr
 801eee2:	bf00      	nop
 801eee4:	20007364 	.word	0x20007364
 801eee8:	20007368 	.word	0x20007368
 801eeec:	2000735c 	.word	0x2000735c
 801eef0:	20007366 	.word	0x20007366
 801eef4:	20007360 	.word	0x20007360

0801eef8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801eef8:	4b17      	ldr	r3, [pc, #92]	; (801ef58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801eefa:	b510      	push	{r4, lr}
 801eefc:	6819      	ldr	r1, [r3, #0]
 801eefe:	8803      	ldrh	r3, [r0, #0]
 801ef00:	b1e9      	cbz	r1, 801ef3e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801ef02:	4a16      	ldr	r2, [pc, #88]	; (801ef5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801ef04:	8812      	ldrh	r2, [r2, #0]
 801ef06:	429a      	cmp	r2, r3
 801ef08:	d90a      	bls.n	801ef20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801ef0a:	2214      	movs	r2, #20
 801ef0c:	fb02 1303 	mla	r3, r2, r3, r1
 801ef10:	7c58      	ldrb	r0, [r3, #17]
 801ef12:	0942      	lsrs	r2, r0, #5
 801ef14:	7cd8      	ldrb	r0, [r3, #19]
 801ef16:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ef1a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ef1e:	bd10      	pop	{r4, pc}
 801ef20:	490f      	ldr	r1, [pc, #60]	; (801ef60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ef22:	8809      	ldrh	r1, [r1, #0]
 801ef24:	4411      	add	r1, r2
 801ef26:	428b      	cmp	r3, r1
 801ef28:	da09      	bge.n	801ef3e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801ef2a:	1a9b      	subs	r3, r3, r2
 801ef2c:	4a0d      	ldr	r2, [pc, #52]	; (801ef64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ef2e:	210e      	movs	r1, #14
 801ef30:	6812      	ldr	r2, [r2, #0]
 801ef32:	fb01 2303 	mla	r3, r1, r3, r2
 801ef36:	7b18      	ldrb	r0, [r3, #12]
 801ef38:	f000 001f 	and.w	r0, r0, #31
 801ef3c:	e7ef      	b.n	801ef1e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ef3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ef42:	4293      	cmp	r3, r2
 801ef44:	d106      	bne.n	801ef54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ef46:	f7f9 fbd9 	bl	80186fc <_ZN8touchgfx3HAL3lcdEv>
 801ef4a:	6803      	ldr	r3, [r0, #0]
 801ef4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef52:	4718      	bx	r3
 801ef54:	2000      	movs	r0, #0
 801ef56:	e7e2      	b.n	801ef1e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ef58:	20007368 	.word	0x20007368
 801ef5c:	20007364 	.word	0x20007364
 801ef60:	20007366 	.word	0x20007366
 801ef64:	20007360 	.word	0x20007360

0801ef68 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ef68:	2010      	movs	r0, #16
 801ef6a:	4770      	bx	lr

0801ef6c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ef6c:	2000      	movs	r0, #0
 801ef6e:	4770      	bx	lr

0801ef70 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ef70:	2bff      	cmp	r3, #255	; 0xff
 801ef72:	d050      	beq.n	801f016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ef74:	2a0b      	cmp	r2, #11
 801ef76:	d04a      	beq.n	801f00e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ef78:	d80e      	bhi.n	801ef98 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ef7a:	2a03      	cmp	r2, #3
 801ef7c:	d03f      	beq.n	801effe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ef7e:	d804      	bhi.n	801ef8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ef80:	2a01      	cmp	r2, #1
 801ef82:	d03e      	beq.n	801f002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ef84:	d93f      	bls.n	801f006 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ef86:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ef88:	4770      	bx	lr
 801ef8a:	2a09      	cmp	r2, #9
 801ef8c:	d03f      	beq.n	801f00e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ef8e:	d83c      	bhi.n	801f00a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ef90:	2a08      	cmp	r2, #8
 801ef92:	d03a      	beq.n	801f00a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ef94:	2000      	movs	r0, #0
 801ef96:	4770      	bx	lr
 801ef98:	2a2f      	cmp	r2, #47	; 0x2f
 801ef9a:	d024      	beq.n	801efe6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ef9c:	d80d      	bhi.n	801efba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ef9e:	2a2d      	cmp	r2, #45	; 0x2d
 801efa0:	d014      	beq.n	801efcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801efa2:	d826      	bhi.n	801eff2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801efa4:	2a2c      	cmp	r2, #44	; 0x2c
 801efa6:	d1f5      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efa8:	684b      	ldr	r3, [r1, #4]
 801efaa:	781b      	ldrb	r3, [r3, #0]
 801efac:	2b01      	cmp	r3, #1
 801efae:	d018      	beq.n	801efe2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801efb0:	d323      	bcc.n	801effa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801efb2:	2b02      	cmp	r3, #2
 801efb4:	d1ee      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efb6:	6880      	ldr	r0, [r0, #8]
 801efb8:	4770      	bx	lr
 801efba:	2a31      	cmp	r2, #49	; 0x31
 801efbc:	d004      	beq.n	801efc8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801efbe:	d328      	bcc.n	801f012 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801efc0:	2a32      	cmp	r2, #50	; 0x32
 801efc2:	d026      	beq.n	801f012 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801efc4:	2a33      	cmp	r2, #51	; 0x33
 801efc6:	d1e5      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efc8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801efca:	4770      	bx	lr
 801efcc:	684b      	ldr	r3, [r1, #4]
 801efce:	781b      	ldrb	r3, [r3, #0]
 801efd0:	2b01      	cmp	r3, #1
 801efd2:	d004      	beq.n	801efde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801efd4:	d30b      	bcc.n	801efee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801efd6:	2b02      	cmp	r3, #2
 801efd8:	d1dc      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efda:	6900      	ldr	r0, [r0, #16]
 801efdc:	4770      	bx	lr
 801efde:	6a00      	ldr	r0, [r0, #32]
 801efe0:	4770      	bx	lr
 801efe2:	6980      	ldr	r0, [r0, #24]
 801efe4:	4770      	bx	lr
 801efe6:	684b      	ldr	r3, [r1, #4]
 801efe8:	781b      	ldrb	r3, [r3, #0]
 801efea:	2b00      	cmp	r3, #0
 801efec:	d1d2      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801efee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801eff0:	4770      	bx	lr
 801eff2:	684b      	ldr	r3, [r1, #4]
 801eff4:	781b      	ldrb	r3, [r3, #0]
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d1cc      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801effa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801effc:	4770      	bx	lr
 801effe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f000:	4770      	bx	lr
 801f002:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f004:	4770      	bx	lr
 801f006:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f008:	4770      	bx	lr
 801f00a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801f00c:	4770      	bx	lr
 801f00e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801f010:	4770      	bx	lr
 801f012:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801f014:	4770      	bx	lr
 801f016:	2a0b      	cmp	r2, #11
 801f018:	d049      	beq.n	801f0ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f01a:	d80e      	bhi.n	801f03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801f01c:	2a03      	cmp	r2, #3
 801f01e:	d040      	beq.n	801f0a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f020:	d804      	bhi.n	801f02c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801f022:	2a01      	cmp	r2, #1
 801f024:	d03f      	beq.n	801f0a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f026:	d940      	bls.n	801f0aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f028:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f02a:	4770      	bx	lr
 801f02c:	2a09      	cmp	r2, #9
 801f02e:	d03e      	beq.n	801f0ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f030:	d801      	bhi.n	801f036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801f032:	2a08      	cmp	r2, #8
 801f034:	d1ae      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f036:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801f038:	4770      	bx	lr
 801f03a:	2a2f      	cmp	r2, #47	; 0x2f
 801f03c:	d024      	beq.n	801f088 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f03e:	d80d      	bhi.n	801f05c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f040:	2a2d      	cmp	r2, #45	; 0x2d
 801f042:	d014      	beq.n	801f06e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801f044:	d826      	bhi.n	801f094 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801f046:	2a2c      	cmp	r2, #44	; 0x2c
 801f048:	d1a4      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f04a:	684b      	ldr	r3, [r1, #4]
 801f04c:	781b      	ldrb	r3, [r3, #0]
 801f04e:	2b01      	cmp	r3, #1
 801f050:	d018      	beq.n	801f084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801f052:	d324      	bcc.n	801f09e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f054:	2b02      	cmp	r3, #2
 801f056:	d19d      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f058:	68c0      	ldr	r0, [r0, #12]
 801f05a:	4770      	bx	lr
 801f05c:	2a31      	cmp	r2, #49	; 0x31
 801f05e:	d004      	beq.n	801f06a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801f060:	d327      	bcc.n	801f0b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f062:	2a32      	cmp	r2, #50	; 0x32
 801f064:	d025      	beq.n	801f0b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f066:	2a33      	cmp	r2, #51	; 0x33
 801f068:	d194      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f06a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801f06c:	4770      	bx	lr
 801f06e:	684b      	ldr	r3, [r1, #4]
 801f070:	781b      	ldrb	r3, [r3, #0]
 801f072:	2b01      	cmp	r3, #1
 801f074:	d004      	beq.n	801f080 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f076:	d30b      	bcc.n	801f090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f078:	2b02      	cmp	r3, #2
 801f07a:	d18b      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f07c:	6940      	ldr	r0, [r0, #20]
 801f07e:	4770      	bx	lr
 801f080:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f082:	4770      	bx	lr
 801f084:	69c0      	ldr	r0, [r0, #28]
 801f086:	4770      	bx	lr
 801f088:	684b      	ldr	r3, [r1, #4]
 801f08a:	781b      	ldrb	r3, [r3, #0]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d181      	bne.n	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f090:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f092:	4770      	bx	lr
 801f094:	684b      	ldr	r3, [r1, #4]
 801f096:	781b      	ldrb	r3, [r3, #0]
 801f098:	2b00      	cmp	r3, #0
 801f09a:	f47f af7b 	bne.w	801ef94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f09e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f0a0:	4770      	bx	lr
 801f0a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f0a4:	4770      	bx	lr
 801f0a6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f0a8:	4770      	bx	lr
 801f0aa:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f0ac:	4770      	bx	lr
 801f0ae:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f0b0:	4770      	bx	lr
 801f0b2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801f0b4:	4770      	bx	lr
	...

0801f0b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0bc:	4692      	mov	sl, r2
 801f0be:	4a22      	ldr	r2, [pc, #136]	; (801f148 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x90>)
 801f0c0:	b088      	sub	sp, #32
 801f0c2:	4605      	mov	r5, r0
 801f0c4:	6812      	ldr	r2, [r2, #0]
 801f0c6:	4689      	mov	r9, r1
 801f0c8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801f0cc:	2a02      	cmp	r2, #2
 801f0ce:	d106      	bne.n	801f0de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801f0d0:	4b1e      	ldr	r3, [pc, #120]	; (801f14c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x94>)
 801f0d2:	f44f 7158 	mov.w	r1, #864	; 0x360
 801f0d6:	4a1e      	ldr	r2, [pc, #120]	; (801f150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 801f0d8:	481e      	ldr	r0, [pc, #120]	; (801f154 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 801f0da:	f001 ffcf 	bl	802107c <__assert_func>
 801f0de:	ac08      	add	r4, sp, #32
 801f0e0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f0e4:	4620      	mov	r0, r4
 801f0e6:	f7ff ff07 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0ea:	682b      	ldr	r3, [r5, #0]
 801f0ec:	4606      	mov	r6, r0
 801f0ee:	4628      	mov	r0, r5
 801f0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0f2:	4798      	blx	r3
 801f0f4:	4286      	cmp	r6, r0
 801f0f6:	d004      	beq.n	801f102 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801f0f8:	4b17      	ldr	r3, [pc, #92]	; (801f158 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 801f0fa:	f240 3162 	movw	r1, #866	; 0x362
 801f0fe:	4a14      	ldr	r2, [pc, #80]	; (801f150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 801f100:	e7ea      	b.n	801f0d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f102:	4620      	mov	r0, r4
 801f104:	f7ff fe6e 	bl	801ede4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f108:	4606      	mov	r6, r0
 801f10a:	b920      	cbnz	r0, 801f116 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801f10c:	4b13      	ldr	r3, [pc, #76]	; (801f15c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 801f10e:	f44f 7159 	mov.w	r1, #868	; 0x364
 801f112:	4a0f      	ldr	r2, [pc, #60]	; (801f150 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 801f114:	e7e0      	b.n	801f0d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f116:	682b      	ldr	r3, [r5, #0]
 801f118:	4620      	mov	r0, r4
 801f11a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801f11e:	f7ff fd45 	bl	801ebac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f122:	4607      	mov	r7, r0
 801f124:	4620      	mov	r0, r4
 801f126:	f7ff fd85 	bl	801ec34 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f12a:	4653      	mov	r3, sl
 801f12c:	b200      	sxth	r0, r0
 801f12e:	464a      	mov	r2, r9
 801f130:	b23f      	sxth	r7, r7
 801f132:	4629      	mov	r1, r5
 801f134:	9002      	str	r0, [sp, #8]
 801f136:	a806      	add	r0, sp, #24
 801f138:	e9cd 6700 	strd	r6, r7, [sp]
 801f13c:	47c0      	blx	r8
 801f13e:	4630      	mov	r0, r6
 801f140:	b008      	add	sp, #32
 801f142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f146:	bf00      	nop
 801f148:	20007318 	.word	0x20007318
 801f14c:	08025f4a 	.word	0x08025f4a
 801f150:	08026524 	.word	0x08026524
 801f154:	08025ffc 	.word	0x08025ffc
 801f158:	0802602e 	.word	0x0802602e
 801f15c:	08026083 	.word	0x08026083

0801f160 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801f160:	b508      	push	{r3, lr}
 801f162:	4b06      	ldr	r3, [pc, #24]	; (801f17c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801f164:	8818      	ldrh	r0, [r3, #0]
 801f166:	b928      	cbnz	r0, 801f174 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801f168:	4b05      	ldr	r3, [pc, #20]	; (801f180 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801f16a:	2153      	movs	r1, #83	; 0x53
 801f16c:	4a05      	ldr	r2, [pc, #20]	; (801f184 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801f16e:	4806      	ldr	r0, [pc, #24]	; (801f188 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801f170:	f001 ff84 	bl	802107c <__assert_func>
 801f174:	0040      	lsls	r0, r0, #1
 801f176:	b280      	uxth	r0, r0
 801f178:	bd08      	pop	{r3, pc}
 801f17a:	bf00      	nop
 801f17c:	20007310 	.word	0x20007310
 801f180:	080260f2 	.word	0x080260f2
 801f184:	08026456 	.word	0x08026456
 801f188:	08026134 	.word	0x08026134

0801f18c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f18c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f190:	2300      	movs	r3, #0
 801f192:	9300      	str	r3, [sp, #0]
 801f194:	4b3d      	ldr	r3, [pc, #244]	; (801f28c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801f196:	781b      	ldrb	r3, [r3, #0]
 801f198:	2b00      	cmp	r3, #0
 801f19a:	d137      	bne.n	801f20c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f19c:	4a3c      	ldr	r2, [pc, #240]	; (801f290 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f19e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f1a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d132      	bne.n	801f210 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f1aa:	4b3a      	ldr	r3, [pc, #232]	; (801f294 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f1ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f1b0:	ac02      	add	r4, sp, #8
 801f1b2:	6808      	ldr	r0, [r1, #0]
 801f1b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f1b8:	ab02      	add	r3, sp, #8
 801f1ba:	6849      	ldr	r1, [r1, #4]
 801f1bc:	4d36      	ldr	r5, [pc, #216]	; (801f298 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f1be:	c303      	stmia	r3!, {r0, r1}
 801f1c0:	4669      	mov	r1, sp
 801f1c2:	4620      	mov	r0, r4
 801f1c4:	f7fe fb8e 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f1c8:	4668      	mov	r0, sp
 801f1ca:	f7fe fb63 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f1ce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f1d2:	f8bd 2000 	ldrh.w	r2, [sp]
 801f1d6:	462f      	mov	r7, r5
 801f1d8:	6828      	ldr	r0, [r5, #0]
 801f1da:	4413      	add	r3, r2
 801f1dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f1e0:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f1e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f1e8:	4413      	add	r3, r2
 801f1ea:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f1ee:	6803      	ldr	r3, [r0, #0]
 801f1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1f2:	4798      	blx	r3
 801f1f4:	f010 0f01 	tst.w	r0, #1
 801f1f8:	d00c      	beq.n	801f214 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f1fa:	6828      	ldr	r0, [r5, #0]
 801f1fc:	6803      	ldr	r3, [r0, #0]
 801f1fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f204:	4798      	blx	r3
 801f206:	b004      	add	sp, #16
 801f208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f20c:	4a21      	ldr	r2, [pc, #132]	; (801f294 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f20e:	e7c6      	b.n	801f19e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f210:	4b1f      	ldr	r3, [pc, #124]	; (801f290 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f212:	e7cb      	b.n	801f1ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f214:	6838      	ldr	r0, [r7, #0]
 801f216:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f21a:	6803      	ldr	r3, [r0, #0]
 801f21c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801f220:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801f224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f226:	4798      	blx	r3
 801f228:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f22c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f230:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f234:	fb16 3602 	smlabb	r6, r6, r2, r3
 801f238:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f23c:	6838      	ldr	r0, [r7, #0]
 801f23e:	6803      	ldr	r3, [r0, #0]
 801f240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f242:	4798      	blx	r3
 801f244:	4a12      	ldr	r2, [pc, #72]	; (801f290 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f246:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801f24a:	8813      	ldrh	r3, [r2, #0]
 801f24c:	4691      	mov	r9, r2
 801f24e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f252:	435d      	muls	r5, r3
 801f254:	fb03 1404 	mla	r4, r3, r4, r1
 801f258:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f25c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f260:	6838      	ldr	r0, [r7, #0]
 801f262:	42ac      	cmp	r4, r5
 801f264:	6803      	ldr	r3, [r0, #0]
 801f266:	d20e      	bcs.n	801f286 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f268:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801f26c:	4632      	mov	r2, r6
 801f26e:	4643      	mov	r3, r8
 801f270:	4621      	mov	r1, r4
 801f272:	47d0      	blx	sl
 801f274:	f8b9 3000 	ldrh.w	r3, [r9]
 801f278:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f27c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f280:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f284:	e7ec      	b.n	801f260 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801f286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f288:	4798      	blx	r3
 801f28a:	e7bc      	b.n	801f206 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f28c:	2000730e 	.word	0x2000730e
 801f290:	20007310 	.word	0x20007310
 801f294:	20007312 	.word	0x20007312
 801f298:	20007318 	.word	0x20007318

0801f29c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2a0:	b08b      	sub	sp, #44	; 0x2c
 801f2a2:	460f      	mov	r7, r1
 801f2a4:	4616      	mov	r6, r2
 801f2a6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801f2aa:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f2ae:	f1bb 0f00 	cmp.w	fp, #0
 801f2b2:	d049      	beq.n	801f348 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f2b4:	6810      	ldr	r0, [r2, #0]
 801f2b6:	ad06      	add	r5, sp, #24
 801f2b8:	6851      	ldr	r1, [r2, #4]
 801f2ba:	c503      	stmia	r5!, {r0, r1}
 801f2bc:	6818      	ldr	r0, [r3, #0]
 801f2be:	ad08      	add	r5, sp, #32
 801f2c0:	6859      	ldr	r1, [r3, #4]
 801f2c2:	c503      	stmia	r5!, {r0, r1}
 801f2c4:	a806      	add	r0, sp, #24
 801f2c6:	f7fe fae5 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f2ca:	4631      	mov	r1, r6
 801f2cc:	a808      	add	r0, sp, #32
 801f2ce:	f7fe fb09 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f2d2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f2d6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f2da:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f2de:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801f2e2:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f2e6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801f2ea:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f2ee:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f2f2:	4f5f      	ldr	r7, [pc, #380]	; (801f470 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f2f4:	440a      	add	r2, r1
 801f2f6:	6838      	ldr	r0, [r7, #0]
 801f2f8:	46b9      	mov	r9, r7
 801f2fa:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f2fe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f302:	4413      	add	r3, r2
 801f304:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f308:	6803      	ldr	r3, [r0, #0]
 801f30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f30c:	4798      	blx	r3
 801f30e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f312:	d01c      	beq.n	801f34e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f314:	f010 0f04 	tst.w	r0, #4
 801f318:	d01d      	beq.n	801f356 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f31a:	f8d9 0000 	ldr.w	r0, [r9]
 801f31e:	2700      	movs	r7, #0
 801f320:	b2ad      	uxth	r5, r5
 801f322:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f326:	6801      	ldr	r1, [r0, #0]
 801f328:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f32c:	f8cd b00c 	str.w	fp, [sp, #12]
 801f330:	9501      	str	r5, [sp, #4]
 801f332:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801f336:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f33a:	9402      	str	r4, [sp, #8]
 801f33c:	fa1f f488 	uxth.w	r4, r8
 801f340:	9400      	str	r4, [sp, #0]
 801f342:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801f344:	4631      	mov	r1, r6
 801f346:	47a0      	blx	r4
 801f348:	b00b      	add	sp, #44	; 0x2c
 801f34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f34e:	b914      	cbnz	r4, 801f356 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f350:	f010 0f01 	tst.w	r0, #1
 801f354:	e7e0      	b.n	801f318 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801f356:	f8d9 0000 	ldr.w	r0, [r9]
 801f35a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f35e:	6803      	ldr	r3, [r0, #0]
 801f360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f362:	4798      	blx	r3
 801f364:	4b43      	ldr	r3, [pc, #268]	; (801f474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801f366:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f36a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f36e:	881a      	ldrh	r2, [r3, #0]
 801f370:	469a      	mov	sl, r3
 801f372:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f376:	fb05 f502 	mul.w	r5, r5, r2
 801f37a:	fb02 1404 	mla	r4, r2, r4, r1
 801f37e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f382:	d059      	beq.n	801f438 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801f384:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801f388:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f38c:	fa1f f28b 	uxth.w	r2, fp
 801f390:	469e      	mov	lr, r3
 801f392:	fa1f f989 	uxth.w	r9, r9
 801f396:	42ac      	cmp	r4, r5
 801f398:	d264      	bcs.n	801f464 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f39a:	eb04 0a07 	add.w	sl, r4, r7
 801f39e:	4554      	cmp	r4, sl
 801f3a0:	d23d      	bcs.n	801f41e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801f3a2:	8821      	ldrh	r1, [r4, #0]
 801f3a4:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f3a8:	1208      	asrs	r0, r1, #8
 801f3aa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f3ae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f3b2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f3b6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f3ba:	00c9      	lsls	r1, r1, #3
 801f3bc:	fb10 f009 	smulbb	r0, r0, r9
 801f3c0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f3c4:	b2c9      	uxtb	r1, r1
 801f3c6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f3ca:	10d8      	asrs	r0, r3, #3
 801f3cc:	fb1b fb09 	smulbb	fp, fp, r9
 801f3d0:	00db      	lsls	r3, r3, #3
 801f3d2:	fa1f fc8c 	uxth.w	ip, ip
 801f3d6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f3da:	fb11 f109 	smulbb	r1, r1, r9
 801f3de:	b2db      	uxtb	r3, r3
 801f3e0:	fb00 b002 	mla	r0, r0, r2, fp
 801f3e4:	f10c 0b01 	add.w	fp, ip, #1
 801f3e8:	fb03 1302 	mla	r3, r3, r2, r1
 801f3ec:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f3f0:	b29b      	uxth	r3, r3
 801f3f2:	b280      	uxth	r0, r0
 801f3f4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801f3f8:	f103 0c01 	add.w	ip, r3, #1
 801f3fc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f400:	1c43      	adds	r3, r0, #1
 801f402:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f406:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f40a:	0940      	lsrs	r0, r0, #5
 801f40c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f410:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f414:	ea4c 0c00 	orr.w	ip, ip, r0
 801f418:	f824 cb02 	strh.w	ip, [r4], #2
 801f41c:	e7bf      	b.n	801f39e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801f41e:	f8be 3000 	ldrh.w	r3, [lr]
 801f422:	eba3 0308 	sub.w	r3, r3, r8
 801f426:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f42a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f42e:	eba3 0308 	sub.w	r3, r3, r8
 801f432:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f436:	e7ae      	b.n	801f396 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801f438:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f43c:	f8d9 0000 	ldr.w	r0, [r9]
 801f440:	42ac      	cmp	r4, r5
 801f442:	6803      	ldr	r3, [r0, #0]
 801f444:	d20e      	bcs.n	801f464 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f446:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801f44a:	4632      	mov	r2, r6
 801f44c:	463b      	mov	r3, r7
 801f44e:	4621      	mov	r1, r4
 801f450:	47c0      	blx	r8
 801f452:	f8ba 3000 	ldrh.w	r3, [sl]
 801f456:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f45a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f45e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f462:	e7eb      	b.n	801f43c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f464:	4b02      	ldr	r3, [pc, #8]	; (801f470 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f466:	6818      	ldr	r0, [r3, #0]
 801f468:	6803      	ldr	r3, [r0, #0]
 801f46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f46c:	4798      	blx	r3
 801f46e:	e76b      	b.n	801f348 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f470:	20007318 	.word	0x20007318
 801f474:	20007310 	.word	0x20007310

0801f478 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f47a:	4606      	mov	r6, r0
 801f47c:	b087      	sub	sp, #28
 801f47e:	460c      	mov	r4, r1
 801f480:	4617      	mov	r7, r2
 801f482:	461d      	mov	r5, r3
 801f484:	b333      	cbz	r3, 801f4d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f486:	4608      	mov	r0, r1
 801f488:	f7fc fb71 	bl	801bb6e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f48c:	bb10      	cbnz	r0, 801f4d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f48e:	6820      	ldr	r0, [r4, #0]
 801f490:	ab04      	add	r3, sp, #16
 801f492:	6861      	ldr	r1, [r4, #4]
 801f494:	4c1b      	ldr	r4, [pc, #108]	; (801f504 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801f496:	c303      	stmia	r3!, {r0, r1}
 801f498:	a804      	add	r0, sp, #16
 801f49a:	f7fe f9fb 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f49e:	6820      	ldr	r0, [r4, #0]
 801f4a0:	6803      	ldr	r3, [r0, #0]
 801f4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4a4:	4798      	blx	r3
 801f4a6:	2dff      	cmp	r5, #255	; 0xff
 801f4a8:	d016      	beq.n	801f4d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f4aa:	f010 0f08 	tst.w	r0, #8
 801f4ae:	6820      	ldr	r0, [r4, #0]
 801f4b0:	d015      	beq.n	801f4de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f4b2:	2400      	movs	r4, #0
 801f4b4:	6801      	ldr	r1, [r0, #0]
 801f4b6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f4ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f4be:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801f4c2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f4c6:	9401      	str	r4, [sp, #4]
 801f4c8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f4cc:	9400      	str	r4, [sp, #0]
 801f4ce:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801f4d0:	4639      	mov	r1, r7
 801f4d2:	47a0      	blx	r4
 801f4d4:	b007      	add	sp, #28
 801f4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4d8:	f010 0f02 	tst.w	r0, #2
 801f4dc:	e7e7      	b.n	801f4ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801f4de:	6803      	ldr	r3, [r0, #0]
 801f4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f4e2:	4798      	blx	r3
 801f4e4:	4b08      	ldr	r3, [pc, #32]	; (801f508 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801f4e6:	4601      	mov	r1, r0
 801f4e8:	4630      	mov	r0, r6
 801f4ea:	881a      	ldrh	r2, [r3, #0]
 801f4ec:	6833      	ldr	r3, [r6, #0]
 801f4ee:	e9cd 7500 	strd	r7, r5, [sp]
 801f4f2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801f4f4:	ab04      	add	r3, sp, #16
 801f4f6:	47a8      	blx	r5
 801f4f8:	6820      	ldr	r0, [r4, #0]
 801f4fa:	6803      	ldr	r3, [r0, #0]
 801f4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4fe:	4798      	blx	r3
 801f500:	e7e8      	b.n	801f4d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f502:	bf00      	nop
 801f504:	20007318 	.word	0x20007318
 801f508:	20007310 	.word	0x20007310

0801f50c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801f50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f510:	4690      	mov	r8, r2
 801f512:	4a8d      	ldr	r2, [pc, #564]	; (801f748 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>)
 801f514:	b091      	sub	sp, #68	; 0x44
 801f516:	4606      	mov	r6, r0
 801f518:	6812      	ldr	r2, [r2, #0]
 801f51a:	460d      	mov	r5, r1
 801f51c:	461c      	mov	r4, r3
 801f51e:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 801f522:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801f526:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801f52a:	2a02      	cmp	r2, #2
 801f52c:	d106      	bne.n	801f53c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x30>
 801f52e:	4b87      	ldr	r3, [pc, #540]	; (801f74c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x240>)
 801f530:	f240 316b 	movw	r1, #875	; 0x36b
 801f534:	4a86      	ldr	r2, [pc, #536]	; (801f750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 801f536:	4887      	ldr	r0, [pc, #540]	; (801f754 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 801f538:	f001 fda0 	bl	802107c <__assert_func>
 801f53c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f53e:	b923      	cbnz	r3, 801f54a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e>
 801f540:	4b85      	ldr	r3, [pc, #532]	; (801f758 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 801f542:	f44f 715b 	mov.w	r1, #876	; 0x36c
 801f546:	4a82      	ldr	r2, [pc, #520]	; (801f750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 801f548:	e7f5      	b.n	801f536 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2a>
 801f54a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801f54e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 801f552:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f556:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 801f55a:	4648      	mov	r0, r9
 801f55c:	4621      	mov	r1, r4
 801f55e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801f562:	f8ad b02c 	strh.w	fp, [sp, #44]	; 0x2c
 801f566:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801f56a:	f7fc fabd 	bl	801bae8 <_ZN8touchgfx4RectaNERKS0_>
 801f56e:	4641      	mov	r1, r8
 801f570:	4648      	mov	r0, r9
 801f572:	f7fc fab9 	bl	801bae8 <_ZN8touchgfx4RectaNERKS0_>
 801f576:	4a79      	ldr	r2, [pc, #484]	; (801f75c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 801f578:	f8b2 c000 	ldrh.w	ip, [r2]
 801f57c:	4a78      	ldr	r2, [pc, #480]	; (801f760 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 801f57e:	fa0f f18c 	sxth.w	r1, ip
 801f582:	8810      	ldrh	r0, [r2, #0]
 801f584:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f588:	fa0f fe80 	sxth.w	lr, r0
 801f58c:	2a00      	cmp	r2, #0
 801f58e:	da07      	bge.n	801f5a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 801f590:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 801f594:	4442      	add	r2, r8
 801f596:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f59a:	2200      	movs	r2, #0
 801f59c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f5a0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f5a4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801f5a8:	1a89      	subs	r1, r1, r2
 801f5aa:	4588      	cmp	r8, r1
 801f5ac:	bfc4      	itt	gt
 801f5ae:	ebac 0102 	subgt.w	r1, ip, r2
 801f5b2:	f8ad 102c 	strhgt.w	r1, [sp, #44]	; 0x2c
 801f5b6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801f5ba:	2900      	cmp	r1, #0
 801f5bc:	da07      	bge.n	801f5ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xc2>
 801f5be:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 801f5c2:	4441      	add	r1, r8
 801f5c4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801f5c8:	2100      	movs	r1, #0
 801f5ca:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801f5ce:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801f5d2:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 801f5d6:	ebae 0e0a 	sub.w	lr, lr, sl
 801f5da:	4571      	cmp	r1, lr
 801f5dc:	bfc4      	itt	gt
 801f5de:	eba0 010a 	subgt.w	r1, r0, sl
 801f5e2:	f8ad 102e 	strhgt.w	r1, [sp, #46]	; 0x2e
 801f5e6:	495f      	ldr	r1, [pc, #380]	; (801f764 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 801f5e8:	7809      	ldrb	r1, [r1, #0]
 801f5ea:	b9a9      	cbnz	r1, 801f618 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x10c>
 801f5ec:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801f5f0:	45e0      	cmp	r8, ip
 801f5f2:	bf14      	ite	ne
 801f5f4:	2300      	movne	r3, #0
 801f5f6:	2301      	moveq	r3, #1
 801f5f8:	4648      	mov	r0, r9
 801f5fa:	9202      	str	r2, [sp, #8]
 801f5fc:	9305      	str	r3, [sp, #20]
 801f5fe:	f7fc fab6 	bl	801bb6e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f602:	9a02      	ldr	r2, [sp, #8]
 801f604:	b160      	cbz	r0, 801f620 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x114>
 801f606:	2300      	movs	r3, #0
 801f608:	8033      	strh	r3, [r6, #0]
 801f60a:	8073      	strh	r3, [r6, #2]
 801f60c:	80b3      	strh	r3, [r6, #4]
 801f60e:	4630      	mov	r0, r6
 801f610:	80f3      	strh	r3, [r6, #6]
 801f612:	b011      	add	sp, #68	; 0x44
 801f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f618:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801f61c:	4580      	cmp	r8, r0
 801f61e:	e7e8      	b.n	801f5f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe6>
 801f620:	8821      	ldrh	r1, [r4, #0]
 801f622:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801f626:	1a52      	subs	r2, r2, r1
 801f628:	900e      	str	r0, [sp, #56]	; 0x38
 801f62a:	9304      	str	r3, [sp, #16]
 801f62c:	a90e      	add	r1, sp, #56	; 0x38
 801f62e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801f632:	a80c      	add	r0, sp, #48	; 0x30
 801f634:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801f638:	9306      	str	r3, [sp, #24]
 801f63a:	b213      	sxth	r3, r2
 801f63c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
 801f640:	9302      	str	r3, [sp, #8]
 801f642:	8863      	ldrh	r3, [r4, #2]
 801f644:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801f748 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 801f648:	ebaa 0a03 	sub.w	sl, sl, r3
 801f64c:	fa0f f38a 	sxth.w	r3, sl
 801f650:	9303      	str	r3, [sp, #12]
 801f652:	9b02      	ldr	r3, [sp, #8]
 801f654:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801f658:	9b03      	ldr	r3, [sp, #12]
 801f65a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f65e:	9b04      	ldr	r3, [sp, #16]
 801f660:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801f664:	9b06      	ldr	r3, [sp, #24]
 801f666:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801f66a:	f7fe f93b 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f66e:	4648      	mov	r0, r9
 801f670:	f7fe f910 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f674:	a80e      	add	r0, sp, #56	; 0x38
 801f676:	f7fe f90d 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f67a:	4b3b      	ldr	r3, [pc, #236]	; (801f768 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 801f67c:	4628      	mov	r0, r5
 801f67e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 801f682:	881b      	ldrh	r3, [r3, #0]
 801f684:	9307      	str	r3, [sp, #28]
 801f686:	682b      	ldr	r3, [r5, #0]
 801f688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f68a:	4798      	blx	r3
 801f68c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801f690:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801f694:	4682      	mov	sl, r0
 801f696:	f8d8 0000 	ldr.w	r0, [r8]
 801f69a:	fb17 2303 	smlabb	r3, r7, r3, r2
 801f69e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f6a0:	eb02 0443 	add.w	r4, r2, r3, lsl #1
 801f6a4:	6803      	ldr	r3, [r0, #0]
 801f6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f6a8:	4798      	blx	r3
 801f6aa:	9009      	str	r0, [sp, #36]	; 0x24
 801f6ac:	f8d8 0000 	ldr.w	r0, [r8]
 801f6b0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801f6b4:	6802      	ldr	r2, [r0, #0]
 801f6b6:	9308      	str	r3, [sp, #32]
 801f6b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f6ba:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 801f6be:	4790      	blx	r2
 801f6c0:	f010 0f01 	tst.w	r0, #1
 801f6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6c6:	d011      	beq.n	801f6ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 801f6c8:	f8d8 0000 	ldr.w	r0, [r8]
 801f6cc:	6803      	ldr	r3, [r0, #0]
 801f6ce:	f8cd b000 	str.w	fp, [sp]
 801f6d2:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801f6d4:	4623      	mov	r3, r4
 801f6d6:	e899 0006 	ldmia.w	r9, {r1, r2}
 801f6da:	47a8      	blx	r5
 801f6dc:	9b02      	ldr	r3, [sp, #8]
 801f6de:	8033      	strh	r3, [r6, #0]
 801f6e0:	9b03      	ldr	r3, [sp, #12]
 801f6e2:	8073      	strh	r3, [r6, #2]
 801f6e4:	9b04      	ldr	r3, [sp, #16]
 801f6e6:	80b3      	strh	r3, [r6, #4]
 801f6e8:	9b06      	ldr	r3, [sp, #24]
 801f6ea:	e790      	b.n	801f60e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x102>
 801f6ec:	9a08      	ldr	r2, [sp, #32]
 801f6ee:	fb0a f505 	mul.w	r5, sl, r5
 801f6f2:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801f6f6:	9a05      	ldr	r2, [sp, #20]
 801f6f8:	441d      	add	r5, r3
 801f6fa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f6fe:	b162      	cbz	r2, 801f71a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 801f700:	9a07      	ldr	r2, [sp, #28]
 801f702:	4297      	cmp	r7, r2
 801f704:	d109      	bne.n	801f71a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 801f706:	f8d8 0000 	ldr.w	r0, [r8]
 801f70a:	fb03 f30a 	mul.w	r3, r3, sl
 801f70e:	4621      	mov	r1, r4
 801f710:	6802      	ldr	r2, [r0, #0]
 801f712:	6b57      	ldr	r7, [r2, #52]	; 0x34
 801f714:	462a      	mov	r2, r5
 801f716:	47b8      	blx	r7
 801f718:	e7e0      	b.n	801f6dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 801f71a:	437b      	muls	r3, r7
 801f71c:	f8df b028 	ldr.w	fp, [pc, #40]	; 801f748 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 801f720:	007f      	lsls	r7, r7, #1
 801f722:	eb04 0843 	add.w	r8, r4, r3, lsl #1
 801f726:	4544      	cmp	r4, r8
 801f728:	d2d8      	bcs.n	801f6dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 801f72a:	f8db 0000 	ldr.w	r0, [fp]
 801f72e:	4621      	mov	r1, r4
 801f730:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f734:	443c      	add	r4, r7
 801f736:	6802      	ldr	r2, [r0, #0]
 801f738:	005b      	lsls	r3, r3, #1
 801f73a:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 801f73e:	462a      	mov	r2, r5
 801f740:	47c8      	blx	r9
 801f742:	4455      	add	r5, sl
 801f744:	e7ef      	b.n	801f726 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 801f746:	bf00      	nop
 801f748:	20007318 	.word	0x20007318
 801f74c:	08025f4a 	.word	0x08025f4a
 801f750:	08026491 	.word	0x08026491
 801f754:	08025ffc 	.word	0x08025ffc
 801f758:	08025efc 	.word	0x08025efc
 801f75c:	2000730a 	.word	0x2000730a
 801f760:	2000730c 	.word	0x2000730c
 801f764:	2000730e 	.word	0x2000730e
 801f768:	20007310 	.word	0x20007310

0801f76c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f770:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801f774:	4688      	mov	r8, r1
 801f776:	4614      	mov	r4, r2
 801f778:	461d      	mov	r5, r3
 801f77a:	9e08      	ldr	r6, [sp, #32]
 801f77c:	2f00      	cmp	r7, #0
 801f77e:	f000 80b4 	beq.w	801f8ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801f782:	4618      	mov	r0, r3
 801f784:	f7fc f9f3 	bl	801bb6e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f788:	2800      	cmp	r0, #0
 801f78a:	f040 80ae 	bne.w	801f8ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801f78e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801f792:	2fff      	cmp	r7, #255	; 0xff
 801f794:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801f798:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801f79c:	fb04 1303 	mla	r3, r4, r3, r1
 801f7a0:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801f7a4:	eba4 0200 	sub.w	r2, r4, r0
 801f7a8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801f7ac:	fb04 f505 	mul.w	r5, r4, r5
 801f7b0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801f7b4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801f7b8:	d04b      	beq.n	801f852 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801f7ba:	b2bc      	uxth	r4, r7
 801f7bc:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801f7c0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801f7c4:	fa5f f788 	uxtb.w	r7, r8
 801f7c8:	b2f3      	uxtb	r3, r6
 801f7ca:	0040      	lsls	r0, r0, #1
 801f7cc:	fb0e fe04 	mul.w	lr, lr, r4
 801f7d0:	4367      	muls	r7, r4
 801f7d2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801f7d6:	4363      	muls	r3, r4
 801f7d8:	fa1f fc8c 	uxth.w	ip, ip
 801f7dc:	42a9      	cmp	r1, r5
 801f7de:	f080 8084 	bcs.w	801f8ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801f7e2:	eb01 0900 	add.w	r9, r1, r0
 801f7e6:	4549      	cmp	r1, r9
 801f7e8:	d231      	bcs.n	801f84e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801f7ea:	880a      	ldrh	r2, [r1, #0]
 801f7ec:	1214      	asrs	r4, r2, #8
 801f7ee:	10d6      	asrs	r6, r2, #3
 801f7f0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801f7f4:	00d2      	lsls	r2, r2, #3
 801f7f6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f7fa:	b2d2      	uxtb	r2, r2
 801f7fc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f800:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f804:	fb14 f40c 	smulbb	r4, r4, ip
 801f808:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f80c:	fb12 f20c 	smulbb	r2, r2, ip
 801f810:	fb16 f60c 	smulbb	r6, r6, ip
 801f814:	4474      	add	r4, lr
 801f816:	441a      	add	r2, r3
 801f818:	b2a4      	uxth	r4, r4
 801f81a:	443e      	add	r6, r7
 801f81c:	b292      	uxth	r2, r2
 801f81e:	f104 0a01 	add.w	sl, r4, #1
 801f822:	b2b6      	uxth	r6, r6
 801f824:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f828:	f102 0a01 	add.w	sl, r2, #1
 801f82c:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801f830:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801f834:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f838:	4322      	orrs	r2, r4
 801f83a:	1c74      	adds	r4, r6, #1
 801f83c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f840:	0976      	lsrs	r6, r6, #5
 801f842:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f846:	4332      	orrs	r2, r6
 801f848:	f821 2b02 	strh.w	r2, [r1], #2
 801f84c:	e7cb      	b.n	801f7e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801f84e:	4441      	add	r1, r8
 801f850:	e7c4      	b.n	801f7dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f852:	0973      	lsrs	r3, r6, #5
 801f854:	4f26      	ldr	r7, [pc, #152]	; (801f8f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801f856:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f85a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f85e:	ea08 0707 	and.w	r7, r8, r7
 801f862:	433b      	orrs	r3, r7
 801f864:	4333      	orrs	r3, r6
 801f866:	07e6      	lsls	r6, r4, #31
 801f868:	b29b      	uxth	r3, r3
 801f86a:	d50b      	bpl.n	801f884 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801f86c:	0040      	lsls	r0, r0, #1
 801f86e:	0052      	lsls	r2, r2, #1
 801f870:	42a9      	cmp	r1, r5
 801f872:	d23a      	bcs.n	801f8ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801f874:	180c      	adds	r4, r1, r0
 801f876:	42a1      	cmp	r1, r4
 801f878:	d202      	bcs.n	801f880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801f87a:	f821 3b02 	strh.w	r3, [r1], #2
 801f87e:	e7fa      	b.n	801f876 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801f880:	4411      	add	r1, r2
 801f882:	e7f5      	b.n	801f870 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801f884:	078f      	lsls	r7, r1, #30
 801f886:	d008      	beq.n	801f89a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801f888:	0066      	lsls	r6, r4, #1
 801f88a:	460a      	mov	r2, r1
 801f88c:	42aa      	cmp	r2, r5
 801f88e:	d202      	bcs.n	801f896 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801f890:	8013      	strh	r3, [r2, #0]
 801f892:	4432      	add	r2, r6
 801f894:	e7fa      	b.n	801f88c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801f896:	3102      	adds	r1, #2
 801f898:	3801      	subs	r0, #1
 801f89a:	07c6      	lsls	r6, r0, #31
 801f89c:	d50b      	bpl.n	801f8b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801f89e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801f8a2:	0066      	lsls	r6, r4, #1
 801f8a4:	3a01      	subs	r2, #1
 801f8a6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801f8aa:	42aa      	cmp	r2, r5
 801f8ac:	d202      	bcs.n	801f8b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801f8ae:	8013      	strh	r3, [r2, #0]
 801f8b0:	4432      	add	r2, r6
 801f8b2:	e7fa      	b.n	801f8aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801f8b4:	3801      	subs	r0, #1
 801f8b6:	b1c0      	cbz	r0, 801f8ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801f8b8:	1040      	asrs	r0, r0, #1
 801f8ba:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801f8be:	0080      	lsls	r0, r0, #2
 801f8c0:	0064      	lsls	r4, r4, #1
 801f8c2:	42a9      	cmp	r1, r5
 801f8c4:	d211      	bcs.n	801f8ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801f8c6:	078a      	lsls	r2, r1, #30
 801f8c8:	d006      	beq.n	801f8d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f8ca:	4b0a      	ldr	r3, [pc, #40]	; (801f8f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801f8cc:	f240 4137 	movw	r1, #1079	; 0x437
 801f8d0:	4a09      	ldr	r2, [pc, #36]	; (801f8f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801f8d2:	480a      	ldr	r0, [pc, #40]	; (801f8fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801f8d4:	f001 fbd2 	bl	802107c <__assert_func>
 801f8d8:	180e      	adds	r6, r1, r0
 801f8da:	460a      	mov	r2, r1
 801f8dc:	42b2      	cmp	r2, r6
 801f8de:	d202      	bcs.n	801f8e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801f8e0:	f842 3b04 	str.w	r3, [r2], #4
 801f8e4:	e7fa      	b.n	801f8dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801f8e6:	4421      	add	r1, r4
 801f8e8:	e7eb      	b.n	801f8c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801f8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8ee:	bf00      	nop
 801f8f0:	00fff800 	.word	0x00fff800
 801f8f4:	08025dad 	.word	0x08025dad
 801f8f8:	080261c0 	.word	0x080261c0
 801f8fc:	08025ffc 	.word	0x08025ffc

0801f900 <_ZN8touchgfx8LCD16bppC1Ev>:
 801f900:	2200      	movs	r2, #0
 801f902:	4910      	ldr	r1, [pc, #64]	; (801f944 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801f904:	6042      	str	r2, [r0, #4]
 801f906:	6001      	str	r1, [r0, #0]
 801f908:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801f90c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801f910:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801f914:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801f918:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801f91c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801f920:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801f924:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801f928:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801f92c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801f930:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801f934:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801f938:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801f93c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801f940:	4770      	bx	lr
 801f942:	bf00      	nop
 801f944:	08026170 	.word	0x08026170

0801f948 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f94c:	b08d      	sub	sp, #52	; 0x34
 801f94e:	460d      	mov	r5, r1
 801f950:	4604      	mov	r4, r0
 801f952:	4699      	mov	r9, r3
 801f954:	6808      	ldr	r0, [r1, #0]
 801f956:	ab08      	add	r3, sp, #32
 801f958:	6849      	ldr	r1, [r1, #4]
 801f95a:	c303      	stmia	r3!, {r0, r1}
 801f95c:	6810      	ldr	r0, [r2, #0]
 801f95e:	ab0a      	add	r3, sp, #40	; 0x28
 801f960:	6851      	ldr	r1, [r2, #4]
 801f962:	c303      	stmia	r3!, {r0, r1}
 801f964:	a808      	add	r0, sp, #32
 801f966:	f7fd ff95 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f96a:	4629      	mov	r1, r5
 801f96c:	a80a      	add	r0, sp, #40	; 0x28
 801f96e:	4d67      	ldr	r5, [pc, #412]	; (801fb0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801f970:	f7fd ffb8 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f974:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f978:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f97c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f980:	6828      	ldr	r0, [r5, #0]
 801f982:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f986:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801f98a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801f98e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f992:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f996:	440a      	add	r2, r1
 801f998:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f99c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f9a0:	4413      	add	r3, r2
 801f9a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f9a6:	6803      	ldr	r3, [r0, #0]
 801f9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f9aa:	4798      	blx	r3
 801f9ac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f9b0:	d119      	bne.n	801f9e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801f9b2:	f010 0f20 	tst.w	r0, #32
 801f9b6:	6828      	ldr	r0, [r5, #0]
 801f9b8:	d018      	beq.n	801f9ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801f9ba:	2500      	movs	r5, #0
 801f9bc:	6801      	ldr	r1, [r0, #0]
 801f9be:	b2b6      	uxth	r6, r6
 801f9c0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f9c4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f9c8:	9601      	str	r6, [sp, #4]
 801f9ca:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801f9ce:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801f9d2:	9502      	str	r5, [sp, #8]
 801f9d4:	fa1f f588 	uxth.w	r5, r8
 801f9d8:	9500      	str	r5, [sp, #0]
 801f9da:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801f9dc:	4621      	mov	r1, r4
 801f9de:	47a8      	blx	r5
 801f9e0:	b00d      	add	sp, #52	; 0x34
 801f9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f9ea:	e7e4      	b.n	801f9b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801f9ec:	6803      	ldr	r3, [r0, #0]
 801f9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9f0:	4798      	blx	r3
 801f9f2:	4947      	ldr	r1, [pc, #284]	; (801fb10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801f9f4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f9f8:	880b      	ldrh	r3, [r1, #0]
 801f9fa:	468a      	mov	sl, r1
 801f9fc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801fa00:	fb03 5202 	mla	r2, r3, r2, r5
 801fa04:	4373      	muls	r3, r6
 801fa06:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fa0a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fa0e:	9307      	str	r3, [sp, #28]
 801fa10:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801fa14:	9306      	str	r3, [sp, #24]
 801fa16:	9b07      	ldr	r3, [sp, #28]
 801fa18:	4298      	cmp	r0, r3
 801fa1a:	d270      	bcs.n	801fafe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801fa1c:	9b06      	ldr	r3, [sp, #24]
 801fa1e:	4621      	mov	r1, r4
 801fa20:	eb00 0b03 	add.w	fp, r0, r3
 801fa24:	4558      	cmp	r0, fp
 801fa26:	d25d      	bcs.n	801fae4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801fa28:	f851 4b04 	ldr.w	r4, [r1], #4
 801fa2c:	0e23      	lsrs	r3, r4, #24
 801fa2e:	d014      	beq.n	801fa5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fa30:	2bff      	cmp	r3, #255	; 0xff
 801fa32:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801fa36:	d112      	bne.n	801fa5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fa38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fa3c:	d10f      	bne.n	801fa5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fa3e:	0963      	lsrs	r3, r4, #5
 801fa40:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801fa44:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fa48:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fa4c:	f02c 0c07 	bic.w	ip, ip, #7
 801fa50:	ea43 0c0c 	orr.w	ip, r3, ip
 801fa54:	ea4c 0404 	orr.w	r4, ip, r4
 801fa58:	8004      	strh	r4, [r0, #0]
 801fa5a:	3002      	adds	r0, #2
 801fa5c:	e7e2      	b.n	801fa24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801fa5e:	fb09 f303 	mul.w	r3, r9, r3
 801fa62:	8807      	ldrh	r7, [r0, #0]
 801fa64:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801fa68:	fa5f fc8c 	uxtb.w	ip, ip
 801fa6c:	1c5a      	adds	r2, r3, #1
 801fa6e:	123e      	asrs	r6, r7, #8
 801fa70:	10fd      	asrs	r5, r7, #3
 801fa72:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801fa76:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fa7a:	00ff      	lsls	r7, r7, #3
 801fa7c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fa80:	1212      	asrs	r2, r2, #8
 801fa82:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fa86:	b293      	uxth	r3, r2
 801fa88:	43d2      	mvns	r2, r2
 801fa8a:	b2ff      	uxtb	r7, r7
 801fa8c:	fb1e fe03 	smulbb	lr, lr, r3
 801fa90:	b2d2      	uxtb	r2, r2
 801fa92:	fb1c fc03 	smulbb	ip, ip, r3
 801fa96:	b2e4      	uxtb	r4, r4
 801fa98:	fb06 e602 	mla	r6, r6, r2, lr
 801fa9c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801faa0:	fb14 f403 	smulbb	r4, r4, r3
 801faa4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801faa8:	b2b6      	uxth	r6, r6
 801faaa:	fb05 c502 	mla	r5, r5, r2, ip
 801faae:	fb07 4702 	mla	r7, r7, r2, r4
 801fab2:	f106 0e01 	add.w	lr, r6, #1
 801fab6:	b2ad      	uxth	r5, r5
 801fab8:	b2bf      	uxth	r7, r7
 801faba:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801fabe:	f105 0c01 	add.w	ip, r5, #1
 801fac2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801fac6:	1c7e      	adds	r6, r7, #1
 801fac8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801facc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fad0:	096d      	lsrs	r5, r5, #5
 801fad2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fad6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fada:	ea46 060e 	orr.w	r6, r6, lr
 801fade:	432e      	orrs	r6, r5
 801fae0:	8006      	strh	r6, [r0, #0]
 801fae2:	e7ba      	b.n	801fa5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fae4:	f8ba 3000 	ldrh.w	r3, [sl]
 801fae8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801faec:	eba3 0308 	sub.w	r3, r3, r8
 801faf0:	eba4 0408 	sub.w	r4, r4, r8
 801faf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801faf8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fafc:	e78b      	b.n	801fa16 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801fafe:	4b03      	ldr	r3, [pc, #12]	; (801fb0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801fb00:	6818      	ldr	r0, [r3, #0]
 801fb02:	6803      	ldr	r3, [r0, #0]
 801fb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb06:	4798      	blx	r3
 801fb08:	e76a      	b.n	801f9e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801fb0a:	bf00      	nop
 801fb0c:	20007318 	.word	0x20007318
 801fb10:	20007310 	.word	0x20007310

0801fb14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801fb14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fb18:	b085      	sub	sp, #20
 801fb1a:	6810      	ldr	r0, [r2, #0]
 801fb1c:	460c      	mov	r4, r1
 801fb1e:	6851      	ldr	r1, [r2, #4]
 801fb20:	466d      	mov	r5, sp
 801fb22:	4616      	mov	r6, r2
 801fb24:	c503      	stmia	r5!, {r0, r1}
 801fb26:	6818      	ldr	r0, [r3, #0]
 801fb28:	6859      	ldr	r1, [r3, #4]
 801fb2a:	c503      	stmia	r5!, {r0, r1}
 801fb2c:	4668      	mov	r0, sp
 801fb2e:	4d2e      	ldr	r5, [pc, #184]	; (801fbe8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801fb30:	f7fd feb0 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fb34:	4631      	mov	r1, r6
 801fb36:	a802      	add	r0, sp, #8
 801fb38:	4e2c      	ldr	r6, [pc, #176]	; (801fbec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801fb3a:	f7fd fed3 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fb3e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801fb42:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801fb46:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801fb4a:	6828      	ldr	r0, [r5, #0]
 801fb4c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fb50:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801fb54:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801fb58:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fb5c:	f8bd 1000 	ldrh.w	r1, [sp]
 801fb60:	440a      	add	r2, r1
 801fb62:	f8ad 2008 	strh.w	r2, [sp, #8]
 801fb66:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fb6a:	4413      	add	r3, r2
 801fb6c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fb70:	6803      	ldr	r3, [r0, #0]
 801fb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb74:	4798      	blx	r3
 801fb76:	8833      	ldrh	r3, [r6, #0]
 801fb78:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801fb7c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801fb80:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fb84:	f8df e068 	ldr.w	lr, [pc, #104]	; 801fbf0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801fb88:	fb03 1202 	mla	r2, r3, r2, r1
 801fb8c:	fb08 f303 	mul.w	r3, r8, r3
 801fb90:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fb94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fb98:	4298      	cmp	r0, r3
 801fb9a:	d21d      	bcs.n	801fbd8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801fb9c:	eb00 080c 	add.w	r8, r0, ip
 801fba0:	4540      	cmp	r0, r8
 801fba2:	d20f      	bcs.n	801fbc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801fba4:	f854 1b04 	ldr.w	r1, [r4], #4
 801fba8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801fbac:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801fbb0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801fbb4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fbb8:	ea42 0209 	orr.w	r2, r2, r9
 801fbbc:	430a      	orrs	r2, r1
 801fbbe:	f820 2b02 	strh.w	r2, [r0], #2
 801fbc2:	e7ed      	b.n	801fba0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801fbc4:	8832      	ldrh	r2, [r6, #0]
 801fbc6:	1bd2      	subs	r2, r2, r7
 801fbc8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fbcc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801fbd0:	1bd2      	subs	r2, r2, r7
 801fbd2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801fbd6:	e7df      	b.n	801fb98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801fbd8:	6828      	ldr	r0, [r5, #0]
 801fbda:	6803      	ldr	r3, [r0, #0]
 801fbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbde:	4798      	blx	r3
 801fbe0:	b005      	add	sp, #20
 801fbe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fbe6:	bf00      	nop
 801fbe8:	20007318 	.word	0x20007318
 801fbec:	20007310 	.word	0x20007310
 801fbf0:	fffff800 	.word	0xfffff800

0801fbf4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801fbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbf8:	b08e      	sub	sp, #56	; 0x38
 801fbfa:	460e      	mov	r6, r1
 801fbfc:	4604      	mov	r4, r0
 801fbfe:	461d      	mov	r5, r3
 801fc00:	6808      	ldr	r0, [r1, #0]
 801fc02:	ab0a      	add	r3, sp, #40	; 0x28
 801fc04:	6849      	ldr	r1, [r1, #4]
 801fc06:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801fddc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801fc0a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801fde0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801fc0e:	c303      	stmia	r3!, {r0, r1}
 801fc10:	6810      	ldr	r0, [r2, #0]
 801fc12:	ab0c      	add	r3, sp, #48	; 0x30
 801fc14:	6851      	ldr	r1, [r2, #4]
 801fc16:	c303      	stmia	r3!, {r0, r1}
 801fc18:	a80a      	add	r0, sp, #40	; 0x28
 801fc1a:	f7fd fe3b 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc1e:	4631      	mov	r1, r6
 801fc20:	a80c      	add	r0, sp, #48	; 0x30
 801fc22:	f7fd fe5f 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc26:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801fc2a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801fc2e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801fc32:	f8d8 0000 	ldr.w	r0, [r8]
 801fc36:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fc3a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801fc3e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801fc42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fc46:	440c      	add	r4, r1
 801fc48:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801fc4c:	440a      	add	r2, r1
 801fc4e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801fc52:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801fc56:	4413      	add	r3, r2
 801fc58:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801fc5c:	6803      	ldr	r3, [r0, #0]
 801fc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc60:	4798      	blx	r3
 801fc62:	2dff      	cmp	r5, #255	; 0xff
 801fc64:	d124      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801fc66:	f010 0f01 	tst.w	r0, #1
 801fc6a:	f8d8 0000 	ldr.w	r0, [r8]
 801fc6e:	d022      	beq.n	801fcb6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801fc70:	2100      	movs	r1, #0
 801fc72:	f04f 0e01 	mov.w	lr, #1
 801fc76:	f8d0 c000 	ldr.w	ip, [r0]
 801fc7a:	b2b6      	uxth	r6, r6
 801fc7c:	f8cd e018 	str.w	lr, [sp, #24]
 801fc80:	b2bf      	uxth	r7, r7
 801fc82:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801fc86:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801fc8a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801fc8e:	f8b9 e000 	ldrh.w	lr, [r9]
 801fc92:	9503      	str	r5, [sp, #12]
 801fc94:	9601      	str	r6, [sp, #4]
 801fc96:	9700      	str	r7, [sp, #0]
 801fc98:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801fc9c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801fca0:	9102      	str	r1, [sp, #8]
 801fca2:	4621      	mov	r1, r4
 801fca4:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801fca8:	47a8      	blx	r5
 801fcaa:	b00e      	add	sp, #56	; 0x38
 801fcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fcb0:	f010 0f04 	tst.w	r0, #4
 801fcb4:	e7d9      	b.n	801fc6a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801fcb6:	6803      	ldr	r3, [r0, #0]
 801fcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fcba:	4798      	blx	r3
 801fcbc:	f8b9 3000 	ldrh.w	r3, [r9]
 801fcc0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801fcc4:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801fcc8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801fccc:	435e      	muls	r6, r3
 801fcce:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801fcd2:	2dff      	cmp	r5, #255	; 0xff
 801fcd4:	fb03 1202 	mla	r2, r3, r2, r1
 801fcd8:	ebac 0c07 	sub.w	ip, ip, r7
 801fcdc:	eba3 0707 	sub.w	r7, r3, r7
 801fce0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fce4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fce8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801fcec:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801fcf0:	d049      	beq.n	801fd86 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801fcf2:	43eb      	mvns	r3, r5
 801fcf4:	fa1f f985 	uxth.w	r9, r5
 801fcf8:	b2db      	uxtb	r3, r3
 801fcfa:	42b0      	cmp	r0, r6
 801fcfc:	d266      	bcs.n	801fdcc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801fcfe:	eb00 0a0e 	add.w	sl, r0, lr
 801fd02:	4550      	cmp	r0, sl
 801fd04:	4621      	mov	r1, r4
 801fd06:	f104 0403 	add.w	r4, r4, #3
 801fd0a:	d25b      	bcs.n	801fdc4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801fd0c:	8802      	ldrh	r2, [r0, #0]
 801fd0e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fd12:	ea4f 2822 	mov.w	r8, r2, asr #8
 801fd16:	fb11 f109 	smulbb	r1, r1, r9
 801fd1a:	10d5      	asrs	r5, r2, #3
 801fd1c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801fd20:	00d2      	lsls	r2, r2, #3
 801fd22:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fd26:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801fd2a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fd2e:	fb08 1803 	mla	r8, r8, r3, r1
 801fd32:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801fd36:	b2d2      	uxtb	r2, r2
 801fd38:	fb11 f109 	smulbb	r1, r1, r9
 801fd3c:	fa1f f888 	uxth.w	r8, r8
 801fd40:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fd44:	fb05 1503 	mla	r5, r5, r3, r1
 801fd48:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801fd4c:	fb11 f109 	smulbb	r1, r1, r9
 801fd50:	b2ad      	uxth	r5, r5
 801fd52:	fb02 1203 	mla	r2, r2, r3, r1
 801fd56:	f108 0101 	add.w	r1, r8, #1
 801fd5a:	b292      	uxth	r2, r2
 801fd5c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801fd60:	1c51      	adds	r1, r2, #1
 801fd62:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801fd66:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fd6a:	1c69      	adds	r1, r5, #1
 801fd6c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fd70:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fd74:	096d      	lsrs	r5, r5, #5
 801fd76:	ea42 0208 	orr.w	r2, r2, r8
 801fd7a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fd7e:	432a      	orrs	r2, r5
 801fd80:	f820 2b02 	strh.w	r2, [r0], #2
 801fd84:	e7bd      	b.n	801fd02 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801fd86:	4a14      	ldr	r2, [pc, #80]	; (801fdd8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801fd88:	42b0      	cmp	r0, r6
 801fd8a:	d21f      	bcs.n	801fdcc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801fd8c:	eb00 050e 	add.w	r5, r0, lr
 801fd90:	42a8      	cmp	r0, r5
 801fd92:	4621      	mov	r1, r4
 801fd94:	f104 0403 	add.w	r4, r4, #3
 801fd98:	d210      	bcs.n	801fdbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801fd9a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801fd9e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fda2:	00db      	lsls	r3, r3, #3
 801fda4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801fda8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fdac:	430b      	orrs	r3, r1
 801fdae:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801fdb2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801fdb6:	f820 3b02 	strh.w	r3, [r0], #2
 801fdba:	e7e9      	b.n	801fd90 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801fdbc:	4438      	add	r0, r7
 801fdbe:	eb01 040c 	add.w	r4, r1, ip
 801fdc2:	e7e1      	b.n	801fd88 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801fdc4:	4438      	add	r0, r7
 801fdc6:	eb01 040c 	add.w	r4, r1, ip
 801fdca:	e796      	b.n	801fcfa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801fdcc:	4b03      	ldr	r3, [pc, #12]	; (801fddc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801fdce:	6818      	ldr	r0, [r3, #0]
 801fdd0:	6803      	ldr	r3, [r0, #0]
 801fdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdd4:	4798      	blx	r3
 801fdd6:	e768      	b.n	801fcaa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801fdd8:	fffff800 	.word	0xfffff800
 801fddc:	20007318 	.word	0x20007318
 801fde0:	20007310 	.word	0x20007310

0801fde4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801fde4:	b570      	push	{r4, r5, r6, lr}
 801fde6:	9c04      	ldr	r4, [sp, #16]
 801fde8:	4605      	mov	r5, r0
 801fdea:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801fdee:	4608      	mov	r0, r1
 801fdf0:	4619      	mov	r1, r3
 801fdf2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801fdf6:	2a0d      	cmp	r2, #13
 801fdf8:	d825      	bhi.n	801fe46 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801fdfa:	e8df f002 	tbb	[pc, r2]
 801fdfe:	1807      	.short	0x1807
 801fe00:	1d1d1d13 	.word	0x1d1d1d13
 801fe04:	1d1d1d1d 	.word	0x1d1d1d1d
 801fe08:	1d1d1d1d 	.word	0x1d1d1d1d
 801fe0c:	682a      	ldr	r2, [r5, #0]
 801fe0e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801fe12:	68d6      	ldr	r6, [r2, #12]
 801fe14:	4623      	mov	r3, r4
 801fe16:	460a      	mov	r2, r1
 801fe18:	4601      	mov	r1, r0
 801fe1a:	46b4      	mov	ip, r6
 801fe1c:	4628      	mov	r0, r5
 801fe1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fe22:	4760      	bx	ip
 801fe24:	4622      	mov	r2, r4
 801fe26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fe2a:	f7ff bd8d 	b.w	801f948 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fe2e:	4622      	mov	r2, r4
 801fe30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fe34:	f7ff bede 	b.w	801fbf4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801fe38:	4b03      	ldr	r3, [pc, #12]	; (801fe48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801fe3a:	f240 3159 	movw	r1, #857	; 0x359
 801fe3e:	4a03      	ldr	r2, [pc, #12]	; (801fe4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801fe40:	4803      	ldr	r0, [pc, #12]	; (801fe50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801fe42:	f001 f91b 	bl	802107c <__assert_func>
 801fe46:	bd70      	pop	{r4, r5, r6, pc}
 801fe48:	080260c1 	.word	0x080260c1
 801fe4c:	080265aa 	.word	0x080265aa
 801fe50:	08025ffc 	.word	0x08025ffc

0801fe54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801fe54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe58:	b093      	sub	sp, #76	; 0x4c
 801fe5a:	880e      	ldrh	r6, [r1, #0]
 801fe5c:	4681      	mov	r9, r0
 801fe5e:	4688      	mov	r8, r1
 801fe60:	4615      	mov	r5, r2
 801fe62:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801fe66:	b136      	cbz	r6, 801fe76 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801fe68:	4b70      	ldr	r3, [pc, #448]	; (802002c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801fe6a:	f44f 71c3 	mov.w	r1, #390	; 0x186
 801fe6e:	4a70      	ldr	r2, [pc, #448]	; (8020030 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801fe70:	4870      	ldr	r0, [pc, #448]	; (8020034 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801fe72:	f001 f903 	bl	802107c <__assert_func>
 801fe76:	6810      	ldr	r0, [r2, #0]
 801fe78:	ac0e      	add	r4, sp, #56	; 0x38
 801fe7a:	6851      	ldr	r1, [r2, #4]
 801fe7c:	4f6e      	ldr	r7, [pc, #440]	; (8020038 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801fe7e:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 802003c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801fe82:	c403      	stmia	r4!, {r0, r1}
 801fe84:	6818      	ldr	r0, [r3, #0]
 801fe86:	ac10      	add	r4, sp, #64	; 0x40
 801fe88:	6859      	ldr	r1, [r3, #4]
 801fe8a:	c403      	stmia	r4!, {r0, r1}
 801fe8c:	a80e      	add	r0, sp, #56	; 0x38
 801fe8e:	f7fd fd01 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe92:	4629      	mov	r1, r5
 801fe94:	a810      	add	r0, sp, #64	; 0x40
 801fe96:	f7fd fd25 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fe9a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fe9e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fea2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801fea6:	6838      	ldr	r0, [r7, #0]
 801fea8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801feac:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801feb0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801feb4:	4489      	add	r9, r1
 801feb6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801feba:	440a      	add	r2, r1
 801febc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801fec0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801fec4:	4413      	add	r3, r2
 801fec6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801feca:	6803      	ldr	r3, [r0, #0]
 801fecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fece:	4798      	blx	r3
 801fed0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801fed4:	6838      	ldr	r0, [r7, #0]
 801fed6:	d01d      	beq.n	801ff14 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801fed8:	210b      	movs	r1, #11
 801feda:	6802      	ldr	r2, [r0, #0]
 801fedc:	b2a4      	uxth	r4, r4
 801fede:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801fee2:	9107      	str	r1, [sp, #28]
 801fee4:	b2ad      	uxth	r5, r5
 801fee6:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801feea:	f8bb 1000 	ldrh.w	r1, [fp]
 801feee:	9502      	str	r5, [sp, #8]
 801fef0:	9106      	str	r1, [sp, #24]
 801fef2:	2101      	movs	r1, #1
 801fef4:	9401      	str	r4, [sp, #4]
 801fef6:	e9cd a104 	strd	sl, r1, [sp, #16]
 801fefa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801fefe:	9103      	str	r1, [sp, #12]
 801ff00:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801ff04:	9100      	str	r1, [sp, #0]
 801ff06:	4649      	mov	r1, r9
 801ff08:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801ff0a:	4642      	mov	r2, r8
 801ff0c:	47a0      	blx	r4
 801ff0e:	b013      	add	sp, #76	; 0x4c
 801ff10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff14:	6803      	ldr	r3, [r0, #0]
 801ff16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff18:	4798      	blx	r3
 801ff1a:	f8bb 3000 	ldrh.w	r3, [fp]
 801ff1e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ff22:	f04f 0e04 	mov.w	lr, #4
 801ff26:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ff2a:	435d      	muls	r5, r3
 801ff2c:	fb03 1202 	mla	r2, r3, r2, r1
 801ff30:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ff34:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ff38:	920c      	str	r2, [sp, #48]	; 0x30
 801ff3a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801ff3e:	1b12      	subs	r2, r2, r4
 801ff40:	920d      	str	r2, [sp, #52]	; 0x34
 801ff42:	0062      	lsls	r2, r4, #1
 801ff44:	1b1c      	subs	r4, r3, r4
 801ff46:	920a      	str	r2, [sp, #40]	; 0x28
 801ff48:	0063      	lsls	r3, r4, #1
 801ff4a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ff4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff4e:	4298      	cmp	r0, r3
 801ff50:	d266      	bcs.n	8020020 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801ff52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff54:	eb00 0b03 	add.w	fp, r0, r3
 801ff58:	4558      	cmp	r0, fp
 801ff5a:	d25c      	bcs.n	8020016 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801ff5c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ff60:	fb1e e303 	smlabb	r3, lr, r3, lr
 801ff64:	f858 2003 	ldr.w	r2, [r8, r3]
 801ff68:	0e11      	lsrs	r1, r2, #24
 801ff6a:	d012      	beq.n	801ff92 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801ff6c:	29ff      	cmp	r1, #255	; 0xff
 801ff6e:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801ff72:	d110      	bne.n	801ff96 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801ff74:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ff78:	d10d      	bne.n	801ff96 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801ff7a:	0953      	lsrs	r3, r2, #5
 801ff7c:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ff80:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ff84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ff88:	f027 0707 	bic.w	r7, r7, #7
 801ff8c:	431f      	orrs	r7, r3
 801ff8e:	433a      	orrs	r2, r7
 801ff90:	8002      	strh	r2, [r0, #0]
 801ff92:	3002      	adds	r0, #2
 801ff94:	e7e0      	b.n	801ff58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801ff96:	fb0a f101 	mul.w	r1, sl, r1
 801ff9a:	8806      	ldrh	r6, [r0, #0]
 801ff9c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801ffa0:	b2d2      	uxtb	r2, r2
 801ffa2:	1c4b      	adds	r3, r1, #1
 801ffa4:	1235      	asrs	r5, r6, #8
 801ffa6:	10f4      	asrs	r4, r6, #3
 801ffa8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801ffac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ffb0:	00f6      	lsls	r6, r6, #3
 801ffb2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ffb6:	121b      	asrs	r3, r3, #8
 801ffb8:	b2f6      	uxtb	r6, r6
 801ffba:	b299      	uxth	r1, r3
 801ffbc:	43db      	mvns	r3, r3
 801ffbe:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ffc2:	fb1c fc01 	smulbb	ip, ip, r1
 801ffc6:	b2db      	uxtb	r3, r3
 801ffc8:	fb12 f201 	smulbb	r2, r2, r1
 801ffcc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ffd0:	fb05 c503 	mla	r5, r5, r3, ip
 801ffd4:	b2ff      	uxtb	r7, r7
 801ffd6:	fb06 2203 	mla	r2, r6, r3, r2
 801ffda:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801ffde:	fb17 f701 	smulbb	r7, r7, r1
 801ffe2:	b2ad      	uxth	r5, r5
 801ffe4:	b292      	uxth	r2, r2
 801ffe6:	fb04 7403 	mla	r4, r4, r3, r7
 801ffea:	f105 0c01 	add.w	ip, r5, #1
 801ffee:	1c57      	adds	r7, r2, #1
 801fff0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fff4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801fff8:	b2a4      	uxth	r4, r4
 801fffa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fffe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020002:	433d      	orrs	r5, r7
 8020004:	1c67      	adds	r7, r4, #1
 8020006:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802000a:	0964      	lsrs	r4, r4, #5
 802000c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8020010:	4325      	orrs	r5, r4
 8020012:	8005      	strh	r5, [r0, #0]
 8020014:	e7bd      	b.n	801ff92 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8020016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020018:	4418      	add	r0, r3
 802001a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802001c:	4499      	add	r9, r3
 802001e:	e795      	b.n	801ff4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8020020:	4b05      	ldr	r3, [pc, #20]	; (8020038 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020022:	6818      	ldr	r0, [r3, #0]
 8020024:	6803      	ldr	r3, [r0, #0]
 8020026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020028:	4798      	blx	r3
 802002a:	e770      	b.n	801ff0e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 802002c:	08025eac 	.word	0x08025eac
 8020030:	080263cb 	.word	0x080263cb
 8020034:	08025ffc 	.word	0x08025ffc
 8020038:	20007318 	.word	0x20007318
 802003c:	20007310 	.word	0x20007310

08020040 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020044:	4614      	mov	r4, r2
 8020046:	880a      	ldrh	r2, [r1, #0]
 8020048:	b087      	sub	sp, #28
 802004a:	4680      	mov	r8, r0
 802004c:	2a02      	cmp	r2, #2
 802004e:	460d      	mov	r5, r1
 8020050:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8020054:	d006      	beq.n	8020064 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8020056:	4b63      	ldr	r3, [pc, #396]	; (80201e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8020058:	f240 11dd 	movw	r1, #477	; 0x1dd
 802005c:	4a62      	ldr	r2, [pc, #392]	; (80201e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 802005e:	4863      	ldr	r0, [pc, #396]	; (80201ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 8020060:	f001 f80c 	bl	802107c <__assert_func>
 8020064:	2e00      	cmp	r6, #0
 8020066:	f000 80b9 	beq.w	80201dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 802006a:	6820      	ldr	r0, [r4, #0]
 802006c:	af02      	add	r7, sp, #8
 802006e:	6861      	ldr	r1, [r4, #4]
 8020070:	c703      	stmia	r7!, {r0, r1}
 8020072:	6818      	ldr	r0, [r3, #0]
 8020074:	af04      	add	r7, sp, #16
 8020076:	6859      	ldr	r1, [r3, #4]
 8020078:	c703      	stmia	r7!, {r0, r1}
 802007a:	a802      	add	r0, sp, #8
 802007c:	f7fd fc0a 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020080:	4621      	mov	r1, r4
 8020082:	a804      	add	r0, sp, #16
 8020084:	f7fd fc2e 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020088:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802008c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020090:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8020094:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8020098:	fb14 2103 	smlabb	r1, r4, r3, r2
 802009c:	eb08 0401 	add.w	r4, r8, r1
 80200a0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80200a4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80200a8:	440a      	add	r2, r1
 80200aa:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80200ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 80200b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80200b6:	4413      	add	r3, r2
 80200b8:	f8ad 3012 	strh.w	r3, [sp, #18]
 80200bc:	4b4c      	ldr	r3, [pc, #304]	; (80201f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80200be:	6818      	ldr	r0, [r3, #0]
 80200c0:	6803      	ldr	r3, [r0, #0]
 80200c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200c4:	4798      	blx	r3
 80200c6:	4b4b      	ldr	r3, [pc, #300]	; (80201f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 80200c8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80200cc:	2eff      	cmp	r6, #255	; 0xff
 80200ce:	881a      	ldrh	r2, [r3, #0]
 80200d0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80200d4:	fb02 c101 	mla	r1, r2, r1, ip
 80200d8:	fb02 f207 	mul.w	r2, r2, r7
 80200dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80200e0:	f105 0104 	add.w	r1, r5, #4
 80200e4:	461d      	mov	r5, r3
 80200e6:	d05a      	beq.n	802019e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 80200e8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 80200ec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80200f0:	b2b6      	uxth	r6, r6
 80200f2:	9301      	str	r3, [sp, #4]
 80200f4:	fa1f fe8e 	uxth.w	lr, lr
 80200f8:	4282      	cmp	r2, r0
 80200fa:	d96a      	bls.n	80201d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80200fc:	eb00 0b0a 	add.w	fp, r0, sl
 8020100:	4583      	cmp	fp, r0
 8020102:	d940      	bls.n	8020186 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8020104:	8805      	ldrh	r5, [r0, #0]
 8020106:	f814 3b01 	ldrb.w	r3, [r4], #1
 802010a:	122f      	asrs	r7, r5, #8
 802010c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020110:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020114:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020118:	00ed      	lsls	r5, r5, #3
 802011a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802011e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020122:	fb17 f70e 	smulbb	r7, r7, lr
 8020126:	b2ed      	uxtb	r5, r5
 8020128:	fb19 f90e 	smulbb	r9, r9, lr
 802012c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020130:	fb15 f50e 	smulbb	r5, r5, lr
 8020134:	fb0c 7c06 	mla	ip, ip, r6, r7
 8020138:	10df      	asrs	r7, r3, #3
 802013a:	00db      	lsls	r3, r3, #3
 802013c:	fa1f fc8c 	uxth.w	ip, ip
 8020140:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020144:	b2db      	uxtb	r3, r3
 8020146:	fb07 9706 	mla	r7, r7, r6, r9
 802014a:	f10c 0901 	add.w	r9, ip, #1
 802014e:	fb03 5306 	mla	r3, r3, r6, r5
 8020152:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8020156:	b29b      	uxth	r3, r3
 8020158:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 802015c:	b2bf      	uxth	r7, r7
 802015e:	f103 0c01 	add.w	ip, r3, #1
 8020162:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020166:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802016a:	ea4c 0c09 	orr.w	ip, ip, r9
 802016e:	f107 0901 	add.w	r9, r7, #1
 8020172:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8020176:	097f      	lsrs	r7, r7, #5
 8020178:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802017c:	ea4c 0c07 	orr.w	ip, ip, r7
 8020180:	f820 cb02 	strh.w	ip, [r0], #2
 8020184:	e7bc      	b.n	8020100 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8020186:	9b01      	ldr	r3, [sp, #4]
 8020188:	881b      	ldrh	r3, [r3, #0]
 802018a:	eba3 0308 	sub.w	r3, r3, r8
 802018e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020192:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020196:	eba3 0308 	sub.w	r3, r3, r8
 802019a:	441c      	add	r4, r3
 802019c:	e7ac      	b.n	80200f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 802019e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80201a2:	4282      	cmp	r2, r0
 80201a4:	d915      	bls.n	80201d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80201a6:	eb00 060a 	add.w	r6, r0, sl
 80201aa:	4286      	cmp	r6, r0
 80201ac:	d906      	bls.n	80201bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 80201ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 80201b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80201b6:	f820 3b02 	strh.w	r3, [r0], #2
 80201ba:	e7f6      	b.n	80201aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 80201bc:	882b      	ldrh	r3, [r5, #0]
 80201be:	eba3 0308 	sub.w	r3, r3, r8
 80201c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80201c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80201ca:	eba3 0308 	sub.w	r3, r3, r8
 80201ce:	441c      	add	r4, r3
 80201d0:	e7e7      	b.n	80201a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 80201d2:	4b07      	ldr	r3, [pc, #28]	; (80201f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80201d4:	6818      	ldr	r0, [r3, #0]
 80201d6:	6803      	ldr	r3, [r0, #0]
 80201d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80201da:	4798      	blx	r3
 80201dc:	b007      	add	sp, #28
 80201de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201e2:	bf00      	nop
 80201e4:	08025ddc 	.word	0x08025ddc
 80201e8:	08026235 	.word	0x08026235
 80201ec:	08025ffc 	.word	0x08025ffc
 80201f0:	20007318 	.word	0x20007318
 80201f4:	20007310 	.word	0x20007310

080201f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80201f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201fc:	f8b1 9000 	ldrh.w	r9, [r1]
 8020200:	b091      	sub	sp, #68	; 0x44
 8020202:	4604      	mov	r4, r0
 8020204:	460f      	mov	r7, r1
 8020206:	f1b9 0f01 	cmp.w	r9, #1
 802020a:	4690      	mov	r8, r2
 802020c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8020210:	d006      	beq.n	8020220 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8020212:	4b84      	ldr	r3, [pc, #528]	; (8020424 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8020214:	f240 212b 	movw	r1, #555	; 0x22b
 8020218:	4a83      	ldr	r2, [pc, #524]	; (8020428 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 802021a:	4884      	ldr	r0, [pc, #528]	; (802042c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 802021c:	f000 ff2e 	bl	802107c <__assert_func>
 8020220:	2d00      	cmp	r5, #0
 8020222:	d04f      	beq.n	80202c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8020224:	6810      	ldr	r0, [r2, #0]
 8020226:	ae0c      	add	r6, sp, #48	; 0x30
 8020228:	6851      	ldr	r1, [r2, #4]
 802022a:	f8df b208 	ldr.w	fp, [pc, #520]	; 8020434 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 802022e:	c603      	stmia	r6!, {r0, r1}
 8020230:	6818      	ldr	r0, [r3, #0]
 8020232:	ae0e      	add	r6, sp, #56	; 0x38
 8020234:	6859      	ldr	r1, [r3, #4]
 8020236:	c603      	stmia	r6!, {r0, r1}
 8020238:	a80c      	add	r0, sp, #48	; 0x30
 802023a:	f7fd fb2b 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802023e:	4641      	mov	r1, r8
 8020240:	a80e      	add	r0, sp, #56	; 0x38
 8020242:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8020438 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 8020246:	f7fd fb4d 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802024a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802024e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020252:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020256:	f8db 0000 	ldr.w	r0, [fp]
 802025a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802025e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8020262:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8020266:	440c      	add	r4, r1
 8020268:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802026c:	440a      	add	r2, r1
 802026e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020272:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020276:	4413      	add	r3, r2
 8020278:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802027c:	6803      	ldr	r3, [r0, #0]
 802027e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020280:	4798      	blx	r3
 8020282:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020286:	f8db 0000 	ldr.w	r0, [fp]
 802028a:	d01e      	beq.n	80202ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 802028c:	2200      	movs	r2, #0
 802028e:	6801      	ldr	r1, [r0, #0]
 8020290:	b2b6      	uxth	r6, r6
 8020292:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020296:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802029a:	220b      	movs	r2, #11
 802029c:	9207      	str	r2, [sp, #28]
 802029e:	f8b8 2000 	ldrh.w	r2, [r8]
 80202a2:	9504      	str	r5, [sp, #16]
 80202a4:	9601      	str	r6, [sp, #4]
 80202a6:	e9cd 9205 	strd	r9, r2, [sp, #20]
 80202aa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80202ae:	9203      	str	r2, [sp, #12]
 80202b0:	fa1f f28a 	uxth.w	r2, sl
 80202b4:	9202      	str	r2, [sp, #8]
 80202b6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80202ba:	9200      	str	r2, [sp, #0]
 80202bc:	463a      	mov	r2, r7
 80202be:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80202c0:	4621      	mov	r1, r4
 80202c2:	47a8      	blx	r5
 80202c4:	b011      	add	sp, #68	; 0x44
 80202c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202ca:	6803      	ldr	r3, [r0, #0]
 80202cc:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80202d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80202d2:	4798      	blx	r3
 80202d4:	f8b8 2000 	ldrh.w	r2, [r8]
 80202d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80202dc:	2dff      	cmp	r5, #255	; 0xff
 80202de:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80202e2:	fb0a fa02 	mul.w	sl, sl, r2
 80202e6:	fb02 1303 	mla	r3, r2, r3, r1
 80202ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80202ee:	d062      	beq.n	80203b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 80202f0:	ea6f 0c05 	mvn.w	ip, r5
 80202f4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80202f8:	b2ad      	uxth	r5, r5
 80202fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80202fe:	fa5f fc8c 	uxtb.w	ip, ip
 8020302:	930a      	str	r3, [sp, #40]	; 0x28
 8020304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020306:	4298      	cmp	r0, r3
 8020308:	f080 8085 	bcs.w	8020416 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 802030c:	eb00 0b09 	add.w	fp, r0, r9
 8020310:	4558      	cmp	r0, fp
 8020312:	d246      	bcs.n	80203a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020314:	f814 eb01 	ldrb.w	lr, [r4], #1
 8020318:	2303      	movs	r3, #3
 802031a:	2204      	movs	r2, #4
 802031c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020320:	8803      	ldrh	r3, [r0, #0]
 8020322:	eb07 0a0e 	add.w	sl, r7, lr
 8020326:	1219      	asrs	r1, r3, #8
 8020328:	10da      	asrs	r2, r3, #3
 802032a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802032e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8020332:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020336:	00db      	lsls	r3, r3, #3
 8020338:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802033c:	fb18 f805 	smulbb	r8, r8, r5
 8020340:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020344:	fb1e fe05 	smulbb	lr, lr, r5
 8020348:	b2db      	uxtb	r3, r3
 802034a:	fb01 810c 	mla	r1, r1, ip, r8
 802034e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020352:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020356:	fb18 f805 	smulbb	r8, r8, r5
 802035a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802035e:	b289      	uxth	r1, r1
 8020360:	fb02 820c 	mla	r2, r2, ip, r8
 8020364:	fb03 e30c 	mla	r3, r3, ip, lr
 8020368:	f101 0801 	add.w	r8, r1, #1
 802036c:	b292      	uxth	r2, r2
 802036e:	b29b      	uxth	r3, r3
 8020370:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020374:	f102 0801 	add.w	r8, r2, #1
 8020378:	f103 0e01 	add.w	lr, r3, #1
 802037c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8020380:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020384:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020388:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802038c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020390:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020394:	ea4e 0101 	orr.w	r1, lr, r1
 8020398:	ea41 0108 	orr.w	r1, r1, r8
 802039c:	f820 1b02 	strh.w	r1, [r0], #2
 80203a0:	e7b6      	b.n	8020310 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 80203a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203a4:	881b      	ldrh	r3, [r3, #0]
 80203a6:	1b9b      	subs	r3, r3, r6
 80203a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80203ac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80203b0:	1b9b      	subs	r3, r3, r6
 80203b2:	441c      	add	r4, r3
 80203b4:	e7a6      	b.n	8020304 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 80203b6:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80203ba:	2203      	movs	r2, #3
 80203bc:	2504      	movs	r5, #4
 80203be:	491c      	ldr	r1, [pc, #112]	; (8020430 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 80203c0:	4550      	cmp	r0, sl
 80203c2:	d228      	bcs.n	8020416 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 80203c4:	eb00 0c09 	add.w	ip, r0, r9
 80203c8:	4560      	cmp	r0, ip
 80203ca:	4623      	mov	r3, r4
 80203cc:	d219      	bcs.n	8020402 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80203ce:	f893 e000 	ldrb.w	lr, [r3]
 80203d2:	3401      	adds	r4, #1
 80203d4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80203d8:	eb07 0b0e 	add.w	fp, r7, lr
 80203dc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80203e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80203e4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80203e8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80203ec:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80203f0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80203f4:	ea43 030b 	orr.w	r3, r3, fp
 80203f8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80203fc:	f820 3b02 	strh.w	r3, [r0], #2
 8020400:	e7e2      	b.n	80203c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8020402:	f8b8 3000 	ldrh.w	r3, [r8]
 8020406:	1b9b      	subs	r3, r3, r6
 8020408:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802040c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020410:	1b9b      	subs	r3, r3, r6
 8020412:	441c      	add	r4, r3
 8020414:	e7d4      	b.n	80203c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8020416:	4b07      	ldr	r3, [pc, #28]	; (8020434 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8020418:	6818      	ldr	r0, [r3, #0]
 802041a:	6803      	ldr	r3, [r0, #0]
 802041c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802041e:	4798      	blx	r3
 8020420:	e750      	b.n	80202c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8020422:	bf00      	nop
 8020424:	08025e2a 	.word	0x08025e2a
 8020428:	080262be 	.word	0x080262be
 802042c:	08025ffc 	.word	0x08025ffc
 8020430:	fffff800 	.word	0xfffff800
 8020434:	20007318 	.word	0x20007318
 8020438:	20007310 	.word	0x20007310

0802043c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802043c:	b430      	push	{r4, r5}
 802043e:	780d      	ldrb	r5, [r1, #0]
 8020440:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020444:	2d01      	cmp	r5, #1
 8020446:	d00a      	beq.n	802045e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8020448:	d305      	bcc.n	8020456 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802044a:	2d02      	cmp	r5, #2
 802044c:	d10b      	bne.n	8020466 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 802044e:	9402      	str	r4, [sp, #8]
 8020450:	bc30      	pop	{r4, r5}
 8020452:	f7ff bdf5 	b.w	8020040 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020456:	9402      	str	r4, [sp, #8]
 8020458:	bc30      	pop	{r4, r5}
 802045a:	f7ff bcfb 	b.w	801fe54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802045e:	9402      	str	r4, [sp, #8]
 8020460:	bc30      	pop	{r4, r5}
 8020462:	f7ff bec9 	b.w	80201f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020466:	bc30      	pop	{r4, r5}
 8020468:	4770      	bx	lr
	...

0802046c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 802046c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020470:	b087      	sub	sp, #28
 8020472:	4604      	mov	r4, r0
 8020474:	460e      	mov	r6, r1
 8020476:	6810      	ldr	r0, [r2, #0]
 8020478:	6851      	ldr	r1, [r2, #4]
 802047a:	ad02      	add	r5, sp, #8
 802047c:	4617      	mov	r7, r2
 802047e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020482:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80206b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020486:	c503      	stmia	r5!, {r0, r1}
 8020488:	6818      	ldr	r0, [r3, #0]
 802048a:	ad04      	add	r5, sp, #16
 802048c:	6859      	ldr	r1, [r3, #4]
 802048e:	c503      	stmia	r5!, {r0, r1}
 8020490:	a802      	add	r0, sp, #8
 8020492:	f7fd f9ff 	bl	801d894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020496:	4639      	mov	r1, r7
 8020498:	a804      	add	r0, sp, #16
 802049a:	f7fd fa23 	bl	801d8e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802049e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80204a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80204a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80204aa:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80204ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80204b2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80204b6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80204ba:	440e      	add	r6, r1
 80204bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80204c0:	440a      	add	r2, r1
 80204c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80204c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80204ca:	4413      	add	r3, r2
 80204cc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80204d0:	4b77      	ldr	r3, [pc, #476]	; (80206b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80204d2:	6818      	ldr	r0, [r3, #0]
 80204d4:	6803      	ldr	r3, [r0, #0]
 80204d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80204d8:	4798      	blx	r3
 80204da:	f8b9 b000 	ldrh.w	fp, [r9]
 80204de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80204e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80204e6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80204ea:	fb05 f50b 	mul.w	r5, r5, fp
 80204ee:	fb0b 2303 	mla	r3, fp, r3, r2
 80204f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80204f6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80204fa:	9300      	str	r3, [sp, #0]
 80204fc:	d069      	beq.n	80205d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80204fe:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020502:	4558      	cmp	r0, fp
 8020504:	f080 80cc 	bcs.w	80206a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020508:	9b00      	ldr	r3, [sp, #0]
 802050a:	4631      	mov	r1, r6
 802050c:	18c3      	adds	r3, r0, r3
 802050e:	9301      	str	r3, [sp, #4]
 8020510:	9b01      	ldr	r3, [sp, #4]
 8020512:	4298      	cmp	r0, r3
 8020514:	d24f      	bcs.n	80205b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8020516:	f811 2b01 	ldrb.w	r2, [r1], #1
 802051a:	2a00      	cmp	r2, #0
 802051c:	d048      	beq.n	80205b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802051e:	fb0a f202 	mul.w	r2, sl, r2
 8020522:	1c53      	adds	r3, r2, #1
 8020524:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020528:	121b      	asrs	r3, r3, #8
 802052a:	d041      	beq.n	80205b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802052c:	8802      	ldrh	r2, [r0, #0]
 802052e:	b29e      	uxth	r6, r3
 8020530:	f8b4 c000 	ldrh.w	ip, [r4]
 8020534:	43db      	mvns	r3, r3
 8020536:	1215      	asrs	r5, r2, #8
 8020538:	b2db      	uxtb	r3, r3
 802053a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802053e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020542:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020546:	fb15 f503 	smulbb	r5, r5, r3
 802054a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802054e:	00d2      	lsls	r2, r2, #3
 8020550:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020554:	fb07 5706 	mla	r7, r7, r6, r5
 8020558:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802055c:	b2d2      	uxtb	r2, r2
 802055e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020562:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020566:	fb1e fe03 	smulbb	lr, lr, r3
 802056a:	b2bf      	uxth	r7, r7
 802056c:	fb12 f203 	smulbb	r2, r2, r3
 8020570:	fa5f fc8c 	uxtb.w	ip, ip
 8020574:	fb05 e506 	mla	r5, r5, r6, lr
 8020578:	f107 0e01 	add.w	lr, r7, #1
 802057c:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020580:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020584:	fa1f fc8c 	uxth.w	ip, ip
 8020588:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 802058c:	b2ad      	uxth	r5, r5
 802058e:	f10c 0701 	add.w	r7, ip, #1
 8020592:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020596:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802059a:	ea47 070e 	orr.w	r7, r7, lr
 802059e:	f105 0e01 	add.w	lr, r5, #1
 80205a2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80205a6:	096d      	lsrs	r5, r5, #5
 80205a8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80205ac:	432f      	orrs	r7, r5
 80205ae:	8007      	strh	r7, [r0, #0]
 80205b0:	3002      	adds	r0, #2
 80205b2:	3402      	adds	r4, #2
 80205b4:	e7ac      	b.n	8020510 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80205b6:	f8b9 3000 	ldrh.w	r3, [r9]
 80205ba:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80205be:	eba3 0308 	sub.w	r3, r3, r8
 80205c2:	eba6 0608 	sub.w	r6, r6, r8
 80205c6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80205ca:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80205ce:	440e      	add	r6, r1
 80205d0:	e797      	b.n	8020502 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80205d2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80205d6:	42a8      	cmp	r0, r5
 80205d8:	d262      	bcs.n	80206a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80205da:	9b00      	ldr	r3, [sp, #0]
 80205dc:	4631      	mov	r1, r6
 80205de:	eb00 0b03 	add.w	fp, r0, r3
 80205e2:	4558      	cmp	r0, fp
 80205e4:	d24e      	bcs.n	8020684 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80205e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80205ea:	b12b      	cbz	r3, 80205f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80205ec:	2bff      	cmp	r3, #255	; 0xff
 80205ee:	f8b4 e000 	ldrh.w	lr, [r4]
 80205f2:	d104      	bne.n	80205fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80205f4:	f8a0 e000 	strh.w	lr, [r0]
 80205f8:	3002      	adds	r0, #2
 80205fa:	3402      	adds	r4, #2
 80205fc:	e7f1      	b.n	80205e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80205fe:	8802      	ldrh	r2, [r0, #0]
 8020600:	b29f      	uxth	r7, r3
 8020602:	43db      	mvns	r3, r3
 8020604:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020608:	1216      	asrs	r6, r2, #8
 802060a:	b2db      	uxtb	r3, r3
 802060c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020610:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020614:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020618:	00d2      	lsls	r2, r2, #3
 802061a:	fb16 f603 	smulbb	r6, r6, r3
 802061e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020622:	b2d2      	uxtb	r2, r2
 8020624:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020628:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802062c:	fb1a fa03 	smulbb	sl, sl, r3
 8020630:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020634:	fa1f fc8c 	uxth.w	ip, ip
 8020638:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802063c:	fb12 f303 	smulbb	r3, r2, r3
 8020640:	fa5f fe8e 	uxtb.w	lr, lr
 8020644:	fb06 a607 	mla	r6, r6, r7, sl
 8020648:	f10c 0201 	add.w	r2, ip, #1
 802064c:	fb0e 3307 	mla	r3, lr, r7, r3
 8020650:	b2b6      	uxth	r6, r6
 8020652:	b29b      	uxth	r3, r3
 8020654:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020658:	f106 0a01 	add.w	sl, r6, #1
 802065c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8020660:	f103 0c01 	add.w	ip, r3, #1
 8020664:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020668:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802066c:	0976      	lsrs	r6, r6, #5
 802066e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020672:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020676:	ea4c 0c02 	orr.w	ip, ip, r2
 802067a:	ea4c 0c06 	orr.w	ip, ip, r6
 802067e:	f8a0 c000 	strh.w	ip, [r0]
 8020682:	e7b9      	b.n	80205f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020684:	f8b9 3000 	ldrh.w	r3, [r9]
 8020688:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802068c:	eba3 0308 	sub.w	r3, r3, r8
 8020690:	eba6 0608 	sub.w	r6, r6, r8
 8020694:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020698:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802069c:	440e      	add	r6, r1
 802069e:	e79a      	b.n	80205d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80206a0:	4b03      	ldr	r3, [pc, #12]	; (80206b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80206a2:	6818      	ldr	r0, [r3, #0]
 80206a4:	6803      	ldr	r3, [r0, #0]
 80206a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206a8:	4798      	blx	r3
 80206aa:	b007      	add	sp, #28
 80206ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206b0:	20007318 	.word	0x20007318
 80206b4:	20007310 	.word	0x20007310

080206b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80206b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206bc:	b089      	sub	sp, #36	; 0x24
 80206be:	4682      	mov	sl, r0
 80206c0:	460f      	mov	r7, r1
 80206c2:	4691      	mov	r9, r2
 80206c4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80206c8:	4698      	mov	r8, r3
 80206ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80206cc:	2e00      	cmp	r6, #0
 80206ce:	d03d      	beq.n	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80206d0:	4608      	mov	r0, r1
 80206d2:	f7fe fa6b 	bl	801ebac <_ZNK8touchgfx6Bitmap8getWidthEv>
 80206d6:	4605      	mov	r5, r0
 80206d8:	4638      	mov	r0, r7
 80206da:	f7fe faab 	bl	801ec34 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80206de:	f8ad 000e 	strh.w	r0, [sp, #14]
 80206e2:	4638      	mov	r0, r7
 80206e4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80206e8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80206ec:	f8ad 800a 	strh.w	r8, [sp, #10]
 80206f0:	f7fe fb78 	bl	801ede4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80206f4:	4605      	mov	r5, r0
 80206f6:	4638      	mov	r0, r7
 80206f8:	f7fe fba6 	bl	801ee48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80206fc:	4681      	mov	r9, r0
 80206fe:	4638      	mov	r0, r7
 8020700:	f7fe fbfa 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020704:	280b      	cmp	r0, #11
 8020706:	f200 816f 	bhi.w	80209e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 802070a:	e8df f010 	tbh	[pc, r0, lsl #1]
 802070e:	00c3      	.short	0x00c3
 8020710:	000c00b4 	.word	0x000c00b4
 8020714:	016d016d 	.word	0x016d016d
 8020718:	016d016d 	.word	0x016d016d
 802071c:	016d016d 	.word	0x016d016d
 8020720:	016d016d 	.word	0x016d016d
 8020724:	00bb      	.short	0x00bb
 8020726:	4bb3      	ldr	r3, [pc, #716]	; (80209f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8020728:	6818      	ldr	r0, [r3, #0]
 802072a:	6803      	ldr	r3, [r0, #0]
 802072c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802072e:	4798      	blx	r3
 8020730:	2eff      	cmp	r6, #255	; 0xff
 8020732:	d121      	bne.n	8020778 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8020734:	0683      	lsls	r3, r0, #26
 8020736:	d41f      	bmi.n	8020778 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8020738:	4638      	mov	r0, r7
 802073a:	f7fe fb19 	bl	801ed70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802073e:	b940      	cbnz	r0, 8020752 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8020740:	4623      	mov	r3, r4
 8020742:	aa02      	add	r2, sp, #8
 8020744:	4629      	mov	r1, r5
 8020746:	4650      	mov	r0, sl
 8020748:	f7ff f9e4 	bl	801fb14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802074c:	b009      	add	sp, #36	; 0x24
 802074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020752:	f10d 0818 	add.w	r8, sp, #24
 8020756:	4639      	mov	r1, r7
 8020758:	af04      	add	r7, sp, #16
 802075a:	4640      	mov	r0, r8
 802075c:	f7fe faae 	bl	801ecbc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020760:	e898 0003 	ldmia.w	r8, {r0, r1}
 8020764:	e887 0003 	stmia.w	r7, {r0, r1}
 8020768:	4638      	mov	r0, r7
 802076a:	4621      	mov	r1, r4
 802076c:	f7fb f9bc 	bl	801bae8 <_ZN8touchgfx4RectaNERKS0_>
 8020770:	4638      	mov	r0, r7
 8020772:	f7fb f9fc 	bl	801bb6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8020776:	b130      	cbz	r0, 8020786 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8020778:	4633      	mov	r3, r6
 802077a:	4622      	mov	r2, r4
 802077c:	a902      	add	r1, sp, #8
 802077e:	4628      	mov	r0, r5
 8020780:	f7ff f8e2 	bl	801f948 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020784:	e7e2      	b.n	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020786:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802078a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802078e:	4293      	cmp	r3, r2
 8020790:	dd12      	ble.n	80207b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8020792:	1a9b      	subs	r3, r3, r2
 8020794:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020798:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802079c:	f8ad 0018 	strh.w	r0, [sp, #24]
 80207a0:	4628      	mov	r0, r5
 80207a2:	f8ad 201a 	strh.w	r2, [sp, #26]
 80207a6:	4642      	mov	r2, r8
 80207a8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80207ac:	a902      	add	r1, sp, #8
 80207ae:	f8ad 301e 	strh.w	r3, [sp, #30]
 80207b2:	4633      	mov	r3, r6
 80207b4:	f7ff f8c8 	bl	801f948 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80207b8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80207bc:	f9b4 2000 	ldrsh.w	r2, [r4]
 80207c0:	4293      	cmp	r3, r2
 80207c2:	dd12      	ble.n	80207ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 80207c4:	1a9b      	subs	r3, r3, r2
 80207c6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80207ca:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80207ce:	f8ad 2018 	strh.w	r2, [sp, #24]
 80207d2:	4642      	mov	r2, r8
 80207d4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80207d8:	4628      	mov	r0, r5
 80207da:	f8ad 301c 	strh.w	r3, [sp, #28]
 80207de:	23ff      	movs	r3, #255	; 0xff
 80207e0:	f8ad 101e 	strh.w	r1, [sp, #30]
 80207e4:	a902      	add	r1, sp, #8
 80207e6:	f7ff f8af 	bl	801f948 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80207ea:	463b      	mov	r3, r7
 80207ec:	aa02      	add	r2, sp, #8
 80207ee:	4629      	mov	r1, r5
 80207f0:	4650      	mov	r0, sl
 80207f2:	f7ff f98f 	bl	801fb14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80207f6:	88a2      	ldrh	r2, [r4, #4]
 80207f8:	8823      	ldrh	r3, [r4, #0]
 80207fa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80207fe:	4413      	add	r3, r2
 8020800:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020804:	440a      	add	r2, r1
 8020806:	b29b      	uxth	r3, r3
 8020808:	b292      	uxth	r2, r2
 802080a:	b218      	sxth	r0, r3
 802080c:	b211      	sxth	r1, r2
 802080e:	4288      	cmp	r0, r1
 8020810:	dd12      	ble.n	8020838 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8020812:	1a9b      	subs	r3, r3, r2
 8020814:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020818:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 802081c:	4642      	mov	r2, r8
 802081e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020822:	a902      	add	r1, sp, #8
 8020824:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020828:	23ff      	movs	r3, #255	; 0xff
 802082a:	f8ad 001e 	strh.w	r0, [sp, #30]
 802082e:	4628      	mov	r0, r5
 8020830:	f8ad 601a 	strh.w	r6, [sp, #26]
 8020834:	f7ff f888 	bl	801f948 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020838:	88e2      	ldrh	r2, [r4, #6]
 802083a:	8863      	ldrh	r3, [r4, #2]
 802083c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020840:	4413      	add	r3, r2
 8020842:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020846:	440a      	add	r2, r1
 8020848:	b29b      	uxth	r3, r3
 802084a:	b292      	uxth	r2, r2
 802084c:	b218      	sxth	r0, r3
 802084e:	b211      	sxth	r1, r2
 8020850:	4288      	cmp	r0, r1
 8020852:	f77f af7b 	ble.w	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020856:	1a9b      	subs	r3, r3, r2
 8020858:	f9b4 6000 	ldrsh.w	r6, [r4]
 802085c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020860:	4642      	mov	r2, r8
 8020862:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020866:	23ff      	movs	r3, #255	; 0xff
 8020868:	f8ad 6018 	strh.w	r6, [sp, #24]
 802086c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020870:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020874:	e782      	b.n	802077c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8020876:	4633      	mov	r3, r6
 8020878:	4622      	mov	r2, r4
 802087a:	a902      	add	r1, sp, #8
 802087c:	4628      	mov	r0, r5
 802087e:	f7ff f9b9 	bl	801fbf4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8020882:	e763      	b.n	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020884:	9600      	str	r6, [sp, #0]
 8020886:	4623      	mov	r3, r4
 8020888:	aa02      	add	r2, sp, #8
 802088a:	4649      	mov	r1, r9
 802088c:	4628      	mov	r0, r5
 802088e:	f7ff fdd5 	bl	802043c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020892:	e75b      	b.n	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020894:	4638      	mov	r0, r7
 8020896:	f7fe fa6b 	bl	801ed70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802089a:	b950      	cbnz	r0, 80208b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 802089c:	f8da 3000 	ldr.w	r3, [sl]
 80208a0:	aa02      	add	r2, sp, #8
 80208a2:	4629      	mov	r1, r5
 80208a4:	e9cd 6000 	strd	r6, r0, [sp]
 80208a8:	4650      	mov	r0, sl
 80208aa:	68de      	ldr	r6, [r3, #12]
 80208ac:	4623      	mov	r3, r4
 80208ae:	47b0      	blx	r6
 80208b0:	e74c      	b.n	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80208b2:	f10d 0818 	add.w	r8, sp, #24
 80208b6:	4639      	mov	r1, r7
 80208b8:	af04      	add	r7, sp, #16
 80208ba:	4640      	mov	r0, r8
 80208bc:	f7fe f9fe 	bl	801ecbc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80208c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80208c4:	e887 0003 	stmia.w	r7, {r0, r1}
 80208c8:	4638      	mov	r0, r7
 80208ca:	4621      	mov	r1, r4
 80208cc:	f7fb f90c 	bl	801bae8 <_ZN8touchgfx4RectaNERKS0_>
 80208d0:	4638      	mov	r0, r7
 80208d2:	f7fb f94c 	bl	801bb6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80208d6:	b138      	cbz	r0, 80208e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80208d8:	4623      	mov	r3, r4
 80208da:	9600      	str	r6, [sp, #0]
 80208dc:	aa02      	add	r2, sp, #8
 80208de:	4649      	mov	r1, r9
 80208e0:	4628      	mov	r0, r5
 80208e2:	f7ff fdc3 	bl	802046c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80208e6:	e731      	b.n	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80208e8:	f8da 3000 	ldr.w	r3, [sl]
 80208ec:	aa02      	add	r2, sp, #8
 80208ee:	4629      	mov	r1, r5
 80208f0:	e9cd 6000 	strd	r6, r0, [sp]
 80208f4:	4650      	mov	r0, sl
 80208f6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80208fa:	463b      	mov	r3, r7
 80208fc:	47d8      	blx	fp
 80208fe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020902:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020906:	4293      	cmp	r3, r2
 8020908:	dd13      	ble.n	8020932 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 802090a:	f9b4 0000 	ldrsh.w	r0, [r4]
 802090e:	1a9b      	subs	r3, r3, r2
 8020910:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020914:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020918:	4628      	mov	r0, r5
 802091a:	f8ad 201a 	strh.w	r2, [sp, #26]
 802091e:	aa02      	add	r2, sp, #8
 8020920:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020924:	4649      	mov	r1, r9
 8020926:	f8ad 301e 	strh.w	r3, [sp, #30]
 802092a:	4643      	mov	r3, r8
 802092c:	9600      	str	r6, [sp, #0]
 802092e:	f7ff fd9d 	bl	802046c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020932:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020936:	f9b4 2000 	ldrsh.w	r2, [r4]
 802093a:	4293      	cmp	r3, r2
 802093c:	dd13      	ble.n	8020966 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 802093e:	1a9b      	subs	r3, r3, r2
 8020940:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8020944:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020948:	f8ad 2018 	strh.w	r2, [sp, #24]
 802094c:	aa02      	add	r2, sp, #8
 802094e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020952:	4628      	mov	r0, r5
 8020954:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020958:	4643      	mov	r3, r8
 802095a:	f8ad 101e 	strh.w	r1, [sp, #30]
 802095e:	4649      	mov	r1, r9
 8020960:	9600      	str	r6, [sp, #0]
 8020962:	f7ff fd83 	bl	802046c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020966:	88a2      	ldrh	r2, [r4, #4]
 8020968:	8823      	ldrh	r3, [r4, #0]
 802096a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802096e:	4413      	add	r3, r2
 8020970:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020974:	440a      	add	r2, r1
 8020976:	b29b      	uxth	r3, r3
 8020978:	b292      	uxth	r2, r2
 802097a:	b218      	sxth	r0, r3
 802097c:	b211      	sxth	r1, r2
 802097e:	4288      	cmp	r0, r1
 8020980:	dd13      	ble.n	80209aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8020982:	1a9b      	subs	r3, r3, r2
 8020984:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020988:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 802098c:	aa02      	add	r2, sp, #8
 802098e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020992:	4649      	mov	r1, r9
 8020994:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020998:	4643      	mov	r3, r8
 802099a:	f8ad 001e 	strh.w	r0, [sp, #30]
 802099e:	4628      	mov	r0, r5
 80209a0:	9600      	str	r6, [sp, #0]
 80209a2:	f8ad 701a 	strh.w	r7, [sp, #26]
 80209a6:	f7ff fd61 	bl	802046c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80209aa:	88e2      	ldrh	r2, [r4, #6]
 80209ac:	8863      	ldrh	r3, [r4, #2]
 80209ae:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80209b2:	4413      	add	r3, r2
 80209b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80209b8:	440a      	add	r2, r1
 80209ba:	b29b      	uxth	r3, r3
 80209bc:	b292      	uxth	r2, r2
 80209be:	b218      	sxth	r0, r3
 80209c0:	b211      	sxth	r1, r2
 80209c2:	4288      	cmp	r0, r1
 80209c4:	f77f aec2 	ble.w	802074c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80209c8:	f9b4 7000 	ldrsh.w	r7, [r4]
 80209cc:	1a9b      	subs	r3, r3, r2
 80209ce:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80209d2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80209d6:	4643      	mov	r3, r8
 80209d8:	f8ad 7018 	strh.w	r7, [sp, #24]
 80209dc:	f8ad 101a 	strh.w	r1, [sp, #26]
 80209e0:	f8ad 001c 	strh.w	r0, [sp, #28]
 80209e4:	9600      	str	r6, [sp, #0]
 80209e6:	e779      	b.n	80208dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 80209e8:	4b03      	ldr	r3, [pc, #12]	; (80209f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 80209ea:	21b0      	movs	r1, #176	; 0xb0
 80209ec:	4a03      	ldr	r2, [pc, #12]	; (80209fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 80209ee:	4804      	ldr	r0, [pc, #16]	; (8020a00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 80209f0:	f000 fb44 	bl	802107c <__assert_func>
 80209f4:	20007318 	.word	0x20007318
 80209f8:	08025e78 	.word	0x08025e78
 80209fc:	08026347 	.word	0x08026347
 8020a00:	08025ffc 	.word	0x08025ffc

08020a04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8020a04:	b508      	push	{r3, lr}
 8020a06:	b180      	cbz	r0, 8020a2a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8020a08:	2902      	cmp	r1, #2
 8020a0a:	d014      	beq.n	8020a36 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8020a0c:	2903      	cmp	r1, #3
 8020a0e:	d01d      	beq.n	8020a4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8020a10:	2901      	cmp	r1, #1
 8020a12:	d101      	bne.n	8020a18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8020a14:	2001      	movs	r0, #1
 8020a16:	bd08      	pop	{r3, pc}
 8020a18:	4b0e      	ldr	r3, [pc, #56]	; (8020a54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020a1a:	8818      	ldrh	r0, [r3, #0]
 8020a1c:	b990      	cbnz	r0, 8020a44 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020a1e:	4b0e      	ldr	r3, [pc, #56]	; (8020a58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8020a20:	2153      	movs	r1, #83	; 0x53
 8020a22:	4a0e      	ldr	r2, [pc, #56]	; (8020a5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8020a24:	480e      	ldr	r0, [pc, #56]	; (8020a60 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8020a26:	f000 fb29 	bl	802107c <__assert_func>
 8020a2a:	2902      	cmp	r1, #2
 8020a2c:	d00e      	beq.n	8020a4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8020a2e:	2903      	cmp	r1, #3
 8020a30:	d0f2      	beq.n	8020a18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8020a32:	2901      	cmp	r1, #1
 8020a34:	d1ee      	bne.n	8020a14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8020a36:	4b07      	ldr	r3, [pc, #28]	; (8020a54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020a38:	8818      	ldrh	r0, [r3, #0]
 8020a3a:	2800      	cmp	r0, #0
 8020a3c:	d0ef      	beq.n	8020a1e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8020a3e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020a42:	e7e8      	b.n	8020a16 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020a44:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020a48:	4240      	negs	r0, r0
 8020a4a:	e7e4      	b.n	8020a16 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a50:	e7e1      	b.n	8020a16 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020a52:	bf00      	nop
 8020a54:	20007310 	.word	0x20007310
 8020a58:	080260f2 	.word	0x080260f2
 8020a5c:	08026456 	.word	0x08026456
 8020a60:	08026134 	.word	0x08026134

08020a64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8020a64:	b508      	push	{r3, lr}
 8020a66:	b180      	cbz	r0, 8020a8a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8020a68:	2902      	cmp	r1, #2
 8020a6a:	d014      	beq.n	8020a96 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8020a6c:	2903      	cmp	r1, #3
 8020a6e:	d018      	beq.n	8020aa2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8020a70:	2901      	cmp	r1, #1
 8020a72:	d001      	beq.n	8020a78 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8020a74:	2001      	movs	r0, #1
 8020a76:	e013      	b.n	8020aa0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8020a78:	4b0e      	ldr	r3, [pc, #56]	; (8020ab4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020a7a:	8818      	ldrh	r0, [r3, #0]
 8020a7c:	b970      	cbnz	r0, 8020a9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8020a7e:	4b0e      	ldr	r3, [pc, #56]	; (8020ab8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8020a80:	2153      	movs	r1, #83	; 0x53
 8020a82:	4a0e      	ldr	r2, [pc, #56]	; (8020abc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8020a84:	480e      	ldr	r0, [pc, #56]	; (8020ac0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8020a86:	f000 faf9 	bl	802107c <__assert_func>
 8020a8a:	2902      	cmp	r1, #2
 8020a8c:	d009      	beq.n	8020aa2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8020a8e:	2903      	cmp	r1, #3
 8020a90:	d0f0      	beq.n	8020a74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8020a92:	2901      	cmp	r1, #1
 8020a94:	d1f0      	bne.n	8020a78 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8020a96:	f04f 30ff 	mov.w	r0, #4294967295
 8020a9a:	e001      	b.n	8020aa0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8020a9c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020aa0:	bd08      	pop	{r3, pc}
 8020aa2:	4b04      	ldr	r3, [pc, #16]	; (8020ab4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020aa4:	8818      	ldrh	r0, [r3, #0]
 8020aa6:	2800      	cmp	r0, #0
 8020aa8:	d0e9      	beq.n	8020a7e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8020aaa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020aae:	4240      	negs	r0, r0
 8020ab0:	e7f6      	b.n	8020aa0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8020ab2:	bf00      	nop
 8020ab4:	20007310 	.word	0x20007310
 8020ab8:	080260f2 	.word	0x080260f2
 8020abc:	08026456 	.word	0x08026456
 8020ac0:	08026134 	.word	0x08026134

08020ac4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ac8:	b099      	sub	sp, #100	; 0x64
 8020aca:	910b      	str	r1, [sp, #44]	; 0x2c
 8020acc:	a914      	add	r1, sp, #80	; 0x50
 8020ace:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8020ad2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8020ad6:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8020ada:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8020ade:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8020ae2:	e881 000c 	stmia.w	r1, {r2, r3}
 8020ae6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8020aea:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8020aee:	930a      	str	r3, [sp, #40]	; 0x28
 8020af0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020af4:	f891 900d 	ldrb.w	r9, [r1, #13]
 8020af8:	9311      	str	r3, [sp, #68]	; 0x44
 8020afa:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8020afe:	7988      	ldrb	r0, [r1, #6]
 8020b00:	930c      	str	r3, [sp, #48]	; 0x30
 8020b02:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8020b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020b0a:	4303      	orrs	r3, r0
 8020b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8020b0e:	f000 81a1 	beq.w	8020e54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020b12:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8020b16:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8020b1a:	f891 9007 	ldrb.w	r9, [r1, #7]
 8020b1e:	ea59 0903 	orrs.w	r9, r9, r3
 8020b22:	f000 8197 	beq.w	8020e54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020b26:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020b2a:	b29b      	uxth	r3, r3
 8020b2c:	2e00      	cmp	r6, #0
 8020b2e:	f000 813a 	beq.w	8020da6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8020b32:	1af6      	subs	r6, r6, r3
 8020b34:	b2b6      	uxth	r6, r6
 8020b36:	0433      	lsls	r3, r6, #16
 8020b38:	d502      	bpl.n	8020b40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8020b3a:	1bad      	subs	r5, r5, r6
 8020b3c:	2600      	movs	r6, #0
 8020b3e:	b22d      	sxth	r5, r5
 8020b40:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020b44:	a814      	add	r0, sp, #80	; 0x50
 8020b46:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020b4a:	428d      	cmp	r5, r1
 8020b4c:	b28b      	uxth	r3, r1
 8020b4e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8020b52:	bfbf      	itttt	lt
 8020b54:	18f6      	addlt	r6, r6, r3
 8020b56:	1b75      	sublt	r5, r6, r5
 8020b58:	b2ae      	uxthlt	r6, r5
 8020b5a:	460d      	movlt	r5, r1
 8020b5c:	8891      	ldrh	r1, [r2, #4]
 8020b5e:	440b      	add	r3, r1
 8020b60:	4629      	mov	r1, r5
 8020b62:	b21b      	sxth	r3, r3
 8020b64:	9310      	str	r3, [sp, #64]	; 0x40
 8020b66:	88d3      	ldrh	r3, [r2, #6]
 8020b68:	8852      	ldrh	r2, [r2, #2]
 8020b6a:	4413      	add	r3, r2
 8020b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b6e:	b21b      	sxth	r3, r3
 8020b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b72:	4bbd      	ldr	r3, [pc, #756]	; (8020e68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8020b74:	f893 b000 	ldrb.w	fp, [r3]
 8020b78:	f10b 3cff 	add.w	ip, fp, #4294967295
 8020b7c:	f1dc 0300 	rsbs	r3, ip, #0
 8020b80:	eb43 030c 	adc.w	r3, r3, ip
 8020b84:	930e      	str	r3, [sp, #56]	; 0x38
 8020b86:	4653      	mov	r3, sl
 8020b88:	f7fc fd22 	bl	801d5d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020b8c:	4629      	mov	r1, r5
 8020b8e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8020b92:	4653      	mov	r3, sl
 8020b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b96:	a814      	add	r0, sp, #80	; 0x50
 8020b98:	f7fc fd32 	bl	801d600 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020b9c:	a918      	add	r1, sp, #96	; 0x60
 8020b9e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020ba2:	a817      	add	r0, sp, #92	; 0x5c
 8020ba4:	f7fc fe4e 	bl	801d844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020ba8:	f1ba 0f00 	cmp.w	sl, #0
 8020bac:	f040 80fe 	bne.w	8020dac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8020bb0:	f1bb 0f01 	cmp.w	fp, #1
 8020bb4:	f040 8102 	bne.w	8020dbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8020bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020bba:	b153      	cbz	r3, 8020bd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8020bbc:	2408      	movs	r4, #8
 8020bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020bc0:	fb94 f3f8 	sdiv	r3, r4, r8
 8020bc4:	1e5c      	subs	r4, r3, #1
 8020bc6:	4414      	add	r4, r2
 8020bc8:	fb94 f4f3 	sdiv	r4, r4, r3
 8020bcc:	fb14 f403 	smulbb	r4, r4, r3
 8020bd0:	b2a4      	uxth	r4, r4
 8020bd2:	b906      	cbnz	r6, 8020bd6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8020bd4:	b16f      	cbz	r7, 8020bf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8020bd6:	fb07 6304 	mla	r3, r7, r4, r6
 8020bda:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020bdc:	463a      	mov	r2, r7
 8020bde:	fb08 f303 	mul.w	r3, r8, r3
 8020be2:	f003 0707 	and.w	r7, r3, #7
 8020be6:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8020bea:	9328      	str	r3, [sp, #160]	; 0xa0
 8020bec:	eba9 0302 	sub.w	r3, r9, r2
 8020bf0:	930d      	str	r3, [sp, #52]	; 0x34
 8020bf2:	4651      	mov	r1, sl
 8020bf4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020bf6:	f7ff ff05 	bl	8020a04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020bfa:	4651      	mov	r1, sl
 8020bfc:	4681      	mov	r9, r0
 8020bfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020c00:	f7ff ff30 	bl	8020a64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c08:	4683      	mov	fp, r0
 8020c0a:	eba3 0a02 	sub.w	sl, r3, r2
 8020c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c10:	459a      	cmp	sl, r3
 8020c12:	bfa8      	it	ge
 8020c14:	469a      	movge	sl, r3
 8020c16:	f1ba 0f00 	cmp.w	sl, #0
 8020c1a:	f340 811b 	ble.w	8020e54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020c1e:	1bad      	subs	r5, r5, r6
 8020c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c22:	1b5d      	subs	r5, r3, r5
 8020c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c26:	429d      	cmp	r5, r3
 8020c28:	bfd4      	ite	le
 8020c2a:	ebc6 0605 	rsble	r6, r6, r5
 8020c2e:	ebc6 0603 	rsbgt	r6, r6, r3
 8020c32:	2e00      	cmp	r6, #0
 8020c34:	f340 810e 	ble.w	8020e54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020c38:	1ba4      	subs	r4, r4, r6
 8020c3a:	fb08 f304 	mul.w	r3, r8, r4
 8020c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020c42:	2b00      	cmp	r3, #0
 8020c44:	f040 810b 	bne.w	8020e5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020c48:	4b88      	ldr	r3, [pc, #544]	; (8020e6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8020c4a:	6818      	ldr	r0, [r3, #0]
 8020c4c:	6803      	ldr	r3, [r0, #0]
 8020c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c50:	4798      	blx	r3
 8020c52:	2301      	movs	r3, #1
 8020c54:	4a86      	ldr	r2, [pc, #536]	; (8020e70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8020c56:	fa03 f308 	lsl.w	r3, r3, r8
 8020c5a:	8811      	ldrh	r1, [r2, #0]
 8020c5c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8020c60:	3b01      	subs	r3, #1
 8020c62:	b2db      	uxtb	r3, r3
 8020c64:	930e      	str	r3, [sp, #56]	; 0x38
 8020c66:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8020c6a:	fb01 2303 	mla	r3, r1, r3, r2
 8020c6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020c72:	930a      	str	r3, [sp, #40]	; 0x28
 8020c74:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c76:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020c7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8020c7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c7e:	0a19      	lsrs	r1, r3, #8
 8020c80:	b2cb      	uxtb	r3, r1
 8020c82:	9312      	str	r3, [sp, #72]	; 0x48
 8020c84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c86:	b2db      	uxtb	r3, r3
 8020c88:	9311      	str	r3, [sp, #68]	; 0x44
 8020c8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c8c:	095a      	lsrs	r2, r3, #5
 8020c8e:	4b79      	ldr	r3, [pc, #484]	; (8020e74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8020c90:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020c94:	400b      	ands	r3, r1
 8020c96:	4313      	orrs	r3, r2
 8020c98:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020c9a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020c9e:	4313      	orrs	r3, r2
 8020ca0:	b29b      	uxth	r3, r3
 8020ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8020ca4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ca6:	781a      	ldrb	r2, [r3, #0]
 8020ca8:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8020cac:	fb06 b919 	mls	r9, r6, r9, fp
 8020cb0:	413a      	asrs	r2, r7
 8020cb2:	fb03 fb06 	mul.w	fp, r3, r6
 8020cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8020cb8:	b2d2      	uxtb	r2, r2
 8020cba:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8020cbe:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020cc2:	f0c0 80ea 	bcc.w	8020e9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 8020cc6:	46b6      	mov	lr, r6
 8020cc8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8020ccc:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8020cd0:	f0c0 80d2 	bcc.w	8020e78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8020cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cd6:	4013      	ands	r3, r2
 8020cd8:	d055      	beq.n	8020d86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8020cda:	20ff      	movs	r0, #255	; 0xff
 8020cdc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020cde:	fb90 f1f1 	sdiv	r1, r0, r1
 8020ce2:	434b      	muls	r3, r1
 8020ce4:	2bfe      	cmp	r3, #254	; 0xfe
 8020ce6:	dd03      	ble.n	8020cf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8020ce8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020cea:	4281      	cmp	r1, r0
 8020cec:	f000 80b9 	beq.w	8020e62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8020cf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020cf2:	f8bc 4000 	ldrh.w	r4, [ip]
 8020cf6:	fb11 f303 	smulbb	r3, r1, r3
 8020cfa:	1220      	asrs	r0, r4, #8
 8020cfc:	b29b      	uxth	r3, r3
 8020cfe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020d02:	1c59      	adds	r1, r3, #1
 8020d04:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8020d08:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020d0c:	10e1      	asrs	r1, r4, #3
 8020d0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020d12:	00e4      	lsls	r4, r4, #3
 8020d14:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020d18:	b29d      	uxth	r5, r3
 8020d1a:	43db      	mvns	r3, r3
 8020d1c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8020d20:	b2db      	uxtb	r3, r3
 8020d22:	b2e4      	uxtb	r4, r4
 8020d24:	9309      	str	r3, [sp, #36]	; 0x24
 8020d26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020d28:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020d2c:	fb13 f905 	smulbb	r9, r3, r5
 8020d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d32:	fb00 9003 	mla	r0, r0, r3, r9
 8020d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020d38:	fb13 f905 	smulbb	r9, r3, r5
 8020d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d3e:	b280      	uxth	r0, r0
 8020d40:	fb01 9103 	mla	r1, r1, r3, r9
 8020d44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020d46:	fb13 f505 	smulbb	r5, r3, r5
 8020d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d4c:	b289      	uxth	r1, r1
 8020d4e:	fb04 5403 	mla	r4, r4, r3, r5
 8020d52:	1c43      	adds	r3, r0, #1
 8020d54:	b2a4      	uxth	r4, r4
 8020d56:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020d5a:	f104 0901 	add.w	r9, r4, #1
 8020d5e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020d62:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8020d66:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8020d6a:	ea49 0000 	orr.w	r0, r9, r0
 8020d6e:	f101 0901 	add.w	r9, r1, #1
 8020d72:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8020d76:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020d7a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020d7e:	ea40 0009 	orr.w	r0, r0, r9
 8020d82:	f8ac 0000 	strh.w	r0, [ip]
 8020d86:	4447      	add	r7, r8
 8020d88:	b2bf      	uxth	r7, r7
 8020d8a:	2f07      	cmp	r7, #7
 8020d8c:	bf89      	itett	hi
 8020d8e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8020d90:	fa42 f208 	asrls.w	r2, r2, r8
 8020d94:	2700      	movhi	r7, #0
 8020d96:	785a      	ldrbhi	r2, [r3, #1]
 8020d98:	bf8a      	itet	hi
 8020d9a:	3301      	addhi	r3, #1
 8020d9c:	b2d2      	uxtbls	r2, r2
 8020d9e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8020da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020da2:	449c      	add	ip, r3
 8020da4:	e792      	b.n	8020ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8020da6:	441d      	add	r5, r3
 8020da8:	b22d      	sxth	r5, r5
 8020daa:	e6c9      	b.n	8020b40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8020dac:	f1ba 0f01 	cmp.w	sl, #1
 8020db0:	f47f af02 	bne.w	8020bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8020db4:	f1bb 0f01 	cmp.w	fp, #1
 8020db8:	f47f aefe 	bne.w	8020bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8020dbc:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8020e6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8020dc0:	f8db 0000 	ldr.w	r0, [fp]
 8020dc4:	6803      	ldr	r3, [r0, #0]
 8020dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020dc8:	4798      	blx	r3
 8020dca:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8020dce:	465a      	mov	r2, fp
 8020dd0:	d006      	beq.n	8020de0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8020dd2:	f1b8 0f04 	cmp.w	r8, #4
 8020dd6:	d140      	bne.n	8020e5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8020dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020dda:	3300      	adds	r3, #0
 8020ddc:	bf18      	it	ne
 8020dde:	2301      	movne	r3, #1
 8020de0:	0580      	lsls	r0, r0, #22
 8020de2:	d563      	bpl.n	8020eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8020de4:	f1b8 0f08 	cmp.w	r8, #8
 8020de8:	d160      	bne.n	8020eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	bf0c      	ite	eq
 8020dee:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8020df2:	f44f 7180 	movne.w	r1, #256	; 0x100
 8020df6:	2e00      	cmp	r6, #0
 8020df8:	f47f aede 	bne.w	8020bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8020dfc:	2f00      	cmp	r7, #0
 8020dfe:	f47f aedb 	bne.w	8020bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8020e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020e06:	18eb      	adds	r3, r5, r3
 8020e08:	4283      	cmp	r3, r0
 8020e0a:	f73f aed5 	bgt.w	8020bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8020e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020e12:	444b      	add	r3, r9
 8020e14:	4283      	cmp	r3, r0
 8020e16:	f73f aecf 	bgt.w	8020bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8020e1a:	f1b8 0f08 	cmp.w	r8, #8
 8020e1e:	6810      	ldr	r0, [r2, #0]
 8020e20:	f04f 0600 	mov.w	r6, #0
 8020e24:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8020e28:	bf18      	it	ne
 8020e2a:	3401      	addne	r4, #1
 8020e2c:	6805      	ldr	r5, [r0, #0]
 8020e2e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8020e32:	bf18      	it	ne
 8020e34:	f024 0401 	bicne.w	r4, r4, #1
 8020e38:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8020e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020e3e:	bf18      	it	ne
 8020e40:	b2a4      	uxthne	r4, r4
 8020e42:	9104      	str	r1, [sp, #16]
 8020e44:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020e46:	e9cd 4900 	strd	r4, r9, [sp]
 8020e4a:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8020e4e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020e50:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8020e52:	47a0      	blx	r4
 8020e54:	b019      	add	sp, #100	; 0x64
 8020e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e5a:	2300      	movs	r3, #0
 8020e5c:	e7c0      	b.n	8020de0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8020e5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020e60:	e6f7      	b.n	8020c52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8020e62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020e64:	e78d      	b.n	8020d82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8020e66:	bf00      	nop
 8020e68:	2000730e 	.word	0x2000730e
 8020e6c:	20007318 	.word	0x20007318
 8020e70:	20007310 	.word	0x20007310
 8020e74:	00fff800 	.word	0x00fff800
 8020e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020e7a:	b153      	cbz	r3, 8020e92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8020e7c:	441f      	add	r7, r3
 8020e7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e80:	b2bf      	uxth	r7, r7
 8020e82:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8020e86:	f007 0707 	and.w	r7, r7, #7
 8020e8a:	781a      	ldrb	r2, [r3, #0]
 8020e8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8020e8e:	413a      	asrs	r2, r7
 8020e90:	b2d2      	uxtb	r2, r2
 8020e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e94:	445b      	add	r3, fp
 8020e96:	930a      	str	r3, [sp, #40]	; 0x28
 8020e98:	e711      	b.n	8020cbe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8020e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d1d9      	bne.n	8020e54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020ea0:	4b05      	ldr	r3, [pc, #20]	; (8020eb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8020ea2:	6818      	ldr	r0, [r3, #0]
 8020ea4:	6803      	ldr	r3, [r0, #0]
 8020ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020ea8:	4798      	blx	r3
 8020eaa:	e7d3      	b.n	8020e54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020eac:	2b00      	cmp	r3, #0
 8020eae:	f43f ae83 	beq.w	8020bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8020eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020eb6:	e79e      	b.n	8020df6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8020eb8:	20007318 	.word	0x20007318

08020ebc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020ebc:	6101      	str	r1, [r0, #16]
 8020ebe:	4770      	bx	lr

08020ec0 <_ZN8touchgfx8Gestures4tickEv>:
 8020ec0:	7b83      	ldrb	r3, [r0, #14]
 8020ec2:	b14b      	cbz	r3, 8020ed8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020ec4:	8903      	ldrh	r3, [r0, #8]
 8020ec6:	3301      	adds	r3, #1
 8020ec8:	b29b      	uxth	r3, r3
 8020eca:	2b07      	cmp	r3, #7
 8020ecc:	8103      	strh	r3, [r0, #8]
 8020ece:	bf81      	itttt	hi
 8020ed0:	2300      	movhi	r3, #0
 8020ed2:	8143      	strhhi	r3, [r0, #10]
 8020ed4:	8183      	strhhi	r3, [r0, #12]
 8020ed6:	7383      	strbhi	r3, [r0, #14]
 8020ed8:	4770      	bx	lr
	...

08020edc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020edc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020ee0:	4698      	mov	r8, r3
 8020ee2:	8883      	ldrh	r3, [r0, #4]
 8020ee4:	4604      	mov	r4, r0
 8020ee6:	4617      	mov	r7, r2
 8020ee8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020eec:	eba8 0303 	sub.w	r3, r8, r3
 8020ef0:	4a19      	ldr	r2, [pc, #100]	; (8020f58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8020ef2:	460e      	mov	r6, r1
 8020ef4:	b21b      	sxth	r3, r3
 8020ef6:	88c1      	ldrh	r1, [r0, #6]
 8020ef8:	9200      	str	r2, [sp, #0]
 8020efa:	2000      	movs	r0, #0
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	8aa2      	ldrh	r2, [r4, #20]
 8020f00:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8020f04:	bfb8      	it	lt
 8020f06:	425b      	neglt	r3, r3
 8020f08:	f88d 0004 	strb.w	r0, [sp, #4]
 8020f0c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020f10:	b21b      	sxth	r3, r3
 8020f12:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020f16:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020f1a:	4293      	cmp	r3, r2
 8020f1c:	dc07      	bgt.n	8020f2e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8020f1e:	1a69      	subs	r1, r5, r1
 8020f20:	b209      	sxth	r1, r1
 8020f22:	2900      	cmp	r1, #0
 8020f24:	bfb8      	it	lt
 8020f26:	4249      	neglt	r1, r1
 8020f28:	b209      	sxth	r1, r1
 8020f2a:	428a      	cmp	r2, r1
 8020f2c:	da10      	bge.n	8020f50 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8020f2e:	6920      	ldr	r0, [r4, #16]
 8020f30:	4669      	mov	r1, sp
 8020f32:	eba8 0606 	sub.w	r6, r8, r6
 8020f36:	1bef      	subs	r7, r5, r7
 8020f38:	6803      	ldr	r3, [r0, #0]
 8020f3a:	685b      	ldr	r3, [r3, #4]
 8020f3c:	4798      	blx	r3
 8020f3e:	2300      	movs	r3, #0
 8020f40:	2001      	movs	r0, #1
 8020f42:	8166      	strh	r6, [r4, #10]
 8020f44:	8123      	strh	r3, [r4, #8]
 8020f46:	81a7      	strh	r7, [r4, #12]
 8020f48:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020f4c:	80e5      	strh	r5, [r4, #6]
 8020f4e:	73a0      	strb	r0, [r4, #14]
 8020f50:	b004      	add	sp, #16
 8020f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f56:	bf00      	nop
 8020f58:	08024c58 	.word	0x08024c58

08020f5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f5e:	461e      	mov	r6, r3
 8020f60:	1e4b      	subs	r3, r1, #1
 8020f62:	b085      	sub	sp, #20
 8020f64:	4604      	mov	r4, r0
 8020f66:	2b01      	cmp	r3, #1
 8020f68:	460d      	mov	r5, r1
 8020f6a:	4617      	mov	r7, r2
 8020f6c:	d84b      	bhi.n	8021006 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020f6e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020f72:	1cd3      	adds	r3, r2, #3
 8020f74:	b29b      	uxth	r3, r3
 8020f76:	2b06      	cmp	r3, #6
 8020f78:	d916      	bls.n	8020fa8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8020f7a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802101c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020f7e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020f82:	f8cd c004 	str.w	ip, [sp, #4]
 8020f86:	f04f 0c00 	mov.w	ip, #0
 8020f8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020f8e:	6900      	ldr	r0, [r0, #16]
 8020f90:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020f94:	a901      	add	r1, sp, #4
 8020f96:	f88d c008 	strb.w	ip, [sp, #8]
 8020f9a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020f9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020fa2:	6803      	ldr	r3, [r0, #0]
 8020fa4:	689b      	ldr	r3, [r3, #8]
 8020fa6:	4798      	blx	r3
 8020fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020fac:	1cd3      	adds	r3, r2, #3
 8020fae:	b29b      	uxth	r3, r3
 8020fb0:	2b06      	cmp	r3, #6
 8020fb2:	d916      	bls.n	8020fe2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020fb4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802101c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020fb8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020fbc:	f8cd c004 	str.w	ip, [sp, #4]
 8020fc0:	f04f 0c01 	mov.w	ip, #1
 8020fc4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020fc8:	6920      	ldr	r0, [r4, #16]
 8020fca:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020fce:	a901      	add	r1, sp, #4
 8020fd0:	f88d c008 	strb.w	ip, [sp, #8]
 8020fd4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020fd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020fdc:	6803      	ldr	r3, [r0, #0]
 8020fde:	689b      	ldr	r3, [r3, #8]
 8020fe0:	4798      	blx	r3
 8020fe2:	4b0d      	ldr	r3, [pc, #52]	; (8021018 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8020fe4:	a901      	add	r1, sp, #4
 8020fe6:	6920      	ldr	r0, [r4, #16]
 8020fe8:	9301      	str	r3, [sp, #4]
 8020fea:	2300      	movs	r3, #0
 8020fec:	f88d 5008 	strb.w	r5, [sp, #8]
 8020ff0:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020ff4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8020ff8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020ffc:	6803      	ldr	r3, [r0, #0]
 8020ffe:	681b      	ldr	r3, [r3, #0]
 8021000:	4798      	blx	r3
 8021002:	b005      	add	sp, #20
 8021004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021006:	2900      	cmp	r1, #0
 8021008:	d1eb      	bne.n	8020fe2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802100a:	80a2      	strh	r2, [r4, #4]
 802100c:	80c6      	strh	r6, [r0, #6]
 802100e:	60a1      	str	r1, [r4, #8]
 8021010:	81a1      	strh	r1, [r4, #12]
 8021012:	73a1      	strb	r1, [r4, #14]
 8021014:	e7e5      	b.n	8020fe2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021016:	bf00      	nop
 8021018:	08024c44 	.word	0x08024c44
 802101c:	080255fc 	.word	0x080255fc

08021020 <_ZdlPvj>:
 8021020:	f000 b812 	b.w	8021048 <_ZdlPv>

08021024 <__cxa_guard_acquire>:
 8021024:	6803      	ldr	r3, [r0, #0]
 8021026:	07db      	lsls	r3, r3, #31
 8021028:	d406      	bmi.n	8021038 <__cxa_guard_acquire+0x14>
 802102a:	7843      	ldrb	r3, [r0, #1]
 802102c:	b103      	cbz	r3, 8021030 <__cxa_guard_acquire+0xc>
 802102e:	deff      	udf	#255	; 0xff
 8021030:	2301      	movs	r3, #1
 8021032:	7043      	strb	r3, [r0, #1]
 8021034:	4618      	mov	r0, r3
 8021036:	4770      	bx	lr
 8021038:	2000      	movs	r0, #0
 802103a:	4770      	bx	lr

0802103c <__cxa_guard_release>:
 802103c:	2301      	movs	r3, #1
 802103e:	6003      	str	r3, [r0, #0]
 8021040:	4770      	bx	lr

08021042 <__cxa_pure_virtual>:
 8021042:	b508      	push	{r3, lr}
 8021044:	f000 f80e 	bl	8021064 <_ZSt9terminatev>

08021048 <_ZdlPv>:
 8021048:	f000 b97a 	b.w	8021340 <free>

0802104c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802104c:	b508      	push	{r3, lr}
 802104e:	4780      	blx	r0
 8021050:	f000 f80d 	bl	802106e <abort>

08021054 <_ZSt13get_terminatev>:
 8021054:	4b02      	ldr	r3, [pc, #8]	; (8021060 <_ZSt13get_terminatev+0xc>)
 8021056:	6818      	ldr	r0, [r3, #0]
 8021058:	f3bf 8f5b 	dmb	ish
 802105c:	4770      	bx	lr
 802105e:	bf00      	nop
 8021060:	2000013c 	.word	0x2000013c

08021064 <_ZSt9terminatev>:
 8021064:	b508      	push	{r3, lr}
 8021066:	f7ff fff5 	bl	8021054 <_ZSt13get_terminatev>
 802106a:	f7ff ffef 	bl	802104c <_ZN10__cxxabiv111__terminateEPFvvE>

0802106e <abort>:
 802106e:	b508      	push	{r3, lr}
 8021070:	2006      	movs	r0, #6
 8021072:	f001 f8a1 	bl	80221b8 <raise>
 8021076:	2001      	movs	r0, #1
 8021078:	f7e2 fd18 	bl	8003aac <_exit>

0802107c <__assert_func>:
 802107c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802107e:	4614      	mov	r4, r2
 8021080:	461a      	mov	r2, r3
 8021082:	4b09      	ldr	r3, [pc, #36]	; (80210a8 <__assert_func+0x2c>)
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	4605      	mov	r5, r0
 8021088:	68d8      	ldr	r0, [r3, #12]
 802108a:	b14c      	cbz	r4, 80210a0 <__assert_func+0x24>
 802108c:	4b07      	ldr	r3, [pc, #28]	; (80210ac <__assert_func+0x30>)
 802108e:	9100      	str	r1, [sp, #0]
 8021090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021094:	4906      	ldr	r1, [pc, #24]	; (80210b0 <__assert_func+0x34>)
 8021096:	462b      	mov	r3, r5
 8021098:	f000 f8f0 	bl	802127c <fiprintf>
 802109c:	f7ff ffe7 	bl	802106e <abort>
 80210a0:	4b04      	ldr	r3, [pc, #16]	; (80210b4 <__assert_func+0x38>)
 80210a2:	461c      	mov	r4, r3
 80210a4:	e7f3      	b.n	802108e <__assert_func+0x12>
 80210a6:	bf00      	nop
 80210a8:	20000140 	.word	0x20000140
 80210ac:	08026641 	.word	0x08026641
 80210b0:	0802664e 	.word	0x0802664e
 80210b4:	0802667c 	.word	0x0802667c

080210b8 <atexit>:
 80210b8:	2300      	movs	r3, #0
 80210ba:	4601      	mov	r1, r0
 80210bc:	461a      	mov	r2, r3
 80210be:	4618      	mov	r0, r3
 80210c0:	f001 b9cc 	b.w	802245c <__register_exitproc>

080210c4 <__errno>:
 80210c4:	4b01      	ldr	r3, [pc, #4]	; (80210cc <__errno+0x8>)
 80210c6:	6818      	ldr	r0, [r3, #0]
 80210c8:	4770      	bx	lr
 80210ca:	bf00      	nop
 80210cc:	20000140 	.word	0x20000140

080210d0 <std>:
 80210d0:	2300      	movs	r3, #0
 80210d2:	b510      	push	{r4, lr}
 80210d4:	4604      	mov	r4, r0
 80210d6:	e9c0 3300 	strd	r3, r3, [r0]
 80210da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80210de:	6083      	str	r3, [r0, #8]
 80210e0:	8181      	strh	r1, [r0, #12]
 80210e2:	6643      	str	r3, [r0, #100]	; 0x64
 80210e4:	81c2      	strh	r2, [r0, #14]
 80210e6:	6183      	str	r3, [r0, #24]
 80210e8:	4619      	mov	r1, r3
 80210ea:	2208      	movs	r2, #8
 80210ec:	305c      	adds	r0, #92	; 0x5c
 80210ee:	f000 f93d 	bl	802136c <memset>
 80210f2:	4b05      	ldr	r3, [pc, #20]	; (8021108 <std+0x38>)
 80210f4:	6263      	str	r3, [r4, #36]	; 0x24
 80210f6:	4b05      	ldr	r3, [pc, #20]	; (802110c <std+0x3c>)
 80210f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80210fa:	4b05      	ldr	r3, [pc, #20]	; (8021110 <std+0x40>)
 80210fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80210fe:	4b05      	ldr	r3, [pc, #20]	; (8021114 <std+0x44>)
 8021100:	6224      	str	r4, [r4, #32]
 8021102:	6323      	str	r3, [r4, #48]	; 0x30
 8021104:	bd10      	pop	{r4, pc}
 8021106:	bf00      	nop
 8021108:	08022231 	.word	0x08022231
 802110c:	08022253 	.word	0x08022253
 8021110:	0802228b 	.word	0x0802228b
 8021114:	080222af 	.word	0x080222af

08021118 <_cleanup_r>:
 8021118:	4901      	ldr	r1, [pc, #4]	; (8021120 <_cleanup_r+0x8>)
 802111a:	f000 b8c1 	b.w	80212a0 <_fwalk_reent>
 802111e:	bf00      	nop
 8021120:	08023241 	.word	0x08023241

08021124 <__sfmoreglue>:
 8021124:	b570      	push	{r4, r5, r6, lr}
 8021126:	2268      	movs	r2, #104	; 0x68
 8021128:	1e4d      	subs	r5, r1, #1
 802112a:	4355      	muls	r5, r2
 802112c:	460e      	mov	r6, r1
 802112e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021132:	f000 f98f 	bl	8021454 <_malloc_r>
 8021136:	4604      	mov	r4, r0
 8021138:	b140      	cbz	r0, 802114c <__sfmoreglue+0x28>
 802113a:	2100      	movs	r1, #0
 802113c:	e9c0 1600 	strd	r1, r6, [r0]
 8021140:	300c      	adds	r0, #12
 8021142:	60a0      	str	r0, [r4, #8]
 8021144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021148:	f000 f910 	bl	802136c <memset>
 802114c:	4620      	mov	r0, r4
 802114e:	bd70      	pop	{r4, r5, r6, pc}

08021150 <__sfp_lock_acquire>:
 8021150:	4801      	ldr	r0, [pc, #4]	; (8021158 <__sfp_lock_acquire+0x8>)
 8021152:	f000 b8ea 	b.w	802132a <__retarget_lock_acquire_recursive>
 8021156:	bf00      	nop
 8021158:	2000736e 	.word	0x2000736e

0802115c <__sfp_lock_release>:
 802115c:	4801      	ldr	r0, [pc, #4]	; (8021164 <__sfp_lock_release+0x8>)
 802115e:	f000 b8e6 	b.w	802132e <__retarget_lock_release_recursive>
 8021162:	bf00      	nop
 8021164:	2000736e 	.word	0x2000736e

08021168 <__sinit_lock_acquire>:
 8021168:	4801      	ldr	r0, [pc, #4]	; (8021170 <__sinit_lock_acquire+0x8>)
 802116a:	f000 b8de 	b.w	802132a <__retarget_lock_acquire_recursive>
 802116e:	bf00      	nop
 8021170:	2000736f 	.word	0x2000736f

08021174 <__sinit_lock_release>:
 8021174:	4801      	ldr	r0, [pc, #4]	; (802117c <__sinit_lock_release+0x8>)
 8021176:	f000 b8da 	b.w	802132e <__retarget_lock_release_recursive>
 802117a:	bf00      	nop
 802117c:	2000736f 	.word	0x2000736f

08021180 <__sinit>:
 8021180:	b510      	push	{r4, lr}
 8021182:	4604      	mov	r4, r0
 8021184:	f7ff fff0 	bl	8021168 <__sinit_lock_acquire>
 8021188:	69a3      	ldr	r3, [r4, #24]
 802118a:	b11b      	cbz	r3, 8021194 <__sinit+0x14>
 802118c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021190:	f7ff bff0 	b.w	8021174 <__sinit_lock_release>
 8021194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021198:	6523      	str	r3, [r4, #80]	; 0x50
 802119a:	4b13      	ldr	r3, [pc, #76]	; (80211e8 <__sinit+0x68>)
 802119c:	4a13      	ldr	r2, [pc, #76]	; (80211ec <__sinit+0x6c>)
 802119e:	681b      	ldr	r3, [r3, #0]
 80211a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80211a2:	42a3      	cmp	r3, r4
 80211a4:	bf04      	itt	eq
 80211a6:	2301      	moveq	r3, #1
 80211a8:	61a3      	streq	r3, [r4, #24]
 80211aa:	4620      	mov	r0, r4
 80211ac:	f000 f820 	bl	80211f0 <__sfp>
 80211b0:	6060      	str	r0, [r4, #4]
 80211b2:	4620      	mov	r0, r4
 80211b4:	f000 f81c 	bl	80211f0 <__sfp>
 80211b8:	60a0      	str	r0, [r4, #8]
 80211ba:	4620      	mov	r0, r4
 80211bc:	f000 f818 	bl	80211f0 <__sfp>
 80211c0:	2200      	movs	r2, #0
 80211c2:	60e0      	str	r0, [r4, #12]
 80211c4:	2104      	movs	r1, #4
 80211c6:	6860      	ldr	r0, [r4, #4]
 80211c8:	f7ff ff82 	bl	80210d0 <std>
 80211cc:	68a0      	ldr	r0, [r4, #8]
 80211ce:	2201      	movs	r2, #1
 80211d0:	2109      	movs	r1, #9
 80211d2:	f7ff ff7d 	bl	80210d0 <std>
 80211d6:	68e0      	ldr	r0, [r4, #12]
 80211d8:	2202      	movs	r2, #2
 80211da:	2112      	movs	r1, #18
 80211dc:	f7ff ff78 	bl	80210d0 <std>
 80211e0:	2301      	movs	r3, #1
 80211e2:	61a3      	str	r3, [r4, #24]
 80211e4:	e7d2      	b.n	802118c <__sinit+0xc>
 80211e6:	bf00      	nop
 80211e8:	080266e0 	.word	0x080266e0
 80211ec:	08021119 	.word	0x08021119

080211f0 <__sfp>:
 80211f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211f2:	4607      	mov	r7, r0
 80211f4:	f7ff ffac 	bl	8021150 <__sfp_lock_acquire>
 80211f8:	4b1e      	ldr	r3, [pc, #120]	; (8021274 <__sfp+0x84>)
 80211fa:	681e      	ldr	r6, [r3, #0]
 80211fc:	69b3      	ldr	r3, [r6, #24]
 80211fe:	b913      	cbnz	r3, 8021206 <__sfp+0x16>
 8021200:	4630      	mov	r0, r6
 8021202:	f7ff ffbd 	bl	8021180 <__sinit>
 8021206:	3648      	adds	r6, #72	; 0x48
 8021208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802120c:	3b01      	subs	r3, #1
 802120e:	d503      	bpl.n	8021218 <__sfp+0x28>
 8021210:	6833      	ldr	r3, [r6, #0]
 8021212:	b30b      	cbz	r3, 8021258 <__sfp+0x68>
 8021214:	6836      	ldr	r6, [r6, #0]
 8021216:	e7f7      	b.n	8021208 <__sfp+0x18>
 8021218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802121c:	b9d5      	cbnz	r5, 8021254 <__sfp+0x64>
 802121e:	4b16      	ldr	r3, [pc, #88]	; (8021278 <__sfp+0x88>)
 8021220:	60e3      	str	r3, [r4, #12]
 8021222:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021226:	6665      	str	r5, [r4, #100]	; 0x64
 8021228:	f000 f87e 	bl	8021328 <__retarget_lock_init_recursive>
 802122c:	f7ff ff96 	bl	802115c <__sfp_lock_release>
 8021230:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021234:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021238:	6025      	str	r5, [r4, #0]
 802123a:	61a5      	str	r5, [r4, #24]
 802123c:	2208      	movs	r2, #8
 802123e:	4629      	mov	r1, r5
 8021240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021244:	f000 f892 	bl	802136c <memset>
 8021248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802124c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021250:	4620      	mov	r0, r4
 8021252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021254:	3468      	adds	r4, #104	; 0x68
 8021256:	e7d9      	b.n	802120c <__sfp+0x1c>
 8021258:	2104      	movs	r1, #4
 802125a:	4638      	mov	r0, r7
 802125c:	f7ff ff62 	bl	8021124 <__sfmoreglue>
 8021260:	4604      	mov	r4, r0
 8021262:	6030      	str	r0, [r6, #0]
 8021264:	2800      	cmp	r0, #0
 8021266:	d1d5      	bne.n	8021214 <__sfp+0x24>
 8021268:	f7ff ff78 	bl	802115c <__sfp_lock_release>
 802126c:	230c      	movs	r3, #12
 802126e:	603b      	str	r3, [r7, #0]
 8021270:	e7ee      	b.n	8021250 <__sfp+0x60>
 8021272:	bf00      	nop
 8021274:	080266e0 	.word	0x080266e0
 8021278:	ffff0001 	.word	0xffff0001

0802127c <fiprintf>:
 802127c:	b40e      	push	{r1, r2, r3}
 802127e:	b503      	push	{r0, r1, lr}
 8021280:	4601      	mov	r1, r0
 8021282:	ab03      	add	r3, sp, #12
 8021284:	4805      	ldr	r0, [pc, #20]	; (802129c <fiprintf+0x20>)
 8021286:	f853 2b04 	ldr.w	r2, [r3], #4
 802128a:	6800      	ldr	r0, [r0, #0]
 802128c:	9301      	str	r3, [sp, #4]
 802128e:	f000 f97f 	bl	8021590 <_vfiprintf_r>
 8021292:	b002      	add	sp, #8
 8021294:	f85d eb04 	ldr.w	lr, [sp], #4
 8021298:	b003      	add	sp, #12
 802129a:	4770      	bx	lr
 802129c:	20000140 	.word	0x20000140

080212a0 <_fwalk_reent>:
 80212a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212a4:	4606      	mov	r6, r0
 80212a6:	4688      	mov	r8, r1
 80212a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80212ac:	2700      	movs	r7, #0
 80212ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80212b2:	f1b9 0901 	subs.w	r9, r9, #1
 80212b6:	d505      	bpl.n	80212c4 <_fwalk_reent+0x24>
 80212b8:	6824      	ldr	r4, [r4, #0]
 80212ba:	2c00      	cmp	r4, #0
 80212bc:	d1f7      	bne.n	80212ae <_fwalk_reent+0xe>
 80212be:	4638      	mov	r0, r7
 80212c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212c4:	89ab      	ldrh	r3, [r5, #12]
 80212c6:	2b01      	cmp	r3, #1
 80212c8:	d907      	bls.n	80212da <_fwalk_reent+0x3a>
 80212ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80212ce:	3301      	adds	r3, #1
 80212d0:	d003      	beq.n	80212da <_fwalk_reent+0x3a>
 80212d2:	4629      	mov	r1, r5
 80212d4:	4630      	mov	r0, r6
 80212d6:	47c0      	blx	r8
 80212d8:	4307      	orrs	r7, r0
 80212da:	3568      	adds	r5, #104	; 0x68
 80212dc:	e7e9      	b.n	80212b2 <_fwalk_reent+0x12>
	...

080212e0 <__libc_init_array>:
 80212e0:	b570      	push	{r4, r5, r6, lr}
 80212e2:	4d0d      	ldr	r5, [pc, #52]	; (8021318 <__libc_init_array+0x38>)
 80212e4:	4c0d      	ldr	r4, [pc, #52]	; (802131c <__libc_init_array+0x3c>)
 80212e6:	1b64      	subs	r4, r4, r5
 80212e8:	10a4      	asrs	r4, r4, #2
 80212ea:	2600      	movs	r6, #0
 80212ec:	42a6      	cmp	r6, r4
 80212ee:	d109      	bne.n	8021304 <__libc_init_array+0x24>
 80212f0:	4d0b      	ldr	r5, [pc, #44]	; (8021320 <__libc_init_array+0x40>)
 80212f2:	4c0c      	ldr	r4, [pc, #48]	; (8021324 <__libc_init_array+0x44>)
 80212f4:	f002 fe02 	bl	8023efc <_init>
 80212f8:	1b64      	subs	r4, r4, r5
 80212fa:	10a4      	asrs	r4, r4, #2
 80212fc:	2600      	movs	r6, #0
 80212fe:	42a6      	cmp	r6, r4
 8021300:	d105      	bne.n	802130e <__libc_init_array+0x2e>
 8021302:	bd70      	pop	{r4, r5, r6, pc}
 8021304:	f855 3b04 	ldr.w	r3, [r5], #4
 8021308:	4798      	blx	r3
 802130a:	3601      	adds	r6, #1
 802130c:	e7ee      	b.n	80212ec <__libc_init_array+0xc>
 802130e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021312:	4798      	blx	r3
 8021314:	3601      	adds	r6, #1
 8021316:	e7f2      	b.n	80212fe <__libc_init_array+0x1e>
 8021318:	0803dba8 	.word	0x0803dba8
 802131c:	0803dba8 	.word	0x0803dba8
 8021320:	0803dba8 	.word	0x0803dba8
 8021324:	0803dbd0 	.word	0x0803dbd0

08021328 <__retarget_lock_init_recursive>:
 8021328:	4770      	bx	lr

0802132a <__retarget_lock_acquire_recursive>:
 802132a:	4770      	bx	lr

0802132c <__retarget_lock_release>:
 802132c:	4770      	bx	lr

0802132e <__retarget_lock_release_recursive>:
 802132e:	4770      	bx	lr

08021330 <malloc>:
 8021330:	4b02      	ldr	r3, [pc, #8]	; (802133c <malloc+0xc>)
 8021332:	4601      	mov	r1, r0
 8021334:	6818      	ldr	r0, [r3, #0]
 8021336:	f000 b88d 	b.w	8021454 <_malloc_r>
 802133a:	bf00      	nop
 802133c:	20000140 	.word	0x20000140

08021340 <free>:
 8021340:	4b02      	ldr	r3, [pc, #8]	; (802134c <free+0xc>)
 8021342:	4601      	mov	r1, r0
 8021344:	6818      	ldr	r0, [r3, #0]
 8021346:	f000 b819 	b.w	802137c <_free_r>
 802134a:	bf00      	nop
 802134c:	20000140 	.word	0x20000140

08021350 <memcpy>:
 8021350:	440a      	add	r2, r1
 8021352:	4291      	cmp	r1, r2
 8021354:	f100 33ff 	add.w	r3, r0, #4294967295
 8021358:	d100      	bne.n	802135c <memcpy+0xc>
 802135a:	4770      	bx	lr
 802135c:	b510      	push	{r4, lr}
 802135e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021366:	4291      	cmp	r1, r2
 8021368:	d1f9      	bne.n	802135e <memcpy+0xe>
 802136a:	bd10      	pop	{r4, pc}

0802136c <memset>:
 802136c:	4402      	add	r2, r0
 802136e:	4603      	mov	r3, r0
 8021370:	4293      	cmp	r3, r2
 8021372:	d100      	bne.n	8021376 <memset+0xa>
 8021374:	4770      	bx	lr
 8021376:	f803 1b01 	strb.w	r1, [r3], #1
 802137a:	e7f9      	b.n	8021370 <memset+0x4>

0802137c <_free_r>:
 802137c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802137e:	2900      	cmp	r1, #0
 8021380:	d044      	beq.n	802140c <_free_r+0x90>
 8021382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021386:	9001      	str	r0, [sp, #4]
 8021388:	2b00      	cmp	r3, #0
 802138a:	f1a1 0404 	sub.w	r4, r1, #4
 802138e:	bfb8      	it	lt
 8021390:	18e4      	addlt	r4, r4, r3
 8021392:	f002 f827 	bl	80233e4 <__malloc_lock>
 8021396:	4a1e      	ldr	r2, [pc, #120]	; (8021410 <_free_r+0x94>)
 8021398:	9801      	ldr	r0, [sp, #4]
 802139a:	6813      	ldr	r3, [r2, #0]
 802139c:	b933      	cbnz	r3, 80213ac <_free_r+0x30>
 802139e:	6063      	str	r3, [r4, #4]
 80213a0:	6014      	str	r4, [r2, #0]
 80213a2:	b003      	add	sp, #12
 80213a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80213a8:	f002 b822 	b.w	80233f0 <__malloc_unlock>
 80213ac:	42a3      	cmp	r3, r4
 80213ae:	d908      	bls.n	80213c2 <_free_r+0x46>
 80213b0:	6825      	ldr	r5, [r4, #0]
 80213b2:	1961      	adds	r1, r4, r5
 80213b4:	428b      	cmp	r3, r1
 80213b6:	bf01      	itttt	eq
 80213b8:	6819      	ldreq	r1, [r3, #0]
 80213ba:	685b      	ldreq	r3, [r3, #4]
 80213bc:	1949      	addeq	r1, r1, r5
 80213be:	6021      	streq	r1, [r4, #0]
 80213c0:	e7ed      	b.n	802139e <_free_r+0x22>
 80213c2:	461a      	mov	r2, r3
 80213c4:	685b      	ldr	r3, [r3, #4]
 80213c6:	b10b      	cbz	r3, 80213cc <_free_r+0x50>
 80213c8:	42a3      	cmp	r3, r4
 80213ca:	d9fa      	bls.n	80213c2 <_free_r+0x46>
 80213cc:	6811      	ldr	r1, [r2, #0]
 80213ce:	1855      	adds	r5, r2, r1
 80213d0:	42a5      	cmp	r5, r4
 80213d2:	d10b      	bne.n	80213ec <_free_r+0x70>
 80213d4:	6824      	ldr	r4, [r4, #0]
 80213d6:	4421      	add	r1, r4
 80213d8:	1854      	adds	r4, r2, r1
 80213da:	42a3      	cmp	r3, r4
 80213dc:	6011      	str	r1, [r2, #0]
 80213de:	d1e0      	bne.n	80213a2 <_free_r+0x26>
 80213e0:	681c      	ldr	r4, [r3, #0]
 80213e2:	685b      	ldr	r3, [r3, #4]
 80213e4:	6053      	str	r3, [r2, #4]
 80213e6:	4421      	add	r1, r4
 80213e8:	6011      	str	r1, [r2, #0]
 80213ea:	e7da      	b.n	80213a2 <_free_r+0x26>
 80213ec:	d902      	bls.n	80213f4 <_free_r+0x78>
 80213ee:	230c      	movs	r3, #12
 80213f0:	6003      	str	r3, [r0, #0]
 80213f2:	e7d6      	b.n	80213a2 <_free_r+0x26>
 80213f4:	6825      	ldr	r5, [r4, #0]
 80213f6:	1961      	adds	r1, r4, r5
 80213f8:	428b      	cmp	r3, r1
 80213fa:	bf04      	itt	eq
 80213fc:	6819      	ldreq	r1, [r3, #0]
 80213fe:	685b      	ldreq	r3, [r3, #4]
 8021400:	6063      	str	r3, [r4, #4]
 8021402:	bf04      	itt	eq
 8021404:	1949      	addeq	r1, r1, r5
 8021406:	6021      	streq	r1, [r4, #0]
 8021408:	6054      	str	r4, [r2, #4]
 802140a:	e7ca      	b.n	80213a2 <_free_r+0x26>
 802140c:	b003      	add	sp, #12
 802140e:	bd30      	pop	{r4, r5, pc}
 8021410:	20007370 	.word	0x20007370

08021414 <sbrk_aligned>:
 8021414:	b570      	push	{r4, r5, r6, lr}
 8021416:	4e0e      	ldr	r6, [pc, #56]	; (8021450 <sbrk_aligned+0x3c>)
 8021418:	460c      	mov	r4, r1
 802141a:	6831      	ldr	r1, [r6, #0]
 802141c:	4605      	mov	r5, r0
 802141e:	b911      	cbnz	r1, 8021426 <sbrk_aligned+0x12>
 8021420:	f000 fe92 	bl	8022148 <_sbrk_r>
 8021424:	6030      	str	r0, [r6, #0]
 8021426:	4621      	mov	r1, r4
 8021428:	4628      	mov	r0, r5
 802142a:	f000 fe8d 	bl	8022148 <_sbrk_r>
 802142e:	1c43      	adds	r3, r0, #1
 8021430:	d00a      	beq.n	8021448 <sbrk_aligned+0x34>
 8021432:	1cc4      	adds	r4, r0, #3
 8021434:	f024 0403 	bic.w	r4, r4, #3
 8021438:	42a0      	cmp	r0, r4
 802143a:	d007      	beq.n	802144c <sbrk_aligned+0x38>
 802143c:	1a21      	subs	r1, r4, r0
 802143e:	4628      	mov	r0, r5
 8021440:	f000 fe82 	bl	8022148 <_sbrk_r>
 8021444:	3001      	adds	r0, #1
 8021446:	d101      	bne.n	802144c <sbrk_aligned+0x38>
 8021448:	f04f 34ff 	mov.w	r4, #4294967295
 802144c:	4620      	mov	r0, r4
 802144e:	bd70      	pop	{r4, r5, r6, pc}
 8021450:	20007374 	.word	0x20007374

08021454 <_malloc_r>:
 8021454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021458:	1ccd      	adds	r5, r1, #3
 802145a:	f025 0503 	bic.w	r5, r5, #3
 802145e:	3508      	adds	r5, #8
 8021460:	2d0c      	cmp	r5, #12
 8021462:	bf38      	it	cc
 8021464:	250c      	movcc	r5, #12
 8021466:	2d00      	cmp	r5, #0
 8021468:	4607      	mov	r7, r0
 802146a:	db01      	blt.n	8021470 <_malloc_r+0x1c>
 802146c:	42a9      	cmp	r1, r5
 802146e:	d905      	bls.n	802147c <_malloc_r+0x28>
 8021470:	230c      	movs	r3, #12
 8021472:	603b      	str	r3, [r7, #0]
 8021474:	2600      	movs	r6, #0
 8021476:	4630      	mov	r0, r6
 8021478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802147c:	4e2e      	ldr	r6, [pc, #184]	; (8021538 <_malloc_r+0xe4>)
 802147e:	f001 ffb1 	bl	80233e4 <__malloc_lock>
 8021482:	6833      	ldr	r3, [r6, #0]
 8021484:	461c      	mov	r4, r3
 8021486:	bb34      	cbnz	r4, 80214d6 <_malloc_r+0x82>
 8021488:	4629      	mov	r1, r5
 802148a:	4638      	mov	r0, r7
 802148c:	f7ff ffc2 	bl	8021414 <sbrk_aligned>
 8021490:	1c43      	adds	r3, r0, #1
 8021492:	4604      	mov	r4, r0
 8021494:	d14d      	bne.n	8021532 <_malloc_r+0xde>
 8021496:	6834      	ldr	r4, [r6, #0]
 8021498:	4626      	mov	r6, r4
 802149a:	2e00      	cmp	r6, #0
 802149c:	d140      	bne.n	8021520 <_malloc_r+0xcc>
 802149e:	6823      	ldr	r3, [r4, #0]
 80214a0:	4631      	mov	r1, r6
 80214a2:	4638      	mov	r0, r7
 80214a4:	eb04 0803 	add.w	r8, r4, r3
 80214a8:	f000 fe4e 	bl	8022148 <_sbrk_r>
 80214ac:	4580      	cmp	r8, r0
 80214ae:	d13a      	bne.n	8021526 <_malloc_r+0xd2>
 80214b0:	6821      	ldr	r1, [r4, #0]
 80214b2:	3503      	adds	r5, #3
 80214b4:	1a6d      	subs	r5, r5, r1
 80214b6:	f025 0503 	bic.w	r5, r5, #3
 80214ba:	3508      	adds	r5, #8
 80214bc:	2d0c      	cmp	r5, #12
 80214be:	bf38      	it	cc
 80214c0:	250c      	movcc	r5, #12
 80214c2:	4629      	mov	r1, r5
 80214c4:	4638      	mov	r0, r7
 80214c6:	f7ff ffa5 	bl	8021414 <sbrk_aligned>
 80214ca:	3001      	adds	r0, #1
 80214cc:	d02b      	beq.n	8021526 <_malloc_r+0xd2>
 80214ce:	6823      	ldr	r3, [r4, #0]
 80214d0:	442b      	add	r3, r5
 80214d2:	6023      	str	r3, [r4, #0]
 80214d4:	e00e      	b.n	80214f4 <_malloc_r+0xa0>
 80214d6:	6822      	ldr	r2, [r4, #0]
 80214d8:	1b52      	subs	r2, r2, r5
 80214da:	d41e      	bmi.n	802151a <_malloc_r+0xc6>
 80214dc:	2a0b      	cmp	r2, #11
 80214de:	d916      	bls.n	802150e <_malloc_r+0xba>
 80214e0:	1961      	adds	r1, r4, r5
 80214e2:	42a3      	cmp	r3, r4
 80214e4:	6025      	str	r5, [r4, #0]
 80214e6:	bf18      	it	ne
 80214e8:	6059      	strne	r1, [r3, #4]
 80214ea:	6863      	ldr	r3, [r4, #4]
 80214ec:	bf08      	it	eq
 80214ee:	6031      	streq	r1, [r6, #0]
 80214f0:	5162      	str	r2, [r4, r5]
 80214f2:	604b      	str	r3, [r1, #4]
 80214f4:	4638      	mov	r0, r7
 80214f6:	f104 060b 	add.w	r6, r4, #11
 80214fa:	f001 ff79 	bl	80233f0 <__malloc_unlock>
 80214fe:	f026 0607 	bic.w	r6, r6, #7
 8021502:	1d23      	adds	r3, r4, #4
 8021504:	1af2      	subs	r2, r6, r3
 8021506:	d0b6      	beq.n	8021476 <_malloc_r+0x22>
 8021508:	1b9b      	subs	r3, r3, r6
 802150a:	50a3      	str	r3, [r4, r2]
 802150c:	e7b3      	b.n	8021476 <_malloc_r+0x22>
 802150e:	6862      	ldr	r2, [r4, #4]
 8021510:	42a3      	cmp	r3, r4
 8021512:	bf0c      	ite	eq
 8021514:	6032      	streq	r2, [r6, #0]
 8021516:	605a      	strne	r2, [r3, #4]
 8021518:	e7ec      	b.n	80214f4 <_malloc_r+0xa0>
 802151a:	4623      	mov	r3, r4
 802151c:	6864      	ldr	r4, [r4, #4]
 802151e:	e7b2      	b.n	8021486 <_malloc_r+0x32>
 8021520:	4634      	mov	r4, r6
 8021522:	6876      	ldr	r6, [r6, #4]
 8021524:	e7b9      	b.n	802149a <_malloc_r+0x46>
 8021526:	230c      	movs	r3, #12
 8021528:	603b      	str	r3, [r7, #0]
 802152a:	4638      	mov	r0, r7
 802152c:	f001 ff60 	bl	80233f0 <__malloc_unlock>
 8021530:	e7a1      	b.n	8021476 <_malloc_r+0x22>
 8021532:	6025      	str	r5, [r4, #0]
 8021534:	e7de      	b.n	80214f4 <_malloc_r+0xa0>
 8021536:	bf00      	nop
 8021538:	20007370 	.word	0x20007370

0802153c <__sfputc_r>:
 802153c:	6893      	ldr	r3, [r2, #8]
 802153e:	3b01      	subs	r3, #1
 8021540:	2b00      	cmp	r3, #0
 8021542:	b410      	push	{r4}
 8021544:	6093      	str	r3, [r2, #8]
 8021546:	da08      	bge.n	802155a <__sfputc_r+0x1e>
 8021548:	6994      	ldr	r4, [r2, #24]
 802154a:	42a3      	cmp	r3, r4
 802154c:	db01      	blt.n	8021552 <__sfputc_r+0x16>
 802154e:	290a      	cmp	r1, #10
 8021550:	d103      	bne.n	802155a <__sfputc_r+0x1e>
 8021552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021556:	f000 beaf 	b.w	80222b8 <__swbuf_r>
 802155a:	6813      	ldr	r3, [r2, #0]
 802155c:	1c58      	adds	r0, r3, #1
 802155e:	6010      	str	r0, [r2, #0]
 8021560:	7019      	strb	r1, [r3, #0]
 8021562:	4608      	mov	r0, r1
 8021564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021568:	4770      	bx	lr

0802156a <__sfputs_r>:
 802156a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802156c:	4606      	mov	r6, r0
 802156e:	460f      	mov	r7, r1
 8021570:	4614      	mov	r4, r2
 8021572:	18d5      	adds	r5, r2, r3
 8021574:	42ac      	cmp	r4, r5
 8021576:	d101      	bne.n	802157c <__sfputs_r+0x12>
 8021578:	2000      	movs	r0, #0
 802157a:	e007      	b.n	802158c <__sfputs_r+0x22>
 802157c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021580:	463a      	mov	r2, r7
 8021582:	4630      	mov	r0, r6
 8021584:	f7ff ffda 	bl	802153c <__sfputc_r>
 8021588:	1c43      	adds	r3, r0, #1
 802158a:	d1f3      	bne.n	8021574 <__sfputs_r+0xa>
 802158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021590 <_vfiprintf_r>:
 8021590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021594:	460d      	mov	r5, r1
 8021596:	b09d      	sub	sp, #116	; 0x74
 8021598:	4614      	mov	r4, r2
 802159a:	4698      	mov	r8, r3
 802159c:	4606      	mov	r6, r0
 802159e:	b118      	cbz	r0, 80215a8 <_vfiprintf_r+0x18>
 80215a0:	6983      	ldr	r3, [r0, #24]
 80215a2:	b90b      	cbnz	r3, 80215a8 <_vfiprintf_r+0x18>
 80215a4:	f7ff fdec 	bl	8021180 <__sinit>
 80215a8:	4b89      	ldr	r3, [pc, #548]	; (80217d0 <_vfiprintf_r+0x240>)
 80215aa:	429d      	cmp	r5, r3
 80215ac:	d11b      	bne.n	80215e6 <_vfiprintf_r+0x56>
 80215ae:	6875      	ldr	r5, [r6, #4]
 80215b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80215b2:	07d9      	lsls	r1, r3, #31
 80215b4:	d405      	bmi.n	80215c2 <_vfiprintf_r+0x32>
 80215b6:	89ab      	ldrh	r3, [r5, #12]
 80215b8:	059a      	lsls	r2, r3, #22
 80215ba:	d402      	bmi.n	80215c2 <_vfiprintf_r+0x32>
 80215bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80215be:	f7ff feb4 	bl	802132a <__retarget_lock_acquire_recursive>
 80215c2:	89ab      	ldrh	r3, [r5, #12]
 80215c4:	071b      	lsls	r3, r3, #28
 80215c6:	d501      	bpl.n	80215cc <_vfiprintf_r+0x3c>
 80215c8:	692b      	ldr	r3, [r5, #16]
 80215ca:	b9eb      	cbnz	r3, 8021608 <_vfiprintf_r+0x78>
 80215cc:	4629      	mov	r1, r5
 80215ce:	4630      	mov	r0, r6
 80215d0:	f000 fed6 	bl	8022380 <__swsetup_r>
 80215d4:	b1c0      	cbz	r0, 8021608 <_vfiprintf_r+0x78>
 80215d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80215d8:	07dc      	lsls	r4, r3, #31
 80215da:	d50e      	bpl.n	80215fa <_vfiprintf_r+0x6a>
 80215dc:	f04f 30ff 	mov.w	r0, #4294967295
 80215e0:	b01d      	add	sp, #116	; 0x74
 80215e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e6:	4b7b      	ldr	r3, [pc, #492]	; (80217d4 <_vfiprintf_r+0x244>)
 80215e8:	429d      	cmp	r5, r3
 80215ea:	d101      	bne.n	80215f0 <_vfiprintf_r+0x60>
 80215ec:	68b5      	ldr	r5, [r6, #8]
 80215ee:	e7df      	b.n	80215b0 <_vfiprintf_r+0x20>
 80215f0:	4b79      	ldr	r3, [pc, #484]	; (80217d8 <_vfiprintf_r+0x248>)
 80215f2:	429d      	cmp	r5, r3
 80215f4:	bf08      	it	eq
 80215f6:	68f5      	ldreq	r5, [r6, #12]
 80215f8:	e7da      	b.n	80215b0 <_vfiprintf_r+0x20>
 80215fa:	89ab      	ldrh	r3, [r5, #12]
 80215fc:	0598      	lsls	r0, r3, #22
 80215fe:	d4ed      	bmi.n	80215dc <_vfiprintf_r+0x4c>
 8021600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021602:	f7ff fe94 	bl	802132e <__retarget_lock_release_recursive>
 8021606:	e7e9      	b.n	80215dc <_vfiprintf_r+0x4c>
 8021608:	2300      	movs	r3, #0
 802160a:	9309      	str	r3, [sp, #36]	; 0x24
 802160c:	2320      	movs	r3, #32
 802160e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021612:	f8cd 800c 	str.w	r8, [sp, #12]
 8021616:	2330      	movs	r3, #48	; 0x30
 8021618:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80217dc <_vfiprintf_r+0x24c>
 802161c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021620:	f04f 0901 	mov.w	r9, #1
 8021624:	4623      	mov	r3, r4
 8021626:	469a      	mov	sl, r3
 8021628:	f813 2b01 	ldrb.w	r2, [r3], #1
 802162c:	b10a      	cbz	r2, 8021632 <_vfiprintf_r+0xa2>
 802162e:	2a25      	cmp	r2, #37	; 0x25
 8021630:	d1f9      	bne.n	8021626 <_vfiprintf_r+0x96>
 8021632:	ebba 0b04 	subs.w	fp, sl, r4
 8021636:	d00b      	beq.n	8021650 <_vfiprintf_r+0xc0>
 8021638:	465b      	mov	r3, fp
 802163a:	4622      	mov	r2, r4
 802163c:	4629      	mov	r1, r5
 802163e:	4630      	mov	r0, r6
 8021640:	f7ff ff93 	bl	802156a <__sfputs_r>
 8021644:	3001      	adds	r0, #1
 8021646:	f000 80aa 	beq.w	802179e <_vfiprintf_r+0x20e>
 802164a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802164c:	445a      	add	r2, fp
 802164e:	9209      	str	r2, [sp, #36]	; 0x24
 8021650:	f89a 3000 	ldrb.w	r3, [sl]
 8021654:	2b00      	cmp	r3, #0
 8021656:	f000 80a2 	beq.w	802179e <_vfiprintf_r+0x20e>
 802165a:	2300      	movs	r3, #0
 802165c:	f04f 32ff 	mov.w	r2, #4294967295
 8021660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021664:	f10a 0a01 	add.w	sl, sl, #1
 8021668:	9304      	str	r3, [sp, #16]
 802166a:	9307      	str	r3, [sp, #28]
 802166c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021670:	931a      	str	r3, [sp, #104]	; 0x68
 8021672:	4654      	mov	r4, sl
 8021674:	2205      	movs	r2, #5
 8021676:	f814 1b01 	ldrb.w	r1, [r4], #1
 802167a:	4858      	ldr	r0, [pc, #352]	; (80217dc <_vfiprintf_r+0x24c>)
 802167c:	f7de fe38 	bl	80002f0 <memchr>
 8021680:	9a04      	ldr	r2, [sp, #16]
 8021682:	b9d8      	cbnz	r0, 80216bc <_vfiprintf_r+0x12c>
 8021684:	06d1      	lsls	r1, r2, #27
 8021686:	bf44      	itt	mi
 8021688:	2320      	movmi	r3, #32
 802168a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802168e:	0713      	lsls	r3, r2, #28
 8021690:	bf44      	itt	mi
 8021692:	232b      	movmi	r3, #43	; 0x2b
 8021694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021698:	f89a 3000 	ldrb.w	r3, [sl]
 802169c:	2b2a      	cmp	r3, #42	; 0x2a
 802169e:	d015      	beq.n	80216cc <_vfiprintf_r+0x13c>
 80216a0:	9a07      	ldr	r2, [sp, #28]
 80216a2:	4654      	mov	r4, sl
 80216a4:	2000      	movs	r0, #0
 80216a6:	f04f 0c0a 	mov.w	ip, #10
 80216aa:	4621      	mov	r1, r4
 80216ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80216b0:	3b30      	subs	r3, #48	; 0x30
 80216b2:	2b09      	cmp	r3, #9
 80216b4:	d94e      	bls.n	8021754 <_vfiprintf_r+0x1c4>
 80216b6:	b1b0      	cbz	r0, 80216e6 <_vfiprintf_r+0x156>
 80216b8:	9207      	str	r2, [sp, #28]
 80216ba:	e014      	b.n	80216e6 <_vfiprintf_r+0x156>
 80216bc:	eba0 0308 	sub.w	r3, r0, r8
 80216c0:	fa09 f303 	lsl.w	r3, r9, r3
 80216c4:	4313      	orrs	r3, r2
 80216c6:	9304      	str	r3, [sp, #16]
 80216c8:	46a2      	mov	sl, r4
 80216ca:	e7d2      	b.n	8021672 <_vfiprintf_r+0xe2>
 80216cc:	9b03      	ldr	r3, [sp, #12]
 80216ce:	1d19      	adds	r1, r3, #4
 80216d0:	681b      	ldr	r3, [r3, #0]
 80216d2:	9103      	str	r1, [sp, #12]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	bfbb      	ittet	lt
 80216d8:	425b      	neglt	r3, r3
 80216da:	f042 0202 	orrlt.w	r2, r2, #2
 80216de:	9307      	strge	r3, [sp, #28]
 80216e0:	9307      	strlt	r3, [sp, #28]
 80216e2:	bfb8      	it	lt
 80216e4:	9204      	strlt	r2, [sp, #16]
 80216e6:	7823      	ldrb	r3, [r4, #0]
 80216e8:	2b2e      	cmp	r3, #46	; 0x2e
 80216ea:	d10c      	bne.n	8021706 <_vfiprintf_r+0x176>
 80216ec:	7863      	ldrb	r3, [r4, #1]
 80216ee:	2b2a      	cmp	r3, #42	; 0x2a
 80216f0:	d135      	bne.n	802175e <_vfiprintf_r+0x1ce>
 80216f2:	9b03      	ldr	r3, [sp, #12]
 80216f4:	1d1a      	adds	r2, r3, #4
 80216f6:	681b      	ldr	r3, [r3, #0]
 80216f8:	9203      	str	r2, [sp, #12]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	bfb8      	it	lt
 80216fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8021702:	3402      	adds	r4, #2
 8021704:	9305      	str	r3, [sp, #20]
 8021706:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80217ec <_vfiprintf_r+0x25c>
 802170a:	7821      	ldrb	r1, [r4, #0]
 802170c:	2203      	movs	r2, #3
 802170e:	4650      	mov	r0, sl
 8021710:	f7de fdee 	bl	80002f0 <memchr>
 8021714:	b140      	cbz	r0, 8021728 <_vfiprintf_r+0x198>
 8021716:	2340      	movs	r3, #64	; 0x40
 8021718:	eba0 000a 	sub.w	r0, r0, sl
 802171c:	fa03 f000 	lsl.w	r0, r3, r0
 8021720:	9b04      	ldr	r3, [sp, #16]
 8021722:	4303      	orrs	r3, r0
 8021724:	3401      	adds	r4, #1
 8021726:	9304      	str	r3, [sp, #16]
 8021728:	f814 1b01 	ldrb.w	r1, [r4], #1
 802172c:	482c      	ldr	r0, [pc, #176]	; (80217e0 <_vfiprintf_r+0x250>)
 802172e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021732:	2206      	movs	r2, #6
 8021734:	f7de fddc 	bl	80002f0 <memchr>
 8021738:	2800      	cmp	r0, #0
 802173a:	d03f      	beq.n	80217bc <_vfiprintf_r+0x22c>
 802173c:	4b29      	ldr	r3, [pc, #164]	; (80217e4 <_vfiprintf_r+0x254>)
 802173e:	bb1b      	cbnz	r3, 8021788 <_vfiprintf_r+0x1f8>
 8021740:	9b03      	ldr	r3, [sp, #12]
 8021742:	3307      	adds	r3, #7
 8021744:	f023 0307 	bic.w	r3, r3, #7
 8021748:	3308      	adds	r3, #8
 802174a:	9303      	str	r3, [sp, #12]
 802174c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802174e:	443b      	add	r3, r7
 8021750:	9309      	str	r3, [sp, #36]	; 0x24
 8021752:	e767      	b.n	8021624 <_vfiprintf_r+0x94>
 8021754:	fb0c 3202 	mla	r2, ip, r2, r3
 8021758:	460c      	mov	r4, r1
 802175a:	2001      	movs	r0, #1
 802175c:	e7a5      	b.n	80216aa <_vfiprintf_r+0x11a>
 802175e:	2300      	movs	r3, #0
 8021760:	3401      	adds	r4, #1
 8021762:	9305      	str	r3, [sp, #20]
 8021764:	4619      	mov	r1, r3
 8021766:	f04f 0c0a 	mov.w	ip, #10
 802176a:	4620      	mov	r0, r4
 802176c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021770:	3a30      	subs	r2, #48	; 0x30
 8021772:	2a09      	cmp	r2, #9
 8021774:	d903      	bls.n	802177e <_vfiprintf_r+0x1ee>
 8021776:	2b00      	cmp	r3, #0
 8021778:	d0c5      	beq.n	8021706 <_vfiprintf_r+0x176>
 802177a:	9105      	str	r1, [sp, #20]
 802177c:	e7c3      	b.n	8021706 <_vfiprintf_r+0x176>
 802177e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021782:	4604      	mov	r4, r0
 8021784:	2301      	movs	r3, #1
 8021786:	e7f0      	b.n	802176a <_vfiprintf_r+0x1da>
 8021788:	ab03      	add	r3, sp, #12
 802178a:	9300      	str	r3, [sp, #0]
 802178c:	462a      	mov	r2, r5
 802178e:	4b16      	ldr	r3, [pc, #88]	; (80217e8 <_vfiprintf_r+0x258>)
 8021790:	a904      	add	r1, sp, #16
 8021792:	4630      	mov	r0, r6
 8021794:	f000 f8bc 	bl	8021910 <_printf_float>
 8021798:	4607      	mov	r7, r0
 802179a:	1c78      	adds	r0, r7, #1
 802179c:	d1d6      	bne.n	802174c <_vfiprintf_r+0x1bc>
 802179e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80217a0:	07d9      	lsls	r1, r3, #31
 80217a2:	d405      	bmi.n	80217b0 <_vfiprintf_r+0x220>
 80217a4:	89ab      	ldrh	r3, [r5, #12]
 80217a6:	059a      	lsls	r2, r3, #22
 80217a8:	d402      	bmi.n	80217b0 <_vfiprintf_r+0x220>
 80217aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80217ac:	f7ff fdbf 	bl	802132e <__retarget_lock_release_recursive>
 80217b0:	89ab      	ldrh	r3, [r5, #12]
 80217b2:	065b      	lsls	r3, r3, #25
 80217b4:	f53f af12 	bmi.w	80215dc <_vfiprintf_r+0x4c>
 80217b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217ba:	e711      	b.n	80215e0 <_vfiprintf_r+0x50>
 80217bc:	ab03      	add	r3, sp, #12
 80217be:	9300      	str	r3, [sp, #0]
 80217c0:	462a      	mov	r2, r5
 80217c2:	4b09      	ldr	r3, [pc, #36]	; (80217e8 <_vfiprintf_r+0x258>)
 80217c4:	a904      	add	r1, sp, #16
 80217c6:	4630      	mov	r0, r6
 80217c8:	f000 fb2e 	bl	8021e28 <_printf_i>
 80217cc:	e7e4      	b.n	8021798 <_vfiprintf_r+0x208>
 80217ce:	bf00      	nop
 80217d0:	080266a0 	.word	0x080266a0
 80217d4:	080266c0 	.word	0x080266c0
 80217d8:	08026680 	.word	0x08026680
 80217dc:	080266e4 	.word	0x080266e4
 80217e0:	080266ee 	.word	0x080266ee
 80217e4:	08021911 	.word	0x08021911
 80217e8:	0802156b 	.word	0x0802156b
 80217ec:	080266ea 	.word	0x080266ea

080217f0 <__cvt>:
 80217f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80217f2:	ed2d 8b02 	vpush	{d8}
 80217f6:	eeb0 8b40 	vmov.f64	d8, d0
 80217fa:	b085      	sub	sp, #20
 80217fc:	4617      	mov	r7, r2
 80217fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021800:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021802:	ee18 2a90 	vmov	r2, s17
 8021806:	f025 0520 	bic.w	r5, r5, #32
 802180a:	2a00      	cmp	r2, #0
 802180c:	bfb6      	itet	lt
 802180e:	222d      	movlt	r2, #45	; 0x2d
 8021810:	2200      	movge	r2, #0
 8021812:	eeb1 8b40 	vneglt.f64	d8, d0
 8021816:	2d46      	cmp	r5, #70	; 0x46
 8021818:	460c      	mov	r4, r1
 802181a:	701a      	strb	r2, [r3, #0]
 802181c:	d004      	beq.n	8021828 <__cvt+0x38>
 802181e:	2d45      	cmp	r5, #69	; 0x45
 8021820:	d100      	bne.n	8021824 <__cvt+0x34>
 8021822:	3401      	adds	r4, #1
 8021824:	2102      	movs	r1, #2
 8021826:	e000      	b.n	802182a <__cvt+0x3a>
 8021828:	2103      	movs	r1, #3
 802182a:	ab03      	add	r3, sp, #12
 802182c:	9301      	str	r3, [sp, #4]
 802182e:	ab02      	add	r3, sp, #8
 8021830:	9300      	str	r3, [sp, #0]
 8021832:	4622      	mov	r2, r4
 8021834:	4633      	mov	r3, r6
 8021836:	eeb0 0b48 	vmov.f64	d0, d8
 802183a:	f000 ff0d 	bl	8022658 <_dtoa_r>
 802183e:	2d47      	cmp	r5, #71	; 0x47
 8021840:	d101      	bne.n	8021846 <__cvt+0x56>
 8021842:	07fb      	lsls	r3, r7, #31
 8021844:	d51a      	bpl.n	802187c <__cvt+0x8c>
 8021846:	2d46      	cmp	r5, #70	; 0x46
 8021848:	eb00 0204 	add.w	r2, r0, r4
 802184c:	d10c      	bne.n	8021868 <__cvt+0x78>
 802184e:	7803      	ldrb	r3, [r0, #0]
 8021850:	2b30      	cmp	r3, #48	; 0x30
 8021852:	d107      	bne.n	8021864 <__cvt+0x74>
 8021854:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802185c:	bf1c      	itt	ne
 802185e:	f1c4 0401 	rsbne	r4, r4, #1
 8021862:	6034      	strne	r4, [r6, #0]
 8021864:	6833      	ldr	r3, [r6, #0]
 8021866:	441a      	add	r2, r3
 8021868:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021870:	bf08      	it	eq
 8021872:	9203      	streq	r2, [sp, #12]
 8021874:	2130      	movs	r1, #48	; 0x30
 8021876:	9b03      	ldr	r3, [sp, #12]
 8021878:	4293      	cmp	r3, r2
 802187a:	d307      	bcc.n	802188c <__cvt+0x9c>
 802187c:	9b03      	ldr	r3, [sp, #12]
 802187e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021880:	1a1b      	subs	r3, r3, r0
 8021882:	6013      	str	r3, [r2, #0]
 8021884:	b005      	add	sp, #20
 8021886:	ecbd 8b02 	vpop	{d8}
 802188a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802188c:	1c5c      	adds	r4, r3, #1
 802188e:	9403      	str	r4, [sp, #12]
 8021890:	7019      	strb	r1, [r3, #0]
 8021892:	e7f0      	b.n	8021876 <__cvt+0x86>

08021894 <__exponent>:
 8021894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021896:	4603      	mov	r3, r0
 8021898:	2900      	cmp	r1, #0
 802189a:	bfb8      	it	lt
 802189c:	4249      	neglt	r1, r1
 802189e:	f803 2b02 	strb.w	r2, [r3], #2
 80218a2:	bfb4      	ite	lt
 80218a4:	222d      	movlt	r2, #45	; 0x2d
 80218a6:	222b      	movge	r2, #43	; 0x2b
 80218a8:	2909      	cmp	r1, #9
 80218aa:	7042      	strb	r2, [r0, #1]
 80218ac:	dd2a      	ble.n	8021904 <__exponent+0x70>
 80218ae:	f10d 0407 	add.w	r4, sp, #7
 80218b2:	46a4      	mov	ip, r4
 80218b4:	270a      	movs	r7, #10
 80218b6:	46a6      	mov	lr, r4
 80218b8:	460a      	mov	r2, r1
 80218ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80218be:	fb07 1516 	mls	r5, r7, r6, r1
 80218c2:	3530      	adds	r5, #48	; 0x30
 80218c4:	2a63      	cmp	r2, #99	; 0x63
 80218c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80218ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80218ce:	4631      	mov	r1, r6
 80218d0:	dcf1      	bgt.n	80218b6 <__exponent+0x22>
 80218d2:	3130      	adds	r1, #48	; 0x30
 80218d4:	f1ae 0502 	sub.w	r5, lr, #2
 80218d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80218dc:	1c44      	adds	r4, r0, #1
 80218de:	4629      	mov	r1, r5
 80218e0:	4561      	cmp	r1, ip
 80218e2:	d30a      	bcc.n	80218fa <__exponent+0x66>
 80218e4:	f10d 0209 	add.w	r2, sp, #9
 80218e8:	eba2 020e 	sub.w	r2, r2, lr
 80218ec:	4565      	cmp	r5, ip
 80218ee:	bf88      	it	hi
 80218f0:	2200      	movhi	r2, #0
 80218f2:	4413      	add	r3, r2
 80218f4:	1a18      	subs	r0, r3, r0
 80218f6:	b003      	add	sp, #12
 80218f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80218fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8021902:	e7ed      	b.n	80218e0 <__exponent+0x4c>
 8021904:	2330      	movs	r3, #48	; 0x30
 8021906:	3130      	adds	r1, #48	; 0x30
 8021908:	7083      	strb	r3, [r0, #2]
 802190a:	70c1      	strb	r1, [r0, #3]
 802190c:	1d03      	adds	r3, r0, #4
 802190e:	e7f1      	b.n	80218f4 <__exponent+0x60>

08021910 <_printf_float>:
 8021910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021914:	b08b      	sub	sp, #44	; 0x2c
 8021916:	460c      	mov	r4, r1
 8021918:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802191c:	4616      	mov	r6, r2
 802191e:	461f      	mov	r7, r3
 8021920:	4605      	mov	r5, r0
 8021922:	f001 fcc9 	bl	80232b8 <_localeconv_r>
 8021926:	f8d0 b000 	ldr.w	fp, [r0]
 802192a:	4658      	mov	r0, fp
 802192c:	f7de fcd8 	bl	80002e0 <strlen>
 8021930:	2300      	movs	r3, #0
 8021932:	9308      	str	r3, [sp, #32]
 8021934:	f8d8 3000 	ldr.w	r3, [r8]
 8021938:	f894 9018 	ldrb.w	r9, [r4, #24]
 802193c:	6822      	ldr	r2, [r4, #0]
 802193e:	3307      	adds	r3, #7
 8021940:	f023 0307 	bic.w	r3, r3, #7
 8021944:	f103 0108 	add.w	r1, r3, #8
 8021948:	f8c8 1000 	str.w	r1, [r8]
 802194c:	4682      	mov	sl, r0
 802194e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021952:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8021956:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8021bb8 <_printf_float+0x2a8>
 802195a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802195e:	eeb0 6bc0 	vabs.f64	d6, d0
 8021962:	eeb4 6b47 	vcmp.f64	d6, d7
 8021966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802196a:	dd24      	ble.n	80219b6 <_printf_float+0xa6>
 802196c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021974:	d502      	bpl.n	802197c <_printf_float+0x6c>
 8021976:	232d      	movs	r3, #45	; 0x2d
 8021978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802197c:	4b90      	ldr	r3, [pc, #576]	; (8021bc0 <_printf_float+0x2b0>)
 802197e:	4891      	ldr	r0, [pc, #580]	; (8021bc4 <_printf_float+0x2b4>)
 8021980:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8021984:	bf94      	ite	ls
 8021986:	4698      	movls	r8, r3
 8021988:	4680      	movhi	r8, r0
 802198a:	2303      	movs	r3, #3
 802198c:	6123      	str	r3, [r4, #16]
 802198e:	f022 0204 	bic.w	r2, r2, #4
 8021992:	2300      	movs	r3, #0
 8021994:	6022      	str	r2, [r4, #0]
 8021996:	9304      	str	r3, [sp, #16]
 8021998:	9700      	str	r7, [sp, #0]
 802199a:	4633      	mov	r3, r6
 802199c:	aa09      	add	r2, sp, #36	; 0x24
 802199e:	4621      	mov	r1, r4
 80219a0:	4628      	mov	r0, r5
 80219a2:	f000 f9d3 	bl	8021d4c <_printf_common>
 80219a6:	3001      	adds	r0, #1
 80219a8:	f040 808a 	bne.w	8021ac0 <_printf_float+0x1b0>
 80219ac:	f04f 30ff 	mov.w	r0, #4294967295
 80219b0:	b00b      	add	sp, #44	; 0x2c
 80219b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80219ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219be:	d709      	bvc.n	80219d4 <_printf_float+0xc4>
 80219c0:	ee10 3a90 	vmov	r3, s1
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	bfbc      	itt	lt
 80219c8:	232d      	movlt	r3, #45	; 0x2d
 80219ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80219ce:	487e      	ldr	r0, [pc, #504]	; (8021bc8 <_printf_float+0x2b8>)
 80219d0:	4b7e      	ldr	r3, [pc, #504]	; (8021bcc <_printf_float+0x2bc>)
 80219d2:	e7d5      	b.n	8021980 <_printf_float+0x70>
 80219d4:	6863      	ldr	r3, [r4, #4]
 80219d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80219da:	9104      	str	r1, [sp, #16]
 80219dc:	1c59      	adds	r1, r3, #1
 80219de:	d13c      	bne.n	8021a5a <_printf_float+0x14a>
 80219e0:	2306      	movs	r3, #6
 80219e2:	6063      	str	r3, [r4, #4]
 80219e4:	2300      	movs	r3, #0
 80219e6:	9303      	str	r3, [sp, #12]
 80219e8:	ab08      	add	r3, sp, #32
 80219ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80219ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80219f2:	ab07      	add	r3, sp, #28
 80219f4:	6861      	ldr	r1, [r4, #4]
 80219f6:	9300      	str	r3, [sp, #0]
 80219f8:	6022      	str	r2, [r4, #0]
 80219fa:	f10d 031b 	add.w	r3, sp, #27
 80219fe:	4628      	mov	r0, r5
 8021a00:	f7ff fef6 	bl	80217f0 <__cvt>
 8021a04:	9b04      	ldr	r3, [sp, #16]
 8021a06:	9907      	ldr	r1, [sp, #28]
 8021a08:	2b47      	cmp	r3, #71	; 0x47
 8021a0a:	4680      	mov	r8, r0
 8021a0c:	d108      	bne.n	8021a20 <_printf_float+0x110>
 8021a0e:	1cc8      	adds	r0, r1, #3
 8021a10:	db02      	blt.n	8021a18 <_printf_float+0x108>
 8021a12:	6863      	ldr	r3, [r4, #4]
 8021a14:	4299      	cmp	r1, r3
 8021a16:	dd41      	ble.n	8021a9c <_printf_float+0x18c>
 8021a18:	f1a9 0902 	sub.w	r9, r9, #2
 8021a1c:	fa5f f989 	uxtb.w	r9, r9
 8021a20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8021a24:	d820      	bhi.n	8021a68 <_printf_float+0x158>
 8021a26:	3901      	subs	r1, #1
 8021a28:	464a      	mov	r2, r9
 8021a2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8021a2e:	9107      	str	r1, [sp, #28]
 8021a30:	f7ff ff30 	bl	8021894 <__exponent>
 8021a34:	9a08      	ldr	r2, [sp, #32]
 8021a36:	9004      	str	r0, [sp, #16]
 8021a38:	1813      	adds	r3, r2, r0
 8021a3a:	2a01      	cmp	r2, #1
 8021a3c:	6123      	str	r3, [r4, #16]
 8021a3e:	dc02      	bgt.n	8021a46 <_printf_float+0x136>
 8021a40:	6822      	ldr	r2, [r4, #0]
 8021a42:	07d2      	lsls	r2, r2, #31
 8021a44:	d501      	bpl.n	8021a4a <_printf_float+0x13a>
 8021a46:	3301      	adds	r3, #1
 8021a48:	6123      	str	r3, [r4, #16]
 8021a4a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d0a2      	beq.n	8021998 <_printf_float+0x88>
 8021a52:	232d      	movs	r3, #45	; 0x2d
 8021a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021a58:	e79e      	b.n	8021998 <_printf_float+0x88>
 8021a5a:	9904      	ldr	r1, [sp, #16]
 8021a5c:	2947      	cmp	r1, #71	; 0x47
 8021a5e:	d1c1      	bne.n	80219e4 <_printf_float+0xd4>
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d1bf      	bne.n	80219e4 <_printf_float+0xd4>
 8021a64:	2301      	movs	r3, #1
 8021a66:	e7bc      	b.n	80219e2 <_printf_float+0xd2>
 8021a68:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8021a6c:	d118      	bne.n	8021aa0 <_printf_float+0x190>
 8021a6e:	2900      	cmp	r1, #0
 8021a70:	6863      	ldr	r3, [r4, #4]
 8021a72:	dd0b      	ble.n	8021a8c <_printf_float+0x17c>
 8021a74:	6121      	str	r1, [r4, #16]
 8021a76:	b913      	cbnz	r3, 8021a7e <_printf_float+0x16e>
 8021a78:	6822      	ldr	r2, [r4, #0]
 8021a7a:	07d0      	lsls	r0, r2, #31
 8021a7c:	d502      	bpl.n	8021a84 <_printf_float+0x174>
 8021a7e:	3301      	adds	r3, #1
 8021a80:	440b      	add	r3, r1
 8021a82:	6123      	str	r3, [r4, #16]
 8021a84:	2300      	movs	r3, #0
 8021a86:	65a1      	str	r1, [r4, #88]	; 0x58
 8021a88:	9304      	str	r3, [sp, #16]
 8021a8a:	e7de      	b.n	8021a4a <_printf_float+0x13a>
 8021a8c:	b913      	cbnz	r3, 8021a94 <_printf_float+0x184>
 8021a8e:	6822      	ldr	r2, [r4, #0]
 8021a90:	07d2      	lsls	r2, r2, #31
 8021a92:	d501      	bpl.n	8021a98 <_printf_float+0x188>
 8021a94:	3302      	adds	r3, #2
 8021a96:	e7f4      	b.n	8021a82 <_printf_float+0x172>
 8021a98:	2301      	movs	r3, #1
 8021a9a:	e7f2      	b.n	8021a82 <_printf_float+0x172>
 8021a9c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8021aa0:	9b08      	ldr	r3, [sp, #32]
 8021aa2:	4299      	cmp	r1, r3
 8021aa4:	db05      	blt.n	8021ab2 <_printf_float+0x1a2>
 8021aa6:	6823      	ldr	r3, [r4, #0]
 8021aa8:	6121      	str	r1, [r4, #16]
 8021aaa:	07d8      	lsls	r0, r3, #31
 8021aac:	d5ea      	bpl.n	8021a84 <_printf_float+0x174>
 8021aae:	1c4b      	adds	r3, r1, #1
 8021ab0:	e7e7      	b.n	8021a82 <_printf_float+0x172>
 8021ab2:	2900      	cmp	r1, #0
 8021ab4:	bfd4      	ite	le
 8021ab6:	f1c1 0202 	rsble	r2, r1, #2
 8021aba:	2201      	movgt	r2, #1
 8021abc:	4413      	add	r3, r2
 8021abe:	e7e0      	b.n	8021a82 <_printf_float+0x172>
 8021ac0:	6823      	ldr	r3, [r4, #0]
 8021ac2:	055a      	lsls	r2, r3, #21
 8021ac4:	d407      	bmi.n	8021ad6 <_printf_float+0x1c6>
 8021ac6:	6923      	ldr	r3, [r4, #16]
 8021ac8:	4642      	mov	r2, r8
 8021aca:	4631      	mov	r1, r6
 8021acc:	4628      	mov	r0, r5
 8021ace:	47b8      	blx	r7
 8021ad0:	3001      	adds	r0, #1
 8021ad2:	d12a      	bne.n	8021b2a <_printf_float+0x21a>
 8021ad4:	e76a      	b.n	80219ac <_printf_float+0x9c>
 8021ad6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8021ada:	f240 80e2 	bls.w	8021ca2 <_printf_float+0x392>
 8021ade:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021ae2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021aea:	d133      	bne.n	8021b54 <_printf_float+0x244>
 8021aec:	4a38      	ldr	r2, [pc, #224]	; (8021bd0 <_printf_float+0x2c0>)
 8021aee:	2301      	movs	r3, #1
 8021af0:	4631      	mov	r1, r6
 8021af2:	4628      	mov	r0, r5
 8021af4:	47b8      	blx	r7
 8021af6:	3001      	adds	r0, #1
 8021af8:	f43f af58 	beq.w	80219ac <_printf_float+0x9c>
 8021afc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021b00:	429a      	cmp	r2, r3
 8021b02:	db02      	blt.n	8021b0a <_printf_float+0x1fa>
 8021b04:	6823      	ldr	r3, [r4, #0]
 8021b06:	07d8      	lsls	r0, r3, #31
 8021b08:	d50f      	bpl.n	8021b2a <_printf_float+0x21a>
 8021b0a:	4653      	mov	r3, sl
 8021b0c:	465a      	mov	r2, fp
 8021b0e:	4631      	mov	r1, r6
 8021b10:	4628      	mov	r0, r5
 8021b12:	47b8      	blx	r7
 8021b14:	3001      	adds	r0, #1
 8021b16:	f43f af49 	beq.w	80219ac <_printf_float+0x9c>
 8021b1a:	f04f 0800 	mov.w	r8, #0
 8021b1e:	f104 091a 	add.w	r9, r4, #26
 8021b22:	9b08      	ldr	r3, [sp, #32]
 8021b24:	3b01      	subs	r3, #1
 8021b26:	4543      	cmp	r3, r8
 8021b28:	dc09      	bgt.n	8021b3e <_printf_float+0x22e>
 8021b2a:	6823      	ldr	r3, [r4, #0]
 8021b2c:	079b      	lsls	r3, r3, #30
 8021b2e:	f100 8108 	bmi.w	8021d42 <_printf_float+0x432>
 8021b32:	68e0      	ldr	r0, [r4, #12]
 8021b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b36:	4298      	cmp	r0, r3
 8021b38:	bfb8      	it	lt
 8021b3a:	4618      	movlt	r0, r3
 8021b3c:	e738      	b.n	80219b0 <_printf_float+0xa0>
 8021b3e:	2301      	movs	r3, #1
 8021b40:	464a      	mov	r2, r9
 8021b42:	4631      	mov	r1, r6
 8021b44:	4628      	mov	r0, r5
 8021b46:	47b8      	blx	r7
 8021b48:	3001      	adds	r0, #1
 8021b4a:	f43f af2f 	beq.w	80219ac <_printf_float+0x9c>
 8021b4e:	f108 0801 	add.w	r8, r8, #1
 8021b52:	e7e6      	b.n	8021b22 <_printf_float+0x212>
 8021b54:	9b07      	ldr	r3, [sp, #28]
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	dc3c      	bgt.n	8021bd4 <_printf_float+0x2c4>
 8021b5a:	4a1d      	ldr	r2, [pc, #116]	; (8021bd0 <_printf_float+0x2c0>)
 8021b5c:	2301      	movs	r3, #1
 8021b5e:	4631      	mov	r1, r6
 8021b60:	4628      	mov	r0, r5
 8021b62:	47b8      	blx	r7
 8021b64:	3001      	adds	r0, #1
 8021b66:	f43f af21 	beq.w	80219ac <_printf_float+0x9c>
 8021b6a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021b6e:	4313      	orrs	r3, r2
 8021b70:	d102      	bne.n	8021b78 <_printf_float+0x268>
 8021b72:	6823      	ldr	r3, [r4, #0]
 8021b74:	07d9      	lsls	r1, r3, #31
 8021b76:	d5d8      	bpl.n	8021b2a <_printf_float+0x21a>
 8021b78:	4653      	mov	r3, sl
 8021b7a:	465a      	mov	r2, fp
 8021b7c:	4631      	mov	r1, r6
 8021b7e:	4628      	mov	r0, r5
 8021b80:	47b8      	blx	r7
 8021b82:	3001      	adds	r0, #1
 8021b84:	f43f af12 	beq.w	80219ac <_printf_float+0x9c>
 8021b88:	f04f 0900 	mov.w	r9, #0
 8021b8c:	f104 0a1a 	add.w	sl, r4, #26
 8021b90:	9b07      	ldr	r3, [sp, #28]
 8021b92:	425b      	negs	r3, r3
 8021b94:	454b      	cmp	r3, r9
 8021b96:	dc01      	bgt.n	8021b9c <_printf_float+0x28c>
 8021b98:	9b08      	ldr	r3, [sp, #32]
 8021b9a:	e795      	b.n	8021ac8 <_printf_float+0x1b8>
 8021b9c:	2301      	movs	r3, #1
 8021b9e:	4652      	mov	r2, sl
 8021ba0:	4631      	mov	r1, r6
 8021ba2:	4628      	mov	r0, r5
 8021ba4:	47b8      	blx	r7
 8021ba6:	3001      	adds	r0, #1
 8021ba8:	f43f af00 	beq.w	80219ac <_printf_float+0x9c>
 8021bac:	f109 0901 	add.w	r9, r9, #1
 8021bb0:	e7ee      	b.n	8021b90 <_printf_float+0x280>
 8021bb2:	bf00      	nop
 8021bb4:	f3af 8000 	nop.w
 8021bb8:	ffffffff 	.word	0xffffffff
 8021bbc:	7fefffff 	.word	0x7fefffff
 8021bc0:	080266f5 	.word	0x080266f5
 8021bc4:	080266f9 	.word	0x080266f9
 8021bc8:	08026701 	.word	0x08026701
 8021bcc:	080266fd 	.word	0x080266fd
 8021bd0:	08025dda 	.word	0x08025dda
 8021bd4:	9a08      	ldr	r2, [sp, #32]
 8021bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021bd8:	429a      	cmp	r2, r3
 8021bda:	bfa8      	it	ge
 8021bdc:	461a      	movge	r2, r3
 8021bde:	2a00      	cmp	r2, #0
 8021be0:	4691      	mov	r9, r2
 8021be2:	dc38      	bgt.n	8021c56 <_printf_float+0x346>
 8021be4:	2300      	movs	r3, #0
 8021be6:	9305      	str	r3, [sp, #20]
 8021be8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021bec:	f104 021a 	add.w	r2, r4, #26
 8021bf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021bf2:	9905      	ldr	r1, [sp, #20]
 8021bf4:	9304      	str	r3, [sp, #16]
 8021bf6:	eba3 0309 	sub.w	r3, r3, r9
 8021bfa:	428b      	cmp	r3, r1
 8021bfc:	dc33      	bgt.n	8021c66 <_printf_float+0x356>
 8021bfe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021c02:	429a      	cmp	r2, r3
 8021c04:	db3c      	blt.n	8021c80 <_printf_float+0x370>
 8021c06:	6823      	ldr	r3, [r4, #0]
 8021c08:	07da      	lsls	r2, r3, #31
 8021c0a:	d439      	bmi.n	8021c80 <_printf_float+0x370>
 8021c0c:	9b08      	ldr	r3, [sp, #32]
 8021c0e:	9a04      	ldr	r2, [sp, #16]
 8021c10:	9907      	ldr	r1, [sp, #28]
 8021c12:	1a9a      	subs	r2, r3, r2
 8021c14:	eba3 0901 	sub.w	r9, r3, r1
 8021c18:	4591      	cmp	r9, r2
 8021c1a:	bfa8      	it	ge
 8021c1c:	4691      	movge	r9, r2
 8021c1e:	f1b9 0f00 	cmp.w	r9, #0
 8021c22:	dc35      	bgt.n	8021c90 <_printf_float+0x380>
 8021c24:	f04f 0800 	mov.w	r8, #0
 8021c28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021c2c:	f104 0a1a 	add.w	sl, r4, #26
 8021c30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021c34:	1a9b      	subs	r3, r3, r2
 8021c36:	eba3 0309 	sub.w	r3, r3, r9
 8021c3a:	4543      	cmp	r3, r8
 8021c3c:	f77f af75 	ble.w	8021b2a <_printf_float+0x21a>
 8021c40:	2301      	movs	r3, #1
 8021c42:	4652      	mov	r2, sl
 8021c44:	4631      	mov	r1, r6
 8021c46:	4628      	mov	r0, r5
 8021c48:	47b8      	blx	r7
 8021c4a:	3001      	adds	r0, #1
 8021c4c:	f43f aeae 	beq.w	80219ac <_printf_float+0x9c>
 8021c50:	f108 0801 	add.w	r8, r8, #1
 8021c54:	e7ec      	b.n	8021c30 <_printf_float+0x320>
 8021c56:	4613      	mov	r3, r2
 8021c58:	4631      	mov	r1, r6
 8021c5a:	4642      	mov	r2, r8
 8021c5c:	4628      	mov	r0, r5
 8021c5e:	47b8      	blx	r7
 8021c60:	3001      	adds	r0, #1
 8021c62:	d1bf      	bne.n	8021be4 <_printf_float+0x2d4>
 8021c64:	e6a2      	b.n	80219ac <_printf_float+0x9c>
 8021c66:	2301      	movs	r3, #1
 8021c68:	4631      	mov	r1, r6
 8021c6a:	4628      	mov	r0, r5
 8021c6c:	9204      	str	r2, [sp, #16]
 8021c6e:	47b8      	blx	r7
 8021c70:	3001      	adds	r0, #1
 8021c72:	f43f ae9b 	beq.w	80219ac <_printf_float+0x9c>
 8021c76:	9b05      	ldr	r3, [sp, #20]
 8021c78:	9a04      	ldr	r2, [sp, #16]
 8021c7a:	3301      	adds	r3, #1
 8021c7c:	9305      	str	r3, [sp, #20]
 8021c7e:	e7b7      	b.n	8021bf0 <_printf_float+0x2e0>
 8021c80:	4653      	mov	r3, sl
 8021c82:	465a      	mov	r2, fp
 8021c84:	4631      	mov	r1, r6
 8021c86:	4628      	mov	r0, r5
 8021c88:	47b8      	blx	r7
 8021c8a:	3001      	adds	r0, #1
 8021c8c:	d1be      	bne.n	8021c0c <_printf_float+0x2fc>
 8021c8e:	e68d      	b.n	80219ac <_printf_float+0x9c>
 8021c90:	9a04      	ldr	r2, [sp, #16]
 8021c92:	464b      	mov	r3, r9
 8021c94:	4442      	add	r2, r8
 8021c96:	4631      	mov	r1, r6
 8021c98:	4628      	mov	r0, r5
 8021c9a:	47b8      	blx	r7
 8021c9c:	3001      	adds	r0, #1
 8021c9e:	d1c1      	bne.n	8021c24 <_printf_float+0x314>
 8021ca0:	e684      	b.n	80219ac <_printf_float+0x9c>
 8021ca2:	9a08      	ldr	r2, [sp, #32]
 8021ca4:	2a01      	cmp	r2, #1
 8021ca6:	dc01      	bgt.n	8021cac <_printf_float+0x39c>
 8021ca8:	07db      	lsls	r3, r3, #31
 8021caa:	d537      	bpl.n	8021d1c <_printf_float+0x40c>
 8021cac:	2301      	movs	r3, #1
 8021cae:	4642      	mov	r2, r8
 8021cb0:	4631      	mov	r1, r6
 8021cb2:	4628      	mov	r0, r5
 8021cb4:	47b8      	blx	r7
 8021cb6:	3001      	adds	r0, #1
 8021cb8:	f43f ae78 	beq.w	80219ac <_printf_float+0x9c>
 8021cbc:	4653      	mov	r3, sl
 8021cbe:	465a      	mov	r2, fp
 8021cc0:	4631      	mov	r1, r6
 8021cc2:	4628      	mov	r0, r5
 8021cc4:	47b8      	blx	r7
 8021cc6:	3001      	adds	r0, #1
 8021cc8:	f43f ae70 	beq.w	80219ac <_printf_float+0x9c>
 8021ccc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021cd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cd8:	d01b      	beq.n	8021d12 <_printf_float+0x402>
 8021cda:	9b08      	ldr	r3, [sp, #32]
 8021cdc:	f108 0201 	add.w	r2, r8, #1
 8021ce0:	3b01      	subs	r3, #1
 8021ce2:	4631      	mov	r1, r6
 8021ce4:	4628      	mov	r0, r5
 8021ce6:	47b8      	blx	r7
 8021ce8:	3001      	adds	r0, #1
 8021cea:	d10e      	bne.n	8021d0a <_printf_float+0x3fa>
 8021cec:	e65e      	b.n	80219ac <_printf_float+0x9c>
 8021cee:	2301      	movs	r3, #1
 8021cf0:	464a      	mov	r2, r9
 8021cf2:	4631      	mov	r1, r6
 8021cf4:	4628      	mov	r0, r5
 8021cf6:	47b8      	blx	r7
 8021cf8:	3001      	adds	r0, #1
 8021cfa:	f43f ae57 	beq.w	80219ac <_printf_float+0x9c>
 8021cfe:	f108 0801 	add.w	r8, r8, #1
 8021d02:	9b08      	ldr	r3, [sp, #32]
 8021d04:	3b01      	subs	r3, #1
 8021d06:	4543      	cmp	r3, r8
 8021d08:	dcf1      	bgt.n	8021cee <_printf_float+0x3de>
 8021d0a:	9b04      	ldr	r3, [sp, #16]
 8021d0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8021d10:	e6db      	b.n	8021aca <_printf_float+0x1ba>
 8021d12:	f04f 0800 	mov.w	r8, #0
 8021d16:	f104 091a 	add.w	r9, r4, #26
 8021d1a:	e7f2      	b.n	8021d02 <_printf_float+0x3f2>
 8021d1c:	2301      	movs	r3, #1
 8021d1e:	4642      	mov	r2, r8
 8021d20:	e7df      	b.n	8021ce2 <_printf_float+0x3d2>
 8021d22:	2301      	movs	r3, #1
 8021d24:	464a      	mov	r2, r9
 8021d26:	4631      	mov	r1, r6
 8021d28:	4628      	mov	r0, r5
 8021d2a:	47b8      	blx	r7
 8021d2c:	3001      	adds	r0, #1
 8021d2e:	f43f ae3d 	beq.w	80219ac <_printf_float+0x9c>
 8021d32:	f108 0801 	add.w	r8, r8, #1
 8021d36:	68e3      	ldr	r3, [r4, #12]
 8021d38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021d3a:	1a5b      	subs	r3, r3, r1
 8021d3c:	4543      	cmp	r3, r8
 8021d3e:	dcf0      	bgt.n	8021d22 <_printf_float+0x412>
 8021d40:	e6f7      	b.n	8021b32 <_printf_float+0x222>
 8021d42:	f04f 0800 	mov.w	r8, #0
 8021d46:	f104 0919 	add.w	r9, r4, #25
 8021d4a:	e7f4      	b.n	8021d36 <_printf_float+0x426>

08021d4c <_printf_common>:
 8021d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d50:	4616      	mov	r6, r2
 8021d52:	4699      	mov	r9, r3
 8021d54:	688a      	ldr	r2, [r1, #8]
 8021d56:	690b      	ldr	r3, [r1, #16]
 8021d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021d5c:	4293      	cmp	r3, r2
 8021d5e:	bfb8      	it	lt
 8021d60:	4613      	movlt	r3, r2
 8021d62:	6033      	str	r3, [r6, #0]
 8021d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021d68:	4607      	mov	r7, r0
 8021d6a:	460c      	mov	r4, r1
 8021d6c:	b10a      	cbz	r2, 8021d72 <_printf_common+0x26>
 8021d6e:	3301      	adds	r3, #1
 8021d70:	6033      	str	r3, [r6, #0]
 8021d72:	6823      	ldr	r3, [r4, #0]
 8021d74:	0699      	lsls	r1, r3, #26
 8021d76:	bf42      	ittt	mi
 8021d78:	6833      	ldrmi	r3, [r6, #0]
 8021d7a:	3302      	addmi	r3, #2
 8021d7c:	6033      	strmi	r3, [r6, #0]
 8021d7e:	6825      	ldr	r5, [r4, #0]
 8021d80:	f015 0506 	ands.w	r5, r5, #6
 8021d84:	d106      	bne.n	8021d94 <_printf_common+0x48>
 8021d86:	f104 0a19 	add.w	sl, r4, #25
 8021d8a:	68e3      	ldr	r3, [r4, #12]
 8021d8c:	6832      	ldr	r2, [r6, #0]
 8021d8e:	1a9b      	subs	r3, r3, r2
 8021d90:	42ab      	cmp	r3, r5
 8021d92:	dc26      	bgt.n	8021de2 <_printf_common+0x96>
 8021d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021d98:	1e13      	subs	r3, r2, #0
 8021d9a:	6822      	ldr	r2, [r4, #0]
 8021d9c:	bf18      	it	ne
 8021d9e:	2301      	movne	r3, #1
 8021da0:	0692      	lsls	r2, r2, #26
 8021da2:	d42b      	bmi.n	8021dfc <_printf_common+0xb0>
 8021da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021da8:	4649      	mov	r1, r9
 8021daa:	4638      	mov	r0, r7
 8021dac:	47c0      	blx	r8
 8021dae:	3001      	adds	r0, #1
 8021db0:	d01e      	beq.n	8021df0 <_printf_common+0xa4>
 8021db2:	6823      	ldr	r3, [r4, #0]
 8021db4:	68e5      	ldr	r5, [r4, #12]
 8021db6:	6832      	ldr	r2, [r6, #0]
 8021db8:	f003 0306 	and.w	r3, r3, #6
 8021dbc:	2b04      	cmp	r3, #4
 8021dbe:	bf08      	it	eq
 8021dc0:	1aad      	subeq	r5, r5, r2
 8021dc2:	68a3      	ldr	r3, [r4, #8]
 8021dc4:	6922      	ldr	r2, [r4, #16]
 8021dc6:	bf0c      	ite	eq
 8021dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021dcc:	2500      	movne	r5, #0
 8021dce:	4293      	cmp	r3, r2
 8021dd0:	bfc4      	itt	gt
 8021dd2:	1a9b      	subgt	r3, r3, r2
 8021dd4:	18ed      	addgt	r5, r5, r3
 8021dd6:	2600      	movs	r6, #0
 8021dd8:	341a      	adds	r4, #26
 8021dda:	42b5      	cmp	r5, r6
 8021ddc:	d11a      	bne.n	8021e14 <_printf_common+0xc8>
 8021dde:	2000      	movs	r0, #0
 8021de0:	e008      	b.n	8021df4 <_printf_common+0xa8>
 8021de2:	2301      	movs	r3, #1
 8021de4:	4652      	mov	r2, sl
 8021de6:	4649      	mov	r1, r9
 8021de8:	4638      	mov	r0, r7
 8021dea:	47c0      	blx	r8
 8021dec:	3001      	adds	r0, #1
 8021dee:	d103      	bne.n	8021df8 <_printf_common+0xac>
 8021df0:	f04f 30ff 	mov.w	r0, #4294967295
 8021df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021df8:	3501      	adds	r5, #1
 8021dfa:	e7c6      	b.n	8021d8a <_printf_common+0x3e>
 8021dfc:	18e1      	adds	r1, r4, r3
 8021dfe:	1c5a      	adds	r2, r3, #1
 8021e00:	2030      	movs	r0, #48	; 0x30
 8021e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021e06:	4422      	add	r2, r4
 8021e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021e10:	3302      	adds	r3, #2
 8021e12:	e7c7      	b.n	8021da4 <_printf_common+0x58>
 8021e14:	2301      	movs	r3, #1
 8021e16:	4622      	mov	r2, r4
 8021e18:	4649      	mov	r1, r9
 8021e1a:	4638      	mov	r0, r7
 8021e1c:	47c0      	blx	r8
 8021e1e:	3001      	adds	r0, #1
 8021e20:	d0e6      	beq.n	8021df0 <_printf_common+0xa4>
 8021e22:	3601      	adds	r6, #1
 8021e24:	e7d9      	b.n	8021dda <_printf_common+0x8e>
	...

08021e28 <_printf_i>:
 8021e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021e2c:	7e0f      	ldrb	r7, [r1, #24]
 8021e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021e30:	2f78      	cmp	r7, #120	; 0x78
 8021e32:	4691      	mov	r9, r2
 8021e34:	4680      	mov	r8, r0
 8021e36:	460c      	mov	r4, r1
 8021e38:	469a      	mov	sl, r3
 8021e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021e3e:	d807      	bhi.n	8021e50 <_printf_i+0x28>
 8021e40:	2f62      	cmp	r7, #98	; 0x62
 8021e42:	d80a      	bhi.n	8021e5a <_printf_i+0x32>
 8021e44:	2f00      	cmp	r7, #0
 8021e46:	f000 80d8 	beq.w	8021ffa <_printf_i+0x1d2>
 8021e4a:	2f58      	cmp	r7, #88	; 0x58
 8021e4c:	f000 80a3 	beq.w	8021f96 <_printf_i+0x16e>
 8021e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021e58:	e03a      	b.n	8021ed0 <_printf_i+0xa8>
 8021e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021e5e:	2b15      	cmp	r3, #21
 8021e60:	d8f6      	bhi.n	8021e50 <_printf_i+0x28>
 8021e62:	a101      	add	r1, pc, #4	; (adr r1, 8021e68 <_printf_i+0x40>)
 8021e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021e68:	08021ec1 	.word	0x08021ec1
 8021e6c:	08021ed5 	.word	0x08021ed5
 8021e70:	08021e51 	.word	0x08021e51
 8021e74:	08021e51 	.word	0x08021e51
 8021e78:	08021e51 	.word	0x08021e51
 8021e7c:	08021e51 	.word	0x08021e51
 8021e80:	08021ed5 	.word	0x08021ed5
 8021e84:	08021e51 	.word	0x08021e51
 8021e88:	08021e51 	.word	0x08021e51
 8021e8c:	08021e51 	.word	0x08021e51
 8021e90:	08021e51 	.word	0x08021e51
 8021e94:	08021fe1 	.word	0x08021fe1
 8021e98:	08021f05 	.word	0x08021f05
 8021e9c:	08021fc3 	.word	0x08021fc3
 8021ea0:	08021e51 	.word	0x08021e51
 8021ea4:	08021e51 	.word	0x08021e51
 8021ea8:	08022003 	.word	0x08022003
 8021eac:	08021e51 	.word	0x08021e51
 8021eb0:	08021f05 	.word	0x08021f05
 8021eb4:	08021e51 	.word	0x08021e51
 8021eb8:	08021e51 	.word	0x08021e51
 8021ebc:	08021fcb 	.word	0x08021fcb
 8021ec0:	682b      	ldr	r3, [r5, #0]
 8021ec2:	1d1a      	adds	r2, r3, #4
 8021ec4:	681b      	ldr	r3, [r3, #0]
 8021ec6:	602a      	str	r2, [r5, #0]
 8021ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021ed0:	2301      	movs	r3, #1
 8021ed2:	e0a3      	b.n	802201c <_printf_i+0x1f4>
 8021ed4:	6820      	ldr	r0, [r4, #0]
 8021ed6:	6829      	ldr	r1, [r5, #0]
 8021ed8:	0606      	lsls	r6, r0, #24
 8021eda:	f101 0304 	add.w	r3, r1, #4
 8021ede:	d50a      	bpl.n	8021ef6 <_printf_i+0xce>
 8021ee0:	680e      	ldr	r6, [r1, #0]
 8021ee2:	602b      	str	r3, [r5, #0]
 8021ee4:	2e00      	cmp	r6, #0
 8021ee6:	da03      	bge.n	8021ef0 <_printf_i+0xc8>
 8021ee8:	232d      	movs	r3, #45	; 0x2d
 8021eea:	4276      	negs	r6, r6
 8021eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021ef0:	485e      	ldr	r0, [pc, #376]	; (802206c <_printf_i+0x244>)
 8021ef2:	230a      	movs	r3, #10
 8021ef4:	e019      	b.n	8021f2a <_printf_i+0x102>
 8021ef6:	680e      	ldr	r6, [r1, #0]
 8021ef8:	602b      	str	r3, [r5, #0]
 8021efa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021efe:	bf18      	it	ne
 8021f00:	b236      	sxthne	r6, r6
 8021f02:	e7ef      	b.n	8021ee4 <_printf_i+0xbc>
 8021f04:	682b      	ldr	r3, [r5, #0]
 8021f06:	6820      	ldr	r0, [r4, #0]
 8021f08:	1d19      	adds	r1, r3, #4
 8021f0a:	6029      	str	r1, [r5, #0]
 8021f0c:	0601      	lsls	r1, r0, #24
 8021f0e:	d501      	bpl.n	8021f14 <_printf_i+0xec>
 8021f10:	681e      	ldr	r6, [r3, #0]
 8021f12:	e002      	b.n	8021f1a <_printf_i+0xf2>
 8021f14:	0646      	lsls	r6, r0, #25
 8021f16:	d5fb      	bpl.n	8021f10 <_printf_i+0xe8>
 8021f18:	881e      	ldrh	r6, [r3, #0]
 8021f1a:	4854      	ldr	r0, [pc, #336]	; (802206c <_printf_i+0x244>)
 8021f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8021f1e:	bf0c      	ite	eq
 8021f20:	2308      	moveq	r3, #8
 8021f22:	230a      	movne	r3, #10
 8021f24:	2100      	movs	r1, #0
 8021f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021f2a:	6865      	ldr	r5, [r4, #4]
 8021f2c:	60a5      	str	r5, [r4, #8]
 8021f2e:	2d00      	cmp	r5, #0
 8021f30:	bfa2      	ittt	ge
 8021f32:	6821      	ldrge	r1, [r4, #0]
 8021f34:	f021 0104 	bicge.w	r1, r1, #4
 8021f38:	6021      	strge	r1, [r4, #0]
 8021f3a:	b90e      	cbnz	r6, 8021f40 <_printf_i+0x118>
 8021f3c:	2d00      	cmp	r5, #0
 8021f3e:	d04d      	beq.n	8021fdc <_printf_i+0x1b4>
 8021f40:	4615      	mov	r5, r2
 8021f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8021f46:	fb03 6711 	mls	r7, r3, r1, r6
 8021f4a:	5dc7      	ldrb	r7, [r0, r7]
 8021f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8021f50:	4637      	mov	r7, r6
 8021f52:	42bb      	cmp	r3, r7
 8021f54:	460e      	mov	r6, r1
 8021f56:	d9f4      	bls.n	8021f42 <_printf_i+0x11a>
 8021f58:	2b08      	cmp	r3, #8
 8021f5a:	d10b      	bne.n	8021f74 <_printf_i+0x14c>
 8021f5c:	6823      	ldr	r3, [r4, #0]
 8021f5e:	07de      	lsls	r6, r3, #31
 8021f60:	d508      	bpl.n	8021f74 <_printf_i+0x14c>
 8021f62:	6923      	ldr	r3, [r4, #16]
 8021f64:	6861      	ldr	r1, [r4, #4]
 8021f66:	4299      	cmp	r1, r3
 8021f68:	bfde      	ittt	le
 8021f6a:	2330      	movle	r3, #48	; 0x30
 8021f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021f74:	1b52      	subs	r2, r2, r5
 8021f76:	6122      	str	r2, [r4, #16]
 8021f78:	f8cd a000 	str.w	sl, [sp]
 8021f7c:	464b      	mov	r3, r9
 8021f7e:	aa03      	add	r2, sp, #12
 8021f80:	4621      	mov	r1, r4
 8021f82:	4640      	mov	r0, r8
 8021f84:	f7ff fee2 	bl	8021d4c <_printf_common>
 8021f88:	3001      	adds	r0, #1
 8021f8a:	d14c      	bne.n	8022026 <_printf_i+0x1fe>
 8021f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8021f90:	b004      	add	sp, #16
 8021f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f96:	4835      	ldr	r0, [pc, #212]	; (802206c <_printf_i+0x244>)
 8021f98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8021f9c:	6829      	ldr	r1, [r5, #0]
 8021f9e:	6823      	ldr	r3, [r4, #0]
 8021fa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8021fa4:	6029      	str	r1, [r5, #0]
 8021fa6:	061d      	lsls	r5, r3, #24
 8021fa8:	d514      	bpl.n	8021fd4 <_printf_i+0x1ac>
 8021faa:	07df      	lsls	r7, r3, #31
 8021fac:	bf44      	itt	mi
 8021fae:	f043 0320 	orrmi.w	r3, r3, #32
 8021fb2:	6023      	strmi	r3, [r4, #0]
 8021fb4:	b91e      	cbnz	r6, 8021fbe <_printf_i+0x196>
 8021fb6:	6823      	ldr	r3, [r4, #0]
 8021fb8:	f023 0320 	bic.w	r3, r3, #32
 8021fbc:	6023      	str	r3, [r4, #0]
 8021fbe:	2310      	movs	r3, #16
 8021fc0:	e7b0      	b.n	8021f24 <_printf_i+0xfc>
 8021fc2:	6823      	ldr	r3, [r4, #0]
 8021fc4:	f043 0320 	orr.w	r3, r3, #32
 8021fc8:	6023      	str	r3, [r4, #0]
 8021fca:	2378      	movs	r3, #120	; 0x78
 8021fcc:	4828      	ldr	r0, [pc, #160]	; (8022070 <_printf_i+0x248>)
 8021fce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021fd2:	e7e3      	b.n	8021f9c <_printf_i+0x174>
 8021fd4:	0659      	lsls	r1, r3, #25
 8021fd6:	bf48      	it	mi
 8021fd8:	b2b6      	uxthmi	r6, r6
 8021fda:	e7e6      	b.n	8021faa <_printf_i+0x182>
 8021fdc:	4615      	mov	r5, r2
 8021fde:	e7bb      	b.n	8021f58 <_printf_i+0x130>
 8021fe0:	682b      	ldr	r3, [r5, #0]
 8021fe2:	6826      	ldr	r6, [r4, #0]
 8021fe4:	6961      	ldr	r1, [r4, #20]
 8021fe6:	1d18      	adds	r0, r3, #4
 8021fe8:	6028      	str	r0, [r5, #0]
 8021fea:	0635      	lsls	r5, r6, #24
 8021fec:	681b      	ldr	r3, [r3, #0]
 8021fee:	d501      	bpl.n	8021ff4 <_printf_i+0x1cc>
 8021ff0:	6019      	str	r1, [r3, #0]
 8021ff2:	e002      	b.n	8021ffa <_printf_i+0x1d2>
 8021ff4:	0670      	lsls	r0, r6, #25
 8021ff6:	d5fb      	bpl.n	8021ff0 <_printf_i+0x1c8>
 8021ff8:	8019      	strh	r1, [r3, #0]
 8021ffa:	2300      	movs	r3, #0
 8021ffc:	6123      	str	r3, [r4, #16]
 8021ffe:	4615      	mov	r5, r2
 8022000:	e7ba      	b.n	8021f78 <_printf_i+0x150>
 8022002:	682b      	ldr	r3, [r5, #0]
 8022004:	1d1a      	adds	r2, r3, #4
 8022006:	602a      	str	r2, [r5, #0]
 8022008:	681d      	ldr	r5, [r3, #0]
 802200a:	6862      	ldr	r2, [r4, #4]
 802200c:	2100      	movs	r1, #0
 802200e:	4628      	mov	r0, r5
 8022010:	f7de f96e 	bl	80002f0 <memchr>
 8022014:	b108      	cbz	r0, 802201a <_printf_i+0x1f2>
 8022016:	1b40      	subs	r0, r0, r5
 8022018:	6060      	str	r0, [r4, #4]
 802201a:	6863      	ldr	r3, [r4, #4]
 802201c:	6123      	str	r3, [r4, #16]
 802201e:	2300      	movs	r3, #0
 8022020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022024:	e7a8      	b.n	8021f78 <_printf_i+0x150>
 8022026:	6923      	ldr	r3, [r4, #16]
 8022028:	462a      	mov	r2, r5
 802202a:	4649      	mov	r1, r9
 802202c:	4640      	mov	r0, r8
 802202e:	47d0      	blx	sl
 8022030:	3001      	adds	r0, #1
 8022032:	d0ab      	beq.n	8021f8c <_printf_i+0x164>
 8022034:	6823      	ldr	r3, [r4, #0]
 8022036:	079b      	lsls	r3, r3, #30
 8022038:	d413      	bmi.n	8022062 <_printf_i+0x23a>
 802203a:	68e0      	ldr	r0, [r4, #12]
 802203c:	9b03      	ldr	r3, [sp, #12]
 802203e:	4298      	cmp	r0, r3
 8022040:	bfb8      	it	lt
 8022042:	4618      	movlt	r0, r3
 8022044:	e7a4      	b.n	8021f90 <_printf_i+0x168>
 8022046:	2301      	movs	r3, #1
 8022048:	4632      	mov	r2, r6
 802204a:	4649      	mov	r1, r9
 802204c:	4640      	mov	r0, r8
 802204e:	47d0      	blx	sl
 8022050:	3001      	adds	r0, #1
 8022052:	d09b      	beq.n	8021f8c <_printf_i+0x164>
 8022054:	3501      	adds	r5, #1
 8022056:	68e3      	ldr	r3, [r4, #12]
 8022058:	9903      	ldr	r1, [sp, #12]
 802205a:	1a5b      	subs	r3, r3, r1
 802205c:	42ab      	cmp	r3, r5
 802205e:	dcf2      	bgt.n	8022046 <_printf_i+0x21e>
 8022060:	e7eb      	b.n	802203a <_printf_i+0x212>
 8022062:	2500      	movs	r5, #0
 8022064:	f104 0619 	add.w	r6, r4, #25
 8022068:	e7f5      	b.n	8022056 <_printf_i+0x22e>
 802206a:	bf00      	nop
 802206c:	08026705 	.word	0x08026705
 8022070:	08026716 	.word	0x08026716

08022074 <cleanup_glue>:
 8022074:	b538      	push	{r3, r4, r5, lr}
 8022076:	460c      	mov	r4, r1
 8022078:	6809      	ldr	r1, [r1, #0]
 802207a:	4605      	mov	r5, r0
 802207c:	b109      	cbz	r1, 8022082 <cleanup_glue+0xe>
 802207e:	f7ff fff9 	bl	8022074 <cleanup_glue>
 8022082:	4621      	mov	r1, r4
 8022084:	4628      	mov	r0, r5
 8022086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802208a:	f7ff b977 	b.w	802137c <_free_r>
	...

08022090 <_reclaim_reent>:
 8022090:	4b2c      	ldr	r3, [pc, #176]	; (8022144 <_reclaim_reent+0xb4>)
 8022092:	681b      	ldr	r3, [r3, #0]
 8022094:	4283      	cmp	r3, r0
 8022096:	b570      	push	{r4, r5, r6, lr}
 8022098:	4604      	mov	r4, r0
 802209a:	d051      	beq.n	8022140 <_reclaim_reent+0xb0>
 802209c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802209e:	b143      	cbz	r3, 80220b2 <_reclaim_reent+0x22>
 80220a0:	68db      	ldr	r3, [r3, #12]
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d14a      	bne.n	802213c <_reclaim_reent+0xac>
 80220a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80220a8:	6819      	ldr	r1, [r3, #0]
 80220aa:	b111      	cbz	r1, 80220b2 <_reclaim_reent+0x22>
 80220ac:	4620      	mov	r0, r4
 80220ae:	f7ff f965 	bl	802137c <_free_r>
 80220b2:	6961      	ldr	r1, [r4, #20]
 80220b4:	b111      	cbz	r1, 80220bc <_reclaim_reent+0x2c>
 80220b6:	4620      	mov	r0, r4
 80220b8:	f7ff f960 	bl	802137c <_free_r>
 80220bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80220be:	b111      	cbz	r1, 80220c6 <_reclaim_reent+0x36>
 80220c0:	4620      	mov	r0, r4
 80220c2:	f7ff f95b 	bl	802137c <_free_r>
 80220c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80220c8:	b111      	cbz	r1, 80220d0 <_reclaim_reent+0x40>
 80220ca:	4620      	mov	r0, r4
 80220cc:	f7ff f956 	bl	802137c <_free_r>
 80220d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80220d2:	b111      	cbz	r1, 80220da <_reclaim_reent+0x4a>
 80220d4:	4620      	mov	r0, r4
 80220d6:	f7ff f951 	bl	802137c <_free_r>
 80220da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80220dc:	b111      	cbz	r1, 80220e4 <_reclaim_reent+0x54>
 80220de:	4620      	mov	r0, r4
 80220e0:	f7ff f94c 	bl	802137c <_free_r>
 80220e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80220e6:	b111      	cbz	r1, 80220ee <_reclaim_reent+0x5e>
 80220e8:	4620      	mov	r0, r4
 80220ea:	f7ff f947 	bl	802137c <_free_r>
 80220ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80220f0:	b111      	cbz	r1, 80220f8 <_reclaim_reent+0x68>
 80220f2:	4620      	mov	r0, r4
 80220f4:	f7ff f942 	bl	802137c <_free_r>
 80220f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80220fa:	b111      	cbz	r1, 8022102 <_reclaim_reent+0x72>
 80220fc:	4620      	mov	r0, r4
 80220fe:	f7ff f93d 	bl	802137c <_free_r>
 8022102:	69a3      	ldr	r3, [r4, #24]
 8022104:	b1e3      	cbz	r3, 8022140 <_reclaim_reent+0xb0>
 8022106:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022108:	4620      	mov	r0, r4
 802210a:	4798      	blx	r3
 802210c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802210e:	b1b9      	cbz	r1, 8022140 <_reclaim_reent+0xb0>
 8022110:	4620      	mov	r0, r4
 8022112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022116:	f7ff bfad 	b.w	8022074 <cleanup_glue>
 802211a:	5949      	ldr	r1, [r1, r5]
 802211c:	b941      	cbnz	r1, 8022130 <_reclaim_reent+0xa0>
 802211e:	3504      	adds	r5, #4
 8022120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022122:	2d80      	cmp	r5, #128	; 0x80
 8022124:	68d9      	ldr	r1, [r3, #12]
 8022126:	d1f8      	bne.n	802211a <_reclaim_reent+0x8a>
 8022128:	4620      	mov	r0, r4
 802212a:	f7ff f927 	bl	802137c <_free_r>
 802212e:	e7ba      	b.n	80220a6 <_reclaim_reent+0x16>
 8022130:	680e      	ldr	r6, [r1, #0]
 8022132:	4620      	mov	r0, r4
 8022134:	f7ff f922 	bl	802137c <_free_r>
 8022138:	4631      	mov	r1, r6
 802213a:	e7ef      	b.n	802211c <_reclaim_reent+0x8c>
 802213c:	2500      	movs	r5, #0
 802213e:	e7ef      	b.n	8022120 <_reclaim_reent+0x90>
 8022140:	bd70      	pop	{r4, r5, r6, pc}
 8022142:	bf00      	nop
 8022144:	20000140 	.word	0x20000140

08022148 <_sbrk_r>:
 8022148:	b538      	push	{r3, r4, r5, lr}
 802214a:	4d06      	ldr	r5, [pc, #24]	; (8022164 <_sbrk_r+0x1c>)
 802214c:	2300      	movs	r3, #0
 802214e:	4604      	mov	r4, r0
 8022150:	4608      	mov	r0, r1
 8022152:	602b      	str	r3, [r5, #0]
 8022154:	f7e1 fd22 	bl	8003b9c <_sbrk>
 8022158:	1c43      	adds	r3, r0, #1
 802215a:	d102      	bne.n	8022162 <_sbrk_r+0x1a>
 802215c:	682b      	ldr	r3, [r5, #0]
 802215e:	b103      	cbz	r3, 8022162 <_sbrk_r+0x1a>
 8022160:	6023      	str	r3, [r4, #0]
 8022162:	bd38      	pop	{r3, r4, r5, pc}
 8022164:	20007480 	.word	0x20007480

08022168 <_raise_r>:
 8022168:	291f      	cmp	r1, #31
 802216a:	b538      	push	{r3, r4, r5, lr}
 802216c:	4604      	mov	r4, r0
 802216e:	460d      	mov	r5, r1
 8022170:	d904      	bls.n	802217c <_raise_r+0x14>
 8022172:	2316      	movs	r3, #22
 8022174:	6003      	str	r3, [r0, #0]
 8022176:	f04f 30ff 	mov.w	r0, #4294967295
 802217a:	bd38      	pop	{r3, r4, r5, pc}
 802217c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802217e:	b112      	cbz	r2, 8022186 <_raise_r+0x1e>
 8022180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022184:	b94b      	cbnz	r3, 802219a <_raise_r+0x32>
 8022186:	4620      	mov	r0, r4
 8022188:	f000 f830 	bl	80221ec <_getpid_r>
 802218c:	462a      	mov	r2, r5
 802218e:	4601      	mov	r1, r0
 8022190:	4620      	mov	r0, r4
 8022192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022196:	f000 b817 	b.w	80221c8 <_kill_r>
 802219a:	2b01      	cmp	r3, #1
 802219c:	d00a      	beq.n	80221b4 <_raise_r+0x4c>
 802219e:	1c59      	adds	r1, r3, #1
 80221a0:	d103      	bne.n	80221aa <_raise_r+0x42>
 80221a2:	2316      	movs	r3, #22
 80221a4:	6003      	str	r3, [r0, #0]
 80221a6:	2001      	movs	r0, #1
 80221a8:	e7e7      	b.n	802217a <_raise_r+0x12>
 80221aa:	2400      	movs	r4, #0
 80221ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80221b0:	4628      	mov	r0, r5
 80221b2:	4798      	blx	r3
 80221b4:	2000      	movs	r0, #0
 80221b6:	e7e0      	b.n	802217a <_raise_r+0x12>

080221b8 <raise>:
 80221b8:	4b02      	ldr	r3, [pc, #8]	; (80221c4 <raise+0xc>)
 80221ba:	4601      	mov	r1, r0
 80221bc:	6818      	ldr	r0, [r3, #0]
 80221be:	f7ff bfd3 	b.w	8022168 <_raise_r>
 80221c2:	bf00      	nop
 80221c4:	20000140 	.word	0x20000140

080221c8 <_kill_r>:
 80221c8:	b538      	push	{r3, r4, r5, lr}
 80221ca:	4d07      	ldr	r5, [pc, #28]	; (80221e8 <_kill_r+0x20>)
 80221cc:	2300      	movs	r3, #0
 80221ce:	4604      	mov	r4, r0
 80221d0:	4608      	mov	r0, r1
 80221d2:	4611      	mov	r1, r2
 80221d4:	602b      	str	r3, [r5, #0]
 80221d6:	f7e1 fc59 	bl	8003a8c <_kill>
 80221da:	1c43      	adds	r3, r0, #1
 80221dc:	d102      	bne.n	80221e4 <_kill_r+0x1c>
 80221de:	682b      	ldr	r3, [r5, #0]
 80221e0:	b103      	cbz	r3, 80221e4 <_kill_r+0x1c>
 80221e2:	6023      	str	r3, [r4, #0]
 80221e4:	bd38      	pop	{r3, r4, r5, pc}
 80221e6:	bf00      	nop
 80221e8:	20007480 	.word	0x20007480

080221ec <_getpid_r>:
 80221ec:	f7e1 bc46 	b.w	8003a7c <_getpid>

080221f0 <siprintf>:
 80221f0:	b40e      	push	{r1, r2, r3}
 80221f2:	b500      	push	{lr}
 80221f4:	b09c      	sub	sp, #112	; 0x70
 80221f6:	ab1d      	add	r3, sp, #116	; 0x74
 80221f8:	9002      	str	r0, [sp, #8]
 80221fa:	9006      	str	r0, [sp, #24]
 80221fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022200:	4809      	ldr	r0, [pc, #36]	; (8022228 <siprintf+0x38>)
 8022202:	9107      	str	r1, [sp, #28]
 8022204:	9104      	str	r1, [sp, #16]
 8022206:	4909      	ldr	r1, [pc, #36]	; (802222c <siprintf+0x3c>)
 8022208:	f853 2b04 	ldr.w	r2, [r3], #4
 802220c:	9105      	str	r1, [sp, #20]
 802220e:	6800      	ldr	r0, [r0, #0]
 8022210:	9301      	str	r3, [sp, #4]
 8022212:	a902      	add	r1, sp, #8
 8022214:	f001 fd16 	bl	8023c44 <_svfiprintf_r>
 8022218:	9b02      	ldr	r3, [sp, #8]
 802221a:	2200      	movs	r2, #0
 802221c:	701a      	strb	r2, [r3, #0]
 802221e:	b01c      	add	sp, #112	; 0x70
 8022220:	f85d eb04 	ldr.w	lr, [sp], #4
 8022224:	b003      	add	sp, #12
 8022226:	4770      	bx	lr
 8022228:	20000140 	.word	0x20000140
 802222c:	ffff0208 	.word	0xffff0208

08022230 <__sread>:
 8022230:	b510      	push	{r4, lr}
 8022232:	460c      	mov	r4, r1
 8022234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022238:	f001 fe04 	bl	8023e44 <_read_r>
 802223c:	2800      	cmp	r0, #0
 802223e:	bfab      	itete	ge
 8022240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022242:	89a3      	ldrhlt	r3, [r4, #12]
 8022244:	181b      	addge	r3, r3, r0
 8022246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802224a:	bfac      	ite	ge
 802224c:	6563      	strge	r3, [r4, #84]	; 0x54
 802224e:	81a3      	strhlt	r3, [r4, #12]
 8022250:	bd10      	pop	{r4, pc}

08022252 <__swrite>:
 8022252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022256:	461f      	mov	r7, r3
 8022258:	898b      	ldrh	r3, [r1, #12]
 802225a:	05db      	lsls	r3, r3, #23
 802225c:	4605      	mov	r5, r0
 802225e:	460c      	mov	r4, r1
 8022260:	4616      	mov	r6, r2
 8022262:	d505      	bpl.n	8022270 <__swrite+0x1e>
 8022264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022268:	2302      	movs	r3, #2
 802226a:	2200      	movs	r2, #0
 802226c:	f001 f828 	bl	80232c0 <_lseek_r>
 8022270:	89a3      	ldrh	r3, [r4, #12]
 8022272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802227a:	81a3      	strh	r3, [r4, #12]
 802227c:	4632      	mov	r2, r6
 802227e:	463b      	mov	r3, r7
 8022280:	4628      	mov	r0, r5
 8022282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022286:	f000 b869 	b.w	802235c <_write_r>

0802228a <__sseek>:
 802228a:	b510      	push	{r4, lr}
 802228c:	460c      	mov	r4, r1
 802228e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022292:	f001 f815 	bl	80232c0 <_lseek_r>
 8022296:	1c43      	adds	r3, r0, #1
 8022298:	89a3      	ldrh	r3, [r4, #12]
 802229a:	bf15      	itete	ne
 802229c:	6560      	strne	r0, [r4, #84]	; 0x54
 802229e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80222a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80222a6:	81a3      	strheq	r3, [r4, #12]
 80222a8:	bf18      	it	ne
 80222aa:	81a3      	strhne	r3, [r4, #12]
 80222ac:	bd10      	pop	{r4, pc}

080222ae <__sclose>:
 80222ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80222b2:	f000 b935 	b.w	8022520 <_close_r>
	...

080222b8 <__swbuf_r>:
 80222b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ba:	460e      	mov	r6, r1
 80222bc:	4614      	mov	r4, r2
 80222be:	4605      	mov	r5, r0
 80222c0:	b118      	cbz	r0, 80222ca <__swbuf_r+0x12>
 80222c2:	6983      	ldr	r3, [r0, #24]
 80222c4:	b90b      	cbnz	r3, 80222ca <__swbuf_r+0x12>
 80222c6:	f7fe ff5b 	bl	8021180 <__sinit>
 80222ca:	4b21      	ldr	r3, [pc, #132]	; (8022350 <__swbuf_r+0x98>)
 80222cc:	429c      	cmp	r4, r3
 80222ce:	d12b      	bne.n	8022328 <__swbuf_r+0x70>
 80222d0:	686c      	ldr	r4, [r5, #4]
 80222d2:	69a3      	ldr	r3, [r4, #24]
 80222d4:	60a3      	str	r3, [r4, #8]
 80222d6:	89a3      	ldrh	r3, [r4, #12]
 80222d8:	071a      	lsls	r2, r3, #28
 80222da:	d52f      	bpl.n	802233c <__swbuf_r+0x84>
 80222dc:	6923      	ldr	r3, [r4, #16]
 80222de:	b36b      	cbz	r3, 802233c <__swbuf_r+0x84>
 80222e0:	6923      	ldr	r3, [r4, #16]
 80222e2:	6820      	ldr	r0, [r4, #0]
 80222e4:	1ac0      	subs	r0, r0, r3
 80222e6:	6963      	ldr	r3, [r4, #20]
 80222e8:	b2f6      	uxtb	r6, r6
 80222ea:	4283      	cmp	r3, r0
 80222ec:	4637      	mov	r7, r6
 80222ee:	dc04      	bgt.n	80222fa <__swbuf_r+0x42>
 80222f0:	4621      	mov	r1, r4
 80222f2:	4628      	mov	r0, r5
 80222f4:	f000 ffa4 	bl	8023240 <_fflush_r>
 80222f8:	bb30      	cbnz	r0, 8022348 <__swbuf_r+0x90>
 80222fa:	68a3      	ldr	r3, [r4, #8]
 80222fc:	3b01      	subs	r3, #1
 80222fe:	60a3      	str	r3, [r4, #8]
 8022300:	6823      	ldr	r3, [r4, #0]
 8022302:	1c5a      	adds	r2, r3, #1
 8022304:	6022      	str	r2, [r4, #0]
 8022306:	701e      	strb	r6, [r3, #0]
 8022308:	6963      	ldr	r3, [r4, #20]
 802230a:	3001      	adds	r0, #1
 802230c:	4283      	cmp	r3, r0
 802230e:	d004      	beq.n	802231a <__swbuf_r+0x62>
 8022310:	89a3      	ldrh	r3, [r4, #12]
 8022312:	07db      	lsls	r3, r3, #31
 8022314:	d506      	bpl.n	8022324 <__swbuf_r+0x6c>
 8022316:	2e0a      	cmp	r6, #10
 8022318:	d104      	bne.n	8022324 <__swbuf_r+0x6c>
 802231a:	4621      	mov	r1, r4
 802231c:	4628      	mov	r0, r5
 802231e:	f000 ff8f 	bl	8023240 <_fflush_r>
 8022322:	b988      	cbnz	r0, 8022348 <__swbuf_r+0x90>
 8022324:	4638      	mov	r0, r7
 8022326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022328:	4b0a      	ldr	r3, [pc, #40]	; (8022354 <__swbuf_r+0x9c>)
 802232a:	429c      	cmp	r4, r3
 802232c:	d101      	bne.n	8022332 <__swbuf_r+0x7a>
 802232e:	68ac      	ldr	r4, [r5, #8]
 8022330:	e7cf      	b.n	80222d2 <__swbuf_r+0x1a>
 8022332:	4b09      	ldr	r3, [pc, #36]	; (8022358 <__swbuf_r+0xa0>)
 8022334:	429c      	cmp	r4, r3
 8022336:	bf08      	it	eq
 8022338:	68ec      	ldreq	r4, [r5, #12]
 802233a:	e7ca      	b.n	80222d2 <__swbuf_r+0x1a>
 802233c:	4621      	mov	r1, r4
 802233e:	4628      	mov	r0, r5
 8022340:	f000 f81e 	bl	8022380 <__swsetup_r>
 8022344:	2800      	cmp	r0, #0
 8022346:	d0cb      	beq.n	80222e0 <__swbuf_r+0x28>
 8022348:	f04f 37ff 	mov.w	r7, #4294967295
 802234c:	e7ea      	b.n	8022324 <__swbuf_r+0x6c>
 802234e:	bf00      	nop
 8022350:	080266a0 	.word	0x080266a0
 8022354:	080266c0 	.word	0x080266c0
 8022358:	08026680 	.word	0x08026680

0802235c <_write_r>:
 802235c:	b538      	push	{r3, r4, r5, lr}
 802235e:	4d07      	ldr	r5, [pc, #28]	; (802237c <_write_r+0x20>)
 8022360:	4604      	mov	r4, r0
 8022362:	4608      	mov	r0, r1
 8022364:	4611      	mov	r1, r2
 8022366:	2200      	movs	r2, #0
 8022368:	602a      	str	r2, [r5, #0]
 802236a:	461a      	mov	r2, r3
 802236c:	f7e1 fbc5 	bl	8003afa <_write>
 8022370:	1c43      	adds	r3, r0, #1
 8022372:	d102      	bne.n	802237a <_write_r+0x1e>
 8022374:	682b      	ldr	r3, [r5, #0]
 8022376:	b103      	cbz	r3, 802237a <_write_r+0x1e>
 8022378:	6023      	str	r3, [r4, #0]
 802237a:	bd38      	pop	{r3, r4, r5, pc}
 802237c:	20007480 	.word	0x20007480

08022380 <__swsetup_r>:
 8022380:	4b32      	ldr	r3, [pc, #200]	; (802244c <__swsetup_r+0xcc>)
 8022382:	b570      	push	{r4, r5, r6, lr}
 8022384:	681d      	ldr	r5, [r3, #0]
 8022386:	4606      	mov	r6, r0
 8022388:	460c      	mov	r4, r1
 802238a:	b125      	cbz	r5, 8022396 <__swsetup_r+0x16>
 802238c:	69ab      	ldr	r3, [r5, #24]
 802238e:	b913      	cbnz	r3, 8022396 <__swsetup_r+0x16>
 8022390:	4628      	mov	r0, r5
 8022392:	f7fe fef5 	bl	8021180 <__sinit>
 8022396:	4b2e      	ldr	r3, [pc, #184]	; (8022450 <__swsetup_r+0xd0>)
 8022398:	429c      	cmp	r4, r3
 802239a:	d10f      	bne.n	80223bc <__swsetup_r+0x3c>
 802239c:	686c      	ldr	r4, [r5, #4]
 802239e:	89a3      	ldrh	r3, [r4, #12]
 80223a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80223a4:	0719      	lsls	r1, r3, #28
 80223a6:	d42c      	bmi.n	8022402 <__swsetup_r+0x82>
 80223a8:	06dd      	lsls	r5, r3, #27
 80223aa:	d411      	bmi.n	80223d0 <__swsetup_r+0x50>
 80223ac:	2309      	movs	r3, #9
 80223ae:	6033      	str	r3, [r6, #0]
 80223b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80223b4:	81a3      	strh	r3, [r4, #12]
 80223b6:	f04f 30ff 	mov.w	r0, #4294967295
 80223ba:	e03e      	b.n	802243a <__swsetup_r+0xba>
 80223bc:	4b25      	ldr	r3, [pc, #148]	; (8022454 <__swsetup_r+0xd4>)
 80223be:	429c      	cmp	r4, r3
 80223c0:	d101      	bne.n	80223c6 <__swsetup_r+0x46>
 80223c2:	68ac      	ldr	r4, [r5, #8]
 80223c4:	e7eb      	b.n	802239e <__swsetup_r+0x1e>
 80223c6:	4b24      	ldr	r3, [pc, #144]	; (8022458 <__swsetup_r+0xd8>)
 80223c8:	429c      	cmp	r4, r3
 80223ca:	bf08      	it	eq
 80223cc:	68ec      	ldreq	r4, [r5, #12]
 80223ce:	e7e6      	b.n	802239e <__swsetup_r+0x1e>
 80223d0:	0758      	lsls	r0, r3, #29
 80223d2:	d512      	bpl.n	80223fa <__swsetup_r+0x7a>
 80223d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80223d6:	b141      	cbz	r1, 80223ea <__swsetup_r+0x6a>
 80223d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80223dc:	4299      	cmp	r1, r3
 80223de:	d002      	beq.n	80223e6 <__swsetup_r+0x66>
 80223e0:	4630      	mov	r0, r6
 80223e2:	f7fe ffcb 	bl	802137c <_free_r>
 80223e6:	2300      	movs	r3, #0
 80223e8:	6363      	str	r3, [r4, #52]	; 0x34
 80223ea:	89a3      	ldrh	r3, [r4, #12]
 80223ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80223f0:	81a3      	strh	r3, [r4, #12]
 80223f2:	2300      	movs	r3, #0
 80223f4:	6063      	str	r3, [r4, #4]
 80223f6:	6923      	ldr	r3, [r4, #16]
 80223f8:	6023      	str	r3, [r4, #0]
 80223fa:	89a3      	ldrh	r3, [r4, #12]
 80223fc:	f043 0308 	orr.w	r3, r3, #8
 8022400:	81a3      	strh	r3, [r4, #12]
 8022402:	6923      	ldr	r3, [r4, #16]
 8022404:	b94b      	cbnz	r3, 802241a <__swsetup_r+0x9a>
 8022406:	89a3      	ldrh	r3, [r4, #12]
 8022408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802240c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022410:	d003      	beq.n	802241a <__swsetup_r+0x9a>
 8022412:	4621      	mov	r1, r4
 8022414:	4630      	mov	r0, r6
 8022416:	f000 ff8b 	bl	8023330 <__smakebuf_r>
 802241a:	89a0      	ldrh	r0, [r4, #12]
 802241c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022420:	f010 0301 	ands.w	r3, r0, #1
 8022424:	d00a      	beq.n	802243c <__swsetup_r+0xbc>
 8022426:	2300      	movs	r3, #0
 8022428:	60a3      	str	r3, [r4, #8]
 802242a:	6963      	ldr	r3, [r4, #20]
 802242c:	425b      	negs	r3, r3
 802242e:	61a3      	str	r3, [r4, #24]
 8022430:	6923      	ldr	r3, [r4, #16]
 8022432:	b943      	cbnz	r3, 8022446 <__swsetup_r+0xc6>
 8022434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022438:	d1ba      	bne.n	80223b0 <__swsetup_r+0x30>
 802243a:	bd70      	pop	{r4, r5, r6, pc}
 802243c:	0781      	lsls	r1, r0, #30
 802243e:	bf58      	it	pl
 8022440:	6963      	ldrpl	r3, [r4, #20]
 8022442:	60a3      	str	r3, [r4, #8]
 8022444:	e7f4      	b.n	8022430 <__swsetup_r+0xb0>
 8022446:	2000      	movs	r0, #0
 8022448:	e7f7      	b.n	802243a <__swsetup_r+0xba>
 802244a:	bf00      	nop
 802244c:	20000140 	.word	0x20000140
 8022450:	080266a0 	.word	0x080266a0
 8022454:	080266c0 	.word	0x080266c0
 8022458:	08026680 	.word	0x08026680

0802245c <__register_exitproc>:
 802245c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022460:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802251c <__register_exitproc+0xc0>
 8022464:	4606      	mov	r6, r0
 8022466:	f8d8 0000 	ldr.w	r0, [r8]
 802246a:	461f      	mov	r7, r3
 802246c:	460d      	mov	r5, r1
 802246e:	4691      	mov	r9, r2
 8022470:	f7fe ff5b 	bl	802132a <__retarget_lock_acquire_recursive>
 8022474:	4b25      	ldr	r3, [pc, #148]	; (802250c <__register_exitproc+0xb0>)
 8022476:	681c      	ldr	r4, [r3, #0]
 8022478:	b934      	cbnz	r4, 8022488 <__register_exitproc+0x2c>
 802247a:	4c25      	ldr	r4, [pc, #148]	; (8022510 <__register_exitproc+0xb4>)
 802247c:	601c      	str	r4, [r3, #0]
 802247e:	4b25      	ldr	r3, [pc, #148]	; (8022514 <__register_exitproc+0xb8>)
 8022480:	b113      	cbz	r3, 8022488 <__register_exitproc+0x2c>
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022488:	6863      	ldr	r3, [r4, #4]
 802248a:	2b1f      	cmp	r3, #31
 802248c:	dd07      	ble.n	802249e <__register_exitproc+0x42>
 802248e:	f8d8 0000 	ldr.w	r0, [r8]
 8022492:	f7fe ff4c 	bl	802132e <__retarget_lock_release_recursive>
 8022496:	f04f 30ff 	mov.w	r0, #4294967295
 802249a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802249e:	b34e      	cbz	r6, 80224f4 <__register_exitproc+0x98>
 80224a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80224a4:	b988      	cbnz	r0, 80224ca <__register_exitproc+0x6e>
 80224a6:	4b1c      	ldr	r3, [pc, #112]	; (8022518 <__register_exitproc+0xbc>)
 80224a8:	b923      	cbnz	r3, 80224b4 <__register_exitproc+0x58>
 80224aa:	f8d8 0000 	ldr.w	r0, [r8]
 80224ae:	f7fe ff3d 	bl	802132c <__retarget_lock_release>
 80224b2:	e7f0      	b.n	8022496 <__register_exitproc+0x3a>
 80224b4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80224b8:	f7fe ff3a 	bl	8021330 <malloc>
 80224bc:	2800      	cmp	r0, #0
 80224be:	d0f4      	beq.n	80224aa <__register_exitproc+0x4e>
 80224c0:	2300      	movs	r3, #0
 80224c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80224c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80224ca:	6863      	ldr	r3, [r4, #4]
 80224cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80224d0:	2201      	movs	r2, #1
 80224d2:	409a      	lsls	r2, r3
 80224d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80224d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80224dc:	4313      	orrs	r3, r2
 80224de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80224e2:	2e02      	cmp	r6, #2
 80224e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80224e8:	bf02      	ittt	eq
 80224ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80224ee:	4313      	orreq	r3, r2
 80224f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80224f4:	6863      	ldr	r3, [r4, #4]
 80224f6:	f8d8 0000 	ldr.w	r0, [r8]
 80224fa:	1c5a      	adds	r2, r3, #1
 80224fc:	3302      	adds	r3, #2
 80224fe:	6062      	str	r2, [r4, #4]
 8022500:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8022504:	f7fe ff13 	bl	802132e <__retarget_lock_release_recursive>
 8022508:	2000      	movs	r0, #0
 802250a:	e7c6      	b.n	802249a <__register_exitproc+0x3e>
 802250c:	20007510 	.word	0x20007510
 8022510:	20007484 	.word	0x20007484
 8022514:	08026728 	.word	0x08026728
 8022518:	08021331 	.word	0x08021331
 802251c:	200001a4 	.word	0x200001a4

08022520 <_close_r>:
 8022520:	b538      	push	{r3, r4, r5, lr}
 8022522:	4d06      	ldr	r5, [pc, #24]	; (802253c <_close_r+0x1c>)
 8022524:	2300      	movs	r3, #0
 8022526:	4604      	mov	r4, r0
 8022528:	4608      	mov	r0, r1
 802252a:	602b      	str	r3, [r5, #0]
 802252c:	f7e1 fb01 	bl	8003b32 <_close>
 8022530:	1c43      	adds	r3, r0, #1
 8022532:	d102      	bne.n	802253a <_close_r+0x1a>
 8022534:	682b      	ldr	r3, [r5, #0]
 8022536:	b103      	cbz	r3, 802253a <_close_r+0x1a>
 8022538:	6023      	str	r3, [r4, #0]
 802253a:	bd38      	pop	{r3, r4, r5, pc}
 802253c:	20007480 	.word	0x20007480

08022540 <quorem>:
 8022540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022544:	6903      	ldr	r3, [r0, #16]
 8022546:	690c      	ldr	r4, [r1, #16]
 8022548:	42a3      	cmp	r3, r4
 802254a:	4607      	mov	r7, r0
 802254c:	f2c0 8081 	blt.w	8022652 <quorem+0x112>
 8022550:	3c01      	subs	r4, #1
 8022552:	f101 0814 	add.w	r8, r1, #20
 8022556:	f100 0514 	add.w	r5, r0, #20
 802255a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802255e:	9301      	str	r3, [sp, #4]
 8022560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022568:	3301      	adds	r3, #1
 802256a:	429a      	cmp	r2, r3
 802256c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022574:	fbb2 f6f3 	udiv	r6, r2, r3
 8022578:	d331      	bcc.n	80225de <quorem+0x9e>
 802257a:	f04f 0e00 	mov.w	lr, #0
 802257e:	4640      	mov	r0, r8
 8022580:	46ac      	mov	ip, r5
 8022582:	46f2      	mov	sl, lr
 8022584:	f850 2b04 	ldr.w	r2, [r0], #4
 8022588:	b293      	uxth	r3, r2
 802258a:	fb06 e303 	mla	r3, r6, r3, lr
 802258e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8022592:	b29b      	uxth	r3, r3
 8022594:	ebaa 0303 	sub.w	r3, sl, r3
 8022598:	f8dc a000 	ldr.w	sl, [ip]
 802259c:	0c12      	lsrs	r2, r2, #16
 802259e:	fa13 f38a 	uxtah	r3, r3, sl
 80225a2:	fb06 e202 	mla	r2, r6, r2, lr
 80225a6:	9300      	str	r3, [sp, #0]
 80225a8:	9b00      	ldr	r3, [sp, #0]
 80225aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80225ae:	b292      	uxth	r2, r2
 80225b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80225b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80225b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80225bc:	4581      	cmp	r9, r0
 80225be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80225c2:	f84c 3b04 	str.w	r3, [ip], #4
 80225c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80225ca:	d2db      	bcs.n	8022584 <quorem+0x44>
 80225cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80225d0:	b92b      	cbnz	r3, 80225de <quorem+0x9e>
 80225d2:	9b01      	ldr	r3, [sp, #4]
 80225d4:	3b04      	subs	r3, #4
 80225d6:	429d      	cmp	r5, r3
 80225d8:	461a      	mov	r2, r3
 80225da:	d32e      	bcc.n	802263a <quorem+0xfa>
 80225dc:	613c      	str	r4, [r7, #16]
 80225de:	4638      	mov	r0, r7
 80225e0:	f001 f98e 	bl	8023900 <__mcmp>
 80225e4:	2800      	cmp	r0, #0
 80225e6:	db24      	blt.n	8022632 <quorem+0xf2>
 80225e8:	3601      	adds	r6, #1
 80225ea:	4628      	mov	r0, r5
 80225ec:	f04f 0c00 	mov.w	ip, #0
 80225f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80225f4:	f8d0 e000 	ldr.w	lr, [r0]
 80225f8:	b293      	uxth	r3, r2
 80225fa:	ebac 0303 	sub.w	r3, ip, r3
 80225fe:	0c12      	lsrs	r2, r2, #16
 8022600:	fa13 f38e 	uxtah	r3, r3, lr
 8022604:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802260c:	b29b      	uxth	r3, r3
 802260e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022612:	45c1      	cmp	r9, r8
 8022614:	f840 3b04 	str.w	r3, [r0], #4
 8022618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802261c:	d2e8      	bcs.n	80225f0 <quorem+0xb0>
 802261e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022626:	b922      	cbnz	r2, 8022632 <quorem+0xf2>
 8022628:	3b04      	subs	r3, #4
 802262a:	429d      	cmp	r5, r3
 802262c:	461a      	mov	r2, r3
 802262e:	d30a      	bcc.n	8022646 <quorem+0x106>
 8022630:	613c      	str	r4, [r7, #16]
 8022632:	4630      	mov	r0, r6
 8022634:	b003      	add	sp, #12
 8022636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802263a:	6812      	ldr	r2, [r2, #0]
 802263c:	3b04      	subs	r3, #4
 802263e:	2a00      	cmp	r2, #0
 8022640:	d1cc      	bne.n	80225dc <quorem+0x9c>
 8022642:	3c01      	subs	r4, #1
 8022644:	e7c7      	b.n	80225d6 <quorem+0x96>
 8022646:	6812      	ldr	r2, [r2, #0]
 8022648:	3b04      	subs	r3, #4
 802264a:	2a00      	cmp	r2, #0
 802264c:	d1f0      	bne.n	8022630 <quorem+0xf0>
 802264e:	3c01      	subs	r4, #1
 8022650:	e7eb      	b.n	802262a <quorem+0xea>
 8022652:	2000      	movs	r0, #0
 8022654:	e7ee      	b.n	8022634 <quorem+0xf4>
	...

08022658 <_dtoa_r>:
 8022658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802265c:	ed2d 8b02 	vpush	{d8}
 8022660:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022662:	b091      	sub	sp, #68	; 0x44
 8022664:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022668:	ec59 8b10 	vmov	r8, r9, d0
 802266c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802266e:	9106      	str	r1, [sp, #24]
 8022670:	4606      	mov	r6, r0
 8022672:	9208      	str	r2, [sp, #32]
 8022674:	930c      	str	r3, [sp, #48]	; 0x30
 8022676:	b975      	cbnz	r5, 8022696 <_dtoa_r+0x3e>
 8022678:	2010      	movs	r0, #16
 802267a:	f7fe fe59 	bl	8021330 <malloc>
 802267e:	4602      	mov	r2, r0
 8022680:	6270      	str	r0, [r6, #36]	; 0x24
 8022682:	b920      	cbnz	r0, 802268e <_dtoa_r+0x36>
 8022684:	4baa      	ldr	r3, [pc, #680]	; (8022930 <_dtoa_r+0x2d8>)
 8022686:	21ea      	movs	r1, #234	; 0xea
 8022688:	48aa      	ldr	r0, [pc, #680]	; (8022934 <_dtoa_r+0x2dc>)
 802268a:	f7fe fcf7 	bl	802107c <__assert_func>
 802268e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8022692:	6005      	str	r5, [r0, #0]
 8022694:	60c5      	str	r5, [r0, #12]
 8022696:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022698:	6819      	ldr	r1, [r3, #0]
 802269a:	b151      	cbz	r1, 80226b2 <_dtoa_r+0x5a>
 802269c:	685a      	ldr	r2, [r3, #4]
 802269e:	604a      	str	r2, [r1, #4]
 80226a0:	2301      	movs	r3, #1
 80226a2:	4093      	lsls	r3, r2
 80226a4:	608b      	str	r3, [r1, #8]
 80226a6:	4630      	mov	r0, r6
 80226a8:	f000 fee8 	bl	802347c <_Bfree>
 80226ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80226ae:	2200      	movs	r2, #0
 80226b0:	601a      	str	r2, [r3, #0]
 80226b2:	f1b9 0300 	subs.w	r3, r9, #0
 80226b6:	bfbb      	ittet	lt
 80226b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80226bc:	9303      	strlt	r3, [sp, #12]
 80226be:	2300      	movge	r3, #0
 80226c0:	2201      	movlt	r2, #1
 80226c2:	bfac      	ite	ge
 80226c4:	6023      	strge	r3, [r4, #0]
 80226c6:	6022      	strlt	r2, [r4, #0]
 80226c8:	4b9b      	ldr	r3, [pc, #620]	; (8022938 <_dtoa_r+0x2e0>)
 80226ca:	9c03      	ldr	r4, [sp, #12]
 80226cc:	43a3      	bics	r3, r4
 80226ce:	d11c      	bne.n	802270a <_dtoa_r+0xb2>
 80226d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80226d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80226d6:	6013      	str	r3, [r2, #0]
 80226d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80226dc:	ea53 0308 	orrs.w	r3, r3, r8
 80226e0:	f000 84fd 	beq.w	80230de <_dtoa_r+0xa86>
 80226e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80226e6:	b963      	cbnz	r3, 8022702 <_dtoa_r+0xaa>
 80226e8:	4b94      	ldr	r3, [pc, #592]	; (802293c <_dtoa_r+0x2e4>)
 80226ea:	e01f      	b.n	802272c <_dtoa_r+0xd4>
 80226ec:	4b94      	ldr	r3, [pc, #592]	; (8022940 <_dtoa_r+0x2e8>)
 80226ee:	9301      	str	r3, [sp, #4]
 80226f0:	3308      	adds	r3, #8
 80226f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80226f4:	6013      	str	r3, [r2, #0]
 80226f6:	9801      	ldr	r0, [sp, #4]
 80226f8:	b011      	add	sp, #68	; 0x44
 80226fa:	ecbd 8b02 	vpop	{d8}
 80226fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022702:	4b8e      	ldr	r3, [pc, #568]	; (802293c <_dtoa_r+0x2e4>)
 8022704:	9301      	str	r3, [sp, #4]
 8022706:	3303      	adds	r3, #3
 8022708:	e7f3      	b.n	80226f2 <_dtoa_r+0x9a>
 802270a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802270e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022716:	d10b      	bne.n	8022730 <_dtoa_r+0xd8>
 8022718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802271a:	2301      	movs	r3, #1
 802271c:	6013      	str	r3, [r2, #0]
 802271e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022720:	2b00      	cmp	r3, #0
 8022722:	f000 84d9 	beq.w	80230d8 <_dtoa_r+0xa80>
 8022726:	4887      	ldr	r0, [pc, #540]	; (8022944 <_dtoa_r+0x2ec>)
 8022728:	6018      	str	r0, [r3, #0]
 802272a:	1e43      	subs	r3, r0, #1
 802272c:	9301      	str	r3, [sp, #4]
 802272e:	e7e2      	b.n	80226f6 <_dtoa_r+0x9e>
 8022730:	a90f      	add	r1, sp, #60	; 0x3c
 8022732:	aa0e      	add	r2, sp, #56	; 0x38
 8022734:	4630      	mov	r0, r6
 8022736:	eeb0 0b48 	vmov.f64	d0, d8
 802273a:	f001 f987 	bl	8023a4c <__d2b>
 802273e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8022742:	4605      	mov	r5, r0
 8022744:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022746:	2900      	cmp	r1, #0
 8022748:	d046      	beq.n	80227d8 <_dtoa_r+0x180>
 802274a:	ee18 4a90 	vmov	r4, s17
 802274e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022752:	ec53 2b18 	vmov	r2, r3, d8
 8022756:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802275a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802275e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8022762:	2400      	movs	r4, #0
 8022764:	ec43 2b16 	vmov	d6, r2, r3
 8022768:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802276c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8022918 <_dtoa_r+0x2c0>
 8022770:	ee36 7b47 	vsub.f64	d7, d6, d7
 8022774:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8022920 <_dtoa_r+0x2c8>
 8022778:	eea7 6b05 	vfma.f64	d6, d7, d5
 802277c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8022928 <_dtoa_r+0x2d0>
 8022780:	ee07 1a90 	vmov	s15, r1
 8022784:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8022788:	eeb0 7b46 	vmov.f64	d7, d6
 802278c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8022790:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8022794:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8022798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802279c:	ee16 ba90 	vmov	fp, s13
 80227a0:	940a      	str	r4, [sp, #40]	; 0x28
 80227a2:	d508      	bpl.n	80227b6 <_dtoa_r+0x15e>
 80227a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80227a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80227ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227b0:	bf18      	it	ne
 80227b2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80227b6:	f1bb 0f16 	cmp.w	fp, #22
 80227ba:	d82f      	bhi.n	802281c <_dtoa_r+0x1c4>
 80227bc:	4b62      	ldr	r3, [pc, #392]	; (8022948 <_dtoa_r+0x2f0>)
 80227be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80227c2:	ed93 7b00 	vldr	d7, [r3]
 80227c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80227ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227ce:	d501      	bpl.n	80227d4 <_dtoa_r+0x17c>
 80227d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80227d4:	2300      	movs	r3, #0
 80227d6:	e022      	b.n	802281e <_dtoa_r+0x1c6>
 80227d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80227da:	4401      	add	r1, r0
 80227dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80227e0:	2b20      	cmp	r3, #32
 80227e2:	bfc1      	itttt	gt
 80227e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80227e8:	fa04 f303 	lslgt.w	r3, r4, r3
 80227ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80227f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80227f4:	bfd6      	itet	le
 80227f6:	f1c3 0320 	rsble	r3, r3, #32
 80227fa:	ea43 0808 	orrgt.w	r8, r3, r8
 80227fe:	fa08 f803 	lslle.w	r8, r8, r3
 8022802:	ee07 8a90 	vmov	s15, r8
 8022806:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802280a:	3901      	subs	r1, #1
 802280c:	ee17 4a90 	vmov	r4, s15
 8022810:	ec53 2b17 	vmov	r2, r3, d7
 8022814:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8022818:	2401      	movs	r4, #1
 802281a:	e7a3      	b.n	8022764 <_dtoa_r+0x10c>
 802281c:	2301      	movs	r3, #1
 802281e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022820:	1a43      	subs	r3, r0, r1
 8022822:	1e5a      	subs	r2, r3, #1
 8022824:	bf45      	ittet	mi
 8022826:	f1c3 0301 	rsbmi	r3, r3, #1
 802282a:	9304      	strmi	r3, [sp, #16]
 802282c:	2300      	movpl	r3, #0
 802282e:	2300      	movmi	r3, #0
 8022830:	9205      	str	r2, [sp, #20]
 8022832:	bf54      	ite	pl
 8022834:	9304      	strpl	r3, [sp, #16]
 8022836:	9305      	strmi	r3, [sp, #20]
 8022838:	f1bb 0f00 	cmp.w	fp, #0
 802283c:	db18      	blt.n	8022870 <_dtoa_r+0x218>
 802283e:	9b05      	ldr	r3, [sp, #20]
 8022840:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8022844:	445b      	add	r3, fp
 8022846:	9305      	str	r3, [sp, #20]
 8022848:	2300      	movs	r3, #0
 802284a:	9a06      	ldr	r2, [sp, #24]
 802284c:	2a09      	cmp	r2, #9
 802284e:	d849      	bhi.n	80228e4 <_dtoa_r+0x28c>
 8022850:	2a05      	cmp	r2, #5
 8022852:	bfc4      	itt	gt
 8022854:	3a04      	subgt	r2, #4
 8022856:	9206      	strgt	r2, [sp, #24]
 8022858:	9a06      	ldr	r2, [sp, #24]
 802285a:	f1a2 0202 	sub.w	r2, r2, #2
 802285e:	bfcc      	ite	gt
 8022860:	2400      	movgt	r4, #0
 8022862:	2401      	movle	r4, #1
 8022864:	2a03      	cmp	r2, #3
 8022866:	d848      	bhi.n	80228fa <_dtoa_r+0x2a2>
 8022868:	e8df f002 	tbb	[pc, r2]
 802286c:	3a2c2e0b 	.word	0x3a2c2e0b
 8022870:	9b04      	ldr	r3, [sp, #16]
 8022872:	2200      	movs	r2, #0
 8022874:	eba3 030b 	sub.w	r3, r3, fp
 8022878:	9304      	str	r3, [sp, #16]
 802287a:	9209      	str	r2, [sp, #36]	; 0x24
 802287c:	f1cb 0300 	rsb	r3, fp, #0
 8022880:	e7e3      	b.n	802284a <_dtoa_r+0x1f2>
 8022882:	2200      	movs	r2, #0
 8022884:	9207      	str	r2, [sp, #28]
 8022886:	9a08      	ldr	r2, [sp, #32]
 8022888:	2a00      	cmp	r2, #0
 802288a:	dc39      	bgt.n	8022900 <_dtoa_r+0x2a8>
 802288c:	f04f 0a01 	mov.w	sl, #1
 8022890:	46d1      	mov	r9, sl
 8022892:	4652      	mov	r2, sl
 8022894:	f8cd a020 	str.w	sl, [sp, #32]
 8022898:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802289a:	2100      	movs	r1, #0
 802289c:	6079      	str	r1, [r7, #4]
 802289e:	2004      	movs	r0, #4
 80228a0:	f100 0c14 	add.w	ip, r0, #20
 80228a4:	4594      	cmp	ip, r2
 80228a6:	6879      	ldr	r1, [r7, #4]
 80228a8:	d92f      	bls.n	802290a <_dtoa_r+0x2b2>
 80228aa:	4630      	mov	r0, r6
 80228ac:	930d      	str	r3, [sp, #52]	; 0x34
 80228ae:	f000 fda5 	bl	80233fc <_Balloc>
 80228b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228b4:	9001      	str	r0, [sp, #4]
 80228b6:	4602      	mov	r2, r0
 80228b8:	2800      	cmp	r0, #0
 80228ba:	d149      	bne.n	8022950 <_dtoa_r+0x2f8>
 80228bc:	4b23      	ldr	r3, [pc, #140]	; (802294c <_dtoa_r+0x2f4>)
 80228be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80228c2:	e6e1      	b.n	8022688 <_dtoa_r+0x30>
 80228c4:	2201      	movs	r2, #1
 80228c6:	e7dd      	b.n	8022884 <_dtoa_r+0x22c>
 80228c8:	2200      	movs	r2, #0
 80228ca:	9207      	str	r2, [sp, #28]
 80228cc:	9a08      	ldr	r2, [sp, #32]
 80228ce:	eb0b 0a02 	add.w	sl, fp, r2
 80228d2:	f10a 0901 	add.w	r9, sl, #1
 80228d6:	464a      	mov	r2, r9
 80228d8:	2a01      	cmp	r2, #1
 80228da:	bfb8      	it	lt
 80228dc:	2201      	movlt	r2, #1
 80228de:	e7db      	b.n	8022898 <_dtoa_r+0x240>
 80228e0:	2201      	movs	r2, #1
 80228e2:	e7f2      	b.n	80228ca <_dtoa_r+0x272>
 80228e4:	2401      	movs	r4, #1
 80228e6:	2200      	movs	r2, #0
 80228e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80228ec:	f04f 3aff 	mov.w	sl, #4294967295
 80228f0:	2100      	movs	r1, #0
 80228f2:	46d1      	mov	r9, sl
 80228f4:	2212      	movs	r2, #18
 80228f6:	9108      	str	r1, [sp, #32]
 80228f8:	e7ce      	b.n	8022898 <_dtoa_r+0x240>
 80228fa:	2201      	movs	r2, #1
 80228fc:	9207      	str	r2, [sp, #28]
 80228fe:	e7f5      	b.n	80228ec <_dtoa_r+0x294>
 8022900:	f8dd a020 	ldr.w	sl, [sp, #32]
 8022904:	46d1      	mov	r9, sl
 8022906:	4652      	mov	r2, sl
 8022908:	e7c6      	b.n	8022898 <_dtoa_r+0x240>
 802290a:	3101      	adds	r1, #1
 802290c:	6079      	str	r1, [r7, #4]
 802290e:	0040      	lsls	r0, r0, #1
 8022910:	e7c6      	b.n	80228a0 <_dtoa_r+0x248>
 8022912:	bf00      	nop
 8022914:	f3af 8000 	nop.w
 8022918:	636f4361 	.word	0x636f4361
 802291c:	3fd287a7 	.word	0x3fd287a7
 8022920:	8b60c8b3 	.word	0x8b60c8b3
 8022924:	3fc68a28 	.word	0x3fc68a28
 8022928:	509f79fb 	.word	0x509f79fb
 802292c:	3fd34413 	.word	0x3fd34413
 8022930:	0802683a 	.word	0x0802683a
 8022934:	08026851 	.word	0x08026851
 8022938:	7ff00000 	.word	0x7ff00000
 802293c:	08026836 	.word	0x08026836
 8022940:	0802682d 	.word	0x0802682d
 8022944:	08025ddb 	.word	0x08025ddb
 8022948:	08026948 	.word	0x08026948
 802294c:	080268ac 	.word	0x080268ac
 8022950:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8022952:	9901      	ldr	r1, [sp, #4]
 8022954:	6011      	str	r1, [r2, #0]
 8022956:	f1b9 0f0e 	cmp.w	r9, #14
 802295a:	d86c      	bhi.n	8022a36 <_dtoa_r+0x3de>
 802295c:	2c00      	cmp	r4, #0
 802295e:	d06a      	beq.n	8022a36 <_dtoa_r+0x3de>
 8022960:	f1bb 0f00 	cmp.w	fp, #0
 8022964:	f340 80a0 	ble.w	8022aa8 <_dtoa_r+0x450>
 8022968:	49c1      	ldr	r1, [pc, #772]	; (8022c70 <_dtoa_r+0x618>)
 802296a:	f00b 020f 	and.w	r2, fp, #15
 802296e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8022972:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8022976:	ed92 7b00 	vldr	d7, [r2]
 802297a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802297e:	f000 8087 	beq.w	8022a90 <_dtoa_r+0x438>
 8022982:	4abc      	ldr	r2, [pc, #752]	; (8022c74 <_dtoa_r+0x61c>)
 8022984:	ed92 6b08 	vldr	d6, [r2, #32]
 8022988:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802298c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022990:	f001 010f 	and.w	r1, r1, #15
 8022994:	2203      	movs	r2, #3
 8022996:	48b7      	ldr	r0, [pc, #732]	; (8022c74 <_dtoa_r+0x61c>)
 8022998:	2900      	cmp	r1, #0
 802299a:	d17b      	bne.n	8022a94 <_dtoa_r+0x43c>
 802299c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80229a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80229a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80229a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80229aa:	2900      	cmp	r1, #0
 80229ac:	f000 80a2 	beq.w	8022af4 <_dtoa_r+0x49c>
 80229b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80229b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80229b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80229bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229c0:	f140 8098 	bpl.w	8022af4 <_dtoa_r+0x49c>
 80229c4:	f1b9 0f00 	cmp.w	r9, #0
 80229c8:	f000 8094 	beq.w	8022af4 <_dtoa_r+0x49c>
 80229cc:	f1ba 0f00 	cmp.w	sl, #0
 80229d0:	dd2f      	ble.n	8022a32 <_dtoa_r+0x3da>
 80229d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80229d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80229da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80229de:	f10b 37ff 	add.w	r7, fp, #4294967295
 80229e2:	3201      	adds	r2, #1
 80229e4:	4650      	mov	r0, sl
 80229e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80229ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80229ee:	ee07 2a90 	vmov	s15, r2
 80229f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80229f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80229fa:	ee15 4a90 	vmov	r4, s11
 80229fe:	ec52 1b15 	vmov	r1, r2, d5
 8022a02:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8022a06:	2800      	cmp	r0, #0
 8022a08:	d177      	bne.n	8022afa <_dtoa_r+0x4a2>
 8022a0a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022a0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8022a12:	ec42 1b17 	vmov	d7, r1, r2
 8022a16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a1e:	f300 8263 	bgt.w	8022ee8 <_dtoa_r+0x890>
 8022a22:	eeb1 7b47 	vneg.f64	d7, d7
 8022a26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a2e:	f100 8258 	bmi.w	8022ee2 <_dtoa_r+0x88a>
 8022a32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8022a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022a38:	2a00      	cmp	r2, #0
 8022a3a:	f2c0 811d 	blt.w	8022c78 <_dtoa_r+0x620>
 8022a3e:	f1bb 0f0e 	cmp.w	fp, #14
 8022a42:	f300 8119 	bgt.w	8022c78 <_dtoa_r+0x620>
 8022a46:	4b8a      	ldr	r3, [pc, #552]	; (8022c70 <_dtoa_r+0x618>)
 8022a48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8022a4c:	ed93 6b00 	vldr	d6, [r3]
 8022a50:	9b08      	ldr	r3, [sp, #32]
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	f280 80b7 	bge.w	8022bc6 <_dtoa_r+0x56e>
 8022a58:	f1b9 0f00 	cmp.w	r9, #0
 8022a5c:	f300 80b3 	bgt.w	8022bc6 <_dtoa_r+0x56e>
 8022a60:	f040 823f 	bne.w	8022ee2 <_dtoa_r+0x88a>
 8022a64:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022a68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8022a6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022a70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a78:	464c      	mov	r4, r9
 8022a7a:	464f      	mov	r7, r9
 8022a7c:	f280 8215 	bge.w	8022eaa <_dtoa_r+0x852>
 8022a80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022a84:	2331      	movs	r3, #49	; 0x31
 8022a86:	f808 3b01 	strb.w	r3, [r8], #1
 8022a8a:	f10b 0b01 	add.w	fp, fp, #1
 8022a8e:	e211      	b.n	8022eb4 <_dtoa_r+0x85c>
 8022a90:	2202      	movs	r2, #2
 8022a92:	e780      	b.n	8022996 <_dtoa_r+0x33e>
 8022a94:	07cc      	lsls	r4, r1, #31
 8022a96:	d504      	bpl.n	8022aa2 <_dtoa_r+0x44a>
 8022a98:	ed90 6b00 	vldr	d6, [r0]
 8022a9c:	3201      	adds	r2, #1
 8022a9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022aa2:	1049      	asrs	r1, r1, #1
 8022aa4:	3008      	adds	r0, #8
 8022aa6:	e777      	b.n	8022998 <_dtoa_r+0x340>
 8022aa8:	d022      	beq.n	8022af0 <_dtoa_r+0x498>
 8022aaa:	f1cb 0100 	rsb	r1, fp, #0
 8022aae:	4a70      	ldr	r2, [pc, #448]	; (8022c70 <_dtoa_r+0x618>)
 8022ab0:	f001 000f 	and.w	r0, r1, #15
 8022ab4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022ab8:	ed92 7b00 	vldr	d7, [r2]
 8022abc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8022ac0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022ac4:	486b      	ldr	r0, [pc, #428]	; (8022c74 <_dtoa_r+0x61c>)
 8022ac6:	1109      	asrs	r1, r1, #4
 8022ac8:	2400      	movs	r4, #0
 8022aca:	2202      	movs	r2, #2
 8022acc:	b929      	cbnz	r1, 8022ada <_dtoa_r+0x482>
 8022ace:	2c00      	cmp	r4, #0
 8022ad0:	f43f af6a 	beq.w	80229a8 <_dtoa_r+0x350>
 8022ad4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022ad8:	e766      	b.n	80229a8 <_dtoa_r+0x350>
 8022ada:	07cf      	lsls	r7, r1, #31
 8022adc:	d505      	bpl.n	8022aea <_dtoa_r+0x492>
 8022ade:	ed90 6b00 	vldr	d6, [r0]
 8022ae2:	3201      	adds	r2, #1
 8022ae4:	2401      	movs	r4, #1
 8022ae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022aea:	1049      	asrs	r1, r1, #1
 8022aec:	3008      	adds	r0, #8
 8022aee:	e7ed      	b.n	8022acc <_dtoa_r+0x474>
 8022af0:	2202      	movs	r2, #2
 8022af2:	e759      	b.n	80229a8 <_dtoa_r+0x350>
 8022af4:	465f      	mov	r7, fp
 8022af6:	4648      	mov	r0, r9
 8022af8:	e775      	b.n	80229e6 <_dtoa_r+0x38e>
 8022afa:	ec42 1b17 	vmov	d7, r1, r2
 8022afe:	4a5c      	ldr	r2, [pc, #368]	; (8022c70 <_dtoa_r+0x618>)
 8022b00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022b04:	ed12 4b02 	vldr	d4, [r2, #-8]
 8022b08:	9a01      	ldr	r2, [sp, #4]
 8022b0a:	1814      	adds	r4, r2, r0
 8022b0c:	9a07      	ldr	r2, [sp, #28]
 8022b0e:	b352      	cbz	r2, 8022b66 <_dtoa_r+0x50e>
 8022b10:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022b14:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8022b18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022b1c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8022b20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022b24:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022b28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022b2c:	ee14 2a90 	vmov	r2, s9
 8022b30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022b34:	3230      	adds	r2, #48	; 0x30
 8022b36:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022b3a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b42:	f808 2b01 	strb.w	r2, [r8], #1
 8022b46:	d439      	bmi.n	8022bbc <_dtoa_r+0x564>
 8022b48:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022b4c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8022b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b54:	d472      	bmi.n	8022c3c <_dtoa_r+0x5e4>
 8022b56:	45a0      	cmp	r8, r4
 8022b58:	f43f af6b 	beq.w	8022a32 <_dtoa_r+0x3da>
 8022b5c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8022b60:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022b64:	e7e0      	b.n	8022b28 <_dtoa_r+0x4d0>
 8022b66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022b6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022b6e:	4621      	mov	r1, r4
 8022b70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022b74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022b78:	ee14 2a90 	vmov	r2, s9
 8022b7c:	3230      	adds	r2, #48	; 0x30
 8022b7e:	f808 2b01 	strb.w	r2, [r8], #1
 8022b82:	45a0      	cmp	r8, r4
 8022b84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022b88:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022b8c:	d118      	bne.n	8022bc0 <_dtoa_r+0x568>
 8022b8e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8022b92:	ee37 4b05 	vadd.f64	d4, d7, d5
 8022b96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8022b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b9e:	dc4d      	bgt.n	8022c3c <_dtoa_r+0x5e4>
 8022ba0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022ba4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bac:	f57f af41 	bpl.w	8022a32 <_dtoa_r+0x3da>
 8022bb0:	4688      	mov	r8, r1
 8022bb2:	3901      	subs	r1, #1
 8022bb4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8022bb8:	2b30      	cmp	r3, #48	; 0x30
 8022bba:	d0f9      	beq.n	8022bb0 <_dtoa_r+0x558>
 8022bbc:	46bb      	mov	fp, r7
 8022bbe:	e02a      	b.n	8022c16 <_dtoa_r+0x5be>
 8022bc0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022bc4:	e7d6      	b.n	8022b74 <_dtoa_r+0x51c>
 8022bc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022bca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8022bce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022bd2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8022bd6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8022bda:	ee15 3a10 	vmov	r3, s10
 8022bde:	3330      	adds	r3, #48	; 0x30
 8022be0:	f808 3b01 	strb.w	r3, [r8], #1
 8022be4:	9b01      	ldr	r3, [sp, #4]
 8022be6:	eba8 0303 	sub.w	r3, r8, r3
 8022bea:	4599      	cmp	r9, r3
 8022bec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022bf0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022bf4:	d133      	bne.n	8022c5e <_dtoa_r+0x606>
 8022bf6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8022bfa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c02:	dc1a      	bgt.n	8022c3a <_dtoa_r+0x5e2>
 8022c04:	eeb4 7b46 	vcmp.f64	d7, d6
 8022c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c0c:	d103      	bne.n	8022c16 <_dtoa_r+0x5be>
 8022c0e:	ee15 3a10 	vmov	r3, s10
 8022c12:	07d9      	lsls	r1, r3, #31
 8022c14:	d411      	bmi.n	8022c3a <_dtoa_r+0x5e2>
 8022c16:	4629      	mov	r1, r5
 8022c18:	4630      	mov	r0, r6
 8022c1a:	f000 fc2f 	bl	802347c <_Bfree>
 8022c1e:	2300      	movs	r3, #0
 8022c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022c22:	f888 3000 	strb.w	r3, [r8]
 8022c26:	f10b 0301 	add.w	r3, fp, #1
 8022c2a:	6013      	str	r3, [r2, #0]
 8022c2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	f43f ad61 	beq.w	80226f6 <_dtoa_r+0x9e>
 8022c34:	f8c3 8000 	str.w	r8, [r3]
 8022c38:	e55d      	b.n	80226f6 <_dtoa_r+0x9e>
 8022c3a:	465f      	mov	r7, fp
 8022c3c:	4643      	mov	r3, r8
 8022c3e:	4698      	mov	r8, r3
 8022c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022c44:	2a39      	cmp	r2, #57	; 0x39
 8022c46:	d106      	bne.n	8022c56 <_dtoa_r+0x5fe>
 8022c48:	9a01      	ldr	r2, [sp, #4]
 8022c4a:	429a      	cmp	r2, r3
 8022c4c:	d1f7      	bne.n	8022c3e <_dtoa_r+0x5e6>
 8022c4e:	9901      	ldr	r1, [sp, #4]
 8022c50:	2230      	movs	r2, #48	; 0x30
 8022c52:	3701      	adds	r7, #1
 8022c54:	700a      	strb	r2, [r1, #0]
 8022c56:	781a      	ldrb	r2, [r3, #0]
 8022c58:	3201      	adds	r2, #1
 8022c5a:	701a      	strb	r2, [r3, #0]
 8022c5c:	e7ae      	b.n	8022bbc <_dtoa_r+0x564>
 8022c5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022c62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c6a:	d1b2      	bne.n	8022bd2 <_dtoa_r+0x57a>
 8022c6c:	e7d3      	b.n	8022c16 <_dtoa_r+0x5be>
 8022c6e:	bf00      	nop
 8022c70:	08026948 	.word	0x08026948
 8022c74:	08026920 	.word	0x08026920
 8022c78:	9907      	ldr	r1, [sp, #28]
 8022c7a:	2900      	cmp	r1, #0
 8022c7c:	f000 80d0 	beq.w	8022e20 <_dtoa_r+0x7c8>
 8022c80:	9906      	ldr	r1, [sp, #24]
 8022c82:	2901      	cmp	r1, #1
 8022c84:	f300 80b4 	bgt.w	8022df0 <_dtoa_r+0x798>
 8022c88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022c8a:	2900      	cmp	r1, #0
 8022c8c:	f000 80ac 	beq.w	8022de8 <_dtoa_r+0x790>
 8022c90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8022c94:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8022c98:	461c      	mov	r4, r3
 8022c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8022c9c:	9b04      	ldr	r3, [sp, #16]
 8022c9e:	4413      	add	r3, r2
 8022ca0:	9304      	str	r3, [sp, #16]
 8022ca2:	9b05      	ldr	r3, [sp, #20]
 8022ca4:	2101      	movs	r1, #1
 8022ca6:	4413      	add	r3, r2
 8022ca8:	4630      	mov	r0, r6
 8022caa:	9305      	str	r3, [sp, #20]
 8022cac:	f000 fc9e 	bl	80235ec <__i2b>
 8022cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cb2:	4607      	mov	r7, r0
 8022cb4:	f1b8 0f00 	cmp.w	r8, #0
 8022cb8:	dd0d      	ble.n	8022cd6 <_dtoa_r+0x67e>
 8022cba:	9a05      	ldr	r2, [sp, #20]
 8022cbc:	2a00      	cmp	r2, #0
 8022cbe:	dd0a      	ble.n	8022cd6 <_dtoa_r+0x67e>
 8022cc0:	4542      	cmp	r2, r8
 8022cc2:	9904      	ldr	r1, [sp, #16]
 8022cc4:	bfa8      	it	ge
 8022cc6:	4642      	movge	r2, r8
 8022cc8:	1a89      	subs	r1, r1, r2
 8022cca:	9104      	str	r1, [sp, #16]
 8022ccc:	9905      	ldr	r1, [sp, #20]
 8022cce:	eba8 0802 	sub.w	r8, r8, r2
 8022cd2:	1a8a      	subs	r2, r1, r2
 8022cd4:	9205      	str	r2, [sp, #20]
 8022cd6:	b303      	cbz	r3, 8022d1a <_dtoa_r+0x6c2>
 8022cd8:	9a07      	ldr	r2, [sp, #28]
 8022cda:	2a00      	cmp	r2, #0
 8022cdc:	f000 80a5 	beq.w	8022e2a <_dtoa_r+0x7d2>
 8022ce0:	2c00      	cmp	r4, #0
 8022ce2:	dd13      	ble.n	8022d0c <_dtoa_r+0x6b4>
 8022ce4:	4639      	mov	r1, r7
 8022ce6:	4622      	mov	r2, r4
 8022ce8:	4630      	mov	r0, r6
 8022cea:	930d      	str	r3, [sp, #52]	; 0x34
 8022cec:	f000 fd3e 	bl	802376c <__pow5mult>
 8022cf0:	462a      	mov	r2, r5
 8022cf2:	4601      	mov	r1, r0
 8022cf4:	4607      	mov	r7, r0
 8022cf6:	4630      	mov	r0, r6
 8022cf8:	f000 fc8e 	bl	8023618 <__multiply>
 8022cfc:	4629      	mov	r1, r5
 8022cfe:	900a      	str	r0, [sp, #40]	; 0x28
 8022d00:	4630      	mov	r0, r6
 8022d02:	f000 fbbb 	bl	802347c <_Bfree>
 8022d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d0a:	4615      	mov	r5, r2
 8022d0c:	1b1a      	subs	r2, r3, r4
 8022d0e:	d004      	beq.n	8022d1a <_dtoa_r+0x6c2>
 8022d10:	4629      	mov	r1, r5
 8022d12:	4630      	mov	r0, r6
 8022d14:	f000 fd2a 	bl	802376c <__pow5mult>
 8022d18:	4605      	mov	r5, r0
 8022d1a:	2101      	movs	r1, #1
 8022d1c:	4630      	mov	r0, r6
 8022d1e:	f000 fc65 	bl	80235ec <__i2b>
 8022d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d24:	2b00      	cmp	r3, #0
 8022d26:	4604      	mov	r4, r0
 8022d28:	f340 8081 	ble.w	8022e2e <_dtoa_r+0x7d6>
 8022d2c:	461a      	mov	r2, r3
 8022d2e:	4601      	mov	r1, r0
 8022d30:	4630      	mov	r0, r6
 8022d32:	f000 fd1b 	bl	802376c <__pow5mult>
 8022d36:	9b06      	ldr	r3, [sp, #24]
 8022d38:	2b01      	cmp	r3, #1
 8022d3a:	4604      	mov	r4, r0
 8022d3c:	dd7a      	ble.n	8022e34 <_dtoa_r+0x7dc>
 8022d3e:	2300      	movs	r3, #0
 8022d40:	930a      	str	r3, [sp, #40]	; 0x28
 8022d42:	6922      	ldr	r2, [r4, #16]
 8022d44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022d48:	6910      	ldr	r0, [r2, #16]
 8022d4a:	f000 fbff 	bl	802354c <__hi0bits>
 8022d4e:	f1c0 0020 	rsb	r0, r0, #32
 8022d52:	9b05      	ldr	r3, [sp, #20]
 8022d54:	4418      	add	r0, r3
 8022d56:	f010 001f 	ands.w	r0, r0, #31
 8022d5a:	f000 808c 	beq.w	8022e76 <_dtoa_r+0x81e>
 8022d5e:	f1c0 0220 	rsb	r2, r0, #32
 8022d62:	2a04      	cmp	r2, #4
 8022d64:	f340 8085 	ble.w	8022e72 <_dtoa_r+0x81a>
 8022d68:	f1c0 001c 	rsb	r0, r0, #28
 8022d6c:	9b04      	ldr	r3, [sp, #16]
 8022d6e:	4403      	add	r3, r0
 8022d70:	9304      	str	r3, [sp, #16]
 8022d72:	9b05      	ldr	r3, [sp, #20]
 8022d74:	4403      	add	r3, r0
 8022d76:	4480      	add	r8, r0
 8022d78:	9305      	str	r3, [sp, #20]
 8022d7a:	9b04      	ldr	r3, [sp, #16]
 8022d7c:	2b00      	cmp	r3, #0
 8022d7e:	dd05      	ble.n	8022d8c <_dtoa_r+0x734>
 8022d80:	4629      	mov	r1, r5
 8022d82:	461a      	mov	r2, r3
 8022d84:	4630      	mov	r0, r6
 8022d86:	f000 fd4b 	bl	8023820 <__lshift>
 8022d8a:	4605      	mov	r5, r0
 8022d8c:	9b05      	ldr	r3, [sp, #20]
 8022d8e:	2b00      	cmp	r3, #0
 8022d90:	dd05      	ble.n	8022d9e <_dtoa_r+0x746>
 8022d92:	4621      	mov	r1, r4
 8022d94:	461a      	mov	r2, r3
 8022d96:	4630      	mov	r0, r6
 8022d98:	f000 fd42 	bl	8023820 <__lshift>
 8022d9c:	4604      	mov	r4, r0
 8022d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	d06a      	beq.n	8022e7a <_dtoa_r+0x822>
 8022da4:	4621      	mov	r1, r4
 8022da6:	4628      	mov	r0, r5
 8022da8:	f000 fdaa 	bl	8023900 <__mcmp>
 8022dac:	2800      	cmp	r0, #0
 8022dae:	da64      	bge.n	8022e7a <_dtoa_r+0x822>
 8022db0:	2300      	movs	r3, #0
 8022db2:	4629      	mov	r1, r5
 8022db4:	220a      	movs	r2, #10
 8022db6:	4630      	mov	r0, r6
 8022db8:	f000 fb82 	bl	80234c0 <__multadd>
 8022dbc:	9b07      	ldr	r3, [sp, #28]
 8022dbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022dc2:	4605      	mov	r5, r0
 8022dc4:	2b00      	cmp	r3, #0
 8022dc6:	f000 8191 	beq.w	80230ec <_dtoa_r+0xa94>
 8022dca:	4639      	mov	r1, r7
 8022dcc:	2300      	movs	r3, #0
 8022dce:	220a      	movs	r2, #10
 8022dd0:	4630      	mov	r0, r6
 8022dd2:	f000 fb75 	bl	80234c0 <__multadd>
 8022dd6:	f1ba 0f00 	cmp.w	sl, #0
 8022dda:	4607      	mov	r7, r0
 8022ddc:	f300 808d 	bgt.w	8022efa <_dtoa_r+0x8a2>
 8022de0:	9b06      	ldr	r3, [sp, #24]
 8022de2:	2b02      	cmp	r3, #2
 8022de4:	dc50      	bgt.n	8022e88 <_dtoa_r+0x830>
 8022de6:	e088      	b.n	8022efa <_dtoa_r+0x8a2>
 8022de8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022dea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8022dee:	e751      	b.n	8022c94 <_dtoa_r+0x63c>
 8022df0:	f109 34ff 	add.w	r4, r9, #4294967295
 8022df4:	42a3      	cmp	r3, r4
 8022df6:	bfbf      	itttt	lt
 8022df8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8022dfa:	1ae3      	sublt	r3, r4, r3
 8022dfc:	18d2      	addlt	r2, r2, r3
 8022dfe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8022e00:	bfb6      	itet	lt
 8022e02:	4623      	movlt	r3, r4
 8022e04:	1b1c      	subge	r4, r3, r4
 8022e06:	2400      	movlt	r4, #0
 8022e08:	f1b9 0f00 	cmp.w	r9, #0
 8022e0c:	bfb5      	itete	lt
 8022e0e:	9a04      	ldrlt	r2, [sp, #16]
 8022e10:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8022e14:	eba2 0809 	sublt.w	r8, r2, r9
 8022e18:	464a      	movge	r2, r9
 8022e1a:	bfb8      	it	lt
 8022e1c:	2200      	movlt	r2, #0
 8022e1e:	e73c      	b.n	8022c9a <_dtoa_r+0x642>
 8022e20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8022e24:	9f07      	ldr	r7, [sp, #28]
 8022e26:	461c      	mov	r4, r3
 8022e28:	e744      	b.n	8022cb4 <_dtoa_r+0x65c>
 8022e2a:	461a      	mov	r2, r3
 8022e2c:	e770      	b.n	8022d10 <_dtoa_r+0x6b8>
 8022e2e:	9b06      	ldr	r3, [sp, #24]
 8022e30:	2b01      	cmp	r3, #1
 8022e32:	dc18      	bgt.n	8022e66 <_dtoa_r+0x80e>
 8022e34:	9b02      	ldr	r3, [sp, #8]
 8022e36:	b9b3      	cbnz	r3, 8022e66 <_dtoa_r+0x80e>
 8022e38:	9b03      	ldr	r3, [sp, #12]
 8022e3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8022e3e:	b9a2      	cbnz	r2, 8022e6a <_dtoa_r+0x812>
 8022e40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022e44:	0d12      	lsrs	r2, r2, #20
 8022e46:	0512      	lsls	r2, r2, #20
 8022e48:	b18a      	cbz	r2, 8022e6e <_dtoa_r+0x816>
 8022e4a:	9b04      	ldr	r3, [sp, #16]
 8022e4c:	3301      	adds	r3, #1
 8022e4e:	9304      	str	r3, [sp, #16]
 8022e50:	9b05      	ldr	r3, [sp, #20]
 8022e52:	3301      	adds	r3, #1
 8022e54:	9305      	str	r3, [sp, #20]
 8022e56:	2301      	movs	r3, #1
 8022e58:	930a      	str	r3, [sp, #40]	; 0x28
 8022e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	f47f af70 	bne.w	8022d42 <_dtoa_r+0x6ea>
 8022e62:	2001      	movs	r0, #1
 8022e64:	e775      	b.n	8022d52 <_dtoa_r+0x6fa>
 8022e66:	2300      	movs	r3, #0
 8022e68:	e7f6      	b.n	8022e58 <_dtoa_r+0x800>
 8022e6a:	9b02      	ldr	r3, [sp, #8]
 8022e6c:	e7f4      	b.n	8022e58 <_dtoa_r+0x800>
 8022e6e:	920a      	str	r2, [sp, #40]	; 0x28
 8022e70:	e7f3      	b.n	8022e5a <_dtoa_r+0x802>
 8022e72:	d082      	beq.n	8022d7a <_dtoa_r+0x722>
 8022e74:	4610      	mov	r0, r2
 8022e76:	301c      	adds	r0, #28
 8022e78:	e778      	b.n	8022d6c <_dtoa_r+0x714>
 8022e7a:	f1b9 0f00 	cmp.w	r9, #0
 8022e7e:	dc37      	bgt.n	8022ef0 <_dtoa_r+0x898>
 8022e80:	9b06      	ldr	r3, [sp, #24]
 8022e82:	2b02      	cmp	r3, #2
 8022e84:	dd34      	ble.n	8022ef0 <_dtoa_r+0x898>
 8022e86:	46ca      	mov	sl, r9
 8022e88:	f1ba 0f00 	cmp.w	sl, #0
 8022e8c:	d10d      	bne.n	8022eaa <_dtoa_r+0x852>
 8022e8e:	4621      	mov	r1, r4
 8022e90:	4653      	mov	r3, sl
 8022e92:	2205      	movs	r2, #5
 8022e94:	4630      	mov	r0, r6
 8022e96:	f000 fb13 	bl	80234c0 <__multadd>
 8022e9a:	4601      	mov	r1, r0
 8022e9c:	4604      	mov	r4, r0
 8022e9e:	4628      	mov	r0, r5
 8022ea0:	f000 fd2e 	bl	8023900 <__mcmp>
 8022ea4:	2800      	cmp	r0, #0
 8022ea6:	f73f adeb 	bgt.w	8022a80 <_dtoa_r+0x428>
 8022eaa:	9b08      	ldr	r3, [sp, #32]
 8022eac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022eb0:	ea6f 0b03 	mvn.w	fp, r3
 8022eb4:	f04f 0900 	mov.w	r9, #0
 8022eb8:	4621      	mov	r1, r4
 8022eba:	4630      	mov	r0, r6
 8022ebc:	f000 fade 	bl	802347c <_Bfree>
 8022ec0:	2f00      	cmp	r7, #0
 8022ec2:	f43f aea8 	beq.w	8022c16 <_dtoa_r+0x5be>
 8022ec6:	f1b9 0f00 	cmp.w	r9, #0
 8022eca:	d005      	beq.n	8022ed8 <_dtoa_r+0x880>
 8022ecc:	45b9      	cmp	r9, r7
 8022ece:	d003      	beq.n	8022ed8 <_dtoa_r+0x880>
 8022ed0:	4649      	mov	r1, r9
 8022ed2:	4630      	mov	r0, r6
 8022ed4:	f000 fad2 	bl	802347c <_Bfree>
 8022ed8:	4639      	mov	r1, r7
 8022eda:	4630      	mov	r0, r6
 8022edc:	f000 face 	bl	802347c <_Bfree>
 8022ee0:	e699      	b.n	8022c16 <_dtoa_r+0x5be>
 8022ee2:	2400      	movs	r4, #0
 8022ee4:	4627      	mov	r7, r4
 8022ee6:	e7e0      	b.n	8022eaa <_dtoa_r+0x852>
 8022ee8:	46bb      	mov	fp, r7
 8022eea:	4604      	mov	r4, r0
 8022eec:	4607      	mov	r7, r0
 8022eee:	e5c7      	b.n	8022a80 <_dtoa_r+0x428>
 8022ef0:	9b07      	ldr	r3, [sp, #28]
 8022ef2:	46ca      	mov	sl, r9
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	f000 8100 	beq.w	80230fa <_dtoa_r+0xaa2>
 8022efa:	f1b8 0f00 	cmp.w	r8, #0
 8022efe:	dd05      	ble.n	8022f0c <_dtoa_r+0x8b4>
 8022f00:	4639      	mov	r1, r7
 8022f02:	4642      	mov	r2, r8
 8022f04:	4630      	mov	r0, r6
 8022f06:	f000 fc8b 	bl	8023820 <__lshift>
 8022f0a:	4607      	mov	r7, r0
 8022f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d05d      	beq.n	8022fce <_dtoa_r+0x976>
 8022f12:	6879      	ldr	r1, [r7, #4]
 8022f14:	4630      	mov	r0, r6
 8022f16:	f000 fa71 	bl	80233fc <_Balloc>
 8022f1a:	4680      	mov	r8, r0
 8022f1c:	b928      	cbnz	r0, 8022f2a <_dtoa_r+0x8d2>
 8022f1e:	4b82      	ldr	r3, [pc, #520]	; (8023128 <_dtoa_r+0xad0>)
 8022f20:	4602      	mov	r2, r0
 8022f22:	f240 21ea 	movw	r1, #746	; 0x2ea
 8022f26:	f7ff bbaf 	b.w	8022688 <_dtoa_r+0x30>
 8022f2a:	693a      	ldr	r2, [r7, #16]
 8022f2c:	3202      	adds	r2, #2
 8022f2e:	0092      	lsls	r2, r2, #2
 8022f30:	f107 010c 	add.w	r1, r7, #12
 8022f34:	300c      	adds	r0, #12
 8022f36:	f7fe fa0b 	bl	8021350 <memcpy>
 8022f3a:	2201      	movs	r2, #1
 8022f3c:	4641      	mov	r1, r8
 8022f3e:	4630      	mov	r0, r6
 8022f40:	f000 fc6e 	bl	8023820 <__lshift>
 8022f44:	9b01      	ldr	r3, [sp, #4]
 8022f46:	3301      	adds	r3, #1
 8022f48:	9304      	str	r3, [sp, #16]
 8022f4a:	9b01      	ldr	r3, [sp, #4]
 8022f4c:	4453      	add	r3, sl
 8022f4e:	9308      	str	r3, [sp, #32]
 8022f50:	9b02      	ldr	r3, [sp, #8]
 8022f52:	f003 0301 	and.w	r3, r3, #1
 8022f56:	46b9      	mov	r9, r7
 8022f58:	9307      	str	r3, [sp, #28]
 8022f5a:	4607      	mov	r7, r0
 8022f5c:	9b04      	ldr	r3, [sp, #16]
 8022f5e:	4621      	mov	r1, r4
 8022f60:	3b01      	subs	r3, #1
 8022f62:	4628      	mov	r0, r5
 8022f64:	9302      	str	r3, [sp, #8]
 8022f66:	f7ff faeb 	bl	8022540 <quorem>
 8022f6a:	4603      	mov	r3, r0
 8022f6c:	3330      	adds	r3, #48	; 0x30
 8022f6e:	9005      	str	r0, [sp, #20]
 8022f70:	4649      	mov	r1, r9
 8022f72:	4628      	mov	r0, r5
 8022f74:	9309      	str	r3, [sp, #36]	; 0x24
 8022f76:	f000 fcc3 	bl	8023900 <__mcmp>
 8022f7a:	463a      	mov	r2, r7
 8022f7c:	4682      	mov	sl, r0
 8022f7e:	4621      	mov	r1, r4
 8022f80:	4630      	mov	r0, r6
 8022f82:	f000 fcd9 	bl	8023938 <__mdiff>
 8022f86:	68c2      	ldr	r2, [r0, #12]
 8022f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f8a:	4680      	mov	r8, r0
 8022f8c:	bb0a      	cbnz	r2, 8022fd2 <_dtoa_r+0x97a>
 8022f8e:	4601      	mov	r1, r0
 8022f90:	4628      	mov	r0, r5
 8022f92:	f000 fcb5 	bl	8023900 <__mcmp>
 8022f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f98:	4602      	mov	r2, r0
 8022f9a:	4641      	mov	r1, r8
 8022f9c:	4630      	mov	r0, r6
 8022f9e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8022fa2:	f000 fa6b 	bl	802347c <_Bfree>
 8022fa6:	9b06      	ldr	r3, [sp, #24]
 8022fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022faa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8022fae:	ea43 0102 	orr.w	r1, r3, r2
 8022fb2:	9b07      	ldr	r3, [sp, #28]
 8022fb4:	430b      	orrs	r3, r1
 8022fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fb8:	d10d      	bne.n	8022fd6 <_dtoa_r+0x97e>
 8022fba:	2b39      	cmp	r3, #57	; 0x39
 8022fbc:	d029      	beq.n	8023012 <_dtoa_r+0x9ba>
 8022fbe:	f1ba 0f00 	cmp.w	sl, #0
 8022fc2:	dd01      	ble.n	8022fc8 <_dtoa_r+0x970>
 8022fc4:	9b05      	ldr	r3, [sp, #20]
 8022fc6:	3331      	adds	r3, #49	; 0x31
 8022fc8:	9a02      	ldr	r2, [sp, #8]
 8022fca:	7013      	strb	r3, [r2, #0]
 8022fcc:	e774      	b.n	8022eb8 <_dtoa_r+0x860>
 8022fce:	4638      	mov	r0, r7
 8022fd0:	e7b8      	b.n	8022f44 <_dtoa_r+0x8ec>
 8022fd2:	2201      	movs	r2, #1
 8022fd4:	e7e1      	b.n	8022f9a <_dtoa_r+0x942>
 8022fd6:	f1ba 0f00 	cmp.w	sl, #0
 8022fda:	db06      	blt.n	8022fea <_dtoa_r+0x992>
 8022fdc:	9906      	ldr	r1, [sp, #24]
 8022fde:	ea41 0a0a 	orr.w	sl, r1, sl
 8022fe2:	9907      	ldr	r1, [sp, #28]
 8022fe4:	ea5a 0101 	orrs.w	r1, sl, r1
 8022fe8:	d120      	bne.n	802302c <_dtoa_r+0x9d4>
 8022fea:	2a00      	cmp	r2, #0
 8022fec:	ddec      	ble.n	8022fc8 <_dtoa_r+0x970>
 8022fee:	4629      	mov	r1, r5
 8022ff0:	2201      	movs	r2, #1
 8022ff2:	4630      	mov	r0, r6
 8022ff4:	9304      	str	r3, [sp, #16]
 8022ff6:	f000 fc13 	bl	8023820 <__lshift>
 8022ffa:	4621      	mov	r1, r4
 8022ffc:	4605      	mov	r5, r0
 8022ffe:	f000 fc7f 	bl	8023900 <__mcmp>
 8023002:	2800      	cmp	r0, #0
 8023004:	9b04      	ldr	r3, [sp, #16]
 8023006:	dc02      	bgt.n	802300e <_dtoa_r+0x9b6>
 8023008:	d1de      	bne.n	8022fc8 <_dtoa_r+0x970>
 802300a:	07da      	lsls	r2, r3, #31
 802300c:	d5dc      	bpl.n	8022fc8 <_dtoa_r+0x970>
 802300e:	2b39      	cmp	r3, #57	; 0x39
 8023010:	d1d8      	bne.n	8022fc4 <_dtoa_r+0x96c>
 8023012:	9a02      	ldr	r2, [sp, #8]
 8023014:	2339      	movs	r3, #57	; 0x39
 8023016:	7013      	strb	r3, [r2, #0]
 8023018:	4643      	mov	r3, r8
 802301a:	4698      	mov	r8, r3
 802301c:	3b01      	subs	r3, #1
 802301e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8023022:	2a39      	cmp	r2, #57	; 0x39
 8023024:	d051      	beq.n	80230ca <_dtoa_r+0xa72>
 8023026:	3201      	adds	r2, #1
 8023028:	701a      	strb	r2, [r3, #0]
 802302a:	e745      	b.n	8022eb8 <_dtoa_r+0x860>
 802302c:	2a00      	cmp	r2, #0
 802302e:	dd03      	ble.n	8023038 <_dtoa_r+0x9e0>
 8023030:	2b39      	cmp	r3, #57	; 0x39
 8023032:	d0ee      	beq.n	8023012 <_dtoa_r+0x9ba>
 8023034:	3301      	adds	r3, #1
 8023036:	e7c7      	b.n	8022fc8 <_dtoa_r+0x970>
 8023038:	9a04      	ldr	r2, [sp, #16]
 802303a:	9908      	ldr	r1, [sp, #32]
 802303c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023040:	428a      	cmp	r2, r1
 8023042:	d02b      	beq.n	802309c <_dtoa_r+0xa44>
 8023044:	4629      	mov	r1, r5
 8023046:	2300      	movs	r3, #0
 8023048:	220a      	movs	r2, #10
 802304a:	4630      	mov	r0, r6
 802304c:	f000 fa38 	bl	80234c0 <__multadd>
 8023050:	45b9      	cmp	r9, r7
 8023052:	4605      	mov	r5, r0
 8023054:	f04f 0300 	mov.w	r3, #0
 8023058:	f04f 020a 	mov.w	r2, #10
 802305c:	4649      	mov	r1, r9
 802305e:	4630      	mov	r0, r6
 8023060:	d107      	bne.n	8023072 <_dtoa_r+0xa1a>
 8023062:	f000 fa2d 	bl	80234c0 <__multadd>
 8023066:	4681      	mov	r9, r0
 8023068:	4607      	mov	r7, r0
 802306a:	9b04      	ldr	r3, [sp, #16]
 802306c:	3301      	adds	r3, #1
 802306e:	9304      	str	r3, [sp, #16]
 8023070:	e774      	b.n	8022f5c <_dtoa_r+0x904>
 8023072:	f000 fa25 	bl	80234c0 <__multadd>
 8023076:	4639      	mov	r1, r7
 8023078:	4681      	mov	r9, r0
 802307a:	2300      	movs	r3, #0
 802307c:	220a      	movs	r2, #10
 802307e:	4630      	mov	r0, r6
 8023080:	f000 fa1e 	bl	80234c0 <__multadd>
 8023084:	4607      	mov	r7, r0
 8023086:	e7f0      	b.n	802306a <_dtoa_r+0xa12>
 8023088:	f1ba 0f00 	cmp.w	sl, #0
 802308c:	9a01      	ldr	r2, [sp, #4]
 802308e:	bfcc      	ite	gt
 8023090:	46d0      	movgt	r8, sl
 8023092:	f04f 0801 	movle.w	r8, #1
 8023096:	4490      	add	r8, r2
 8023098:	f04f 0900 	mov.w	r9, #0
 802309c:	4629      	mov	r1, r5
 802309e:	2201      	movs	r2, #1
 80230a0:	4630      	mov	r0, r6
 80230a2:	9302      	str	r3, [sp, #8]
 80230a4:	f000 fbbc 	bl	8023820 <__lshift>
 80230a8:	4621      	mov	r1, r4
 80230aa:	4605      	mov	r5, r0
 80230ac:	f000 fc28 	bl	8023900 <__mcmp>
 80230b0:	2800      	cmp	r0, #0
 80230b2:	dcb1      	bgt.n	8023018 <_dtoa_r+0x9c0>
 80230b4:	d102      	bne.n	80230bc <_dtoa_r+0xa64>
 80230b6:	9b02      	ldr	r3, [sp, #8]
 80230b8:	07db      	lsls	r3, r3, #31
 80230ba:	d4ad      	bmi.n	8023018 <_dtoa_r+0x9c0>
 80230bc:	4643      	mov	r3, r8
 80230be:	4698      	mov	r8, r3
 80230c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80230c4:	2a30      	cmp	r2, #48	; 0x30
 80230c6:	d0fa      	beq.n	80230be <_dtoa_r+0xa66>
 80230c8:	e6f6      	b.n	8022eb8 <_dtoa_r+0x860>
 80230ca:	9a01      	ldr	r2, [sp, #4]
 80230cc:	429a      	cmp	r2, r3
 80230ce:	d1a4      	bne.n	802301a <_dtoa_r+0x9c2>
 80230d0:	f10b 0b01 	add.w	fp, fp, #1
 80230d4:	2331      	movs	r3, #49	; 0x31
 80230d6:	e778      	b.n	8022fca <_dtoa_r+0x972>
 80230d8:	4b14      	ldr	r3, [pc, #80]	; (802312c <_dtoa_r+0xad4>)
 80230da:	f7ff bb27 	b.w	802272c <_dtoa_r+0xd4>
 80230de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80230e0:	2b00      	cmp	r3, #0
 80230e2:	f47f ab03 	bne.w	80226ec <_dtoa_r+0x94>
 80230e6:	4b12      	ldr	r3, [pc, #72]	; (8023130 <_dtoa_r+0xad8>)
 80230e8:	f7ff bb20 	b.w	802272c <_dtoa_r+0xd4>
 80230ec:	f1ba 0f00 	cmp.w	sl, #0
 80230f0:	dc03      	bgt.n	80230fa <_dtoa_r+0xaa2>
 80230f2:	9b06      	ldr	r3, [sp, #24]
 80230f4:	2b02      	cmp	r3, #2
 80230f6:	f73f aec7 	bgt.w	8022e88 <_dtoa_r+0x830>
 80230fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80230fe:	4621      	mov	r1, r4
 8023100:	4628      	mov	r0, r5
 8023102:	f7ff fa1d 	bl	8022540 <quorem>
 8023106:	f100 0330 	add.w	r3, r0, #48	; 0x30
 802310a:	f808 3b01 	strb.w	r3, [r8], #1
 802310e:	9a01      	ldr	r2, [sp, #4]
 8023110:	eba8 0202 	sub.w	r2, r8, r2
 8023114:	4592      	cmp	sl, r2
 8023116:	ddb7      	ble.n	8023088 <_dtoa_r+0xa30>
 8023118:	4629      	mov	r1, r5
 802311a:	2300      	movs	r3, #0
 802311c:	220a      	movs	r2, #10
 802311e:	4630      	mov	r0, r6
 8023120:	f000 f9ce 	bl	80234c0 <__multadd>
 8023124:	4605      	mov	r5, r0
 8023126:	e7ea      	b.n	80230fe <_dtoa_r+0xaa6>
 8023128:	080268ac 	.word	0x080268ac
 802312c:	08025dda 	.word	0x08025dda
 8023130:	0802682d 	.word	0x0802682d

08023134 <__sflush_r>:
 8023134:	898a      	ldrh	r2, [r1, #12]
 8023136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802313a:	4605      	mov	r5, r0
 802313c:	0710      	lsls	r0, r2, #28
 802313e:	460c      	mov	r4, r1
 8023140:	d458      	bmi.n	80231f4 <__sflush_r+0xc0>
 8023142:	684b      	ldr	r3, [r1, #4]
 8023144:	2b00      	cmp	r3, #0
 8023146:	dc05      	bgt.n	8023154 <__sflush_r+0x20>
 8023148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802314a:	2b00      	cmp	r3, #0
 802314c:	dc02      	bgt.n	8023154 <__sflush_r+0x20>
 802314e:	2000      	movs	r0, #0
 8023150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023156:	2e00      	cmp	r6, #0
 8023158:	d0f9      	beq.n	802314e <__sflush_r+0x1a>
 802315a:	2300      	movs	r3, #0
 802315c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023160:	682f      	ldr	r7, [r5, #0]
 8023162:	602b      	str	r3, [r5, #0]
 8023164:	d032      	beq.n	80231cc <__sflush_r+0x98>
 8023166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023168:	89a3      	ldrh	r3, [r4, #12]
 802316a:	075a      	lsls	r2, r3, #29
 802316c:	d505      	bpl.n	802317a <__sflush_r+0x46>
 802316e:	6863      	ldr	r3, [r4, #4]
 8023170:	1ac0      	subs	r0, r0, r3
 8023172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023174:	b10b      	cbz	r3, 802317a <__sflush_r+0x46>
 8023176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023178:	1ac0      	subs	r0, r0, r3
 802317a:	2300      	movs	r3, #0
 802317c:	4602      	mov	r2, r0
 802317e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023180:	6a21      	ldr	r1, [r4, #32]
 8023182:	4628      	mov	r0, r5
 8023184:	47b0      	blx	r6
 8023186:	1c43      	adds	r3, r0, #1
 8023188:	89a3      	ldrh	r3, [r4, #12]
 802318a:	d106      	bne.n	802319a <__sflush_r+0x66>
 802318c:	6829      	ldr	r1, [r5, #0]
 802318e:	291d      	cmp	r1, #29
 8023190:	d82c      	bhi.n	80231ec <__sflush_r+0xb8>
 8023192:	4a2a      	ldr	r2, [pc, #168]	; (802323c <__sflush_r+0x108>)
 8023194:	40ca      	lsrs	r2, r1
 8023196:	07d6      	lsls	r6, r2, #31
 8023198:	d528      	bpl.n	80231ec <__sflush_r+0xb8>
 802319a:	2200      	movs	r2, #0
 802319c:	6062      	str	r2, [r4, #4]
 802319e:	04d9      	lsls	r1, r3, #19
 80231a0:	6922      	ldr	r2, [r4, #16]
 80231a2:	6022      	str	r2, [r4, #0]
 80231a4:	d504      	bpl.n	80231b0 <__sflush_r+0x7c>
 80231a6:	1c42      	adds	r2, r0, #1
 80231a8:	d101      	bne.n	80231ae <__sflush_r+0x7a>
 80231aa:	682b      	ldr	r3, [r5, #0]
 80231ac:	b903      	cbnz	r3, 80231b0 <__sflush_r+0x7c>
 80231ae:	6560      	str	r0, [r4, #84]	; 0x54
 80231b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80231b2:	602f      	str	r7, [r5, #0]
 80231b4:	2900      	cmp	r1, #0
 80231b6:	d0ca      	beq.n	802314e <__sflush_r+0x1a>
 80231b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80231bc:	4299      	cmp	r1, r3
 80231be:	d002      	beq.n	80231c6 <__sflush_r+0x92>
 80231c0:	4628      	mov	r0, r5
 80231c2:	f7fe f8db 	bl	802137c <_free_r>
 80231c6:	2000      	movs	r0, #0
 80231c8:	6360      	str	r0, [r4, #52]	; 0x34
 80231ca:	e7c1      	b.n	8023150 <__sflush_r+0x1c>
 80231cc:	6a21      	ldr	r1, [r4, #32]
 80231ce:	2301      	movs	r3, #1
 80231d0:	4628      	mov	r0, r5
 80231d2:	47b0      	blx	r6
 80231d4:	1c41      	adds	r1, r0, #1
 80231d6:	d1c7      	bne.n	8023168 <__sflush_r+0x34>
 80231d8:	682b      	ldr	r3, [r5, #0]
 80231da:	2b00      	cmp	r3, #0
 80231dc:	d0c4      	beq.n	8023168 <__sflush_r+0x34>
 80231de:	2b1d      	cmp	r3, #29
 80231e0:	d001      	beq.n	80231e6 <__sflush_r+0xb2>
 80231e2:	2b16      	cmp	r3, #22
 80231e4:	d101      	bne.n	80231ea <__sflush_r+0xb6>
 80231e6:	602f      	str	r7, [r5, #0]
 80231e8:	e7b1      	b.n	802314e <__sflush_r+0x1a>
 80231ea:	89a3      	ldrh	r3, [r4, #12]
 80231ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80231f0:	81a3      	strh	r3, [r4, #12]
 80231f2:	e7ad      	b.n	8023150 <__sflush_r+0x1c>
 80231f4:	690f      	ldr	r7, [r1, #16]
 80231f6:	2f00      	cmp	r7, #0
 80231f8:	d0a9      	beq.n	802314e <__sflush_r+0x1a>
 80231fa:	0793      	lsls	r3, r2, #30
 80231fc:	680e      	ldr	r6, [r1, #0]
 80231fe:	bf08      	it	eq
 8023200:	694b      	ldreq	r3, [r1, #20]
 8023202:	600f      	str	r7, [r1, #0]
 8023204:	bf18      	it	ne
 8023206:	2300      	movne	r3, #0
 8023208:	eba6 0807 	sub.w	r8, r6, r7
 802320c:	608b      	str	r3, [r1, #8]
 802320e:	f1b8 0f00 	cmp.w	r8, #0
 8023212:	dd9c      	ble.n	802314e <__sflush_r+0x1a>
 8023214:	6a21      	ldr	r1, [r4, #32]
 8023216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023218:	4643      	mov	r3, r8
 802321a:	463a      	mov	r2, r7
 802321c:	4628      	mov	r0, r5
 802321e:	47b0      	blx	r6
 8023220:	2800      	cmp	r0, #0
 8023222:	dc06      	bgt.n	8023232 <__sflush_r+0xfe>
 8023224:	89a3      	ldrh	r3, [r4, #12]
 8023226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802322a:	81a3      	strh	r3, [r4, #12]
 802322c:	f04f 30ff 	mov.w	r0, #4294967295
 8023230:	e78e      	b.n	8023150 <__sflush_r+0x1c>
 8023232:	4407      	add	r7, r0
 8023234:	eba8 0800 	sub.w	r8, r8, r0
 8023238:	e7e9      	b.n	802320e <__sflush_r+0xda>
 802323a:	bf00      	nop
 802323c:	20400001 	.word	0x20400001

08023240 <_fflush_r>:
 8023240:	b538      	push	{r3, r4, r5, lr}
 8023242:	690b      	ldr	r3, [r1, #16]
 8023244:	4605      	mov	r5, r0
 8023246:	460c      	mov	r4, r1
 8023248:	b913      	cbnz	r3, 8023250 <_fflush_r+0x10>
 802324a:	2500      	movs	r5, #0
 802324c:	4628      	mov	r0, r5
 802324e:	bd38      	pop	{r3, r4, r5, pc}
 8023250:	b118      	cbz	r0, 802325a <_fflush_r+0x1a>
 8023252:	6983      	ldr	r3, [r0, #24]
 8023254:	b90b      	cbnz	r3, 802325a <_fflush_r+0x1a>
 8023256:	f7fd ff93 	bl	8021180 <__sinit>
 802325a:	4b14      	ldr	r3, [pc, #80]	; (80232ac <_fflush_r+0x6c>)
 802325c:	429c      	cmp	r4, r3
 802325e:	d11b      	bne.n	8023298 <_fflush_r+0x58>
 8023260:	686c      	ldr	r4, [r5, #4]
 8023262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023266:	2b00      	cmp	r3, #0
 8023268:	d0ef      	beq.n	802324a <_fflush_r+0xa>
 802326a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802326c:	07d0      	lsls	r0, r2, #31
 802326e:	d404      	bmi.n	802327a <_fflush_r+0x3a>
 8023270:	0599      	lsls	r1, r3, #22
 8023272:	d402      	bmi.n	802327a <_fflush_r+0x3a>
 8023274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023276:	f7fe f858 	bl	802132a <__retarget_lock_acquire_recursive>
 802327a:	4628      	mov	r0, r5
 802327c:	4621      	mov	r1, r4
 802327e:	f7ff ff59 	bl	8023134 <__sflush_r>
 8023282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023284:	07da      	lsls	r2, r3, #31
 8023286:	4605      	mov	r5, r0
 8023288:	d4e0      	bmi.n	802324c <_fflush_r+0xc>
 802328a:	89a3      	ldrh	r3, [r4, #12]
 802328c:	059b      	lsls	r3, r3, #22
 802328e:	d4dd      	bmi.n	802324c <_fflush_r+0xc>
 8023290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023292:	f7fe f84c 	bl	802132e <__retarget_lock_release_recursive>
 8023296:	e7d9      	b.n	802324c <_fflush_r+0xc>
 8023298:	4b05      	ldr	r3, [pc, #20]	; (80232b0 <_fflush_r+0x70>)
 802329a:	429c      	cmp	r4, r3
 802329c:	d101      	bne.n	80232a2 <_fflush_r+0x62>
 802329e:	68ac      	ldr	r4, [r5, #8]
 80232a0:	e7df      	b.n	8023262 <_fflush_r+0x22>
 80232a2:	4b04      	ldr	r3, [pc, #16]	; (80232b4 <_fflush_r+0x74>)
 80232a4:	429c      	cmp	r4, r3
 80232a6:	bf08      	it	eq
 80232a8:	68ec      	ldreq	r4, [r5, #12]
 80232aa:	e7da      	b.n	8023262 <_fflush_r+0x22>
 80232ac:	080266a0 	.word	0x080266a0
 80232b0:	080266c0 	.word	0x080266c0
 80232b4:	08026680 	.word	0x08026680

080232b8 <_localeconv_r>:
 80232b8:	4800      	ldr	r0, [pc, #0]	; (80232bc <_localeconv_r+0x4>)
 80232ba:	4770      	bx	lr
 80232bc:	20000298 	.word	0x20000298

080232c0 <_lseek_r>:
 80232c0:	b538      	push	{r3, r4, r5, lr}
 80232c2:	4d07      	ldr	r5, [pc, #28]	; (80232e0 <_lseek_r+0x20>)
 80232c4:	4604      	mov	r4, r0
 80232c6:	4608      	mov	r0, r1
 80232c8:	4611      	mov	r1, r2
 80232ca:	2200      	movs	r2, #0
 80232cc:	602a      	str	r2, [r5, #0]
 80232ce:	461a      	mov	r2, r3
 80232d0:	f7e0 fc56 	bl	8003b80 <_lseek>
 80232d4:	1c43      	adds	r3, r0, #1
 80232d6:	d102      	bne.n	80232de <_lseek_r+0x1e>
 80232d8:	682b      	ldr	r3, [r5, #0]
 80232da:	b103      	cbz	r3, 80232de <_lseek_r+0x1e>
 80232dc:	6023      	str	r3, [r4, #0]
 80232de:	bd38      	pop	{r3, r4, r5, pc}
 80232e0:	20007480 	.word	0x20007480

080232e4 <__swhatbuf_r>:
 80232e4:	b570      	push	{r4, r5, r6, lr}
 80232e6:	460e      	mov	r6, r1
 80232e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232ec:	2900      	cmp	r1, #0
 80232ee:	b096      	sub	sp, #88	; 0x58
 80232f0:	4614      	mov	r4, r2
 80232f2:	461d      	mov	r5, r3
 80232f4:	da08      	bge.n	8023308 <__swhatbuf_r+0x24>
 80232f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80232fa:	2200      	movs	r2, #0
 80232fc:	602a      	str	r2, [r5, #0]
 80232fe:	061a      	lsls	r2, r3, #24
 8023300:	d410      	bmi.n	8023324 <__swhatbuf_r+0x40>
 8023302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023306:	e00e      	b.n	8023326 <__swhatbuf_r+0x42>
 8023308:	466a      	mov	r2, sp
 802330a:	f000 fdad 	bl	8023e68 <_fstat_r>
 802330e:	2800      	cmp	r0, #0
 8023310:	dbf1      	blt.n	80232f6 <__swhatbuf_r+0x12>
 8023312:	9a01      	ldr	r2, [sp, #4]
 8023314:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023318:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802331c:	425a      	negs	r2, r3
 802331e:	415a      	adcs	r2, r3
 8023320:	602a      	str	r2, [r5, #0]
 8023322:	e7ee      	b.n	8023302 <__swhatbuf_r+0x1e>
 8023324:	2340      	movs	r3, #64	; 0x40
 8023326:	2000      	movs	r0, #0
 8023328:	6023      	str	r3, [r4, #0]
 802332a:	b016      	add	sp, #88	; 0x58
 802332c:	bd70      	pop	{r4, r5, r6, pc}
	...

08023330 <__smakebuf_r>:
 8023330:	898b      	ldrh	r3, [r1, #12]
 8023332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023334:	079d      	lsls	r5, r3, #30
 8023336:	4606      	mov	r6, r0
 8023338:	460c      	mov	r4, r1
 802333a:	d507      	bpl.n	802334c <__smakebuf_r+0x1c>
 802333c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023340:	6023      	str	r3, [r4, #0]
 8023342:	6123      	str	r3, [r4, #16]
 8023344:	2301      	movs	r3, #1
 8023346:	6163      	str	r3, [r4, #20]
 8023348:	b002      	add	sp, #8
 802334a:	bd70      	pop	{r4, r5, r6, pc}
 802334c:	ab01      	add	r3, sp, #4
 802334e:	466a      	mov	r2, sp
 8023350:	f7ff ffc8 	bl	80232e4 <__swhatbuf_r>
 8023354:	9900      	ldr	r1, [sp, #0]
 8023356:	4605      	mov	r5, r0
 8023358:	4630      	mov	r0, r6
 802335a:	f7fe f87b 	bl	8021454 <_malloc_r>
 802335e:	b948      	cbnz	r0, 8023374 <__smakebuf_r+0x44>
 8023360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023364:	059a      	lsls	r2, r3, #22
 8023366:	d4ef      	bmi.n	8023348 <__smakebuf_r+0x18>
 8023368:	f023 0303 	bic.w	r3, r3, #3
 802336c:	f043 0302 	orr.w	r3, r3, #2
 8023370:	81a3      	strh	r3, [r4, #12]
 8023372:	e7e3      	b.n	802333c <__smakebuf_r+0xc>
 8023374:	4b0d      	ldr	r3, [pc, #52]	; (80233ac <__smakebuf_r+0x7c>)
 8023376:	62b3      	str	r3, [r6, #40]	; 0x28
 8023378:	89a3      	ldrh	r3, [r4, #12]
 802337a:	6020      	str	r0, [r4, #0]
 802337c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023380:	81a3      	strh	r3, [r4, #12]
 8023382:	9b00      	ldr	r3, [sp, #0]
 8023384:	6163      	str	r3, [r4, #20]
 8023386:	9b01      	ldr	r3, [sp, #4]
 8023388:	6120      	str	r0, [r4, #16]
 802338a:	b15b      	cbz	r3, 80233a4 <__smakebuf_r+0x74>
 802338c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023390:	4630      	mov	r0, r6
 8023392:	f000 fd7b 	bl	8023e8c <_isatty_r>
 8023396:	b128      	cbz	r0, 80233a4 <__smakebuf_r+0x74>
 8023398:	89a3      	ldrh	r3, [r4, #12]
 802339a:	f023 0303 	bic.w	r3, r3, #3
 802339e:	f043 0301 	orr.w	r3, r3, #1
 80233a2:	81a3      	strh	r3, [r4, #12]
 80233a4:	89a0      	ldrh	r0, [r4, #12]
 80233a6:	4305      	orrs	r5, r0
 80233a8:	81a5      	strh	r5, [r4, #12]
 80233aa:	e7cd      	b.n	8023348 <__smakebuf_r+0x18>
 80233ac:	08021119 	.word	0x08021119

080233b0 <memmove>:
 80233b0:	4288      	cmp	r0, r1
 80233b2:	b510      	push	{r4, lr}
 80233b4:	eb01 0402 	add.w	r4, r1, r2
 80233b8:	d902      	bls.n	80233c0 <memmove+0x10>
 80233ba:	4284      	cmp	r4, r0
 80233bc:	4623      	mov	r3, r4
 80233be:	d807      	bhi.n	80233d0 <memmove+0x20>
 80233c0:	1e43      	subs	r3, r0, #1
 80233c2:	42a1      	cmp	r1, r4
 80233c4:	d008      	beq.n	80233d8 <memmove+0x28>
 80233c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80233ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80233ce:	e7f8      	b.n	80233c2 <memmove+0x12>
 80233d0:	4402      	add	r2, r0
 80233d2:	4601      	mov	r1, r0
 80233d4:	428a      	cmp	r2, r1
 80233d6:	d100      	bne.n	80233da <memmove+0x2a>
 80233d8:	bd10      	pop	{r4, pc}
 80233da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80233de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80233e2:	e7f7      	b.n	80233d4 <memmove+0x24>

080233e4 <__malloc_lock>:
 80233e4:	4801      	ldr	r0, [pc, #4]	; (80233ec <__malloc_lock+0x8>)
 80233e6:	f7fd bfa0 	b.w	802132a <__retarget_lock_acquire_recursive>
 80233ea:	bf00      	nop
 80233ec:	2000736d 	.word	0x2000736d

080233f0 <__malloc_unlock>:
 80233f0:	4801      	ldr	r0, [pc, #4]	; (80233f8 <__malloc_unlock+0x8>)
 80233f2:	f7fd bf9c 	b.w	802132e <__retarget_lock_release_recursive>
 80233f6:	bf00      	nop
 80233f8:	2000736d 	.word	0x2000736d

080233fc <_Balloc>:
 80233fc:	b570      	push	{r4, r5, r6, lr}
 80233fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023400:	4604      	mov	r4, r0
 8023402:	460d      	mov	r5, r1
 8023404:	b976      	cbnz	r6, 8023424 <_Balloc+0x28>
 8023406:	2010      	movs	r0, #16
 8023408:	f7fd ff92 	bl	8021330 <malloc>
 802340c:	4602      	mov	r2, r0
 802340e:	6260      	str	r0, [r4, #36]	; 0x24
 8023410:	b920      	cbnz	r0, 802341c <_Balloc+0x20>
 8023412:	4b18      	ldr	r3, [pc, #96]	; (8023474 <_Balloc+0x78>)
 8023414:	4818      	ldr	r0, [pc, #96]	; (8023478 <_Balloc+0x7c>)
 8023416:	2166      	movs	r1, #102	; 0x66
 8023418:	f7fd fe30 	bl	802107c <__assert_func>
 802341c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023420:	6006      	str	r6, [r0, #0]
 8023422:	60c6      	str	r6, [r0, #12]
 8023424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023426:	68f3      	ldr	r3, [r6, #12]
 8023428:	b183      	cbz	r3, 802344c <_Balloc+0x50>
 802342a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802342c:	68db      	ldr	r3, [r3, #12]
 802342e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023432:	b9b8      	cbnz	r0, 8023464 <_Balloc+0x68>
 8023434:	2101      	movs	r1, #1
 8023436:	fa01 f605 	lsl.w	r6, r1, r5
 802343a:	1d72      	adds	r2, r6, #5
 802343c:	0092      	lsls	r2, r2, #2
 802343e:	4620      	mov	r0, r4
 8023440:	f000 fb60 	bl	8023b04 <_calloc_r>
 8023444:	b160      	cbz	r0, 8023460 <_Balloc+0x64>
 8023446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802344a:	e00e      	b.n	802346a <_Balloc+0x6e>
 802344c:	2221      	movs	r2, #33	; 0x21
 802344e:	2104      	movs	r1, #4
 8023450:	4620      	mov	r0, r4
 8023452:	f000 fb57 	bl	8023b04 <_calloc_r>
 8023456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023458:	60f0      	str	r0, [r6, #12]
 802345a:	68db      	ldr	r3, [r3, #12]
 802345c:	2b00      	cmp	r3, #0
 802345e:	d1e4      	bne.n	802342a <_Balloc+0x2e>
 8023460:	2000      	movs	r0, #0
 8023462:	bd70      	pop	{r4, r5, r6, pc}
 8023464:	6802      	ldr	r2, [r0, #0]
 8023466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802346a:	2300      	movs	r3, #0
 802346c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023470:	e7f7      	b.n	8023462 <_Balloc+0x66>
 8023472:	bf00      	nop
 8023474:	0802683a 	.word	0x0802683a
 8023478:	080268bd 	.word	0x080268bd

0802347c <_Bfree>:
 802347c:	b570      	push	{r4, r5, r6, lr}
 802347e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023480:	4605      	mov	r5, r0
 8023482:	460c      	mov	r4, r1
 8023484:	b976      	cbnz	r6, 80234a4 <_Bfree+0x28>
 8023486:	2010      	movs	r0, #16
 8023488:	f7fd ff52 	bl	8021330 <malloc>
 802348c:	4602      	mov	r2, r0
 802348e:	6268      	str	r0, [r5, #36]	; 0x24
 8023490:	b920      	cbnz	r0, 802349c <_Bfree+0x20>
 8023492:	4b09      	ldr	r3, [pc, #36]	; (80234b8 <_Bfree+0x3c>)
 8023494:	4809      	ldr	r0, [pc, #36]	; (80234bc <_Bfree+0x40>)
 8023496:	218a      	movs	r1, #138	; 0x8a
 8023498:	f7fd fdf0 	bl	802107c <__assert_func>
 802349c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80234a0:	6006      	str	r6, [r0, #0]
 80234a2:	60c6      	str	r6, [r0, #12]
 80234a4:	b13c      	cbz	r4, 80234b6 <_Bfree+0x3a>
 80234a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80234a8:	6862      	ldr	r2, [r4, #4]
 80234aa:	68db      	ldr	r3, [r3, #12]
 80234ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80234b0:	6021      	str	r1, [r4, #0]
 80234b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80234b6:	bd70      	pop	{r4, r5, r6, pc}
 80234b8:	0802683a 	.word	0x0802683a
 80234bc:	080268bd 	.word	0x080268bd

080234c0 <__multadd>:
 80234c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234c4:	690d      	ldr	r5, [r1, #16]
 80234c6:	4607      	mov	r7, r0
 80234c8:	460c      	mov	r4, r1
 80234ca:	461e      	mov	r6, r3
 80234cc:	f101 0c14 	add.w	ip, r1, #20
 80234d0:	2000      	movs	r0, #0
 80234d2:	f8dc 3000 	ldr.w	r3, [ip]
 80234d6:	b299      	uxth	r1, r3
 80234d8:	fb02 6101 	mla	r1, r2, r1, r6
 80234dc:	0c1e      	lsrs	r6, r3, #16
 80234de:	0c0b      	lsrs	r3, r1, #16
 80234e0:	fb02 3306 	mla	r3, r2, r6, r3
 80234e4:	b289      	uxth	r1, r1
 80234e6:	3001      	adds	r0, #1
 80234e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80234ec:	4285      	cmp	r5, r0
 80234ee:	f84c 1b04 	str.w	r1, [ip], #4
 80234f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80234f6:	dcec      	bgt.n	80234d2 <__multadd+0x12>
 80234f8:	b30e      	cbz	r6, 802353e <__multadd+0x7e>
 80234fa:	68a3      	ldr	r3, [r4, #8]
 80234fc:	42ab      	cmp	r3, r5
 80234fe:	dc19      	bgt.n	8023534 <__multadd+0x74>
 8023500:	6861      	ldr	r1, [r4, #4]
 8023502:	4638      	mov	r0, r7
 8023504:	3101      	adds	r1, #1
 8023506:	f7ff ff79 	bl	80233fc <_Balloc>
 802350a:	4680      	mov	r8, r0
 802350c:	b928      	cbnz	r0, 802351a <__multadd+0x5a>
 802350e:	4602      	mov	r2, r0
 8023510:	4b0c      	ldr	r3, [pc, #48]	; (8023544 <__multadd+0x84>)
 8023512:	480d      	ldr	r0, [pc, #52]	; (8023548 <__multadd+0x88>)
 8023514:	21b5      	movs	r1, #181	; 0xb5
 8023516:	f7fd fdb1 	bl	802107c <__assert_func>
 802351a:	6922      	ldr	r2, [r4, #16]
 802351c:	3202      	adds	r2, #2
 802351e:	f104 010c 	add.w	r1, r4, #12
 8023522:	0092      	lsls	r2, r2, #2
 8023524:	300c      	adds	r0, #12
 8023526:	f7fd ff13 	bl	8021350 <memcpy>
 802352a:	4621      	mov	r1, r4
 802352c:	4638      	mov	r0, r7
 802352e:	f7ff ffa5 	bl	802347c <_Bfree>
 8023532:	4644      	mov	r4, r8
 8023534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023538:	3501      	adds	r5, #1
 802353a:	615e      	str	r6, [r3, #20]
 802353c:	6125      	str	r5, [r4, #16]
 802353e:	4620      	mov	r0, r4
 8023540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023544:	080268ac 	.word	0x080268ac
 8023548:	080268bd 	.word	0x080268bd

0802354c <__hi0bits>:
 802354c:	0c03      	lsrs	r3, r0, #16
 802354e:	041b      	lsls	r3, r3, #16
 8023550:	b9d3      	cbnz	r3, 8023588 <__hi0bits+0x3c>
 8023552:	0400      	lsls	r0, r0, #16
 8023554:	2310      	movs	r3, #16
 8023556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802355a:	bf04      	itt	eq
 802355c:	0200      	lsleq	r0, r0, #8
 802355e:	3308      	addeq	r3, #8
 8023560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023564:	bf04      	itt	eq
 8023566:	0100      	lsleq	r0, r0, #4
 8023568:	3304      	addeq	r3, #4
 802356a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802356e:	bf04      	itt	eq
 8023570:	0080      	lsleq	r0, r0, #2
 8023572:	3302      	addeq	r3, #2
 8023574:	2800      	cmp	r0, #0
 8023576:	db05      	blt.n	8023584 <__hi0bits+0x38>
 8023578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802357c:	f103 0301 	add.w	r3, r3, #1
 8023580:	bf08      	it	eq
 8023582:	2320      	moveq	r3, #32
 8023584:	4618      	mov	r0, r3
 8023586:	4770      	bx	lr
 8023588:	2300      	movs	r3, #0
 802358a:	e7e4      	b.n	8023556 <__hi0bits+0xa>

0802358c <__lo0bits>:
 802358c:	6803      	ldr	r3, [r0, #0]
 802358e:	f013 0207 	ands.w	r2, r3, #7
 8023592:	4601      	mov	r1, r0
 8023594:	d00b      	beq.n	80235ae <__lo0bits+0x22>
 8023596:	07da      	lsls	r2, r3, #31
 8023598:	d423      	bmi.n	80235e2 <__lo0bits+0x56>
 802359a:	0798      	lsls	r0, r3, #30
 802359c:	bf49      	itett	mi
 802359e:	085b      	lsrmi	r3, r3, #1
 80235a0:	089b      	lsrpl	r3, r3, #2
 80235a2:	2001      	movmi	r0, #1
 80235a4:	600b      	strmi	r3, [r1, #0]
 80235a6:	bf5c      	itt	pl
 80235a8:	600b      	strpl	r3, [r1, #0]
 80235aa:	2002      	movpl	r0, #2
 80235ac:	4770      	bx	lr
 80235ae:	b298      	uxth	r0, r3
 80235b0:	b9a8      	cbnz	r0, 80235de <__lo0bits+0x52>
 80235b2:	0c1b      	lsrs	r3, r3, #16
 80235b4:	2010      	movs	r0, #16
 80235b6:	b2da      	uxtb	r2, r3
 80235b8:	b90a      	cbnz	r2, 80235be <__lo0bits+0x32>
 80235ba:	3008      	adds	r0, #8
 80235bc:	0a1b      	lsrs	r3, r3, #8
 80235be:	071a      	lsls	r2, r3, #28
 80235c0:	bf04      	itt	eq
 80235c2:	091b      	lsreq	r3, r3, #4
 80235c4:	3004      	addeq	r0, #4
 80235c6:	079a      	lsls	r2, r3, #30
 80235c8:	bf04      	itt	eq
 80235ca:	089b      	lsreq	r3, r3, #2
 80235cc:	3002      	addeq	r0, #2
 80235ce:	07da      	lsls	r2, r3, #31
 80235d0:	d403      	bmi.n	80235da <__lo0bits+0x4e>
 80235d2:	085b      	lsrs	r3, r3, #1
 80235d4:	f100 0001 	add.w	r0, r0, #1
 80235d8:	d005      	beq.n	80235e6 <__lo0bits+0x5a>
 80235da:	600b      	str	r3, [r1, #0]
 80235dc:	4770      	bx	lr
 80235de:	4610      	mov	r0, r2
 80235e0:	e7e9      	b.n	80235b6 <__lo0bits+0x2a>
 80235e2:	2000      	movs	r0, #0
 80235e4:	4770      	bx	lr
 80235e6:	2020      	movs	r0, #32
 80235e8:	4770      	bx	lr
	...

080235ec <__i2b>:
 80235ec:	b510      	push	{r4, lr}
 80235ee:	460c      	mov	r4, r1
 80235f0:	2101      	movs	r1, #1
 80235f2:	f7ff ff03 	bl	80233fc <_Balloc>
 80235f6:	4602      	mov	r2, r0
 80235f8:	b928      	cbnz	r0, 8023606 <__i2b+0x1a>
 80235fa:	4b05      	ldr	r3, [pc, #20]	; (8023610 <__i2b+0x24>)
 80235fc:	4805      	ldr	r0, [pc, #20]	; (8023614 <__i2b+0x28>)
 80235fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8023602:	f7fd fd3b 	bl	802107c <__assert_func>
 8023606:	2301      	movs	r3, #1
 8023608:	6144      	str	r4, [r0, #20]
 802360a:	6103      	str	r3, [r0, #16]
 802360c:	bd10      	pop	{r4, pc}
 802360e:	bf00      	nop
 8023610:	080268ac 	.word	0x080268ac
 8023614:	080268bd 	.word	0x080268bd

08023618 <__multiply>:
 8023618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802361c:	4691      	mov	r9, r2
 802361e:	690a      	ldr	r2, [r1, #16]
 8023620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8023624:	429a      	cmp	r2, r3
 8023626:	bfb8      	it	lt
 8023628:	460b      	movlt	r3, r1
 802362a:	460c      	mov	r4, r1
 802362c:	bfbc      	itt	lt
 802362e:	464c      	movlt	r4, r9
 8023630:	4699      	movlt	r9, r3
 8023632:	6927      	ldr	r7, [r4, #16]
 8023634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8023638:	68a3      	ldr	r3, [r4, #8]
 802363a:	6861      	ldr	r1, [r4, #4]
 802363c:	eb07 060a 	add.w	r6, r7, sl
 8023640:	42b3      	cmp	r3, r6
 8023642:	b085      	sub	sp, #20
 8023644:	bfb8      	it	lt
 8023646:	3101      	addlt	r1, #1
 8023648:	f7ff fed8 	bl	80233fc <_Balloc>
 802364c:	b930      	cbnz	r0, 802365c <__multiply+0x44>
 802364e:	4602      	mov	r2, r0
 8023650:	4b44      	ldr	r3, [pc, #272]	; (8023764 <__multiply+0x14c>)
 8023652:	4845      	ldr	r0, [pc, #276]	; (8023768 <__multiply+0x150>)
 8023654:	f240 115d 	movw	r1, #349	; 0x15d
 8023658:	f7fd fd10 	bl	802107c <__assert_func>
 802365c:	f100 0514 	add.w	r5, r0, #20
 8023660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8023664:	462b      	mov	r3, r5
 8023666:	2200      	movs	r2, #0
 8023668:	4543      	cmp	r3, r8
 802366a:	d321      	bcc.n	80236b0 <__multiply+0x98>
 802366c:	f104 0314 	add.w	r3, r4, #20
 8023670:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8023674:	f109 0314 	add.w	r3, r9, #20
 8023678:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802367c:	9202      	str	r2, [sp, #8]
 802367e:	1b3a      	subs	r2, r7, r4
 8023680:	3a15      	subs	r2, #21
 8023682:	f022 0203 	bic.w	r2, r2, #3
 8023686:	3204      	adds	r2, #4
 8023688:	f104 0115 	add.w	r1, r4, #21
 802368c:	428f      	cmp	r7, r1
 802368e:	bf38      	it	cc
 8023690:	2204      	movcc	r2, #4
 8023692:	9201      	str	r2, [sp, #4]
 8023694:	9a02      	ldr	r2, [sp, #8]
 8023696:	9303      	str	r3, [sp, #12]
 8023698:	429a      	cmp	r2, r3
 802369a:	d80c      	bhi.n	80236b6 <__multiply+0x9e>
 802369c:	2e00      	cmp	r6, #0
 802369e:	dd03      	ble.n	80236a8 <__multiply+0x90>
 80236a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	d05a      	beq.n	802375e <__multiply+0x146>
 80236a8:	6106      	str	r6, [r0, #16]
 80236aa:	b005      	add	sp, #20
 80236ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236b0:	f843 2b04 	str.w	r2, [r3], #4
 80236b4:	e7d8      	b.n	8023668 <__multiply+0x50>
 80236b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80236ba:	f1ba 0f00 	cmp.w	sl, #0
 80236be:	d024      	beq.n	802370a <__multiply+0xf2>
 80236c0:	f104 0e14 	add.w	lr, r4, #20
 80236c4:	46a9      	mov	r9, r5
 80236c6:	f04f 0c00 	mov.w	ip, #0
 80236ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80236ce:	f8d9 1000 	ldr.w	r1, [r9]
 80236d2:	fa1f fb82 	uxth.w	fp, r2
 80236d6:	b289      	uxth	r1, r1
 80236d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80236dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80236e0:	f8d9 2000 	ldr.w	r2, [r9]
 80236e4:	4461      	add	r1, ip
 80236e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80236ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80236ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80236f2:	b289      	uxth	r1, r1
 80236f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80236f8:	4577      	cmp	r7, lr
 80236fa:	f849 1b04 	str.w	r1, [r9], #4
 80236fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8023702:	d8e2      	bhi.n	80236ca <__multiply+0xb2>
 8023704:	9a01      	ldr	r2, [sp, #4]
 8023706:	f845 c002 	str.w	ip, [r5, r2]
 802370a:	9a03      	ldr	r2, [sp, #12]
 802370c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8023710:	3304      	adds	r3, #4
 8023712:	f1b9 0f00 	cmp.w	r9, #0
 8023716:	d020      	beq.n	802375a <__multiply+0x142>
 8023718:	6829      	ldr	r1, [r5, #0]
 802371a:	f104 0c14 	add.w	ip, r4, #20
 802371e:	46ae      	mov	lr, r5
 8023720:	f04f 0a00 	mov.w	sl, #0
 8023724:	f8bc b000 	ldrh.w	fp, [ip]
 8023728:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802372c:	fb09 220b 	mla	r2, r9, fp, r2
 8023730:	4492      	add	sl, r2
 8023732:	b289      	uxth	r1, r1
 8023734:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8023738:	f84e 1b04 	str.w	r1, [lr], #4
 802373c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8023740:	f8be 1000 	ldrh.w	r1, [lr]
 8023744:	0c12      	lsrs	r2, r2, #16
 8023746:	fb09 1102 	mla	r1, r9, r2, r1
 802374a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802374e:	4567      	cmp	r7, ip
 8023750:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8023754:	d8e6      	bhi.n	8023724 <__multiply+0x10c>
 8023756:	9a01      	ldr	r2, [sp, #4]
 8023758:	50a9      	str	r1, [r5, r2]
 802375a:	3504      	adds	r5, #4
 802375c:	e79a      	b.n	8023694 <__multiply+0x7c>
 802375e:	3e01      	subs	r6, #1
 8023760:	e79c      	b.n	802369c <__multiply+0x84>
 8023762:	bf00      	nop
 8023764:	080268ac 	.word	0x080268ac
 8023768:	080268bd 	.word	0x080268bd

0802376c <__pow5mult>:
 802376c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023770:	4615      	mov	r5, r2
 8023772:	f012 0203 	ands.w	r2, r2, #3
 8023776:	4606      	mov	r6, r0
 8023778:	460f      	mov	r7, r1
 802377a:	d007      	beq.n	802378c <__pow5mult+0x20>
 802377c:	4c25      	ldr	r4, [pc, #148]	; (8023814 <__pow5mult+0xa8>)
 802377e:	3a01      	subs	r2, #1
 8023780:	2300      	movs	r3, #0
 8023782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023786:	f7ff fe9b 	bl	80234c0 <__multadd>
 802378a:	4607      	mov	r7, r0
 802378c:	10ad      	asrs	r5, r5, #2
 802378e:	d03d      	beq.n	802380c <__pow5mult+0xa0>
 8023790:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023792:	b97c      	cbnz	r4, 80237b4 <__pow5mult+0x48>
 8023794:	2010      	movs	r0, #16
 8023796:	f7fd fdcb 	bl	8021330 <malloc>
 802379a:	4602      	mov	r2, r0
 802379c:	6270      	str	r0, [r6, #36]	; 0x24
 802379e:	b928      	cbnz	r0, 80237ac <__pow5mult+0x40>
 80237a0:	4b1d      	ldr	r3, [pc, #116]	; (8023818 <__pow5mult+0xac>)
 80237a2:	481e      	ldr	r0, [pc, #120]	; (802381c <__pow5mult+0xb0>)
 80237a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80237a8:	f7fd fc68 	bl	802107c <__assert_func>
 80237ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80237b0:	6004      	str	r4, [r0, #0]
 80237b2:	60c4      	str	r4, [r0, #12]
 80237b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80237b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80237bc:	b94c      	cbnz	r4, 80237d2 <__pow5mult+0x66>
 80237be:	f240 2171 	movw	r1, #625	; 0x271
 80237c2:	4630      	mov	r0, r6
 80237c4:	f7ff ff12 	bl	80235ec <__i2b>
 80237c8:	2300      	movs	r3, #0
 80237ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80237ce:	4604      	mov	r4, r0
 80237d0:	6003      	str	r3, [r0, #0]
 80237d2:	f04f 0900 	mov.w	r9, #0
 80237d6:	07eb      	lsls	r3, r5, #31
 80237d8:	d50a      	bpl.n	80237f0 <__pow5mult+0x84>
 80237da:	4639      	mov	r1, r7
 80237dc:	4622      	mov	r2, r4
 80237de:	4630      	mov	r0, r6
 80237e0:	f7ff ff1a 	bl	8023618 <__multiply>
 80237e4:	4639      	mov	r1, r7
 80237e6:	4680      	mov	r8, r0
 80237e8:	4630      	mov	r0, r6
 80237ea:	f7ff fe47 	bl	802347c <_Bfree>
 80237ee:	4647      	mov	r7, r8
 80237f0:	106d      	asrs	r5, r5, #1
 80237f2:	d00b      	beq.n	802380c <__pow5mult+0xa0>
 80237f4:	6820      	ldr	r0, [r4, #0]
 80237f6:	b938      	cbnz	r0, 8023808 <__pow5mult+0x9c>
 80237f8:	4622      	mov	r2, r4
 80237fa:	4621      	mov	r1, r4
 80237fc:	4630      	mov	r0, r6
 80237fe:	f7ff ff0b 	bl	8023618 <__multiply>
 8023802:	6020      	str	r0, [r4, #0]
 8023804:	f8c0 9000 	str.w	r9, [r0]
 8023808:	4604      	mov	r4, r0
 802380a:	e7e4      	b.n	80237d6 <__pow5mult+0x6a>
 802380c:	4638      	mov	r0, r7
 802380e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023812:	bf00      	nop
 8023814:	08026a10 	.word	0x08026a10
 8023818:	0802683a 	.word	0x0802683a
 802381c:	080268bd 	.word	0x080268bd

08023820 <__lshift>:
 8023820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023824:	460c      	mov	r4, r1
 8023826:	6849      	ldr	r1, [r1, #4]
 8023828:	6923      	ldr	r3, [r4, #16]
 802382a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802382e:	68a3      	ldr	r3, [r4, #8]
 8023830:	4607      	mov	r7, r0
 8023832:	4691      	mov	r9, r2
 8023834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023838:	f108 0601 	add.w	r6, r8, #1
 802383c:	42b3      	cmp	r3, r6
 802383e:	db0b      	blt.n	8023858 <__lshift+0x38>
 8023840:	4638      	mov	r0, r7
 8023842:	f7ff fddb 	bl	80233fc <_Balloc>
 8023846:	4605      	mov	r5, r0
 8023848:	b948      	cbnz	r0, 802385e <__lshift+0x3e>
 802384a:	4602      	mov	r2, r0
 802384c:	4b2a      	ldr	r3, [pc, #168]	; (80238f8 <__lshift+0xd8>)
 802384e:	482b      	ldr	r0, [pc, #172]	; (80238fc <__lshift+0xdc>)
 8023850:	f240 11d9 	movw	r1, #473	; 0x1d9
 8023854:	f7fd fc12 	bl	802107c <__assert_func>
 8023858:	3101      	adds	r1, #1
 802385a:	005b      	lsls	r3, r3, #1
 802385c:	e7ee      	b.n	802383c <__lshift+0x1c>
 802385e:	2300      	movs	r3, #0
 8023860:	f100 0114 	add.w	r1, r0, #20
 8023864:	f100 0210 	add.w	r2, r0, #16
 8023868:	4618      	mov	r0, r3
 802386a:	4553      	cmp	r3, sl
 802386c:	db37      	blt.n	80238de <__lshift+0xbe>
 802386e:	6920      	ldr	r0, [r4, #16]
 8023870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023874:	f104 0314 	add.w	r3, r4, #20
 8023878:	f019 091f 	ands.w	r9, r9, #31
 802387c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023880:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8023884:	d02f      	beq.n	80238e6 <__lshift+0xc6>
 8023886:	f1c9 0e20 	rsb	lr, r9, #32
 802388a:	468a      	mov	sl, r1
 802388c:	f04f 0c00 	mov.w	ip, #0
 8023890:	681a      	ldr	r2, [r3, #0]
 8023892:	fa02 f209 	lsl.w	r2, r2, r9
 8023896:	ea42 020c 	orr.w	r2, r2, ip
 802389a:	f84a 2b04 	str.w	r2, [sl], #4
 802389e:	f853 2b04 	ldr.w	r2, [r3], #4
 80238a2:	4298      	cmp	r0, r3
 80238a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80238a8:	d8f2      	bhi.n	8023890 <__lshift+0x70>
 80238aa:	1b03      	subs	r3, r0, r4
 80238ac:	3b15      	subs	r3, #21
 80238ae:	f023 0303 	bic.w	r3, r3, #3
 80238b2:	3304      	adds	r3, #4
 80238b4:	f104 0215 	add.w	r2, r4, #21
 80238b8:	4290      	cmp	r0, r2
 80238ba:	bf38      	it	cc
 80238bc:	2304      	movcc	r3, #4
 80238be:	f841 c003 	str.w	ip, [r1, r3]
 80238c2:	f1bc 0f00 	cmp.w	ip, #0
 80238c6:	d001      	beq.n	80238cc <__lshift+0xac>
 80238c8:	f108 0602 	add.w	r6, r8, #2
 80238cc:	3e01      	subs	r6, #1
 80238ce:	4638      	mov	r0, r7
 80238d0:	612e      	str	r6, [r5, #16]
 80238d2:	4621      	mov	r1, r4
 80238d4:	f7ff fdd2 	bl	802347c <_Bfree>
 80238d8:	4628      	mov	r0, r5
 80238da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80238de:	f842 0f04 	str.w	r0, [r2, #4]!
 80238e2:	3301      	adds	r3, #1
 80238e4:	e7c1      	b.n	802386a <__lshift+0x4a>
 80238e6:	3904      	subs	r1, #4
 80238e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80238ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80238f0:	4298      	cmp	r0, r3
 80238f2:	d8f9      	bhi.n	80238e8 <__lshift+0xc8>
 80238f4:	e7ea      	b.n	80238cc <__lshift+0xac>
 80238f6:	bf00      	nop
 80238f8:	080268ac 	.word	0x080268ac
 80238fc:	080268bd 	.word	0x080268bd

08023900 <__mcmp>:
 8023900:	b530      	push	{r4, r5, lr}
 8023902:	6902      	ldr	r2, [r0, #16]
 8023904:	690c      	ldr	r4, [r1, #16]
 8023906:	1b12      	subs	r2, r2, r4
 8023908:	d10e      	bne.n	8023928 <__mcmp+0x28>
 802390a:	f100 0314 	add.w	r3, r0, #20
 802390e:	3114      	adds	r1, #20
 8023910:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8023914:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8023918:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802391c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8023920:	42a5      	cmp	r5, r4
 8023922:	d003      	beq.n	802392c <__mcmp+0x2c>
 8023924:	d305      	bcc.n	8023932 <__mcmp+0x32>
 8023926:	2201      	movs	r2, #1
 8023928:	4610      	mov	r0, r2
 802392a:	bd30      	pop	{r4, r5, pc}
 802392c:	4283      	cmp	r3, r0
 802392e:	d3f3      	bcc.n	8023918 <__mcmp+0x18>
 8023930:	e7fa      	b.n	8023928 <__mcmp+0x28>
 8023932:	f04f 32ff 	mov.w	r2, #4294967295
 8023936:	e7f7      	b.n	8023928 <__mcmp+0x28>

08023938 <__mdiff>:
 8023938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802393c:	460c      	mov	r4, r1
 802393e:	4606      	mov	r6, r0
 8023940:	4611      	mov	r1, r2
 8023942:	4620      	mov	r0, r4
 8023944:	4690      	mov	r8, r2
 8023946:	f7ff ffdb 	bl	8023900 <__mcmp>
 802394a:	1e05      	subs	r5, r0, #0
 802394c:	d110      	bne.n	8023970 <__mdiff+0x38>
 802394e:	4629      	mov	r1, r5
 8023950:	4630      	mov	r0, r6
 8023952:	f7ff fd53 	bl	80233fc <_Balloc>
 8023956:	b930      	cbnz	r0, 8023966 <__mdiff+0x2e>
 8023958:	4b3a      	ldr	r3, [pc, #232]	; (8023a44 <__mdiff+0x10c>)
 802395a:	4602      	mov	r2, r0
 802395c:	f240 2132 	movw	r1, #562	; 0x232
 8023960:	4839      	ldr	r0, [pc, #228]	; (8023a48 <__mdiff+0x110>)
 8023962:	f7fd fb8b 	bl	802107c <__assert_func>
 8023966:	2301      	movs	r3, #1
 8023968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802396c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023970:	bfa4      	itt	ge
 8023972:	4643      	movge	r3, r8
 8023974:	46a0      	movge	r8, r4
 8023976:	4630      	mov	r0, r6
 8023978:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802397c:	bfa6      	itte	ge
 802397e:	461c      	movge	r4, r3
 8023980:	2500      	movge	r5, #0
 8023982:	2501      	movlt	r5, #1
 8023984:	f7ff fd3a 	bl	80233fc <_Balloc>
 8023988:	b920      	cbnz	r0, 8023994 <__mdiff+0x5c>
 802398a:	4b2e      	ldr	r3, [pc, #184]	; (8023a44 <__mdiff+0x10c>)
 802398c:	4602      	mov	r2, r0
 802398e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8023992:	e7e5      	b.n	8023960 <__mdiff+0x28>
 8023994:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8023998:	6926      	ldr	r6, [r4, #16]
 802399a:	60c5      	str	r5, [r0, #12]
 802399c:	f104 0914 	add.w	r9, r4, #20
 80239a0:	f108 0514 	add.w	r5, r8, #20
 80239a4:	f100 0e14 	add.w	lr, r0, #20
 80239a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80239ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80239b0:	f108 0210 	add.w	r2, r8, #16
 80239b4:	46f2      	mov	sl, lr
 80239b6:	2100      	movs	r1, #0
 80239b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80239bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80239c0:	fa1f f883 	uxth.w	r8, r3
 80239c4:	fa11 f18b 	uxtah	r1, r1, fp
 80239c8:	0c1b      	lsrs	r3, r3, #16
 80239ca:	eba1 0808 	sub.w	r8, r1, r8
 80239ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80239d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80239d6:	fa1f f888 	uxth.w	r8, r8
 80239da:	1419      	asrs	r1, r3, #16
 80239dc:	454e      	cmp	r6, r9
 80239de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80239e2:	f84a 3b04 	str.w	r3, [sl], #4
 80239e6:	d8e7      	bhi.n	80239b8 <__mdiff+0x80>
 80239e8:	1b33      	subs	r3, r6, r4
 80239ea:	3b15      	subs	r3, #21
 80239ec:	f023 0303 	bic.w	r3, r3, #3
 80239f0:	3304      	adds	r3, #4
 80239f2:	3415      	adds	r4, #21
 80239f4:	42a6      	cmp	r6, r4
 80239f6:	bf38      	it	cc
 80239f8:	2304      	movcc	r3, #4
 80239fa:	441d      	add	r5, r3
 80239fc:	4473      	add	r3, lr
 80239fe:	469e      	mov	lr, r3
 8023a00:	462e      	mov	r6, r5
 8023a02:	4566      	cmp	r6, ip
 8023a04:	d30e      	bcc.n	8023a24 <__mdiff+0xec>
 8023a06:	f10c 0203 	add.w	r2, ip, #3
 8023a0a:	1b52      	subs	r2, r2, r5
 8023a0c:	f022 0203 	bic.w	r2, r2, #3
 8023a10:	3d03      	subs	r5, #3
 8023a12:	45ac      	cmp	ip, r5
 8023a14:	bf38      	it	cc
 8023a16:	2200      	movcc	r2, #0
 8023a18:	441a      	add	r2, r3
 8023a1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8023a1e:	b17b      	cbz	r3, 8023a40 <__mdiff+0x108>
 8023a20:	6107      	str	r7, [r0, #16]
 8023a22:	e7a3      	b.n	802396c <__mdiff+0x34>
 8023a24:	f856 8b04 	ldr.w	r8, [r6], #4
 8023a28:	fa11 f288 	uxtah	r2, r1, r8
 8023a2c:	1414      	asrs	r4, r2, #16
 8023a2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8023a32:	b292      	uxth	r2, r2
 8023a34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8023a38:	f84e 2b04 	str.w	r2, [lr], #4
 8023a3c:	1421      	asrs	r1, r4, #16
 8023a3e:	e7e0      	b.n	8023a02 <__mdiff+0xca>
 8023a40:	3f01      	subs	r7, #1
 8023a42:	e7ea      	b.n	8023a1a <__mdiff+0xe2>
 8023a44:	080268ac 	.word	0x080268ac
 8023a48:	080268bd 	.word	0x080268bd

08023a4c <__d2b>:
 8023a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023a50:	4689      	mov	r9, r1
 8023a52:	2101      	movs	r1, #1
 8023a54:	ec57 6b10 	vmov	r6, r7, d0
 8023a58:	4690      	mov	r8, r2
 8023a5a:	f7ff fccf 	bl	80233fc <_Balloc>
 8023a5e:	4604      	mov	r4, r0
 8023a60:	b930      	cbnz	r0, 8023a70 <__d2b+0x24>
 8023a62:	4602      	mov	r2, r0
 8023a64:	4b25      	ldr	r3, [pc, #148]	; (8023afc <__d2b+0xb0>)
 8023a66:	4826      	ldr	r0, [pc, #152]	; (8023b00 <__d2b+0xb4>)
 8023a68:	f240 310a 	movw	r1, #778	; 0x30a
 8023a6c:	f7fd fb06 	bl	802107c <__assert_func>
 8023a70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8023a74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023a78:	bb35      	cbnz	r5, 8023ac8 <__d2b+0x7c>
 8023a7a:	2e00      	cmp	r6, #0
 8023a7c:	9301      	str	r3, [sp, #4]
 8023a7e:	d028      	beq.n	8023ad2 <__d2b+0x86>
 8023a80:	4668      	mov	r0, sp
 8023a82:	9600      	str	r6, [sp, #0]
 8023a84:	f7ff fd82 	bl	802358c <__lo0bits>
 8023a88:	9900      	ldr	r1, [sp, #0]
 8023a8a:	b300      	cbz	r0, 8023ace <__d2b+0x82>
 8023a8c:	9a01      	ldr	r2, [sp, #4]
 8023a8e:	f1c0 0320 	rsb	r3, r0, #32
 8023a92:	fa02 f303 	lsl.w	r3, r2, r3
 8023a96:	430b      	orrs	r3, r1
 8023a98:	40c2      	lsrs	r2, r0
 8023a9a:	6163      	str	r3, [r4, #20]
 8023a9c:	9201      	str	r2, [sp, #4]
 8023a9e:	9b01      	ldr	r3, [sp, #4]
 8023aa0:	61a3      	str	r3, [r4, #24]
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	bf14      	ite	ne
 8023aa6:	2202      	movne	r2, #2
 8023aa8:	2201      	moveq	r2, #1
 8023aaa:	6122      	str	r2, [r4, #16]
 8023aac:	b1d5      	cbz	r5, 8023ae4 <__d2b+0x98>
 8023aae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023ab2:	4405      	add	r5, r0
 8023ab4:	f8c9 5000 	str.w	r5, [r9]
 8023ab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023abc:	f8c8 0000 	str.w	r0, [r8]
 8023ac0:	4620      	mov	r0, r4
 8023ac2:	b003      	add	sp, #12
 8023ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023acc:	e7d5      	b.n	8023a7a <__d2b+0x2e>
 8023ace:	6161      	str	r1, [r4, #20]
 8023ad0:	e7e5      	b.n	8023a9e <__d2b+0x52>
 8023ad2:	a801      	add	r0, sp, #4
 8023ad4:	f7ff fd5a 	bl	802358c <__lo0bits>
 8023ad8:	9b01      	ldr	r3, [sp, #4]
 8023ada:	6163      	str	r3, [r4, #20]
 8023adc:	2201      	movs	r2, #1
 8023ade:	6122      	str	r2, [r4, #16]
 8023ae0:	3020      	adds	r0, #32
 8023ae2:	e7e3      	b.n	8023aac <__d2b+0x60>
 8023ae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023ae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023aec:	f8c9 0000 	str.w	r0, [r9]
 8023af0:	6918      	ldr	r0, [r3, #16]
 8023af2:	f7ff fd2b 	bl	802354c <__hi0bits>
 8023af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023afa:	e7df      	b.n	8023abc <__d2b+0x70>
 8023afc:	080268ac 	.word	0x080268ac
 8023b00:	080268bd 	.word	0x080268bd

08023b04 <_calloc_r>:
 8023b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023b06:	fba1 2402 	umull	r2, r4, r1, r2
 8023b0a:	b94c      	cbnz	r4, 8023b20 <_calloc_r+0x1c>
 8023b0c:	4611      	mov	r1, r2
 8023b0e:	9201      	str	r2, [sp, #4]
 8023b10:	f7fd fca0 	bl	8021454 <_malloc_r>
 8023b14:	9a01      	ldr	r2, [sp, #4]
 8023b16:	4605      	mov	r5, r0
 8023b18:	b930      	cbnz	r0, 8023b28 <_calloc_r+0x24>
 8023b1a:	4628      	mov	r0, r5
 8023b1c:	b003      	add	sp, #12
 8023b1e:	bd30      	pop	{r4, r5, pc}
 8023b20:	220c      	movs	r2, #12
 8023b22:	6002      	str	r2, [r0, #0]
 8023b24:	2500      	movs	r5, #0
 8023b26:	e7f8      	b.n	8023b1a <_calloc_r+0x16>
 8023b28:	4621      	mov	r1, r4
 8023b2a:	f7fd fc1f 	bl	802136c <memset>
 8023b2e:	e7f4      	b.n	8023b1a <_calloc_r+0x16>

08023b30 <_realloc_r>:
 8023b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b34:	4680      	mov	r8, r0
 8023b36:	4614      	mov	r4, r2
 8023b38:	460e      	mov	r6, r1
 8023b3a:	b921      	cbnz	r1, 8023b46 <_realloc_r+0x16>
 8023b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023b40:	4611      	mov	r1, r2
 8023b42:	f7fd bc87 	b.w	8021454 <_malloc_r>
 8023b46:	b92a      	cbnz	r2, 8023b54 <_realloc_r+0x24>
 8023b48:	f7fd fc18 	bl	802137c <_free_r>
 8023b4c:	4625      	mov	r5, r4
 8023b4e:	4628      	mov	r0, r5
 8023b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b54:	f000 f9bc 	bl	8023ed0 <_malloc_usable_size_r>
 8023b58:	4284      	cmp	r4, r0
 8023b5a:	4607      	mov	r7, r0
 8023b5c:	d802      	bhi.n	8023b64 <_realloc_r+0x34>
 8023b5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023b62:	d812      	bhi.n	8023b8a <_realloc_r+0x5a>
 8023b64:	4621      	mov	r1, r4
 8023b66:	4640      	mov	r0, r8
 8023b68:	f7fd fc74 	bl	8021454 <_malloc_r>
 8023b6c:	4605      	mov	r5, r0
 8023b6e:	2800      	cmp	r0, #0
 8023b70:	d0ed      	beq.n	8023b4e <_realloc_r+0x1e>
 8023b72:	42bc      	cmp	r4, r7
 8023b74:	4622      	mov	r2, r4
 8023b76:	4631      	mov	r1, r6
 8023b78:	bf28      	it	cs
 8023b7a:	463a      	movcs	r2, r7
 8023b7c:	f7fd fbe8 	bl	8021350 <memcpy>
 8023b80:	4631      	mov	r1, r6
 8023b82:	4640      	mov	r0, r8
 8023b84:	f7fd fbfa 	bl	802137c <_free_r>
 8023b88:	e7e1      	b.n	8023b4e <_realloc_r+0x1e>
 8023b8a:	4635      	mov	r5, r6
 8023b8c:	e7df      	b.n	8023b4e <_realloc_r+0x1e>

08023b8e <__ssputs_r>:
 8023b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b92:	688e      	ldr	r6, [r1, #8]
 8023b94:	429e      	cmp	r6, r3
 8023b96:	4682      	mov	sl, r0
 8023b98:	460c      	mov	r4, r1
 8023b9a:	4690      	mov	r8, r2
 8023b9c:	461f      	mov	r7, r3
 8023b9e:	d838      	bhi.n	8023c12 <__ssputs_r+0x84>
 8023ba0:	898a      	ldrh	r2, [r1, #12]
 8023ba2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023ba6:	d032      	beq.n	8023c0e <__ssputs_r+0x80>
 8023ba8:	6825      	ldr	r5, [r4, #0]
 8023baa:	6909      	ldr	r1, [r1, #16]
 8023bac:	eba5 0901 	sub.w	r9, r5, r1
 8023bb0:	6965      	ldr	r5, [r4, #20]
 8023bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023bba:	3301      	adds	r3, #1
 8023bbc:	444b      	add	r3, r9
 8023bbe:	106d      	asrs	r5, r5, #1
 8023bc0:	429d      	cmp	r5, r3
 8023bc2:	bf38      	it	cc
 8023bc4:	461d      	movcc	r5, r3
 8023bc6:	0553      	lsls	r3, r2, #21
 8023bc8:	d531      	bpl.n	8023c2e <__ssputs_r+0xa0>
 8023bca:	4629      	mov	r1, r5
 8023bcc:	f7fd fc42 	bl	8021454 <_malloc_r>
 8023bd0:	4606      	mov	r6, r0
 8023bd2:	b950      	cbnz	r0, 8023bea <__ssputs_r+0x5c>
 8023bd4:	230c      	movs	r3, #12
 8023bd6:	f8ca 3000 	str.w	r3, [sl]
 8023bda:	89a3      	ldrh	r3, [r4, #12]
 8023bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023be0:	81a3      	strh	r3, [r4, #12]
 8023be2:	f04f 30ff 	mov.w	r0, #4294967295
 8023be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bea:	6921      	ldr	r1, [r4, #16]
 8023bec:	464a      	mov	r2, r9
 8023bee:	f7fd fbaf 	bl	8021350 <memcpy>
 8023bf2:	89a3      	ldrh	r3, [r4, #12]
 8023bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023bfc:	81a3      	strh	r3, [r4, #12]
 8023bfe:	6126      	str	r6, [r4, #16]
 8023c00:	6165      	str	r5, [r4, #20]
 8023c02:	444e      	add	r6, r9
 8023c04:	eba5 0509 	sub.w	r5, r5, r9
 8023c08:	6026      	str	r6, [r4, #0]
 8023c0a:	60a5      	str	r5, [r4, #8]
 8023c0c:	463e      	mov	r6, r7
 8023c0e:	42be      	cmp	r6, r7
 8023c10:	d900      	bls.n	8023c14 <__ssputs_r+0x86>
 8023c12:	463e      	mov	r6, r7
 8023c14:	6820      	ldr	r0, [r4, #0]
 8023c16:	4632      	mov	r2, r6
 8023c18:	4641      	mov	r1, r8
 8023c1a:	f7ff fbc9 	bl	80233b0 <memmove>
 8023c1e:	68a3      	ldr	r3, [r4, #8]
 8023c20:	1b9b      	subs	r3, r3, r6
 8023c22:	60a3      	str	r3, [r4, #8]
 8023c24:	6823      	ldr	r3, [r4, #0]
 8023c26:	4433      	add	r3, r6
 8023c28:	6023      	str	r3, [r4, #0]
 8023c2a:	2000      	movs	r0, #0
 8023c2c:	e7db      	b.n	8023be6 <__ssputs_r+0x58>
 8023c2e:	462a      	mov	r2, r5
 8023c30:	f7ff ff7e 	bl	8023b30 <_realloc_r>
 8023c34:	4606      	mov	r6, r0
 8023c36:	2800      	cmp	r0, #0
 8023c38:	d1e1      	bne.n	8023bfe <__ssputs_r+0x70>
 8023c3a:	6921      	ldr	r1, [r4, #16]
 8023c3c:	4650      	mov	r0, sl
 8023c3e:	f7fd fb9d 	bl	802137c <_free_r>
 8023c42:	e7c7      	b.n	8023bd4 <__ssputs_r+0x46>

08023c44 <_svfiprintf_r>:
 8023c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c48:	4698      	mov	r8, r3
 8023c4a:	898b      	ldrh	r3, [r1, #12]
 8023c4c:	061b      	lsls	r3, r3, #24
 8023c4e:	b09d      	sub	sp, #116	; 0x74
 8023c50:	4607      	mov	r7, r0
 8023c52:	460d      	mov	r5, r1
 8023c54:	4614      	mov	r4, r2
 8023c56:	d50e      	bpl.n	8023c76 <_svfiprintf_r+0x32>
 8023c58:	690b      	ldr	r3, [r1, #16]
 8023c5a:	b963      	cbnz	r3, 8023c76 <_svfiprintf_r+0x32>
 8023c5c:	2140      	movs	r1, #64	; 0x40
 8023c5e:	f7fd fbf9 	bl	8021454 <_malloc_r>
 8023c62:	6028      	str	r0, [r5, #0]
 8023c64:	6128      	str	r0, [r5, #16]
 8023c66:	b920      	cbnz	r0, 8023c72 <_svfiprintf_r+0x2e>
 8023c68:	230c      	movs	r3, #12
 8023c6a:	603b      	str	r3, [r7, #0]
 8023c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8023c70:	e0d1      	b.n	8023e16 <_svfiprintf_r+0x1d2>
 8023c72:	2340      	movs	r3, #64	; 0x40
 8023c74:	616b      	str	r3, [r5, #20]
 8023c76:	2300      	movs	r3, #0
 8023c78:	9309      	str	r3, [sp, #36]	; 0x24
 8023c7a:	2320      	movs	r3, #32
 8023c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8023c84:	2330      	movs	r3, #48	; 0x30
 8023c86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023e30 <_svfiprintf_r+0x1ec>
 8023c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023c8e:	f04f 0901 	mov.w	r9, #1
 8023c92:	4623      	mov	r3, r4
 8023c94:	469a      	mov	sl, r3
 8023c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023c9a:	b10a      	cbz	r2, 8023ca0 <_svfiprintf_r+0x5c>
 8023c9c:	2a25      	cmp	r2, #37	; 0x25
 8023c9e:	d1f9      	bne.n	8023c94 <_svfiprintf_r+0x50>
 8023ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8023ca4:	d00b      	beq.n	8023cbe <_svfiprintf_r+0x7a>
 8023ca6:	465b      	mov	r3, fp
 8023ca8:	4622      	mov	r2, r4
 8023caa:	4629      	mov	r1, r5
 8023cac:	4638      	mov	r0, r7
 8023cae:	f7ff ff6e 	bl	8023b8e <__ssputs_r>
 8023cb2:	3001      	adds	r0, #1
 8023cb4:	f000 80aa 	beq.w	8023e0c <_svfiprintf_r+0x1c8>
 8023cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023cba:	445a      	add	r2, fp
 8023cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8023cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	f000 80a2 	beq.w	8023e0c <_svfiprintf_r+0x1c8>
 8023cc8:	2300      	movs	r3, #0
 8023cca:	f04f 32ff 	mov.w	r2, #4294967295
 8023cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023cd2:	f10a 0a01 	add.w	sl, sl, #1
 8023cd6:	9304      	str	r3, [sp, #16]
 8023cd8:	9307      	str	r3, [sp, #28]
 8023cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023cde:	931a      	str	r3, [sp, #104]	; 0x68
 8023ce0:	4654      	mov	r4, sl
 8023ce2:	2205      	movs	r2, #5
 8023ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023ce8:	4851      	ldr	r0, [pc, #324]	; (8023e30 <_svfiprintf_r+0x1ec>)
 8023cea:	f7dc fb01 	bl	80002f0 <memchr>
 8023cee:	9a04      	ldr	r2, [sp, #16]
 8023cf0:	b9d8      	cbnz	r0, 8023d2a <_svfiprintf_r+0xe6>
 8023cf2:	06d0      	lsls	r0, r2, #27
 8023cf4:	bf44      	itt	mi
 8023cf6:	2320      	movmi	r3, #32
 8023cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023cfc:	0711      	lsls	r1, r2, #28
 8023cfe:	bf44      	itt	mi
 8023d00:	232b      	movmi	r3, #43	; 0x2b
 8023d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023d06:	f89a 3000 	ldrb.w	r3, [sl]
 8023d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8023d0c:	d015      	beq.n	8023d3a <_svfiprintf_r+0xf6>
 8023d0e:	9a07      	ldr	r2, [sp, #28]
 8023d10:	4654      	mov	r4, sl
 8023d12:	2000      	movs	r0, #0
 8023d14:	f04f 0c0a 	mov.w	ip, #10
 8023d18:	4621      	mov	r1, r4
 8023d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023d1e:	3b30      	subs	r3, #48	; 0x30
 8023d20:	2b09      	cmp	r3, #9
 8023d22:	d94e      	bls.n	8023dc2 <_svfiprintf_r+0x17e>
 8023d24:	b1b0      	cbz	r0, 8023d54 <_svfiprintf_r+0x110>
 8023d26:	9207      	str	r2, [sp, #28]
 8023d28:	e014      	b.n	8023d54 <_svfiprintf_r+0x110>
 8023d2a:	eba0 0308 	sub.w	r3, r0, r8
 8023d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8023d32:	4313      	orrs	r3, r2
 8023d34:	9304      	str	r3, [sp, #16]
 8023d36:	46a2      	mov	sl, r4
 8023d38:	e7d2      	b.n	8023ce0 <_svfiprintf_r+0x9c>
 8023d3a:	9b03      	ldr	r3, [sp, #12]
 8023d3c:	1d19      	adds	r1, r3, #4
 8023d3e:	681b      	ldr	r3, [r3, #0]
 8023d40:	9103      	str	r1, [sp, #12]
 8023d42:	2b00      	cmp	r3, #0
 8023d44:	bfbb      	ittet	lt
 8023d46:	425b      	neglt	r3, r3
 8023d48:	f042 0202 	orrlt.w	r2, r2, #2
 8023d4c:	9307      	strge	r3, [sp, #28]
 8023d4e:	9307      	strlt	r3, [sp, #28]
 8023d50:	bfb8      	it	lt
 8023d52:	9204      	strlt	r2, [sp, #16]
 8023d54:	7823      	ldrb	r3, [r4, #0]
 8023d56:	2b2e      	cmp	r3, #46	; 0x2e
 8023d58:	d10c      	bne.n	8023d74 <_svfiprintf_r+0x130>
 8023d5a:	7863      	ldrb	r3, [r4, #1]
 8023d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8023d5e:	d135      	bne.n	8023dcc <_svfiprintf_r+0x188>
 8023d60:	9b03      	ldr	r3, [sp, #12]
 8023d62:	1d1a      	adds	r2, r3, #4
 8023d64:	681b      	ldr	r3, [r3, #0]
 8023d66:	9203      	str	r2, [sp, #12]
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	bfb8      	it	lt
 8023d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8023d70:	3402      	adds	r4, #2
 8023d72:	9305      	str	r3, [sp, #20]
 8023d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023e40 <_svfiprintf_r+0x1fc>
 8023d78:	7821      	ldrb	r1, [r4, #0]
 8023d7a:	2203      	movs	r2, #3
 8023d7c:	4650      	mov	r0, sl
 8023d7e:	f7dc fab7 	bl	80002f0 <memchr>
 8023d82:	b140      	cbz	r0, 8023d96 <_svfiprintf_r+0x152>
 8023d84:	2340      	movs	r3, #64	; 0x40
 8023d86:	eba0 000a 	sub.w	r0, r0, sl
 8023d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8023d8e:	9b04      	ldr	r3, [sp, #16]
 8023d90:	4303      	orrs	r3, r0
 8023d92:	3401      	adds	r4, #1
 8023d94:	9304      	str	r3, [sp, #16]
 8023d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d9a:	4826      	ldr	r0, [pc, #152]	; (8023e34 <_svfiprintf_r+0x1f0>)
 8023d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023da0:	2206      	movs	r2, #6
 8023da2:	f7dc faa5 	bl	80002f0 <memchr>
 8023da6:	2800      	cmp	r0, #0
 8023da8:	d038      	beq.n	8023e1c <_svfiprintf_r+0x1d8>
 8023daa:	4b23      	ldr	r3, [pc, #140]	; (8023e38 <_svfiprintf_r+0x1f4>)
 8023dac:	bb1b      	cbnz	r3, 8023df6 <_svfiprintf_r+0x1b2>
 8023dae:	9b03      	ldr	r3, [sp, #12]
 8023db0:	3307      	adds	r3, #7
 8023db2:	f023 0307 	bic.w	r3, r3, #7
 8023db6:	3308      	adds	r3, #8
 8023db8:	9303      	str	r3, [sp, #12]
 8023dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dbc:	4433      	add	r3, r6
 8023dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8023dc0:	e767      	b.n	8023c92 <_svfiprintf_r+0x4e>
 8023dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8023dc6:	460c      	mov	r4, r1
 8023dc8:	2001      	movs	r0, #1
 8023dca:	e7a5      	b.n	8023d18 <_svfiprintf_r+0xd4>
 8023dcc:	2300      	movs	r3, #0
 8023dce:	3401      	adds	r4, #1
 8023dd0:	9305      	str	r3, [sp, #20]
 8023dd2:	4619      	mov	r1, r3
 8023dd4:	f04f 0c0a 	mov.w	ip, #10
 8023dd8:	4620      	mov	r0, r4
 8023dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023dde:	3a30      	subs	r2, #48	; 0x30
 8023de0:	2a09      	cmp	r2, #9
 8023de2:	d903      	bls.n	8023dec <_svfiprintf_r+0x1a8>
 8023de4:	2b00      	cmp	r3, #0
 8023de6:	d0c5      	beq.n	8023d74 <_svfiprintf_r+0x130>
 8023de8:	9105      	str	r1, [sp, #20]
 8023dea:	e7c3      	b.n	8023d74 <_svfiprintf_r+0x130>
 8023dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8023df0:	4604      	mov	r4, r0
 8023df2:	2301      	movs	r3, #1
 8023df4:	e7f0      	b.n	8023dd8 <_svfiprintf_r+0x194>
 8023df6:	ab03      	add	r3, sp, #12
 8023df8:	9300      	str	r3, [sp, #0]
 8023dfa:	462a      	mov	r2, r5
 8023dfc:	4b0f      	ldr	r3, [pc, #60]	; (8023e3c <_svfiprintf_r+0x1f8>)
 8023dfe:	a904      	add	r1, sp, #16
 8023e00:	4638      	mov	r0, r7
 8023e02:	f7fd fd85 	bl	8021910 <_printf_float>
 8023e06:	1c42      	adds	r2, r0, #1
 8023e08:	4606      	mov	r6, r0
 8023e0a:	d1d6      	bne.n	8023dba <_svfiprintf_r+0x176>
 8023e0c:	89ab      	ldrh	r3, [r5, #12]
 8023e0e:	065b      	lsls	r3, r3, #25
 8023e10:	f53f af2c 	bmi.w	8023c6c <_svfiprintf_r+0x28>
 8023e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023e16:	b01d      	add	sp, #116	; 0x74
 8023e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e1c:	ab03      	add	r3, sp, #12
 8023e1e:	9300      	str	r3, [sp, #0]
 8023e20:	462a      	mov	r2, r5
 8023e22:	4b06      	ldr	r3, [pc, #24]	; (8023e3c <_svfiprintf_r+0x1f8>)
 8023e24:	a904      	add	r1, sp, #16
 8023e26:	4638      	mov	r0, r7
 8023e28:	f7fd fffe 	bl	8021e28 <_printf_i>
 8023e2c:	e7eb      	b.n	8023e06 <_svfiprintf_r+0x1c2>
 8023e2e:	bf00      	nop
 8023e30:	080266e4 	.word	0x080266e4
 8023e34:	080266ee 	.word	0x080266ee
 8023e38:	08021911 	.word	0x08021911
 8023e3c:	08023b8f 	.word	0x08023b8f
 8023e40:	080266ea 	.word	0x080266ea

08023e44 <_read_r>:
 8023e44:	b538      	push	{r3, r4, r5, lr}
 8023e46:	4d07      	ldr	r5, [pc, #28]	; (8023e64 <_read_r+0x20>)
 8023e48:	4604      	mov	r4, r0
 8023e4a:	4608      	mov	r0, r1
 8023e4c:	4611      	mov	r1, r2
 8023e4e:	2200      	movs	r2, #0
 8023e50:	602a      	str	r2, [r5, #0]
 8023e52:	461a      	mov	r2, r3
 8023e54:	f7df fe34 	bl	8003ac0 <_read>
 8023e58:	1c43      	adds	r3, r0, #1
 8023e5a:	d102      	bne.n	8023e62 <_read_r+0x1e>
 8023e5c:	682b      	ldr	r3, [r5, #0]
 8023e5e:	b103      	cbz	r3, 8023e62 <_read_r+0x1e>
 8023e60:	6023      	str	r3, [r4, #0]
 8023e62:	bd38      	pop	{r3, r4, r5, pc}
 8023e64:	20007480 	.word	0x20007480

08023e68 <_fstat_r>:
 8023e68:	b538      	push	{r3, r4, r5, lr}
 8023e6a:	4d07      	ldr	r5, [pc, #28]	; (8023e88 <_fstat_r+0x20>)
 8023e6c:	2300      	movs	r3, #0
 8023e6e:	4604      	mov	r4, r0
 8023e70:	4608      	mov	r0, r1
 8023e72:	4611      	mov	r1, r2
 8023e74:	602b      	str	r3, [r5, #0]
 8023e76:	f7df fe68 	bl	8003b4a <_fstat>
 8023e7a:	1c43      	adds	r3, r0, #1
 8023e7c:	d102      	bne.n	8023e84 <_fstat_r+0x1c>
 8023e7e:	682b      	ldr	r3, [r5, #0]
 8023e80:	b103      	cbz	r3, 8023e84 <_fstat_r+0x1c>
 8023e82:	6023      	str	r3, [r4, #0]
 8023e84:	bd38      	pop	{r3, r4, r5, pc}
 8023e86:	bf00      	nop
 8023e88:	20007480 	.word	0x20007480

08023e8c <_isatty_r>:
 8023e8c:	b538      	push	{r3, r4, r5, lr}
 8023e8e:	4d06      	ldr	r5, [pc, #24]	; (8023ea8 <_isatty_r+0x1c>)
 8023e90:	2300      	movs	r3, #0
 8023e92:	4604      	mov	r4, r0
 8023e94:	4608      	mov	r0, r1
 8023e96:	602b      	str	r3, [r5, #0]
 8023e98:	f7df fe67 	bl	8003b6a <_isatty>
 8023e9c:	1c43      	adds	r3, r0, #1
 8023e9e:	d102      	bne.n	8023ea6 <_isatty_r+0x1a>
 8023ea0:	682b      	ldr	r3, [r5, #0]
 8023ea2:	b103      	cbz	r3, 8023ea6 <_isatty_r+0x1a>
 8023ea4:	6023      	str	r3, [r4, #0]
 8023ea6:	bd38      	pop	{r3, r4, r5, pc}
 8023ea8:	20007480 	.word	0x20007480

08023eac <__ascii_mbtowc>:
 8023eac:	b082      	sub	sp, #8
 8023eae:	b901      	cbnz	r1, 8023eb2 <__ascii_mbtowc+0x6>
 8023eb0:	a901      	add	r1, sp, #4
 8023eb2:	b142      	cbz	r2, 8023ec6 <__ascii_mbtowc+0x1a>
 8023eb4:	b14b      	cbz	r3, 8023eca <__ascii_mbtowc+0x1e>
 8023eb6:	7813      	ldrb	r3, [r2, #0]
 8023eb8:	600b      	str	r3, [r1, #0]
 8023eba:	7812      	ldrb	r2, [r2, #0]
 8023ebc:	1e10      	subs	r0, r2, #0
 8023ebe:	bf18      	it	ne
 8023ec0:	2001      	movne	r0, #1
 8023ec2:	b002      	add	sp, #8
 8023ec4:	4770      	bx	lr
 8023ec6:	4610      	mov	r0, r2
 8023ec8:	e7fb      	b.n	8023ec2 <__ascii_mbtowc+0x16>
 8023eca:	f06f 0001 	mvn.w	r0, #1
 8023ece:	e7f8      	b.n	8023ec2 <__ascii_mbtowc+0x16>

08023ed0 <_malloc_usable_size_r>:
 8023ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ed4:	1f18      	subs	r0, r3, #4
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	bfbc      	itt	lt
 8023eda:	580b      	ldrlt	r3, [r1, r0]
 8023edc:	18c0      	addlt	r0, r0, r3
 8023ede:	4770      	bx	lr

08023ee0 <__ascii_wctomb>:
 8023ee0:	b149      	cbz	r1, 8023ef6 <__ascii_wctomb+0x16>
 8023ee2:	2aff      	cmp	r2, #255	; 0xff
 8023ee4:	bf85      	ittet	hi
 8023ee6:	238a      	movhi	r3, #138	; 0x8a
 8023ee8:	6003      	strhi	r3, [r0, #0]
 8023eea:	700a      	strbls	r2, [r1, #0]
 8023eec:	f04f 30ff 	movhi.w	r0, #4294967295
 8023ef0:	bf98      	it	ls
 8023ef2:	2001      	movls	r0, #1
 8023ef4:	4770      	bx	lr
 8023ef6:	4608      	mov	r0, r1
 8023ef8:	4770      	bx	lr
	...

08023efc <_init>:
 8023efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023efe:	bf00      	nop
 8023f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f02:	bc08      	pop	{r3}
 8023f04:	469e      	mov	lr, r3
 8023f06:	4770      	bx	lr

08023f08 <_fini>:
 8023f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f0a:	bf00      	nop
 8023f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f0e:	bc08      	pop	{r3}
 8023f10:	469e      	mov	lr, r3
 8023f12:	4770      	bx	lr
